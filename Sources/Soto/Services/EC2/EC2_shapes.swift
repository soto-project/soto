//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_spi(SotoInternal) import SotoCore

extension EC2 {
    // MARK: Enums

    public enum AcceleratorManufacturer: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case amazonWebServices = "amazon-web-services"
        case amd = "amd"
        case habana = "habana"
        case nvidia = "nvidia"
        case xilinx = "xilinx"
        public var description: String { return self.rawValue }
    }

    public enum AcceleratorName: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case a100 = "a100"
        case a10g = "a10g"
        case h100 = "h100"
        case inferentia = "inferentia"
        case k520 = "k520"
        case k80 = "k80"
        case m60 = "m60"
        case radeonProV520 = "radeon-pro-v520"
        case t4 = "t4"
        case t4g = "t4g"
        case v100 = "v100"
        case vu9p = "vu9p"
        public var description: String { return self.rawValue }
    }

    public enum AcceleratorType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case fpga = "fpga"
        case gpu = "gpu"
        case inference = "inference"
        public var description: String { return self.rawValue }
    }

    public enum AccountAttributeName: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case defaultVpc = "default-vpc"
        case supportedPlatforms = "supported-platforms"
        public var description: String { return self.rawValue }
    }

    public enum ActivityStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case error = "error"
        case fulfilled = "fulfilled"
        case pendingFulfillment = "pending_fulfillment"
        case pendingTermination = "pending_termination"
        public var description: String { return self.rawValue }
    }

    public enum AddressAttributeName: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case domainName = "domain-name"
        public var description: String { return self.rawValue }
    }

    public enum AddressFamily: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ipv4 = "ipv4"
        case ipv6 = "ipv6"
        public var description: String { return self.rawValue }
    }

    public enum AddressTransferStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case accepted = "accepted"
        case disabled = "disabled"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public enum Affinity: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case `default` = "default"
        case host = "host"
        public var description: String { return self.rawValue }
    }

    public enum AllocationState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case available = "available"
        case pending = "pending"
        case permanentFailure = "permanent-failure"
        case released = "released"
        case releasedPermanentFailure = "released-permanent-failure"
        case underAssessment = "under-assessment"
        public var description: String { return self.rawValue }
    }

    public enum AllocationStrategy: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case capacityOptimized = "capacityOptimized"
        case capacityOptimizedPrioritized = "capacityOptimizedPrioritized"
        case diversified = "diversified"
        case lowestPrice = "lowestPrice"
        case priceCapacityOptimized = "priceCapacityOptimized"
        public var description: String { return self.rawValue }
    }

    public enum AllocationType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case used = "used"
        public var description: String { return self.rawValue }
    }

    public enum AllowsMultipleInstanceTypes: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case off = "off"
        case on = "on"
        public var description: String { return self.rawValue }
    }

    public enum AmdSevSnpSpecification: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "disabled"
        case enabled = "enabled"
        public var description: String { return self.rawValue }
    }

    public enum AnalysisStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case failed = "failed"
        case running = "running"
        case succeeded = "succeeded"
        public var description: String { return self.rawValue }
    }

    public enum ApplianceModeSupportValue: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disable = "disable"
        case enable = "enable"
        public var description: String { return self.rawValue }
    }

    public struct ArchitectureType: RawRepresentable, Equatable, Codable, Sendable, CodingKeyRepresentable {
        public var rawValue: String

        public init(rawValue: String) {
            self.rawValue = rawValue
        }

        public static var arm64: Self { .init(rawValue: "arm64") }
        public static var arm64Mac: Self { .init(rawValue: "arm64_mac") }
        public static var i386: Self { .init(rawValue: "i386") }
        public static var x8664: Self { .init(rawValue: "x86_64") }
        public static var x8664Mac: Self { .init(rawValue: "x86_64_mac") }
    }

    public enum ArchitectureValues: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case arm64 = "arm64"
        case arm64Mac = "arm64_mac"
        case i386 = "i386"
        case x8664 = "x86_64"
        case x8664Mac = "x86_64_mac"
        public var description: String { return self.rawValue }
    }

    public enum AsnAssociationState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case associated = "associated"
        case disassociated = "disassociated"
        case failedAssociation = "failed-association"
        case failedDisassociation = "failed-disassociation"
        case pendingAssociation = "pending-association"
        case pendingDisassociation = "pending-disassociation"
        public var description: String { return self.rawValue }
    }

    public enum AsnState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case deprovisioned = "deprovisioned"
        case failedDeprovision = "failed-deprovision"
        case failedProvision = "failed-provision"
        case pendingDeprovision = "pending-deprovision"
        case pendingProvision = "pending-provision"
        case provisioned = "provisioned"
        public var description: String { return self.rawValue }
    }

    public enum AssociatedNetworkType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case vpc = "vpc"
        public var description: String { return self.rawValue }
    }

    public enum AssociationStatusCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case associated = "associated"
        case associating = "associating"
        case associationFailed = "association-failed"
        case disassociated = "disassociated"
        case disassociating = "disassociating"
        public var description: String { return self.rawValue }
    }

    public enum AttachmentStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case attached = "attached"
        case attaching = "attaching"
        case detached = "detached"
        case detaching = "detaching"
        public var description: String { return self.rawValue }
    }

    public enum AutoAcceptSharedAssociationsValue: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disable = "disable"
        case enable = "enable"
        public var description: String { return self.rawValue }
    }

    public enum AutoAcceptSharedAttachmentsValue: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disable = "disable"
        case enable = "enable"
        public var description: String { return self.rawValue }
    }

    public enum AutoPlacement: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case off = "off"
        case on = "on"
        public var description: String { return self.rawValue }
    }

    public enum AvailabilityZoneOptInStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case notOptedIn = "not-opted-in"
        case optInNotRequired = "opt-in-not-required"
        case optedIn = "opted-in"
        public var description: String { return self.rawValue }
    }

    public enum AvailabilityZoneState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case available = "available"
        case constrained = "constrained"
        case impaired = "impaired"
        case information = "information"
        case unavailable = "unavailable"
        public var description: String { return self.rawValue }
    }

    public enum BareMetal: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case excluded = "excluded"
        case included = "included"
        case required = "required"
        public var description: String { return self.rawValue }
    }

    public enum BatchState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "active"
        case cancelled = "cancelled"
        case cancelledRunning = "cancelled_running"
        case cancelledTerminatingInstances = "cancelled_terminating"
        case failed = "failed"
        case modifying = "modifying"
        case submitted = "submitted"
        public var description: String { return self.rawValue }
    }

    public enum BgpStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case down = "down"
        case up = "up"
        public var description: String { return self.rawValue }
    }

    public enum BootModeType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case legacyBios = "legacy-bios"
        case uefi = "uefi"
        public var description: String { return self.rawValue }
    }

    public enum BootModeValues: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case legacyBios = "legacy-bios"
        case uefi = "uefi"
        case uefiPreferred = "uefi-preferred"
        public var description: String { return self.rawValue }
    }

    public enum BundleTaskState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case bundling = "bundling"
        case cancelling = "cancelling"
        case complete = "complete"
        case failed = "failed"
        case pending = "pending"
        case storing = "storing"
        case waitingForShutdown = "waiting-for-shutdown"
        public var description: String { return self.rawValue }
    }

    public enum BurstablePerformance: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case excluded = "excluded"
        case included = "included"
        case required = "required"
        public var description: String { return self.rawValue }
    }

    public enum ByoipCidrState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case advertised = "advertised"
        case deprovisioned = "deprovisioned"
        case failedDeprovision = "failed-deprovision"
        case failedProvision = "failed-provision"
        case pendingDeprovision = "pending-deprovision"
        case pendingProvision = "pending-provision"
        case provisioned = "provisioned"
        case provisionedNotPubliclyAdvertisable = "provisioned-not-publicly-advertisable"
        public var description: String { return self.rawValue }
    }

    public enum CancelBatchErrorCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case fleetRequestIdDoesNotExist = "fleetRequestIdDoesNotExist"
        case fleetRequestIdMalformed = "fleetRequestIdMalformed"
        case fleetRequestNotInCancellableState = "fleetRequestNotInCancellableState"
        case unexpectedError = "unexpectedError"
        public var description: String { return self.rawValue }
    }

    public enum CancelSpotInstanceRequestState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "active"
        case cancelled = "cancelled"
        case closed = "closed"
        case completed = "completed"
        case open = "open"
        public var description: String { return self.rawValue }
    }

    public enum CapacityReservationFleetState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "active"
        case cancelled = "cancelled"
        case cancelling = "cancelling"
        case expired = "expired"
        case expiring = "expiring"
        case failed = "failed"
        case modifying = "modifying"
        case partiallyFulfilled = "partially_fulfilled"
        case submitted = "submitted"
        public var description: String { return self.rawValue }
    }

    public enum CapacityReservationInstancePlatform: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case linuxUnix = "Linux/UNIX"
        case linuxWithSqlServerEnterprise = "Linux with SQL Server Enterprise"
        case linuxWithSqlServerStandard = "Linux with SQL Server Standard"
        case linuxWithSqlServerWeb = "Linux with SQL Server Web"
        case redHatEnterpriseLinux = "Red Hat Enterprise Linux"
        case rhelWithHa = "RHEL with HA"
        case rhelWithHaAndSqlServerEnterprise = "RHEL with HA and SQL Server Enterprise"
        case rhelWithHaAndSqlServerStandard = "RHEL with HA and SQL Server Standard"
        case rhelWithSqlServerEnterprise = "RHEL with SQL Server Enterprise"
        case rhelWithSqlServerStandard = "RHEL with SQL Server Standard"
        case rhelWithSqlServerWeb = "RHEL with SQL Server Web"
        case suseLinux = "SUSE Linux"
        case ubuntuProLinux = "Ubuntu Pro"
        case windows = "Windows"
        case windowsWithSqlServer = "Windows with SQL Server"
        case windowsWithSqlServerEnterprise = "Windows with SQL Server Enterprise"
        case windowsWithSqlServerStandard = "Windows with SQL Server Standard"
        case windowsWithSqlServerWeb = "Windows with SQL Server Web"
        public var description: String { return self.rawValue }
    }

    public enum CapacityReservationPreference: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case none = "none"
        case open = "open"
        public var description: String { return self.rawValue }
    }

    public enum CapacityReservationState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "active"
        case cancelled = "cancelled"
        case expired = "expired"
        case failed = "failed"
        case paymentFailed = "payment-failed"
        case paymentPending = "payment-pending"
        case pending = "pending"
        case scheduled = "scheduled"
        public var description: String { return self.rawValue }
    }

    public enum CapacityReservationTenancy: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case `default` = "default"
        case dedicated = "dedicated"
        public var description: String { return self.rawValue }
    }

    public enum CapacityReservationType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case `default` = "default"
        case capacityBlock = "capacity-block"
        public var description: String { return self.rawValue }
    }

    public enum CarrierGatewayState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case available = "available"
        case deleted = "deleted"
        case deleting = "deleting"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public enum ClientCertificateRevocationListStatusCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "active"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public enum ClientVpnAuthenticationType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case certificateAuthentication = "certificate-authentication"
        case directoryServiceAuthentication = "directory-service-authentication"
        case federatedAuthentication = "federated-authentication"
        public var description: String { return self.rawValue }
    }

    public enum ClientVpnAuthorizationRuleStatusCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "active"
        case authorizing = "authorizing"
        case failed = "failed"
        case revoking = "revoking"
        public var description: String { return self.rawValue }
    }

    public enum ClientVpnConnectionStatusCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "active"
        case failedToTerminate = "failed-to-terminate"
        case terminated = "terminated"
        case terminating = "terminating"
        public var description: String { return self.rawValue }
    }

    public enum ClientVpnEndpointAttributeStatusCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case applied = "applied"
        case applying = "applying"
        public var description: String { return self.rawValue }
    }

    public enum ClientVpnEndpointStatusCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case available = "available"
        case deleted = "deleted"
        case deleting = "deleting"
        case pendingAssociate = "pending-associate"
        public var description: String { return self.rawValue }
    }

    public enum ClientVpnRouteStatusCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "active"
        case creating = "creating"
        case deleting = "deleting"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public enum ConnectionNotificationState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "Disabled"
        case enabled = "Enabled"
        public var description: String { return self.rawValue }
    }

    public enum ConnectionNotificationType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case topic = "Topic"
        public var description: String { return self.rawValue }
    }

    public enum ConnectivityType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case `private` = "private"
        case `public` = "public"
        public var description: String { return self.rawValue }
    }

    public enum ContainerFormat: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ova = "ova"
        public var description: String { return self.rawValue }
    }

    public enum ConversionTaskState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "active"
        case cancelled = "cancelled"
        case cancelling = "cancelling"
        case completed = "completed"
        public var description: String { return self.rawValue }
    }

    public enum CopyTagsFromSource: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case volume = "volume"
        public var description: String { return self.rawValue }
    }

    public enum CpuManufacturer: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case amazonWebServices = "amazon-web-services"
        case amd = "amd"
        case intel = "intel"
        public var description: String { return self.rawValue }
    }

    public enum CurrencyCodeValues: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case usd = "USD"
        public var description: String { return self.rawValue }
    }

    public enum DatafeedSubscriptionState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "Active"
        case inactive = "Inactive"
        public var description: String { return self.rawValue }
    }

    public enum DefaultInstanceMetadataEndpointState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "disabled"
        case enabled = "enabled"
        case noPreference = "no-preference"
        public var description: String { return self.rawValue }
    }

    public enum DefaultInstanceMetadataTagsState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "disabled"
        case enabled = "enabled"
        case noPreference = "no-preference"
        public var description: String { return self.rawValue }
    }

    public enum DefaultRouteTableAssociationValue: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disable = "disable"
        case enable = "enable"
        public var description: String { return self.rawValue }
    }

    public enum DefaultRouteTablePropagationValue: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disable = "disable"
        case enable = "enable"
        public var description: String { return self.rawValue }
    }

    public enum DefaultTargetCapacityType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case capacityBlock = "capacity-block"
        case onDemand = "on-demand"
        case spot = "spot"
        public var description: String { return self.rawValue }
    }

    public enum DeleteFleetErrorCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case fleetIdDoesNotExist = "fleetIdDoesNotExist"
        case fleetIdMalformed = "fleetIdMalformed"
        case fleetNotInDeletableState = "fleetNotInDeletableState"
        case unexpectedError = "unexpectedError"
        public var description: String { return self.rawValue }
    }

    public enum DeleteQueuedReservedInstancesErrorCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case reservedInstancesIdInvalid = "reserved-instances-id-invalid"
        case reservedInstancesNotInQueuedState = "reserved-instances-not-in-queued-state"
        case unexpectedError = "unexpected-error"
        public var description: String { return self.rawValue }
    }

    public enum DestinationFileFormat: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case parquet = "parquet"
        case plainText = "plain-text"
        public var description: String { return self.rawValue }
    }

    public enum DeviceTrustProviderType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case crowdstrike = "crowdstrike"
        case jamf = "jamf"
        case jumpcloud = "jumpcloud"
        public var description: String { return self.rawValue }
    }

    public enum DeviceType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ebs = "ebs"
        case instanceStore = "instance-store"
        public var description: String { return self.rawValue }
    }

    public enum DiskImageFormat: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case raw = "RAW"
        case vhd = "VHD"
        case vmdk = "VMDK"
        public var description: String { return self.rawValue }
    }

    public enum DiskType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case hdd = "hdd"
        case ssd = "ssd"
        public var description: String { return self.rawValue }
    }

    public enum DnsNameState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case failed = "failed"
        case pendingVerification = "pendingVerification"
        case verified = "verified"
        public var description: String { return self.rawValue }
    }

    public enum DnsRecordIpType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case dualstack = "dualstack"
        case ipv4 = "ipv4"
        case ipv6 = "ipv6"
        case serviceDefined = "service-defined"
        public var description: String { return self.rawValue }
    }

    public enum DnsSupportValue: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disable = "disable"
        case enable = "enable"
        public var description: String { return self.rawValue }
    }

    public enum DomainType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case standard = "standard"
        case vpc = "vpc"
        public var description: String { return self.rawValue }
    }

    public enum DynamicRoutingValue: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disable = "disable"
        case enable = "enable"
        public var description: String { return self.rawValue }
    }

    public enum EbsEncryptionSupport: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case supported = "supported"
        case unsupported = "unsupported"
        public var description: String { return self.rawValue }
    }

    public enum EbsNvmeSupport: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case required = "required"
        case supported = "supported"
        case unsupported = "unsupported"
        public var description: String { return self.rawValue }
    }

    public enum EbsOptimizedSupport: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case `default` = "default"
        case supported = "supported"
        case unsupported = "unsupported"
        public var description: String { return self.rawValue }
    }

    public enum Ec2InstanceConnectEndpointState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case createComplete = "create-complete"
        case createFailed = "create-failed"
        case createInProgress = "create-in-progress"
        case deleteComplete = "delete-complete"
        case deleteFailed = "delete-failed"
        case deleteInProgress = "delete-in-progress"
        public var description: String { return self.rawValue }
    }

    public enum ElasticGpuState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case attached = "ATTACHED"
        public var description: String { return self.rawValue }
    }

    public enum ElasticGpuStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case impaired = "IMPAIRED"
        case ok = "OK"
        public var description: String { return self.rawValue }
    }

    public enum EnaSupport: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case required = "required"
        case supported = "supported"
        case unsupported = "unsupported"
        public var description: String { return self.rawValue }
    }

    public enum EndDateType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case limited = "limited"
        case unlimited = "unlimited"
        public var description: String { return self.rawValue }
    }

    public enum EphemeralNvmeSupport: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case required = "required"
        case supported = "supported"
        case unsupported = "unsupported"
        public var description: String { return self.rawValue }
    }

    public enum EventCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case instanceReboot = "instance-reboot"
        case instanceRetirement = "instance-retirement"
        case instanceStop = "instance-stop"
        case systemMaintenance = "system-maintenance"
        case systemReboot = "system-reboot"
        public var description: String { return self.rawValue }
    }

    public enum EventType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case batchChange = "fleetRequestChange"
        case error = "error"
        case information = "information"
        case instanceChange = "instanceChange"
        public var description: String { return self.rawValue }
    }

    public enum ExcessCapacityTerminationPolicy: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case `default` = "default"
        case noTermination = "noTermination"
        public var description: String { return self.rawValue }
    }

    public enum ExportEnvironment: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case citrix = "citrix"
        case microsoft = "microsoft"
        case vmware = "vmware"
        public var description: String { return self.rawValue }
    }

    public enum ExportTaskState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "active"
        case cancelled = "cancelled"
        case cancelling = "cancelling"
        case completed = "completed"
        public var description: String { return self.rawValue }
    }

    public enum FastLaunchResourceType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case snapshot = "snapshot"
        public var description: String { return self.rawValue }
    }

    public enum FastLaunchStateCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabling = "disabling"
        case disablingFailed = "disabling-failed"
        case enabled = "enabled"
        case enabledFailed = "enabled-failed"
        case enabling = "enabling"
        case enablingFailed = "enabling-failed"
        public var description: String { return self.rawValue }
    }

    public enum FastSnapshotRestoreStateCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "disabled"
        case disabling = "disabling"
        case enabled = "enabled"
        case enabling = "enabling"
        case optimizing = "optimizing"
        public var description: String { return self.rawValue }
    }

    public enum FindingsFound: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case `false` = "false"
        case `true` = "true"
        case unknown = "unknown"
        public var description: String { return self.rawValue }
    }

    public enum FleetActivityStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case error = "error"
        case fulfilled = "fulfilled"
        case pendingFulfillment = "pending_fulfillment"
        case pendingTermination = "pending_termination"
        public var description: String { return self.rawValue }
    }

    public enum FleetCapacityReservationTenancy: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case `default` = "default"
        public var description: String { return self.rawValue }
    }

    public enum FleetCapacityReservationUsageStrategy: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case useCapacityReservationsFirst = "use-capacity-reservations-first"
        public var description: String { return self.rawValue }
    }

    public enum FleetEventType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case fleetChange = "fleet-change"
        case instanceChange = "instance-change"
        case serviceError = "service-error"
        public var description: String { return self.rawValue }
    }

    public enum FleetExcessCapacityTerminationPolicy: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case noTermination = "no-termination"
        case termination = "termination"
        public var description: String { return self.rawValue }
    }

    public enum FleetInstanceMatchCriteria: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case open = "open"
        public var description: String { return self.rawValue }
    }

    public enum FleetOnDemandAllocationStrategy: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case lowestPrice = "lowest-price"
        case prioritized = "prioritized"
        public var description: String { return self.rawValue }
    }

    public enum FleetReplacementStrategy: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case launch = "launch"
        case launchBeforeTerminate = "launch-before-terminate"
        public var description: String { return self.rawValue }
    }

    public enum FleetStateCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "active"
        case deleted = "deleted"
        case deletedRunning = "deleted_running"
        case deletedTerminatingInstances = "deleted_terminating"
        case failed = "failed"
        case modifying = "modifying"
        case submitted = "submitted"
        public var description: String { return self.rawValue }
    }

    public enum FleetType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case instant = "instant"
        case maintain = "maintain"
        case request = "request"
        public var description: String { return self.rawValue }
    }

    public enum FlowLogsResourceType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case networkInterface = "NetworkInterface"
        case subnet = "Subnet"
        case transitGateway = "TransitGateway"
        case transitGatewayAttachment = "TransitGatewayAttachment"
        case vpc = "VPC"
        public var description: String { return self.rawValue }
    }

    public enum FpgaImageAttributeName: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case description = "description"
        case loadPermission = "loadPermission"
        case name = "name"
        case productCodes = "productCodes"
        public var description: String { return self.rawValue }
    }

    public enum FpgaImageStateCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case available = "available"
        case failed = "failed"
        case pending = "pending"
        case unavailable = "unavailable"
        public var description: String { return self.rawValue }
    }

    public enum GatewayAssociationState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case associated = "associated"
        case associating = "associating"
        case disassociating = "disassociating"
        case notAssociated = "not-associated"
        public var description: String { return self.rawValue }
    }

    public enum GatewayType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ipsec1 = "ipsec.1"
        public var description: String { return self.rawValue }
    }

    public enum HostMaintenance: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case off = "off"
        case on = "on"
        public var description: String { return self.rawValue }
    }

    public enum HostRecovery: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case off = "off"
        case on = "on"
        public var description: String { return self.rawValue }
    }

    public enum HostTenancy: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case dedicated = "dedicated"
        case host = "host"
        public var description: String { return self.rawValue }
    }

    public enum HostnameType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ipName = "ip-name"
        case resourceName = "resource-name"
        public var description: String { return self.rawValue }
    }

    public enum HttpTokensState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case optional = "optional"
        case required = "required"
        public var description: String { return self.rawValue }
    }

    public enum HypervisorType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ovm = "ovm"
        case xen = "xen"
        public var description: String { return self.rawValue }
    }

    public enum IamInstanceProfileAssociationState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case associated = "associated"
        case associating = "associating"
        case disassociated = "disassociated"
        case disassociating = "disassociating"
        public var description: String { return self.rawValue }
    }

    public enum Igmpv2SupportValue: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disable = "disable"
        case enable = "enable"
        public var description: String { return self.rawValue }
    }

    public enum ImageAttributeName: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case blockDeviceMapping = "blockDeviceMapping"
        case bootMode = "bootMode"
        case description = "description"
        case imdsSupport = "imdsSupport"
        case kernel = "kernel"
        case lastLaunchedTime = "lastLaunchedTime"
        case launchPermission = "launchPermission"
        case productCodes = "productCodes"
        case ramdisk = "ramdisk"
        case sriovNetSupport = "sriovNetSupport"
        case tpmSupport = "tpmSupport"
        case uefiData = "uefiData"
        public var description: String { return self.rawValue }
    }

    public enum ImageBlockPublicAccessDisabledState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case unblocked = "unblocked"
        public var description: String { return self.rawValue }
    }

    public enum ImageBlockPublicAccessEnabledState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case blockNewSharing = "block-new-sharing"
        public var description: String { return self.rawValue }
    }

    public enum ImageState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case available = "available"
        case deregistered = "deregistered"
        case disabled = "disabled"
        case error = "error"
        case failed = "failed"
        case invalid = "invalid"
        case pending = "pending"
        case transient = "transient"
        public var description: String { return self.rawValue }
    }

    public enum ImageTypeValues: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case kernel = "kernel"
        case machine = "machine"
        case ramdisk = "ramdisk"
        public var description: String { return self.rawValue }
    }

    public enum ImdsSupportValues: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case v20 = "v2.0"
        public var description: String { return self.rawValue }
    }

    public enum InstanceAttributeName: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case blockDeviceMapping = "blockDeviceMapping"
        case disableApiStop = "disableApiStop"
        case disableApiTermination = "disableApiTermination"
        case ebsOptimized = "ebsOptimized"
        case enaSupport = "enaSupport"
        case enclaveOptions = "enclaveOptions"
        case groupSet = "groupSet"
        case instanceInitiatedShutdownBehavior = "instanceInitiatedShutdownBehavior"
        case instanceType = "instanceType"
        case kernel = "kernel"
        case productCodes = "productCodes"
        case ramdisk = "ramdisk"
        case rootDeviceName = "rootDeviceName"
        case sourceDestCheck = "sourceDestCheck"
        case sriovNetSupport = "sriovNetSupport"
        case userData = "userData"
        public var description: String { return self.rawValue }
    }

    public enum InstanceAutoRecoveryState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case `default` = "default"
        case disabled = "disabled"
        public var description: String { return self.rawValue }
    }

    public enum InstanceBootModeValues: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case legacyBios = "legacy-bios"
        case uefi = "uefi"
        public var description: String { return self.rawValue }
    }

    public enum InstanceEventWindowState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "active"
        case creating = "creating"
        case deleted = "deleted"
        case deleting = "deleting"
        public var description: String { return self.rawValue }
    }

    public enum InstanceGeneration: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case current = "current"
        case previous = "previous"
        public var description: String { return self.rawValue }
    }

    public enum InstanceHealthStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case healthyStatus = "healthy"
        case unhealthyStatus = "unhealthy"
        public var description: String { return self.rawValue }
    }

    public enum InstanceInterruptionBehavior: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case hibernate = "hibernate"
        case stop = "stop"
        case terminate = "terminate"
        public var description: String { return self.rawValue }
    }

    public enum InstanceLifecycle: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case onDemand = "on-demand"
        case spot = "spot"
        public var description: String { return self.rawValue }
    }

    public enum InstanceLifecycleType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case capacityBlock = "capacity-block"
        case scheduled = "scheduled"
        case spot = "spot"
        public var description: String { return self.rawValue }
    }

    public enum InstanceMatchCriteria: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case open = "open"
        case targeted = "targeted"
        public var description: String { return self.rawValue }
    }

    public enum InstanceMetadataEndpointState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "disabled"
        case enabled = "enabled"
        public var description: String { return self.rawValue }
    }

    public enum InstanceMetadataOptionsState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case applied = "applied"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public enum InstanceMetadataProtocolState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "disabled"
        case enabled = "enabled"
        public var description: String { return self.rawValue }
    }

    public enum InstanceMetadataTagsState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "disabled"
        case enabled = "enabled"
        public var description: String { return self.rawValue }
    }

    public enum InstanceStateName: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case pending = "pending"
        case running = "running"
        case shuttingDown = "shutting-down"
        case stopped = "stopped"
        case stopping = "stopping"
        case terminated = "terminated"
        public var description: String { return self.rawValue }
    }

    public enum InstanceStorageEncryptionSupport: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case required = "required"
        case unsupported = "unsupported"
        public var description: String { return self.rawValue }
    }

    public struct InstanceType: RawRepresentable, Equatable, Codable, Sendable, CodingKeyRepresentable {
        public var rawValue: String

        public init(rawValue: String) {
            self.rawValue = rawValue
        }

        public static var a12Xlarge: Self { .init(rawValue: "a1.2xlarge") }
        public static var a14Xlarge: Self { .init(rawValue: "a1.4xlarge") }
        public static var a1Large: Self { .init(rawValue: "a1.large") }
        public static var a1Medium: Self { .init(rawValue: "a1.medium") }
        public static var a1Metal: Self { .init(rawValue: "a1.metal") }
        public static var a1Xlarge: Self { .init(rawValue: "a1.xlarge") }
        public static var c1Medium: Self { .init(rawValue: "c1.medium") }
        public static var c1Xlarge: Self { .init(rawValue: "c1.xlarge") }
        public static var c32Xlarge: Self { .init(rawValue: "c3.2xlarge") }
        public static var c34Xlarge: Self { .init(rawValue: "c3.4xlarge") }
        public static var c38Xlarge: Self { .init(rawValue: "c3.8xlarge") }
        public static var c3Large: Self { .init(rawValue: "c3.large") }
        public static var c3Xlarge: Self { .init(rawValue: "c3.xlarge") }
        public static var c42Xlarge: Self { .init(rawValue: "c4.2xlarge") }
        public static var c44Xlarge: Self { .init(rawValue: "c4.4xlarge") }
        public static var c48Xlarge: Self { .init(rawValue: "c4.8xlarge") }
        public static var c4Large: Self { .init(rawValue: "c4.large") }
        public static var c4Xlarge: Self { .init(rawValue: "c4.xlarge") }
        public static var c512Xlarge: Self { .init(rawValue: "c5.12xlarge") }
        public static var c518Xlarge: Self { .init(rawValue: "c5.18xlarge") }
        public static var c524Xlarge: Self { .init(rawValue: "c5.24xlarge") }
        public static var c52Xlarge: Self { .init(rawValue: "c5.2xlarge") }
        public static var c54Xlarge: Self { .init(rawValue: "c5.4xlarge") }
        public static var c59Xlarge: Self { .init(rawValue: "c5.9xlarge") }
        public static var c5Large: Self { .init(rawValue: "c5.large") }
        public static var c5Metal: Self { .init(rawValue: "c5.metal") }
        public static var c5Xlarge: Self { .init(rawValue: "c5.xlarge") }
        public static var c5a12Xlarge: Self { .init(rawValue: "c5a.12xlarge") }
        public static var c5a16Xlarge: Self { .init(rawValue: "c5a.16xlarge") }
        public static var c5a24Xlarge: Self { .init(rawValue: "c5a.24xlarge") }
        public static var c5a2Xlarge: Self { .init(rawValue: "c5a.2xlarge") }
        public static var c5a4Xlarge: Self { .init(rawValue: "c5a.4xlarge") }
        public static var c5a8Xlarge: Self { .init(rawValue: "c5a.8xlarge") }
        public static var c5aLarge: Self { .init(rawValue: "c5a.large") }
        public static var c5aXlarge: Self { .init(rawValue: "c5a.xlarge") }
        public static var c5ad12Xlarge: Self { .init(rawValue: "c5ad.12xlarge") }
        public static var c5ad16Xlarge: Self { .init(rawValue: "c5ad.16xlarge") }
        public static var c5ad24Xlarge: Self { .init(rawValue: "c5ad.24xlarge") }
        public static var c5ad2Xlarge: Self { .init(rawValue: "c5ad.2xlarge") }
        public static var c5ad4Xlarge: Self { .init(rawValue: "c5ad.4xlarge") }
        public static var c5ad8Xlarge: Self { .init(rawValue: "c5ad.8xlarge") }
        public static var c5adLarge: Self { .init(rawValue: "c5ad.large") }
        public static var c5adXlarge: Self { .init(rawValue: "c5ad.xlarge") }
        public static var c5d12Xlarge: Self { .init(rawValue: "c5d.12xlarge") }
        public static var c5d18Xlarge: Self { .init(rawValue: "c5d.18xlarge") }
        public static var c5d24Xlarge: Self { .init(rawValue: "c5d.24xlarge") }
        public static var c5d2Xlarge: Self { .init(rawValue: "c5d.2xlarge") }
        public static var c5d4Xlarge: Self { .init(rawValue: "c5d.4xlarge") }
        public static var c5d9Xlarge: Self { .init(rawValue: "c5d.9xlarge") }
        public static var c5dLarge: Self { .init(rawValue: "c5d.large") }
        public static var c5dMetal: Self { .init(rawValue: "c5d.metal") }
        public static var c5dXlarge: Self { .init(rawValue: "c5d.xlarge") }
        public static var c5n18Xlarge: Self { .init(rawValue: "c5n.18xlarge") }
        public static var c5n2Xlarge: Self { .init(rawValue: "c5n.2xlarge") }
        public static var c5n4Xlarge: Self { .init(rawValue: "c5n.4xlarge") }
        public static var c5n9Xlarge: Self { .init(rawValue: "c5n.9xlarge") }
        public static var c5nLarge: Self { .init(rawValue: "c5n.large") }
        public static var c5nMetal: Self { .init(rawValue: "c5n.metal") }
        public static var c5nXlarge: Self { .init(rawValue: "c5n.xlarge") }
        public static var c6a12Xlarge: Self { .init(rawValue: "c6a.12xlarge") }
        public static var c6a16Xlarge: Self { .init(rawValue: "c6a.16xlarge") }
        public static var c6a24Xlarge: Self { .init(rawValue: "c6a.24xlarge") }
        public static var c6a2Xlarge: Self { .init(rawValue: "c6a.2xlarge") }
        public static var c6a32Xlarge: Self { .init(rawValue: "c6a.32xlarge") }
        public static var c6a48Xlarge: Self { .init(rawValue: "c6a.48xlarge") }
        public static var c6a4Xlarge: Self { .init(rawValue: "c6a.4xlarge") }
        public static var c6a8Xlarge: Self { .init(rawValue: "c6a.8xlarge") }
        public static var c6aLarge: Self { .init(rawValue: "c6a.large") }
        public static var c6aMetal: Self { .init(rawValue: "c6a.metal") }
        public static var c6aXlarge: Self { .init(rawValue: "c6a.xlarge") }
        public static var c6g12Xlarge: Self { .init(rawValue: "c6g.12xlarge") }
        public static var c6g16Xlarge: Self { .init(rawValue: "c6g.16xlarge") }
        public static var c6g2Xlarge: Self { .init(rawValue: "c6g.2xlarge") }
        public static var c6g4Xlarge: Self { .init(rawValue: "c6g.4xlarge") }
        public static var c6g8Xlarge: Self { .init(rawValue: "c6g.8xlarge") }
        public static var c6gLarge: Self { .init(rawValue: "c6g.large") }
        public static var c6gMedium: Self { .init(rawValue: "c6g.medium") }
        public static var c6gMetal: Self { .init(rawValue: "c6g.metal") }
        public static var c6gXlarge: Self { .init(rawValue: "c6g.xlarge") }
        public static var c6gd12Xlarge: Self { .init(rawValue: "c6gd.12xlarge") }
        public static var c6gd16Xlarge: Self { .init(rawValue: "c6gd.16xlarge") }
        public static var c6gd2Xlarge: Self { .init(rawValue: "c6gd.2xlarge") }
        public static var c6gd4Xlarge: Self { .init(rawValue: "c6gd.4xlarge") }
        public static var c6gd8Xlarge: Self { .init(rawValue: "c6gd.8xlarge") }
        public static var c6gdLarge: Self { .init(rawValue: "c6gd.large") }
        public static var c6gdMedium: Self { .init(rawValue: "c6gd.medium") }
        public static var c6gdMetal: Self { .init(rawValue: "c6gd.metal") }
        public static var c6gdXlarge: Self { .init(rawValue: "c6gd.xlarge") }
        public static var c6gn12Xlarge: Self { .init(rawValue: "c6gn.12xlarge") }
        public static var c6gn16Xlarge: Self { .init(rawValue: "c6gn.16xlarge") }
        public static var c6gn2Xlarge: Self { .init(rawValue: "c6gn.2xlarge") }
        public static var c6gn4Xlarge: Self { .init(rawValue: "c6gn.4xlarge") }
        public static var c6gn8Xlarge: Self { .init(rawValue: "c6gn.8xlarge") }
        public static var c6gnLarge: Self { .init(rawValue: "c6gn.large") }
        public static var c6gnMedium: Self { .init(rawValue: "c6gn.medium") }
        public static var c6gnXlarge: Self { .init(rawValue: "c6gn.xlarge") }
        public static var c6i12Xlarge: Self { .init(rawValue: "c6i.12xlarge") }
        public static var c6i16Xlarge: Self { .init(rawValue: "c6i.16xlarge") }
        public static var c6i24Xlarge: Self { .init(rawValue: "c6i.24xlarge") }
        public static var c6i2Xlarge: Self { .init(rawValue: "c6i.2xlarge") }
        public static var c6i32Xlarge: Self { .init(rawValue: "c6i.32xlarge") }
        public static var c6i4Xlarge: Self { .init(rawValue: "c6i.4xlarge") }
        public static var c6i8Xlarge: Self { .init(rawValue: "c6i.8xlarge") }
        public static var c6iLarge: Self { .init(rawValue: "c6i.large") }
        public static var c6iMetal: Self { .init(rawValue: "c6i.metal") }
        public static var c6iXlarge: Self { .init(rawValue: "c6i.xlarge") }
        public static var c6id12Xlarge: Self { .init(rawValue: "c6id.12xlarge") }
        public static var c6id16Xlarge: Self { .init(rawValue: "c6id.16xlarge") }
        public static var c6id24Xlarge: Self { .init(rawValue: "c6id.24xlarge") }
        public static var c6id2Xlarge: Self { .init(rawValue: "c6id.2xlarge") }
        public static var c6id32Xlarge: Self { .init(rawValue: "c6id.32xlarge") }
        public static var c6id4Xlarge: Self { .init(rawValue: "c6id.4xlarge") }
        public static var c6id8Xlarge: Self { .init(rawValue: "c6id.8xlarge") }
        public static var c6idLarge: Self { .init(rawValue: "c6id.large") }
        public static var c6idMetal: Self { .init(rawValue: "c6id.metal") }
        public static var c6idXlarge: Self { .init(rawValue: "c6id.xlarge") }
        public static var c6in12Xlarge: Self { .init(rawValue: "c6in.12xlarge") }
        public static var c6in16Xlarge: Self { .init(rawValue: "c6in.16xlarge") }
        public static var c6in24Xlarge: Self { .init(rawValue: "c6in.24xlarge") }
        public static var c6in2Xlarge: Self { .init(rawValue: "c6in.2xlarge") }
        public static var c6in32Xlarge: Self { .init(rawValue: "c6in.32xlarge") }
        public static var c6in4Xlarge: Self { .init(rawValue: "c6in.4xlarge") }
        public static var c6in8Xlarge: Self { .init(rawValue: "c6in.8xlarge") }
        public static var c6inLarge: Self { .init(rawValue: "c6in.large") }
        public static var c6inMetal: Self { .init(rawValue: "c6in.metal") }
        public static var c6inXlarge: Self { .init(rawValue: "c6in.xlarge") }
        public static var c7a12Xlarge: Self { .init(rawValue: "c7a.12xlarge") }
        public static var c7a16Xlarge: Self { .init(rawValue: "c7a.16xlarge") }
        public static var c7a24Xlarge: Self { .init(rawValue: "c7a.24xlarge") }
        public static var c7a2Xlarge: Self { .init(rawValue: "c7a.2xlarge") }
        public static var c7a32Xlarge: Self { .init(rawValue: "c7a.32xlarge") }
        public static var c7a48Xlarge: Self { .init(rawValue: "c7a.48xlarge") }
        public static var c7a4Xlarge: Self { .init(rawValue: "c7a.4xlarge") }
        public static var c7a8Xlarge: Self { .init(rawValue: "c7a.8xlarge") }
        public static var c7aLarge: Self { .init(rawValue: "c7a.large") }
        public static var c7aMedium: Self { .init(rawValue: "c7a.medium") }
        public static var c7aMetal48Xl: Self { .init(rawValue: "c7a.metal-48xl") }
        public static var c7aXlarge: Self { .init(rawValue: "c7a.xlarge") }
        public static var c7g12Xlarge: Self { .init(rawValue: "c7g.12xlarge") }
        public static var c7g16Xlarge: Self { .init(rawValue: "c7g.16xlarge") }
        public static var c7g2Xlarge: Self { .init(rawValue: "c7g.2xlarge") }
        public static var c7g4Xlarge: Self { .init(rawValue: "c7g.4xlarge") }
        public static var c7g8Xlarge: Self { .init(rawValue: "c7g.8xlarge") }
        public static var c7gLarge: Self { .init(rawValue: "c7g.large") }
        public static var c7gMedium: Self { .init(rawValue: "c7g.medium") }
        public static var c7gMetal: Self { .init(rawValue: "c7g.metal") }
        public static var c7gXlarge: Self { .init(rawValue: "c7g.xlarge") }
        public static var c7gd12Xlarge: Self { .init(rawValue: "c7gd.12xlarge") }
        public static var c7gd16Xlarge: Self { .init(rawValue: "c7gd.16xlarge") }
        public static var c7gd2Xlarge: Self { .init(rawValue: "c7gd.2xlarge") }
        public static var c7gd4Xlarge: Self { .init(rawValue: "c7gd.4xlarge") }
        public static var c7gd8Xlarge: Self { .init(rawValue: "c7gd.8xlarge") }
        public static var c7gdLarge: Self { .init(rawValue: "c7gd.large") }
        public static var c7gdMedium: Self { .init(rawValue: "c7gd.medium") }
        public static var c7gdMetal: Self { .init(rawValue: "c7gd.metal") }
        public static var c7gdXlarge: Self { .init(rawValue: "c7gd.xlarge") }
        public static var c7gn12Xlarge: Self { .init(rawValue: "c7gn.12xlarge") }
        public static var c7gn16Xlarge: Self { .init(rawValue: "c7gn.16xlarge") }
        public static var c7gn2Xlarge: Self { .init(rawValue: "c7gn.2xlarge") }
        public static var c7gn4Xlarge: Self { .init(rawValue: "c7gn.4xlarge") }
        public static var c7gn8Xlarge: Self { .init(rawValue: "c7gn.8xlarge") }
        public static var c7gnLarge: Self { .init(rawValue: "c7gn.large") }
        public static var c7gnMedium: Self { .init(rawValue: "c7gn.medium") }
        public static var c7gnXlarge: Self { .init(rawValue: "c7gn.xlarge") }
        public static var c7i12Xlarge: Self { .init(rawValue: "c7i.12xlarge") }
        public static var c7i16Xlarge: Self { .init(rawValue: "c7i.16xlarge") }
        public static var c7i24Xlarge: Self { .init(rawValue: "c7i.24xlarge") }
        public static var c7i2Xlarge: Self { .init(rawValue: "c7i.2xlarge") }
        public static var c7i48Xlarge: Self { .init(rawValue: "c7i.48xlarge") }
        public static var c7i4Xlarge: Self { .init(rawValue: "c7i.4xlarge") }
        public static var c7i8Xlarge: Self { .init(rawValue: "c7i.8xlarge") }
        public static var c7iLarge: Self { .init(rawValue: "c7i.large") }
        public static var c7iMetal24Xl: Self { .init(rawValue: "c7i.metal-24xl") }
        public static var c7iMetal48Xl: Self { .init(rawValue: "c7i.metal-48xl") }
        public static var c7iXlarge: Self { .init(rawValue: "c7i.xlarge") }
        public static var cc14Xlarge: Self { .init(rawValue: "cc1.4xlarge") }
        public static var cc28Xlarge: Self { .init(rawValue: "cc2.8xlarge") }
        public static var cg14Xlarge: Self { .init(rawValue: "cg1.4xlarge") }
        public static var cr18Xlarge: Self { .init(rawValue: "cr1.8xlarge") }
        public static var d22Xlarge: Self { .init(rawValue: "d2.2xlarge") }
        public static var d24Xlarge: Self { .init(rawValue: "d2.4xlarge") }
        public static var d28Xlarge: Self { .init(rawValue: "d2.8xlarge") }
        public static var d2Xlarge: Self { .init(rawValue: "d2.xlarge") }
        public static var d32Xlarge: Self { .init(rawValue: "d3.2xlarge") }
        public static var d34Xlarge: Self { .init(rawValue: "d3.4xlarge") }
        public static var d38Xlarge: Self { .init(rawValue: "d3.8xlarge") }
        public static var d3Xlarge: Self { .init(rawValue: "d3.xlarge") }
        public static var d3en12Xlarge: Self { .init(rawValue: "d3en.12xlarge") }
        public static var d3en2Xlarge: Self { .init(rawValue: "d3en.2xlarge") }
        public static var d3en4Xlarge: Self { .init(rawValue: "d3en.4xlarge") }
        public static var d3en6Xlarge: Self { .init(rawValue: "d3en.6xlarge") }
        public static var d3en8Xlarge: Self { .init(rawValue: "d3en.8xlarge") }
        public static var d3enXlarge: Self { .init(rawValue: "d3en.xlarge") }
        public static var dl124Xlarge: Self { .init(rawValue: "dl1.24xlarge") }
        public static var dl2q24Xlarge: Self { .init(rawValue: "dl2q.24xlarge") }
        public static var f116Xlarge: Self { .init(rawValue: "f1.16xlarge") }
        public static var f12Xlarge: Self { .init(rawValue: "f1.2xlarge") }
        public static var f14Xlarge: Self { .init(rawValue: "f1.4xlarge") }
        public static var g22Xlarge: Self { .init(rawValue: "g2.2xlarge") }
        public static var g28Xlarge: Self { .init(rawValue: "g2.8xlarge") }
        public static var g316Xlarge: Self { .init(rawValue: "g3.16xlarge") }
        public static var g34Xlarge: Self { .init(rawValue: "g3.4xlarge") }
        public static var g38Xlarge: Self { .init(rawValue: "g3.8xlarge") }
        public static var g3sXlarge: Self { .init(rawValue: "g3s.xlarge") }
        public static var g4ad16Xlarge: Self { .init(rawValue: "g4ad.16xlarge") }
        public static var g4ad2Xlarge: Self { .init(rawValue: "g4ad.2xlarge") }
        public static var g4ad4Xlarge: Self { .init(rawValue: "g4ad.4xlarge") }
        public static var g4ad8Xlarge: Self { .init(rawValue: "g4ad.8xlarge") }
        public static var g4adXlarge: Self { .init(rawValue: "g4ad.xlarge") }
        public static var g4dn12Xlarge: Self { .init(rawValue: "g4dn.12xlarge") }
        public static var g4dn16Xlarge: Self { .init(rawValue: "g4dn.16xlarge") }
        public static var g4dn2Xlarge: Self { .init(rawValue: "g4dn.2xlarge") }
        public static var g4dn4Xlarge: Self { .init(rawValue: "g4dn.4xlarge") }
        public static var g4dn8Xlarge: Self { .init(rawValue: "g4dn.8xlarge") }
        public static var g4dnMetal: Self { .init(rawValue: "g4dn.metal") }
        public static var g4dnXlarge: Self { .init(rawValue: "g4dn.xlarge") }
        public static var g512Xlarge: Self { .init(rawValue: "g5.12xlarge") }
        public static var g516Xlarge: Self { .init(rawValue: "g5.16xlarge") }
        public static var g524Xlarge: Self { .init(rawValue: "g5.24xlarge") }
        public static var g52Xlarge: Self { .init(rawValue: "g5.2xlarge") }
        public static var g548Xlarge: Self { .init(rawValue: "g5.48xlarge") }
        public static var g54Xlarge: Self { .init(rawValue: "g5.4xlarge") }
        public static var g58Xlarge: Self { .init(rawValue: "g5.8xlarge") }
        public static var g5Xlarge: Self { .init(rawValue: "g5.xlarge") }
        public static var g5g16Xlarge: Self { .init(rawValue: "g5g.16xlarge") }
        public static var g5g2Xlarge: Self { .init(rawValue: "g5g.2xlarge") }
        public static var g5g4Xlarge: Self { .init(rawValue: "g5g.4xlarge") }
        public static var g5g8Xlarge: Self { .init(rawValue: "g5g.8xlarge") }
        public static var g5gMetal: Self { .init(rawValue: "g5g.metal") }
        public static var g5gXlarge: Self { .init(rawValue: "g5g.xlarge") }
        public static var g612Xlarge: Self { .init(rawValue: "g6.12xlarge") }
        public static var g616Xlarge: Self { .init(rawValue: "g6.16xlarge") }
        public static var g624Xlarge: Self { .init(rawValue: "g6.24xlarge") }
        public static var g62Xlarge: Self { .init(rawValue: "g6.2xlarge") }
        public static var g648Xlarge: Self { .init(rawValue: "g6.48xlarge") }
        public static var g64Xlarge: Self { .init(rawValue: "g6.4xlarge") }
        public static var g68Xlarge: Self { .init(rawValue: "g6.8xlarge") }
        public static var g6Xlarge: Self { .init(rawValue: "g6.xlarge") }
        public static var gr64Xlarge: Self { .init(rawValue: "gr6.4xlarge") }
        public static var gr68Xlarge: Self { .init(rawValue: "gr6.8xlarge") }
        public static var h116Xlarge: Self { .init(rawValue: "h1.16xlarge") }
        public static var h12Xlarge: Self { .init(rawValue: "h1.2xlarge") }
        public static var h14Xlarge: Self { .init(rawValue: "h1.4xlarge") }
        public static var h18Xlarge: Self { .init(rawValue: "h1.8xlarge") }
        public static var hi14Xlarge: Self { .init(rawValue: "hi1.4xlarge") }
        public static var hpc6a48Xlarge: Self { .init(rawValue: "hpc6a.48xlarge") }
        public static var hpc6id32Xlarge: Self { .init(rawValue: "hpc6id.32xlarge") }
        public static var hpc7a12Xlarge: Self { .init(rawValue: "hpc7a.12xlarge") }
        public static var hpc7a24Xlarge: Self { .init(rawValue: "hpc7a.24xlarge") }
        public static var hpc7a48Xlarge: Self { .init(rawValue: "hpc7a.48xlarge") }
        public static var hpc7a96Xlarge: Self { .init(rawValue: "hpc7a.96xlarge") }
        public static var hpc7g16Xlarge: Self { .init(rawValue: "hpc7g.16xlarge") }
        public static var hpc7g4Xlarge: Self { .init(rawValue: "hpc7g.4xlarge") }
        public static var hpc7g8Xlarge: Self { .init(rawValue: "hpc7g.8xlarge") }
        public static var hs18Xlarge: Self { .init(rawValue: "hs1.8xlarge") }
        public static var i22Xlarge: Self { .init(rawValue: "i2.2xlarge") }
        public static var i24Xlarge: Self { .init(rawValue: "i2.4xlarge") }
        public static var i28Xlarge: Self { .init(rawValue: "i2.8xlarge") }
        public static var i2Xlarge: Self { .init(rawValue: "i2.xlarge") }
        public static var i316Xlarge: Self { .init(rawValue: "i3.16xlarge") }
        public static var i32Xlarge: Self { .init(rawValue: "i3.2xlarge") }
        public static var i34Xlarge: Self { .init(rawValue: "i3.4xlarge") }
        public static var i38Xlarge: Self { .init(rawValue: "i3.8xlarge") }
        public static var i3Large: Self { .init(rawValue: "i3.large") }
        public static var i3Metal: Self { .init(rawValue: "i3.metal") }
        public static var i3Xlarge: Self { .init(rawValue: "i3.xlarge") }
        public static var i3en12Xlarge: Self { .init(rawValue: "i3en.12xlarge") }
        public static var i3en24Xlarge: Self { .init(rawValue: "i3en.24xlarge") }
        public static var i3en2Xlarge: Self { .init(rawValue: "i3en.2xlarge") }
        public static var i3en3Xlarge: Self { .init(rawValue: "i3en.3xlarge") }
        public static var i3en6Xlarge: Self { .init(rawValue: "i3en.6xlarge") }
        public static var i3enLarge: Self { .init(rawValue: "i3en.large") }
        public static var i3enMetal: Self { .init(rawValue: "i3en.metal") }
        public static var i3enXlarge: Self { .init(rawValue: "i3en.xlarge") }
        public static var i4g16Xlarge: Self { .init(rawValue: "i4g.16xlarge") }
        public static var i4g2Xlarge: Self { .init(rawValue: "i4g.2xlarge") }
        public static var i4g4Xlarge: Self { .init(rawValue: "i4g.4xlarge") }
        public static var i4g8Xlarge: Self { .init(rawValue: "i4g.8xlarge") }
        public static var i4gLarge: Self { .init(rawValue: "i4g.large") }
        public static var i4gXlarge: Self { .init(rawValue: "i4g.xlarge") }
        public static var i4i12Xlarge: Self { .init(rawValue: "i4i.12xlarge") }
        public static var i4i16Xlarge: Self { .init(rawValue: "i4i.16xlarge") }
        public static var i4i24Xlarge: Self { .init(rawValue: "i4i.24xlarge") }
        public static var i4i2Xlarge: Self { .init(rawValue: "i4i.2xlarge") }
        public static var i4i32Xlarge: Self { .init(rawValue: "i4i.32xlarge") }
        public static var i4i4Xlarge: Self { .init(rawValue: "i4i.4xlarge") }
        public static var i4i8Xlarge: Self { .init(rawValue: "i4i.8xlarge") }
        public static var i4iLarge: Self { .init(rawValue: "i4i.large") }
        public static var i4iMetal: Self { .init(rawValue: "i4i.metal") }
        public static var i4iXlarge: Self { .init(rawValue: "i4i.xlarge") }
        public static var im4gn16Xlarge: Self { .init(rawValue: "im4gn.16xlarge") }
        public static var im4gn2Xlarge: Self { .init(rawValue: "im4gn.2xlarge") }
        public static var im4gn4Xlarge: Self { .init(rawValue: "im4gn.4xlarge") }
        public static var im4gn8Xlarge: Self { .init(rawValue: "im4gn.8xlarge") }
        public static var im4gnLarge: Self { .init(rawValue: "im4gn.large") }
        public static var im4gnXlarge: Self { .init(rawValue: "im4gn.xlarge") }
        public static var inf124Xlarge: Self { .init(rawValue: "inf1.24xlarge") }
        public static var inf12Xlarge: Self { .init(rawValue: "inf1.2xlarge") }
        public static var inf16Xlarge: Self { .init(rawValue: "inf1.6xlarge") }
        public static var inf1Xlarge: Self { .init(rawValue: "inf1.xlarge") }
        public static var inf224Xlarge: Self { .init(rawValue: "inf2.24xlarge") }
        public static var inf248Xlarge: Self { .init(rawValue: "inf2.48xlarge") }
        public static var inf28Xlarge: Self { .init(rawValue: "inf2.8xlarge") }
        public static var inf2Xlarge: Self { .init(rawValue: "inf2.xlarge") }
        public static var is4gen2Xlarge: Self { .init(rawValue: "is4gen.2xlarge") }
        public static var is4gen4Xlarge: Self { .init(rawValue: "is4gen.4xlarge") }
        public static var is4gen8Xlarge: Self { .init(rawValue: "is4gen.8xlarge") }
        public static var is4genLarge: Self { .init(rawValue: "is4gen.large") }
        public static var is4genMedium: Self { .init(rawValue: "is4gen.medium") }
        public static var is4genXlarge: Self { .init(rawValue: "is4gen.xlarge") }
        public static var m1Large: Self { .init(rawValue: "m1.large") }
        public static var m1Medium: Self { .init(rawValue: "m1.medium") }
        public static var m1Small: Self { .init(rawValue: "m1.small") }
        public static var m1Xlarge: Self { .init(rawValue: "m1.xlarge") }
        public static var m22Xlarge: Self { .init(rawValue: "m2.2xlarge") }
        public static var m24Xlarge: Self { .init(rawValue: "m2.4xlarge") }
        public static var m2Xlarge: Self { .init(rawValue: "m2.xlarge") }
        public static var m32Xlarge: Self { .init(rawValue: "m3.2xlarge") }
        public static var m3Large: Self { .init(rawValue: "m3.large") }
        public static var m3Medium: Self { .init(rawValue: "m3.medium") }
        public static var m3Xlarge: Self { .init(rawValue: "m3.xlarge") }
        public static var m410Xlarge: Self { .init(rawValue: "m4.10xlarge") }
        public static var m416Xlarge: Self { .init(rawValue: "m4.16xlarge") }
        public static var m42Xlarge: Self { .init(rawValue: "m4.2xlarge") }
        public static var m44Xlarge: Self { .init(rawValue: "m4.4xlarge") }
        public static var m4Large: Self { .init(rawValue: "m4.large") }
        public static var m4Xlarge: Self { .init(rawValue: "m4.xlarge") }
        public static var m512Xlarge: Self { .init(rawValue: "m5.12xlarge") }
        public static var m516Xlarge: Self { .init(rawValue: "m5.16xlarge") }
        public static var m524Xlarge: Self { .init(rawValue: "m5.24xlarge") }
        public static var m52Xlarge: Self { .init(rawValue: "m5.2xlarge") }
        public static var m54Xlarge: Self { .init(rawValue: "m5.4xlarge") }
        public static var m58Xlarge: Self { .init(rawValue: "m5.8xlarge") }
        public static var m5Large: Self { .init(rawValue: "m5.large") }
        public static var m5Metal: Self { .init(rawValue: "m5.metal") }
        public static var m5Xlarge: Self { .init(rawValue: "m5.xlarge") }
        public static var m5a12Xlarge: Self { .init(rawValue: "m5a.12xlarge") }
        public static var m5a16Xlarge: Self { .init(rawValue: "m5a.16xlarge") }
        public static var m5a24Xlarge: Self { .init(rawValue: "m5a.24xlarge") }
        public static var m5a2Xlarge: Self { .init(rawValue: "m5a.2xlarge") }
        public static var m5a4Xlarge: Self { .init(rawValue: "m5a.4xlarge") }
        public static var m5a8Xlarge: Self { .init(rawValue: "m5a.8xlarge") }
        public static var m5aLarge: Self { .init(rawValue: "m5a.large") }
        public static var m5aXlarge: Self { .init(rawValue: "m5a.xlarge") }
        public static var m5ad12Xlarge: Self { .init(rawValue: "m5ad.12xlarge") }
        public static var m5ad16Xlarge: Self { .init(rawValue: "m5ad.16xlarge") }
        public static var m5ad24Xlarge: Self { .init(rawValue: "m5ad.24xlarge") }
        public static var m5ad2Xlarge: Self { .init(rawValue: "m5ad.2xlarge") }
        public static var m5ad4Xlarge: Self { .init(rawValue: "m5ad.4xlarge") }
        public static var m5ad8Xlarge: Self { .init(rawValue: "m5ad.8xlarge") }
        public static var m5adLarge: Self { .init(rawValue: "m5ad.large") }
        public static var m5adXlarge: Self { .init(rawValue: "m5ad.xlarge") }
        public static var m5d12Xlarge: Self { .init(rawValue: "m5d.12xlarge") }
        public static var m5d16Xlarge: Self { .init(rawValue: "m5d.16xlarge") }
        public static var m5d24Xlarge: Self { .init(rawValue: "m5d.24xlarge") }
        public static var m5d2Xlarge: Self { .init(rawValue: "m5d.2xlarge") }
        public static var m5d4Xlarge: Self { .init(rawValue: "m5d.4xlarge") }
        public static var m5d8Xlarge: Self { .init(rawValue: "m5d.8xlarge") }
        public static var m5dLarge: Self { .init(rawValue: "m5d.large") }
        public static var m5dMetal: Self { .init(rawValue: "m5d.metal") }
        public static var m5dXlarge: Self { .init(rawValue: "m5d.xlarge") }
        public static var m5dn12Xlarge: Self { .init(rawValue: "m5dn.12xlarge") }
        public static var m5dn16Xlarge: Self { .init(rawValue: "m5dn.16xlarge") }
        public static var m5dn24Xlarge: Self { .init(rawValue: "m5dn.24xlarge") }
        public static var m5dn2Xlarge: Self { .init(rawValue: "m5dn.2xlarge") }
        public static var m5dn4Xlarge: Self { .init(rawValue: "m5dn.4xlarge") }
        public static var m5dn8Xlarge: Self { .init(rawValue: "m5dn.8xlarge") }
        public static var m5dnLarge: Self { .init(rawValue: "m5dn.large") }
        public static var m5dnMetal: Self { .init(rawValue: "m5dn.metal") }
        public static var m5dnXlarge: Self { .init(rawValue: "m5dn.xlarge") }
        public static var m5n12Xlarge: Self { .init(rawValue: "m5n.12xlarge") }
        public static var m5n16Xlarge: Self { .init(rawValue: "m5n.16xlarge") }
        public static var m5n24Xlarge: Self { .init(rawValue: "m5n.24xlarge") }
        public static var m5n2Xlarge: Self { .init(rawValue: "m5n.2xlarge") }
        public static var m5n4Xlarge: Self { .init(rawValue: "m5n.4xlarge") }
        public static var m5n8Xlarge: Self { .init(rawValue: "m5n.8xlarge") }
        public static var m5nLarge: Self { .init(rawValue: "m5n.large") }
        public static var m5nMetal: Self { .init(rawValue: "m5n.metal") }
        public static var m5nXlarge: Self { .init(rawValue: "m5n.xlarge") }
        public static var m5zn12Xlarge: Self { .init(rawValue: "m5zn.12xlarge") }
        public static var m5zn2Xlarge: Self { .init(rawValue: "m5zn.2xlarge") }
        public static var m5zn3Xlarge: Self { .init(rawValue: "m5zn.3xlarge") }
        public static var m5zn6Xlarge: Self { .init(rawValue: "m5zn.6xlarge") }
        public static var m5znLarge: Self { .init(rawValue: "m5zn.large") }
        public static var m5znMetal: Self { .init(rawValue: "m5zn.metal") }
        public static var m5znXlarge: Self { .init(rawValue: "m5zn.xlarge") }
        public static var m6a12Xlarge: Self { .init(rawValue: "m6a.12xlarge") }
        public static var m6a16Xlarge: Self { .init(rawValue: "m6a.16xlarge") }
        public static var m6a24Xlarge: Self { .init(rawValue: "m6a.24xlarge") }
        public static var m6a2Xlarge: Self { .init(rawValue: "m6a.2xlarge") }
        public static var m6a32Xlarge: Self { .init(rawValue: "m6a.32xlarge") }
        public static var m6a48Xlarge: Self { .init(rawValue: "m6a.48xlarge") }
        public static var m6a4Xlarge: Self { .init(rawValue: "m6a.4xlarge") }
        public static var m6a8Xlarge: Self { .init(rawValue: "m6a.8xlarge") }
        public static var m6aLarge: Self { .init(rawValue: "m6a.large") }
        public static var m6aMetal: Self { .init(rawValue: "m6a.metal") }
        public static var m6aXlarge: Self { .init(rawValue: "m6a.xlarge") }
        public static var m6g12Xlarge: Self { .init(rawValue: "m6g.12xlarge") }
        public static var m6g16Xlarge: Self { .init(rawValue: "m6g.16xlarge") }
        public static var m6g2Xlarge: Self { .init(rawValue: "m6g.2xlarge") }
        public static var m6g4Xlarge: Self { .init(rawValue: "m6g.4xlarge") }
        public static var m6g8Xlarge: Self { .init(rawValue: "m6g.8xlarge") }
        public static var m6gLarge: Self { .init(rawValue: "m6g.large") }
        public static var m6gMedium: Self { .init(rawValue: "m6g.medium") }
        public static var m6gMetal: Self { .init(rawValue: "m6g.metal") }
        public static var m6gXlarge: Self { .init(rawValue: "m6g.xlarge") }
        public static var m6gd12Xlarge: Self { .init(rawValue: "m6gd.12xlarge") }
        public static var m6gd16Xlarge: Self { .init(rawValue: "m6gd.16xlarge") }
        public static var m6gd2Xlarge: Self { .init(rawValue: "m6gd.2xlarge") }
        public static var m6gd4Xlarge: Self { .init(rawValue: "m6gd.4xlarge") }
        public static var m6gd8Xlarge: Self { .init(rawValue: "m6gd.8xlarge") }
        public static var m6gdLarge: Self { .init(rawValue: "m6gd.large") }
        public static var m6gdMedium: Self { .init(rawValue: "m6gd.medium") }
        public static var m6gdMetal: Self { .init(rawValue: "m6gd.metal") }
        public static var m6gdXlarge: Self { .init(rawValue: "m6gd.xlarge") }
        public static var m6i12Xlarge: Self { .init(rawValue: "m6i.12xlarge") }
        public static var m6i16Xlarge: Self { .init(rawValue: "m6i.16xlarge") }
        public static var m6i24Xlarge: Self { .init(rawValue: "m6i.24xlarge") }
        public static var m6i2Xlarge: Self { .init(rawValue: "m6i.2xlarge") }
        public static var m6i32Xlarge: Self { .init(rawValue: "m6i.32xlarge") }
        public static var m6i4Xlarge: Self { .init(rawValue: "m6i.4xlarge") }
        public static var m6i8Xlarge: Self { .init(rawValue: "m6i.8xlarge") }
        public static var m6iLarge: Self { .init(rawValue: "m6i.large") }
        public static var m6iMetal: Self { .init(rawValue: "m6i.metal") }
        public static var m6iXlarge: Self { .init(rawValue: "m6i.xlarge") }
        public static var m6id12Xlarge: Self { .init(rawValue: "m6id.12xlarge") }
        public static var m6id16Xlarge: Self { .init(rawValue: "m6id.16xlarge") }
        public static var m6id24Xlarge: Self { .init(rawValue: "m6id.24xlarge") }
        public static var m6id2Xlarge: Self { .init(rawValue: "m6id.2xlarge") }
        public static var m6id32Xlarge: Self { .init(rawValue: "m6id.32xlarge") }
        public static var m6id4Xlarge: Self { .init(rawValue: "m6id.4xlarge") }
        public static var m6id8Xlarge: Self { .init(rawValue: "m6id.8xlarge") }
        public static var m6idLarge: Self { .init(rawValue: "m6id.large") }
        public static var m6idMetal: Self { .init(rawValue: "m6id.metal") }
        public static var m6idXlarge: Self { .init(rawValue: "m6id.xlarge") }
        public static var m6idn12Xlarge: Self { .init(rawValue: "m6idn.12xlarge") }
        public static var m6idn16Xlarge: Self { .init(rawValue: "m6idn.16xlarge") }
        public static var m6idn24Xlarge: Self { .init(rawValue: "m6idn.24xlarge") }
        public static var m6idn2Xlarge: Self { .init(rawValue: "m6idn.2xlarge") }
        public static var m6idn32Xlarge: Self { .init(rawValue: "m6idn.32xlarge") }
        public static var m6idn4Xlarge: Self { .init(rawValue: "m6idn.4xlarge") }
        public static var m6idn8Xlarge: Self { .init(rawValue: "m6idn.8xlarge") }
        public static var m6idnLarge: Self { .init(rawValue: "m6idn.large") }
        public static var m6idnMetal: Self { .init(rawValue: "m6idn.metal") }
        public static var m6idnXlarge: Self { .init(rawValue: "m6idn.xlarge") }
        public static var m6in12Xlarge: Self { .init(rawValue: "m6in.12xlarge") }
        public static var m6in16Xlarge: Self { .init(rawValue: "m6in.16xlarge") }
        public static var m6in24Xlarge: Self { .init(rawValue: "m6in.24xlarge") }
        public static var m6in2Xlarge: Self { .init(rawValue: "m6in.2xlarge") }
        public static var m6in32Xlarge: Self { .init(rawValue: "m6in.32xlarge") }
        public static var m6in4Xlarge: Self { .init(rawValue: "m6in.4xlarge") }
        public static var m6in8Xlarge: Self { .init(rawValue: "m6in.8xlarge") }
        public static var m6inLarge: Self { .init(rawValue: "m6in.large") }
        public static var m6inMetal: Self { .init(rawValue: "m6in.metal") }
        public static var m6inXlarge: Self { .init(rawValue: "m6in.xlarge") }
        public static var m7a12Xlarge: Self { .init(rawValue: "m7a.12xlarge") }
        public static var m7a16Xlarge: Self { .init(rawValue: "m7a.16xlarge") }
        public static var m7a24Xlarge: Self { .init(rawValue: "m7a.24xlarge") }
        public static var m7a2Xlarge: Self { .init(rawValue: "m7a.2xlarge") }
        public static var m7a32Xlarge: Self { .init(rawValue: "m7a.32xlarge") }
        public static var m7a48Xlarge: Self { .init(rawValue: "m7a.48xlarge") }
        public static var m7a4Xlarge: Self { .init(rawValue: "m7a.4xlarge") }
        public static var m7a8Xlarge: Self { .init(rawValue: "m7a.8xlarge") }
        public static var m7aLarge: Self { .init(rawValue: "m7a.large") }
        public static var m7aMedium: Self { .init(rawValue: "m7a.medium") }
        public static var m7aMetal48Xl: Self { .init(rawValue: "m7a.metal-48xl") }
        public static var m7aXlarge: Self { .init(rawValue: "m7a.xlarge") }
        public static var m7g12Xlarge: Self { .init(rawValue: "m7g.12xlarge") }
        public static var m7g16Xlarge: Self { .init(rawValue: "m7g.16xlarge") }
        public static var m7g2Xlarge: Self { .init(rawValue: "m7g.2xlarge") }
        public static var m7g4Xlarge: Self { .init(rawValue: "m7g.4xlarge") }
        public static var m7g8Xlarge: Self { .init(rawValue: "m7g.8xlarge") }
        public static var m7gLarge: Self { .init(rawValue: "m7g.large") }
        public static var m7gMedium: Self { .init(rawValue: "m7g.medium") }
        public static var m7gMetal: Self { .init(rawValue: "m7g.metal") }
        public static var m7gXlarge: Self { .init(rawValue: "m7g.xlarge") }
        public static var m7gd12Xlarge: Self { .init(rawValue: "m7gd.12xlarge") }
        public static var m7gd16Xlarge: Self { .init(rawValue: "m7gd.16xlarge") }
        public static var m7gd2Xlarge: Self { .init(rawValue: "m7gd.2xlarge") }
        public static var m7gd4Xlarge: Self { .init(rawValue: "m7gd.4xlarge") }
        public static var m7gd8Xlarge: Self { .init(rawValue: "m7gd.8xlarge") }
        public static var m7gdLarge: Self { .init(rawValue: "m7gd.large") }
        public static var m7gdMedium: Self { .init(rawValue: "m7gd.medium") }
        public static var m7gdMetal: Self { .init(rawValue: "m7gd.metal") }
        public static var m7gdXlarge: Self { .init(rawValue: "m7gd.xlarge") }
        public static var m7i12Xlarge: Self { .init(rawValue: "m7i.12xlarge") }
        public static var m7i16Xlarge: Self { .init(rawValue: "m7i.16xlarge") }
        public static var m7i24Xlarge: Self { .init(rawValue: "m7i.24xlarge") }
        public static var m7i2Xlarge: Self { .init(rawValue: "m7i.2xlarge") }
        public static var m7i48Xlarge: Self { .init(rawValue: "m7i.48xlarge") }
        public static var m7i4Xlarge: Self { .init(rawValue: "m7i.4xlarge") }
        public static var m7i8Xlarge: Self { .init(rawValue: "m7i.8xlarge") }
        public static var m7iFlex2Xlarge: Self { .init(rawValue: "m7i-flex.2xlarge") }
        public static var m7iFlex4Xlarge: Self { .init(rawValue: "m7i-flex.4xlarge") }
        public static var m7iFlex8Xlarge: Self { .init(rawValue: "m7i-flex.8xlarge") }
        public static var m7iFlexLarge: Self { .init(rawValue: "m7i-flex.large") }
        public static var m7iFlexXlarge: Self { .init(rawValue: "m7i-flex.xlarge") }
        public static var m7iLarge: Self { .init(rawValue: "m7i.large") }
        public static var m7iMetal24Xl: Self { .init(rawValue: "m7i.metal-24xl") }
        public static var m7iMetal48Xl: Self { .init(rawValue: "m7i.metal-48xl") }
        public static var m7iXlarge: Self { .init(rawValue: "m7i.xlarge") }
        public static var mac1Metal: Self { .init(rawValue: "mac1.metal") }
        public static var mac2M2Metal: Self { .init(rawValue: "mac2-m2.metal") }
        public static var mac2M2ProMetal: Self { .init(rawValue: "mac2-m2pro.metal") }
        public static var mac2Metal: Self { .init(rawValue: "mac2.metal") }
        public static var p216Xlarge: Self { .init(rawValue: "p2.16xlarge") }
        public static var p28Xlarge: Self { .init(rawValue: "p2.8xlarge") }
        public static var p2Xlarge: Self { .init(rawValue: "p2.xlarge") }
        public static var p316Xlarge: Self { .init(rawValue: "p3.16xlarge") }
        public static var p32Xlarge: Self { .init(rawValue: "p3.2xlarge") }
        public static var p38Xlarge: Self { .init(rawValue: "p3.8xlarge") }
        public static var p3dn24Xlarge: Self { .init(rawValue: "p3dn.24xlarge") }
        public static var p4d24Xlarge: Self { .init(rawValue: "p4d.24xlarge") }
        public static var p4de24Xlarge: Self { .init(rawValue: "p4de.24xlarge") }
        public static var p548Xlarge: Self { .init(rawValue: "p5.48xlarge") }
        public static var r32Xlarge: Self { .init(rawValue: "r3.2xlarge") }
        public static var r34Xlarge: Self { .init(rawValue: "r3.4xlarge") }
        public static var r38Xlarge: Self { .init(rawValue: "r3.8xlarge") }
        public static var r3Large: Self { .init(rawValue: "r3.large") }
        public static var r3Xlarge: Self { .init(rawValue: "r3.xlarge") }
        public static var r416Xlarge: Self { .init(rawValue: "r4.16xlarge") }
        public static var r42Xlarge: Self { .init(rawValue: "r4.2xlarge") }
        public static var r44Xlarge: Self { .init(rawValue: "r4.4xlarge") }
        public static var r48Xlarge: Self { .init(rawValue: "r4.8xlarge") }
        public static var r4Large: Self { .init(rawValue: "r4.large") }
        public static var r4Xlarge: Self { .init(rawValue: "r4.xlarge") }
        public static var r512Xlarge: Self { .init(rawValue: "r5.12xlarge") }
        public static var r516Xlarge: Self { .init(rawValue: "r5.16xlarge") }
        public static var r524Xlarge: Self { .init(rawValue: "r5.24xlarge") }
        public static var r52Xlarge: Self { .init(rawValue: "r5.2xlarge") }
        public static var r54Xlarge: Self { .init(rawValue: "r5.4xlarge") }
        public static var r58Xlarge: Self { .init(rawValue: "r5.8xlarge") }
        public static var r5Large: Self { .init(rawValue: "r5.large") }
        public static var r5Metal: Self { .init(rawValue: "r5.metal") }
        public static var r5Xlarge: Self { .init(rawValue: "r5.xlarge") }
        public static var r5a12Xlarge: Self { .init(rawValue: "r5a.12xlarge") }
        public static var r5a16Xlarge: Self { .init(rawValue: "r5a.16xlarge") }
        public static var r5a24Xlarge: Self { .init(rawValue: "r5a.24xlarge") }
        public static var r5a2Xlarge: Self { .init(rawValue: "r5a.2xlarge") }
        public static var r5a4Xlarge: Self { .init(rawValue: "r5a.4xlarge") }
        public static var r5a8Xlarge: Self { .init(rawValue: "r5a.8xlarge") }
        public static var r5aLarge: Self { .init(rawValue: "r5a.large") }
        public static var r5aXlarge: Self { .init(rawValue: "r5a.xlarge") }
        public static var r5ad12Xlarge: Self { .init(rawValue: "r5ad.12xlarge") }
        public static var r5ad16Xlarge: Self { .init(rawValue: "r5ad.16xlarge") }
        public static var r5ad24Xlarge: Self { .init(rawValue: "r5ad.24xlarge") }
        public static var r5ad2Xlarge: Self { .init(rawValue: "r5ad.2xlarge") }
        public static var r5ad4Xlarge: Self { .init(rawValue: "r5ad.4xlarge") }
        public static var r5ad8Xlarge: Self { .init(rawValue: "r5ad.8xlarge") }
        public static var r5adLarge: Self { .init(rawValue: "r5ad.large") }
        public static var r5adXlarge: Self { .init(rawValue: "r5ad.xlarge") }
        public static var r5b12Xlarge: Self { .init(rawValue: "r5b.12xlarge") }
        public static var r5b16Xlarge: Self { .init(rawValue: "r5b.16xlarge") }
        public static var r5b24Xlarge: Self { .init(rawValue: "r5b.24xlarge") }
        public static var r5b2Xlarge: Self { .init(rawValue: "r5b.2xlarge") }
        public static var r5b4Xlarge: Self { .init(rawValue: "r5b.4xlarge") }
        public static var r5b8Xlarge: Self { .init(rawValue: "r5b.8xlarge") }
        public static var r5bLarge: Self { .init(rawValue: "r5b.large") }
        public static var r5bMetal: Self { .init(rawValue: "r5b.metal") }
        public static var r5bXlarge: Self { .init(rawValue: "r5b.xlarge") }
        public static var r5d12Xlarge: Self { .init(rawValue: "r5d.12xlarge") }
        public static var r5d16Xlarge: Self { .init(rawValue: "r5d.16xlarge") }
        public static var r5d24Xlarge: Self { .init(rawValue: "r5d.24xlarge") }
        public static var r5d2Xlarge: Self { .init(rawValue: "r5d.2xlarge") }
        public static var r5d4Xlarge: Self { .init(rawValue: "r5d.4xlarge") }
        public static var r5d8Xlarge: Self { .init(rawValue: "r5d.8xlarge") }
        public static var r5dLarge: Self { .init(rawValue: "r5d.large") }
        public static var r5dMetal: Self { .init(rawValue: "r5d.metal") }
        public static var r5dXlarge: Self { .init(rawValue: "r5d.xlarge") }
        public static var r5dn12Xlarge: Self { .init(rawValue: "r5dn.12xlarge") }
        public static var r5dn16Xlarge: Self { .init(rawValue: "r5dn.16xlarge") }
        public static var r5dn24Xlarge: Self { .init(rawValue: "r5dn.24xlarge") }
        public static var r5dn2Xlarge: Self { .init(rawValue: "r5dn.2xlarge") }
        public static var r5dn4Xlarge: Self { .init(rawValue: "r5dn.4xlarge") }
        public static var r5dn8Xlarge: Self { .init(rawValue: "r5dn.8xlarge") }
        public static var r5dnLarge: Self { .init(rawValue: "r5dn.large") }
        public static var r5dnMetal: Self { .init(rawValue: "r5dn.metal") }
        public static var r5dnXlarge: Self { .init(rawValue: "r5dn.xlarge") }
        public static var r5n12Xlarge: Self { .init(rawValue: "r5n.12xlarge") }
        public static var r5n16Xlarge: Self { .init(rawValue: "r5n.16xlarge") }
        public static var r5n24Xlarge: Self { .init(rawValue: "r5n.24xlarge") }
        public static var r5n2Xlarge: Self { .init(rawValue: "r5n.2xlarge") }
        public static var r5n4Xlarge: Self { .init(rawValue: "r5n.4xlarge") }
        public static var r5n8Xlarge: Self { .init(rawValue: "r5n.8xlarge") }
        public static var r5nLarge: Self { .init(rawValue: "r5n.large") }
        public static var r5nMetal: Self { .init(rawValue: "r5n.metal") }
        public static var r5nXlarge: Self { .init(rawValue: "r5n.xlarge") }
        public static var r6a12Xlarge: Self { .init(rawValue: "r6a.12xlarge") }
        public static var r6a16Xlarge: Self { .init(rawValue: "r6a.16xlarge") }
        public static var r6a24Xlarge: Self { .init(rawValue: "r6a.24xlarge") }
        public static var r6a2Xlarge: Self { .init(rawValue: "r6a.2xlarge") }
        public static var r6a32Xlarge: Self { .init(rawValue: "r6a.32xlarge") }
        public static var r6a48Xlarge: Self { .init(rawValue: "r6a.48xlarge") }
        public static var r6a4Xlarge: Self { .init(rawValue: "r6a.4xlarge") }
        public static var r6a8Xlarge: Self { .init(rawValue: "r6a.8xlarge") }
        public static var r6aLarge: Self { .init(rawValue: "r6a.large") }
        public static var r6aMetal: Self { .init(rawValue: "r6a.metal") }
        public static var r6aXlarge: Self { .init(rawValue: "r6a.xlarge") }
        public static var r6g12Xlarge: Self { .init(rawValue: "r6g.12xlarge") }
        public static var r6g16Xlarge: Self { .init(rawValue: "r6g.16xlarge") }
        public static var r6g2Xlarge: Self { .init(rawValue: "r6g.2xlarge") }
        public static var r6g4Xlarge: Self { .init(rawValue: "r6g.4xlarge") }
        public static var r6g8Xlarge: Self { .init(rawValue: "r6g.8xlarge") }
        public static var r6gLarge: Self { .init(rawValue: "r6g.large") }
        public static var r6gMedium: Self { .init(rawValue: "r6g.medium") }
        public static var r6gMetal: Self { .init(rawValue: "r6g.metal") }
        public static var r6gXlarge: Self { .init(rawValue: "r6g.xlarge") }
        public static var r6gd12Xlarge: Self { .init(rawValue: "r6gd.12xlarge") }
        public static var r6gd16Xlarge: Self { .init(rawValue: "r6gd.16xlarge") }
        public static var r6gd2Xlarge: Self { .init(rawValue: "r6gd.2xlarge") }
        public static var r6gd4Xlarge: Self { .init(rawValue: "r6gd.4xlarge") }
        public static var r6gd8Xlarge: Self { .init(rawValue: "r6gd.8xlarge") }
        public static var r6gdLarge: Self { .init(rawValue: "r6gd.large") }
        public static var r6gdMedium: Self { .init(rawValue: "r6gd.medium") }
        public static var r6gdMetal: Self { .init(rawValue: "r6gd.metal") }
        public static var r6gdXlarge: Self { .init(rawValue: "r6gd.xlarge") }
        public static var r6i12Xlarge: Self { .init(rawValue: "r6i.12xlarge") }
        public static var r6i16Xlarge: Self { .init(rawValue: "r6i.16xlarge") }
        public static var r6i24Xlarge: Self { .init(rawValue: "r6i.24xlarge") }
        public static var r6i2Xlarge: Self { .init(rawValue: "r6i.2xlarge") }
        public static var r6i32Xlarge: Self { .init(rawValue: "r6i.32xlarge") }
        public static var r6i4Xlarge: Self { .init(rawValue: "r6i.4xlarge") }
        public static var r6i8Xlarge: Self { .init(rawValue: "r6i.8xlarge") }
        public static var r6iLarge: Self { .init(rawValue: "r6i.large") }
        public static var r6iMetal: Self { .init(rawValue: "r6i.metal") }
        public static var r6iXlarge: Self { .init(rawValue: "r6i.xlarge") }
        public static var r6id12Xlarge: Self { .init(rawValue: "r6id.12xlarge") }
        public static var r6id16Xlarge: Self { .init(rawValue: "r6id.16xlarge") }
        public static var r6id24Xlarge: Self { .init(rawValue: "r6id.24xlarge") }
        public static var r6id2Xlarge: Self { .init(rawValue: "r6id.2xlarge") }
        public static var r6id32Xlarge: Self { .init(rawValue: "r6id.32xlarge") }
        public static var r6id4Xlarge: Self { .init(rawValue: "r6id.4xlarge") }
        public static var r6id8Xlarge: Self { .init(rawValue: "r6id.8xlarge") }
        public static var r6idLarge: Self { .init(rawValue: "r6id.large") }
        public static var r6idMetal: Self { .init(rawValue: "r6id.metal") }
        public static var r6idXlarge: Self { .init(rawValue: "r6id.xlarge") }
        public static var r6idn12Xlarge: Self { .init(rawValue: "r6idn.12xlarge") }
        public static var r6idn16Xlarge: Self { .init(rawValue: "r6idn.16xlarge") }
        public static var r6idn24Xlarge: Self { .init(rawValue: "r6idn.24xlarge") }
        public static var r6idn2Xlarge: Self { .init(rawValue: "r6idn.2xlarge") }
        public static var r6idn32Xlarge: Self { .init(rawValue: "r6idn.32xlarge") }
        public static var r6idn4Xlarge: Self { .init(rawValue: "r6idn.4xlarge") }
        public static var r6idn8Xlarge: Self { .init(rawValue: "r6idn.8xlarge") }
        public static var r6idnLarge: Self { .init(rawValue: "r6idn.large") }
        public static var r6idnMetal: Self { .init(rawValue: "r6idn.metal") }
        public static var r6idnXlarge: Self { .init(rawValue: "r6idn.xlarge") }
        public static var r6in12Xlarge: Self { .init(rawValue: "r6in.12xlarge") }
        public static var r6in16Xlarge: Self { .init(rawValue: "r6in.16xlarge") }
        public static var r6in24Xlarge: Self { .init(rawValue: "r6in.24xlarge") }
        public static var r6in2Xlarge: Self { .init(rawValue: "r6in.2xlarge") }
        public static var r6in32Xlarge: Self { .init(rawValue: "r6in.32xlarge") }
        public static var r6in4Xlarge: Self { .init(rawValue: "r6in.4xlarge") }
        public static var r6in8Xlarge: Self { .init(rawValue: "r6in.8xlarge") }
        public static var r6inLarge: Self { .init(rawValue: "r6in.large") }
        public static var r6inMetal: Self { .init(rawValue: "r6in.metal") }
        public static var r6inXlarge: Self { .init(rawValue: "r6in.xlarge") }
        public static var r7a12Xlarge: Self { .init(rawValue: "r7a.12xlarge") }
        public static var r7a16Xlarge: Self { .init(rawValue: "r7a.16xlarge") }
        public static var r7a24Xlarge: Self { .init(rawValue: "r7a.24xlarge") }
        public static var r7a2Xlarge: Self { .init(rawValue: "r7a.2xlarge") }
        public static var r7a32Xlarge: Self { .init(rawValue: "r7a.32xlarge") }
        public static var r7a48Xlarge: Self { .init(rawValue: "r7a.48xlarge") }
        public static var r7a4Xlarge: Self { .init(rawValue: "r7a.4xlarge") }
        public static var r7a8Xlarge: Self { .init(rawValue: "r7a.8xlarge") }
        public static var r7aLarge: Self { .init(rawValue: "r7a.large") }
        public static var r7aMedium: Self { .init(rawValue: "r7a.medium") }
        public static var r7aMetal48Xl: Self { .init(rawValue: "r7a.metal-48xl") }
        public static var r7aXlarge: Self { .init(rawValue: "r7a.xlarge") }
        public static var r7g12Xlarge: Self { .init(rawValue: "r7g.12xlarge") }
        public static var r7g16Xlarge: Self { .init(rawValue: "r7g.16xlarge") }
        public static var r7g2Xlarge: Self { .init(rawValue: "r7g.2xlarge") }
        public static var r7g4Xlarge: Self { .init(rawValue: "r7g.4xlarge") }
        public static var r7g8Xlarge: Self { .init(rawValue: "r7g.8xlarge") }
        public static var r7gLarge: Self { .init(rawValue: "r7g.large") }
        public static var r7gMedium: Self { .init(rawValue: "r7g.medium") }
        public static var r7gMetal: Self { .init(rawValue: "r7g.metal") }
        public static var r7gXlarge: Self { .init(rawValue: "r7g.xlarge") }
        public static var r7gd12Xlarge: Self { .init(rawValue: "r7gd.12xlarge") }
        public static var r7gd16Xlarge: Self { .init(rawValue: "r7gd.16xlarge") }
        public static var r7gd2Xlarge: Self { .init(rawValue: "r7gd.2xlarge") }
        public static var r7gd4Xlarge: Self { .init(rawValue: "r7gd.4xlarge") }
        public static var r7gd8Xlarge: Self { .init(rawValue: "r7gd.8xlarge") }
        public static var r7gdLarge: Self { .init(rawValue: "r7gd.large") }
        public static var r7gdMedium: Self { .init(rawValue: "r7gd.medium") }
        public static var r7gdMetal: Self { .init(rawValue: "r7gd.metal") }
        public static var r7gdXlarge: Self { .init(rawValue: "r7gd.xlarge") }
        public static var r7i12Xlarge: Self { .init(rawValue: "r7i.12xlarge") }
        public static var r7i16Xlarge: Self { .init(rawValue: "r7i.16xlarge") }
        public static var r7i24Xlarge: Self { .init(rawValue: "r7i.24xlarge") }
        public static var r7i2Xlarge: Self { .init(rawValue: "r7i.2xlarge") }
        public static var r7i48Xlarge: Self { .init(rawValue: "r7i.48xlarge") }
        public static var r7i4Xlarge: Self { .init(rawValue: "r7i.4xlarge") }
        public static var r7i8Xlarge: Self { .init(rawValue: "r7i.8xlarge") }
        public static var r7iLarge: Self { .init(rawValue: "r7i.large") }
        public static var r7iMetal24Xl: Self { .init(rawValue: "r7i.metal-24xl") }
        public static var r7iMetal48Xl: Self { .init(rawValue: "r7i.metal-48xl") }
        public static var r7iXlarge: Self { .init(rawValue: "r7i.xlarge") }
        public static var r7iz12Xlarge: Self { .init(rawValue: "r7iz.12xlarge") }
        public static var r7iz16Xlarge: Self { .init(rawValue: "r7iz.16xlarge") }
        public static var r7iz2Xlarge: Self { .init(rawValue: "r7iz.2xlarge") }
        public static var r7iz32Xlarge: Self { .init(rawValue: "r7iz.32xlarge") }
        public static var r7iz4Xlarge: Self { .init(rawValue: "r7iz.4xlarge") }
        public static var r7iz8Xlarge: Self { .init(rawValue: "r7iz.8xlarge") }
        public static var r7izLarge: Self { .init(rawValue: "r7iz.large") }
        public static var r7izMetal16Xl: Self { .init(rawValue: "r7iz.metal-16xl") }
        public static var r7izMetal32Xl: Self { .init(rawValue: "r7iz.metal-32xl") }
        public static var r7izXlarge: Self { .init(rawValue: "r7iz.xlarge") }
        public static var t1Micro: Self { .init(rawValue: "t1.micro") }
        public static var t22Xlarge: Self { .init(rawValue: "t2.2xlarge") }
        public static var t2Large: Self { .init(rawValue: "t2.large") }
        public static var t2Medium: Self { .init(rawValue: "t2.medium") }
        public static var t2Micro: Self { .init(rawValue: "t2.micro") }
        public static var t2Nano: Self { .init(rawValue: "t2.nano") }
        public static var t2Small: Self { .init(rawValue: "t2.small") }
        public static var t2Xlarge: Self { .init(rawValue: "t2.xlarge") }
        public static var t32Xlarge: Self { .init(rawValue: "t3.2xlarge") }
        public static var t3Large: Self { .init(rawValue: "t3.large") }
        public static var t3Medium: Self { .init(rawValue: "t3.medium") }
        public static var t3Micro: Self { .init(rawValue: "t3.micro") }
        public static var t3Nano: Self { .init(rawValue: "t3.nano") }
        public static var t3Small: Self { .init(rawValue: "t3.small") }
        public static var t3Xlarge: Self { .init(rawValue: "t3.xlarge") }
        public static var t3a2Xlarge: Self { .init(rawValue: "t3a.2xlarge") }
        public static var t3aLarge: Self { .init(rawValue: "t3a.large") }
        public static var t3aMedium: Self { .init(rawValue: "t3a.medium") }
        public static var t3aMicro: Self { .init(rawValue: "t3a.micro") }
        public static var t3aNano: Self { .init(rawValue: "t3a.nano") }
        public static var t3aSmall: Self { .init(rawValue: "t3a.small") }
        public static var t3aXlarge: Self { .init(rawValue: "t3a.xlarge") }
        public static var t4g2Xlarge: Self { .init(rawValue: "t4g.2xlarge") }
        public static var t4gLarge: Self { .init(rawValue: "t4g.large") }
        public static var t4gMedium: Self { .init(rawValue: "t4g.medium") }
        public static var t4gMicro: Self { .init(rawValue: "t4g.micro") }
        public static var t4gNano: Self { .init(rawValue: "t4g.nano") }
        public static var t4gSmall: Self { .init(rawValue: "t4g.small") }
        public static var t4gXlarge: Self { .init(rawValue: "t4g.xlarge") }
        public static var trn12Xlarge: Self { .init(rawValue: "trn1.2xlarge") }
        public static var trn132Xlarge: Self { .init(rawValue: "trn1.32xlarge") }
        public static var trn1n32Xlarge: Self { .init(rawValue: "trn1n.32xlarge") }
        public static var u12Tb1112Xlarge: Self { .init(rawValue: "u-12tb1.112xlarge") }
        public static var u12Tb1Metal: Self { .init(rawValue: "u-12tb1.metal") }
        public static var u18Tb1112Xlarge: Self { .init(rawValue: "u-18tb1.112xlarge") }
        public static var u18Tb1Metal: Self { .init(rawValue: "u-18tb1.metal") }
        public static var u24Tb1112Xlarge: Self { .init(rawValue: "u-24tb1.112xlarge") }
        public static var u24Tb1Metal: Self { .init(rawValue: "u-24tb1.metal") }
        public static var u3Tb156Xlarge: Self { .init(rawValue: "u-3tb1.56xlarge") }
        public static var u6Tb1112Xlarge: Self { .init(rawValue: "u-6tb1.112xlarge") }
        public static var u6Tb156Xlarge: Self { .init(rawValue: "u-6tb1.56xlarge") }
        public static var u6Tb1Metal: Self { .init(rawValue: "u-6tb1.metal") }
        public static var u9Tb1112Xlarge: Self { .init(rawValue: "u-9tb1.112xlarge") }
        public static var u9Tb1Metal: Self { .init(rawValue: "u-9tb1.metal") }
        public static var vt124Xlarge: Self { .init(rawValue: "vt1.24xlarge") }
        public static var vt13Xlarge: Self { .init(rawValue: "vt1.3xlarge") }
        public static var vt16Xlarge: Self { .init(rawValue: "vt1.6xlarge") }
        public static var x116Xlarge: Self { .init(rawValue: "x1.16xlarge") }
        public static var x132Xlarge: Self { .init(rawValue: "x1.32xlarge") }
        public static var x1e16Xlarge: Self { .init(rawValue: "x1e.16xlarge") }
        public static var x1e2Xlarge: Self { .init(rawValue: "x1e.2xlarge") }
        public static var x1e32Xlarge: Self { .init(rawValue: "x1e.32xlarge") }
        public static var x1e4Xlarge: Self { .init(rawValue: "x1e.4xlarge") }
        public static var x1e8Xlarge: Self { .init(rawValue: "x1e.8xlarge") }
        public static var x1eXlarge: Self { .init(rawValue: "x1e.xlarge") }
        public static var x2gd12Xlarge: Self { .init(rawValue: "x2gd.12xlarge") }
        public static var x2gd16Xlarge: Self { .init(rawValue: "x2gd.16xlarge") }
        public static var x2gd2Xlarge: Self { .init(rawValue: "x2gd.2xlarge") }
        public static var x2gd4Xlarge: Self { .init(rawValue: "x2gd.4xlarge") }
        public static var x2gd8Xlarge: Self { .init(rawValue: "x2gd.8xlarge") }
        public static var x2gdLarge: Self { .init(rawValue: "x2gd.large") }
        public static var x2gdMedium: Self { .init(rawValue: "x2gd.medium") }
        public static var x2gdMetal: Self { .init(rawValue: "x2gd.metal") }
        public static var x2gdXlarge: Self { .init(rawValue: "x2gd.xlarge") }
        public static var x2idn16Xlarge: Self { .init(rawValue: "x2idn.16xlarge") }
        public static var x2idn24Xlarge: Self { .init(rawValue: "x2idn.24xlarge") }
        public static var x2idn32Xlarge: Self { .init(rawValue: "x2idn.32xlarge") }
        public static var x2idnMetal: Self { .init(rawValue: "x2idn.metal") }
        public static var x2iedn16Xlarge: Self { .init(rawValue: "x2iedn.16xlarge") }
        public static var x2iedn24Xlarge: Self { .init(rawValue: "x2iedn.24xlarge") }
        public static var x2iedn2Xlarge: Self { .init(rawValue: "x2iedn.2xlarge") }
        public static var x2iedn32Xlarge: Self { .init(rawValue: "x2iedn.32xlarge") }
        public static var x2iedn4Xlarge: Self { .init(rawValue: "x2iedn.4xlarge") }
        public static var x2iedn8Xlarge: Self { .init(rawValue: "x2iedn.8xlarge") }
        public static var x2iednMetal: Self { .init(rawValue: "x2iedn.metal") }
        public static var x2iednXlarge: Self { .init(rawValue: "x2iedn.xlarge") }
        public static var x2iezn12Xlarge: Self { .init(rawValue: "x2iezn.12xlarge") }
        public static var x2iezn2Xlarge: Self { .init(rawValue: "x2iezn.2xlarge") }
        public static var x2iezn4Xlarge: Self { .init(rawValue: "x2iezn.4xlarge") }
        public static var x2iezn6Xlarge: Self { .init(rawValue: "x2iezn.6xlarge") }
        public static var x2iezn8Xlarge: Self { .init(rawValue: "x2iezn.8xlarge") }
        public static var x2ieznMetal: Self { .init(rawValue: "x2iezn.metal") }
        public static var z1d12Xlarge: Self { .init(rawValue: "z1d.12xlarge") }
        public static var z1d2Xlarge: Self { .init(rawValue: "z1d.2xlarge") }
        public static var z1d3Xlarge: Self { .init(rawValue: "z1d.3xlarge") }
        public static var z1d6Xlarge: Self { .init(rawValue: "z1d.6xlarge") }
        public static var z1dLarge: Self { .init(rawValue: "z1d.large") }
        public static var z1dMetal: Self { .init(rawValue: "z1d.metal") }
        public static var z1dXlarge: Self { .init(rawValue: "z1d.xlarge") }
    }

    public enum InstanceTypeHypervisor: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case nitro = "nitro"
        case xen = "xen"
        public var description: String { return self.rawValue }
    }

    public enum InterfacePermissionType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case eipAssociate = "EIP-ASSOCIATE"
        case instanceAttach = "INSTANCE-ATTACH"
        public var description: String { return self.rawValue }
    }

    public enum InterfaceProtocolType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case gre = "GRE"
        case vlan = "VLAN"
        public var description: String { return self.rawValue }
    }

    public enum IpAddressType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case dualstack = "dualstack"
        case ipv4 = "ipv4"
        case ipv6 = "ipv6"
        public var description: String { return self.rawValue }
    }

    public enum IpamAddressHistoryResourceType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case eip = "eip"
        case instance = "instance"
        case networkInterface = "network-interface"
        case subnet = "subnet"
        case vpc = "vpc"
        public var description: String { return self.rawValue }
    }

    public enum IpamAssociatedResourceDiscoveryStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "active"
        case notFound = "not-found"
        public var description: String { return self.rawValue }
    }

    public enum IpamComplianceStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case compliant = "compliant"
        case ignored = "ignored"
        case noncompliant = "noncompliant"
        case unmanaged = "unmanaged"
        public var description: String { return self.rawValue }
    }

    public enum IpamDiscoveryFailureCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case assumeRoleFailure = "assume-role-failure"
        case throttlingFailure = "throttling-failure"
        case unauthorizedFailure = "unauthorized-failure"
        public var description: String { return self.rawValue }
    }

    public enum IpamManagementState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ignored = "ignored"
        case managed = "managed"
        case unmanaged = "unmanaged"
        public var description: String { return self.rawValue }
    }

    public enum IpamOverlapStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ignored = "ignored"
        case nonoverlapping = "nonoverlapping"
        case overlapping = "overlapping"
        public var description: String { return self.rawValue }
    }

    public enum IpamPoolAllocationResourceType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case custom = "custom"
        case ec2PublicIpv4Pool = "ec2-public-ipv4-pool"
        case ipamPool = "ipam-pool"
        case subnet = "subnet"
        case vpc = "vpc"
        public var description: String { return self.rawValue }
    }

    public enum IpamPoolAwsService: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ec2 = "ec2"
        public var description: String { return self.rawValue }
    }

    public enum IpamPoolCidrFailureCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case cidrNotAvailable = "cidr-not-available"
        case limitExceeded = "limit-exceeded"
        public var description: String { return self.rawValue }
    }

    public enum IpamPoolCidrState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case deprovisioned = "deprovisioned"
        case failedDeprovision = "failed-deprovision"
        case failedImport = "failed-import"
        case failedProvision = "failed-provision"
        case pendingDeprovision = "pending-deprovision"
        case pendingImport = "pending-import"
        case pendingProvision = "pending-provision"
        case provisioned = "provisioned"
        public var description: String { return self.rawValue }
    }

    public enum IpamPoolPublicIpSource: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case amazon = "amazon"
        case byoip = "byoip"
        public var description: String { return self.rawValue }
    }

    public enum IpamPoolSourceResourceType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case vpc = "vpc"
        public var description: String { return self.rawValue }
    }

    public enum IpamPoolState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case createComplete = "create-complete"
        case createFailed = "create-failed"
        case createInProgress = "create-in-progress"
        case deleteComplete = "delete-complete"
        case deleteFailed = "delete-failed"
        case deleteInProgress = "delete-in-progress"
        case isolateComplete = "isolate-complete"
        case isolateInProgress = "isolate-in-progress"
        case modifyComplete = "modify-complete"
        case modifyFailed = "modify-failed"
        case modifyInProgress = "modify-in-progress"
        case restoreInProgress = "restore-in-progress"
        public var description: String { return self.rawValue }
    }

    public enum IpamPublicAddressAssociationStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case associated = "associated"
        case disassociated = "disassociated"
        public var description: String { return self.rawValue }
    }

    public enum IpamPublicAddressAwsService: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case aga = "global-accelerator"
        case dms = "database-migration-service"
        case ec2Lb = "load-balancer"
        case ecs = "elastic-container-service"
        case natGateway = "nat-gateway"
        case other = "other"
        case rds = "relational-database-service"
        case redshift = "redshift"
        case s2sVpn = "site-to-site-vpn"
        public var description: String { return self.rawValue }
    }

    public enum IpamPublicAddressType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case amazonOwnedEip = "amazon-owned-eip"
        case byoip = "byoip"
        case ec2PublicIp = "ec2-public-ip"
        case serviceManagedByoip = "service-managed-byoip"
        case serviceManagedIp = "service-managed-ip"
        public var description: String { return self.rawValue }
    }

    public enum IpamResourceDiscoveryAssociationState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case associateComplete = "associate-complete"
        case associateFailed = "associate-failed"
        case associateInProgress = "associate-in-progress"
        case disassociateComplete = "disassociate-complete"
        case disassociateFailed = "disassociate-failed"
        case disassociateInProgress = "disassociate-in-progress"
        case isolateComplete = "isolate-complete"
        case isolateInProgress = "isolate-in-progress"
        case restoreInProgress = "restore-in-progress"
        public var description: String { return self.rawValue }
    }

    public enum IpamResourceDiscoveryState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case createComplete = "create-complete"
        case createFailed = "create-failed"
        case createInProgress = "create-in-progress"
        case deleteComplete = "delete-complete"
        case deleteFailed = "delete-failed"
        case deleteInProgress = "delete-in-progress"
        case isolateComplete = "isolate-complete"
        case isolateInProgress = "isolate-in-progress"
        case modifyComplete = "modify-complete"
        case modifyFailed = "modify-failed"
        case modifyInProgress = "modify-in-progress"
        case restoreInProgress = "restore-in-progress"
        public var description: String { return self.rawValue }
    }

    public enum IpamResourceType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case eip = "eip"
        case eni = "eni"
        case ipv6Pool = "ipv6-pool"
        case publicIpv4Pool = "public-ipv4-pool"
        case subnet = "subnet"
        case vpc = "vpc"
        public var description: String { return self.rawValue }
    }

    public enum IpamScopeState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case createComplete = "create-complete"
        case createFailed = "create-failed"
        case createInProgress = "create-in-progress"
        case deleteComplete = "delete-complete"
        case deleteFailed = "delete-failed"
        case deleteInProgress = "delete-in-progress"
        case isolateComplete = "isolate-complete"
        case isolateInProgress = "isolate-in-progress"
        case modifyComplete = "modify-complete"
        case modifyFailed = "modify-failed"
        case modifyInProgress = "modify-in-progress"
        case restoreInProgress = "restore-in-progress"
        public var description: String { return self.rawValue }
    }

    public enum IpamScopeType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case `private` = "private"
        case `public` = "public"
        public var description: String { return self.rawValue }
    }

    public enum IpamState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case createComplete = "create-complete"
        case createFailed = "create-failed"
        case createInProgress = "create-in-progress"
        case deleteComplete = "delete-complete"
        case deleteFailed = "delete-failed"
        case deleteInProgress = "delete-in-progress"
        case isolateComplete = "isolate-complete"
        case isolateInProgress = "isolate-in-progress"
        case modifyComplete = "modify-complete"
        case modifyFailed = "modify-failed"
        case modifyInProgress = "modify-in-progress"
        case restoreInProgress = "restore-in-progress"
        public var description: String { return self.rawValue }
    }

    public enum IpamTier: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case advanced = "advanced"
        case free = "free"
        public var description: String { return self.rawValue }
    }

    public enum Ipv6SupportValue: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disable = "disable"
        case enable = "enable"
        public var description: String { return self.rawValue }
    }

    public enum KeyFormat: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case pem = "pem"
        case ppk = "ppk"
        public var description: String { return self.rawValue }
    }

    public enum KeyType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ed25519 = "ed25519"
        case rsa = "rsa"
        public var description: String { return self.rawValue }
    }

    public enum LaunchTemplateAutoRecoveryState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case `default` = "default"
        case disabled = "disabled"
        public var description: String { return self.rawValue }
    }

    public enum LaunchTemplateErrorCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case launchTemplateIdDoesNotExist = "launchTemplateIdDoesNotExist"
        case launchTemplateIdMalformed = "launchTemplateIdMalformed"
        case launchTemplateNameDoesNotExist = "launchTemplateNameDoesNotExist"
        case launchTemplateNameMalformed = "launchTemplateNameMalformed"
        case launchTemplateVersionDoesNotExist = "launchTemplateVersionDoesNotExist"
        case unexpectedError = "unexpectedError"
        public var description: String { return self.rawValue }
    }

    public enum LaunchTemplateHttpTokensState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case optional = "optional"
        case required = "required"
        public var description: String { return self.rawValue }
    }

    public enum LaunchTemplateInstanceMetadataEndpointState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "disabled"
        case enabled = "enabled"
        public var description: String { return self.rawValue }
    }

    public enum LaunchTemplateInstanceMetadataOptionsState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case applied = "applied"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public enum LaunchTemplateInstanceMetadataProtocolIpv6: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "disabled"
        case enabled = "enabled"
        public var description: String { return self.rawValue }
    }

    public enum LaunchTemplateInstanceMetadataTagsState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "disabled"
        case enabled = "enabled"
        public var description: String { return self.rawValue }
    }

    public enum ListingState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case available = "available"
        case cancelled = "cancelled"
        case pending = "pending"
        case sold = "sold"
        public var description: String { return self.rawValue }
    }

    public enum ListingStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "active"
        case cancelled = "cancelled"
        case closed = "closed"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public enum LocalGatewayRouteState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "active"
        case blackhole = "blackhole"
        case deleted = "deleted"
        case deleting = "deleting"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public enum LocalGatewayRouteTableMode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case coip = "coip"
        case directVpcRouting = "direct-vpc-routing"
        public var description: String { return self.rawValue }
    }

    public enum LocalGatewayRouteType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case `static` = "static"
        case propagated = "propagated"
        public var description: String { return self.rawValue }
    }

    public enum LocalStorage: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case excluded = "excluded"
        case included = "included"
        case required = "required"
        public var description: String { return self.rawValue }
    }

    public enum LocalStorageType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case hdd = "hdd"
        case ssd = "ssd"
        public var description: String { return self.rawValue }
    }

    public enum LocationType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case availabilityZone = "availability-zone"
        case availabilityZoneId = "availability-zone-id"
        case outpost = "outpost"
        case region = "region"
        public var description: String { return self.rawValue }
    }

    public enum LockMode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case compliance = "compliance"
        case governance = "governance"
        public var description: String { return self.rawValue }
    }

    public enum LockState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case compliance = "compliance"
        case complianceCooloff = "compliance-cooloff"
        case expired = "expired"
        case governance = "governance"
        public var description: String { return self.rawValue }
    }

    public enum LogDestinationType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case cloudWatchLogs = "cloud-watch-logs"
        case kinesisDataFirehose = "kinesis-data-firehose"
        case s3 = "s3"
        public var description: String { return self.rawValue }
    }

    public enum MarketType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case capacityBlock = "capacity-block"
        case spot = "spot"
        public var description: String { return self.rawValue }
    }

    public enum MembershipType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case `static` = "static"
        case igmp = "igmp"
        public var description: String { return self.rawValue }
    }

    public enum MetadataDefaultHttpTokensState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case noPreference = "no-preference"
        case optional = "optional"
        case required = "required"
        public var description: String { return self.rawValue }
    }

    public enum MetricType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case aggregateLatency = "aggregate-latency"
        public var description: String { return self.rawValue }
    }

    public enum ModifyAvailabilityZoneOptInStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case notOptedIn = "not-opted-in"
        case optedIn = "opted-in"
        public var description: String { return self.rawValue }
    }

    public enum MonitoringState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "disabled"
        case disabling = "disabling"
        case enabled = "enabled"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public enum MoveStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case movingToVpc = "movingToVpc"
        case restoringToClassic = "restoringToClassic"
        public var description: String { return self.rawValue }
    }

    public enum MulticastSupportValue: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disable = "disable"
        case enable = "enable"
        public var description: String { return self.rawValue }
    }

    public enum NatGatewayAddressStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case assigning = "assigning"
        case associating = "associating"
        case disassociating = "disassociating"
        case failed = "failed"
        case succeeded = "succeeded"
        case unassigning = "unassigning"
        public var description: String { return self.rawValue }
    }

    public enum NatGatewayState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case available = "available"
        case deleted = "deleted"
        case deleting = "deleting"
        case failed = "failed"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public enum NetworkInterfaceAttribute: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case attachment = "attachment"
        case description = "description"
        case groupSet = "groupSet"
        case sourceDestCheck = "sourceDestCheck"
        public var description: String { return self.rawValue }
    }

    public enum NetworkInterfaceCreationType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case branch = "branch"
        case efa = "efa"
        case trunk = "trunk"
        public var description: String { return self.rawValue }
    }

    public enum NetworkInterfacePermissionStateCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case granted = "granted"
        case pending = "pending"
        case revoked = "revoked"
        case revoking = "revoking"
        public var description: String { return self.rawValue }
    }

    public enum NetworkInterfaceStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case associated = "associated"
        case attaching = "attaching"
        case available = "available"
        case detaching = "detaching"
        case inUse = "in-use"
        public var description: String { return self.rawValue }
    }

    public enum NetworkInterfaceType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case apiGatewayManaged = "api_gateway_managed"
        case awsCodestarConnectionsManaged = "aws_codestar_connections_managed"
        case branch = "branch"
        case efa = "efa"
        case gatewayLoadBalancer = "gateway_load_balancer"
        case gatewayLoadBalancerEndpoint = "gateway_load_balancer_endpoint"
        case globalAcceleratorManaged = "global_accelerator_managed"
        case interface = "interface"
        case iotRulesManaged = "iot_rules_managed"
        case lambda = "lambda"
        case loadBalancer = "load_balancer"
        case natGateway = "natGateway"
        case networkLoadBalancer = "network_load_balancer"
        case quicksight = "quicksight"
        case transitGateway = "transit_gateway"
        case trunk = "trunk"
        case vpcEndpoint = "vpc_endpoint"
        public var description: String { return self.rawValue }
    }

    public enum NitroEnclavesSupport: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case supported = "supported"
        case unsupported = "unsupported"
        public var description: String { return self.rawValue }
    }

    public enum NitroTpmSupport: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case supported = "supported"
        case unsupported = "unsupported"
        public var description: String { return self.rawValue }
    }

    public enum OfferingClassType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case convertible = "convertible"
        case standard = "standard"
        public var description: String { return self.rawValue }
    }

    public enum OfferingTypeValues: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case allUpfront = "All Upfront"
        case heavyUtilization = "Heavy Utilization"
        case lightUtilization = "Light Utilization"
        case mediumUtilization = "Medium Utilization"
        case noUpfront = "No Upfront"
        case partialUpfront = "Partial Upfront"
        public var description: String { return self.rawValue }
    }

    public enum OnDemandAllocationStrategy: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case lowestPrice = "lowestPrice"
        case prioritized = "prioritized"
        public var description: String { return self.rawValue }
    }

    public enum OperationType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case add = "add"
        case remove = "remove"
        public var description: String { return self.rawValue }
    }

    public enum PartitionLoadFrequency: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case daily = "daily"
        case monthly = "monthly"
        case none = "none"
        case weekly = "weekly"
        public var description: String { return self.rawValue }
    }

    public enum PayerResponsibility: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case serviceOwner = "ServiceOwner"
        public var description: String { return self.rawValue }
    }

    public enum PaymentOption: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case allUpfront = "AllUpfront"
        case noUpfront = "NoUpfront"
        case partialUpfront = "PartialUpfront"
        public var description: String { return self.rawValue }
    }

    public enum PeriodType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case fifteenMinutes = "fifteen-minutes"
        case fiveMinutes = "five-minutes"
        case oneDay = "one-day"
        case oneHour = "one-hour"
        case oneWeek = "one-week"
        case threeHours = "three-hours"
        public var description: String { return self.rawValue }
    }

    public enum PermissionGroup: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case all = "all"
        public var description: String { return self.rawValue }
    }

    public enum PlacementGroupState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case available = "available"
        case deleted = "deleted"
        case deleting = "deleting"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public enum PlacementGroupStrategy: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case cluster = "cluster"
        case partition = "partition"
        case spread = "spread"
        public var description: String { return self.rawValue }
    }

    public enum PlacementStrategy: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case cluster = "cluster"
        case partition = "partition"
        case spread = "spread"
        public var description: String { return self.rawValue }
    }

    public enum PlatformValues: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case windows = "windows"
        public var description: String { return self.rawValue }
    }

    public enum PrefixListState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case createComplete = "create-complete"
        case createFailed = "create-failed"
        case createInProgress = "create-in-progress"
        case deleteComplete = "delete-complete"
        case deleteFailed = "delete-failed"
        case deleteInProgress = "delete-in-progress"
        case modifyComplete = "modify-complete"
        case modifyFailed = "modify-failed"
        case modifyInProgress = "modify-in-progress"
        case restoreComplete = "restore-complete"
        case restoreFailed = "restore-failed"
        case restoreInProgress = "restore-in-progress"
        public var description: String { return self.rawValue }
    }

    public enum PrincipalType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case account = "Account"
        case all = "All"
        case organizationUnit = "OrganizationUnit"
        case role = "Role"
        case service = "Service"
        case user = "User"
        public var description: String { return self.rawValue }
    }

    public enum ProductCodeValues: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case devpay = "devpay"
        case marketplace = "marketplace"
        public var description: String { return self.rawValue }
    }

    public enum ProtocolValue: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case gre = "gre"
        public var description: String { return self.rawValue }
    }

    public enum RIProductDescription: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case linuxUNIX = "Linux/UNIX"
        case linuxUNIXAmazonVPC = "Linux/UNIX (Amazon VPC)"
        case windows = "Windows"
        case windowsAmazonVPC = "Windows (Amazon VPC)"
        public var description: String { return self.rawValue }
    }

    public enum RecurringChargeFrequency: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case hourly = "Hourly"
        public var description: String { return self.rawValue }
    }

    public enum ReplaceRootVolumeTaskState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case failed = "failed"
        case failedDetached = "failed-detached"
        case failing = "failing"
        case inProgress = "in-progress"
        case pending = "pending"
        case succeeded = "succeeded"
        public var description: String { return self.rawValue }
    }

    public enum ReplacementStrategy: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case launch = "launch"
        case launchBeforeTerminate = "launch-before-terminate"
        public var description: String { return self.rawValue }
    }

    public enum ReportInstanceReasonCodes: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case instanceStuckInState = "instance-stuck-in-state"
        case notAcceptingCredentials = "not-accepting-credentials"
        case other = "other"
        case passwordNotAvailable = "password-not-available"
        case performanceEbsVolume = "performance-ebs-volume"
        case performanceInstanceStore = "performance-instance-store"
        case performanceNetwork = "performance-network"
        case performanceOther = "performance-other"
        case unresponsive = "unresponsive"
        public var description: String { return self.rawValue }
    }

    public enum ReportStatusType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case impaired = "impaired"
        case ok = "ok"
        public var description: String { return self.rawValue }
    }

    public enum ReservationState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "active"
        case paymentFailed = "payment-failed"
        case paymentPending = "payment-pending"
        case retired = "retired"
        public var description: String { return self.rawValue }
    }

    public enum ReservedInstanceState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "active"
        case paymentFailed = "payment-failed"
        case paymentPending = "payment-pending"
        case queued = "queued"
        case queuedDeleted = "queued-deleted"
        case retired = "retired"
        public var description: String { return self.rawValue }
    }

    public enum ResetFpgaImageAttributeName: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case loadPermission = "loadPermission"
        public var description: String { return self.rawValue }
    }

    public enum ResetImageAttributeName: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case launchPermission = "launchPermission"
        public var description: String { return self.rawValue }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case capacityReservation = "capacity-reservation"
        case capacityReservationFleet = "capacity-reservation-fleet"
        case carrierGateway = "carrier-gateway"
        case clientVpnEndpoint = "client-vpn-endpoint"
        case coipPool = "coip-pool"
        case customerGateway = "customer-gateway"
        case dedicatedHost = "dedicated-host"
        case dhcpOptions = "dhcp-options"
        case egressOnlyInternetGateway = "egress-only-internet-gateway"
        case elasticGpu = "elastic-gpu"
        case elasticIp = "elastic-ip"
        case exportImageTask = "export-image-task"
        case exportInstanceTask = "export-instance-task"
        case fleet = "fleet"
        case fpgaImage = "fpga-image"
        case hostReservation = "host-reservation"
        case image = "image"
        case importImageTask = "import-image-task"
        case importSnapshotTask = "import-snapshot-task"
        case instance = "instance"
        case instanceConnectEndpoint = "instance-connect-endpoint"
        case instanceEventWindow = "instance-event-window"
        case internetGateway = "internet-gateway"
        case ipam = "ipam"
        case ipamPool = "ipam-pool"
        case ipamResourceDiscovery = "ipam-resource-discovery"
        case ipamResourceDiscoveryAssociation = "ipam-resource-discovery-association"
        case ipamScope = "ipam-scope"
        case ipv4poolEc2 = "ipv4pool-ec2"
        case ipv6poolEc2 = "ipv6pool-ec2"
        case keyPair = "key-pair"
        case launchTemplate = "launch-template"
        case localGateway = "local-gateway"
        case localGatewayRouteTable = "local-gateway-route-table"
        case localGatewayRouteTableVirtualInterfaceGroupAssociation = "local-gateway-route-table-virtual-interface-group-association"
        case localGatewayRouteTableVpcAssociation = "local-gateway-route-table-vpc-association"
        case localGatewayVirtualInterface = "local-gateway-virtual-interface"
        case localGatewayVirtualInterfaceGroup = "local-gateway-virtual-interface-group"
        case natgateway = "natgateway"
        case networkAcl = "network-acl"
        case networkInsightsAccessScope = "network-insights-access-scope"
        case networkInsightsAccessScopeAnalysis = "network-insights-access-scope-analysis"
        case networkInsightsAnalysis = "network-insights-analysis"
        case networkInsightsPath = "network-insights-path"
        case networkInterface = "network-interface"
        case placementGroup = "placement-group"
        case prefixList = "prefix-list"
        case replaceRootVolumeTask = "replace-root-volume-task"
        case reservedInstances = "reserved-instances"
        case routeTable = "route-table"
        case securityGroup = "security-group"
        case securityGroupRule = "security-group-rule"
        case snapshot = "snapshot"
        case spotFleetRequest = "spot-fleet-request"
        case spotInstancesRequest = "spot-instances-request"
        case subnet = "subnet"
        case subnetCidrReservation = "subnet-cidr-reservation"
        case trafficMirrorFilter = "traffic-mirror-filter"
        case trafficMirrorFilterRule = "traffic-mirror-filter-rule"
        case trafficMirrorSession = "traffic-mirror-session"
        case trafficMirrorTarget = "traffic-mirror-target"
        case transitGateway = "transit-gateway"
        case transitGatewayAttachment = "transit-gateway-attachment"
        case transitGatewayConnectPeer = "transit-gateway-connect-peer"
        case transitGatewayMulticastDomain = "transit-gateway-multicast-domain"
        case transitGatewayPolicyTable = "transit-gateway-policy-table"
        case transitGatewayRouteTable = "transit-gateway-route-table"
        case transitGatewayRouteTableAnnouncement = "transit-gateway-route-table-announcement"
        case verifiedAccessEndpoint = "verified-access-endpoint"
        case verifiedAccessGroup = "verified-access-group"
        case verifiedAccessInstance = "verified-access-instance"
        case verifiedAccessPolicy = "verified-access-policy"
        case verifiedAccessTrustProvider = "verified-access-trust-provider"
        case volume = "volume"
        case vpc = "vpc"
        case vpcBlockPublicAccessExclusion = "vpc-block-public-access-exclusion"
        case vpcEndpoint = "vpc-endpoint"
        case vpcEndpointConnection = "vpc-endpoint-connection"
        case vpcEndpointConnectionDeviceType = "vpc-endpoint-connection-device-type"
        case vpcEndpointService = "vpc-endpoint-service"
        case vpcEndpointServicePermission = "vpc-endpoint-service-permission"
        case vpcFlowLog = "vpc-flow-log"
        case vpcPeeringConnection = "vpc-peering-connection"
        case vpnConnection = "vpn-connection"
        case vpnConnectionDeviceType = "vpn-connection-device-type"
        case vpnGateway = "vpn-gateway"
        public var description: String { return self.rawValue }
    }

    public enum RootDeviceType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ebs = "ebs"
        case instanceStore = "instance-store"
        public var description: String { return self.rawValue }
    }

    public enum RouteOrigin: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case createRoute = "CreateRoute"
        case createRouteTable = "CreateRouteTable"
        case enableVgwRoutePropagation = "EnableVgwRoutePropagation"
        public var description: String { return self.rawValue }
    }

    public enum RouteState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "active"
        case blackhole = "blackhole"
        public var description: String { return self.rawValue }
    }

    public enum RouteTableAssociationStateCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case associated = "associated"
        case associating = "associating"
        case disassociated = "disassociated"
        case disassociating = "disassociating"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public enum RuleAction: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case allow = "allow"
        case deny = "deny"
        public var description: String { return self.rawValue }
    }

    public enum SSEType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case none = "none"
        case sseEbs = "sse-ebs"
        case sseKms = "sse-kms"
        public var description: String { return self.rawValue }
    }

    public enum Scope: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case availabilityZone = "Availability Zone"
        case regional = "Region"
        public var description: String { return self.rawValue }
    }

    public enum SecurityGroupReferencingSupportValue: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disable = "disable"
        case enable = "enable"
        public var description: String { return self.rawValue }
    }

    public enum SelfServicePortal: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "disabled"
        case enabled = "enabled"
        public var description: String { return self.rawValue }
    }

    public enum ServiceConnectivityType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ipv4 = "ipv4"
        case ipv6 = "ipv6"
        public var description: String { return self.rawValue }
    }

    public enum ServiceState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case available = "Available"
        case deleted = "Deleted"
        case deleting = "Deleting"
        case failed = "Failed"
        case pending = "Pending"
        public var description: String { return self.rawValue }
    }

    public enum ServiceType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case gateway = "Gateway"
        case gatewayLoadBalancer = "GatewayLoadBalancer"
        case interface = "Interface"
        public var description: String { return self.rawValue }
    }

    public enum ShutdownBehavior: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case stop = "stop"
        case terminate = "terminate"
        public var description: String { return self.rawValue }
    }

    public enum SnapshotAttributeName: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case createVolumePermission = "createVolumePermission"
        case productCodes = "productCodes"
        public var description: String { return self.rawValue }
    }

    public enum SnapshotBlockPublicAccessState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case blockAllSharing = "block-all-sharing"
        case blockNewSharing = "block-new-sharing"
        case unblocked = "unblocked"
        public var description: String { return self.rawValue }
    }

    public enum SnapshotState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case completed = "completed"
        case error = "error"
        case pending = "pending"
        case recoverable = "recoverable"
        case recovering = "recovering"
        public var description: String { return self.rawValue }
    }

    public enum SpotAllocationStrategy: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case capacityOptimized = "capacity-optimized"
        case capacityOptimizedPrioritized = "capacity-optimized-prioritized"
        case diversified = "diversified"
        case lowestPrice = "lowest-price"
        case priceCapacityOptimized = "price-capacity-optimized"
        public var description: String { return self.rawValue }
    }

    public enum SpotInstanceInterruptionBehavior: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case hibernate = "hibernate"
        case stop = "stop"
        case terminate = "terminate"
        public var description: String { return self.rawValue }
    }

    public enum SpotInstanceState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "active"
        case cancelled = "cancelled"
        case closed = "closed"
        case disabled = "disabled"
        case failed = "failed"
        case open = "open"
        public var description: String { return self.rawValue }
    }

    public enum SpotInstanceType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case oneTime = "one-time"
        case persistent = "persistent"
        public var description: String { return self.rawValue }
    }

    public enum SpreadLevel: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case host = "host"
        case rack = "rack"
        public var description: String { return self.rawValue }
    }

    public enum State: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case available = "Available"
        case deleted = "Deleted"
        case deleting = "Deleting"
        case expired = "Expired"
        case failed = "Failed"
        case pending = "Pending"
        case pendingAcceptance = "PendingAcceptance"
        case rejected = "Rejected"
        public var description: String { return self.rawValue }
    }

    public enum StaticSourcesSupportValue: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disable = "disable"
        case enable = "enable"
        public var description: String { return self.rawValue }
    }

    public enum StatisticType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case p50 = "p50"
        public var description: String { return self.rawValue }
    }

    public enum Status: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case inClassic = "InClassic"
        case inVpc = "InVpc"
        case moveInProgress = "MoveInProgress"
        public var description: String { return self.rawValue }
    }

    public enum StatusName: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case reachability = "reachability"
        public var description: String { return self.rawValue }
    }

    public enum StatusType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case failed = "failed"
        case initializing = "initializing"
        case insufficientData = "insufficient-data"
        case passed = "passed"
        public var description: String { return self.rawValue }
    }

    public enum StorageTier: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case archive = "archive"
        case standard = "standard"
        public var description: String { return self.rawValue }
    }

    public enum SubnetCidrBlockStateCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case associated = "associated"
        case associating = "associating"
        case disassociated = "disassociated"
        case disassociating = "disassociating"
        case failed = "failed"
        case failing = "failing"
        public var description: String { return self.rawValue }
    }

    public enum SubnetCidrReservationType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case explicit = "explicit"
        case prefix = "prefix"
        public var description: String { return self.rawValue }
    }

    public enum SubnetState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case available = "available"
        case pending = "pending"
        case unavailable = "unavailable"
        public var description: String { return self.rawValue }
    }

    public enum SummaryStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case impaired = "impaired"
        case initializing = "initializing"
        case insufficientData = "insufficient-data"
        case notApplicable = "not-applicable"
        case ok = "ok"
        public var description: String { return self.rawValue }
    }

    public enum SupportedAdditionalProcessorFeature: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case amdSevSnp = "amd-sev-snp"
        public var description: String { return self.rawValue }
    }

    public enum TargetCapacityUnitType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case memoryMib = "memory-mib"
        case units = "units"
        case vcpu = "vcpu"
        public var description: String { return self.rawValue }
    }

    public enum TargetStorageTier: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case archive = "archive"
        public var description: String { return self.rawValue }
    }

    public enum TelemetryStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case down = "DOWN"
        case up = "UP"
        public var description: String { return self.rawValue }
    }

    public enum Tenancy: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case `default` = "default"
        case dedicated = "dedicated"
        case host = "host"
        public var description: String { return self.rawValue }
    }

    public enum TieringOperationStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case archivalCompleted = "archival-completed"
        case archivalFailed = "archival-failed"
        case archivalInProgress = "archival-in-progress"
        case permanentRestoreCompleted = "permanent-restore-completed"
        case permanentRestoreFailed = "permanent-restore-failed"
        case permanentRestoreInProgress = "permanent-restore-in-progress"
        case temporaryRestoreCompleted = "temporary-restore-completed"
        case temporaryRestoreFailed = "temporary-restore-failed"
        case temporaryRestoreInProgress = "temporary-restore-in-progress"
        public var description: String { return self.rawValue }
    }

    public enum TpmSupportValues: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case v20 = "v2.0"
        public var description: String { return self.rawValue }
    }

    public enum TrafficDirection: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case egress = "egress"
        case ingress = "ingress"
        public var description: String { return self.rawValue }
    }

    public enum TrafficMirrorFilterRuleField: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case `protocol` = "protocol"
        case description = "description"
        case destinationPortRange = "destination-port-range"
        case sourcePortRange = "source-port-range"
        public var description: String { return self.rawValue }
    }

    public enum TrafficMirrorNetworkService: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case amazonDns = "amazon-dns"
        public var description: String { return self.rawValue }
    }

    public enum TrafficMirrorRuleAction: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case accept = "accept"
        case reject = "reject"
        public var description: String { return self.rawValue }
    }

    public enum TrafficMirrorSessionField: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case description = "description"
        case packetLength = "packet-length"
        case virtualNetworkId = "virtual-network-id"
        public var description: String { return self.rawValue }
    }

    public enum TrafficMirrorTargetType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case gatewayLoadBalancerEndpoint = "gateway-load-balancer-endpoint"
        case networkInterface = "network-interface"
        case networkLoadBalancer = "network-load-balancer"
        public var description: String { return self.rawValue }
    }

    public enum TrafficType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case accept = "ACCEPT"
        case all = "ALL"
        case reject = "REJECT"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayAssociationState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case associated = "associated"
        case associating = "associating"
        case disassociated = "disassociated"
        case disassociating = "disassociating"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayAttachmentResourceType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case connect = "connect"
        case directConnectGateway = "direct-connect-gateway"
        case peering = "peering"
        case tgwPeering = "tgw-peering"
        case vpc = "vpc"
        case vpn = "vpn"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayAttachmentState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case available = "available"
        case deleted = "deleted"
        case deleting = "deleting"
        case failed = "failed"
        case failing = "failing"
        case initiating = "initiating"
        case initiatingRequest = "initiatingRequest"
        case modifying = "modifying"
        case pending = "pending"
        case pendingAcceptance = "pendingAcceptance"
        case rejected = "rejected"
        case rejecting = "rejecting"
        case rollingBack = "rollingBack"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayConnectPeerState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case available = "available"
        case deleted = "deleted"
        case deleting = "deleting"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayMulitcastDomainAssociationState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case associated = "associated"
        case associating = "associating"
        case disassociated = "disassociated"
        case disassociating = "disassociating"
        case failed = "failed"
        case pendingAcceptance = "pendingAcceptance"
        case rejected = "rejected"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayMulticastDomainState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case available = "available"
        case deleted = "deleted"
        case deleting = "deleting"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayPolicyTableState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case available = "available"
        case deleted = "deleted"
        case deleting = "deleting"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayPrefixListReferenceState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case available = "available"
        case deleting = "deleting"
        case modifying = "modifying"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayPropagationState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "disabled"
        case disabling = "disabling"
        case enabled = "enabled"
        case enabling = "enabling"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayRouteState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "active"
        case blackhole = "blackhole"
        case deleted = "deleted"
        case deleting = "deleting"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayRouteTableAnnouncementDirection: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case incoming = "incoming"
        case outgoing = "outgoing"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayRouteTableAnnouncementState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case available = "available"
        case deleted = "deleted"
        case deleting = "deleting"
        case failed = "failed"
        case failing = "failing"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayRouteTableState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case available = "available"
        case deleted = "deleted"
        case deleting = "deleting"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayRouteType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case `static` = "static"
        case propagated = "propagated"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case available = "available"
        case deleted = "deleted"
        case deleting = "deleting"
        case modifying = "modifying"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public enum TransportProtocol: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case tcp = "tcp"
        case udp = "udp"
        public var description: String { return self.rawValue }
    }

    public enum TrustProviderType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case device = "device"
        case user = "user"
        public var description: String { return self.rawValue }
    }

    public enum TunnelInsideIpVersion: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ipv4 = "ipv4"
        case ipv6 = "ipv6"
        public var description: String { return self.rawValue }
    }

    public enum UnlimitedSupportedInstanceFamily: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case t2 = "t2"
        case t3 = "t3"
        case t3a = "t3a"
        case t4g = "t4g"
        public var description: String { return self.rawValue }
    }

    public enum UnsuccessfulInstanceCreditSpecificationErrorCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case incorrectInstanceState = "IncorrectInstanceState"
        case instanceCreditSpecificationNotSupported = "InstanceCreditSpecification.NotSupported"
        case instanceNotFound = "InvalidInstanceID.NotFound"
        case invalidInstanceId = "InvalidInstanceID.Malformed"
        public var description: String { return self.rawValue }
    }

    public enum UsageClassType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case capacityBlock = "capacity-block"
        case onDemand = "on-demand"
        case spot = "spot"
        public var description: String { return self.rawValue }
    }

    public enum UserTrustProviderType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case iamIdentityCenter = "iam-identity-center"
        case oidc = "oidc"
        public var description: String { return self.rawValue }
    }

    public enum VerifiedAccessEndpointAttachmentType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case vpc = "vpc"
        public var description: String { return self.rawValue }
    }

    public enum VerifiedAccessEndpointProtocol: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case http = "http"
        case https = "https"
        public var description: String { return self.rawValue }
    }

    public enum VerifiedAccessEndpointStatusCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "active"
        case deleted = "deleted"
        case deleting = "deleting"
        case pending = "pending"
        case updating = "updating"
        public var description: String { return self.rawValue }
    }

    public enum VerifiedAccessEndpointType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case loadBalancer = "load-balancer"
        case networkInterface = "network-interface"
        public var description: String { return self.rawValue }
    }

    public enum VerifiedAccessLogDeliveryStatusCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case failed = "failed"
        case success = "success"
        public var description: String { return self.rawValue }
    }

    public enum VirtualizationType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case hvm = "hvm"
        case paravirtual = "paravirtual"
        public var description: String { return self.rawValue }
    }

    public enum VolumeAttachmentState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case attached = "attached"
        case attaching = "attaching"
        case busy = "busy"
        case detached = "detached"
        case detaching = "detaching"
        public var description: String { return self.rawValue }
    }

    public enum VolumeAttributeName: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case autoEnableIO = "autoEnableIO"
        case productCodes = "productCodes"
        public var description: String { return self.rawValue }
    }

    public enum VolumeModificationState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case completed = "completed"
        case failed = "failed"
        case modifying = "modifying"
        case optimizing = "optimizing"
        public var description: String { return self.rawValue }
    }

    public enum VolumeState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case available = "available"
        case creating = "creating"
        case deleted = "deleted"
        case deleting = "deleting"
        case error = "error"
        case inUse = "in-use"
        public var description: String { return self.rawValue }
    }

    public enum VolumeStatusInfoStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case impaired = "impaired"
        case insufficientData = "insufficient-data"
        case ok = "ok"
        public var description: String { return self.rawValue }
    }

    public enum VolumeStatusName: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ioEnabled = "io-enabled"
        case ioPerformance = "io-performance"
        public var description: String { return self.rawValue }
    }

    public enum VolumeType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case gp2 = "gp2"
        case gp3 = "gp3"
        case io1 = "io1"
        case io2 = "io2"
        case sc1 = "sc1"
        case st1 = "st1"
        case standard = "standard"
        public var description: String { return self.rawValue }
    }

    public enum VpcAttributeName: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case enableDnsHostnames = "enableDnsHostnames"
        case enableDnsSupport = "enableDnsSupport"
        case enableNetworkAddressUsageMetrics = "enableNetworkAddressUsageMetrics"
        public var description: String { return self.rawValue }
    }

    public enum VpcCidrBlockStateCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case associated = "associated"
        case associating = "associating"
        case disassociated = "disassociated"
        case disassociating = "disassociating"
        case failed = "failed"
        case failing = "failing"
        public var description: String { return self.rawValue }
    }

    public enum VpcEndpointType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case gateway = "Gateway"
        case gatewayLoadBalancer = "GatewayLoadBalancer"
        case interface = "Interface"
        public var description: String { return self.rawValue }
    }

    public enum VpcPeeringConnectionStateReasonCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "active"
        case deleted = "deleted"
        case deleting = "deleting"
        case expired = "expired"
        case failed = "failed"
        case initiatingRequest = "initiating-request"
        case pendingAcceptance = "pending-acceptance"
        case provisioning = "provisioning"
        case rejected = "rejected"
        public var description: String { return self.rawValue }
    }

    public enum VpcState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case available = "available"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public enum VpcTenancy: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case `default` = "default"
        public var description: String { return self.rawValue }
    }

    public enum VpnEcmpSupportValue: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disable = "disable"
        case enable = "enable"
        public var description: String { return self.rawValue }
    }

    public enum VpnProtocol: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case openvpn = "openvpn"
        public var description: String { return self.rawValue }
    }

    public enum VpnState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case available = "available"
        case deleted = "deleted"
        case deleting = "deleting"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public enum VpnStaticRouteSource: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case `static` = "Static"
        public var description: String { return self.rawValue }
    }

    public enum WeekDay: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case friday = "friday"
        case monday = "monday"
        case saturday = "saturday"
        case sunday = "sunday"
        case thursday = "thursday"
        case tuesday = "tuesday"
        case wednesday = "wednesday"
        public var description: String { return self.rawValue }
    }

    public enum `Protocol`: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case tcp = "tcp"
        case udp = "udp"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct AcceleratorCount: AWSEncodableShape & AWSDecodableShape {
        /// The maximum number of accelerators. If this parameter is not specified, there is no maximum limit.
        public let max: Int?
        /// The minimum number of accelerators. If this parameter is not specified, there is no minimum limit.
        public let min: Int?

        public init(max: Int? = nil, min: Int? = nil) {
            self.max = max
            self.min = min
        }

        private enum CodingKeys: String, CodingKey {
            case max = "max"
            case min = "min"
        }
    }

    public struct AcceleratorCountRequest: AWSEncodableShape {
        /// The maximum number of accelerators. To specify no maximum limit, omit this parameter. To exclude accelerator-enabled instance types, set Max to 0.
        public let max: Int?
        /// The minimum number of accelerators. To specify no minimum limit, omit this parameter.
        public let min: Int?

        public init(max: Int? = nil, min: Int? = nil) {
            self.max = max
            self.min = min
        }

        private enum CodingKeys: String, CodingKey {
            case max = "Max"
            case min = "Min"
        }
    }

    public struct AcceleratorTotalMemoryMiB: AWSEncodableShape & AWSDecodableShape {
        /// The maximum amount of accelerator memory, in MiB. If this parameter is not specified, there is no maximum limit.
        public let max: Int?
        /// The minimum amount of accelerator memory, in MiB. If this parameter is not specified, there is no minimum limit.
        public let min: Int?

        public init(max: Int? = nil, min: Int? = nil) {
            self.max = max
            self.min = min
        }

        private enum CodingKeys: String, CodingKey {
            case max = "max"
            case min = "min"
        }
    }

    public struct AcceleratorTotalMemoryMiBRequest: AWSEncodableShape {
        /// The maximum amount of accelerator memory, in MiB. To specify no maximum limit, omit this parameter.
        public let max: Int?
        /// The minimum amount of accelerator memory, in MiB. To specify no minimum limit, omit this parameter.
        public let min: Int?

        public init(max: Int? = nil, min: Int? = nil) {
            self.max = max
            self.min = min
        }

        private enum CodingKeys: String, CodingKey {
            case max = "Max"
            case min = "Min"
        }
    }

    public struct AcceptAddressTransferRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Elastic IP address you are accepting for transfer.
        public let address: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        ///  tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(address: String? = nil, dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.address = address
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case address = "Address"
            case dryRun = "DryRun"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct AcceptAddressTransferResult: AWSDecodableShape {
        /// An Elastic IP address transfer.
        public let addressTransfer: AddressTransfer?

        public init(addressTransfer: AddressTransfer? = nil) {
            self.addressTransfer = addressTransfer
        }

        private enum CodingKeys: String, CodingKey {
            case addressTransfer = "addressTransfer"
        }
    }

    public struct AcceptReservedInstancesExchangeQuoteRequest: AWSEncodableShape {
        public struct _ReservedInstanceIdsEncoding: ArrayCoderProperties { public static let member = "ReservedInstanceId" }
        public struct _TargetConfigurationsEncoding: ArrayCoderProperties { public static let member = "TargetConfigurationRequest" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the Convertible Reserved Instances to exchange for another Convertible Reserved Instance of the same or higher value.
        @OptionalCustomCoding<EC2ArrayCoder<_ReservedInstanceIdsEncoding, String>>
        public var reservedInstanceIds: [String]?
        /// The configuration of the target Convertible Reserved Instance to exchange for your current Convertible Reserved Instances.
        @OptionalCustomCoding<EC2ArrayCoder<_TargetConfigurationsEncoding, TargetConfigurationRequest>>
        public var targetConfigurations: [TargetConfigurationRequest]?

        public init(dryRun: Bool? = nil, reservedInstanceIds: [String]? = nil, targetConfigurations: [TargetConfigurationRequest]? = nil) {
            self.dryRun = dryRun
            self.reservedInstanceIds = reservedInstanceIds
            self.targetConfigurations = targetConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case reservedInstanceIds = "ReservedInstanceId"
            case targetConfigurations = "TargetConfiguration"
        }
    }

    public struct AcceptReservedInstancesExchangeQuoteResult: AWSDecodableShape {
        /// The ID of the successful exchange.
        public let exchangeId: String?

        public init(exchangeId: String? = nil) {
            self.exchangeId = exchangeId
        }

        private enum CodingKeys: String, CodingKey {
            case exchangeId = "exchangeId"
        }
    }

    public struct AcceptTransitGatewayMulticastDomainAssociationsRequest: AWSEncodableShape {
        public struct _SubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the subnets to associate with the transit gateway multicast domain.
        @OptionalCustomCoding<EC2ArrayCoder<_SubnetIdsEncoding, String>>
        public var subnetIds: [String]?
        /// The ID of the transit gateway attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, subnetIds: [String]? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.subnetIds = subnetIds
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case subnetIds = "SubnetIds"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct AcceptTransitGatewayMulticastDomainAssociationsResult: AWSDecodableShape {
        /// Information about the multicast domain associations.
        public let associations: TransitGatewayMulticastDomainAssociations?

        public init(associations: TransitGatewayMulticastDomainAssociations? = nil) {
            self.associations = associations
        }

        private enum CodingKeys: String, CodingKey {
            case associations = "associations"
        }
    }

    public struct AcceptTransitGatewayPeeringAttachmentRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway attachment.
        public let transitGatewayAttachmentId: String?

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String? = nil) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct AcceptTransitGatewayPeeringAttachmentResult: AWSDecodableShape {
        /// The transit gateway peering attachment.
        public let transitGatewayPeeringAttachment: TransitGatewayPeeringAttachment?

        public init(transitGatewayPeeringAttachment: TransitGatewayPeeringAttachment? = nil) {
            self.transitGatewayPeeringAttachment = transitGatewayPeeringAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayPeeringAttachment = "transitGatewayPeeringAttachment"
        }
    }

    public struct AcceptTransitGatewayVpcAttachmentRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String? = nil) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct AcceptTransitGatewayVpcAttachmentResult: AWSDecodableShape {
        /// The VPC attachment.
        public let transitGatewayVpcAttachment: TransitGatewayVpcAttachment?

        public init(transitGatewayVpcAttachment: TransitGatewayVpcAttachment? = nil) {
            self.transitGatewayVpcAttachment = transitGatewayVpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayVpcAttachment = "transitGatewayVpcAttachment"
        }
    }

    public struct AcceptVpcEndpointConnectionsRequest: AWSEncodableShape {
        public struct _VpcEndpointIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC endpoint service.
        public let serviceId: String?
        /// The IDs of the interface VPC endpoints.
        @OptionalCustomCoding<EC2ArrayCoder<_VpcEndpointIdsEncoding, String>>
        public var vpcEndpointIds: [String]?

        public init(dryRun: Bool? = nil, serviceId: String? = nil, vpcEndpointIds: [String]? = nil) {
            self.dryRun = dryRun
            self.serviceId = serviceId
            self.vpcEndpointIds = vpcEndpointIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case serviceId = "ServiceId"
            case vpcEndpointIds = "VpcEndpointId"
        }
    }

    public struct AcceptVpcEndpointConnectionsResult: AWSDecodableShape {
        public struct _UnsuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the interface endpoints that were not accepted, if applicable.
        @OptionalCustomCoding<EC2ArrayCoder<_UnsuccessfulEncoding, UnsuccessfulItem>>
        public var unsuccessful: [UnsuccessfulItem]?

        public init(unsuccessful: [UnsuccessfulItem]? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful = "unsuccessful"
        }
    }

    public struct AcceptVpcPeeringConnectionRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC peering connection. You must specify this parameter in the
        /// 			request.
        public let vpcPeeringConnectionId: String?

        public init(dryRun: Bool? = nil, vpcPeeringConnectionId: String? = nil) {
            self.dryRun = dryRun
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct AcceptVpcPeeringConnectionResult: AWSDecodableShape {
        /// Information about the VPC peering connection.
        public let vpcPeeringConnection: VpcPeeringConnection?

        public init(vpcPeeringConnection: VpcPeeringConnection? = nil) {
            self.vpcPeeringConnection = vpcPeeringConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpcPeeringConnection = "vpcPeeringConnection"
        }
    }

    public struct AccessScopeAnalysisFinding: AWSDecodableShape {
        public struct _FindingComponentsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The finding components.
        @OptionalCustomCoding<EC2ArrayCoder<_FindingComponentsEncoding, PathComponent>>
        public var findingComponents: [PathComponent]?
        /// The ID of the finding.
        public let findingId: String?
        /// The ID of the Network Access Scope analysis.
        public let networkInsightsAccessScopeAnalysisId: String?
        /// The ID of the Network Access Scope.
        public let networkInsightsAccessScopeId: String?

        public init(findingComponents: [PathComponent]? = nil, findingId: String? = nil, networkInsightsAccessScopeAnalysisId: String? = nil, networkInsightsAccessScopeId: String? = nil) {
            self.findingComponents = findingComponents
            self.findingId = findingId
            self.networkInsightsAccessScopeAnalysisId = networkInsightsAccessScopeAnalysisId
            self.networkInsightsAccessScopeId = networkInsightsAccessScopeId
        }

        private enum CodingKeys: String, CodingKey {
            case findingComponents = "findingComponentSet"
            case findingId = "findingId"
            case networkInsightsAccessScopeAnalysisId = "networkInsightsAccessScopeAnalysisId"
            case networkInsightsAccessScopeId = "networkInsightsAccessScopeId"
        }
    }

    public struct AccessScopePath: AWSDecodableShape {
        public struct _ThroughResourcesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The destination.
        public let destination: PathStatement?
        /// The source.
        public let source: PathStatement?
        /// The through resources.
        @OptionalCustomCoding<EC2ArrayCoder<_ThroughResourcesEncoding, ThroughResourcesStatement>>
        public var throughResources: [ThroughResourcesStatement]?

        public init(destination: PathStatement? = nil, source: PathStatement? = nil, throughResources: [ThroughResourcesStatement]? = nil) {
            self.destination = destination
            self.source = source
            self.throughResources = throughResources
        }

        private enum CodingKeys: String, CodingKey {
            case destination = "destination"
            case source = "source"
            case throughResources = "throughResourceSet"
        }
    }

    public struct AccessScopePathRequest: AWSEncodableShape {
        public struct _ThroughResourcesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The destination.
        public let destination: PathStatementRequest?
        /// The source.
        public let source: PathStatementRequest?
        /// The through resources.
        @OptionalCustomCoding<EC2ArrayCoder<_ThroughResourcesEncoding, ThroughResourcesStatementRequest>>
        public var throughResources: [ThroughResourcesStatementRequest]?

        public init(destination: PathStatementRequest? = nil, source: PathStatementRequest? = nil, throughResources: [ThroughResourcesStatementRequest]? = nil) {
            self.destination = destination
            self.source = source
            self.throughResources = throughResources
        }

        private enum CodingKeys: String, CodingKey {
            case destination = "Destination"
            case source = "Source"
            case throughResources = "ThroughResource"
        }
    }

    public struct AccountAttribute: AWSDecodableShape {
        public struct _AttributeValuesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The name of the account attribute.
        public let attributeName: String?
        /// The values for the account attribute.
        @OptionalCustomCoding<EC2ArrayCoder<_AttributeValuesEncoding, AccountAttributeValue>>
        public var attributeValues: [AccountAttributeValue]?

        public init(attributeName: String? = nil, attributeValues: [AccountAttributeValue]? = nil) {
            self.attributeName = attributeName
            self.attributeValues = attributeValues
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "attributeName"
            case attributeValues = "attributeValueSet"
        }
    }

    public struct AccountAttributeValue: AWSDecodableShape {
        /// The value of the attribute.
        public let attributeValue: String?

        public init(attributeValue: String? = nil) {
            self.attributeValue = attributeValue
        }

        private enum CodingKeys: String, CodingKey {
            case attributeValue = "attributeValue"
        }
    }

    public struct ActiveInstance: AWSDecodableShape {
        /// The health status of the instance. If the status of either the instance status check or the system status check is impaired, the health status of the instance is unhealthy. Otherwise, the health status is healthy.
        public let instanceHealth: InstanceHealthStatus?
        /// The ID of the instance.
        public let instanceId: String?
        /// The instance type.
        public let instanceType: String?
        /// The ID of the Spot Instance request.
        public let spotInstanceRequestId: String?

        public init(instanceHealth: InstanceHealthStatus? = nil, instanceId: String? = nil, instanceType: String? = nil, spotInstanceRequestId: String? = nil) {
            self.instanceHealth = instanceHealth
            self.instanceId = instanceId
            self.instanceType = instanceType
            self.spotInstanceRequestId = spotInstanceRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceHealth = "instanceHealth"
            case instanceId = "instanceId"
            case instanceType = "instanceType"
            case spotInstanceRequestId = "spotInstanceRequestId"
        }
    }

    public struct AddIpamOperatingRegion: AWSEncodableShape {
        /// The name of the operating Region.
        public let regionName: String?

        public init(regionName: String? = nil) {
            self.regionName = regionName
        }

        private enum CodingKeys: String, CodingKey {
            case regionName = "RegionName"
        }
    }

    public struct AddPrefixListEntry: AWSEncodableShape {
        /// The CIDR block.
        public let cidr: String?
        /// A description for the entry. Constraints: Up to 255 characters in length.
        public let description: String?

        public init(cidr: String? = nil, description: String? = nil) {
            self.cidr = cidr
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case description = "Description"
        }
    }

    public struct AddedPrincipal: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the principal.
        public let principal: String?
        /// The type of principal.
        public let principalType: PrincipalType?
        /// The ID of the service.
        public let serviceId: String?
        /// The ID of the service permission.
        public let servicePermissionId: String?

        public init(principal: String? = nil, principalType: PrincipalType? = nil, serviceId: String? = nil, servicePermissionId: String? = nil) {
            self.principal = principal
            self.principalType = principalType
            self.serviceId = serviceId
            self.servicePermissionId = servicePermissionId
        }

        private enum CodingKeys: String, CodingKey {
            case principal = "principal"
            case principalType = "principalType"
            case serviceId = "serviceId"
            case servicePermissionId = "servicePermissionId"
        }
    }

    public struct AdditionalDetail: AWSDecodableShape {
        public struct _LoadBalancersEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RuleGroupRuleOptionsPairsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RuleGroupTypePairsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RuleOptionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The additional detail code.
        public let additionalDetailType: String?
        /// The path component.
        public let component: AnalysisComponent?
        /// The load balancers.
        @OptionalCustomCoding<EC2ArrayCoder<_LoadBalancersEncoding, AnalysisComponent>>
        public var loadBalancers: [AnalysisComponent]?
        /// The rule options.
        @OptionalCustomCoding<EC2ArrayCoder<_RuleGroupRuleOptionsPairsEncoding, RuleGroupRuleOptionsPair>>
        public var ruleGroupRuleOptionsPairs: [RuleGroupRuleOptionsPair]?
        /// The rule group type.
        @OptionalCustomCoding<EC2ArrayCoder<_RuleGroupTypePairsEncoding, RuleGroupTypePair>>
        public var ruleGroupTypePairs: [RuleGroupTypePair]?
        /// The rule options.
        @OptionalCustomCoding<EC2ArrayCoder<_RuleOptionsEncoding, RuleOption>>
        public var ruleOptions: [RuleOption]?
        /// The name of the VPC endpoint service.
        public let serviceName: String?
        /// The VPC endpoint service.
        public let vpcEndpointService: AnalysisComponent?

        public init(additionalDetailType: String? = nil, component: AnalysisComponent? = nil, loadBalancers: [AnalysisComponent]? = nil, ruleGroupRuleOptionsPairs: [RuleGroupRuleOptionsPair]? = nil, ruleGroupTypePairs: [RuleGroupTypePair]? = nil, ruleOptions: [RuleOption]? = nil, serviceName: String? = nil, vpcEndpointService: AnalysisComponent? = nil) {
            self.additionalDetailType = additionalDetailType
            self.component = component
            self.loadBalancers = loadBalancers
            self.ruleGroupRuleOptionsPairs = ruleGroupRuleOptionsPairs
            self.ruleGroupTypePairs = ruleGroupTypePairs
            self.ruleOptions = ruleOptions
            self.serviceName = serviceName
            self.vpcEndpointService = vpcEndpointService
        }

        private enum CodingKeys: String, CodingKey {
            case additionalDetailType = "additionalDetailType"
            case component = "component"
            case loadBalancers = "loadBalancerSet"
            case ruleGroupRuleOptionsPairs = "ruleGroupRuleOptionsPairSet"
            case ruleGroupTypePairs = "ruleGroupTypePairSet"
            case ruleOptions = "ruleOptionSet"
            case serviceName = "serviceName"
            case vpcEndpointService = "vpcEndpointService"
        }
    }

    public struct Address: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID representing the allocation of the address.
        public let allocationId: String?
        /// The ID representing the association of the address with an instance.
        public let associationId: String?
        /// The carrier IP address associated. This option is only available for network interfaces which  reside in a subnet in a Wavelength Zone (for example an EC2 instance).
        public let carrierIp: String?
        /// The customer-owned IP address.
        public let customerOwnedIp: String?
        /// The ID of the customer-owned address pool.
        public let customerOwnedIpv4Pool: String?
        /// The network (vpc).
        public let domain: DomainType?
        /// The ID of the instance that the address is associated with (if any).
        public let instanceId: String?
        /// The name of the unique set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.
        public let networkBorderGroup: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The ID of the Amazon Web Services account that owns the network interface.
        public let networkInterfaceOwnerId: String?
        /// The private IP address associated with the Elastic IP address.
        public let privateIpAddress: String?
        /// The Elastic IP address.
        public let publicIp: String?
        /// The ID of an address pool.
        public let publicIpv4Pool: String?
        /// Any tags assigned to the Elastic IP address.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(allocationId: String? = nil, associationId: String? = nil, carrierIp: String? = nil, customerOwnedIp: String? = nil, customerOwnedIpv4Pool: String? = nil, domain: DomainType? = nil, instanceId: String? = nil, networkBorderGroup: String? = nil, networkInterfaceId: String? = nil, networkInterfaceOwnerId: String? = nil, privateIpAddress: String? = nil, publicIp: String? = nil, publicIpv4Pool: String? = nil, tags: [Tag]? = nil) {
            self.allocationId = allocationId
            self.associationId = associationId
            self.carrierIp = carrierIp
            self.customerOwnedIp = customerOwnedIp
            self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
            self.domain = domain
            self.instanceId = instanceId
            self.networkBorderGroup = networkBorderGroup
            self.networkInterfaceId = networkInterfaceId
            self.networkInterfaceOwnerId = networkInterfaceOwnerId
            self.privateIpAddress = privateIpAddress
            self.publicIp = publicIp
            self.publicIpv4Pool = publicIpv4Pool
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "allocationId"
            case associationId = "associationId"
            case carrierIp = "carrierIp"
            case customerOwnedIp = "customerOwnedIp"
            case customerOwnedIpv4Pool = "customerOwnedIpv4Pool"
            case domain = "domain"
            case instanceId = "instanceId"
            case networkBorderGroup = "networkBorderGroup"
            case networkInterfaceId = "networkInterfaceId"
            case networkInterfaceOwnerId = "networkInterfaceOwnerId"
            case privateIpAddress = "privateIpAddress"
            case publicIp = "publicIp"
            case publicIpv4Pool = "publicIpv4Pool"
            case tags = "tagSet"
        }
    }

    public struct AddressAttribute: AWSDecodableShape {
        /// [EC2-VPC] The allocation ID.
        public let allocationId: String?
        /// The pointer (PTR) record for the IP address.
        public let ptrRecord: String?
        /// The updated PTR record for the IP address.
        public let ptrRecordUpdate: PtrUpdateStatus?
        /// The public IP address.
        public let publicIp: String?

        public init(allocationId: String? = nil, ptrRecord: String? = nil, ptrRecordUpdate: PtrUpdateStatus? = nil, publicIp: String? = nil) {
            self.allocationId = allocationId
            self.ptrRecord = ptrRecord
            self.ptrRecordUpdate = ptrRecordUpdate
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "allocationId"
            case ptrRecord = "ptrRecord"
            case ptrRecordUpdate = "ptrRecordUpdate"
            case publicIp = "publicIp"
        }
    }

    public struct AddressTransfer: AWSDecodableShape {
        /// The Elastic IP address transfer status.
        public let addressTransferStatus: AddressTransferStatus?
        /// The allocation ID of an Elastic IP address.
        public let allocationId: String?
        /// The Elastic IP address being transferred.
        public let publicIp: String?
        /// The ID of the account that you want to transfer the Elastic IP address to.
        public let transferAccountId: String?
        /// The timestamp when the Elastic IP address transfer was accepted.
        public let transferOfferAcceptedTimestamp: Date?
        /// The timestamp when the Elastic IP address transfer expired. When the source account starts the transfer, the transfer account has seven hours to allocate the Elastic IP address to complete the transfer, or the Elastic IP address will return to its original owner.
        public let transferOfferExpirationTimestamp: Date?

        public init(addressTransferStatus: AddressTransferStatus? = nil, allocationId: String? = nil, publicIp: String? = nil, transferAccountId: String? = nil, transferOfferAcceptedTimestamp: Date? = nil, transferOfferExpirationTimestamp: Date? = nil) {
            self.addressTransferStatus = addressTransferStatus
            self.allocationId = allocationId
            self.publicIp = publicIp
            self.transferAccountId = transferAccountId
            self.transferOfferAcceptedTimestamp = transferOfferAcceptedTimestamp
            self.transferOfferExpirationTimestamp = transferOfferExpirationTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case addressTransferStatus = "addressTransferStatus"
            case allocationId = "allocationId"
            case publicIp = "publicIp"
            case transferAccountId = "transferAccountId"
            case transferOfferAcceptedTimestamp = "transferOfferAcceptedTimestamp"
            case transferOfferExpirationTimestamp = "transferOfferExpirationTimestamp"
        }
    }

    public struct AdvertiseByoipCidrRequest: AWSEncodableShape {
        /// The public 2-byte or 4-byte ASN that you want to advertise.
        public let asn: String?
        /// The address range, in CIDR notation. This must be the exact range that you provisioned.  You can't advertise only a portion of the provisioned range.
        public let cidr: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// If you have Local Zones enabled, you can choose a network border group for Local Zones when you provision and advertise a BYOIPv4 CIDR. Choose the network border group carefully as the EIP and the Amazon Web Services resource it is associated with must reside in the same network border group. You can provision BYOIP address ranges to and advertise them in the following Local Zone network border groups:   us-east-1-dfw-2   us-west-2-lax-1   us-west-2-phx-2    You cannot provision or advertise BYOIPv6 address ranges in Local Zones at this time.
        public let networkBorderGroup: String?

        public init(asn: String? = nil, cidr: String? = nil, dryRun: Bool? = nil, networkBorderGroup: String? = nil) {
            self.asn = asn
            self.cidr = cidr
            self.dryRun = dryRun
            self.networkBorderGroup = networkBorderGroup
        }

        private enum CodingKeys: String, CodingKey {
            case asn = "Asn"
            case cidr = "Cidr"
            case dryRun = "DryRun"
            case networkBorderGroup = "NetworkBorderGroup"
        }
    }

    public struct AdvertiseByoipCidrResult: AWSDecodableShape {
        /// Information about the address range.
        public let byoipCidr: ByoipCidr?

        public init(byoipCidr: ByoipCidr? = nil) {
            self.byoipCidr = byoipCidr
        }

        private enum CodingKeys: String, CodingKey {
            case byoipCidr = "byoipCidr"
        }
    }

    public struct AllocateAddressRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Elastic IP address to recover or an IPv4 address from an address pool.
        public let address: String?
        /// The ID of a customer-owned address pool. Use this parameter to let Amazon EC2  select an address from the address pool. Alternatively, specify a specific  address from the address pool.
        public let customerOwnedIpv4Pool: String?
        /// The network (vpc).
        public let domain: DomainType?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        ///  A unique set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses. Use this parameter to limit the IP address to this location. IP addresses cannot move between network border groups. Use DescribeAvailabilityZones to view the network border groups.
        public let networkBorderGroup: String?
        /// The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool. To specify a specific address from the address pool, use the Address parameter instead.
        public let publicIpv4Pool: String?
        /// The tags to assign to the Elastic IP address.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(address: String? = nil, customerOwnedIpv4Pool: String? = nil, domain: DomainType? = nil, dryRun: Bool? = nil, networkBorderGroup: String? = nil, publicIpv4Pool: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.address = address
            self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
            self.domain = domain
            self.dryRun = dryRun
            self.networkBorderGroup = networkBorderGroup
            self.publicIpv4Pool = publicIpv4Pool
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case address = "Address"
            case customerOwnedIpv4Pool = "CustomerOwnedIpv4Pool"
            case domain = "Domain"
            case dryRun = "dryRun"
            case networkBorderGroup = "NetworkBorderGroup"
            case publicIpv4Pool = "PublicIpv4Pool"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct AllocateAddressResult: AWSDecodableShape {
        /// The ID that represents the allocation of the Elastic IP address.
        public let allocationId: String?
        /// The carrier IP address. This option is only available for network interfaces that reside in a subnet in a Wavelength Zone.
        public let carrierIp: String?
        /// The customer-owned IP address.
        public let customerOwnedIp: String?
        /// The ID of the customer-owned address pool.
        public let customerOwnedIpv4Pool: String?
        /// The network (vpc).
        public let domain: DomainType?
        /// The set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.
        public let networkBorderGroup: String?
        /// The Elastic IP address.
        public let publicIp: String?
        /// The ID of an address pool.
        public let publicIpv4Pool: String?

        public init(allocationId: String? = nil, carrierIp: String? = nil, customerOwnedIp: String? = nil, customerOwnedIpv4Pool: String? = nil, domain: DomainType? = nil, networkBorderGroup: String? = nil, publicIp: String? = nil, publicIpv4Pool: String? = nil) {
            self.allocationId = allocationId
            self.carrierIp = carrierIp
            self.customerOwnedIp = customerOwnedIp
            self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
            self.domain = domain
            self.networkBorderGroup = networkBorderGroup
            self.publicIp = publicIp
            self.publicIpv4Pool = publicIpv4Pool
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "allocationId"
            case carrierIp = "carrierIp"
            case customerOwnedIp = "customerOwnedIp"
            case customerOwnedIpv4Pool = "customerOwnedIpv4Pool"
            case domain = "domain"
            case networkBorderGroup = "networkBorderGroup"
            case publicIp = "publicIp"
            case publicIpv4Pool = "publicIpv4Pool"
        }
    }

    public struct AllocateHostsRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the Outpost hardware assets on which to allocate the Dedicated Hosts. Targeting  specific hardware assets on an Outpost can help to minimize latency between your workloads.  This parameter is supported only if you specify OutpostArn.  If you are allocating the Dedicated Hosts in a Region, omit this parameter.   If you specify this parameter, you can omit Quantity.  In this case, Amazon EC2 allocates a Dedicated Host on each specified hardware  asset.   If you specify both AssetIds and  Quantity, then the value for  Quantity must be equal to the number of asset IDs  specified.
        @OptionalCustomCoding<EC2StandardArrayCoder<String>>
        public var assetIds: [String]?
        /// Indicates whether the host accepts any untargeted instance launches that match its instance type configuration, or if it only accepts Host tenancy instance launches that specify its unique host ID. For more information, see  Understanding auto-placement and affinity in the Amazon EC2 User Guide. Default: on
        public let autoPlacement: AutoPlacement?
        /// The Availability Zone in which to allocate the Dedicated Host.
        public let availabilityZone: String?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Indicates whether to enable or disable host maintenance for the Dedicated Host. For more information, see Host maintenance in the Amazon EC2 User Guide.
        public let hostMaintenance: HostMaintenance?
        /// Indicates whether to enable or disable host recovery for the Dedicated Host. Host recovery is disabled by default. For more information, see  Host recovery in the Amazon EC2 User Guide. Default: off
        public let hostRecovery: HostRecovery?
        /// Specifies the instance family to be supported by the Dedicated Hosts. If you specify an instance family, the Dedicated Hosts support multiple instance types within that instance family. If you want the Dedicated Hosts to support a specific instance type only, omit this parameter and specify InstanceType instead. You cannot specify InstanceFamily and InstanceType in the same request.
        public let instanceFamily: String?
        /// Specifies the instance type to be supported by the Dedicated Hosts. If you specify an instance type, the Dedicated Hosts support instances of the specified instance type only. If you want the Dedicated Hosts to support multiple instance types in a specific instance family, omit this parameter and specify InstanceFamily instead. You cannot specify InstanceType and InstanceFamily in the same request.
        public let instanceType: String?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services Outpost on which to allocate the Dedicated Host. If you specify OutpostArn, you can  optionally specify AssetIds. If you are allocating the Dedicated Host in a Region, omit this parameter.
        public let outpostArn: String?
        /// The number of Dedicated Hosts to allocate to your account with these parameters. If you are  allocating the Dedicated Hosts on an Outpost, and you specify AssetIds,  you can omit this parameter. In this case, Amazon EC2 allocates a Dedicated Host on each  specified hardware asset. If you specify both AssetIds and  Quantity, then the value that you specify for  Quantity must be equal to the number of asset IDs specified.
        public let quantity: Int?
        /// The tags to apply to the Dedicated Host during creation.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(assetIds: [String]? = nil, autoPlacement: AutoPlacement? = nil, availabilityZone: String? = nil, clientToken: String? = nil, hostMaintenance: HostMaintenance? = nil, hostRecovery: HostRecovery? = nil, instanceFamily: String? = nil, instanceType: String? = nil, outpostArn: String? = nil, quantity: Int? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.assetIds = assetIds
            self.autoPlacement = autoPlacement
            self.availabilityZone = availabilityZone
            self.clientToken = clientToken
            self.hostMaintenance = hostMaintenance
            self.hostRecovery = hostRecovery
            self.instanceFamily = instanceFamily
            self.instanceType = instanceType
            self.outpostArn = outpostArn
            self.quantity = quantity
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case assetIds = "AssetId"
            case autoPlacement = "autoPlacement"
            case availabilityZone = "availabilityZone"
            case clientToken = "clientToken"
            case hostMaintenance = "HostMaintenance"
            case hostRecovery = "HostRecovery"
            case instanceFamily = "InstanceFamily"
            case instanceType = "instanceType"
            case outpostArn = "OutpostArn"
            case quantity = "quantity"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct AllocateHostsResult: AWSDecodableShape {
        public struct _HostIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the allocated Dedicated Host. This is used to launch an instance onto a specific host.
        @OptionalCustomCoding<EC2ArrayCoder<_HostIdsEncoding, String>>
        public var hostIds: [String]?

        public init(hostIds: [String]? = nil) {
            self.hostIds = hostIds
        }

        private enum CodingKeys: String, CodingKey {
            case hostIds = "hostIdSet"
        }
    }

    public struct AllocateIpamPoolCidrRequest: AWSEncodableShape {
        public struct _AllowedCidrsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _DisallowedCidrsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Include a particular CIDR range that can be returned by the pool. Allowed CIDRs are only allowed if using netmask length for allocation.
        @OptionalCustomCoding<EC2ArrayCoder<_AllowedCidrsEncoding, String>>
        public var allowedCidrs: [String]?
        /// The CIDR you would like to allocate from the IPAM pool. Note the following:   If there is no DefaultNetmaskLength allocation rule set on the pool, you must specify either the NetmaskLength or the CIDR.   If the DefaultNetmaskLength allocation rule is set on the pool, you can specify either the NetmaskLength or the CIDR and the DefaultNetmaskLength allocation rule will be ignored.   Possible values: Any available IPv4 or IPv6 CIDR.
        public let cidr: String?
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// A description for the allocation.
        public let description: String?
        /// Exclude a particular CIDR range from being returned by the pool. Disallowed CIDRs are only allowed if using netmask length for allocation.
        @OptionalCustomCoding<EC2ArrayCoder<_DisallowedCidrsEncoding, String>>
        public var disallowedCidrs: [String]?
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the IPAM pool from which you would like to allocate a CIDR.
        public let ipamPoolId: String?
        /// The netmask length of the CIDR you would like to allocate from the IPAM pool. Note the following:   If there is no DefaultNetmaskLength allocation rule set on the pool, you must specify either the NetmaskLength or the CIDR.   If the DefaultNetmaskLength allocation rule is set on the pool, you can specify either the NetmaskLength or the CIDR and the DefaultNetmaskLength allocation rule will be ignored.   Possible netmask lengths for IPv4 addresses are 0 - 32. Possible netmask lengths for IPv6 addresses are 0 - 128.
        public let netmaskLength: Int?
        /// A preview of the next available CIDR in a pool.
        public let previewNextCidr: Bool?

        public init(allowedCidrs: [String]? = nil, cidr: String? = nil, clientToken: String? = AllocateIpamPoolCidrRequest.idempotencyToken(), description: String? = nil, disallowedCidrs: [String]? = nil, dryRun: Bool? = nil, ipamPoolId: String? = nil, netmaskLength: Int? = nil, previewNextCidr: Bool? = nil) {
            self.allowedCidrs = allowedCidrs
            self.cidr = cidr
            self.clientToken = clientToken
            self.description = description
            self.disallowedCidrs = disallowedCidrs
            self.dryRun = dryRun
            self.ipamPoolId = ipamPoolId
            self.netmaskLength = netmaskLength
            self.previewNextCidr = previewNextCidr
        }

        private enum CodingKeys: String, CodingKey {
            case allowedCidrs = "AllowedCidr"
            case cidr = "Cidr"
            case clientToken = "ClientToken"
            case description = "Description"
            case disallowedCidrs = "DisallowedCidr"
            case dryRun = "DryRun"
            case ipamPoolId = "IpamPoolId"
            case netmaskLength = "NetmaskLength"
            case previewNextCidr = "PreviewNextCidr"
        }
    }

    public struct AllocateIpamPoolCidrResult: AWSDecodableShape {
        /// Information about the allocation created.
        public let ipamPoolAllocation: IpamPoolAllocation?

        public init(ipamPoolAllocation: IpamPoolAllocation? = nil) {
            self.ipamPoolAllocation = ipamPoolAllocation
        }

        private enum CodingKeys: String, CodingKey {
            case ipamPoolAllocation = "ipamPoolAllocation"
        }
    }

    public struct AllowedPrincipal: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Amazon Resource Name (ARN) of the principal.
        public let principal: String?
        /// The type of principal.
        public let principalType: PrincipalType?
        /// The ID of the service.
        public let serviceId: String?
        /// The ID of the service permission.
        public let servicePermissionId: String?
        /// The tags.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(principal: String? = nil, principalType: PrincipalType? = nil, serviceId: String? = nil, servicePermissionId: String? = nil, tags: [Tag]? = nil) {
            self.principal = principal
            self.principalType = principalType
            self.serviceId = serviceId
            self.servicePermissionId = servicePermissionId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case principal = "principal"
            case principalType = "principalType"
            case serviceId = "serviceId"
            case servicePermissionId = "servicePermissionId"
            case tags = "tagSet"
        }
    }

    public struct AlternatePathHint: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the component.
        public let componentArn: String?
        /// The ID of the component.
        public let componentId: String?

        public init(componentArn: String? = nil, componentId: String? = nil) {
            self.componentArn = componentArn
            self.componentId = componentId
        }

        private enum CodingKeys: String, CodingKey {
            case componentArn = "componentArn"
            case componentId = "componentId"
        }
    }

    public struct AnalysisAclRule: AWSDecodableShape {
        /// The IPv4 address range, in CIDR notation.
        public let cidr: String?
        /// Indicates whether the rule is an outbound rule.
        public let egress: Bool?
        /// The range of ports.
        public let portRange: PortRange?
        /// The protocol.
        public let `protocol`: String?
        /// Indicates whether to allow or deny traffic that matches the rule.
        public let ruleAction: String?
        /// The rule number.
        public let ruleNumber: Int?

        public init(cidr: String? = nil, egress: Bool? = nil, portRange: PortRange? = nil, protocol: String? = nil, ruleAction: String? = nil, ruleNumber: Int? = nil) {
            self.cidr = cidr
            self.egress = egress
            self.portRange = portRange
            self.`protocol` = `protocol`
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "cidr"
            case egress = "egress"
            case portRange = "portRange"
            case `protocol` = "protocol"
            case ruleAction = "ruleAction"
            case ruleNumber = "ruleNumber"
        }
    }

    public struct AnalysisComponent: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the component.
        public let arn: String?
        /// The ID of the component.
        public let id: String?
        /// The name of the analysis component.
        public let name: String?

        public init(arn: String? = nil, id: String? = nil, name: String? = nil) {
            self.arn = arn
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case id = "id"
            case name = "name"
        }
    }

    public struct AnalysisLoadBalancerListener: AWSDecodableShape {
        /// [Classic Load Balancers] The back-end port for the listener.
        public let instancePort: Int?
        /// The port on which the load balancer is listening.
        public let loadBalancerPort: Int?

        public init(instancePort: Int? = nil, loadBalancerPort: Int? = nil) {
            self.instancePort = instancePort
            self.loadBalancerPort = loadBalancerPort
        }

        private enum CodingKeys: String, CodingKey {
            case instancePort = "instancePort"
            case loadBalancerPort = "loadBalancerPort"
        }
    }

    public struct AnalysisLoadBalancerTarget: AWSDecodableShape {
        /// The IP address.
        public let address: String?
        /// The Availability Zone.
        public let availabilityZone: String?
        /// Information about the instance.
        public let instance: AnalysisComponent?
        /// The port on which the target is listening.
        public let port: Int?

        public init(address: String? = nil, availabilityZone: String? = nil, instance: AnalysisComponent? = nil, port: Int? = nil) {
            self.address = address
            self.availabilityZone = availabilityZone
            self.instance = instance
            self.port = port
        }

        private enum CodingKeys: String, CodingKey {
            case address = "address"
            case availabilityZone = "availabilityZone"
            case instance = "instance"
            case port = "port"
        }
    }

    public struct AnalysisPacketHeader: AWSDecodableShape {
        public struct _DestinationAddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _DestinationPortRangesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SourceAddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SourcePortRangesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The destination addresses.
        @OptionalCustomCoding<EC2ArrayCoder<_DestinationAddressesEncoding, String>>
        public var destinationAddresses: [String]?
        /// The destination port ranges.
        @OptionalCustomCoding<EC2ArrayCoder<_DestinationPortRangesEncoding, PortRange>>
        public var destinationPortRanges: [PortRange]?
        /// The protocol.
        public let `protocol`: String?
        /// The source addresses.
        @OptionalCustomCoding<EC2ArrayCoder<_SourceAddressesEncoding, String>>
        public var sourceAddresses: [String]?
        /// The source port ranges.
        @OptionalCustomCoding<EC2ArrayCoder<_SourcePortRangesEncoding, PortRange>>
        public var sourcePortRanges: [PortRange]?

        public init(destinationAddresses: [String]? = nil, destinationPortRanges: [PortRange]? = nil, protocol: String? = nil, sourceAddresses: [String]? = nil, sourcePortRanges: [PortRange]? = nil) {
            self.destinationAddresses = destinationAddresses
            self.destinationPortRanges = destinationPortRanges
            self.`protocol` = `protocol`
            self.sourceAddresses = sourceAddresses
            self.sourcePortRanges = sourcePortRanges
        }

        private enum CodingKeys: String, CodingKey {
            case destinationAddresses = "destinationAddressSet"
            case destinationPortRanges = "destinationPortRangeSet"
            case `protocol` = "protocol"
            case sourceAddresses = "sourceAddressSet"
            case sourcePortRanges = "sourcePortRangeSet"
        }
    }

    public struct AnalysisRouteTableRoute: AWSDecodableShape {
        /// The ID of a carrier gateway.
        public let carrierGatewayId: String?
        /// The Amazon Resource Name (ARN) of a core network.
        public let coreNetworkArn: String?
        /// The destination IPv4 address, in CIDR notation.
        public let destinationCidr: String?
        /// The prefix of the Amazon Web Service.
        public let destinationPrefixListId: String?
        /// The ID of an egress-only internet gateway.
        public let egressOnlyInternetGatewayId: String?
        /// The ID of the gateway, such as an internet gateway or virtual private gateway.
        public let gatewayId: String?
        /// The ID of the instance, such as a NAT instance.
        public let instanceId: String?
        /// The ID of a local gateway.
        public let localGatewayId: String?
        /// The ID of a NAT gateway.
        public let natGatewayId: String?
        /// The ID of a network interface.
        public let networkInterfaceId: String?
        /// Describes how the route was created. The following are the possible values:   CreateRouteTable - The route was automatically created when the route table was created.   CreateRoute - The route was manually added to the route table.   EnableVgwRoutePropagation - The route was propagated by route propagation.
        public let origin: String?
        /// The state. The following are the possible values:   active   blackhole
        public let state: String?
        /// The ID of a transit gateway.
        public let transitGatewayId: String?
        /// The ID of a VPC peering connection.
        public let vpcPeeringConnectionId: String?

        public init(carrierGatewayId: String? = nil, coreNetworkArn: String? = nil, destinationCidr: String? = nil, destinationPrefixListId: String? = nil, egressOnlyInternetGatewayId: String? = nil, gatewayId: String? = nil, instanceId: String? = nil, localGatewayId: String? = nil, natGatewayId: String? = nil, networkInterfaceId: String? = nil, origin: String? = nil, state: String? = nil, transitGatewayId: String? = nil, vpcPeeringConnectionId: String? = nil) {
            self.carrierGatewayId = carrierGatewayId
            self.coreNetworkArn = coreNetworkArn
            self.destinationCidr = destinationCidr
            self.destinationPrefixListId = destinationPrefixListId
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
            self.gatewayId = gatewayId
            self.instanceId = instanceId
            self.localGatewayId = localGatewayId
            self.natGatewayId = natGatewayId
            self.networkInterfaceId = networkInterfaceId
            self.origin = origin
            self.state = state
            self.transitGatewayId = transitGatewayId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGatewayId = "carrierGatewayId"
            case coreNetworkArn = "coreNetworkArn"
            case destinationCidr = "destinationCidr"
            case destinationPrefixListId = "destinationPrefixListId"
            case egressOnlyInternetGatewayId = "egressOnlyInternetGatewayId"
            case gatewayId = "gatewayId"
            case instanceId = "instanceId"
            case localGatewayId = "localGatewayId"
            case natGatewayId = "natGatewayId"
            case networkInterfaceId = "networkInterfaceId"
            case origin = "origin"
            case state = "state"
            case transitGatewayId = "transitGatewayId"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct AnalysisSecurityGroupRule: AWSDecodableShape {
        /// The IPv4 address range, in CIDR notation.
        public let cidr: String?
        /// The direction. The following are the possible values:   egress   ingress
        public let direction: String?
        /// The port range.
        public let portRange: PortRange?
        /// The prefix list ID.
        public let prefixListId: String?
        /// The protocol name.
        public let `protocol`: String?
        /// The security group ID.
        public let securityGroupId: String?

        public init(cidr: String? = nil, direction: String? = nil, portRange: PortRange? = nil, prefixListId: String? = nil, protocol: String? = nil, securityGroupId: String? = nil) {
            self.cidr = cidr
            self.direction = direction
            self.portRange = portRange
            self.prefixListId = prefixListId
            self.`protocol` = `protocol`
            self.securityGroupId = securityGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "cidr"
            case direction = "direction"
            case portRange = "portRange"
            case prefixListId = "prefixListId"
            case `protocol` = "protocol"
            case securityGroupId = "securityGroupId"
        }
    }

    public struct ApplySecurityGroupsToClientVpnTargetNetworkRequest: AWSEncodableShape {
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the security groups to apply to the associated target network. Up to 5 security groups can
        /// 			be applied to an associated target network.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?
        /// The ID of the VPC in which the associated target network is located.
        public let vpcId: String?

        public init(clientVpnEndpointId: String? = nil, dryRun: Bool? = nil, securityGroupIds: [String]? = nil, vpcId: String? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
            self.securityGroupIds = securityGroupIds
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
            case securityGroupIds = "SecurityGroupId"
            case vpcId = "VpcId"
        }
    }

    public struct ApplySecurityGroupsToClientVpnTargetNetworkResult: AWSDecodableShape {
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the applied security groups.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?

        public init(securityGroupIds: [String]? = nil) {
            self.securityGroupIds = securityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupIds = "securityGroupIds"
        }
    }

    public struct AsnAssociation: AWSDecodableShape {
        /// The association's ASN.
        public let asn: String?
        /// The association's CIDR.
        public let cidr: String?
        /// The association's state.
        public let state: AsnAssociationState?
        /// The association's status message.
        public let statusMessage: String?

        public init(asn: String? = nil, cidr: String? = nil, state: AsnAssociationState? = nil, statusMessage: String? = nil) {
            self.asn = asn
            self.cidr = cidr
            self.state = state
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case asn = "asn"
            case cidr = "cidr"
            case state = "state"
            case statusMessage = "statusMessage"
        }
    }

    public struct AsnAuthorizationContext: AWSEncodableShape {
        /// The authorization context's message.
        public let message: String?
        /// The authorization context's signature.
        public let signature: String?

        public init(message: String? = nil, signature: String? = nil) {
            self.message = message
            self.signature = signature
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case signature = "Signature"
        }
    }

    public struct AssignIpv6AddressesRequest: AWSEncodableShape {
        public struct _Ipv6AddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv6PrefixesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The number of additional IPv6 addresses to assign to the network interface.  		The specified number of IPv6 addresses are assigned in addition to the  		existing IPv6 addresses that are already assigned to the network interface.  		Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You  		can't use this option if specifying specific IPv6 addresses.
        public let ipv6AddressCount: Int?
        /// The IPv6 addresses to be assigned to the network interface. You can't use this option if you're specifying a number of IPv6 addresses.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv6AddressesEncoding, String>>
        public var ipv6Addresses: [String]?
        /// The number of IPv6 prefixes that Amazon Web Services automatically assigns to the network interface. You cannot use this option if you use the Ipv6Prefixes option.
        public let ipv6PrefixCount: Int?
        /// One or more IPv6 prefixes assigned to the network interface. You cannot use this option if you use the Ipv6PrefixCount option.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv6PrefixesEncoding, String>>
        public var ipv6Prefixes: [String]?
        /// The ID of the network interface.
        public let networkInterfaceId: String?

        public init(ipv6AddressCount: Int? = nil, ipv6Addresses: [String]? = nil, ipv6PrefixCount: Int? = nil, ipv6Prefixes: [String]? = nil, networkInterfaceId: String? = nil) {
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.ipv6PrefixCount = ipv6PrefixCount
            self.ipv6Prefixes = ipv6Prefixes
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6AddressCount = "ipv6AddressCount"
            case ipv6Addresses = "ipv6Addresses"
            case ipv6PrefixCount = "Ipv6PrefixCount"
            case ipv6Prefixes = "Ipv6Prefix"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct AssignIpv6AddressesResult: AWSDecodableShape {
        public struct _AssignedIpv6AddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _AssignedIpv6PrefixesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The new IPv6 addresses assigned to the network interface. Existing IPv6 addresses  	that were assigned to the network interface before the request are not included.
        @OptionalCustomCoding<EC2ArrayCoder<_AssignedIpv6AddressesEncoding, String>>
        public var assignedIpv6Addresses: [String]?
        /// The IPv6 prefixes that are assigned to the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_AssignedIpv6PrefixesEncoding, String>>
        public var assignedIpv6Prefixes: [String]?
        /// The ID of the network interface.
        public let networkInterfaceId: String?

        public init(assignedIpv6Addresses: [String]? = nil, assignedIpv6Prefixes: [String]? = nil, networkInterfaceId: String? = nil) {
            self.assignedIpv6Addresses = assignedIpv6Addresses
            self.assignedIpv6Prefixes = assignedIpv6Prefixes
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case assignedIpv6Addresses = "assignedIpv6Addresses"
            case assignedIpv6Prefixes = "assignedIpv6PrefixSet"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct AssignPrivateIpAddressesRequest: AWSEncodableShape {
        public struct _Ipv4PrefixesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PrivateIpAddressesEncoding: ArrayCoderProperties { public static let member = "PrivateIpAddress" }

        /// Indicates whether to allow an IP address that is already assigned to another network interface or instance to be reassigned to the specified network interface.
        public let allowReassignment: Bool?
        /// The number of IPv4 prefixes that Amazon Web Services automatically assigns to the network interface. You cannot use this option if you use the Ipv4 Prefixes option.
        public let ipv4PrefixCount: Int?
        /// One or more IPv4 prefixes assigned to the network interface. You cannot use this option if you use the Ipv4PrefixCount option.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv4PrefixesEncoding, String>>
        public var ipv4Prefixes: [String]?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The IP addresses to be assigned as a secondary private IP address to the network interface. You can't specify this parameter when also specifying a number of secondary IP addresses. If you don't specify an IP address, Amazon EC2 automatically selects an IP address within the subnet range.
        @OptionalCustomCoding<EC2ArrayCoder<_PrivateIpAddressesEncoding, String>>
        public var privateIpAddresses: [String]?
        /// The number of secondary IP addresses to assign to the network interface. You can't specify this parameter when also specifying private IP addresses.
        public let secondaryPrivateIpAddressCount: Int?

        public init(allowReassignment: Bool? = nil, ipv4PrefixCount: Int? = nil, ipv4Prefixes: [String]? = nil, networkInterfaceId: String? = nil, privateIpAddresses: [String]? = nil, secondaryPrivateIpAddressCount: Int? = nil) {
            self.allowReassignment = allowReassignment
            self.ipv4PrefixCount = ipv4PrefixCount
            self.ipv4Prefixes = ipv4Prefixes
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddresses = privateIpAddresses
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
        }

        private enum CodingKeys: String, CodingKey {
            case allowReassignment = "allowReassignment"
            case ipv4PrefixCount = "Ipv4PrefixCount"
            case ipv4Prefixes = "Ipv4Prefix"
            case networkInterfaceId = "networkInterfaceId"
            case privateIpAddresses = "privateIpAddress"
            case secondaryPrivateIpAddressCount = "secondaryPrivateIpAddressCount"
        }
    }

    public struct AssignPrivateIpAddressesResult: AWSDecodableShape {
        public struct _AssignedIpv4PrefixesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _AssignedPrivateIpAddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IPv4 prefixes that are assigned to the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_AssignedIpv4PrefixesEncoding, Ipv4PrefixSpecification>>
        public var assignedIpv4Prefixes: [Ipv4PrefixSpecification]?
        /// The private IP addresses assigned to the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_AssignedPrivateIpAddressesEncoding, AssignedPrivateIpAddress>>
        public var assignedPrivateIpAddresses: [AssignedPrivateIpAddress]?
        /// The ID of the network interface.
        public let networkInterfaceId: String?

        public init(assignedIpv4Prefixes: [Ipv4PrefixSpecification]? = nil, assignedPrivateIpAddresses: [AssignedPrivateIpAddress]? = nil, networkInterfaceId: String? = nil) {
            self.assignedIpv4Prefixes = assignedIpv4Prefixes
            self.assignedPrivateIpAddresses = assignedPrivateIpAddresses
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case assignedIpv4Prefixes = "assignedIpv4PrefixSet"
            case assignedPrivateIpAddresses = "assignedPrivateIpAddressesSet"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct AssignPrivateNatGatewayAddressRequest: AWSEncodableShape {
        public struct _PrivateIpAddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the NAT gateway.
        public let natGatewayId: String?
        /// The number of private IP addresses to assign to the NAT gateway. You can't specify this parameter when also specifying private IP addresses.
        public let privateIpAddressCount: Int?
        /// The private IPv4 addresses you want to assign to the private NAT gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_PrivateIpAddressesEncoding, String>>
        public var privateIpAddresses: [String]?

        public init(dryRun: Bool? = nil, natGatewayId: String? = nil, privateIpAddressCount: Int? = nil, privateIpAddresses: [String]? = nil) {
            self.dryRun = dryRun
            self.natGatewayId = natGatewayId
            self.privateIpAddressCount = privateIpAddressCount
            self.privateIpAddresses = privateIpAddresses
        }

        public func validate(name: String) throws {
            try self.validate(self.privateIpAddressCount, name: "privateIpAddressCount", parent: name, max: 31)
            try self.validate(self.privateIpAddressCount, name: "privateIpAddressCount", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case natGatewayId = "NatGatewayId"
            case privateIpAddressCount = "PrivateIpAddressCount"
            case privateIpAddresses = "PrivateIpAddress"
        }
    }

    public struct AssignPrivateNatGatewayAddressResult: AWSDecodableShape {
        public struct _NatGatewayAddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// NAT gateway IP addresses.
        @OptionalCustomCoding<EC2ArrayCoder<_NatGatewayAddressesEncoding, NatGatewayAddress>>
        public var natGatewayAddresses: [NatGatewayAddress]?
        /// The ID of the NAT gateway.
        public let natGatewayId: String?

        public init(natGatewayAddresses: [NatGatewayAddress]? = nil, natGatewayId: String? = nil) {
            self.natGatewayAddresses = natGatewayAddresses
            self.natGatewayId = natGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case natGatewayAddresses = "natGatewayAddressSet"
            case natGatewayId = "natGatewayId"
        }
    }

    public struct AssignedPrivateIpAddress: AWSDecodableShape {
        /// The private IP address assigned to the network interface.
        public let privateIpAddress: String?

        public init(privateIpAddress: String? = nil) {
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case privateIpAddress = "privateIpAddress"
        }
    }

    public struct AssociateAddressRequest: AWSEncodableShape {
        /// The allocation ID. This is required.
        public let allocationId: String?
        /// Reassociation is automatic, but you can specify false to ensure the operation fails if the Elastic IP address is already associated with another resource.
        public let allowReassociation: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance. The instance must have exactly one attached network interface. You can specify either the instance ID or the network interface ID, but not both.
        public let instanceId: String?
        /// The ID of the network interface. If the instance has more than one network interface, you must specify a network interface ID. You can specify either the instance ID or the network interface ID, but not both.
        public let networkInterfaceId: String?
        /// The primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address.
        public let privateIpAddress: String?
        /// Deprecated.
        public let publicIp: String?

        public init(allocationId: String? = nil, allowReassociation: Bool? = nil, dryRun: Bool? = nil, instanceId: String? = nil, networkInterfaceId: String? = nil, privateIpAddress: String? = nil, publicIp: String? = nil) {
            self.allocationId = allocationId
            self.allowReassociation = allowReassociation
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddress = privateIpAddress
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "AllocationId"
            case allowReassociation = "allowReassociation"
            case dryRun = "dryRun"
            case instanceId = "InstanceId"
            case networkInterfaceId = "networkInterfaceId"
            case privateIpAddress = "privateIpAddress"
            case publicIp = "PublicIp"
        }
    }

    public struct AssociateAddressResult: AWSDecodableShape {
        /// The ID that represents the association of the Elastic IP address with an instance.
        public let associationId: String?

        public init(associationId: String? = nil) {
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
        }
    }

    public struct AssociateClientVpnTargetNetworkRequest: AWSEncodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
        public let clientToken: String?
        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the subnet to associate with the Client VPN endpoint.
        public let subnetId: String?

        public init(clientToken: String? = AssociateClientVpnTargetNetworkRequest.idempotencyToken(), clientVpnEndpointId: String? = nil, dryRun: Bool? = nil, subnetId: String? = nil) {
            self.clientToken = clientToken
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
            case subnetId = "SubnetId"
        }
    }

    public struct AssociateClientVpnTargetNetworkResult: AWSDecodableShape {
        /// The unique ID of the target network association.
        public let associationId: String?
        /// The current state of the target network association.
        public let status: AssociationStatus?

        public init(associationId: String? = nil, status: AssociationStatus? = nil) {
            self.associationId = associationId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case status = "status"
        }
    }

    public struct AssociateDhcpOptionsRequest: AWSEncodableShape {
        /// The ID of the DHCP options set, or default to associate  no DHCP options with the VPC.
        public let dhcpOptionsId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(dhcpOptionsId: String? = nil, dryRun: Bool? = nil, vpcId: String? = nil) {
            self.dhcpOptionsId = dhcpOptionsId
            self.dryRun = dryRun
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptionsId = "DhcpOptionsId"
            case dryRun = "dryRun"
            case vpcId = "VpcId"
        }
    }

    public struct AssociateEnclaveCertificateIamRoleRequest: AWSEncodableShape {
        /// The ARN of the ACM certificate with which to associate the IAM role.
        public let certificateArn: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ARN of the IAM role to associate with the ACM certificate. You can associate up to 16 IAM roles with an ACM
        /// 			certificate.
        public let roleArn: String?

        public init(certificateArn: String? = nil, dryRun: Bool? = nil, roleArn: String? = nil) {
            self.certificateArn = certificateArn
            self.dryRun = dryRun
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "CertificateArn"
            case dryRun = "DryRun"
            case roleArn = "RoleArn"
        }
    }

    public struct AssociateEnclaveCertificateIamRoleResult: AWSDecodableShape {
        /// The name of the Amazon S3 bucket to which the certificate was uploaded.
        public let certificateS3BucketName: String?
        /// The Amazon S3 object key where the certificate, certificate chain, and encrypted private key bundle are stored. The
        /// 			object key is formatted as follows:  role_arn/certificate_arn.
        public let certificateS3ObjectKey: String?
        /// The ID of the KMS key used to encrypt the private key of the certificate.
        public let encryptionKmsKeyId: String?

        public init(certificateS3BucketName: String? = nil, certificateS3ObjectKey: String? = nil, encryptionKmsKeyId: String? = nil) {
            self.certificateS3BucketName = certificateS3BucketName
            self.certificateS3ObjectKey = certificateS3ObjectKey
            self.encryptionKmsKeyId = encryptionKmsKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case certificateS3BucketName = "certificateS3BucketName"
            case certificateS3ObjectKey = "certificateS3ObjectKey"
            case encryptionKmsKeyId = "encryptionKmsKeyId"
        }
    }

    public struct AssociateIamInstanceProfileRequest: AWSEncodableShape {
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification?
        /// The ID of the instance.
        public let instanceId: String?

        public init(iamInstanceProfile: IamInstanceProfileSpecification? = nil, instanceId: String? = nil) {
            self.iamInstanceProfile = iamInstanceProfile
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfile = "IamInstanceProfile"
            case instanceId = "InstanceId"
        }
    }

    public struct AssociateIamInstanceProfileResult: AWSDecodableShape {
        /// Information about the IAM instance profile association.
        public let iamInstanceProfileAssociation: IamInstanceProfileAssociation?

        public init(iamInstanceProfileAssociation: IamInstanceProfileAssociation? = nil) {
            self.iamInstanceProfileAssociation = iamInstanceProfileAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfileAssociation = "iamInstanceProfileAssociation"
        }
    }

    public struct AssociateInstanceEventWindowRequest: AWSEncodableShape {
        /// One or more targets associated with the specified event window.
        public let associationTarget: InstanceEventWindowAssociationRequest?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the event window.
        public let instanceEventWindowId: String?

        public init(associationTarget: InstanceEventWindowAssociationRequest? = nil, dryRun: Bool? = nil, instanceEventWindowId: String? = nil) {
            self.associationTarget = associationTarget
            self.dryRun = dryRun
            self.instanceEventWindowId = instanceEventWindowId
        }

        private enum CodingKeys: String, CodingKey {
            case associationTarget = "AssociationTarget"
            case dryRun = "DryRun"
            case instanceEventWindowId = "InstanceEventWindowId"
        }
    }

    public struct AssociateInstanceEventWindowResult: AWSDecodableShape {
        /// Information about the event window.
        public let instanceEventWindow: InstanceEventWindow?

        public init(instanceEventWindow: InstanceEventWindow? = nil) {
            self.instanceEventWindow = instanceEventWindow
        }

        private enum CodingKeys: String, CodingKey {
            case instanceEventWindow = "instanceEventWindow"
        }
    }

    public struct AssociateIpamByoasnRequest: AWSEncodableShape {
        /// A public 2-byte or 4-byte ASN.
        public let asn: String?
        /// The BYOIP CIDR you want to associate with an ASN.
        public let cidr: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(asn: String? = nil, cidr: String? = nil, dryRun: Bool? = nil) {
            self.asn = asn
            self.cidr = cidr
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case asn = "Asn"
            case cidr = "Cidr"
            case dryRun = "DryRun"
        }
    }

    public struct AssociateIpamByoasnResult: AWSDecodableShape {
        /// The ASN and BYOIP CIDR association.
        public let asnAssociation: AsnAssociation?

        public init(asnAssociation: AsnAssociation? = nil) {
            self.asnAssociation = asnAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case asnAssociation = "asnAssociation"
        }
    }

    public struct AssociateIpamResourceDiscoveryRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A client token.
        public let clientToken: String?
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// An IPAM ID.
        public let ipamId: String?
        /// A resource discovery ID.
        public let ipamResourceDiscoveryId: String?
        /// Tag specifications.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = AssociateIpamResourceDiscoveryRequest.idempotencyToken(), dryRun: Bool? = nil, ipamId: String? = nil, ipamResourceDiscoveryId: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.ipamId = ipamId
            self.ipamResourceDiscoveryId = ipamResourceDiscoveryId
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case ipamId = "IpamId"
            case ipamResourceDiscoveryId = "IpamResourceDiscoveryId"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct AssociateIpamResourceDiscoveryResult: AWSDecodableShape {
        /// A resource discovery association. An associated resource discovery is a resource discovery that has been associated with an IPAM.
        public let ipamResourceDiscoveryAssociation: IpamResourceDiscoveryAssociation?

        public init(ipamResourceDiscoveryAssociation: IpamResourceDiscoveryAssociation? = nil) {
            self.ipamResourceDiscoveryAssociation = ipamResourceDiscoveryAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case ipamResourceDiscoveryAssociation = "ipamResourceDiscoveryAssociation"
        }
    }

    public struct AssociateNatGatewayAddressRequest: AWSEncodableShape {
        public struct _AllocationIdsEncoding: ArrayCoderProperties { public static let member = "AllocationId" }
        public struct _PrivateIpAddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The allocation IDs of EIPs that you want to associate with your NAT gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_AllocationIdsEncoding, String>>
        public var allocationIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the NAT gateway.
        public let natGatewayId: String?
        /// The private IPv4 addresses that you want to assign to the NAT gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_PrivateIpAddressesEncoding, String>>
        public var privateIpAddresses: [String]?

        public init(allocationIds: [String]? = nil, dryRun: Bool? = nil, natGatewayId: String? = nil, privateIpAddresses: [String]? = nil) {
            self.allocationIds = allocationIds
            self.dryRun = dryRun
            self.natGatewayId = natGatewayId
            self.privateIpAddresses = privateIpAddresses
        }

        private enum CodingKeys: String, CodingKey {
            case allocationIds = "AllocationId"
            case dryRun = "DryRun"
            case natGatewayId = "NatGatewayId"
            case privateIpAddresses = "PrivateIpAddress"
        }
    }

    public struct AssociateNatGatewayAddressResult: AWSDecodableShape {
        public struct _NatGatewayAddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IP addresses.
        @OptionalCustomCoding<EC2ArrayCoder<_NatGatewayAddressesEncoding, NatGatewayAddress>>
        public var natGatewayAddresses: [NatGatewayAddress]?
        /// The ID of the NAT gateway.
        public let natGatewayId: String?

        public init(natGatewayAddresses: [NatGatewayAddress]? = nil, natGatewayId: String? = nil) {
            self.natGatewayAddresses = natGatewayAddresses
            self.natGatewayId = natGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case natGatewayAddresses = "natGatewayAddressSet"
            case natGatewayId = "natGatewayId"
        }
    }

    public struct AssociateRouteTableRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the internet gateway or virtual private gateway.
        public let gatewayId: String?
        /// The ID of the route table.
        public let routeTableId: String?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(dryRun: Bool? = nil, gatewayId: String? = nil, routeTableId: String? = nil, subnetId: String? = nil) {
            self.dryRun = dryRun
            self.gatewayId = gatewayId
            self.routeTableId = routeTableId
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case gatewayId = "GatewayId"
            case routeTableId = "routeTableId"
            case subnetId = "subnetId"
        }
    }

    public struct AssociateRouteTableResult: AWSDecodableShape {
        /// The route table association ID. This ID is required for disassociating the route
        /// 			table.
        public let associationId: String?
        /// The state of the association.
        public let associationState: RouteTableAssociationState?

        public init(associationId: String? = nil, associationState: RouteTableAssociationState? = nil) {
            self.associationId = associationId
            self.associationState = associationState
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case associationState = "associationState"
        }
    }

    public struct AssociateSubnetCidrBlockRequest: AWSEncodableShape {
        /// The IPv6 CIDR block for your subnet.
        public let ipv6CidrBlock: String?
        /// An IPv6 IPAM pool ID.
        public let ipv6IpamPoolId: String?
        /// An IPv6 netmask length.
        public let ipv6NetmaskLength: Int?
        /// The ID of your subnet.
        public let subnetId: String?

        public init(ipv6CidrBlock: String? = nil, ipv6IpamPoolId: String? = nil, ipv6NetmaskLength: Int? = nil, subnetId: String? = nil) {
            self.ipv6CidrBlock = ipv6CidrBlock
            self.ipv6IpamPoolId = ipv6IpamPoolId
            self.ipv6NetmaskLength = ipv6NetmaskLength
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrBlock = "ipv6CidrBlock"
            case ipv6IpamPoolId = "Ipv6IpamPoolId"
            case ipv6NetmaskLength = "Ipv6NetmaskLength"
            case subnetId = "subnetId"
        }
    }

    public struct AssociateSubnetCidrBlockResult: AWSDecodableShape {
        /// Information about the IPv6 association.
        public let ipv6CidrBlockAssociation: SubnetIpv6CidrBlockAssociation?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(ipv6CidrBlockAssociation: SubnetIpv6CidrBlockAssociation? = nil, subnetId: String? = nil) {
            self.ipv6CidrBlockAssociation = ipv6CidrBlockAssociation
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrBlockAssociation = "ipv6CidrBlockAssociation"
            case subnetId = "subnetId"
        }
    }

    public struct AssociateTransitGatewayMulticastDomainRequest: AWSEncodableShape {
        public struct _SubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the subnets to associate with the transit gateway multicast domain.
        @OptionalCustomCoding<EC2ArrayCoder<_SubnetIdsEncoding, String>>
        public var subnetIds: [String]?
        /// The ID of the transit gateway attachment to associate with the transit gateway multicast domain.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, subnetIds: [String]? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.subnetIds = subnetIds
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case subnetIds = "SubnetIds"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct AssociateTransitGatewayMulticastDomainResult: AWSDecodableShape {
        /// Information about the transit gateway multicast domain associations.
        public let associations: TransitGatewayMulticastDomainAssociations?

        public init(associations: TransitGatewayMulticastDomainAssociations? = nil) {
            self.associations = associations
        }

        private enum CodingKeys: String, CodingKey {
            case associations = "associations"
        }
    }

    public struct AssociateTransitGatewayPolicyTableRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway attachment to associate with the policy table.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway policy table to associate with the transit gateway attachment.
        public let transitGatewayPolicyTableId: String?

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayPolicyTableId: String? = nil) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayPolicyTableId = transitGatewayPolicyTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayPolicyTableId = "TransitGatewayPolicyTableId"
        }
    }

    public struct AssociateTransitGatewayPolicyTableResult: AWSDecodableShape {
        /// Describes the association of a transit gateway and a transit gateway policy table.
        public let association: TransitGatewayPolicyTableAssociation?

        public init(association: TransitGatewayPolicyTableAssociation? = nil) {
            self.association = association
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
        }
    }

    public struct AssociateTransitGatewayRouteTableRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableId: String? = nil) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct AssociateTransitGatewayRouteTableResult: AWSDecodableShape {
        /// The ID of the association.
        public let association: TransitGatewayAssociation?

        public init(association: TransitGatewayAssociation? = nil) {
            self.association = association
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
        }
    }

    public struct AssociateTrunkInterfaceRequest: AWSEncodableShape {
        /// The ID of the branch network interface.
        public let branchInterfaceId: String?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The application key. This applies to the GRE protocol.
        public let greKey: Int?
        /// The ID of the trunk network interface.
        public let trunkInterfaceId: String?
        /// The ID of the VLAN. This applies to the VLAN protocol.
        public let vlanId: Int?

        public init(branchInterfaceId: String? = nil, clientToken: String? = AssociateTrunkInterfaceRequest.idempotencyToken(), dryRun: Bool? = nil, greKey: Int? = nil, trunkInterfaceId: String? = nil, vlanId: Int? = nil) {
            self.branchInterfaceId = branchInterfaceId
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.greKey = greKey
            self.trunkInterfaceId = trunkInterfaceId
            self.vlanId = vlanId
        }

        private enum CodingKeys: String, CodingKey {
            case branchInterfaceId = "BranchInterfaceId"
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case greKey = "GreKey"
            case trunkInterfaceId = "TrunkInterfaceId"
            case vlanId = "VlanId"
        }
    }

    public struct AssociateTrunkInterfaceResult: AWSDecodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Information about the association between the trunk network interface and branch network interface.
        public let interfaceAssociation: TrunkInterfaceAssociation?

        public init(clientToken: String? = nil, interfaceAssociation: TrunkInterfaceAssociation? = nil) {
            self.clientToken = clientToken
            self.interfaceAssociation = interfaceAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case interfaceAssociation = "interfaceAssociation"
        }
    }

    public struct AssociateVpcCidrBlockRequest: AWSEncodableShape {
        /// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6 addresses or the size of the CIDR block.
        public let amazonProvidedIpv6CidrBlock: Bool?
        /// An IPv4 CIDR block to associate with the VPC.
        public let cidrBlock: String?
        /// Associate a CIDR allocated from an IPv4 IPAM pool to a VPC. For more information about Amazon VPC IP Address Manager (IPAM), see What is IPAM? in the Amazon VPC IPAM User Guide.
        public let ipv4IpamPoolId: String?
        /// The netmask length of the IPv4 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see What is IPAM? in the Amazon VPC IPAM User Guide.
        public let ipv4NetmaskLength: Int?
        /// An IPv6 CIDR block from the IPv6 address pool. You must also specify Ipv6Pool in the request. To let Amazon choose the IPv6 CIDR block for you, omit this parameter.
        public let ipv6CidrBlock: String?
        /// The name of the location from which we advertise the IPV6 CIDR block. Use this parameter to limit the CIDR block to this location. You must set AmazonProvidedIpv6CidrBlock to true to use this parameter. You can have one IPv6 CIDR block association per network border group.
        public let ipv6CidrBlockNetworkBorderGroup: String?
        /// Associates a CIDR allocated from an IPv6 IPAM pool to a VPC. For more information about Amazon VPC IP Address Manager (IPAM), see What is IPAM? in the Amazon VPC IPAM User Guide.
        public let ipv6IpamPoolId: String?
        /// The netmask length of the IPv6 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see What is IPAM? in the Amazon VPC IPAM User Guide.
        public let ipv6NetmaskLength: Int?
        /// The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
        public let ipv6Pool: String?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(amazonProvidedIpv6CidrBlock: Bool? = nil, cidrBlock: String? = nil, ipv4IpamPoolId: String? = nil, ipv4NetmaskLength: Int? = nil, ipv6CidrBlock: String? = nil, ipv6CidrBlockNetworkBorderGroup: String? = nil, ipv6IpamPoolId: String? = nil, ipv6NetmaskLength: Int? = nil, ipv6Pool: String? = nil, vpcId: String? = nil) {
            self.amazonProvidedIpv6CidrBlock = amazonProvidedIpv6CidrBlock
            self.cidrBlock = cidrBlock
            self.ipv4IpamPoolId = ipv4IpamPoolId
            self.ipv4NetmaskLength = ipv4NetmaskLength
            self.ipv6CidrBlock = ipv6CidrBlock
            self.ipv6CidrBlockNetworkBorderGroup = ipv6CidrBlockNetworkBorderGroup
            self.ipv6IpamPoolId = ipv6IpamPoolId
            self.ipv6NetmaskLength = ipv6NetmaskLength
            self.ipv6Pool = ipv6Pool
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case amazonProvidedIpv6CidrBlock = "amazonProvidedIpv6CidrBlock"
            case cidrBlock = "CidrBlock"
            case ipv4IpamPoolId = "Ipv4IpamPoolId"
            case ipv4NetmaskLength = "Ipv4NetmaskLength"
            case ipv6CidrBlock = "Ipv6CidrBlock"
            case ipv6CidrBlockNetworkBorderGroup = "Ipv6CidrBlockNetworkBorderGroup"
            case ipv6IpamPoolId = "Ipv6IpamPoolId"
            case ipv6NetmaskLength = "Ipv6NetmaskLength"
            case ipv6Pool = "Ipv6Pool"
            case vpcId = "vpcId"
        }
    }

    public struct AssociateVpcCidrBlockResult: AWSDecodableShape {
        /// Information about the IPv4 CIDR block association.
        public let cidrBlockAssociation: VpcCidrBlockAssociation?
        /// Information about the IPv6 CIDR block association.
        public let ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(cidrBlockAssociation: VpcCidrBlockAssociation? = nil, ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation? = nil, vpcId: String? = nil) {
            self.cidrBlockAssociation = cidrBlockAssociation
            self.ipv6CidrBlockAssociation = ipv6CidrBlockAssociation
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlockAssociation = "cidrBlockAssociation"
            case ipv6CidrBlockAssociation = "ipv6CidrBlockAssociation"
            case vpcId = "vpcId"
        }
    }

    public struct AssociatedRole: AWSDecodableShape {
        /// The ARN of the associated IAM role.
        public let associatedRoleArn: String?
        /// The name of the Amazon S3 bucket in which the Amazon S3 object is stored.
        public let certificateS3BucketName: String?
        /// The key of the Amazon S3 object ey where the certificate, certificate chain, and encrypted private key bundle
        /// 			is stored. The object key is formated as follows:  role_arn/certificate_arn.
        ///
        public let certificateS3ObjectKey: String?
        /// The ID of the KMS customer master key (CMK) used to encrypt the private key.
        public let encryptionKmsKeyId: String?

        public init(associatedRoleArn: String? = nil, certificateS3BucketName: String? = nil, certificateS3ObjectKey: String? = nil, encryptionKmsKeyId: String? = nil) {
            self.associatedRoleArn = associatedRoleArn
            self.certificateS3BucketName = certificateS3BucketName
            self.certificateS3ObjectKey = certificateS3ObjectKey
            self.encryptionKmsKeyId = encryptionKmsKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case associatedRoleArn = "associatedRoleArn"
            case certificateS3BucketName = "certificateS3BucketName"
            case certificateS3ObjectKey = "certificateS3ObjectKey"
            case encryptionKmsKeyId = "encryptionKmsKeyId"
        }
    }

    public struct AssociatedTargetNetwork: AWSDecodableShape {
        /// The ID of the subnet.
        public let networkId: String?
        /// The target network type.
        public let networkType: AssociatedNetworkType?

        public init(networkId: String? = nil, networkType: AssociatedNetworkType? = nil) {
            self.networkId = networkId
            self.networkType = networkType
        }

        private enum CodingKeys: String, CodingKey {
            case networkId = "networkId"
            case networkType = "networkType"
        }
    }

    public struct AssociationStatus: AWSDecodableShape {
        /// The state of the target network association.
        public let code: AssociationStatusCode?
        /// A message about the status of the target network association, if applicable.
        public let message: String?

        public init(code: AssociationStatusCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct AthenaIntegration: AWSEncodableShape {
        /// The location in Amazon S3 to store the generated CloudFormation template.
        public let integrationResultS3DestinationArn: String?
        /// The end date for the partition.
        public let partitionEndDate: Date?
        /// The schedule for adding new partitions to the table.
        public let partitionLoadFrequency: PartitionLoadFrequency?
        /// The start date for the partition.
        public let partitionStartDate: Date?

        public init(integrationResultS3DestinationArn: String? = nil, partitionEndDate: Date? = nil, partitionLoadFrequency: PartitionLoadFrequency? = nil, partitionStartDate: Date? = nil) {
            self.integrationResultS3DestinationArn = integrationResultS3DestinationArn
            self.partitionEndDate = partitionEndDate
            self.partitionLoadFrequency = partitionLoadFrequency
            self.partitionStartDate = partitionStartDate
        }

        private enum CodingKeys: String, CodingKey {
            case integrationResultS3DestinationArn = "IntegrationResultS3DestinationArn"
            case partitionEndDate = "PartitionEndDate"
            case partitionLoadFrequency = "PartitionLoadFrequency"
            case partitionStartDate = "PartitionStartDate"
        }
    }

    public struct AttachClassicLinkVpcRequest: AWSEncodableShape {
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "groupId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the security groups. You cannot specify security groups from a different VPC.
        @OptionalCustomCoding<EC2ArrayCoder<_GroupsEncoding, String>>
        public var groups: [String]?
        /// The ID of the EC2-Classic instance.
        public let instanceId: String?
        /// The ID of the ClassicLink-enabled VPC.
        public let vpcId: String?

        public init(dryRun: Bool? = nil, groups: [String]? = nil, instanceId: String? = nil, vpcId: String? = nil) {
            self.dryRun = dryRun
            self.groups = groups
            self.instanceId = instanceId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case groups = "SecurityGroupId"
            case instanceId = "instanceId"
            case vpcId = "vpcId"
        }
    }

    public struct AttachClassicLinkVpcResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct AttachInternetGatewayRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the internet gateway.
        public let internetGatewayId: String?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(dryRun: Bool? = nil, internetGatewayId: String? = nil, vpcId: String? = nil) {
            self.dryRun = dryRun
            self.internetGatewayId = internetGatewayId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case internetGatewayId = "internetGatewayId"
            case vpcId = "vpcId"
        }
    }

    public struct AttachNetworkInterfaceRequest: AWSEncodableShape {
        /// The index of the device for the network interface attachment.
        public let deviceIndex: Int?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Configures ENA Express for the network interface that this action attaches to the instance.
        public let enaSrdSpecification: EnaSrdSpecification?
        /// The ID of the instance.
        public let instanceId: String?
        /// The index of the network card. Some instance types support multiple network cards.  The primary network interface must be assigned to network card index 0.  The default is network card index 0.
        public let networkCardIndex: Int?
        /// The ID of the network interface.
        public let networkInterfaceId: String?

        public init(deviceIndex: Int? = nil, dryRun: Bool? = nil, enaSrdSpecification: EnaSrdSpecification? = nil, instanceId: String? = nil, networkCardIndex: Int? = nil, networkInterfaceId: String? = nil) {
            self.deviceIndex = deviceIndex
            self.dryRun = dryRun
            self.enaSrdSpecification = enaSrdSpecification
            self.instanceId = instanceId
            self.networkCardIndex = networkCardIndex
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case deviceIndex = "deviceIndex"
            case dryRun = "dryRun"
            case enaSrdSpecification = "EnaSrdSpecification"
            case instanceId = "instanceId"
            case networkCardIndex = "NetworkCardIndex"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct AttachNetworkInterfaceResult: AWSDecodableShape {
        /// The ID of the network interface attachment.
        public let attachmentId: String?
        /// The index of the network card.
        public let networkCardIndex: Int?

        public init(attachmentId: String? = nil, networkCardIndex: Int? = nil) {
            self.attachmentId = attachmentId
            self.networkCardIndex = networkCardIndex
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentId = "attachmentId"
            case networkCardIndex = "networkCardIndex"
        }
    }

    public struct AttachVerifiedAccessTrustProviderRequest: AWSEncodableShape {
        /// A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Verified Access instance.
        public let verifiedAccessInstanceId: String?
        /// The ID of the Verified Access trust provider.
        public let verifiedAccessTrustProviderId: String?

        public init(clientToken: String? = AttachVerifiedAccessTrustProviderRequest.idempotencyToken(), dryRun: Bool? = nil, verifiedAccessInstanceId: String? = nil, verifiedAccessTrustProviderId: String? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.verifiedAccessInstanceId = verifiedAccessInstanceId
            self.verifiedAccessTrustProviderId = verifiedAccessTrustProviderId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case verifiedAccessInstanceId = "VerifiedAccessInstanceId"
            case verifiedAccessTrustProviderId = "VerifiedAccessTrustProviderId"
        }
    }

    public struct AttachVerifiedAccessTrustProviderResult: AWSDecodableShape {
        /// Details about the Verified Access instance.
        public let verifiedAccessInstance: VerifiedAccessInstance?
        /// Details about the Verified Access trust provider.
        public let verifiedAccessTrustProvider: VerifiedAccessTrustProvider?

        public init(verifiedAccessInstance: VerifiedAccessInstance? = nil, verifiedAccessTrustProvider: VerifiedAccessTrustProvider? = nil) {
            self.verifiedAccessInstance = verifiedAccessInstance
            self.verifiedAccessTrustProvider = verifiedAccessTrustProvider
        }

        private enum CodingKeys: String, CodingKey {
            case verifiedAccessInstance = "verifiedAccessInstance"
            case verifiedAccessTrustProvider = "verifiedAccessTrustProvider"
        }
    }

    public struct AttachVolumeRequest: AWSEncodableShape {
        /// The device name (for example, /dev/sdh or xvdh).
        public let device: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String?
        /// The ID of the EBS volume. The volume and instance must be within the same Availability Zone.
        public let volumeId: String?

        public init(device: String? = nil, dryRun: Bool? = nil, instanceId: String? = nil, volumeId: String? = nil) {
            self.device = device
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case device = "Device"
            case dryRun = "dryRun"
            case instanceId = "InstanceId"
            case volumeId = "VolumeId"
        }
    }

    public struct AttachVpnGatewayRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String?
        /// The ID of the virtual private gateway.
        public let vpnGatewayId: String?

        public init(dryRun: Bool? = nil, vpcId: String? = nil, vpnGatewayId: String? = nil) {
            self.dryRun = dryRun
            self.vpcId = vpcId
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpcId = "VpcId"
            case vpnGatewayId = "VpnGatewayId"
        }
    }

    public struct AttachVpnGatewayResult: AWSDecodableShape {
        /// Information about the attachment.
        public let vpcAttachment: VpcAttachment?

        public init(vpcAttachment: VpcAttachment? = nil) {
            self.vpcAttachment = vpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case vpcAttachment = "attachment"
        }
    }

    public struct AttachmentEnaSrdSpecification: AWSDecodableShape {
        /// Indicates whether ENA Express is enabled for the network interface.
        public let enaSrdEnabled: Bool?
        /// Configures ENA Express for UDP network traffic.
        public let enaSrdUdpSpecification: AttachmentEnaSrdUdpSpecification?

        public init(enaSrdEnabled: Bool? = nil, enaSrdUdpSpecification: AttachmentEnaSrdUdpSpecification? = nil) {
            self.enaSrdEnabled = enaSrdEnabled
            self.enaSrdUdpSpecification = enaSrdUdpSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case enaSrdEnabled = "enaSrdEnabled"
            case enaSrdUdpSpecification = "enaSrdUdpSpecification"
        }
    }

    public struct AttachmentEnaSrdUdpSpecification: AWSDecodableShape {
        /// Indicates whether UDP traffic to and from the instance uses ENA Express. To specify this setting,
        /// 			you must first enable ENA Express.
        public let enaSrdUdpEnabled: Bool?

        public init(enaSrdUdpEnabled: Bool? = nil) {
            self.enaSrdUdpEnabled = enaSrdUdpEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case enaSrdUdpEnabled = "enaSrdUdpEnabled"
        }
    }

    public struct AttributeBooleanValue: AWSEncodableShape & AWSDecodableShape {
        /// The attribute value. The valid values are true or false.
        public let value: Bool?

        public init(value: Bool? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct AttributeValue: AWSEncodableShape & AWSDecodableShape {
        /// The attribute value. The value is case-sensitive.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct AuthorizationRule: AWSDecodableShape {
        /// Indicates whether the authorization rule grants access to all clients.
        public let accessAll: Bool?
        /// The ID of the Client VPN endpoint with which the authorization rule is associated.
        public let clientVpnEndpointId: String?
        /// A brief description of the authorization rule.
        public let description: String?
        /// The IPv4 address range, in CIDR notation, of the network to which the authorization rule applies.
        public let destinationCidr: String?
        /// The ID of the Active Directory group to which the authorization rule grants access.
        public let groupId: String?
        /// The current state of the authorization rule.
        public let status: ClientVpnAuthorizationRuleStatus?

        public init(accessAll: Bool? = nil, clientVpnEndpointId: String? = nil, description: String? = nil, destinationCidr: String? = nil, groupId: String? = nil, status: ClientVpnAuthorizationRuleStatus? = nil) {
            self.accessAll = accessAll
            self.clientVpnEndpointId = clientVpnEndpointId
            self.description = description
            self.destinationCidr = destinationCidr
            self.groupId = groupId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case accessAll = "accessAll"
            case clientVpnEndpointId = "clientVpnEndpointId"
            case description = "description"
            case destinationCidr = "destinationCidr"
            case groupId = "groupId"
            case status = "status"
        }
    }

    public struct AuthorizeClientVpnIngressRequest: AWSEncodableShape {
        /// The ID of the group to grant access to, for example, the Active Directory group or identity provider (IdP) group. Required if AuthorizeAllGroups is false or not specified.
        public let accessGroupId: String?
        /// Indicates whether to grant access to all clients. Specify true to grant all clients who successfully establish a VPN connection access to the network. Must be set to true if AccessGroupId is not specified.
        public let authorizeAllGroups: Bool?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
        public let clientToken: String?
        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String?
        /// A brief description of the authorization rule.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IPv4 address range, in CIDR notation, of the network for which access is being authorized.
        public let targetNetworkCidr: String?

        public init(accessGroupId: String? = nil, authorizeAllGroups: Bool? = nil, clientToken: String? = AuthorizeClientVpnIngressRequest.idempotencyToken(), clientVpnEndpointId: String? = nil, description: String? = nil, dryRun: Bool? = nil, targetNetworkCidr: String? = nil) {
            self.accessGroupId = accessGroupId
            self.authorizeAllGroups = authorizeAllGroups
            self.clientToken = clientToken
            self.clientVpnEndpointId = clientVpnEndpointId
            self.description = description
            self.dryRun = dryRun
            self.targetNetworkCidr = targetNetworkCidr
        }

        private enum CodingKeys: String, CodingKey {
            case accessGroupId = "AccessGroupId"
            case authorizeAllGroups = "AuthorizeAllGroups"
            case clientToken = "ClientToken"
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case description = "Description"
            case dryRun = "DryRun"
            case targetNetworkCidr = "TargetNetworkCidr"
        }
    }

    public struct AuthorizeClientVpnIngressResult: AWSDecodableShape {
        /// The current state of the authorization rule.
        public let status: ClientVpnAuthorizationRuleStatus?

        public init(status: ClientVpnAuthorizationRuleStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
        }
    }

    public struct AuthorizeSecurityGroupEgressRequest: AWSEncodableShape {
        public struct _IpPermissionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Not supported. Use IP permissions instead.
        public let cidrIp: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Not supported. Use IP permissions instead.
        public let fromPort: Int?
        /// The ID of the security group.
        public let groupId: String?
        /// The permissions for the security group rules.
        @OptionalCustomCoding<EC2ArrayCoder<_IpPermissionsEncoding, IpPermission>>
        public var ipPermissions: [IpPermission]?
        /// Not supported. Use IP permissions instead.
        public let ipProtocol: String?
        /// Not supported. Use IP permissions instead.
        public let sourceSecurityGroupName: String?
        /// Not supported. Use IP permissions instead.
        public let sourceSecurityGroupOwnerId: String?
        /// The tags applied to the security group rule.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// Not supported. Use IP permissions instead.
        public let toPort: Int?

        public init(cidrIp: String? = nil, dryRun: Bool? = nil, fromPort: Int? = nil, groupId: String? = nil, ipPermissions: [IpPermission]? = nil, ipProtocol: String? = nil, sourceSecurityGroupName: String? = nil, sourceSecurityGroupOwnerId: String? = nil, tagSpecifications: [TagSpecification]? = nil, toPort: Int? = nil) {
            self.cidrIp = cidrIp
            self.dryRun = dryRun
            self.fromPort = fromPort
            self.groupId = groupId
            self.ipPermissions = ipPermissions
            self.ipProtocol = ipProtocol
            self.sourceSecurityGroupName = sourceSecurityGroupName
            self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
            self.tagSpecifications = tagSpecifications
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIp = "cidrIp"
            case dryRun = "dryRun"
            case fromPort = "fromPort"
            case groupId = "groupId"
            case ipPermissions = "ipPermissions"
            case ipProtocol = "ipProtocol"
            case sourceSecurityGroupName = "sourceSecurityGroupName"
            case sourceSecurityGroupOwnerId = "sourceSecurityGroupOwnerId"
            case tagSpecifications = "TagSpecification"
            case toPort = "toPort"
        }
    }

    public struct AuthorizeSecurityGroupEgressResult: AWSDecodableShape {
        public struct _SecurityGroupRulesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Returns true if the request succeeds; otherwise, returns an error.
        public let `return`: Bool?
        /// Information about the outbound (egress) security group rules that were added.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupRulesEncoding, SecurityGroupRule>>
        public var securityGroupRules: [SecurityGroupRule]?

        public init(return: Bool? = nil, securityGroupRules: [SecurityGroupRule]? = nil) {
            self.`return` = `return`
            self.securityGroupRules = securityGroupRules
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
            case securityGroupRules = "securityGroupRuleSet"
        }
    }

    public struct AuthorizeSecurityGroupIngressRequest: AWSEncodableShape {
        public struct _IpPermissionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IPv4 address range, in CIDR format. To specify an IPv6 address range, use IP permissions instead. To specify multiple rules and descriptions for the rules, use IP permissions instead.
        public let cidrIp: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// If the protocol is TCP or UDP, this is the start of the port range. If the protocol is ICMP, this is the ICMP type or -1 (all ICMP types). To specify multiple rules and descriptions for the rules, use IP permissions instead.
        public let fromPort: Int?
        /// The ID of the security group.
        public let groupId: String?
        /// [Default VPC] The name of the security group. For security groups for a default VPC you can specify either the ID or the name of the security group. For security groups for a nondefault VPC, you must specify the ID of the security group.
        public let groupName: String?
        /// The permissions for the security group rules.
        @OptionalCustomCoding<EC2ArrayCoder<_IpPermissionsEncoding, IpPermission>>
        public var ipPermissions: [IpPermission]?
        /// The IP protocol name (tcp, udp, icmp) or number (see Protocol Numbers). To specify all protocols, use -1. To specify icmpv6, use IP permissions instead. If you specify a protocol other than one of the supported values, traffic is allowed  on all ports, regardless of any ports that you specify. To specify multiple rules and descriptions for the rules, use IP permissions instead.
        public let ipProtocol: String?
        /// [Default VPC] The name of the source security group. The rule grants full ICMP, UDP, and TCP access. To create a rule with a specific protocol and port range, specify a set of IP permissions instead.
        public let sourceSecurityGroupName: String?
        /// The Amazon Web Services account ID for the source security group, if the source security group is  in a different account. The rule grants full ICMP, UDP, and TCP access. To create a rule with a specific protocol  and port range, use IP permissions instead.
        public let sourceSecurityGroupOwnerId: String?
        /// The tags applied to the security group rule.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// If the protocol is TCP or UDP, this is the end of the port range. If the protocol is ICMP, this is the ICMP code or -1 (all ICMP codes).  If the start port is -1 (all ICMP types), then the end port must be -1 (all ICMP codes). To specify multiple rules and descriptions for the rules, use IP permissions instead.
        public let toPort: Int?

        public init(cidrIp: String? = nil, dryRun: Bool? = nil, fromPort: Int? = nil, groupId: String? = nil, groupName: String? = nil, ipPermissions: [IpPermission]? = nil, ipProtocol: String? = nil, sourceSecurityGroupName: String? = nil, sourceSecurityGroupOwnerId: String? = nil, tagSpecifications: [TagSpecification]? = nil, toPort: Int? = nil) {
            self.cidrIp = cidrIp
            self.dryRun = dryRun
            self.fromPort = fromPort
            self.groupId = groupId
            self.groupName = groupName
            self.ipPermissions = ipPermissions
            self.ipProtocol = ipProtocol
            self.sourceSecurityGroupName = sourceSecurityGroupName
            self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
            self.tagSpecifications = tagSpecifications
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIp = "CidrIp"
            case dryRun = "dryRun"
            case fromPort = "FromPort"
            case groupId = "GroupId"
            case groupName = "GroupName"
            case ipPermissions = "IpPermissions"
            case ipProtocol = "IpProtocol"
            case sourceSecurityGroupName = "SourceSecurityGroupName"
            case sourceSecurityGroupOwnerId = "SourceSecurityGroupOwnerId"
            case tagSpecifications = "TagSpecification"
            case toPort = "ToPort"
        }
    }

    public struct AuthorizeSecurityGroupIngressResult: AWSDecodableShape {
        public struct _SecurityGroupRulesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Returns true if the request succeeds; otherwise, returns an error.
        public let `return`: Bool?
        /// Information about the inbound (ingress) security group rules that were added.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupRulesEncoding, SecurityGroupRule>>
        public var securityGroupRules: [SecurityGroupRule]?

        public init(return: Bool? = nil, securityGroupRules: [SecurityGroupRule]? = nil) {
            self.`return` = `return`
            self.securityGroupRules = securityGroupRules
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
            case securityGroupRules = "securityGroupRuleSet"
        }
    }

    public struct AvailabilityZone: AWSDecodableShape {
        public struct _MessagesEncoding: ArrayCoderProperties { public static let member = "item" }

        ///  For Availability Zones, this parameter has the same value as the Region name. For Local Zones, the name of the associated group, for example us-west-2-lax-1. For Wavelength Zones, the name of the associated group, for example us-east-1-wl1-bos-wlz-1.
        public let groupName: String?
        /// Any messages about the Availability Zone, Local Zone, or Wavelength Zone.
        @OptionalCustomCoding<EC2ArrayCoder<_MessagesEncoding, AvailabilityZoneMessage>>
        public var messages: [AvailabilityZoneMessage]?
        /// The name of the network border group.
        public let networkBorderGroup: String?
        /// For Availability Zones, this parameter always has the value of opt-in-not-required. For Local Zones and Wavelength Zones, this parameter is the opt-in status. The possible values are opted-in, and not-opted-in.
        public let optInStatus: AvailabilityZoneOptInStatus?
        /// The ID of the zone that handles some of the Local Zone or Wavelength Zone control plane operations, such as API calls.
        public let parentZoneId: String?
        /// The name of the zone that handles some of the Local Zone or Wavelength Zone control plane operations, such as API calls.
        public let parentZoneName: String?
        /// The name of the Region.
        public let regionName: String?
        /// The state of the Availability Zone, Local Zone, or Wavelength Zone. This value is always available.
        public let state: AvailabilityZoneState?
        /// The ID of the Availability Zone, Local Zone, or Wavelength Zone.
        public let zoneId: String?
        /// The name of the Availability Zone, Local Zone, or Wavelength Zone.
        public let zoneName: String?
        /// The type of zone. The valid values are availability-zone, local-zone, and wavelength-zone.
        public let zoneType: String?

        public init(groupName: String? = nil, messages: [AvailabilityZoneMessage]? = nil, networkBorderGroup: String? = nil, optInStatus: AvailabilityZoneOptInStatus? = nil, parentZoneId: String? = nil, parentZoneName: String? = nil, regionName: String? = nil, state: AvailabilityZoneState? = nil, zoneId: String? = nil, zoneName: String? = nil, zoneType: String? = nil) {
            self.groupName = groupName
            self.messages = messages
            self.networkBorderGroup = networkBorderGroup
            self.optInStatus = optInStatus
            self.parentZoneId = parentZoneId
            self.parentZoneName = parentZoneName
            self.regionName = regionName
            self.state = state
            self.zoneId = zoneId
            self.zoneName = zoneName
            self.zoneType = zoneType
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "groupName"
            case messages = "messageSet"
            case networkBorderGroup = "networkBorderGroup"
            case optInStatus = "optInStatus"
            case parentZoneId = "parentZoneId"
            case parentZoneName = "parentZoneName"
            case regionName = "regionName"
            case state = "zoneState"
            case zoneId = "zoneId"
            case zoneName = "zoneName"
            case zoneType = "zoneType"
        }
    }

    public struct AvailabilityZoneMessage: AWSDecodableShape {
        /// The message about the Availability Zone, Local Zone, or Wavelength Zone.
        public let message: String?

        public init(message: String? = nil) {
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case message = "message"
        }
    }

    public struct AvailableCapacity: AWSDecodableShape {
        public struct _AvailableInstanceCapacityEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The number of instances that can be launched onto the Dedicated Host depending on the host's available capacity. For Dedicated Hosts that support multiple instance types, this parameter represents the number of instances for each instance size that is supported on the host.
        @OptionalCustomCoding<EC2ArrayCoder<_AvailableInstanceCapacityEncoding, InstanceCapacity>>
        public var availableInstanceCapacity: [InstanceCapacity]?
        /// The number of vCPUs available for launching instances onto the Dedicated Host.
        public let availableVCpus: Int?

        public init(availableInstanceCapacity: [InstanceCapacity]? = nil, availableVCpus: Int? = nil) {
            self.availableInstanceCapacity = availableInstanceCapacity
            self.availableVCpus = availableVCpus
        }

        private enum CodingKeys: String, CodingKey {
            case availableInstanceCapacity = "availableInstanceCapacity"
            case availableVCpus = "availableVCpus"
        }
    }

    public struct BaselineEbsBandwidthMbps: AWSEncodableShape & AWSDecodableShape {
        /// The maximum baseline bandwidth, in Mbps. If this parameter is not specified, there is no maximum limit.
        public let max: Int?
        /// The minimum baseline bandwidth, in Mbps. If this parameter is not specified, there is no minimum limit.
        public let min: Int?

        public init(max: Int? = nil, min: Int? = nil) {
            self.max = max
            self.min = min
        }

        private enum CodingKeys: String, CodingKey {
            case max = "max"
            case min = "min"
        }
    }

    public struct BaselineEbsBandwidthMbpsRequest: AWSEncodableShape {
        /// The maximum baseline bandwidth, in Mbps. To specify no maximum limit, omit this parameter.
        public let max: Int?
        /// The minimum baseline bandwidth, in Mbps. To specify no minimum limit, omit this parameter.
        public let min: Int?

        public init(max: Int? = nil, min: Int? = nil) {
            self.max = max
            self.min = min
        }

        private enum CodingKeys: String, CodingKey {
            case max = "Max"
            case min = "Min"
        }
    }

    public struct BlobAttributeValue: AWSEncodableShape {
        public let value: AWSBase64Data?

        public init(value: AWSBase64Data? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct BlockDeviceMapping: AWSEncodableShape & AWSDecodableShape {
        /// The device name (for example, /dev/sdh or xvdh).
        public let deviceName: String?
        /// Parameters used to automatically set up EBS volumes when the instance is launched.
        public let ebs: EbsBlockDevice?
        /// To omit the device from the block device mapping, specify an empty string. When this property is specified, the device is removed from the block device mapping regardless of the assigned value.
        public let noDevice: String?
        /// The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for ephemeral0 and ephemeral1. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume. NVMe instance store volumes are automatically enumerated and assigned a device name. Including them in your block device mapping has no effect. Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.
        public let virtualName: String?

        public init(deviceName: String? = nil, ebs: EbsBlockDevice? = nil, noDevice: String? = nil, virtualName: String? = nil) {
            self.deviceName = deviceName
            self.ebs = ebs
            self.noDevice = noDevice
            self.virtualName = virtualName
        }

        private enum CodingKeys: String, CodingKey {
            case deviceName = "deviceName"
            case ebs = "ebs"
            case noDevice = "noDevice"
            case virtualName = "virtualName"
        }
    }

    public struct BundleInstanceRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance to bundle. Default: None
        public let instanceId: String?
        /// The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.
        public let storage: Storage?

        public init(dryRun: Bool? = nil, instanceId: String? = nil, storage: Storage? = nil) {
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.storage = storage
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceId = "InstanceId"
            case storage = "Storage"
        }
    }

    public struct BundleInstanceResult: AWSDecodableShape {
        /// Information about the bundle task.
        public let bundleTask: BundleTask?

        public init(bundleTask: BundleTask? = nil) {
            self.bundleTask = bundleTask
        }

        private enum CodingKeys: String, CodingKey {
            case bundleTask = "bundleInstanceTask"
        }
    }

    public struct BundleTask: AWSDecodableShape {
        /// The ID of the bundle task.
        public let bundleId: String?
        /// If the task fails, a description of the error.
        public let bundleTaskError: BundleTaskError?
        /// The ID of the instance associated with this bundle task.
        public let instanceId: String?
        /// The level of task completion, as a percent (for example, 20%).
        public let progress: String?
        /// The time this task started.
        public let startTime: Date?
        /// The state of the task.
        public let state: BundleTaskState?
        /// The Amazon S3 storage locations.
        public let storage: Storage?
        /// The time of the most recent update for the task.
        public let updateTime: Date?

        public init(bundleId: String? = nil, bundleTaskError: BundleTaskError? = nil, instanceId: String? = nil, progress: String? = nil, startTime: Date? = nil, state: BundleTaskState? = nil, storage: Storage? = nil, updateTime: Date? = nil) {
            self.bundleId = bundleId
            self.bundleTaskError = bundleTaskError
            self.instanceId = instanceId
            self.progress = progress
            self.startTime = startTime
            self.state = state
            self.storage = storage
            self.updateTime = updateTime
        }

        private enum CodingKeys: String, CodingKey {
            case bundleId = "bundleId"
            case bundleTaskError = "error"
            case instanceId = "instanceId"
            case progress = "progress"
            case startTime = "startTime"
            case state = "state"
            case storage = "storage"
            case updateTime = "updateTime"
        }
    }

    public struct BundleTaskError: AWSDecodableShape {
        /// The error code.
        public let code: String?
        /// The error message.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct Byoasn: AWSDecodableShape {
        /// A public 2-byte or 4-byte ASN.
        public let asn: String?
        /// An IPAM ID.
        public let ipamId: String?
        /// The provisioning state of the BYOASN.
        public let state: AsnState?
        /// The status message.
        public let statusMessage: String?

        public init(asn: String? = nil, ipamId: String? = nil, state: AsnState? = nil, statusMessage: String? = nil) {
            self.asn = asn
            self.ipamId = ipamId
            self.state = state
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case asn = "asn"
            case ipamId = "ipamId"
            case state = "state"
            case statusMessage = "statusMessage"
        }
    }

    public struct ByoipCidr: AWSDecodableShape {
        public struct _AsnAssociationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The BYOIP CIDR associations with ASNs.
        @OptionalCustomCoding<EC2ArrayCoder<_AsnAssociationsEncoding, AsnAssociation>>
        public var asnAssociations: [AsnAssociation]?
        /// The address range, in CIDR notation.
        public let cidr: String?
        /// The description of the address range.
        public let description: String?
        /// If you have Local Zones enabled, you can choose a network border group for Local Zones when you provision and advertise a BYOIPv4 CIDR. Choose the network border group carefully as the EIP and the Amazon Web Services resource it is associated with must reside in the same network border group. You can provision BYOIP address ranges to and advertise them in the following Local Zone network border groups:   us-east-1-dfw-2   us-west-2-lax-1   us-west-2-phx-2    You cannot provision or advertise BYOIPv6 address ranges in Local Zones at this time.
        public let networkBorderGroup: String?
        /// The state of the address pool.
        public let state: ByoipCidrState?
        /// Upon success, contains the ID of the address pool. Otherwise, contains an error message.
        public let statusMessage: String?

        public init(asnAssociations: [AsnAssociation]? = nil, cidr: String? = nil, description: String? = nil, networkBorderGroup: String? = nil, state: ByoipCidrState? = nil, statusMessage: String? = nil) {
            self.asnAssociations = asnAssociations
            self.cidr = cidr
            self.description = description
            self.networkBorderGroup = networkBorderGroup
            self.state = state
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case asnAssociations = "asnAssociationSet"
            case cidr = "cidr"
            case description = "description"
            case networkBorderGroup = "networkBorderGroup"
            case state = "state"
            case statusMessage = "statusMessage"
        }
    }

    public struct CancelBundleTaskRequest: AWSEncodableShape {
        /// The ID of the bundle task.
        public let bundleId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(bundleId: String? = nil, dryRun: Bool? = nil) {
            self.bundleId = bundleId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case bundleId = "BundleId"
            case dryRun = "dryRun"
        }
    }

    public struct CancelBundleTaskResult: AWSDecodableShape {
        /// Information about the bundle task.
        public let bundleTask: BundleTask?

        public init(bundleTask: BundleTask? = nil) {
            self.bundleTask = bundleTask
        }

        private enum CodingKeys: String, CodingKey {
            case bundleTask = "bundleInstanceTask"
        }
    }

    public struct CancelCapacityReservationFleetError: AWSDecodableShape {
        /// The error code.
        public let code: String?
        /// The error message.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct CancelCapacityReservationFleetsRequest: AWSEncodableShape {
        public struct _CapacityReservationFleetIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the Capacity Reservation Fleets to cancel.
        @OptionalCustomCoding<EC2ArrayCoder<_CapacityReservationFleetIdsEncoding, String>>
        public var capacityReservationFleetIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(capacityReservationFleetIds: [String]? = nil, dryRun: Bool? = nil) {
            self.capacityReservationFleetIds = capacityReservationFleetIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationFleetIds = "CapacityReservationFleetId"
            case dryRun = "DryRun"
        }
    }

    public struct CancelCapacityReservationFleetsResult: AWSDecodableShape {
        public struct _FailedFleetCancellationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SuccessfulFleetCancellationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Capacity Reservation Fleets that could not be cancelled.
        @OptionalCustomCoding<EC2ArrayCoder<_FailedFleetCancellationsEncoding, FailedCapacityReservationFleetCancellationResult>>
        public var failedFleetCancellations: [FailedCapacityReservationFleetCancellationResult]?
        /// Information about the Capacity Reservation Fleets that were successfully cancelled.
        @OptionalCustomCoding<EC2ArrayCoder<_SuccessfulFleetCancellationsEncoding, CapacityReservationFleetCancellationState>>
        public var successfulFleetCancellations: [CapacityReservationFleetCancellationState]?

        public init(failedFleetCancellations: [FailedCapacityReservationFleetCancellationResult]? = nil, successfulFleetCancellations: [CapacityReservationFleetCancellationState]? = nil) {
            self.failedFleetCancellations = failedFleetCancellations
            self.successfulFleetCancellations = successfulFleetCancellations
        }

        private enum CodingKeys: String, CodingKey {
            case failedFleetCancellations = "failedFleetCancellationSet"
            case successfulFleetCancellations = "successfulFleetCancellationSet"
        }
    }

    public struct CancelCapacityReservationRequest: AWSEncodableShape {
        /// The ID of the Capacity Reservation to be cancelled.
        public let capacityReservationId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(capacityReservationId: String? = nil, dryRun: Bool? = nil) {
            self.capacityReservationId = capacityReservationId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationId = "CapacityReservationId"
            case dryRun = "DryRun"
        }
    }

    public struct CancelCapacityReservationResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct CancelConversionRequest: AWSEncodableShape {
        /// The ID of the conversion task.
        public let conversionTaskId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The reason for canceling the conversion task.
        public let reasonMessage: String?

        public init(conversionTaskId: String? = nil, dryRun: Bool? = nil, reasonMessage: String? = nil) {
            self.conversionTaskId = conversionTaskId
            self.dryRun = dryRun
            self.reasonMessage = reasonMessage
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTaskId = "conversionTaskId"
            case dryRun = "dryRun"
            case reasonMessage = "reasonMessage"
        }
    }

    public struct CancelExportTaskRequest: AWSEncodableShape {
        /// The ID of the export task. This is the ID returned by the CreateInstanceExportTask and ExportImage operations.
        public let exportTaskId: String?

        public init(exportTaskId: String? = nil) {
            self.exportTaskId = exportTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case exportTaskId = "exportTaskId"
        }
    }

    public struct CancelImageLaunchPermissionRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI that was shared with your Amazon Web Services account.
        public let imageId: String?

        public init(dryRun: Bool? = nil, imageId: String? = nil) {
            self.dryRun = dryRun
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case imageId = "ImageId"
        }
    }

    public struct CancelImageLaunchPermissionResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct CancelImportTaskRequest: AWSEncodableShape {
        /// The reason for canceling the task.
        public let cancelReason: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the import image or import snapshot task to be canceled.
        public let importTaskId: String?

        public init(cancelReason: String? = nil, dryRun: Bool? = nil, importTaskId: String? = nil) {
            self.cancelReason = cancelReason
            self.dryRun = dryRun
            self.importTaskId = importTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case cancelReason = "CancelReason"
            case dryRun = "DryRun"
            case importTaskId = "ImportTaskId"
        }
    }

    public struct CancelImportTaskResult: AWSDecodableShape {
        /// The ID of the task being canceled.
        public let importTaskId: String?
        /// The current state of the task being canceled.
        public let previousState: String?
        /// The current state of the task being canceled.
        public let state: String?

        public init(importTaskId: String? = nil, previousState: String? = nil, state: String? = nil) {
            self.importTaskId = importTaskId
            self.previousState = previousState
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case importTaskId = "importTaskId"
            case previousState = "previousState"
            case state = "state"
        }
    }

    public struct CancelReservedInstancesListingRequest: AWSEncodableShape {
        /// The ID of the Reserved Instance listing.
        public let reservedInstancesListingId: String?

        public init(reservedInstancesListingId: String? = nil) {
            self.reservedInstancesListingId = reservedInstancesListingId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesListingId = "reservedInstancesListingId"
        }
    }

    public struct CancelReservedInstancesListingResult: AWSDecodableShape {
        public struct _ReservedInstancesListingsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Reserved Instance listing.
        @OptionalCustomCoding<EC2ArrayCoder<_ReservedInstancesListingsEncoding, ReservedInstancesListing>>
        public var reservedInstancesListings: [ReservedInstancesListing]?

        public init(reservedInstancesListings: [ReservedInstancesListing]? = nil) {
            self.reservedInstancesListings = reservedInstancesListings
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesListings = "reservedInstancesListingsSet"
        }
    }

    public struct CancelSpotFleetRequestsError: AWSDecodableShape {
        /// The error code.
        public let code: CancelBatchErrorCode?
        /// The description for the error code.
        public let message: String?

        public init(code: CancelBatchErrorCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct CancelSpotFleetRequestsErrorItem: AWSDecodableShape {
        /// The error.
        public let error: CancelSpotFleetRequestsError?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String?

        public init(error: CancelSpotFleetRequestsError? = nil, spotFleetRequestId: String? = nil) {
            self.error = error
            self.spotFleetRequestId = spotFleetRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case error = "error"
            case spotFleetRequestId = "spotFleetRequestId"
        }
    }

    public struct CancelSpotFleetRequestsRequest: AWSEncodableShape {
        public struct _SpotFleetRequestIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the Spot Fleet requests.
        @OptionalCustomCoding<EC2ArrayCoder<_SpotFleetRequestIdsEncoding, String>>
        public var spotFleetRequestIds: [String]?
        /// Indicates whether to terminate the associated instances when the Spot Fleet request is canceled.  The default is to terminate the instances. To let the instances continue to run after the Spot Fleet request is canceled, specify no-terminate-instances.
        public let terminateInstances: Bool?

        public init(dryRun: Bool? = nil, spotFleetRequestIds: [String]? = nil, terminateInstances: Bool? = nil) {
            self.dryRun = dryRun
            self.spotFleetRequestIds = spotFleetRequestIds
            self.terminateInstances = terminateInstances
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case spotFleetRequestIds = "spotFleetRequestId"
            case terminateInstances = "terminateInstances"
        }
    }

    public struct CancelSpotFleetRequestsResponse: AWSDecodableShape {
        public struct _SuccessfulFleetRequestsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _UnsuccessfulFleetRequestsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Spot Fleet requests that are successfully canceled.
        @OptionalCustomCoding<EC2ArrayCoder<_SuccessfulFleetRequestsEncoding, CancelSpotFleetRequestsSuccessItem>>
        public var successfulFleetRequests: [CancelSpotFleetRequestsSuccessItem]?
        /// Information about the Spot Fleet requests that are not successfully canceled.
        @OptionalCustomCoding<EC2ArrayCoder<_UnsuccessfulFleetRequestsEncoding, CancelSpotFleetRequestsErrorItem>>
        public var unsuccessfulFleetRequests: [CancelSpotFleetRequestsErrorItem]?

        public init(successfulFleetRequests: [CancelSpotFleetRequestsSuccessItem]? = nil, unsuccessfulFleetRequests: [CancelSpotFleetRequestsErrorItem]? = nil) {
            self.successfulFleetRequests = successfulFleetRequests
            self.unsuccessfulFleetRequests = unsuccessfulFleetRequests
        }

        private enum CodingKeys: String, CodingKey {
            case successfulFleetRequests = "successfulFleetRequestSet"
            case unsuccessfulFleetRequests = "unsuccessfulFleetRequestSet"
        }
    }

    public struct CancelSpotFleetRequestsSuccessItem: AWSDecodableShape {
        /// The current state of the Spot Fleet request.
        public let currentSpotFleetRequestState: BatchState?
        /// The previous state of the Spot Fleet request.
        public let previousSpotFleetRequestState: BatchState?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String?

        public init(currentSpotFleetRequestState: BatchState? = nil, previousSpotFleetRequestState: BatchState? = nil, spotFleetRequestId: String? = nil) {
            self.currentSpotFleetRequestState = currentSpotFleetRequestState
            self.previousSpotFleetRequestState = previousSpotFleetRequestState
            self.spotFleetRequestId = spotFleetRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case currentSpotFleetRequestState = "currentSpotFleetRequestState"
            case previousSpotFleetRequestState = "previousSpotFleetRequestState"
            case spotFleetRequestId = "spotFleetRequestId"
        }
    }

    public struct CancelSpotInstanceRequestsRequest: AWSEncodableShape {
        public struct _SpotInstanceRequestIdsEncoding: ArrayCoderProperties { public static let member = "SpotInstanceRequestId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the Spot Instance requests.
        @OptionalCustomCoding<EC2ArrayCoder<_SpotInstanceRequestIdsEncoding, String>>
        public var spotInstanceRequestIds: [String]?

        public init(dryRun: Bool? = nil, spotInstanceRequestIds: [String]? = nil) {
            self.dryRun = dryRun
            self.spotInstanceRequestIds = spotInstanceRequestIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case spotInstanceRequestIds = "SpotInstanceRequestId"
        }
    }

    public struct CancelSpotInstanceRequestsResult: AWSDecodableShape {
        public struct _CancelledSpotInstanceRequestsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Spot Instance requests.
        @OptionalCustomCoding<EC2ArrayCoder<_CancelledSpotInstanceRequestsEncoding, CancelledSpotInstanceRequest>>
        public var cancelledSpotInstanceRequests: [CancelledSpotInstanceRequest]?

        public init(cancelledSpotInstanceRequests: [CancelledSpotInstanceRequest]? = nil) {
            self.cancelledSpotInstanceRequests = cancelledSpotInstanceRequests
        }

        private enum CodingKeys: String, CodingKey {
            case cancelledSpotInstanceRequests = "spotInstanceRequestSet"
        }
    }

    public struct CancelledSpotInstanceRequest: AWSDecodableShape {
        /// The ID of the Spot Instance request.
        public let spotInstanceRequestId: String?
        /// The state of the Spot Instance request.
        public let state: CancelSpotInstanceRequestState?

        public init(spotInstanceRequestId: String? = nil, state: CancelSpotInstanceRequestState? = nil) {
            self.spotInstanceRequestId = spotInstanceRequestId
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case spotInstanceRequestId = "spotInstanceRequestId"
            case state = "state"
        }
    }

    public struct CapacityAllocation: AWSDecodableShape {
        /// The usage type. used indicates that the instance capacity is
        /// 			in use by instances that are running in the Capacity Reservation.
        public let allocationType: AllocationType?
        /// The amount of instance capacity associated with the usage. For example a value of
        /// 			4 indicates that instance capacity for 4 instances is currently in use.
        public let count: Int?

        public init(allocationType: AllocationType? = nil, count: Int? = nil) {
            self.allocationType = allocationType
            self.count = count
        }

        private enum CodingKeys: String, CodingKey {
            case allocationType = "allocationType"
            case count = "count"
        }
    }

    public struct CapacityBlockOffering: AWSDecodableShape {
        /// The Availability Zone of the Capacity Block offering.
        public let availabilityZone: String?
        /// The amount of time of the Capacity Block reservation in hours.
        public let capacityBlockDurationHours: Int?
        /// The ID of the Capacity Block offering.
        public let capacityBlockOfferingId: String?
        /// The currency of the payment for the Capacity Block.
        public let currencyCode: String?
        /// The end date of the Capacity Block offering.
        public let endDate: Date?
        /// The number of instances in the Capacity Block offering.
        public let instanceCount: Int?
        /// The instance type of the Capacity Block offering.
        public let instanceType: String?
        /// The start date of the Capacity Block offering.
        public let startDate: Date?
        /// The tenancy of the Capacity Block.
        public let tenancy: CapacityReservationTenancy?
        /// The total price to be paid up front.
        public let upfrontFee: String?

        public init(availabilityZone: String? = nil, capacityBlockDurationHours: Int? = nil, capacityBlockOfferingId: String? = nil, currencyCode: String? = nil, endDate: Date? = nil, instanceCount: Int? = nil, instanceType: String? = nil, startDate: Date? = nil, tenancy: CapacityReservationTenancy? = nil, upfrontFee: String? = nil) {
            self.availabilityZone = availabilityZone
            self.capacityBlockDurationHours = capacityBlockDurationHours
            self.capacityBlockOfferingId = capacityBlockOfferingId
            self.currencyCode = currencyCode
            self.endDate = endDate
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.startDate = startDate
            self.tenancy = tenancy
            self.upfrontFee = upfrontFee
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case capacityBlockDurationHours = "capacityBlockDurationHours"
            case capacityBlockOfferingId = "capacityBlockOfferingId"
            case currencyCode = "currencyCode"
            case endDate = "endDate"
            case instanceCount = "instanceCount"
            case instanceType = "instanceType"
            case startDate = "startDate"
            case tenancy = "tenancy"
            case upfrontFee = "upfrontFee"
        }
    }

    public struct CapacityReservation: AWSDecodableShape {
        public struct _CapacityAllocationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Availability Zone in which the capacity is reserved.
        public let availabilityZone: String?
        /// The Availability Zone ID of the Capacity Reservation.
        public let availabilityZoneId: String?
        /// The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.
        public let availableInstanceCount: Int?
        /// Information about instance capacity usage.
        @OptionalCustomCoding<EC2ArrayCoder<_CapacityAllocationsEncoding, CapacityAllocation>>
        public var capacityAllocations: [CapacityAllocation]?
        /// The Amazon Resource Name (ARN) of the Capacity Reservation.
        public let capacityReservationArn: String?
        /// The ID of the Capacity Reservation Fleet to which the Capacity Reservation belongs.
        /// 			Only valid for Capacity Reservations that were created by a Capacity Reservation Fleet.
        public let capacityReservationFleetId: String?
        /// The ID of the Capacity Reservation.
        public let capacityReservationId: String?
        /// The date and time at which the Capacity Reservation was created.
        public let createDate: Date?
        /// Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides
        /// 			dedicated throughput to Amazon EBS and an optimized configuration stack to provide
        /// 			optimal I/O performance. This optimization isn't available with all instance types.
        /// 			Additional usage charges apply when using an EBS- optimized instance.
        public let ebsOptimized: Bool?
        /// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity
        /// 			is released and you can no longer launch instances into it. The Capacity Reservation's state changes to
        /// 				expired when it reaches its end date and time.
        public let endDate: Date?
        /// Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end
        /// 			types:    unlimited - The Capacity Reservation remains active until you explicitly cancel it.    limited - The Capacity Reservation expires automatically at a specified date and time.
        public let endDateType: EndDateType?
        ///  Deprecated.
        public let ephemeralStorage: Bool?
        /// Indicates the type of instance launches that the Capacity Reservation accepts. The options
        /// 			include:    open - The Capacity Reservation accepts all instances that have matching attributes (instance type, platform,
        /// 				and Availability Zone). Instances that have matching attributes launch into the Capacity Reservation automatically without specifying
        /// 				any additional parameters.    targeted - The Capacity Reservation only accepts instances that have matching attributes
        /// 					(instance type, platform, and Availability Zone), and explicitly target the
        /// 					Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.
        public let instanceMatchCriteria: InstanceMatchCriteria?
        /// The type of operating system for which the Capacity Reservation reserves capacity.
        public let instancePlatform: CapacityReservationInstancePlatform?
        /// The type of instance for which the Capacity Reservation reserves capacity.
        public let instanceType: String?
        /// The Amazon Resource Name (ARN) of the Outpost on which the Capacity
        /// 	  		Reservation was created.
        public let outpostArn: String?
        /// The ID of the Amazon Web Services account that owns the Capacity Reservation.
        public let ownerId: String?
        /// The Amazon Resource Name (ARN) of the cluster placement group in which
        /// 			the Capacity Reservation was created. For more information, see
        ///
        /// 				Capacity Reservations for cluster placement groups in the
        /// 			Amazon EC2 User Guide.
        public let placementGroupArn: String?
        /// The type of Capacity Reservation.
        public let reservationType: CapacityReservationType?
        /// The date and time at which the Capacity Reservation was started.
        public let startDate: Date?
        /// The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:    active - The Capacity Reservation is active and the capacity is available for your use.    expired - The Capacity Reservation expired automatically at the date and time specified
        /// 					in your request. The reserved capacity is no longer available for your use.    cancelled - The Capacity Reservation was cancelled. The reserved capacity is no
        /// 					longer available for your use.    pending - The Capacity Reservation request was successful but the capacity
        /// 					provisioning is still pending.    failed - The Capacity Reservation request has failed. A request might fail
        /// 					due to invalid request parameters, capacity constraints, or instance limit constraints.
        /// 					Failed requests are retained for 60 minutes.
        public let state: CapacityReservationState?
        /// Any tags assigned to the Capacity Reservation.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:    default - The Capacity Reservation is created on hardware that is shared with other Amazon Web Services accounts.    dedicated - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single Amazon Web Services account.
        public let tenancy: CapacityReservationTenancy?
        /// The total number of instances for which the Capacity Reservation reserves capacity.
        public let totalInstanceCount: Int?

        public init(availabilityZone: String? = nil, availabilityZoneId: String? = nil, availableInstanceCount: Int? = nil, capacityAllocations: [CapacityAllocation]? = nil, capacityReservationArn: String? = nil, capacityReservationFleetId: String? = nil, capacityReservationId: String? = nil, createDate: Date? = nil, ebsOptimized: Bool? = nil, endDate: Date? = nil, endDateType: EndDateType? = nil, ephemeralStorage: Bool? = nil, instanceMatchCriteria: InstanceMatchCriteria? = nil, instancePlatform: CapacityReservationInstancePlatform? = nil, instanceType: String? = nil, outpostArn: String? = nil, ownerId: String? = nil, placementGroupArn: String? = nil, reservationType: CapacityReservationType? = nil, startDate: Date? = nil, state: CapacityReservationState? = nil, tags: [Tag]? = nil, tenancy: CapacityReservationTenancy? = nil, totalInstanceCount: Int? = nil) {
            self.availabilityZone = availabilityZone
            self.availabilityZoneId = availabilityZoneId
            self.availableInstanceCount = availableInstanceCount
            self.capacityAllocations = capacityAllocations
            self.capacityReservationArn = capacityReservationArn
            self.capacityReservationFleetId = capacityReservationFleetId
            self.capacityReservationId = capacityReservationId
            self.createDate = createDate
            self.ebsOptimized = ebsOptimized
            self.endDate = endDate
            self.endDateType = endDateType
            self.ephemeralStorage = ephemeralStorage
            self.instanceMatchCriteria = instanceMatchCriteria
            self.instancePlatform = instancePlatform
            self.instanceType = instanceType
            self.outpostArn = outpostArn
            self.ownerId = ownerId
            self.placementGroupArn = placementGroupArn
            self.reservationType = reservationType
            self.startDate = startDate
            self.state = state
            self.tags = tags
            self.tenancy = tenancy
            self.totalInstanceCount = totalInstanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case availabilityZoneId = "availabilityZoneId"
            case availableInstanceCount = "availableInstanceCount"
            case capacityAllocations = "capacityAllocationSet"
            case capacityReservationArn = "capacityReservationArn"
            case capacityReservationFleetId = "capacityReservationFleetId"
            case capacityReservationId = "capacityReservationId"
            case createDate = "createDate"
            case ebsOptimized = "ebsOptimized"
            case endDate = "endDate"
            case endDateType = "endDateType"
            case ephemeralStorage = "ephemeralStorage"
            case instanceMatchCriteria = "instanceMatchCriteria"
            case instancePlatform = "instancePlatform"
            case instanceType = "instanceType"
            case outpostArn = "outpostArn"
            case ownerId = "ownerId"
            case placementGroupArn = "placementGroupArn"
            case reservationType = "reservationType"
            case startDate = "startDate"
            case state = "state"
            case tags = "tagSet"
            case tenancy = "tenancy"
            case totalInstanceCount = "totalInstanceCount"
        }
    }

    public struct CapacityReservationFleet: AWSDecodableShape {
        public struct _InstanceTypeSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The strategy used by the Capacity Reservation Fleet to determine which of the specified
        /// 			instance types to use. For more information, see For more information, see
        ///
        /// 				Allocation strategy in the Amazon EC2 User Guide.
        public let allocationStrategy: String?
        /// The ARN of the Capacity Reservation Fleet.
        public let capacityReservationFleetArn: String?
        /// The ID of the Capacity Reservation Fleet.
        public let capacityReservationFleetId: String?
        /// The date and time at which the Capacity Reservation Fleet was created.
        public let createTime: Date?
        /// The date and time at which the Capacity Reservation Fleet expires.
        public let endDate: Date?
        /// Indicates the type of instance launches that the Capacity Reservation Fleet accepts. All
        /// 			Capacity Reservations in the Fleet inherit this instance matching criteria. Currently, Capacity Reservation Fleets support open instance matching criteria
        /// 			only. This means that instances that have matching attributes (instance type, platform, and
        /// 			Availability Zone) run in the Capacity Reservations automatically. Instances do not need to
        /// 			explicitly target a Capacity Reservation Fleet to use its reserved capacity.
        public let instanceMatchCriteria: FleetInstanceMatchCriteria?
        /// Information about the instance types for which to reserve the capacity.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceTypeSpecificationsEncoding, FleetCapacityReservation>>
        public var instanceTypeSpecifications: [FleetCapacityReservation]?
        /// The state of the Capacity Reservation Fleet. Possible states include:    submitted - The Capacity Reservation Fleet request has been submitted
        /// 					and Amazon Elastic Compute Cloud is preparing to create the Capacity Reservations.    modifying - The Capacity Reservation Fleet is being modified. The Fleet
        /// 					remains in this state until the modification is complete.    active - The Capacity Reservation Fleet has fulfilled its total target
        /// 					capacity and it is attempting to maintain this capacity. The Fleet remains in this
        /// 					state until it is modified or deleted.    partially_fulfilled - The Capacity Reservation Fleet has partially
        /// 					fulfilled its total target capacity. There is insufficient Amazon EC2 to
        /// 					fulfill the total target capacity. The Fleet is attempting to asynchronously fulfill
        /// 					its total target capacity.    expiring - The Capacity Reservation Fleet has reach its end date and it
        /// 					is in the process of expiring. One or more of its Capacity reservations might still
        /// 					be active.    expired - The Capacity Reservation Fleet has reach its end date. The Fleet
        /// 					and its Capacity Reservations are expired. The Fleet can't create new Capacity
        /// 					Reservations.    cancelling - The Capacity Reservation Fleet is in the process of being
        /// 					cancelled. One or more of its Capacity reservations might still be active.    cancelled - The Capacity Reservation Fleet has been manually cancelled.
        /// 					The Fleet and its Capacity Reservations are cancelled and the Fleet can't create new
        /// 					Capacity Reservations.    failed - The Capacity Reservation Fleet failed to reserve capacity for
        /// 					the specified instance types.
        public let state: CapacityReservationFleetState?
        /// The tags assigned to the Capacity Reservation Fleet.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The tenancy of the Capacity Reservation Fleet. Tenancies include:    default - The Capacity Reservation Fleet is created on hardware that is
        /// 					shared with other Amazon Web Services accounts.    dedicated - The Capacity Reservation Fleet is created on single-tenant
        /// 					hardware that is dedicated to a single Amazon Web Services account.
        public let tenancy: FleetCapacityReservationTenancy?
        /// The capacity units that have been fulfilled.
        public let totalFulfilledCapacity: Double?
        /// The total number of capacity units for which the Capacity Reservation Fleet reserves capacity.
        /// 			For more information, see Total target capacity
        /// 			in the Amazon EC2 User Guide.
        public let totalTargetCapacity: Int?

        public init(allocationStrategy: String? = nil, capacityReservationFleetArn: String? = nil, capacityReservationFleetId: String? = nil, createTime: Date? = nil, endDate: Date? = nil, instanceMatchCriteria: FleetInstanceMatchCriteria? = nil, instanceTypeSpecifications: [FleetCapacityReservation]? = nil, state: CapacityReservationFleetState? = nil, tags: [Tag]? = nil, tenancy: FleetCapacityReservationTenancy? = nil, totalFulfilledCapacity: Double? = nil, totalTargetCapacity: Int? = nil) {
            self.allocationStrategy = allocationStrategy
            self.capacityReservationFleetArn = capacityReservationFleetArn
            self.capacityReservationFleetId = capacityReservationFleetId
            self.createTime = createTime
            self.endDate = endDate
            self.instanceMatchCriteria = instanceMatchCriteria
            self.instanceTypeSpecifications = instanceTypeSpecifications
            self.state = state
            self.tags = tags
            self.tenancy = tenancy
            self.totalFulfilledCapacity = totalFulfilledCapacity
            self.totalTargetCapacity = totalTargetCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case allocationStrategy = "allocationStrategy"
            case capacityReservationFleetArn = "capacityReservationFleetArn"
            case capacityReservationFleetId = "capacityReservationFleetId"
            case createTime = "createTime"
            case endDate = "endDate"
            case instanceMatchCriteria = "instanceMatchCriteria"
            case instanceTypeSpecifications = "instanceTypeSpecificationSet"
            case state = "state"
            case tags = "tagSet"
            case tenancy = "tenancy"
            case totalFulfilledCapacity = "totalFulfilledCapacity"
            case totalTargetCapacity = "totalTargetCapacity"
        }
    }

    public struct CapacityReservationFleetCancellationState: AWSDecodableShape {
        /// The ID of the Capacity Reservation Fleet that was successfully cancelled.
        public let capacityReservationFleetId: String?
        /// The current state of the Capacity Reservation Fleet.
        public let currentFleetState: CapacityReservationFleetState?
        /// The previous state of the Capacity Reservation Fleet.
        public let previousFleetState: CapacityReservationFleetState?

        public init(capacityReservationFleetId: String? = nil, currentFleetState: CapacityReservationFleetState? = nil, previousFleetState: CapacityReservationFleetState? = nil) {
            self.capacityReservationFleetId = capacityReservationFleetId
            self.currentFleetState = currentFleetState
            self.previousFleetState = previousFleetState
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationFleetId = "capacityReservationFleetId"
            case currentFleetState = "currentFleetState"
            case previousFleetState = "previousFleetState"
        }
    }

    public struct CapacityReservationGroup: AWSDecodableShape {
        /// The ARN of the resource group.
        public let groupArn: String?
        /// The ID of the Amazon Web Services account that owns the resource group.
        public let ownerId: String?

        public init(groupArn: String? = nil, ownerId: String? = nil) {
            self.groupArn = groupArn
            self.ownerId = ownerId
        }

        private enum CodingKeys: String, CodingKey {
            case groupArn = "groupArn"
            case ownerId = "ownerId"
        }
    }

    public struct CapacityReservationOptions: AWSDecodableShape {
        /// Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity. If you specify use-capacity-reservations-first, the fleet uses unused Capacity Reservations to fulfill On-Demand capacity up to the target On-Demand capacity. If multiple instance pools have unused Capacity Reservations, the On-Demand allocation strategy (lowest-price or prioritized) is applied. If the number of unused Capacity Reservations is less than the On-Demand target capacity, the remaining On-Demand target capacity is launched according to the On-Demand allocation strategy (lowest-price or prioritized). If you do not specify a value, the fleet fulfils the On-Demand capacity according to the chosen On-Demand allocation strategy.
        public let usageStrategy: FleetCapacityReservationUsageStrategy?

        public init(usageStrategy: FleetCapacityReservationUsageStrategy? = nil) {
            self.usageStrategy = usageStrategy
        }

        private enum CodingKeys: String, CodingKey {
            case usageStrategy = "usageStrategy"
        }
    }

    public struct CapacityReservationOptionsRequest: AWSEncodableShape {
        /// Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity. If you specify use-capacity-reservations-first, the fleet uses unused Capacity Reservations to fulfill On-Demand capacity up to the target On-Demand capacity. If multiple instance pools have unused Capacity Reservations, the On-Demand allocation strategy (lowest-price or prioritized) is applied. If the number of unused Capacity Reservations is less than the On-Demand target capacity, the remaining On-Demand target capacity is launched according to the On-Demand allocation strategy (lowest-price or prioritized). If you do not specify a value, the fleet fulfils the On-Demand capacity according to the chosen On-Demand allocation strategy.
        public let usageStrategy: FleetCapacityReservationUsageStrategy?

        public init(usageStrategy: FleetCapacityReservationUsageStrategy? = nil) {
            self.usageStrategy = usageStrategy
        }

        private enum CodingKeys: String, CodingKey {
            case usageStrategy = "UsageStrategy"
        }
    }

    public struct CapacityReservationSpecification: AWSEncodableShape {
        /// Indicates the instance's Capacity Reservation preferences. Possible preferences include:    open - The instance can run in any open Capacity Reservation that has matching attributes
        /// 				(instance type, platform, Availability Zone).    none - The instance avoids running in a Capacity Reservation even if one is available. The
        /// 					instance runs as an On-Demand Instance.
        public let capacityReservationPreference: CapacityReservationPreference?
        /// Information about the target Capacity Reservation or Capacity Reservation group.
        public let capacityReservationTarget: CapacityReservationTarget?

        public init(capacityReservationPreference: CapacityReservationPreference? = nil, capacityReservationTarget: CapacityReservationTarget? = nil) {
            self.capacityReservationPreference = capacityReservationPreference
            self.capacityReservationTarget = capacityReservationTarget
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationPreference = "CapacityReservationPreference"
            case capacityReservationTarget = "CapacityReservationTarget"
        }
    }

    public struct CapacityReservationSpecificationResponse: AWSDecodableShape {
        /// Describes the instance's Capacity Reservation preferences. Possible preferences include:    open - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).    none - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.
        public let capacityReservationPreference: CapacityReservationPreference?
        /// Information about the targeted Capacity Reservation or Capacity Reservation group.
        public let capacityReservationTarget: CapacityReservationTargetResponse?

        public init(capacityReservationPreference: CapacityReservationPreference? = nil, capacityReservationTarget: CapacityReservationTargetResponse? = nil) {
            self.capacityReservationPreference = capacityReservationPreference
            self.capacityReservationTarget = capacityReservationTarget
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationPreference = "capacityReservationPreference"
            case capacityReservationTarget = "capacityReservationTarget"
        }
    }

    public struct CapacityReservationTarget: AWSEncodableShape {
        /// The ID of the Capacity Reservation in which to run the instance.
        public let capacityReservationId: String?
        /// The ARN of the Capacity Reservation resource group in which to run the instance.
        public let capacityReservationResourceGroupArn: String?

        public init(capacityReservationId: String? = nil, capacityReservationResourceGroupArn: String? = nil) {
            self.capacityReservationId = capacityReservationId
            self.capacityReservationResourceGroupArn = capacityReservationResourceGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationId = "CapacityReservationId"
            case capacityReservationResourceGroupArn = "CapacityReservationResourceGroupArn"
        }
    }

    public struct CapacityReservationTargetResponse: AWSDecodableShape {
        /// The ID of the targeted Capacity Reservation.
        public let capacityReservationId: String?
        /// The ARN of the targeted Capacity Reservation group.
        public let capacityReservationResourceGroupArn: String?

        public init(capacityReservationId: String? = nil, capacityReservationResourceGroupArn: String? = nil) {
            self.capacityReservationId = capacityReservationId
            self.capacityReservationResourceGroupArn = capacityReservationResourceGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationId = "capacityReservationId"
            case capacityReservationResourceGroupArn = "capacityReservationResourceGroupArn"
        }
    }

    public struct CarrierGateway: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the carrier gateway.
        public let carrierGatewayId: String?
        /// The Amazon Web Services account ID of the owner of the carrier gateway.
        public let ownerId: String?
        /// The state of the carrier gateway.
        public let state: CarrierGatewayState?
        /// The tags assigned to the carrier gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VPC associated with the carrier gateway.
        public let vpcId: String?

        public init(carrierGatewayId: String? = nil, ownerId: String? = nil, state: CarrierGatewayState? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.carrierGatewayId = carrierGatewayId
            self.ownerId = ownerId
            self.state = state
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGatewayId = "carrierGatewayId"
            case ownerId = "ownerId"
            case state = "state"
            case tags = "tagSet"
            case vpcId = "vpcId"
        }
    }

    public struct CertificateAuthentication: AWSDecodableShape {
        /// The ARN of the client certificate.
        public let clientRootCertificateChain: String?

        public init(clientRootCertificateChain: String? = nil) {
            self.clientRootCertificateChain = clientRootCertificateChain
        }

        private enum CodingKeys: String, CodingKey {
            case clientRootCertificateChain = "clientRootCertificateChain"
        }
    }

    public struct CertificateAuthenticationRequest: AWSEncodableShape {
        /// The ARN of the client certificate. The certificate must be signed by a certificate
        /// 			authority (CA) and it must be provisioned in Certificate Manager (ACM).
        public let clientRootCertificateChainArn: String?

        public init(clientRootCertificateChainArn: String? = nil) {
            self.clientRootCertificateChainArn = clientRootCertificateChainArn
        }

        private enum CodingKeys: String, CodingKey {
            case clientRootCertificateChainArn = "ClientRootCertificateChainArn"
        }
    }

    public struct CidrAuthorizationContext: AWSEncodableShape {
        /// The plain-text authorization message for the prefix and account.
        public let message: String?
        /// The signed authorization message for the prefix and account.
        public let signature: String?

        public init(message: String? = nil, signature: String? = nil) {
            self.message = message
            self.signature = signature
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case signature = "Signature"
        }
    }

    public struct CidrBlock: AWSDecodableShape {
        /// The IPv4 CIDR block.
        public let cidrBlock: String?

        public init(cidrBlock: String? = nil) {
            self.cidrBlock = cidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlock = "cidrBlock"
        }
    }

    public struct ClassicLinkDnsSupport: AWSDecodableShape {
        /// Indicates whether ClassicLink DNS support is enabled for the VPC.
        public let classicLinkDnsSupported: Bool?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(classicLinkDnsSupported: Bool? = nil, vpcId: String? = nil) {
            self.classicLinkDnsSupported = classicLinkDnsSupported
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case classicLinkDnsSupported = "classicLinkDnsSupported"
            case vpcId = "vpcId"
        }
    }

    public struct ClassicLinkInstance: AWSDecodableShape {
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The security groups.
        @OptionalCustomCoding<EC2ArrayCoder<_GroupsEncoding, GroupIdentifier>>
        public var groups: [GroupIdentifier]?
        /// The ID of the instance.
        public let instanceId: String?
        /// Any tags assigned to the instance.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(groups: [GroupIdentifier]? = nil, instanceId: String? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.groups = groups
            self.instanceId = instanceId
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case groups = "groupSet"
            case instanceId = "instanceId"
            case tags = "tagSet"
            case vpcId = "vpcId"
        }
    }

    public struct ClassicLoadBalancer: AWSEncodableShape & AWSDecodableShape {
        /// The name of the load balancer.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct ClassicLoadBalancersConfig: AWSEncodableShape & AWSDecodableShape {
        public struct _ClassicLoadBalancersEncoding: ArrayCoderProperties { public static let member = "item" }

        /// One or more Classic Load Balancers.
        @OptionalCustomCoding<EC2ArrayCoder<_ClassicLoadBalancersEncoding, ClassicLoadBalancer>>
        public var classicLoadBalancers: [ClassicLoadBalancer]?

        public init(classicLoadBalancers: [ClassicLoadBalancer]? = nil) {
            self.classicLoadBalancers = classicLoadBalancers
        }

        public func validate(name: String) throws {
            try self.validate(self.classicLoadBalancers, name: "classicLoadBalancers", parent: name, max: 5)
            try self.validate(self.classicLoadBalancers, name: "classicLoadBalancers", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case classicLoadBalancers = "classicLoadBalancers"
        }
    }

    public struct ClientCertificateRevocationListStatus: AWSDecodableShape {
        /// The state of the client certificate revocation list.
        public let code: ClientCertificateRevocationListStatusCode?
        /// A message about the status of the client certificate revocation list, if applicable.
        public let message: String?

        public init(code: ClientCertificateRevocationListStatusCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct ClientConnectOptions: AWSEncodableShape {
        /// Indicates whether client connect options are enabled. The default is false (not enabled).
        public let enabled: Bool?
        /// The Amazon Resource Name (ARN) of the Lambda function used for connection authorization.
        public let lambdaFunctionArn: String?

        public init(enabled: Bool? = nil, lambdaFunctionArn: String? = nil) {
            self.enabled = enabled
            self.lambdaFunctionArn = lambdaFunctionArn
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case lambdaFunctionArn = "LambdaFunctionArn"
        }
    }

    public struct ClientConnectResponseOptions: AWSDecodableShape {
        /// Indicates whether client connect options are enabled.
        public let enabled: Bool?
        /// The Amazon Resource Name (ARN) of the Lambda function used for connection authorization.
        public let lambdaFunctionArn: String?
        /// The status of any updates to the client connect options.
        public let status: ClientVpnEndpointAttributeStatus?

        public init(enabled: Bool? = nil, lambdaFunctionArn: String? = nil, status: ClientVpnEndpointAttributeStatus? = nil) {
            self.enabled = enabled
            self.lambdaFunctionArn = lambdaFunctionArn
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "enabled"
            case lambdaFunctionArn = "lambdaFunctionArn"
            case status = "status"
        }
    }

    public struct ClientData: AWSEncodableShape {
        /// A user-defined comment about the disk upload.
        public let comment: String?
        /// The time that the disk upload ends.
        public let uploadEnd: Date?
        /// The size of the uploaded disk image, in GiB.
        public let uploadSize: Double?
        /// The time that the disk upload starts.
        public let uploadStart: Date?

        public init(comment: String? = nil, uploadEnd: Date? = nil, uploadSize: Double? = nil, uploadStart: Date? = nil) {
            self.comment = comment
            self.uploadEnd = uploadEnd
            self.uploadSize = uploadSize
            self.uploadStart = uploadStart
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
            case uploadEnd = "UploadEnd"
            case uploadSize = "UploadSize"
            case uploadStart = "UploadStart"
        }
    }

    public struct ClientLoginBannerOptions: AWSEncodableShape {
        /// Customizable text that will be displayed in a banner on Amazon Web Services provided
        /// 			clients when a VPN session is established. UTF-8 encoded characters only. Maximum of
        /// 			1400 characters.
        public let bannerText: String?
        /// Enable or disable a customizable text banner that will be displayed on
        /// 			Amazon Web Services provided clients when a VPN session is established. Valid values: true | false  Default value: false
        public let enabled: Bool?

        public init(bannerText: String? = nil, enabled: Bool? = nil) {
            self.bannerText = bannerText
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case bannerText = "BannerText"
            case enabled = "Enabled"
        }
    }

    public struct ClientLoginBannerResponseOptions: AWSDecodableShape {
        /// Customizable text that will be displayed in a banner on Amazon Web Services provided
        /// 			clients when a VPN session is established. UTF-8 encoded
        /// 			characters only. Maximum of 1400 characters.
        public let bannerText: String?
        /// Current state of text banner feature. Valid values: true | false
        public let enabled: Bool?

        public init(bannerText: String? = nil, enabled: Bool? = nil) {
            self.bannerText = bannerText
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case bannerText = "bannerText"
            case enabled = "enabled"
        }
    }

    public struct ClientVpnAuthentication: AWSDecodableShape {
        /// Information about the Active Directory, if applicable.
        public let activeDirectory: DirectoryServiceAuthentication?
        /// Information about the IAM SAML identity provider, if applicable.
        public let federatedAuthentication: FederatedAuthentication?
        /// Information about the authentication certificates, if applicable.
        public let mutualAuthentication: CertificateAuthentication?
        /// The authentication type used.
        public let type: ClientVpnAuthenticationType?

        public init(activeDirectory: DirectoryServiceAuthentication? = nil, federatedAuthentication: FederatedAuthentication? = nil, mutualAuthentication: CertificateAuthentication? = nil, type: ClientVpnAuthenticationType? = nil) {
            self.activeDirectory = activeDirectory
            self.federatedAuthentication = federatedAuthentication
            self.mutualAuthentication = mutualAuthentication
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case activeDirectory = "activeDirectory"
            case federatedAuthentication = "federatedAuthentication"
            case mutualAuthentication = "mutualAuthentication"
            case type = "type"
        }
    }

    public struct ClientVpnAuthenticationRequest: AWSEncodableShape {
        /// Information about the Active Directory to be used, if applicable. You must provide this information if Type is directory-service-authentication.
        public let activeDirectory: DirectoryServiceAuthenticationRequest?
        /// Information about the IAM SAML identity provider to be used, if applicable. You must provide this information if Type is federated-authentication.
        public let federatedAuthentication: FederatedAuthenticationRequest?
        /// Information about the authentication certificates to be used, if applicable. You must provide this information if Type is certificate-authentication.
        public let mutualAuthentication: CertificateAuthenticationRequest?
        /// The type of client authentication to be used.
        public let type: ClientVpnAuthenticationType?

        public init(activeDirectory: DirectoryServiceAuthenticationRequest? = nil, federatedAuthentication: FederatedAuthenticationRequest? = nil, mutualAuthentication: CertificateAuthenticationRequest? = nil, type: ClientVpnAuthenticationType? = nil) {
            self.activeDirectory = activeDirectory
            self.federatedAuthentication = federatedAuthentication
            self.mutualAuthentication = mutualAuthentication
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case activeDirectory = "ActiveDirectory"
            case federatedAuthentication = "FederatedAuthentication"
            case mutualAuthentication = "MutualAuthentication"
            case type = "Type"
        }
    }

    public struct ClientVpnAuthorizationRuleStatus: AWSDecodableShape {
        /// The state of the authorization rule.
        public let code: ClientVpnAuthorizationRuleStatusCode?
        /// A message about the status of the authorization rule, if applicable.
        public let message: String?

        public init(code: ClientVpnAuthorizationRuleStatusCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct ClientVpnConnection: AWSDecodableShape {
        public struct _PostureComplianceStatusesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IP address of the client.
        public let clientIp: String?
        /// The ID of the Client VPN endpoint to which the client is connected.
        public let clientVpnEndpointId: String?
        /// The common name associated with the client. This is either the name of the client certificate,
        /// 			or the Active Directory user name.
        public let commonName: String?
        /// The date and time the client connection was terminated.
        public let connectionEndTime: String?
        /// The date and time the client connection was established.
        public let connectionEstablishedTime: String?
        /// The ID of the client connection.
        public let connectionId: String?
        /// The number of bytes received by the client.
        public let egressBytes: String?
        /// The number of packets received by the client.
        public let egressPackets: String?
        /// The number of bytes sent by the client.
        public let ingressBytes: String?
        /// The number of packets sent by the client.
        public let ingressPackets: String?
        /// The statuses returned by the client connect handler for posture compliance, if applicable.
        @OptionalCustomCoding<EC2ArrayCoder<_PostureComplianceStatusesEncoding, String>>
        public var postureComplianceStatuses: [String]?
        /// The current state of the client connection.
        public let status: ClientVpnConnectionStatus?
        /// The current date and time.
        public let timestamp: String?
        /// The username of the client who established the client connection. This information is only provided
        /// 			if Active Directory client authentication is used.
        public let username: String?

        public init(clientIp: String? = nil, clientVpnEndpointId: String? = nil, commonName: String? = nil, connectionEndTime: String? = nil, connectionEstablishedTime: String? = nil, connectionId: String? = nil, egressBytes: String? = nil, egressPackets: String? = nil, ingressBytes: String? = nil, ingressPackets: String? = nil, postureComplianceStatuses: [String]? = nil, status: ClientVpnConnectionStatus? = nil, timestamp: String? = nil, username: String? = nil) {
            self.clientIp = clientIp
            self.clientVpnEndpointId = clientVpnEndpointId
            self.commonName = commonName
            self.connectionEndTime = connectionEndTime
            self.connectionEstablishedTime = connectionEstablishedTime
            self.connectionId = connectionId
            self.egressBytes = egressBytes
            self.egressPackets = egressPackets
            self.ingressBytes = ingressBytes
            self.ingressPackets = ingressPackets
            self.postureComplianceStatuses = postureComplianceStatuses
            self.status = status
            self.timestamp = timestamp
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case clientIp = "clientIp"
            case clientVpnEndpointId = "clientVpnEndpointId"
            case commonName = "commonName"
            case connectionEndTime = "connectionEndTime"
            case connectionEstablishedTime = "connectionEstablishedTime"
            case connectionId = "connectionId"
            case egressBytes = "egressBytes"
            case egressPackets = "egressPackets"
            case ingressBytes = "ingressBytes"
            case ingressPackets = "ingressPackets"
            case postureComplianceStatuses = "postureComplianceStatusSet"
            case status = "status"
            case timestamp = "timestamp"
            case username = "username"
        }
    }

    public struct ClientVpnConnectionStatus: AWSDecodableShape {
        /// The state of the client connection.
        public let code: ClientVpnConnectionStatusCode?
        /// A message about the status of the client connection, if applicable.
        public let message: String?

        public init(code: ClientVpnConnectionStatusCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct ClientVpnEndpoint: AWSDecodableShape {
        public struct _AssociatedTargetNetworksEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _AuthenticationOptionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _DnsServersEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the associated target networks. A target network is a subnet in a VPC.
        @OptionalCustomCoding<EC2ArrayCoder<_AssociatedTargetNetworksEncoding, AssociatedTargetNetwork>>
        public var associatedTargetNetworks: [AssociatedTargetNetwork]?
        /// Information about the authentication method used by the Client VPN endpoint.
        @OptionalCustomCoding<EC2ArrayCoder<_AuthenticationOptionsEncoding, ClientVpnAuthentication>>
        public var authenticationOptions: [ClientVpnAuthentication]?
        /// The IPv4 address range, in CIDR notation, from which client IP addresses are assigned.
        public let clientCidrBlock: String?
        /// The options for managing connection authorization for new client connections.
        public let clientConnectOptions: ClientConnectResponseOptions?
        /// Options for enabling a customizable text banner that will be displayed on Amazon Web Services provided clients when a VPN session is
        /// 			established.
        public let clientLoginBannerOptions: ClientLoginBannerResponseOptions?
        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String?
        /// Information about the client connection logging options for the Client VPN endpoint.
        public let connectionLogOptions: ConnectionLogResponseOptions?
        /// The date and time the Client VPN endpoint was created.
        public let creationTime: String?
        /// The date and time the Client VPN endpoint was deleted, if applicable.
        public let deletionTime: String?
        /// A brief description of the endpoint.
        public let description: String?
        /// The DNS name to be used by clients when connecting to the Client VPN endpoint.
        public let dnsName: String?
        /// Information about the DNS servers to be used for DNS resolution.
        @OptionalCustomCoding<EC2ArrayCoder<_DnsServersEncoding, String>>
        public var dnsServers: [String]?
        /// The IDs of the security groups for the target network.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?
        /// The URL of the self-service portal.
        public let selfServicePortalUrl: String?
        /// The ARN of the server certificate.
        public let serverCertificateArn: String?
        /// The maximum VPN session duration time in hours. Valid values: 8 | 10 | 12 | 24  Default value: 24
        public let sessionTimeoutHours: Int?
        /// Indicates whether split-tunnel is enabled in the Client VPN endpoint. For information about split-tunnel VPN endpoints, see Split-Tunnel Client VPN endpoint
        /// 			in the Client VPN Administrator Guide.
        public let splitTunnel: Bool?
        /// The current state of the Client VPN endpoint.
        public let status: ClientVpnEndpointStatus?
        /// Any tags assigned to the Client VPN endpoint.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The transport protocol used by the Client VPN endpoint.
        public let transportProtocol: TransportProtocol?
        /// The ID of the VPC.
        public let vpcId: String?
        /// The port number for the  Client VPN endpoint.
        public let vpnPort: Int?
        /// The protocol used by the VPN session.
        public let vpnProtocol: VpnProtocol?

        public init(authenticationOptions: [ClientVpnAuthentication]? = nil, clientCidrBlock: String? = nil, clientConnectOptions: ClientConnectResponseOptions? = nil, clientLoginBannerOptions: ClientLoginBannerResponseOptions? = nil, clientVpnEndpointId: String? = nil, connectionLogOptions: ConnectionLogResponseOptions? = nil, creationTime: String? = nil, deletionTime: String? = nil, description: String? = nil, dnsName: String? = nil, dnsServers: [String]? = nil, securityGroupIds: [String]? = nil, selfServicePortalUrl: String? = nil, serverCertificateArn: String? = nil, sessionTimeoutHours: Int? = nil, splitTunnel: Bool? = nil, status: ClientVpnEndpointStatus? = nil, tags: [Tag]? = nil, transportProtocol: TransportProtocol? = nil, vpcId: String? = nil, vpnPort: Int? = nil, vpnProtocol: VpnProtocol? = nil) {
            self.associatedTargetNetworks = nil
            self.authenticationOptions = authenticationOptions
            self.clientCidrBlock = clientCidrBlock
            self.clientConnectOptions = clientConnectOptions
            self.clientLoginBannerOptions = clientLoginBannerOptions
            self.clientVpnEndpointId = clientVpnEndpointId
            self.connectionLogOptions = connectionLogOptions
            self.creationTime = creationTime
            self.deletionTime = deletionTime
            self.description = description
            self.dnsName = dnsName
            self.dnsServers = dnsServers
            self.securityGroupIds = securityGroupIds
            self.selfServicePortalUrl = selfServicePortalUrl
            self.serverCertificateArn = serverCertificateArn
            self.sessionTimeoutHours = sessionTimeoutHours
            self.splitTunnel = splitTunnel
            self.status = status
            self.tags = tags
            self.transportProtocol = transportProtocol
            self.vpcId = vpcId
            self.vpnPort = vpnPort
            self.vpnProtocol = vpnProtocol
        }

        @available(*, deprecated, message: "Members associatedTargetNetworks have been deprecated")
        public init(associatedTargetNetworks: [AssociatedTargetNetwork]? = nil, authenticationOptions: [ClientVpnAuthentication]? = nil, clientCidrBlock: String? = nil, clientConnectOptions: ClientConnectResponseOptions? = nil, clientLoginBannerOptions: ClientLoginBannerResponseOptions? = nil, clientVpnEndpointId: String? = nil, connectionLogOptions: ConnectionLogResponseOptions? = nil, creationTime: String? = nil, deletionTime: String? = nil, description: String? = nil, dnsName: String? = nil, dnsServers: [String]? = nil, securityGroupIds: [String]? = nil, selfServicePortalUrl: String? = nil, serverCertificateArn: String? = nil, sessionTimeoutHours: Int? = nil, splitTunnel: Bool? = nil, status: ClientVpnEndpointStatus? = nil, tags: [Tag]? = nil, transportProtocol: TransportProtocol? = nil, vpcId: String? = nil, vpnPort: Int? = nil, vpnProtocol: VpnProtocol? = nil) {
            self.associatedTargetNetworks = associatedTargetNetworks
            self.authenticationOptions = authenticationOptions
            self.clientCidrBlock = clientCidrBlock
            self.clientConnectOptions = clientConnectOptions
            self.clientLoginBannerOptions = clientLoginBannerOptions
            self.clientVpnEndpointId = clientVpnEndpointId
            self.connectionLogOptions = connectionLogOptions
            self.creationTime = creationTime
            self.deletionTime = deletionTime
            self.description = description
            self.dnsName = dnsName
            self.dnsServers = dnsServers
            self.securityGroupIds = securityGroupIds
            self.selfServicePortalUrl = selfServicePortalUrl
            self.serverCertificateArn = serverCertificateArn
            self.sessionTimeoutHours = sessionTimeoutHours
            self.splitTunnel = splitTunnel
            self.status = status
            self.tags = tags
            self.transportProtocol = transportProtocol
            self.vpcId = vpcId
            self.vpnPort = vpnPort
            self.vpnProtocol = vpnProtocol
        }

        private enum CodingKeys: String, CodingKey {
            case associatedTargetNetworks = "associatedTargetNetwork"
            case authenticationOptions = "authenticationOptions"
            case clientCidrBlock = "clientCidrBlock"
            case clientConnectOptions = "clientConnectOptions"
            case clientLoginBannerOptions = "clientLoginBannerOptions"
            case clientVpnEndpointId = "clientVpnEndpointId"
            case connectionLogOptions = "connectionLogOptions"
            case creationTime = "creationTime"
            case deletionTime = "deletionTime"
            case description = "description"
            case dnsName = "dnsName"
            case dnsServers = "dnsServer"
            case securityGroupIds = "securityGroupIdSet"
            case selfServicePortalUrl = "selfServicePortalUrl"
            case serverCertificateArn = "serverCertificateArn"
            case sessionTimeoutHours = "sessionTimeoutHours"
            case splitTunnel = "splitTunnel"
            case status = "status"
            case tags = "tagSet"
            case transportProtocol = "transportProtocol"
            case vpcId = "vpcId"
            case vpnPort = "vpnPort"
            case vpnProtocol = "vpnProtocol"
        }
    }

    public struct ClientVpnEndpointAttributeStatus: AWSDecodableShape {
        /// The status code.
        public let code: ClientVpnEndpointAttributeStatusCode?
        /// The status message.
        public let message: String?

        public init(code: ClientVpnEndpointAttributeStatusCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct ClientVpnEndpointStatus: AWSDecodableShape {
        /// The state of the Client VPN endpoint. Possible states include:    pending-associate - The Client VPN endpoint has been created but no target networks
        /// 					have been associated. The Client VPN endpoint cannot accept connections.    available - The Client VPN endpoint has been created and a target network has been
        /// 					associated. The Client VPN endpoint can accept connections.    deleting - The Client VPN endpoint is being deleted. The Client VPN endpoint cannot accept
        /// 					connections.    deleted - The Client VPN endpoint has been deleted. The Client VPN endpoint cannot accept
        /// 					connections.
        public let code: ClientVpnEndpointStatusCode?
        /// A message about the status of the Client VPN endpoint.
        public let message: String?

        public init(code: ClientVpnEndpointStatusCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct ClientVpnRoute: AWSDecodableShape {
        /// The ID of the Client VPN endpoint with which the route is associated.
        public let clientVpnEndpointId: String?
        /// A brief description of the route.
        public let description: String?
        /// The IPv4 address range, in CIDR notation, of the route destination.
        public let destinationCidr: String?
        /// Indicates how the route was associated with the Client VPN endpoint.
        /// 			associate indicates that the route was automatically added when the target network
        /// 			was associated with the Client VPN endpoint. add-route indicates that the route
        /// 			was manually added using the CreateClientVpnRoute action.
        public let origin: String?
        /// The current state of the route.
        public let status: ClientVpnRouteStatus?
        /// The ID of the subnet through which traffic is routed.
        public let targetSubnet: String?
        /// The route type.
        public let type: String?

        public init(clientVpnEndpointId: String? = nil, description: String? = nil, destinationCidr: String? = nil, origin: String? = nil, status: ClientVpnRouteStatus? = nil, targetSubnet: String? = nil, type: String? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.description = description
            self.destinationCidr = destinationCidr
            self.origin = origin
            self.status = status
            self.targetSubnet = targetSubnet
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "clientVpnEndpointId"
            case description = "description"
            case destinationCidr = "destinationCidr"
            case origin = "origin"
            case status = "status"
            case targetSubnet = "targetSubnet"
            case type = "type"
        }
    }

    public struct ClientVpnRouteStatus: AWSDecodableShape {
        /// The state of the Client VPN endpoint route.
        public let code: ClientVpnRouteStatusCode?
        /// A message about the status of the Client VPN endpoint route, if applicable.
        public let message: String?

        public init(code: ClientVpnRouteStatusCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct CloudWatchLogOptions: AWSDecodableShape {
        /// Status of VPN tunnel logging feature. Default value is False. Valid values: True | False
        public let logEnabled: Bool?
        /// The Amazon Resource Name (ARN) of the CloudWatch log group to send logs to.
        public let logGroupArn: String?
        /// Configured log format. Default format is json. Valid values: json | text
        public let logOutputFormat: String?

        public init(logEnabled: Bool? = nil, logGroupArn: String? = nil, logOutputFormat: String? = nil) {
            self.logEnabled = logEnabled
            self.logGroupArn = logGroupArn
            self.logOutputFormat = logOutputFormat
        }

        private enum CodingKeys: String, CodingKey {
            case logEnabled = "logEnabled"
            case logGroupArn = "logGroupArn"
            case logOutputFormat = "logOutputFormat"
        }
    }

    public struct CloudWatchLogOptionsSpecification: AWSEncodableShape {
        /// Enable or disable VPN tunnel logging feature. Default value is False. Valid values: True | False
        public let logEnabled: Bool?
        /// The Amazon Resource Name (ARN) of the CloudWatch log group to send logs to.
        public let logGroupArn: String?
        /// Set log format. Default format is json. Valid values: json | text
        public let logOutputFormat: String?

        public init(logEnabled: Bool? = nil, logGroupArn: String? = nil, logOutputFormat: String? = nil) {
            self.logEnabled = logEnabled
            self.logGroupArn = logGroupArn
            self.logOutputFormat = logOutputFormat
        }

        private enum CodingKeys: String, CodingKey {
            case logEnabled = "LogEnabled"
            case logGroupArn = "LogGroupArn"
            case logOutputFormat = "LogOutputFormat"
        }
    }

    public struct CoipAddressUsage: AWSDecodableShape {
        /// The allocation ID of the address.
        public let allocationId: String?
        /// The Amazon Web Services account ID.
        public let awsAccountId: String?
        /// The Amazon Web Services service.
        public let awsService: String?
        /// The customer-owned IP address.
        public let coIp: String?

        public init(allocationId: String? = nil, awsAccountId: String? = nil, awsService: String? = nil, coIp: String? = nil) {
            self.allocationId = allocationId
            self.awsAccountId = awsAccountId
            self.awsService = awsService
            self.coIp = coIp
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "allocationId"
            case awsAccountId = "awsAccountId"
            case awsService = "awsService"
            case coIp = "coIp"
        }
    }

    public struct CoipCidr: AWSDecodableShape {
        ///  An address range in a customer-owned IP address space.
        public let cidr: String?
        ///  The ID of the address pool.
        public let coipPoolId: String?
        ///  The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?

        public init(cidr: String? = nil, coipPoolId: String? = nil, localGatewayRouteTableId: String? = nil) {
            self.cidr = cidr
            self.coipPoolId = coipPoolId
            self.localGatewayRouteTableId = localGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "cidr"
            case coipPoolId = "coipPoolId"
            case localGatewayRouteTableId = "localGatewayRouteTableId"
        }
    }

    public struct CoipPool: AWSDecodableShape {
        public struct _PoolCidrsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?
        /// The ARN of the address pool.
        public let poolArn: String?
        /// The address ranges of the address pool.
        @OptionalCustomCoding<EC2ArrayCoder<_PoolCidrsEncoding, String>>
        public var poolCidrs: [String]?
        /// The ID of the address pool.
        public let poolId: String?
        /// The tags.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(localGatewayRouteTableId: String? = nil, poolArn: String? = nil, poolCidrs: [String]? = nil, poolId: String? = nil, tags: [Tag]? = nil) {
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.poolArn = poolArn
            self.poolCidrs = poolCidrs
            self.poolId = poolId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayRouteTableId = "localGatewayRouteTableId"
            case poolArn = "poolArn"
            case poolCidrs = "poolCidrSet"
            case poolId = "poolId"
            case tags = "tagSet"
        }
    }

    public struct ConfirmProductInstanceRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String?
        /// The product code. This must be a product code that you own.
        public let productCode: String?

        public init(dryRun: Bool? = nil, instanceId: String? = nil, productCode: String? = nil) {
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.productCode = productCode
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceId = "InstanceId"
            case productCode = "ProductCode"
        }
    }

    public struct ConfirmProductInstanceResult: AWSDecodableShape {
        /// The Amazon Web Services account ID of the instance owner. This is only present if the product code is attached to the instance.
        public let ownerId: String?
        /// The return value of the request. Returns true if the specified product code is owned by the requester and associated with the specified instance.
        public let `return`: Bool?

        public init(ownerId: String? = nil, return: Bool? = nil) {
            self.ownerId = ownerId
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case ownerId = "ownerId"
            case `return` = "return"
        }
    }

    public struct ConnectionLogOptions: AWSEncodableShape {
        /// The name of the CloudWatch Logs log group. Required if connection logging is enabled.
        public let cloudwatchLogGroup: String?
        /// The name of the CloudWatch Logs log stream to which the connection data is published.
        public let cloudwatchLogStream: String?
        /// Indicates whether connection logging is enabled.
        public let enabled: Bool?

        public init(cloudwatchLogGroup: String? = nil, cloudwatchLogStream: String? = nil, enabled: Bool? = nil) {
            self.cloudwatchLogGroup = cloudwatchLogGroup
            self.cloudwatchLogStream = cloudwatchLogStream
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case cloudwatchLogGroup = "CloudwatchLogGroup"
            case cloudwatchLogStream = "CloudwatchLogStream"
            case enabled = "Enabled"
        }
    }

    public struct ConnectionLogResponseOptions: AWSDecodableShape {
        /// The name of the Amazon CloudWatch Logs log group to which connection logging data is published.
        public let cloudwatchLogGroup: String?
        /// The name of the Amazon CloudWatch Logs log stream to which connection logging data is published.
        public let cloudwatchLogStream: String?
        /// Indicates whether client connection logging is enabled for the Client VPN endpoint.
        public let enabled: Bool?

        public init(cloudwatchLogGroup: String? = nil, cloudwatchLogStream: String? = nil, enabled: Bool? = nil) {
            self.cloudwatchLogGroup = cloudwatchLogGroup
            self.cloudwatchLogStream = cloudwatchLogStream
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case cloudwatchLogGroup = "CloudwatchLogGroup"
            case cloudwatchLogStream = "CloudwatchLogStream"
            case enabled = "Enabled"
        }
    }

    public struct ConnectionNotification: AWSDecodableShape {
        public struct _ConnectionEventsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The events for the notification. Valid values are Accept, Connect, Delete, and Reject.
        @OptionalCustomCoding<EC2ArrayCoder<_ConnectionEventsEncoding, String>>
        public var connectionEvents: [String]?
        /// The ARN of the SNS topic for the notification.
        public let connectionNotificationArn: String?
        /// The ID of the notification.
        public let connectionNotificationId: String?
        /// The state of the notification.
        public let connectionNotificationState: ConnectionNotificationState?
        /// The type of notification.
        public let connectionNotificationType: ConnectionNotificationType?
        /// The ID of the endpoint service.
        public let serviceId: String?
        /// The ID of the VPC endpoint.
        public let vpcEndpointId: String?

        public init(connectionEvents: [String]? = nil, connectionNotificationArn: String? = nil, connectionNotificationId: String? = nil, connectionNotificationState: ConnectionNotificationState? = nil, connectionNotificationType: ConnectionNotificationType? = nil, serviceId: String? = nil, vpcEndpointId: String? = nil) {
            self.connectionEvents = connectionEvents
            self.connectionNotificationArn = connectionNotificationArn
            self.connectionNotificationId = connectionNotificationId
            self.connectionNotificationState = connectionNotificationState
            self.connectionNotificationType = connectionNotificationType
            self.serviceId = serviceId
            self.vpcEndpointId = vpcEndpointId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionEvents = "connectionEvents"
            case connectionNotificationArn = "connectionNotificationArn"
            case connectionNotificationId = "connectionNotificationId"
            case connectionNotificationState = "connectionNotificationState"
            case connectionNotificationType = "connectionNotificationType"
            case serviceId = "serviceId"
            case vpcEndpointId = "vpcEndpointId"
        }
    }

    public struct ConnectionTrackingConfiguration: AWSDecodableShape {
        /// Timeout (in seconds) for idle TCP
        /// 						connections in an established state. Min: 60 seconds. Max: 432000 seconds (5
        /// 						days). Default: 432000 seconds. Recommended: Less than 432000 seconds.
        public let tcpEstablishedTimeout: Int?
        /// Timeout (in seconds) for idle UDP
        /// 						flows classified as streams which have seen more than one request-response
        /// 						transaction. Min: 60 seconds. Max: 180 seconds (3 minutes). Default: 180
        /// 						seconds.
        public let udpStreamTimeout: Int?
        /// Timeout (in seconds) for idle UDP flows that
        /// 						have seen traffic only in a single direction or a single request-response
        /// 						transaction. Min: 30 seconds. Max: 60 seconds. Default: 30 seconds.
        public let udpTimeout: Int?

        public init(tcpEstablishedTimeout: Int? = nil, udpStreamTimeout: Int? = nil, udpTimeout: Int? = nil) {
            self.tcpEstablishedTimeout = tcpEstablishedTimeout
            self.udpStreamTimeout = udpStreamTimeout
            self.udpTimeout = udpTimeout
        }

        private enum CodingKeys: String, CodingKey {
            case tcpEstablishedTimeout = "tcpEstablishedTimeout"
            case udpStreamTimeout = "udpStreamTimeout"
            case udpTimeout = "udpTimeout"
        }
    }

    public struct ConnectionTrackingSpecification: AWSDecodableShape {
        /// Timeout (in seconds) for idle TCP
        /// 						connections in an established state. Min: 60 seconds. Max: 432000 seconds (5
        /// 						days). Default: 432000 seconds. Recommended: Less than 432000 seconds.
        public let tcpEstablishedTimeout: Int?
        /// Timeout (in seconds) for idle UDP
        /// 						flows classified as streams which have seen more than one request-response
        /// 						transaction. Min: 60 seconds. Max: 180 seconds (3 minutes). Default: 180
        /// 						seconds.
        public let udpStreamTimeout: Int?
        /// Timeout (in seconds) for idle UDP flows that
        /// 						have seen traffic only in a single direction or a single request-response
        /// 						transaction. Min: 30 seconds. Max: 60 seconds. Default: 30 seconds.
        public let udpTimeout: Int?

        public init(tcpEstablishedTimeout: Int? = nil, udpStreamTimeout: Int? = nil, udpTimeout: Int? = nil) {
            self.tcpEstablishedTimeout = tcpEstablishedTimeout
            self.udpStreamTimeout = udpStreamTimeout
            self.udpTimeout = udpTimeout
        }

        private enum CodingKeys: String, CodingKey {
            case tcpEstablishedTimeout = "tcpEstablishedTimeout"
            case udpStreamTimeout = "udpStreamTimeout"
            case udpTimeout = "udpTimeout"
        }
    }

    public struct ConnectionTrackingSpecificationRequest: AWSEncodableShape & AWSDecodableShape {
        /// Timeout (in seconds) for idle TCP
        /// 						connections in an established state. Min: 60 seconds. Max: 432000 seconds (5
        /// 						days). Default: 432000 seconds. Recommended: Less than 432000 seconds.
        public let tcpEstablishedTimeout: Int?
        /// Timeout (in seconds) for idle UDP
        /// 						flows classified as streams which have seen more than one request-response
        /// 						transaction. Min: 60 seconds. Max: 180 seconds (3 minutes). Default: 180
        /// 						seconds.
        public let udpStreamTimeout: Int?
        /// Timeout (in seconds) for idle UDP flows that
        /// 						have seen traffic only in a single direction or a single request-response
        /// 						transaction. Min: 30 seconds. Max: 60 seconds. Default: 30 seconds.
        public let udpTimeout: Int?

        public init(tcpEstablishedTimeout: Int? = nil, udpStreamTimeout: Int? = nil, udpTimeout: Int? = nil) {
            self.tcpEstablishedTimeout = tcpEstablishedTimeout
            self.udpStreamTimeout = udpStreamTimeout
            self.udpTimeout = udpTimeout
        }

        private enum CodingKeys: String, CodingKey {
            case tcpEstablishedTimeout = "TcpEstablishedTimeout"
            case udpStreamTimeout = "UdpStreamTimeout"
            case udpTimeout = "UdpTimeout"
        }
    }

    public struct ConnectionTrackingSpecificationResponse: AWSDecodableShape {
        /// Timeout (in seconds) for idle TCP
        /// 						connections in an established state. Min: 60 seconds. Max: 432000 seconds (5
        /// 						days). Default: 432000 seconds. Recommended: Less than 432000 seconds.
        public let tcpEstablishedTimeout: Int?
        /// Timeout (in seconds) for idle UDP
        /// 						flows classified as streams which have seen more than one request-response
        /// 						transaction. Min: 60 seconds. Max: 180 seconds (3 minutes). Default: 180
        /// 						seconds.
        public let udpStreamTimeout: Int?
        /// Timeout (in seconds) for idle UDP flows that
        /// 						have seen traffic only in a single direction or a single request-response
        /// 						transaction. Min: 30 seconds. Max: 60 seconds. Default: 30 seconds.
        public let udpTimeout: Int?

        public init(tcpEstablishedTimeout: Int? = nil, udpStreamTimeout: Int? = nil, udpTimeout: Int? = nil) {
            self.tcpEstablishedTimeout = tcpEstablishedTimeout
            self.udpStreamTimeout = udpStreamTimeout
            self.udpTimeout = udpTimeout
        }

        private enum CodingKeys: String, CodingKey {
            case tcpEstablishedTimeout = "tcpEstablishedTimeout"
            case udpStreamTimeout = "udpStreamTimeout"
            case udpTimeout = "udpTimeout"
        }
    }

    public struct ConversionTask: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the conversion task.
        public let conversionTaskId: String?
        /// The time when the task expires. If the upload isn't complete before the expiration time, we automatically cancel the task.
        public let expirationTime: String?
        /// If the task is for importing an instance, this contains information about the import instance task.
        public let importInstance: ImportInstanceTaskDetails?
        /// If the task is for importing a volume, this contains information about the import volume task.
        public let importVolume: ImportVolumeTaskDetails?
        /// The state of the conversion task.
        public let state: ConversionTaskState?
        /// The status message related to the conversion task.
        public let statusMessage: String?
        /// Any tags assigned to the task.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(conversionTaskId: String? = nil, expirationTime: String? = nil, importInstance: ImportInstanceTaskDetails? = nil, importVolume: ImportVolumeTaskDetails? = nil, state: ConversionTaskState? = nil, statusMessage: String? = nil, tags: [Tag]? = nil) {
            self.conversionTaskId = conversionTaskId
            self.expirationTime = expirationTime
            self.importInstance = importInstance
            self.importVolume = importVolume
            self.state = state
            self.statusMessage = statusMessage
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTaskId = "conversionTaskId"
            case expirationTime = "expirationTime"
            case importInstance = "importInstance"
            case importVolume = "importVolume"
            case state = "state"
            case statusMessage = "statusMessage"
            case tags = "tagSet"
        }
    }

    public struct CopyFpgaImageRequest: AWSEncodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.  For more information, see Ensuring idempotency.
        public let clientToken: String?
        /// The description for the new AFI.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name for the new AFI. The default is the name of the source AFI.
        public let name: String?
        /// The ID of the source AFI.
        public let sourceFpgaImageId: String?
        /// The Region that contains the source AFI.
        public let sourceRegion: String?

        public init(clientToken: String? = nil, description: String? = nil, dryRun: Bool? = nil, name: String? = nil, sourceFpgaImageId: String? = nil, sourceRegion: String? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.name = name
            self.sourceFpgaImageId = sourceFpgaImageId
            self.sourceRegion = sourceRegion
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "DryRun"
            case name = "Name"
            case sourceFpgaImageId = "SourceFpgaImageId"
            case sourceRegion = "SourceRegion"
        }
    }

    public struct CopyFpgaImageResult: AWSDecodableShape {
        /// The ID of the new AFI.
        public let fpgaImageId: String?

        public init(fpgaImageId: String? = nil) {
            self.fpgaImageId = fpgaImageId
        }

        private enum CodingKeys: String, CodingKey {
            case fpgaImageId = "fpgaImageId"
        }
    }

    public struct CopyImageRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see Ensuring idempotency  in the Amazon EC2 API Reference.
        public let clientToken: String?
        /// Indicates whether to include your user-defined AMI tags when copying the AMI. The following tags will not be copied:   System tags (prefixed with aws:)   For public and shared AMIs, user-defined tags that are attached by other Amazon Web Services  accounts   Default: Your user-defined AMI tags are not copied.
        public let copyImageTags: Bool?
        /// A description for the new AMI in the destination Region.
        public let description: String?
        /// The Amazon Resource Name (ARN) of the Outpost to which to copy the AMI. Only  		specify this parameter when copying an AMI from an Amazon Web Services Region to an Outpost.  		The AMI must be in the Region of the destination Outpost. You cannot copy an  		AMI from an Outpost to a Region, from one Outpost to another, or within the same  		Outpost. For more information, see Copy AMIs from an Amazon Web Services Region to an Outpost in the Amazon EBS User Guide.
        public let destinationOutpostArn: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specifies whether the destination snapshots of the copied image should be encrypted. You can encrypt a copy of an unencrypted snapshot, but you cannot create an unencrypted copy of an encrypted snapshot. The default KMS key for Amazon EBS is used unless you specify a non-default Key Management Service (KMS) KMS key using KmsKeyId. For more information, see Amazon EBS encryption in the Amazon EBS User Guide.
        public let encrypted: Bool?
        /// The identifier of the symmetric Key Management Service (KMS) KMS key to use when creating 		encrypted volumes. If this parameter is not specified, your Amazon Web Services managed KMS key for Amazon EBS is used.  		If you specify a KMS key, you must also set the encrypted state to true. You can specify a KMS key using any of the following:   Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.   Key alias. For example, alias/ExampleAlias.   Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.   Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.   Amazon Web Services authenticates the KMS key asynchronously. Therefore, if you specify an identifier that is not valid, the action can appear to complete, but eventually fails. The specified KMS key must exist in the destination Region. Amazon EBS does not support asymmetric KMS keys.
        public let kmsKeyId: String?
        /// The name of the new AMI in the destination Region.
        public let name: String?
        /// The ID of the AMI to copy.
        public let sourceImageId: String?
        /// The name of the Region that contains the AMI to copy.
        public let sourceRegion: String?
        /// The tags to apply to the new AMI and new snapshots. You can tag the AMI, the snapshots, or both.   To tag the new AMI, the value for ResourceType must be image.   To tag the new snapshots, the value for ResourceType must be snapshot. The same tag is applied to all the new snapshots.   If you specify other values for ResourceType, the request fails. To tag an AMI or snapshot after it has been created, see CreateTags.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = nil, copyImageTags: Bool? = nil, description: String? = nil, destinationOutpostArn: String? = nil, dryRun: Bool? = nil, encrypted: Bool? = nil, kmsKeyId: String? = nil, name: String? = nil, sourceImageId: String? = nil, sourceRegion: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.copyImageTags = copyImageTags
            self.description = description
            self.destinationOutpostArn = destinationOutpostArn
            self.dryRun = dryRun
            self.encrypted = encrypted
            self.kmsKeyId = kmsKeyId
            self.name = name
            self.sourceImageId = sourceImageId
            self.sourceRegion = sourceRegion
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case copyImageTags = "CopyImageTags"
            case description = "Description"
            case destinationOutpostArn = "DestinationOutpostArn"
            case dryRun = "dryRun"
            case encrypted = "encrypted"
            case kmsKeyId = "kmsKeyId"
            case name = "Name"
            case sourceImageId = "SourceImageId"
            case sourceRegion = "SourceRegion"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CopyImageResult: AWSDecodableShape {
        /// The ID of the new AMI.
        public let imageId: String?

        public init(imageId: String? = nil) {
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "imageId"
        }
    }

    public struct CopySnapshotRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description for the EBS snapshot.
        public let description: String?
        /// The Amazon Resource Name (ARN) of the Outpost to which to copy the snapshot. Only
        /// 		specify this parameter when copying a snapshot from an Amazon Web Services Region to an Outpost.
        /// 		The snapshot must be in the Region for the destination Outpost. You cannot copy a
        /// 		snapshot from an Outpost to a Region, from one Outpost to another, or within the same
        /// 		Outpost. For more information, see  		Copy snapshots from an Amazon Web Services Region to an Outpost in the  		Amazon EBS User Guide.
        public let destinationOutpostArn: String?
        /// The destination Region to use in the PresignedUrl parameter of a snapshot copy operation. This parameter is only valid for specifying the destination Region in a PresignedUrl parameter, where it is required. The snapshot copy is sent to the regional endpoint that you sent the HTTP 	request to (for example, ec2.us-east-1.amazonaws.com). With the CLI, this is specified using the --region parameter or the default Region in your Amazon Web Services configuration file.
        public let destinationRegion: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// To encrypt a copy of an unencrypted snapshot if encryption by default is not enabled,  enable encryption using this parameter. Otherwise, omit this parameter. Encrypted snapshots  are encrypted, even if you omit this parameter and encryption by default is not enabled. You  cannot set this parameter to false. For more information, see Amazon EBS encryption in the  Amazon EBS User Guide.
        public let encrypted: Bool?
        /// The identifier of the Key Management Service (KMS) KMS key to use for Amazon EBS encryption. If this parameter is not specified, your KMS key for Amazon EBS is used. If KmsKeyId is specified, the encrypted state must be true. You can specify the KMS key using any of the following:   Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.   Key alias. For example, alias/ExampleAlias.   Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.   Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.   Amazon Web Services authenticates the KMS key asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid,  the action can appear to complete, but eventually fails.
        public let kmsKeyId: String?
        /// When you copy an encrypted source snapshot using the Amazon EC2 Query API, you must supply a pre-signed URL. This parameter is optional for unencrypted snapshots. For more information, see Query requests. The PresignedUrl should use the snapshot source endpoint, the CopySnapshot action, and include the SourceRegion, SourceSnapshotId, and DestinationRegion parameters. The PresignedUrl must be signed using Amazon Web Services Signature Version 4. Because EBS snapshots are stored in Amazon S3, the signing algorithm for this parameter uses the same logic that is described in Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4) in the Amazon Simple Storage Service API Reference. An invalid or improperly signed PresignedUrl will cause the copy operation to fail asynchronously, and the snapshot will move to an error state.
        public let presignedUrl: String?
        /// The ID of the Region that contains the snapshot to be copied.
        public let sourceRegion: String?
        /// The ID of the EBS snapshot to copy.
        public let sourceSnapshotId: String?
        /// The tags to apply to the new snapshot.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(description: String? = nil, destinationOutpostArn: String? = nil, destinationRegion: String? = nil, dryRun: Bool? = nil, encrypted: Bool? = nil, kmsKeyId: String? = nil, presignedUrl: String? = nil, sourceRegion: String? = nil, sourceSnapshotId: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.description = description
            self.destinationOutpostArn = destinationOutpostArn
            self.destinationRegion = destinationRegion
            self.dryRun = dryRun
            self.encrypted = encrypted
            self.kmsKeyId = kmsKeyId
            self.presignedUrl = presignedUrl
            self.sourceRegion = sourceRegion
            self.sourceSnapshotId = sourceSnapshotId
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case destinationOutpostArn = "DestinationOutpostArn"
            case destinationRegion = "destinationRegion"
            case dryRun = "dryRun"
            case encrypted = "encrypted"
            case kmsKeyId = "kmsKeyId"
            case presignedUrl = "presignedUrl"
            case sourceRegion = "SourceRegion"
            case sourceSnapshotId = "SourceSnapshotId"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CopySnapshotResult: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the new snapshot.
        public let snapshotId: String?
        /// Any tags applied to the new snapshot.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(snapshotId: String? = nil, tags: [Tag]? = nil) {
            self.snapshotId = snapshotId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "snapshotId"
            case tags = "tagSet"
        }
    }

    public struct CpuOptions: AWSDecodableShape {
        /// Indicates whether the instance is enabled for AMD SEV-SNP. For more information, see  AMD SEV-SNP.
        public let amdSevSnp: AmdSevSnpSpecification?
        /// The number of CPU cores for the instance.
        public let coreCount: Int?
        /// The number of threads per CPU core.
        public let threadsPerCore: Int?

        public init(amdSevSnp: AmdSevSnpSpecification? = nil, coreCount: Int? = nil, threadsPerCore: Int? = nil) {
            self.amdSevSnp = amdSevSnp
            self.coreCount = coreCount
            self.threadsPerCore = threadsPerCore
        }

        private enum CodingKeys: String, CodingKey {
            case amdSevSnp = "amdSevSnp"
            case coreCount = "coreCount"
            case threadsPerCore = "threadsPerCore"
        }
    }

    public struct CpuOptionsRequest: AWSEncodableShape {
        /// Indicates whether to enable the instance for AMD SEV-SNP. AMD SEV-SNP is supported  with M6a, R6a, and C6a instance types only. For more information, see  AMD SEV-SNP.
        public let amdSevSnp: AmdSevSnpSpecification?
        /// The number of CPU cores for the instance.
        public let coreCount: Int?
        /// The number of threads per CPU core. To disable multithreading for the instance, specify a value of 1. Otherwise, specify the default value of 2.
        public let threadsPerCore: Int?

        public init(amdSevSnp: AmdSevSnpSpecification? = nil, coreCount: Int? = nil, threadsPerCore: Int? = nil) {
            self.amdSevSnp = amdSevSnp
            self.coreCount = coreCount
            self.threadsPerCore = threadsPerCore
        }

        private enum CodingKeys: String, CodingKey {
            case amdSevSnp = "AmdSevSnp"
            case coreCount = "CoreCount"
            case threadsPerCore = "ThreadsPerCore"
        }
    }

    public struct CreateCapacityReservationFleetRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The strategy used by the Capacity Reservation Fleet to determine which of the
        /// 			specified instance types to use. Currently, only the prioritized
        /// 			allocation strategy is supported. For more information, see
        /// 				Allocation strategy in the Amazon EC2 User Guide. Valid values: prioritized
        public let allocationStrategy: String?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensure Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The date and time at which the Capacity Reservation Fleet expires. When the Capacity
        /// 			Reservation Fleet expires, its state changes to expired and all of the Capacity
        /// 			Reservations in the Fleet expire. The Capacity Reservation Fleet expires within an hour after the specified time. For example,
        /// 			if you specify 5/31/2019, 13:30:55, the Capacity Reservation Fleet
        /// 			is guaranteed to expire between 13:30:55 and 14:30:55 on
        /// 			5/31/2019.
        ///
        public let endDate: Date?
        /// Indicates the type of instance launches that the Capacity Reservation Fleet accepts. All
        /// 			Capacity Reservations in the Fleet inherit this instance matching criteria. Currently, Capacity Reservation Fleets support open instance matching criteria
        /// 			only. This means that instances that have matching attributes (instance type, platform, and
        /// 			Availability Zone) run in the Capacity Reservations automatically. Instances do not need to
        /// 			explicitly target a Capacity Reservation Fleet to use its reserved capacity.
        public let instanceMatchCriteria: FleetInstanceMatchCriteria?
        /// Information about the instance types for which to reserve the capacity.
        @OptionalCustomCoding<EC2StandardArrayCoder<ReservationFleetInstanceSpecification>>
        public var instanceTypeSpecifications: [ReservationFleetInstanceSpecification]?
        /// The tags to assign to the Capacity Reservation Fleet. The tags are automatically assigned
        /// 			to the Capacity Reservations in the Fleet.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// Indicates the tenancy of the Capacity Reservation Fleet. All Capacity Reservations
        /// 			in the Fleet inherit this tenancy. The Capacity Reservation Fleet can have one of
        /// 			the following tenancy settings:    default - The Capacity Reservation Fleet is created on hardware
        /// 					that is shared with other Amazon Web Services accounts.    dedicated - The Capacity Reservations are created on single-tenant
        /// 					hardware that is dedicated to a single Amazon Web Services account.
        public let tenancy: FleetCapacityReservationTenancy?
        /// The total number of capacity units to be reserved by the Capacity Reservation Fleet. This
        /// 			value, together with the instance type weights that you assign to each instance type used by
        /// 			the Fleet determine the number of instances for which the Fleet reserves capacity. Both values
        /// 			are based on units that make sense for your workload. For more information, see
        /// 				Total target capacity in the Amazon EC2 User Guide.
        public let totalTargetCapacity: Int?

        public init(allocationStrategy: String? = nil, clientToken: String? = CreateCapacityReservationFleetRequest.idempotencyToken(), dryRun: Bool? = nil, endDate: Date? = nil, instanceMatchCriteria: FleetInstanceMatchCriteria? = nil, instanceTypeSpecifications: [ReservationFleetInstanceSpecification]? = nil, tagSpecifications: [TagSpecification]? = nil, tenancy: FleetCapacityReservationTenancy? = nil, totalTargetCapacity: Int? = nil) {
            self.allocationStrategy = allocationStrategy
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.endDate = endDate
            self.instanceMatchCriteria = instanceMatchCriteria
            self.instanceTypeSpecifications = instanceTypeSpecifications
            self.tagSpecifications = tagSpecifications
            self.tenancy = tenancy
            self.totalTargetCapacity = totalTargetCapacity
        }

        public func validate(name: String) throws {
            try self.instanceTypeSpecifications?.forEach {
                try $0.validate(name: "\(name).instanceTypeSpecifications[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case allocationStrategy = "AllocationStrategy"
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case endDate = "EndDate"
            case instanceMatchCriteria = "InstanceMatchCriteria"
            case instanceTypeSpecifications = "InstanceTypeSpecification"
            case tagSpecifications = "TagSpecification"
            case tenancy = "Tenancy"
            case totalTargetCapacity = "TotalTargetCapacity"
        }
    }

    public struct CreateCapacityReservationFleetResult: AWSDecodableShape {
        public struct _FleetCapacityReservationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The allocation strategy used by the Capacity Reservation Fleet.
        public let allocationStrategy: String?
        /// The ID of the Capacity Reservation Fleet.
        public let capacityReservationFleetId: String?
        /// The date and time at which the Capacity Reservation Fleet was created.
        public let createTime: Date?
        /// The date and time at which the Capacity Reservation Fleet expires.
        public let endDate: Date?
        /// Information about the individual Capacity Reservations in the Capacity Reservation Fleet.
        @OptionalCustomCoding<EC2ArrayCoder<_FleetCapacityReservationsEncoding, FleetCapacityReservation>>
        public var fleetCapacityReservations: [FleetCapacityReservation]?
        /// The instance matching criteria for the Capacity Reservation Fleet.
        public let instanceMatchCriteria: FleetInstanceMatchCriteria?
        /// The status of the Capacity Reservation Fleet.
        public let state: CapacityReservationFleetState?
        /// The tags assigned to the Capacity Reservation Fleet.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// Indicates the tenancy of Capacity Reservation Fleet.
        public let tenancy: FleetCapacityReservationTenancy?
        /// The requested capacity units that have been successfully reserved.
        public let totalFulfilledCapacity: Double?
        /// The total number of capacity units for which the Capacity Reservation Fleet reserves capacity.
        public let totalTargetCapacity: Int?

        public init(allocationStrategy: String? = nil, capacityReservationFleetId: String? = nil, createTime: Date? = nil, endDate: Date? = nil, fleetCapacityReservations: [FleetCapacityReservation]? = nil, instanceMatchCriteria: FleetInstanceMatchCriteria? = nil, state: CapacityReservationFleetState? = nil, tags: [Tag]? = nil, tenancy: FleetCapacityReservationTenancy? = nil, totalFulfilledCapacity: Double? = nil, totalTargetCapacity: Int? = nil) {
            self.allocationStrategy = allocationStrategy
            self.capacityReservationFleetId = capacityReservationFleetId
            self.createTime = createTime
            self.endDate = endDate
            self.fleetCapacityReservations = fleetCapacityReservations
            self.instanceMatchCriteria = instanceMatchCriteria
            self.state = state
            self.tags = tags
            self.tenancy = tenancy
            self.totalFulfilledCapacity = totalFulfilledCapacity
            self.totalTargetCapacity = totalTargetCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case allocationStrategy = "allocationStrategy"
            case capacityReservationFleetId = "capacityReservationFleetId"
            case createTime = "createTime"
            case endDate = "endDate"
            case fleetCapacityReservations = "fleetCapacityReservationSet"
            case instanceMatchCriteria = "instanceMatchCriteria"
            case state = "state"
            case tags = "tagSet"
            case tenancy = "tenancy"
            case totalFulfilledCapacity = "totalFulfilledCapacity"
            case totalTargetCapacity = "totalTargetCapacity"
        }
    }

    public struct CreateCapacityReservationRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Availability Zone in which to create the Capacity Reservation.
        public let availabilityZone: String?
        /// The ID of the Availability Zone in which to create the Capacity Reservation.
        public let availabilityZoneId: String?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensure Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides
        /// 			dedicated throughput to Amazon EBS and an optimized configuration stack to provide
        /// 			optimal I/O performance. This optimization isn't available with all instance types.
        /// 			Additional usage charges apply when using an EBS- optimized instance.
        public let ebsOptimized: Bool?
        /// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity
        /// 			is released and you can no longer launch instances into it. The Capacity Reservation's state changes to
        /// 				expired when it reaches its end date and time. You must provide an EndDate value if EndDateType is
        /// 				limited. Omit EndDate if EndDateType is
        /// 				unlimited. If the EndDateType is limited, the Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify
        /// 			5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.
        public let endDate: Date?
        /// Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end
        /// 			types:    unlimited - The Capacity Reservation remains active until you explicitly cancel it. Do not
        /// 					provide an EndDate if the EndDateType is
        /// 						unlimited.    limited - The Capacity Reservation expires automatically at a specified date and time. You must
        /// 					provide an EndDate value if the EndDateType value is
        /// 						limited.
        public let endDateType: EndDateType?
        ///  Deprecated.
        public let ephemeralStorage: Bool?
        /// The number of instances for which to reserve capacity. Valid range: 1 - 1000
        public let instanceCount: Int?
        /// Indicates the type of instance launches that the Capacity Reservation accepts. The options
        /// 			include:    open - The Capacity Reservation automatically matches all instances that have matching attributes (instance type, platform,
        /// 				and Availability Zone). Instances that have matching attributes run in the Capacity Reservation automatically without specifying
        /// 				any additional parameters.    targeted - The Capacity Reservation only accepts instances that have matching attributes
        /// 					(instance type, platform, and Availability Zone), and explicitly target the
        /// 					Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.    Default: open
        public let instanceMatchCriteria: InstanceMatchCriteria?
        /// The type of operating system for which to reserve capacity.
        public let instancePlatform: CapacityReservationInstancePlatform?
        /// The instance type for which to reserve capacity. For more information, see Instance types in the Amazon EC2 User Guide.
        public let instanceType: String?
        /// The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity Reservation.
        public let outpostArn: String?
        /// The Amazon Resource Name (ARN) of the cluster placement group in which
        /// 			to create the Capacity Reservation. For more information, see
        ///
        /// 				Capacity Reservations for cluster placement groups in the
        /// 			Amazon EC2 User Guide.
        public let placementGroupArn: String?
        /// The tags to apply to the Capacity Reservation during launch.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:    default - The Capacity Reservation is created on hardware that is shared with other Amazon Web Services accounts.    dedicated - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single Amazon Web Services account.
        public let tenancy: CapacityReservationTenancy?

        public init(availabilityZone: String? = nil, availabilityZoneId: String? = nil, clientToken: String? = nil, dryRun: Bool? = nil, ebsOptimized: Bool? = nil, endDate: Date? = nil, endDateType: EndDateType? = nil, ephemeralStorage: Bool? = nil, instanceCount: Int? = nil, instanceMatchCriteria: InstanceMatchCriteria? = nil, instancePlatform: CapacityReservationInstancePlatform? = nil, instanceType: String? = nil, outpostArn: String? = nil, placementGroupArn: String? = nil, tagSpecifications: [TagSpecification]? = nil, tenancy: CapacityReservationTenancy? = nil) {
            self.availabilityZone = availabilityZone
            self.availabilityZoneId = availabilityZoneId
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.ebsOptimized = ebsOptimized
            self.endDate = endDate
            self.endDateType = endDateType
            self.ephemeralStorage = ephemeralStorage
            self.instanceCount = instanceCount
            self.instanceMatchCriteria = instanceMatchCriteria
            self.instancePlatform = instancePlatform
            self.instanceType = instanceType
            self.outpostArn = outpostArn
            self.placementGroupArn = placementGroupArn
            self.tagSpecifications = tagSpecifications
            self.tenancy = tenancy
        }

        public func validate(name: String) throws {
            try self.validate(self.outpostArn, name: "outpostArn", parent: name, pattern: "^arn:aws([a-z-]+)?:outposts:[a-z\\d-]+:\\d{12}:outpost/op-[a-f0-9]{17}$")
            try self.validate(self.placementGroupArn, name: "placementGroupArn", parent: name, pattern: "^arn:aws([a-z-]+)?:ec2:[a-z\\d-]+:\\d{12}:placement-group/^.{1,255}$")
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case availabilityZoneId = "AvailabilityZoneId"
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case ebsOptimized = "EbsOptimized"
            case endDate = "EndDate"
            case endDateType = "EndDateType"
            case ephemeralStorage = "EphemeralStorage"
            case instanceCount = "InstanceCount"
            case instanceMatchCriteria = "InstanceMatchCriteria"
            case instancePlatform = "InstancePlatform"
            case instanceType = "InstanceType"
            case outpostArn = "OutpostArn"
            case placementGroupArn = "PlacementGroupArn"
            case tagSpecifications = "TagSpecifications"
            case tenancy = "Tenancy"
        }
    }

    public struct CreateCapacityReservationResult: AWSDecodableShape {
        /// Information about the Capacity Reservation.
        public let capacityReservation: CapacityReservation?

        public init(capacityReservation: CapacityReservation? = nil) {
            self.capacityReservation = capacityReservation
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservation = "capacityReservation"
        }
    }

    public struct CreateCarrierGatewayRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to associate with the carrier gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the VPC to associate with the carrier gateway.
        public let vpcId: String?

        public init(clientToken: String? = CreateCarrierGatewayRequest.idempotencyToken(), dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil, vpcId: String? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case tagSpecifications = "TagSpecification"
            case vpcId = "VpcId"
        }
    }

    public struct CreateCarrierGatewayResult: AWSDecodableShape {
        /// Information about the carrier gateway.
        public let carrierGateway: CarrierGateway?

        public init(carrierGateway: CarrierGateway? = nil) {
            self.carrierGateway = carrierGateway
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGateway = "carrierGateway"
        }
    }

    public struct CreateClientVpnEndpointRequest: AWSEncodableShape {
        public struct _DnsServersEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the authentication method to be used to authenticate clients.
        @OptionalCustomCoding<EC2StandardArrayCoder<ClientVpnAuthenticationRequest>>
        public var authenticationOptions: [ClientVpnAuthenticationRequest]?
        /// The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. Client CIDR range must have a size of at least /22 and must not be greater than /12.
        public let clientCidrBlock: String?
        /// The options for managing connection authorization for new client connections.
        public let clientConnectOptions: ClientConnectOptions?
        /// Options for enabling a customizable text banner that will be displayed on
        /// 			Amazon Web Services provided clients when a VPN session is established.
        public let clientLoginBannerOptions: ClientLoginBannerOptions?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
        public let clientToken: String?
        /// Information about the client connection logging options. If you enable client connection logging, data about client connections is sent to a
        /// 			Cloudwatch Logs log stream. The following information is logged:   Client connection requests   Client connection results (successful and unsuccessful)   Reasons for unsuccessful client connection requests   Client connection termination time
        public let connectionLogOptions: ConnectionLogOptions?
        /// A brief description of the Client VPN endpoint.
        public let description: String?
        /// Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can
        /// 			have up to two DNS servers. If no DNS server is specified, the DNS address configured on the device is used for the DNS server.
        @OptionalCustomCoding<EC2ArrayCoder<_DnsServersEncoding, String>>
        public var dnsServers: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?
        /// Specify whether to enable the self-service portal for the Client VPN endpoint. Default Value: enabled
        public let selfServicePortal: SelfServicePortal?
        /// The ARN of the server certificate. For more information, see
        /// 			the Certificate Manager User Guide.
        public let serverCertificateArn: String?
        /// The maximum VPN session duration time in hours. Valid values: 8 | 10 | 12 | 24  Default value: 24
        public let sessionTimeoutHours: Int?
        /// Indicates whether split-tunnel is enabled on the Client VPN endpoint. By default, split-tunnel on a VPN endpoint is disabled. For information about split-tunnel VPN endpoints, see Split-tunnel Client VPN endpoint in the
        /// 			Client VPN Administrator Guide.
        public let splitTunnel: Bool?
        /// The tags to apply to the Client VPN endpoint during creation.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The transport protocol to be used by the VPN session. Default value: udp
        public let transportProtocol: TransportProtocol?
        /// The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied.
        public let vpcId: String?
        /// The port number to assign to the Client VPN endpoint for TCP and UDP traffic. Valid Values: 443 | 1194  Default Value: 443
        public let vpnPort: Int?

        public init(authenticationOptions: [ClientVpnAuthenticationRequest]? = nil, clientCidrBlock: String? = nil, clientConnectOptions: ClientConnectOptions? = nil, clientLoginBannerOptions: ClientLoginBannerOptions? = nil, clientToken: String? = CreateClientVpnEndpointRequest.idempotencyToken(), connectionLogOptions: ConnectionLogOptions? = nil, description: String? = nil, dnsServers: [String]? = nil, dryRun: Bool? = nil, securityGroupIds: [String]? = nil, selfServicePortal: SelfServicePortal? = nil, serverCertificateArn: String? = nil, sessionTimeoutHours: Int? = nil, splitTunnel: Bool? = nil, tagSpecifications: [TagSpecification]? = nil, transportProtocol: TransportProtocol? = nil, vpcId: String? = nil, vpnPort: Int? = nil) {
            self.authenticationOptions = authenticationOptions
            self.clientCidrBlock = clientCidrBlock
            self.clientConnectOptions = clientConnectOptions
            self.clientLoginBannerOptions = clientLoginBannerOptions
            self.clientToken = clientToken
            self.connectionLogOptions = connectionLogOptions
            self.description = description
            self.dnsServers = dnsServers
            self.dryRun = dryRun
            self.securityGroupIds = securityGroupIds
            self.selfServicePortal = selfServicePortal
            self.serverCertificateArn = serverCertificateArn
            self.sessionTimeoutHours = sessionTimeoutHours
            self.splitTunnel = splitTunnel
            self.tagSpecifications = tagSpecifications
            self.transportProtocol = transportProtocol
            self.vpcId = vpcId
            self.vpnPort = vpnPort
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationOptions = "Authentication"
            case clientCidrBlock = "ClientCidrBlock"
            case clientConnectOptions = "ClientConnectOptions"
            case clientLoginBannerOptions = "ClientLoginBannerOptions"
            case clientToken = "ClientToken"
            case connectionLogOptions = "ConnectionLogOptions"
            case description = "Description"
            case dnsServers = "DnsServers"
            case dryRun = "DryRun"
            case securityGroupIds = "SecurityGroupId"
            case selfServicePortal = "SelfServicePortal"
            case serverCertificateArn = "ServerCertificateArn"
            case sessionTimeoutHours = "SessionTimeoutHours"
            case splitTunnel = "SplitTunnel"
            case tagSpecifications = "TagSpecification"
            case transportProtocol = "TransportProtocol"
            case vpcId = "VpcId"
            case vpnPort = "VpnPort"
        }
    }

    public struct CreateClientVpnEndpointResult: AWSDecodableShape {
        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String?
        /// The DNS name to be used by clients when establishing their VPN session.
        public let dnsName: String?
        /// The current state of the Client VPN endpoint.
        public let status: ClientVpnEndpointStatus?

        public init(clientVpnEndpointId: String? = nil, dnsName: String? = nil, status: ClientVpnEndpointStatus? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dnsName = dnsName
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "clientVpnEndpointId"
            case dnsName = "dnsName"
            case status = "status"
        }
    }

    public struct CreateClientVpnRouteRequest: AWSEncodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
        public let clientToken: String?
        /// The ID of the Client VPN endpoint to which to add the route.
        public let clientVpnEndpointId: String?
        /// A brief description of the route.
        public let description: String?
        /// The IPv4 address range, in CIDR notation, of the route destination. For example:   To add a route for Internet access, enter 0.0.0.0/0    To add a route for a peered VPC, enter the peered VPC's IPv4 CIDR range   To add a route for an on-premises network, enter the Amazon Web Services Site-to-Site VPN connection's IPv4 CIDR range   To add a route for the local network, enter the client CIDR range
        public let destinationCidrBlock: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the subnet through which you want to route traffic. The specified subnet must be
        /// 			an existing target network of the Client VPN endpoint. Alternatively, if you're adding a route for the local network, specify local.
        public let targetVpcSubnetId: String?

        public init(clientToken: String? = CreateClientVpnRouteRequest.idempotencyToken(), clientVpnEndpointId: String? = nil, description: String? = nil, destinationCidrBlock: String? = nil, dryRun: Bool? = nil, targetVpcSubnetId: String? = nil) {
            self.clientToken = clientToken
            self.clientVpnEndpointId = clientVpnEndpointId
            self.description = description
            self.destinationCidrBlock = destinationCidrBlock
            self.dryRun = dryRun
            self.targetVpcSubnetId = targetVpcSubnetId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case description = "Description"
            case destinationCidrBlock = "DestinationCidrBlock"
            case dryRun = "DryRun"
            case targetVpcSubnetId = "TargetVpcSubnetId"
        }
    }

    public struct CreateClientVpnRouteResult: AWSDecodableShape {
        /// The current state of the route.
        public let status: ClientVpnRouteStatus?

        public init(status: ClientVpnRouteStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
        }
    }

    public struct CreateCoipCidrRequest: AWSEncodableShape {
        ///  A customer-owned IP address range to create.
        public let cidr: String?
        ///  The ID of the address pool.
        public let coipPoolId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(cidr: String? = nil, coipPoolId: String? = nil, dryRun: Bool? = nil) {
            self.cidr = cidr
            self.coipPoolId = coipPoolId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case coipPoolId = "CoipPoolId"
            case dryRun = "DryRun"
        }
    }

    public struct CreateCoipCidrResult: AWSDecodableShape {
        ///  Information about a range of customer-owned IP addresses.
        public let coipCidr: CoipCidr?

        public init(coipCidr: CoipCidr? = nil) {
            self.coipCidr = coipCidr
        }

        private enum CodingKeys: String, CodingKey {
            case coipCidr = "coipCidr"
        }
    }

    public struct CreateCoipPoolRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        ///  The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?
        ///  The tags to assign to the CoIP address pool.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(dryRun: Bool? = nil, localGatewayRouteTableId: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.dryRun = dryRun
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case localGatewayRouteTableId = "LocalGatewayRouteTableId"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateCoipPoolResult: AWSDecodableShape {
        /// Information about the CoIP address pool.
        public let coipPool: CoipPool?

        public init(coipPool: CoipPool? = nil) {
            self.coipPool = coipPool
        }

        private enum CodingKeys: String, CodingKey {
            case coipPool = "coipPool"
        }
    }

    public struct CreateCustomerGatewayRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// For devices that support BGP, the customer gateway's BGP ASN. Default: 65000
        public let bgpAsn: Int?
        /// The Amazon Resource Name (ARN) for the customer gateway certificate.
        public let certificateArn: String?
        /// A name for the customer gateway device. Length Constraints: Up to 255 characters.
        public let deviceName: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        ///  IPv4 address for the customer gateway device's outside interface. The address must be static.
        public let ipAddress: String?
        ///  This member has been deprecated. The Internet-routable IP address for the customer gateway's outside interface. The address must be static.
        public let publicIp: String?
        /// The tags to apply to the customer gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The type of VPN connection that this customer gateway supports (ipsec.1).
        public let type: GatewayType?

        public init(bgpAsn: Int? = nil, certificateArn: String? = nil, deviceName: String? = nil, dryRun: Bool? = nil, ipAddress: String? = nil, publicIp: String? = nil, tagSpecifications: [TagSpecification]? = nil, type: GatewayType? = nil) {
            self.bgpAsn = bgpAsn
            self.certificateArn = certificateArn
            self.deviceName = deviceName
            self.dryRun = dryRun
            self.ipAddress = ipAddress
            self.publicIp = publicIp
            self.tagSpecifications = tagSpecifications
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case bgpAsn = "BgpAsn"
            case certificateArn = "CertificateArn"
            case deviceName = "DeviceName"
            case dryRun = "dryRun"
            case ipAddress = "IpAddress"
            case publicIp = "PublicIp"
            case tagSpecifications = "TagSpecification"
            case type = "Type"
        }
    }

    public struct CreateCustomerGatewayResult: AWSDecodableShape {
        /// Information about the customer gateway.
        public let customerGateway: CustomerGateway?

        public init(customerGateway: CustomerGateway? = nil) {
            self.customerGateway = customerGateway
        }

        private enum CodingKeys: String, CodingKey {
            case customerGateway = "customerGateway"
        }
    }

    public struct CreateDefaultSubnetRequest: AWSEncodableShape {
        /// The Availability Zone in which to create the default subnet.
        public let availabilityZone: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether to create an IPv6 only subnet. If you already have a default subnet for this Availability Zone, you must delete it before you can create an IPv6 only subnet.
        public let ipv6Native: Bool?

        public init(availabilityZone: String? = nil, dryRun: Bool? = nil, ipv6Native: Bool? = nil) {
            self.availabilityZone = availabilityZone
            self.dryRun = dryRun
            self.ipv6Native = ipv6Native
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case dryRun = "DryRun"
            case ipv6Native = "Ipv6Native"
        }
    }

    public struct CreateDefaultSubnetResult: AWSDecodableShape {
        /// Information about the subnet.
        public let subnet: Subnet?

        public init(subnet: Subnet? = nil) {
            self.subnet = subnet
        }

        private enum CodingKeys: String, CodingKey {
            case subnet = "subnet"
        }
    }

    public struct CreateDefaultVpcRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct CreateDefaultVpcResult: AWSDecodableShape {
        /// Information about the VPC.
        public let vpc: Vpc?

        public init(vpc: Vpc? = nil) {
            self.vpc = vpc
        }

        private enum CodingKeys: String, CodingKey {
            case vpc = "vpc"
        }
    }

    public struct CreateDhcpOptionsRequest: AWSEncodableShape {
        public struct _DhcpConfigurationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A DHCP configuration option.
        @OptionalCustomCoding<EC2ArrayCoder<_DhcpConfigurationsEncoding, NewDhcpConfiguration>>
        public var dhcpConfigurations: [NewDhcpConfiguration]?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to assign to the DHCP option.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(dhcpConfigurations: [NewDhcpConfiguration]? = nil, dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.dhcpConfigurations = dhcpConfigurations
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpConfigurations = "dhcpConfiguration"
            case dryRun = "dryRun"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateDhcpOptionsResult: AWSDecodableShape {
        /// A set of DHCP options.
        public let dhcpOptions: DhcpOptions?

        public init(dhcpOptions: DhcpOptions? = nil) {
            self.dhcpOptions = dhcpOptions
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptions = "dhcpOptions"
        }
    }

    public struct CreateEgressOnlyInternetGatewayRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// 			request. For more information, see Ensuring idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to assign to the egress-only internet gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the VPC for which to create the egress-only internet gateway.
        public let vpcId: String?

        public init(clientToken: String? = nil, dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil, vpcId: String? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case tagSpecifications = "TagSpecification"
            case vpcId = "VpcId"
        }
    }

    public struct CreateEgressOnlyInternetGatewayResult: AWSDecodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// 			request.
        public let clientToken: String?
        /// Information about the egress-only internet gateway.
        public let egressOnlyInternetGateway: EgressOnlyInternetGateway?

        public init(clientToken: String? = nil, egressOnlyInternetGateway: EgressOnlyInternetGateway? = nil) {
            self.clientToken = clientToken
            self.egressOnlyInternetGateway = egressOnlyInternetGateway
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case egressOnlyInternetGateway = "egressOnlyInternetGateway"
        }
    }

    public struct CreateFleetError: AWSDecodableShape {
        /// The error code that indicates why the instance could not be launched. For more information about error codes, see Error codes.
        public let errorCode: String?
        /// The error message that describes why the instance could not be launched. For more information about error messages, see Error codes.
        public let errorMessage: String?
        /// The launch templates and overrides that were used for launching the instances. The values that you specify in the Overrides replace the values in the launch template.
        public let launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse?
        /// Indicates if the instance that could not be launched was a Spot Instance or On-Demand Instance.
        public let lifecycle: InstanceLifecycle?

        public init(errorCode: String? = nil, errorMessage: String? = nil, launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse? = nil, lifecycle: InstanceLifecycle? = nil) {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.launchTemplateAndOverrides = launchTemplateAndOverrides
            self.lifecycle = lifecycle
        }

        private enum CodingKeys: String, CodingKey {
            case errorCode = "errorCode"
            case errorMessage = "errorMessage"
            case launchTemplateAndOverrides = "launchTemplateAndOverrides"
            case lifecycle = "lifecycle"
        }
    }

    public struct CreateFleetInstance: AWSDecodableShape {
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the instances.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The launch templates and overrides that were used for launching the instances. The values that you specify in the Overrides replace the values in the launch template.
        public let launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse?
        /// Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.
        public let lifecycle: InstanceLifecycle?
        /// The value is Windows for Windows instances. Otherwise, the value is blank.
        public let platform: PlatformValues?

        public init(instanceIds: [String]? = nil, instanceType: InstanceType? = nil, launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse? = nil, lifecycle: InstanceLifecycle? = nil, platform: PlatformValues? = nil) {
            self.instanceIds = instanceIds
            self.instanceType = instanceType
            self.launchTemplateAndOverrides = launchTemplateAndOverrides
            self.lifecycle = lifecycle
            self.platform = platform
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIds = "instanceIds"
            case instanceType = "instanceType"
            case launchTemplateAndOverrides = "launchTemplateAndOverrides"
            case lifecycle = "lifecycle"
            case platform = "platform"
        }
    }

    public struct CreateFleetRequest: AWSEncodableShape {
        public struct _LaunchTemplateConfigsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring idempotency.
        public let clientToken: String?
        /// Reserved.
        public let context: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet. Supported only for fleets of type maintain.
        public let excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy?
        /// The configuration for the EC2 Fleet.
        @OptionalCustomCoding<EC2ArrayCoder<_LaunchTemplateConfigsEncoding, FleetLaunchTemplateConfigRequest>>
        public var launchTemplateConfigs: [FleetLaunchTemplateConfigRequest]?
        /// Describes the configuration of On-Demand Instances in an EC2 Fleet.
        public let onDemandOptions: OnDemandOptionsRequest?
        /// Indicates whether EC2 Fleet should replace unhealthy Spot Instances. Supported only for fleets of type maintain. For more information, see EC2 Fleet health checks in the Amazon EC2 User Guide.
        public let replaceUnhealthyInstances: Bool?
        /// Describes the configuration of Spot Instances in an EC2 Fleet.
        public let spotOptions: SpotOptionsRequest?
        /// The key-value pair for tagging the EC2 Fleet request on creation. For more information, see  Tag your resources. If the fleet type is instant, specify a resource type of fleet  to tag the fleet or instance to tag the instances at launch. If the fleet type is maintain or request, specify a resource type of fleet to tag the fleet. You cannot specify a resource type of instance. To tag instances at launch, specify the tags in a launch template.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The number of units to request.
        public let targetCapacitySpecification: TargetCapacitySpecificationRequest?
        /// Indicates whether running instances should be terminated when the EC2 Fleet expires.
        public let terminateInstancesWithExpiration: Bool?
        /// The fleet type. The default value is maintain.    maintain - The EC2 Fleet places an asynchronous request for your desired capacity, and continues to maintain your desired Spot capacity by replenishing interrupted Spot Instances.    request - The EC2 Fleet places an asynchronous one-time request for your desired capacity, but does submit Spot requests in alternative capacity pools if Spot capacity is unavailable, and does not maintain Spot capacity if Spot Instances are interrupted.    instant - The EC2 Fleet places a synchronous one-time request for your desired capacity, and returns errors for any instances that could not be launched.   For more information, see EC2 Fleet request types in the Amazon EC2 User Guide.
        public let type: FleetType?
        /// The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
        public let validFrom: Date?
        /// The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new EC2 Fleet requests are placed or able to fulfill the request. If no value is specified, the request remains until you cancel it.
        public let validUntil: Date?

        public init(clientToken: String? = nil, context: String? = nil, dryRun: Bool? = nil, excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy? = nil, launchTemplateConfigs: [FleetLaunchTemplateConfigRequest]? = nil, onDemandOptions: OnDemandOptionsRequest? = nil, replaceUnhealthyInstances: Bool? = nil, spotOptions: SpotOptionsRequest? = nil, tagSpecifications: [TagSpecification]? = nil, targetCapacitySpecification: TargetCapacitySpecificationRequest? = nil, terminateInstancesWithExpiration: Bool? = nil, type: FleetType? = nil, validFrom: Date? = nil, validUntil: Date? = nil) {
            self.clientToken = clientToken
            self.context = context
            self.dryRun = dryRun
            self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
            self.launchTemplateConfigs = launchTemplateConfigs
            self.onDemandOptions = onDemandOptions
            self.replaceUnhealthyInstances = replaceUnhealthyInstances
            self.spotOptions = spotOptions
            self.tagSpecifications = tagSpecifications
            self.targetCapacitySpecification = targetCapacitySpecification
            self.terminateInstancesWithExpiration = terminateInstancesWithExpiration
            self.type = type
            self.validFrom = validFrom
            self.validUntil = validUntil
        }

        public func validate(name: String) throws {
            try self.launchTemplateConfigs?.forEach {
                try $0.validate(name: "\(name).launchTemplateConfigs[]")
            }
            try self.validate(self.launchTemplateConfigs, name: "launchTemplateConfigs", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case context = "Context"
            case dryRun = "DryRun"
            case excessCapacityTerminationPolicy = "ExcessCapacityTerminationPolicy"
            case launchTemplateConfigs = "LaunchTemplateConfigs"
            case onDemandOptions = "OnDemandOptions"
            case replaceUnhealthyInstances = "ReplaceUnhealthyInstances"
            case spotOptions = "SpotOptions"
            case tagSpecifications = "TagSpecification"
            case targetCapacitySpecification = "TargetCapacitySpecification"
            case terminateInstancesWithExpiration = "TerminateInstancesWithExpiration"
            case type = "Type"
            case validFrom = "ValidFrom"
            case validUntil = "ValidUntil"
        }
    }

    public struct CreateFleetResult: AWSDecodableShape {
        public struct _ErrorsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _InstancesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the instances that could not be launched by the fleet. Supported only for fleets of type instant.
        @OptionalCustomCoding<EC2ArrayCoder<_ErrorsEncoding, CreateFleetError>>
        public var errors: [CreateFleetError]?
        /// The ID of the EC2 Fleet.
        public let fleetId: String?
        /// Information about the instances that were launched by the fleet. Supported only for fleets of type instant.
        @OptionalCustomCoding<EC2ArrayCoder<_InstancesEncoding, CreateFleetInstance>>
        public var instances: [CreateFleetInstance]?

        public init(errors: [CreateFleetError]? = nil, fleetId: String? = nil, instances: [CreateFleetInstance]? = nil) {
            self.errors = errors
            self.fleetId = fleetId
            self.instances = instances
        }

        private enum CodingKeys: String, CodingKey {
            case errors = "errorSet"
            case fleetId = "fleetId"
            case instances = "fleetInstanceSet"
        }
    }

    public struct CreateFlowLogsRequest: AWSEncodableShape {
        public struct _ResourceIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
        public let clientToken: String?
        /// The ARN of the IAM role that allows Amazon EC2 to publish flow logs across accounts.
        public let deliverCrossAccountRole: String?
        /// The ARN of the IAM role that allows Amazon EC2 to publish flow logs to the log destination. This parameter is required if the destination type is cloud-watch-logs, or if the destination type is kinesis-data-firehose and the delivery stream and the resources to monitor are in different accounts.
        public let deliverLogsPermissionArn: String?
        /// The destination options.
        public let destinationOptions: DestinationOptionsRequest?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The destination for the flow log data. The meaning of this parameter depends on the destination type.   If the destination type is cloud-watch-logs, specify the ARN of a CloudWatch Logs log group. For example: arn:aws:logs:region:account_id:log-group:my_group  Alternatively, use the LogGroupName parameter.   If the destination type is s3, specify the ARN of an S3 bucket. For example: arn:aws:s3:::my_bucket/my_subfolder/ The subfolder is optional. Note that you can't use AWSLogs as a subfolder name.   If the destination type is kinesis-data-firehose, specify the ARN of a Kinesis Data Firehose delivery stream. For example: arn:aws:firehose:region:account_id:deliverystream:my_stream
        public let logDestination: String?
        /// The type of destination for the flow log data. Default: cloud-watch-logs
        public let logDestinationType: LogDestinationType?
        /// The fields to include in the flow log record. List the fields in the order in which they should appear. If you omit this parameter, the flow log is created using the default format. If you specify this parameter, you must include at least one field. For more information about the available fields, see Flow log records in the Amazon VPC User Guide or Transit Gateway Flow Log records in the Amazon Web Services Transit Gateway Guide. Specify the fields using the ${field-id} format, separated by spaces.
        public let logFormat: String?
        /// The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes your flow logs. This parameter is valid only if the destination type is cloud-watch-logs.
        public let logGroupName: String?
        /// The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record.  The possible values are 60 seconds (1 minute) or 600 seconds (10 minutes). This parameter must be 60 seconds for transit gateway resource types. When a network interface is attached to a Nitro-based instance, the aggregation interval is always 60 seconds or less, regardless of the value that you specify. Default: 600
        public let maxAggregationInterval: Int?
        /// The IDs of the resources to monitor. For example, if the resource type is VPC, specify the IDs of the VPCs. Constraints: Maximum of 25 for transit gateway resource types. Maximum of 1000 for the other resource types.
        @OptionalCustomCoding<EC2ArrayCoder<_ResourceIdsEncoding, String>>
        public var resourceIds: [String]?
        /// The type of resource to monitor.
        public let resourceType: FlowLogsResourceType?
        /// The tags to apply to the flow logs.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The type of traffic to monitor (accepted traffic, rejected traffic, or all traffic). This parameter is not supported for transit gateway resource types. It is required for the other resource types.
        public let trafficType: TrafficType?

        public init(clientToken: String? = nil, deliverCrossAccountRole: String? = nil, deliverLogsPermissionArn: String? = nil, destinationOptions: DestinationOptionsRequest? = nil, dryRun: Bool? = nil, logDestination: String? = nil, logDestinationType: LogDestinationType? = nil, logFormat: String? = nil, logGroupName: String? = nil, maxAggregationInterval: Int? = nil, resourceIds: [String]? = nil, resourceType: FlowLogsResourceType? = nil, tagSpecifications: [TagSpecification]? = nil, trafficType: TrafficType? = nil) {
            self.clientToken = clientToken
            self.deliverCrossAccountRole = deliverCrossAccountRole
            self.deliverLogsPermissionArn = deliverLogsPermissionArn
            self.destinationOptions = destinationOptions
            self.dryRun = dryRun
            self.logDestination = logDestination
            self.logDestinationType = logDestinationType
            self.logFormat = logFormat
            self.logGroupName = logGroupName
            self.maxAggregationInterval = maxAggregationInterval
            self.resourceIds = resourceIds
            self.resourceType = resourceType
            self.tagSpecifications = tagSpecifications
            self.trafficType = trafficType
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case deliverCrossAccountRole = "DeliverCrossAccountRole"
            case deliverLogsPermissionArn = "DeliverLogsPermissionArn"
            case destinationOptions = "DestinationOptions"
            case dryRun = "DryRun"
            case logDestination = "LogDestination"
            case logDestinationType = "LogDestinationType"
            case logFormat = "LogFormat"
            case logGroupName = "LogGroupName"
            case maxAggregationInterval = "MaxAggregationInterval"
            case resourceIds = "ResourceId"
            case resourceType = "ResourceType"
            case tagSpecifications = "TagSpecification"
            case trafficType = "TrafficType"
        }
    }

    public struct CreateFlowLogsResult: AWSDecodableShape {
        public struct _FlowLogIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _UnsuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// The IDs of the flow logs.
        @OptionalCustomCoding<EC2ArrayCoder<_FlowLogIdsEncoding, String>>
        public var flowLogIds: [String]?
        /// Information about the flow logs that could not be created successfully.
        @OptionalCustomCoding<EC2ArrayCoder<_UnsuccessfulEncoding, UnsuccessfulItem>>
        public var unsuccessful: [UnsuccessfulItem]?

        public init(clientToken: String? = nil, flowLogIds: [String]? = nil, unsuccessful: [UnsuccessfulItem]? = nil) {
            self.clientToken = clientToken
            self.flowLogIds = flowLogIds
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case flowLogIds = "flowLogIdSet"
            case unsuccessful = "unsuccessful"
        }
    }

    public struct CreateFpgaImageRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.  For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// A description for the AFI.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The location of the encrypted design checkpoint in Amazon S3. The input must be a tarball.
        public let inputStorageLocation: StorageLocation?
        /// The location in Amazon S3 for the output logs.
        public let logsStorageLocation: StorageLocation?
        /// A name for the AFI.
        public let name: String?
        /// The tags to apply to the FPGA image during creation.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = nil, description: String? = nil, dryRun: Bool? = nil, inputStorageLocation: StorageLocation? = nil, logsStorageLocation: StorageLocation? = nil, name: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.inputStorageLocation = inputStorageLocation
            self.logsStorageLocation = logsStorageLocation
            self.name = name
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "DryRun"
            case inputStorageLocation = "InputStorageLocation"
            case logsStorageLocation = "LogsStorageLocation"
            case name = "Name"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateFpgaImageResult: AWSDecodableShape {
        /// The global FPGA image identifier (AGFI ID).
        public let fpgaImageGlobalId: String?
        /// The FPGA image identifier (AFI ID).
        public let fpgaImageId: String?

        public init(fpgaImageGlobalId: String? = nil, fpgaImageId: String? = nil) {
            self.fpgaImageGlobalId = fpgaImageGlobalId
            self.fpgaImageId = fpgaImageId
        }

        private enum CodingKeys: String, CodingKey {
            case fpgaImageGlobalId = "fpgaImageGlobalId"
            case fpgaImageId = "fpgaImageId"
        }
    }

    public struct CreateImageRequest: AWSEncodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "BlockDeviceMapping" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The block device mappings. When using the CreateImage action:   You can't change the volume size using the VolumeSize parameter. If you want a different volume size, you must first change the volume size of the source instance.   You can't modify the encryption status of existing volumes or snapshots. To create an AMI with volumes or snapshots that have a different encryption status (for example, where the source volume and snapshots are unencrypted, and you want to create an AMI with encrypted volumes or snapshots), use the CopyImage action.   The only option that can be changed for existing mappings or snapshots is DeleteOnTermination.
        @OptionalCustomCoding<EC2ArrayCoder<_BlockDeviceMappingsEncoding, BlockDeviceMapping>>
        public var blockDeviceMappings: [BlockDeviceMapping]?
        /// A description for the new image.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String?
        /// A name for the new image. Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)
        public let name: String?
        /// Indicates whether or not the instance should be automatically rebooted before creating  the image. Specify one of the following values:    true - The instance is not rebooted before creating the image. This  creates crash-consistent snapshots that include only the data that has been written  to the volumes at the time the snapshots are created. Buffered data and data in  memory that has not yet been written to the volumes is not included in the snapshots.    false - The instance is rebooted before creating the image. This  ensures that all buffered data and data in memory is written to the volumes before the  snapshots are created.   Default: false
        public let noReboot: Bool?
        /// The tags to apply to the AMI and snapshots on creation. You can tag the AMI, the snapshots, or both.   To tag the AMI, the value for ResourceType must be image.   To tag the snapshots that are created of the root volume and of other Amazon EBS volumes that are attached to the instance, the value for ResourceType must be snapshot. The same tag is applied to all of the snapshots that are created.   If you specify other values for ResourceType, the request fails. To tag an AMI or snapshot after it has been created, see CreateTags.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(blockDeviceMappings: [BlockDeviceMapping]? = nil, description: String? = nil, dryRun: Bool? = nil, instanceId: String? = nil, name: String? = nil, noReboot: Bool? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.description = description
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.name = name
            self.noReboot = noReboot
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "blockDeviceMapping"
            case description = "description"
            case dryRun = "dryRun"
            case instanceId = "instanceId"
            case name = "name"
            case noReboot = "noReboot"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateImageResult: AWSDecodableShape {
        /// The ID of the new AMI.
        public let imageId: String?

        public init(imageId: String? = nil) {
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "imageId"
        }
    }

    public struct CreateInstanceConnectEndpointRequest: AWSEncodableShape {
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "SecurityGroupId" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether your client's IP address is preserved as the source. The value is true or false.   If true, your client's IP address is used when you connect to a resource.   If false, the elastic network interface IP address is used when you connect to a resource.   Default: true
        public let preserveClientIp: Bool?
        /// One or more security groups to associate with the endpoint. If you don't specify a security group,  the default security group for your VPC will be associated with the endpoint.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?
        /// The ID of the subnet in which to create the EC2 Instance Connect Endpoint.
        public let subnetId: String?
        /// The tags to apply to the EC2 Instance Connect Endpoint during creation.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = CreateInstanceConnectEndpointRequest.idempotencyToken(), dryRun: Bool? = nil, preserveClientIp: Bool? = nil, securityGroupIds: [String]? = nil, subnetId: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.preserveClientIp = preserveClientIp
            self.securityGroupIds = securityGroupIds
            self.subnetId = subnetId
            self.tagSpecifications = tagSpecifications
        }

        public func validate(name: String) throws {
            try self.validate(self.securityGroupIds, name: "securityGroupIds", parent: name, max: 16)
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case preserveClientIp = "PreserveClientIp"
            case securityGroupIds = "SecurityGroupId"
            case subnetId = "SubnetId"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateInstanceConnectEndpointResult: AWSDecodableShape {
        /// Unique, case-sensitive idempotency token provided by the client in the the request.
        public let clientToken: String?
        /// Information about the EC2 Instance Connect Endpoint.
        public let instanceConnectEndpoint: Ec2InstanceConnectEndpoint?

        public init(clientToken: String? = nil, instanceConnectEndpoint: Ec2InstanceConnectEndpoint? = nil) {
            self.clientToken = clientToken
            self.instanceConnectEndpoint = instanceConnectEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case instanceConnectEndpoint = "instanceConnectEndpoint"
        }
    }

    public struct CreateInstanceEventWindowRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The cron expression for the event window, for example, * 0-4,20-23 * * 1,5. If you specify a cron expression, you can't specify a time range. Constraints:   Only hour and day of the week values are supported.   For day of the week values, you can specify either integers 0 through 6, or alternative single values SUN through SAT.   The minute, month, and year must be specified by *.   The hour value must be one or a multiple range, for example, 0-4 or 0-4,20-23.   Each hour range must be >= 2 hours, for example, 0-2 or 20-23.   The event window must be >= 4 hours. The combined total time ranges in the event window must be >= 4 hours.   For more information about cron expressions, see cron on the Wikipedia website.
        public let cronExpression: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name of the event window.
        public let name: String?
        /// The tags to apply to the event window.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The time range for the event window. If you specify a time range, you can't specify a cron expression.
        @OptionalCustomCoding<EC2StandardArrayCoder<InstanceEventWindowTimeRangeRequest>>
        public var timeRanges: [InstanceEventWindowTimeRangeRequest]?

        public init(cronExpression: String? = nil, dryRun: Bool? = nil, name: String? = nil, tagSpecifications: [TagSpecification]? = nil, timeRanges: [InstanceEventWindowTimeRangeRequest]? = nil) {
            self.cronExpression = cronExpression
            self.dryRun = dryRun
            self.name = name
            self.tagSpecifications = tagSpecifications
            self.timeRanges = timeRanges
        }

        public func validate(name: String) throws {
            try self.timeRanges?.forEach {
                try $0.validate(name: "\(name).timeRanges[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case cronExpression = "CronExpression"
            case dryRun = "DryRun"
            case name = "Name"
            case tagSpecifications = "TagSpecification"
            case timeRanges = "TimeRange"
        }
    }

    public struct CreateInstanceEventWindowResult: AWSDecodableShape {
        /// Information about the event window.
        public let instanceEventWindow: InstanceEventWindow?

        public init(instanceEventWindow: InstanceEventWindow? = nil) {
            self.instanceEventWindow = instanceEventWindow
        }

        private enum CodingKeys: String, CodingKey {
            case instanceEventWindow = "instanceEventWindow"
        }
    }

    public struct CreateInstanceExportTaskRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description for the conversion task or the resource being exported. The maximum length is 255 characters.
        public let description: String?
        /// The format and location for an export instance task.
        public let exportToS3Task: ExportToS3TaskSpecification?
        /// The ID of the instance.
        public let instanceId: String?
        /// The tags to apply to the export instance task during creation.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The target virtualization environment.
        public let targetEnvironment: ExportEnvironment?

        public init(description: String? = nil, exportToS3Task: ExportToS3TaskSpecification? = nil, instanceId: String? = nil, tagSpecifications: [TagSpecification]? = nil, targetEnvironment: ExportEnvironment? = nil) {
            self.description = description
            self.exportToS3Task = exportToS3Task
            self.instanceId = instanceId
            self.tagSpecifications = tagSpecifications
            self.targetEnvironment = targetEnvironment
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case exportToS3Task = "exportToS3"
            case instanceId = "instanceId"
            case tagSpecifications = "TagSpecification"
            case targetEnvironment = "targetEnvironment"
        }
    }

    public struct CreateInstanceExportTaskResult: AWSDecodableShape {
        /// Information about the export instance task.
        public let exportTask: ExportTask?

        public init(exportTask: ExportTask? = nil) {
            self.exportTask = exportTask
        }

        private enum CodingKeys: String, CodingKey {
            case exportTask = "exportTask"
        }
    }

    public struct CreateInternetGatewayRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to assign to the internet gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateInternetGatewayResult: AWSDecodableShape {
        /// Information about the internet gateway.
        public let internetGateway: InternetGateway?

        public init(internetGateway: InternetGateway? = nil) {
            self.internetGateway = internetGateway
        }

        private enum CodingKeys: String, CodingKey {
            case internetGateway = "internetGateway"
        }
    }

    public struct CreateIpamPoolRequest: AWSEncodableShape {
        public struct _AllocationResourceTagsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IP protocol assigned to this IPAM pool. You must choose either IPv4 or IPv6 protocol for a pool.
        public let addressFamily: AddressFamily?
        /// The default netmask length for allocations added to this pool. If, for example, the CIDR assigned to this pool is 10.0.0.0/8 and you enter 16 here,  new allocations will default to 10.0.0.0/16.
        public let allocationDefaultNetmaskLength: Int?
        /// The maximum netmask length possible for CIDR allocations in this IPAM pool to be compliant. The maximum netmask length must be  greater than the minimum netmask length. Possible netmask lengths for IPv4 addresses are 0 - 32. Possible netmask lengths for IPv6 addresses are  0 - 128.
        public let allocationMaxNetmaskLength: Int?
        /// The minimum netmask length required for CIDR allocations in this IPAM pool to be compliant. The minimum netmask length must be  less than the maximum netmask length. Possible netmask lengths for IPv4 addresses are 0 - 32. Possible netmask lengths for IPv6 addresses are  0 - 128.
        public let allocationMinNetmaskLength: Int?
        /// Tags that are required for resources that use CIDRs from this IPAM pool. Resources that do not have these tags will not be allowed to allocate space from the pool. If the resources have their tags changed after they have allocated space or if the allocation tagging requirements are changed on the pool, the resource may be marked as noncompliant.
        @OptionalCustomCoding<EC2ArrayCoder<_AllocationResourceTagsEncoding, RequestIpamResourceTag>>
        public var allocationResourceTags: [RequestIpamResourceTag]?
        /// If selected, IPAM will continuously look for resources within the CIDR range of this pool  and automatically import them as allocations into your IPAM. The CIDRs that will be allocated for these resources must not already be allocated to other resources in order for the import to succeed. IPAM will import  a CIDR regardless of its compliance with the pool's allocation rules, so a resource might be imported and subsequently  marked as noncompliant. If IPAM discovers multiple CIDRs that overlap, IPAM will import the largest CIDR only. If IPAM  discovers multiple CIDRs with matching CIDRs, IPAM will randomly import one of them only.  A locale must be set on the pool for this feature to work.
        public let autoImport: Bool?
        /// Limits which service in Amazon Web Services that the pool can be used in. "ec2", for example, allows users to use space for Elastic IP addresses and VPCs.
        public let awsService: IpamPoolAwsService?
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// A description for the IPAM pool.
        public let description: String?
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the scope in which you would like to create the IPAM pool.
        public let ipamScopeId: String?
        /// In IPAM, the locale is the Amazon Web Services Region where you want to make an IPAM pool available for allocations. Only resources in the same Region as the locale of the pool can get IP address allocations from the pool. You can only allocate a CIDR for a VPC, for example, from an IPAM pool that shares a locale with the VPC’s Region. Note that once you choose a Locale for a pool, you cannot modify it. If you do not choose a locale, resources in Regions others than the IPAM's home region cannot use CIDRs from this pool. Possible values: Any Amazon Web Services Region, such as us-east-1.
        public let locale: String?
        /// The IP address source for pools in the public scope. Only used for provisioning IP address CIDRs to pools in the public scope. Default is byoip. For more information, see Create IPv6 pools in the Amazon VPC IPAM User Guide.  By default, you can add only one Amazon-provided IPv6 CIDR block to a top-level IPv6 pool if PublicIpSource is amazon. For information on increasing the default limit, see  Quotas for your IPAM in the Amazon VPC IPAM User Guide.
        public let publicIpSource: IpamPoolPublicIpSource?
        /// Determines if the pool is publicly advertisable. This option is not available for pools with AddressFamily set to ipv4.
        public let publiclyAdvertisable: Bool?
        /// The ID of the source IPAM pool. Use this option to create a pool within an existing pool. Note that the CIDR you provision for the pool within the source pool must be available in the source pool's CIDR range.
        public let sourceIpamPoolId: String?
        /// The resource used to provision CIDRs to a resource planning pool.
        public let sourceResource: IpamPoolSourceResourceRequest?
        /// The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(addressFamily: AddressFamily? = nil, allocationDefaultNetmaskLength: Int? = nil, allocationMaxNetmaskLength: Int? = nil, allocationMinNetmaskLength: Int? = nil, allocationResourceTags: [RequestIpamResourceTag]? = nil, autoImport: Bool? = nil, awsService: IpamPoolAwsService? = nil, clientToken: String? = CreateIpamPoolRequest.idempotencyToken(), description: String? = nil, dryRun: Bool? = nil, ipamScopeId: String? = nil, locale: String? = nil, publicIpSource: IpamPoolPublicIpSource? = nil, publiclyAdvertisable: Bool? = nil, sourceIpamPoolId: String? = nil, sourceResource: IpamPoolSourceResourceRequest? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.addressFamily = addressFamily
            self.allocationDefaultNetmaskLength = allocationDefaultNetmaskLength
            self.allocationMaxNetmaskLength = allocationMaxNetmaskLength
            self.allocationMinNetmaskLength = allocationMinNetmaskLength
            self.allocationResourceTags = allocationResourceTags
            self.autoImport = autoImport
            self.awsService = awsService
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.ipamScopeId = ipamScopeId
            self.locale = locale
            self.publicIpSource = publicIpSource
            self.publiclyAdvertisable = publiclyAdvertisable
            self.sourceIpamPoolId = sourceIpamPoolId
            self.sourceResource = sourceResource
            self.tagSpecifications = tagSpecifications
        }

        public func validate(name: String) throws {
            try self.validate(self.allocationDefaultNetmaskLength, name: "allocationDefaultNetmaskLength", parent: name, max: 128)
            try self.validate(self.allocationDefaultNetmaskLength, name: "allocationDefaultNetmaskLength", parent: name, min: 0)
            try self.validate(self.allocationMaxNetmaskLength, name: "allocationMaxNetmaskLength", parent: name, max: 128)
            try self.validate(self.allocationMaxNetmaskLength, name: "allocationMaxNetmaskLength", parent: name, min: 0)
            try self.validate(self.allocationMinNetmaskLength, name: "allocationMinNetmaskLength", parent: name, max: 128)
            try self.validate(self.allocationMinNetmaskLength, name: "allocationMinNetmaskLength", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case addressFamily = "AddressFamily"
            case allocationDefaultNetmaskLength = "AllocationDefaultNetmaskLength"
            case allocationMaxNetmaskLength = "AllocationMaxNetmaskLength"
            case allocationMinNetmaskLength = "AllocationMinNetmaskLength"
            case allocationResourceTags = "AllocationResourceTag"
            case autoImport = "AutoImport"
            case awsService = "AwsService"
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "DryRun"
            case ipamScopeId = "IpamScopeId"
            case locale = "Locale"
            case publicIpSource = "PublicIpSource"
            case publiclyAdvertisable = "PubliclyAdvertisable"
            case sourceIpamPoolId = "SourceIpamPoolId"
            case sourceResource = "SourceResource"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateIpamPoolResult: AWSDecodableShape {
        /// Information about the IPAM pool created.
        public let ipamPool: IpamPool?

        public init(ipamPool: IpamPool? = nil) {
            self.ipamPool = ipamPool
        }

        private enum CodingKeys: String, CodingKey {
            case ipamPool = "ipamPool"
        }
    }

    public struct CreateIpamRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// A description for the IPAM.
        public let description: String?
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The operating Regions for the IPAM. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions.  For more information about operating Regions, see Create an IPAM in the Amazon VPC IPAM User Guide.
        @OptionalCustomCoding<EC2StandardArrayCoder<AddIpamOperatingRegion>>
        public var operatingRegions: [AddIpamOperatingRegion]?
        /// The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// IPAM is offered in a Free Tier and an Advanced Tier. For more information about the features available in each tier and the costs associated with the tiers, see Amazon VPC pricing > IPAM tab.
        public let tier: IpamTier?

        public init(clientToken: String? = CreateIpamRequest.idempotencyToken(), description: String? = nil, dryRun: Bool? = nil, operatingRegions: [AddIpamOperatingRegion]? = nil, tagSpecifications: [TagSpecification]? = nil, tier: IpamTier? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.operatingRegions = operatingRegions
            self.tagSpecifications = tagSpecifications
            self.tier = tier
        }

        public func validate(name: String) throws {
            try self.validate(self.operatingRegions, name: "operatingRegions", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "DryRun"
            case operatingRegions = "OperatingRegion"
            case tagSpecifications = "TagSpecification"
            case tier = "Tier"
        }
    }

    public struct CreateIpamResourceDiscoveryRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A client token for the IPAM resource discovery.
        public let clientToken: String?
        /// A description for the IPAM resource discovery.
        public let description: String?
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Operating Regions for the IPAM resource discovery. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions.
        @OptionalCustomCoding<EC2StandardArrayCoder<AddIpamOperatingRegion>>
        public var operatingRegions: [AddIpamOperatingRegion]?
        /// Tag specifications for the IPAM resource discovery.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = CreateIpamResourceDiscoveryRequest.idempotencyToken(), description: String? = nil, dryRun: Bool? = nil, operatingRegions: [AddIpamOperatingRegion]? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.operatingRegions = operatingRegions
            self.tagSpecifications = tagSpecifications
        }

        public func validate(name: String) throws {
            try self.validate(self.operatingRegions, name: "operatingRegions", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "DryRun"
            case operatingRegions = "OperatingRegion"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateIpamResourceDiscoveryResult: AWSDecodableShape {
        /// An IPAM resource discovery.
        public let ipamResourceDiscovery: IpamResourceDiscovery?

        public init(ipamResourceDiscovery: IpamResourceDiscovery? = nil) {
            self.ipamResourceDiscovery = ipamResourceDiscovery
        }

        private enum CodingKeys: String, CodingKey {
            case ipamResourceDiscovery = "ipamResourceDiscovery"
        }
    }

    public struct CreateIpamResult: AWSDecodableShape {
        /// Information about the IPAM created.
        public let ipam: Ipam?

        public init(ipam: Ipam? = nil) {
            self.ipam = ipam
        }

        private enum CodingKeys: String, CodingKey {
            case ipam = "ipam"
        }
    }

    public struct CreateIpamScopeRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// A description for the scope you're creating.
        public let description: String?
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the IPAM for which you're creating this scope.
        public let ipamId: String?
        /// The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = CreateIpamScopeRequest.idempotencyToken(), description: String? = nil, dryRun: Bool? = nil, ipamId: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.ipamId = ipamId
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "DryRun"
            case ipamId = "IpamId"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateIpamScopeResult: AWSDecodableShape {
        /// Information about the created scope.
        public let ipamScope: IpamScope?

        public init(ipamScope: IpamScope? = nil) {
            self.ipamScope = ipamScope
        }

        private enum CodingKeys: String, CodingKey {
            case ipamScope = "ipamScope"
        }
    }

    public struct CreateKeyPairRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The format of the key pair. Default: pem
        public let keyFormat: KeyFormat?
        /// A unique name for the key pair. Constraints: Up to 255 ASCII characters
        public let keyName: String?
        /// The type of key pair. Note that ED25519 keys are not supported for Windows instances. Default: rsa
        public let keyType: KeyType?
        /// The tags to apply to the new key pair.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(dryRun: Bool? = nil, keyFormat: KeyFormat? = nil, keyName: String? = nil, keyType: KeyType? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.dryRun = dryRun
            self.keyFormat = keyFormat
            self.keyName = keyName
            self.keyType = keyType
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case keyFormat = "KeyFormat"
            case keyName = "KeyName"
            case keyType = "KeyType"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateLaunchTemplateRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring idempotency. Constraint: Maximum 128 ASCII characters.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The information for the launch template.
        public let launchTemplateData: RequestLaunchTemplateData?
        /// A name for the launch template.
        public let launchTemplateName: String?
        /// The tags to apply to the launch template on creation. To tag the launch template, the resource type must be launch-template.  To specify the tags for the resources that are created when an instance is launched, you must use the TagSpecifications parameter in the launch template data structure.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// A description for the first version of the launch template.
        public let versionDescription: String?

        public init(clientToken: String? = nil, dryRun: Bool? = nil, launchTemplateData: RequestLaunchTemplateData? = nil, launchTemplateName: String? = nil, tagSpecifications: [TagSpecification]? = nil, versionDescription: String? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.launchTemplateData = launchTemplateData
            self.launchTemplateName = launchTemplateName
            self.tagSpecifications = tagSpecifications
            self.versionDescription = versionDescription
        }

        public func validate(name: String) throws {
            try self.launchTemplateData?.validate(name: "\(name).launchTemplateData")
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, max: 128)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, min: 3)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, pattern: "^[a-zA-Z0-9\\(\\)\\.\\-/_]+$")
            try self.validate(self.versionDescription, name: "versionDescription", parent: name, max: 255)
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case launchTemplateData = "LaunchTemplateData"
            case launchTemplateName = "LaunchTemplateName"
            case tagSpecifications = "TagSpecification"
            case versionDescription = "VersionDescription"
        }
    }

    public struct CreateLaunchTemplateResult: AWSDecodableShape {
        /// Information about the launch template.
        public let launchTemplate: LaunchTemplate?
        /// If the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found.
        public let warning: ValidationWarning?

        public init(launchTemplate: LaunchTemplate? = nil, warning: ValidationWarning? = nil) {
            self.launchTemplate = launchTemplate
            self.warning = warning
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplate = "launchTemplate"
            case warning = "warning"
        }
    }

    public struct CreateLaunchTemplateVersionRequest: AWSEncodableShape {
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring idempotency. Constraint: Maximum 128 ASCII characters.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The information for the launch template.
        public let launchTemplateData: RequestLaunchTemplateData?
        /// The ID of the launch template. You must specify either the LaunchTemplateId or the LaunchTemplateName, but not both.
        public let launchTemplateId: String?
        /// The name of the launch template. You must specify the LaunchTemplateName or the LaunchTemplateId, but not both.
        public let launchTemplateName: String?
        /// If true, and if a Systems Manager parameter is specified for ImageId, the AMI ID is displayed in the response for imageID. For more information, see Use a Systems  Manager parameter instead of an AMI ID in the Amazon Elastic Compute Cloud User Guide. Default: false
        public let resolveAlias: Bool?
        /// The version number of the launch template version on which to base the new version. The new version inherits the same launch parameters as the source version, except for parameters that you specify in LaunchTemplateData. Snapshots applied to the block device mapping are ignored when creating a new version unless they are explicitly included.
        public let sourceVersion: String?
        /// A description for the version of the launch template.
        public let versionDescription: String?

        public init(clientToken: String? = nil, dryRun: Bool? = nil, launchTemplateData: RequestLaunchTemplateData? = nil, launchTemplateId: String? = nil, launchTemplateName: String? = nil, resolveAlias: Bool? = nil, sourceVersion: String? = nil, versionDescription: String? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.launchTemplateData = launchTemplateData
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.resolveAlias = resolveAlias
            self.sourceVersion = sourceVersion
            self.versionDescription = versionDescription
        }

        public func validate(name: String) throws {
            try self.launchTemplateData?.validate(name: "\(name).launchTemplateData")
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, max: 128)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, min: 3)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, pattern: "^[a-zA-Z0-9\\(\\)\\.\\-/_]+$")
            try self.validate(self.versionDescription, name: "versionDescription", parent: name, max: 255)
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case launchTemplateData = "LaunchTemplateData"
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
            case resolveAlias = "ResolveAlias"
            case sourceVersion = "SourceVersion"
            case versionDescription = "VersionDescription"
        }
    }

    public struct CreateLaunchTemplateVersionResult: AWSDecodableShape {
        /// Information about the launch template version.
        public let launchTemplateVersion: LaunchTemplateVersion?
        /// If the new version of the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found.
        public let warning: ValidationWarning?

        public init(launchTemplateVersion: LaunchTemplateVersion? = nil, warning: ValidationWarning? = nil) {
            self.launchTemplateVersion = launchTemplateVersion
            self.warning = warning
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateVersion = "launchTemplateVersion"
            case warning = "warning"
        }
    }

    public struct CreateLocalGatewayRouteRequest: AWSEncodableShape {
        /// The CIDR range used for destination matches. Routing decisions are based on  the most specific match.
        public let destinationCidrBlock: String?
        ///  The ID of the prefix list. Use a prefix list in place of DestinationCidrBlock. You  cannot use DestinationPrefixListId and DestinationCidrBlock in the same request.
        public let destinationPrefixListId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?
        /// The ID of the virtual interface group.
        public let localGatewayVirtualInterfaceGroupId: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?

        public init(destinationCidrBlock: String? = nil, destinationPrefixListId: String? = nil, dryRun: Bool? = nil, localGatewayRouteTableId: String? = nil, localGatewayVirtualInterfaceGroupId: String? = nil, networkInterfaceId: String? = nil) {
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationPrefixListId = destinationPrefixListId
            self.dryRun = dryRun
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.localGatewayVirtualInterfaceGroupId = localGatewayVirtualInterfaceGroupId
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "DestinationCidrBlock"
            case destinationPrefixListId = "DestinationPrefixListId"
            case dryRun = "DryRun"
            case localGatewayRouteTableId = "LocalGatewayRouteTableId"
            case localGatewayVirtualInterfaceGroupId = "LocalGatewayVirtualInterfaceGroupId"
            case networkInterfaceId = "NetworkInterfaceId"
        }
    }

    public struct CreateLocalGatewayRouteResult: AWSDecodableShape {
        /// Information about the route.
        public let route: LocalGatewayRoute?

        public init(route: LocalGatewayRoute? = nil) {
            self.route = route
        }

        private enum CodingKeys: String, CodingKey {
            case route = "route"
        }
    }

    public struct CreateLocalGatewayRouteTableRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        ///  The ID of the local gateway.
        public let localGatewayId: String?
        ///  The mode of the local gateway route table.
        public let mode: LocalGatewayRouteTableMode?
        ///  The tags assigned to the local gateway route table.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(dryRun: Bool? = nil, localGatewayId: String? = nil, mode: LocalGatewayRouteTableMode? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.dryRun = dryRun
            self.localGatewayId = localGatewayId
            self.mode = mode
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case localGatewayId = "LocalGatewayId"
            case mode = "Mode"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateLocalGatewayRouteTableResult: AWSDecodableShape {
        /// Information about the local gateway route table.
        public let localGatewayRouteTable: LocalGatewayRouteTable?

        public init(localGatewayRouteTable: LocalGatewayRouteTable? = nil) {
            self.localGatewayRouteTable = localGatewayRouteTable
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayRouteTable = "localGatewayRouteTable"
        }
    }

    public struct CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        ///  The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?
        ///  The ID of the local gateway route table virtual interface group association.
        public let localGatewayVirtualInterfaceGroupId: String?
        ///  The tags assigned to the local gateway route table virtual interface group association.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(dryRun: Bool? = nil, localGatewayRouteTableId: String? = nil, localGatewayVirtualInterfaceGroupId: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.dryRun = dryRun
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.localGatewayVirtualInterfaceGroupId = localGatewayVirtualInterfaceGroupId
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case localGatewayRouteTableId = "LocalGatewayRouteTableId"
            case localGatewayVirtualInterfaceGroupId = "LocalGatewayVirtualInterfaceGroupId"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult: AWSDecodableShape {
        /// Information about the local gateway route table virtual interface group association.
        public let localGatewayRouteTableVirtualInterfaceGroupAssociation: LocalGatewayRouteTableVirtualInterfaceGroupAssociation?

        public init(localGatewayRouteTableVirtualInterfaceGroupAssociation: LocalGatewayRouteTableVirtualInterfaceGroupAssociation? = nil) {
            self.localGatewayRouteTableVirtualInterfaceGroupAssociation = localGatewayRouteTableVirtualInterfaceGroupAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayRouteTableVirtualInterfaceGroupAssociation = "localGatewayRouteTableVirtualInterfaceGroupAssociation"
        }
    }

    public struct CreateLocalGatewayRouteTableVpcAssociationRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?
        /// The tags to assign to the local gateway route table VPC association.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(dryRun: Bool? = nil, localGatewayRouteTableId: String? = nil, tagSpecifications: [TagSpecification]? = nil, vpcId: String? = nil) {
            self.dryRun = dryRun
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.tagSpecifications = tagSpecifications
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case localGatewayRouteTableId = "LocalGatewayRouteTableId"
            case tagSpecifications = "TagSpecification"
            case vpcId = "VpcId"
        }
    }

    public struct CreateLocalGatewayRouteTableVpcAssociationResult: AWSDecodableShape {
        /// Information about the association.
        public let localGatewayRouteTableVpcAssociation: LocalGatewayRouteTableVpcAssociation?

        public init(localGatewayRouteTableVpcAssociation: LocalGatewayRouteTableVpcAssociation? = nil) {
            self.localGatewayRouteTableVpcAssociation = localGatewayRouteTableVpcAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayRouteTableVpcAssociation = "localGatewayRouteTableVpcAssociation"
        }
    }

    public struct CreateManagedPrefixListRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IP address type. Valid Values: IPv4 | IPv6
        public let addressFamily: String?
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency. Constraints: Up to 255 UTF-8 characters in length.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more entries for the prefix list.
        @OptionalCustomCoding<EC2StandardArrayCoder<AddPrefixListEntry>>
        public var entries: [AddPrefixListEntry]?
        /// The maximum number of entries for the prefix list.
        public let maxEntries: Int?
        /// A name for the prefix list. Constraints: Up to 255 characters in length. The name cannot start with com.amazonaws.
        public let prefixListName: String?
        /// The tags to apply to the prefix list during creation.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(addressFamily: String? = nil, clientToken: String? = CreateManagedPrefixListRequest.idempotencyToken(), dryRun: Bool? = nil, entries: [AddPrefixListEntry]? = nil, maxEntries: Int? = nil, prefixListName: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.addressFamily = addressFamily
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.entries = entries
            self.maxEntries = maxEntries
            self.prefixListName = prefixListName
            self.tagSpecifications = tagSpecifications
        }

        public func validate(name: String) throws {
            try self.validate(self.entries, name: "entries", parent: name, max: 100)
        }

        private enum CodingKeys: String, CodingKey {
            case addressFamily = "AddressFamily"
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case entries = "Entry"
            case maxEntries = "MaxEntries"
            case prefixListName = "PrefixListName"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateManagedPrefixListResult: AWSDecodableShape {
        /// Information about the prefix list.
        public let prefixList: ManagedPrefixList?

        public init(prefixList: ManagedPrefixList? = nil) {
            self.prefixList = prefixList
        }

        private enum CodingKeys: String, CodingKey {
            case prefixList = "prefixList"
        }
    }

    public struct CreateNatGatewayRequest: AWSEncodableShape {
        public struct _SecondaryAllocationIdsEncoding: ArrayCoderProperties { public static let member = "AllocationId" }
        public struct _SecondaryPrivateIpAddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// [Public NAT gateways only] The allocation ID of an Elastic IP address to associate  with the NAT gateway. You cannot specify an Elastic IP address with a private NAT gateway. If the Elastic IP address is associated with another resource, you must first disassociate it.
        public let allocationId: String?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// 			request. For more information, see Ensuring idempotency. Constraint: Maximum 64 ASCII characters.
        public let clientToken: String?
        /// Indicates whether the NAT gateway supports public or private connectivity.  The default is public connectivity.
        public let connectivityType: ConnectivityType?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The private IPv4 address to assign to the NAT gateway. If you don't provide an address, a private IPv4 address will be automatically assigned.
        public let privateIpAddress: String?
        /// Secondary EIP allocation IDs. For more information, see Create a NAT gateway  in the Amazon VPC User Guide.
        @OptionalCustomCoding<EC2ArrayCoder<_SecondaryAllocationIdsEncoding, String>>
        public var secondaryAllocationIds: [String]?
        /// [Private NAT gateway only] The number of secondary private IPv4 addresses you want to assign to the NAT gateway.  For more information about secondary addresses, see Create a NAT gateway  in the Amazon VPC User Guide.
        public let secondaryPrivateIpAddressCount: Int?
        /// Secondary private IPv4 addresses. For more information about secondary addresses, see Create a NAT gateway in the Amazon VPC User Guide.
        @OptionalCustomCoding<EC2ArrayCoder<_SecondaryPrivateIpAddressesEncoding, String>>
        public var secondaryPrivateIpAddresses: [String]?
        /// The ID of the subnet in which to create the NAT gateway.
        public let subnetId: String?
        /// The tags to assign to the NAT gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(allocationId: String? = nil, clientToken: String? = CreateNatGatewayRequest.idempotencyToken(), connectivityType: ConnectivityType? = nil, dryRun: Bool? = nil, privateIpAddress: String? = nil, secondaryAllocationIds: [String]? = nil, secondaryPrivateIpAddressCount: Int? = nil, secondaryPrivateIpAddresses: [String]? = nil, subnetId: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.allocationId = allocationId
            self.clientToken = clientToken
            self.connectivityType = connectivityType
            self.dryRun = dryRun
            self.privateIpAddress = privateIpAddress
            self.secondaryAllocationIds = secondaryAllocationIds
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
            self.secondaryPrivateIpAddresses = secondaryPrivateIpAddresses
            self.subnetId = subnetId
            self.tagSpecifications = tagSpecifications
        }

        public func validate(name: String) throws {
            try self.validate(self.secondaryPrivateIpAddressCount, name: "secondaryPrivateIpAddressCount", parent: name, max: 31)
            try self.validate(self.secondaryPrivateIpAddressCount, name: "secondaryPrivateIpAddressCount", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "AllocationId"
            case clientToken = "ClientToken"
            case connectivityType = "ConnectivityType"
            case dryRun = "DryRun"
            case privateIpAddress = "PrivateIpAddress"
            case secondaryAllocationIds = "SecondaryAllocationId"
            case secondaryPrivateIpAddressCount = "SecondaryPrivateIpAddressCount"
            case secondaryPrivateIpAddresses = "SecondaryPrivateIpAddress"
            case subnetId = "SubnetId"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateNatGatewayResult: AWSDecodableShape {
        /// Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.
        public let clientToken: String?
        /// Information about the NAT gateway.
        public let natGateway: NatGateway?

        public init(clientToken: String? = nil, natGateway: NatGateway? = nil) {
            self.clientToken = clientToken
            self.natGateway = natGateway
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case natGateway = "natGateway"
        }
    }

    public struct CreateNetworkAclEntryRequest: AWSEncodableShape {
        /// The IPv4 network range to allow or deny, in CIDR notation (for example
        /// 		        172.16.0.0/24). We modify the specified CIDR block to its canonical form; for example, if you specify 100.68.0.18/18, we modify it to 100.68.0.0/18.
        public let cidrBlock: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet).
        public let egress: Bool?
        /// ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol
        /// 		        1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.
        public let icmpTypeCode: IcmpTypeCode?
        /// The IPv6 network range to allow or deny, in CIDR notation (for example 2001:db8:1234:1a00::/64).
        public let ipv6CidrBlock: String?
        /// The ID of the network ACL.
        public let networkAclId: String?
        /// TCP or UDP protocols: The range of ports the rule applies to.
        /// 		        Required if specifying protocol 6 (TCP) or 17 (UDP).
        public let portRange: PortRange?
        /// The protocol number. A value of "-1" means all protocols. If you specify "-1" or a 			protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is
        /// 			allowed, regardless of any ports or ICMP types or codes that you specify. If you specify
        /// 			protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and
        /// 			codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6)
        /// 			and specify an IPv6 CIDR block, you must specify an ICMP type and code.
        public let `protocol`: String?
        /// Indicates whether to allow or deny the traffic that matches the rule.
        public let ruleAction: RuleAction?
        /// The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number. Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is reserved for internal use.
        public let ruleNumber: Int?

        public init(cidrBlock: String? = nil, dryRun: Bool? = nil, egress: Bool? = nil, icmpTypeCode: IcmpTypeCode? = nil, ipv6CidrBlock: String? = nil, networkAclId: String? = nil, portRange: PortRange? = nil, protocol: String? = nil, ruleAction: RuleAction? = nil, ruleNumber: Int? = nil) {
            self.cidrBlock = cidrBlock
            self.dryRun = dryRun
            self.egress = egress
            self.icmpTypeCode = icmpTypeCode
            self.ipv6CidrBlock = ipv6CidrBlock
            self.networkAclId = networkAclId
            self.portRange = portRange
            self.`protocol` = `protocol`
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlock = "cidrBlock"
            case dryRun = "dryRun"
            case egress = "egress"
            case icmpTypeCode = "Icmp"
            case ipv6CidrBlock = "ipv6CidrBlock"
            case networkAclId = "networkAclId"
            case portRange = "portRange"
            case `protocol` = "protocol"
            case ruleAction = "ruleAction"
            case ruleNumber = "ruleNumber"
        }
    }

    public struct CreateNetworkAclRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to assign to the network ACL.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(clientToken: String? = CreateNetworkAclRequest.idempotencyToken(), dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil, vpcId: String? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "dryRun"
            case tagSpecifications = "TagSpecification"
            case vpcId = "vpcId"
        }
    }

    public struct CreateNetworkAclResult: AWSDecodableShape {
        /// Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.
        public let clientToken: String?
        /// Information about the network ACL.
        public let networkAcl: NetworkAcl?

        public init(clientToken: String? = nil, networkAcl: NetworkAcl? = nil) {
            self.clientToken = clientToken
            self.networkAcl = networkAcl
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case networkAcl = "networkAcl"
        }
    }

    public struct CreateNetworkInsightsAccessScopeRequest: AWSEncodableShape {
        public struct _ExcludePathsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _MatchPathsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information,  see How to ensure idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The paths to exclude.
        @OptionalCustomCoding<EC2ArrayCoder<_ExcludePathsEncoding, AccessScopePathRequest>>
        public var excludePaths: [AccessScopePathRequest]?
        /// The paths to match.
        @OptionalCustomCoding<EC2ArrayCoder<_MatchPathsEncoding, AccessScopePathRequest>>
        public var matchPaths: [AccessScopePathRequest]?
        /// The tags to apply.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = nil, dryRun: Bool? = nil, excludePaths: [AccessScopePathRequest]? = nil, matchPaths: [AccessScopePathRequest]? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.excludePaths = excludePaths
            self.matchPaths = matchPaths
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case excludePaths = "ExcludePath"
            case matchPaths = "MatchPath"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateNetworkInsightsAccessScopeResult: AWSDecodableShape {
        /// The Network Access Scope.
        public let networkInsightsAccessScope: NetworkInsightsAccessScope?
        /// The Network Access Scope content.
        public let networkInsightsAccessScopeContent: NetworkInsightsAccessScopeContent?

        public init(networkInsightsAccessScope: NetworkInsightsAccessScope? = nil, networkInsightsAccessScopeContent: NetworkInsightsAccessScopeContent? = nil) {
            self.networkInsightsAccessScope = networkInsightsAccessScope
            self.networkInsightsAccessScopeContent = networkInsightsAccessScopeContent
        }

        private enum CodingKeys: String, CodingKey {
            case networkInsightsAccessScope = "networkInsightsAccessScope"
            case networkInsightsAccessScopeContent = "networkInsightsAccessScopeContent"
        }
    }

    public struct CreateNetworkInsightsPathRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information,  see How to ensure idempotency.
        public let clientToken: String?
        /// The ID or ARN of the destination. If the resource is in another account, you must specify an ARN.
        public let destination: String?
        /// The IP address of the destination.
        public let destinationIp: String?
        /// The destination port.
        public let destinationPort: Int?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Scopes the analysis to network paths that match specific filters at the destination. If you specify this parameter, you can't specify the parameter for the destination IP address.
        public let filterAtDestination: PathRequestFilter?
        /// Scopes the analysis to network paths that match specific filters at the source. If you specify this parameter, you can't specify the parameters for the source IP address or the destination port.
        public let filterAtSource: PathRequestFilter?
        /// The protocol.
        public let `protocol`: `Protocol`?
        /// The ID or ARN of the source. If the resource is in another account, you must specify an ARN.
        public let source: String?
        /// The IP address of the source.
        public let sourceIp: String?
        /// The tags to add to the path.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = nil, destination: String? = nil, destinationIp: String? = nil, destinationPort: Int? = nil, dryRun: Bool? = nil, filterAtDestination: PathRequestFilter? = nil, filterAtSource: PathRequestFilter? = nil, protocol: `Protocol`? = nil, source: String? = nil, sourceIp: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.destination = destination
            self.destinationIp = destinationIp
            self.destinationPort = destinationPort
            self.dryRun = dryRun
            self.filterAtDestination = filterAtDestination
            self.filterAtSource = filterAtSource
            self.`protocol` = `protocol`
            self.source = source
            self.sourceIp = sourceIp
            self.tagSpecifications = tagSpecifications
        }

        public func validate(name: String) throws {
            try self.validate(self.destinationIp, name: "destinationIp", parent: name, max: 15)
            try self.validate(self.destinationIp, name: "destinationIp", parent: name, pattern: "^([0-9]{1,3}.){3}[0-9]{1,3}$")
            try self.validate(self.destinationPort, name: "destinationPort", parent: name, max: 65535)
            try self.validate(self.destinationPort, name: "destinationPort", parent: name, min: 0)
            try self.filterAtDestination?.validate(name: "\(name).filterAtDestination")
            try self.filterAtSource?.validate(name: "\(name).filterAtSource")
            try self.validate(self.sourceIp, name: "sourceIp", parent: name, max: 15)
            try self.validate(self.sourceIp, name: "sourceIp", parent: name, pattern: "^([0-9]{1,3}.){3}[0-9]{1,3}$")
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case destination = "Destination"
            case destinationIp = "DestinationIp"
            case destinationPort = "DestinationPort"
            case dryRun = "DryRun"
            case filterAtDestination = "FilterAtDestination"
            case filterAtSource = "FilterAtSource"
            case `protocol` = "Protocol"
            case source = "Source"
            case sourceIp = "SourceIp"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateNetworkInsightsPathResult: AWSDecodableShape {
        /// Information about the path.
        public let networkInsightsPath: NetworkInsightsPath?

        public init(networkInsightsPath: NetworkInsightsPath? = nil) {
            self.networkInsightsPath = networkInsightsPath
        }

        private enum CodingKeys: String, CodingKey {
            case networkInsightsPath = "networkInsightsPath"
        }
    }

    public struct CreateNetworkInterfacePermissionRequest: AWSEncodableShape {
        /// The Amazon Web Services account ID.
        public let awsAccountId: String?
        /// The Amazon Web Service. Currently not supported.
        public let awsService: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is DryRunOperation.
        /// 			Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The type of permission to grant.
        public let permission: InterfacePermissionType?

        public init(awsAccountId: String? = nil, awsService: String? = nil, dryRun: Bool? = nil, networkInterfaceId: String? = nil, permission: InterfacePermissionType? = nil) {
            self.awsAccountId = awsAccountId
            self.awsService = awsService
            self.dryRun = dryRun
            self.networkInterfaceId = networkInterfaceId
            self.permission = permission
        }

        private enum CodingKeys: String, CodingKey {
            case awsAccountId = "AwsAccountId"
            case awsService = "AwsService"
            case dryRun = "DryRun"
            case networkInterfaceId = "NetworkInterfaceId"
            case permission = "Permission"
        }
    }

    public struct CreateNetworkInterfacePermissionResult: AWSDecodableShape {
        /// Information about the permission for the network interface.
        public let interfacePermission: NetworkInterfacePermission?

        public init(interfacePermission: NetworkInterfacePermission? = nil) {
            self.interfacePermission = interfacePermission
        }

        private enum CodingKeys: String, CodingKey {
            case interfacePermission = "interfacePermission"
        }
    }

    public struct CreateNetworkInterfaceRequest: AWSEncodableShape {
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "SecurityGroupId" }
        public struct _Ipv4PrefixesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv6AddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv6PrefixesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PrivateIpAddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// A connection tracking specification for the network interface.
        public let connectionTrackingSpecification: ConnectionTrackingSpecificationRequest?
        /// A description for the network interface.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// If you’re creating a network interface in a dual-stack or IPv6-only subnet, you have the option to assign a primary IPv6 IP address. A primary IPv6 address is an IPv6 GUA address associated with an ENI that you have enabled to use a primary IPv6 address. Use this option if the instance that this ENI will be attached to relies on its IPv6 address not changing. Amazon Web Services will automatically assign an IPv6 address associated with the ENI attached to your instance to be the primary IPv6 address. Once you enable an IPv6 GUA address to be a primary IPv6, you cannot disable it. When you enable an IPv6 GUA address to be a primary IPv6, the first IPv6 GUA will be made the primary IPv6 address until the instance is terminated or the network interface is detached. If you have multiple IPv6 addresses associated with an ENI attached to your instance and you enable a primary IPv6 address, the first IPv6 GUA address associated with the ENI becomes the primary IPv6 address.
        public let enablePrimaryIpv6: Bool?
        /// The IDs of one or more security groups.
        @OptionalCustomCoding<EC2ArrayCoder<_GroupsEncoding, String>>
        public var groups: [String]?
        /// The type of network interface. The default is interface. The only supported values are interface, efa, and trunk.
        public let interfaceType: NetworkInterfaceCreationType?
        /// The number of IPv4 prefixes that Amazon Web Services automatically assigns to the network interface. You can't specify a count of IPv4 prefixes if you've specified one of the following: specific IPv4 prefixes, specific private IPv4 addresses, or a count of private IPv4 addresses.
        public let ipv4PrefixCount: Int?
        /// The IPv4 prefixes assigned to the network interface. You can't specify IPv4 prefixes if you've specified one of the following: a count of IPv4 prefixes, specific private IPv4 addresses, or a count of private IPv4 addresses.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv4PrefixesEncoding, Ipv4PrefixSpecificationRequest>>
        public var ipv4Prefixes: [Ipv4PrefixSpecificationRequest]?
        /// The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't specify a count of IPv6 addresses using this parameter if you've specified  one of the following: specific IPv6 addresses, specific IPv6 prefixes, or a count of IPv6 prefixes. If your subnet has the AssignIpv6AddressOnCreation attribute set, you can override that setting by specifying 0 as the IPv6 address count.
        public let ipv6AddressCount: Int?
        /// The IPv6 addresses from the IPv6 CIDR block range of your subnet. You can't specify IPv6 addresses using this parameter if you've specified one of the  following: a count of IPv6 addresses, specific IPv6 prefixes, or a count of IPv6 prefixes.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv6AddressesEncoding, InstanceIpv6Address>>
        public var ipv6Addresses: [InstanceIpv6Address]?
        /// The number of IPv6 prefixes that Amazon Web Services automatically assigns to the network interface. You can't specify a count of IPv6 prefixes if you've specified one of the following: specific IPv6 prefixes, specific IPv6 addresses, or a count of IPv6 addresses.
        public let ipv6PrefixCount: Int?
        /// The IPv6 prefixes assigned to the network interface. You can't specify IPv6 prefixes if you've specified one of the following: a count of IPv6 prefixes, specific IPv6 addresses, or a count of IPv6 addresses.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv6PrefixesEncoding, Ipv6PrefixSpecificationRequest>>
        public var ipv6Prefixes: [Ipv6PrefixSpecificationRequest]?
        /// The primary private IPv4 address of the network interface. If you don't specify an IPv4 address, Amazon EC2 selects one for you from the subnet's IPv4 CIDR range. If you specify an IP address, you cannot indicate any IP addresses specified in privateIpAddresses as primary (only one IP address can be designated as primary).
        public let privateIpAddress: String?
        /// The private IPv4 addresses. You can't specify private IPv4 addresses if you've specified one of the following: a count of private IPv4 addresses, specific IPv4 prefixes, or a count of IPv4 prefixes.
        @OptionalCustomCoding<EC2ArrayCoder<_PrivateIpAddressesEncoding, PrivateIpAddressSpecification>>
        public var privateIpAddresses: [PrivateIpAddressSpecification]?
        /// The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You can't specify this option and specify more than one private IP address using privateIpAddresses. You can't specify a count of private IPv4 addresses if you've specified one of the following: specific private IPv4 addresses, specific IPv4 prefixes, or a count of IPv4 prefixes.
        public let secondaryPrivateIpAddressCount: Int?
        /// The ID of the subnet to associate with the network interface.
        public let subnetId: String?
        /// The tags to apply to the new network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = CreateNetworkInterfaceRequest.idempotencyToken(), connectionTrackingSpecification: ConnectionTrackingSpecificationRequest? = nil, description: String? = nil, dryRun: Bool? = nil, enablePrimaryIpv6: Bool? = nil, groups: [String]? = nil, interfaceType: NetworkInterfaceCreationType? = nil, ipv4PrefixCount: Int? = nil, ipv4Prefixes: [Ipv4PrefixSpecificationRequest]? = nil, ipv6AddressCount: Int? = nil, ipv6Addresses: [InstanceIpv6Address]? = nil, ipv6PrefixCount: Int? = nil, ipv6Prefixes: [Ipv6PrefixSpecificationRequest]? = nil, privateIpAddress: String? = nil, privateIpAddresses: [PrivateIpAddressSpecification]? = nil, secondaryPrivateIpAddressCount: Int? = nil, subnetId: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.connectionTrackingSpecification = connectionTrackingSpecification
            self.description = description
            self.dryRun = dryRun
            self.enablePrimaryIpv6 = enablePrimaryIpv6
            self.groups = groups
            self.interfaceType = interfaceType
            self.ipv4PrefixCount = ipv4PrefixCount
            self.ipv4Prefixes = ipv4Prefixes
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.ipv6PrefixCount = ipv6PrefixCount
            self.ipv6Prefixes = ipv6Prefixes
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
            self.subnetId = subnetId
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case connectionTrackingSpecification = "ConnectionTrackingSpecification"
            case description = "description"
            case dryRun = "dryRun"
            case enablePrimaryIpv6 = "EnablePrimaryIpv6"
            case groups = "SecurityGroupId"
            case interfaceType = "InterfaceType"
            case ipv4PrefixCount = "Ipv4PrefixCount"
            case ipv4Prefixes = "Ipv4Prefix"
            case ipv6AddressCount = "ipv6AddressCount"
            case ipv6Addresses = "ipv6Addresses"
            case ipv6PrefixCount = "Ipv6PrefixCount"
            case ipv6Prefixes = "Ipv6Prefix"
            case privateIpAddress = "privateIpAddress"
            case privateIpAddresses = "privateIpAddresses"
            case secondaryPrivateIpAddressCount = "secondaryPrivateIpAddressCount"
            case subnetId = "subnetId"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateNetworkInterfaceResult: AWSDecodableShape {
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let clientToken: String?
        /// Information about the network interface.
        public let networkInterface: NetworkInterface?

        public init(clientToken: String? = nil, networkInterface: NetworkInterface? = nil) {
            self.clientToken = clientToken
            self.networkInterface = networkInterface
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case networkInterface = "networkInterface"
        }
    }

    public struct CreatePlacementGroupRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A name for the placement group. Must be unique within the scope of your account for the Region. Constraints: Up to 255 ASCII characters
        public let groupName: String?
        /// The number of partitions. Valid only when Strategy is set to partition.
        public let partitionCount: Int?
        /// Determines how placement groups spread instances.    Host – You can use host only with Outpost placement groups.   Rack – No usage restrictions.
        public let spreadLevel: SpreadLevel?
        /// The placement strategy.
        public let strategy: PlacementStrategy?
        /// The tags to apply to the new placement group.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(dryRun: Bool? = nil, groupName: String? = nil, partitionCount: Int? = nil, spreadLevel: SpreadLevel? = nil, strategy: PlacementStrategy? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.dryRun = dryRun
            self.groupName = groupName
            self.partitionCount = partitionCount
            self.spreadLevel = spreadLevel
            self.strategy = strategy
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case groupName = "groupName"
            case partitionCount = "PartitionCount"
            case spreadLevel = "SpreadLevel"
            case strategy = "strategy"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreatePlacementGroupResult: AWSDecodableShape {
        /// Information about the placement group.
        public let placementGroup: PlacementGroup?

        public init(placementGroup: PlacementGroup? = nil) {
            self.placementGroup = placementGroup
        }

        private enum CodingKeys: String, CodingKey {
            case placementGroup = "placementGroup"
        }
    }

    public struct CreatePublicIpv4PoolRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreatePublicIpv4PoolResult: AWSDecodableShape {
        /// The ID of the public IPv4 pool.
        public let poolId: String?

        public init(poolId: String? = nil) {
            self.poolId = poolId
        }

        private enum CodingKeys: String, CodingKey {
            case poolId = "poolId"
        }
    }

    public struct CreateReplaceRootVolumeTaskRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request.  If you do not specify a client token, a randomly generated token is used for the request  to ensure idempotency. For more information, see Ensuring idempotency.
        public let clientToken: String?
        /// Indicates whether to automatically delete the original root volume after the root volume  replacement task completes. To delete the original root volume, specify true.  If you choose to keep the original root volume after the replacement task completes, you must  manually delete it when you no longer need it.
        public let deleteReplacedRootVolume: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI to use to restore the root volume. The specified AMI must have the  same product code, billing information, architecture type, and virtualization type as  that of the instance. If you want to restore the replacement volume from a specific snapshot, or if you want  to restore it to its launch state, omit this parameter.
        public let imageId: String?
        /// The ID of the instance for which to replace the root volume.
        public let instanceId: String?
        /// The ID of the snapshot from which to restore the replacement root volume. The  specified snapshot must be a snapshot that you previously created from the original  root volume. If you want to restore the replacement root volume to the initial launch state,  or if you want to restore the replacement root volume from an AMI, omit this  parameter.
        public let snapshotId: String?
        /// The tags to apply to the root volume replacement task.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = CreateReplaceRootVolumeTaskRequest.idempotencyToken(), deleteReplacedRootVolume: Bool? = nil, dryRun: Bool? = nil, imageId: String? = nil, instanceId: String? = nil, snapshotId: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.deleteReplacedRootVolume = deleteReplacedRootVolume
            self.dryRun = dryRun
            self.imageId = imageId
            self.instanceId = instanceId
            self.snapshotId = snapshotId
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case deleteReplacedRootVolume = "DeleteReplacedRootVolume"
            case dryRun = "DryRun"
            case imageId = "ImageId"
            case instanceId = "InstanceId"
            case snapshotId = "SnapshotId"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateReplaceRootVolumeTaskResult: AWSDecodableShape {
        /// Information about the root volume replacement task.
        public let replaceRootVolumeTask: ReplaceRootVolumeTask?

        public init(replaceRootVolumeTask: ReplaceRootVolumeTask? = nil) {
            self.replaceRootVolumeTask = replaceRootVolumeTask
        }

        private enum CodingKeys: String, CodingKey {
            case replaceRootVolumeTask = "replaceRootVolumeTask"
        }
    }

    public struct CreateReservedInstancesListingRequest: AWSEncodableShape {
        public struct _PriceSchedulesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier you provide to ensure idempotency of your
        /// 				listings. This helps avoid duplicate listings. For more information, see
        /// 				Ensuring Idempotency.
        public let clientToken: String?
        /// The number of instances that are a part of a Reserved Instance account to be listed in the Reserved Instance Marketplace. This number should be less than or equal to the instance count associated with the Reserved Instance ID specified in this call.
        public let instanceCount: Int?
        /// A list specifying the price of the Standard Reserved Instance for each month remaining in the Reserved Instance term.
        @OptionalCustomCoding<EC2ArrayCoder<_PriceSchedulesEncoding, PriceScheduleSpecification>>
        public var priceSchedules: [PriceScheduleSpecification]?
        /// The ID of the active Standard Reserved Instance.
        public let reservedInstancesId: String?

        public init(clientToken: String? = nil, instanceCount: Int? = nil, priceSchedules: [PriceScheduleSpecification]? = nil, reservedInstancesId: String? = nil) {
            self.clientToken = clientToken
            self.instanceCount = instanceCount
            self.priceSchedules = priceSchedules
            self.reservedInstancesId = reservedInstancesId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case instanceCount = "instanceCount"
            case priceSchedules = "priceSchedules"
            case reservedInstancesId = "reservedInstancesId"
        }
    }

    public struct CreateReservedInstancesListingResult: AWSDecodableShape {
        public struct _ReservedInstancesListingsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Standard Reserved Instance listing.
        @OptionalCustomCoding<EC2ArrayCoder<_ReservedInstancesListingsEncoding, ReservedInstancesListing>>
        public var reservedInstancesListings: [ReservedInstancesListing]?

        public init(reservedInstancesListings: [ReservedInstancesListing]? = nil) {
            self.reservedInstancesListings = reservedInstancesListings
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesListings = "reservedInstancesListingsSet"
        }
    }

    public struct CreateRestoreImageTaskRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The name of the Amazon S3 bucket that contains the stored AMI object.
        public let bucket: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name for the restored AMI. The name must be unique for AMIs in the Region for this account. If you do not provide a name, the new AMI gets the same name as the original AMI.
        public let name: String?
        /// The name of the stored AMI object in the bucket.
        public let objectKey: String?
        /// The tags to apply to the AMI and snapshots on restoration. You can tag the AMI, the snapshots, or both.   To tag the AMI, the value for ResourceType must be image.   To tag the snapshots, the value for ResourceType must be snapshot. The same tag is applied to all of the snapshots that are created.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(bucket: String? = nil, dryRun: Bool? = nil, name: String? = nil, objectKey: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.bucket = bucket
            self.dryRun = dryRun
            self.name = name
            self.objectKey = objectKey
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case dryRun = "DryRun"
            case name = "Name"
            case objectKey = "ObjectKey"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateRestoreImageTaskResult: AWSDecodableShape {
        /// The AMI ID.
        public let imageId: String?

        public init(imageId: String? = nil) {
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "imageId"
        }
    }

    public struct CreateRouteRequest: AWSEncodableShape {
        /// The ID of the carrier gateway. You can only use this option when the VPC contains a subnet which is associated with a Wavelength Zone.
        public let carrierGatewayId: String?
        /// The Amazon Resource Name (ARN) of the core network.
        public let coreNetworkArn: String?
        /// The IPv4 CIDR address block used for the destination match. Routing decisions are based on the most specific match. We modify the specified CIDR block to its canonical form; for example, if you specify 100.68.0.18/18, we modify it to 100.68.0.0/18.
        public let destinationCidrBlock: String?
        /// The IPv6 CIDR block used for the destination match. Routing decisions are based on the most specific match.
        public let destinationIpv6CidrBlock: String?
        /// The ID of a prefix list used for the destination match.
        public let destinationPrefixListId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// [IPv6 traffic only] The ID of an egress-only internet gateway.
        public let egressOnlyInternetGatewayId: String?
        /// The ID of an internet gateway or virtual private gateway attached to your
        /// 			VPC.
        public let gatewayId: String?
        /// The ID of a NAT instance in your VPC. The operation fails if you specify an instance ID unless exactly one network interface is attached.
        public let instanceId: String?
        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// [IPv4 traffic only] The ID of a NAT gateway.
        public let natGatewayId: String?
        /// The ID of a network interface.
        public let networkInterfaceId: String?
        /// The ID of the route table for the route.
        public let routeTableId: String?
        /// The ID of a transit gateway.
        public let transitGatewayId: String?
        /// The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
        public let vpcEndpointId: String?
        /// The ID of a VPC peering connection.
        public let vpcPeeringConnectionId: String?

        public init(carrierGatewayId: String? = nil, coreNetworkArn: String? = nil, destinationCidrBlock: String? = nil, destinationIpv6CidrBlock: String? = nil, destinationPrefixListId: String? = nil, dryRun: Bool? = nil, egressOnlyInternetGatewayId: String? = nil, gatewayId: String? = nil, instanceId: String? = nil, localGatewayId: String? = nil, natGatewayId: String? = nil, networkInterfaceId: String? = nil, routeTableId: String? = nil, transitGatewayId: String? = nil, vpcEndpointId: String? = nil, vpcPeeringConnectionId: String? = nil) {
            self.carrierGatewayId = carrierGatewayId
            self.coreNetworkArn = coreNetworkArn
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
            self.destinationPrefixListId = destinationPrefixListId
            self.dryRun = dryRun
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
            self.gatewayId = gatewayId
            self.instanceId = instanceId
            self.localGatewayId = localGatewayId
            self.natGatewayId = natGatewayId
            self.networkInterfaceId = networkInterfaceId
            self.routeTableId = routeTableId
            self.transitGatewayId = transitGatewayId
            self.vpcEndpointId = vpcEndpointId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGatewayId = "CarrierGatewayId"
            case coreNetworkArn = "CoreNetworkArn"
            case destinationCidrBlock = "destinationCidrBlock"
            case destinationIpv6CidrBlock = "destinationIpv6CidrBlock"
            case destinationPrefixListId = "DestinationPrefixListId"
            case dryRun = "dryRun"
            case egressOnlyInternetGatewayId = "egressOnlyInternetGatewayId"
            case gatewayId = "gatewayId"
            case instanceId = "instanceId"
            case localGatewayId = "LocalGatewayId"
            case natGatewayId = "natGatewayId"
            case networkInterfaceId = "networkInterfaceId"
            case routeTableId = "routeTableId"
            case transitGatewayId = "TransitGatewayId"
            case vpcEndpointId = "VpcEndpointId"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct CreateRouteResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct CreateRouteTableRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to assign to the route table.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(clientToken: String? = CreateRouteTableRequest.idempotencyToken(), dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil, vpcId: String? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "dryRun"
            case tagSpecifications = "TagSpecification"
            case vpcId = "vpcId"
        }
    }

    public struct CreateRouteTableResult: AWSDecodableShape {
        /// Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.
        public let clientToken: String?
        /// Information about the route table.
        public let routeTable: RouteTable?

        public init(clientToken: String? = nil, routeTable: RouteTable? = nil) {
            self.clientToken = clientToken
            self.routeTable = routeTable
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case routeTable = "routeTable"
        }
    }

    public struct CreateSecurityGroupRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description for the security group. Constraints: Up to 255 characters in length Valid characters: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name of the security group. Constraints: Up to 255 characters in length. Cannot start with sg-. Valid characters: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
        public let groupName: String?
        /// The tags to assign to the security group.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the VPC. Required for a nondefault VPC.
        public let vpcId: String?

        public init(description: String? = nil, dryRun: Bool? = nil, groupName: String? = nil, tagSpecifications: [TagSpecification]? = nil, vpcId: String? = nil) {
            self.description = description
            self.dryRun = dryRun
            self.groupName = groupName
            self.tagSpecifications = tagSpecifications
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "GroupDescription"
            case dryRun = "dryRun"
            case groupName = "GroupName"
            case tagSpecifications = "TagSpecification"
            case vpcId = "VpcId"
        }
    }

    public struct CreateSecurityGroupResult: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the security group.
        public let groupId: String?
        /// The tags assigned to the security group.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(groupId: String? = nil, tags: [Tag]? = nil) {
            self.groupId = groupId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "groupId"
            case tags = "tagSet"
        }
    }

    public struct CreateSnapshotRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description for the snapshot.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Amazon Resource Name (ARN) of the Outpost on which to create a local   	snapshot.   To create a snapshot of a volume in a Region, omit this parameter. The snapshot  				is created in the same Region as the volume.   To create a snapshot of a volume on an Outpost and store the snapshot in the  				Region, omit this parameter. The snapshot is created in the Region for the  				Outpost.   To create a snapshot of a volume on an Outpost and store the snapshot on an  			Outpost, specify the ARN of the destination Outpost. The snapshot must be created on  			the same Outpost as the volume.   For more information, see Create local snapshots from volumes on an Outpost in the Amazon EBS User Guide.
        public let outpostArn: String?
        /// The tags to apply to the snapshot during creation.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the Amazon EBS volume.
        public let volumeId: String?

        public init(description: String? = nil, dryRun: Bool? = nil, outpostArn: String? = nil, tagSpecifications: [TagSpecification]? = nil, volumeId: String? = nil) {
            self.description = description
            self.dryRun = dryRun
            self.outpostArn = outpostArn
            self.tagSpecifications = tagSpecifications
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case dryRun = "dryRun"
            case outpostArn = "OutpostArn"
            case tagSpecifications = "TagSpecification"
            case volumeId = "VolumeId"
        }
    }

    public struct CreateSnapshotsRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Copies the tags from the specified volume to corresponding snapshot.
        public let copyTagsFromSource: CopyTagsFromSource?
        ///  A description propagated to every snapshot specified by the instance.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The instance to specify which volumes should be included in the snapshots.
        public let instanceSpecification: InstanceSpecification?
        /// The Amazon Resource Name (ARN) of the Outpost on which to create the local   		snapshots.   To create snapshots from an instance in a Region, omit this parameter. The  				snapshots are created in the same Region as the instance.   To create snapshots from an instance on an Outpost and store the snapshots  				in the Region, omit this parameter. The snapshots are created in the Region  				for the Outpost.   To create snapshots from an instance on an Outpost and store the snapshots  				on an Outpost, specify the ARN of the destination Outpost. The snapshots must  				be created on the same Outpost as the instance.   For more information, see  		Create multi-volume local snapshots from instances on an Outpost in the  		Amazon EBS User Guide.
        public let outpostArn: String?
        /// Tags to apply to every snapshot specified by the instance.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(copyTagsFromSource: CopyTagsFromSource? = nil, description: String? = nil, dryRun: Bool? = nil, instanceSpecification: InstanceSpecification? = nil, outpostArn: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.copyTagsFromSource = copyTagsFromSource
            self.description = description
            self.dryRun = dryRun
            self.instanceSpecification = instanceSpecification
            self.outpostArn = outpostArn
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case copyTagsFromSource = "CopyTagsFromSource"
            case description = "Description"
            case dryRun = "DryRun"
            case instanceSpecification = "InstanceSpecification"
            case outpostArn = "OutpostArn"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateSnapshotsResult: AWSDecodableShape {
        public struct _SnapshotsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// List of snapshots.
        @OptionalCustomCoding<EC2ArrayCoder<_SnapshotsEncoding, SnapshotInfo>>
        public var snapshots: [SnapshotInfo]?

        public init(snapshots: [SnapshotInfo]? = nil) {
            self.snapshots = snapshots
        }

        private enum CodingKeys: String, CodingKey {
            case snapshots = "snapshotSet"
        }
    }

    public struct CreateSpotDatafeedSubscriptionRequest: AWSEncodableShape {
        /// The name of the Amazon S3 bucket in which to store the Spot Instance data feed. For more information about bucket names, see Rules for bucket naming in the Amazon S3 Developer Guide.
        public let bucket: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The prefix for the data feed file names.
        public let prefix: String?

        public init(bucket: String? = nil, dryRun: Bool? = nil, prefix: String? = nil) {
            self.bucket = bucket
            self.dryRun = dryRun
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "bucket"
            case dryRun = "dryRun"
            case prefix = "prefix"
        }
    }

    public struct CreateSpotDatafeedSubscriptionResult: AWSDecodableShape {
        /// The Spot Instance data feed subscription.
        public let spotDatafeedSubscription: SpotDatafeedSubscription?

        public init(spotDatafeedSubscription: SpotDatafeedSubscription? = nil) {
            self.spotDatafeedSubscription = spotDatafeedSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case spotDatafeedSubscription = "spotDatafeedSubscription"
        }
    }

    public struct CreateStoreImageTaskRequest: AWSEncodableShape {
        public struct _S3ObjectTagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The name of the Amazon S3 bucket in which the AMI object will be stored. The bucket must be in the Region in which the request is being made. The AMI object appears in the bucket only after the upload task has completed.
        public let bucket: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI.
        public let imageId: String?
        /// The tags to apply to the AMI object that will be stored in the Amazon S3 bucket.
        @OptionalCustomCoding<EC2ArrayCoder<_S3ObjectTagsEncoding, S3ObjectTag>>
        public var s3ObjectTags: [S3ObjectTag]?

        public init(bucket: String? = nil, dryRun: Bool? = nil, imageId: String? = nil, s3ObjectTags: [S3ObjectTag]? = nil) {
            self.bucket = bucket
            self.dryRun = dryRun
            self.imageId = imageId
            self.s3ObjectTags = s3ObjectTags
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case dryRun = "DryRun"
            case imageId = "ImageId"
            case s3ObjectTags = "S3ObjectTag"
        }
    }

    public struct CreateStoreImageTaskResult: AWSDecodableShape {
        /// The name of the stored AMI object in the S3 bucket.
        public let objectKey: String?

        public init(objectKey: String? = nil) {
            self.objectKey = objectKey
        }

        private enum CodingKeys: String, CodingKey {
            case objectKey = "objectKey"
        }
    }

    public struct CreateSubnetCidrReservationRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IPv4 or IPV6 CIDR range to reserve.
        public let cidr: String?
        /// The description to assign to the subnet CIDR reservation.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The type of reservation. The reservation type determines how the reserved IP addresses are  assigned to resources.    prefix - Amazon Web Services assigns the reserved IP addresses to  network interfaces.    explicit - You assign the reserved IP addresses to network interfaces.
        public let reservationType: SubnetCidrReservationType?
        /// The ID of the subnet.
        public let subnetId: String?
        /// The tags to assign to the subnet CIDR reservation.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(cidr: String? = nil, description: String? = nil, dryRun: Bool? = nil, reservationType: SubnetCidrReservationType? = nil, subnetId: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.cidr = cidr
            self.description = description
            self.dryRun = dryRun
            self.reservationType = reservationType
            self.subnetId = subnetId
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case description = "Description"
            case dryRun = "DryRun"
            case reservationType = "ReservationType"
            case subnetId = "SubnetId"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateSubnetCidrReservationResult: AWSDecodableShape {
        /// Information about the created subnet CIDR reservation.
        public let subnetCidrReservation: SubnetCidrReservation?

        public init(subnetCidrReservation: SubnetCidrReservation? = nil) {
            self.subnetCidrReservation = subnetCidrReservation
        }

        private enum CodingKeys: String, CodingKey {
            case subnetCidrReservation = "subnetCidrReservation"
        }
    }

    public struct CreateSubnetRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Availability Zone or Local Zone for the subnet. Default: Amazon Web Services selects one for you. If you create more than one subnet in your VPC, we  do not necessarily select a different zone for each subnet. To create a subnet in a Local Zone, set this value to the Local Zone ID, for example us-west-2-lax-1a. For information about the Regions that support Local Zones,  see Local Zones locations. To create a subnet in an Outpost, set this value to the Availability Zone for the Outpost and specify the Outpost ARN.
        public let availabilityZone: String?
        /// The AZ ID or the Local Zone ID of the subnet.
        public let availabilityZoneId: String?
        /// The IPv4 network range for the subnet, in CIDR notation. For example, 10.0.0.0/24.  We modify the specified CIDR block to its canonical form; for example, if you specify  100.68.0.18/18, we modify it to 100.68.0.0/18. This parameter is not supported for an IPv6 only subnet.
        public let cidrBlock: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// An IPv4 IPAM pool ID for the subnet.
        public let ipv4IpamPoolId: String?
        /// An IPv4 netmask length for the subnet.
        public let ipv4NetmaskLength: Int?
        /// The IPv6 network range for the subnet, in CIDR notation. This parameter is required for an IPv6 only subnet.
        public let ipv6CidrBlock: String?
        /// An IPv6 IPAM pool ID for the subnet.
        public let ipv6IpamPoolId: String?
        /// Indicates whether to create an IPv6 only subnet.
        public let ipv6Native: Bool?
        /// An IPv6 netmask length for the subnet.
        public let ipv6NetmaskLength: Int?
        /// The Amazon Resource Name (ARN) of the Outpost. If you specify an Outpost ARN, you must also specify the Availability Zone of the Outpost subnet.
        public let outpostArn: String?
        /// The tags to assign to the subnet.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(availabilityZone: String? = nil, availabilityZoneId: String? = nil, cidrBlock: String? = nil, dryRun: Bool? = nil, ipv4IpamPoolId: String? = nil, ipv4NetmaskLength: Int? = nil, ipv6CidrBlock: String? = nil, ipv6IpamPoolId: String? = nil, ipv6Native: Bool? = nil, ipv6NetmaskLength: Int? = nil, outpostArn: String? = nil, tagSpecifications: [TagSpecification]? = nil, vpcId: String? = nil) {
            self.availabilityZone = availabilityZone
            self.availabilityZoneId = availabilityZoneId
            self.cidrBlock = cidrBlock
            self.dryRun = dryRun
            self.ipv4IpamPoolId = ipv4IpamPoolId
            self.ipv4NetmaskLength = ipv4NetmaskLength
            self.ipv6CidrBlock = ipv6CidrBlock
            self.ipv6IpamPoolId = ipv6IpamPoolId
            self.ipv6Native = ipv6Native
            self.ipv6NetmaskLength = ipv6NetmaskLength
            self.outpostArn = outpostArn
            self.tagSpecifications = tagSpecifications
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case availabilityZoneId = "AvailabilityZoneId"
            case cidrBlock = "CidrBlock"
            case dryRun = "dryRun"
            case ipv4IpamPoolId = "Ipv4IpamPoolId"
            case ipv4NetmaskLength = "Ipv4NetmaskLength"
            case ipv6CidrBlock = "Ipv6CidrBlock"
            case ipv6IpamPoolId = "Ipv6IpamPoolId"
            case ipv6Native = "Ipv6Native"
            case ipv6NetmaskLength = "Ipv6NetmaskLength"
            case outpostArn = "OutpostArn"
            case tagSpecifications = "TagSpecification"
            case vpcId = "VpcId"
        }
    }

    public struct CreateSubnetResult: AWSDecodableShape {
        /// Information about the subnet.
        public let subnet: Subnet?

        public init(subnet: Subnet? = nil) {
            self.subnet = subnet
        }

        private enum CodingKeys: String, CodingKey {
            case subnet = "subnet"
        }
    }

    public struct CreateTagsRequest: AWSEncodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the resources, separated by spaces. Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.
        @OptionalCustomCoding<EC2StandardArrayCoder<String>>
        public var resources: [String]?
        /// The tags. The value parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(dryRun: Bool? = nil, resources: [String]? = nil, tags: [Tag]? = nil) {
            self.dryRun = dryRun
            self.resources = resources
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case resources = "ResourceId"
            case tags = "Tag"
        }
    }

    public struct CreateTrafficMirrorFilterRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
        public let clientToken: String?
        /// The description of the Traffic Mirror filter.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to assign to a Traffic Mirror filter.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = CreateTrafficMirrorFilterRequest.idempotencyToken(), description: String? = nil, dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "DryRun"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateTrafficMirrorFilterResult: AWSDecodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
        public let clientToken: String?
        /// Information about the Traffic Mirror filter.
        public let trafficMirrorFilter: TrafficMirrorFilter?

        public init(clientToken: String? = nil, trafficMirrorFilter: TrafficMirrorFilter? = nil) {
            self.clientToken = clientToken
            self.trafficMirrorFilter = trafficMirrorFilter
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case trafficMirrorFilter = "trafficMirrorFilter"
        }
    }

    public struct CreateTrafficMirrorFilterRuleRequest: AWSEncodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
        public let clientToken: String?
        /// The description of the Traffic Mirror rule.
        public let description: String?
        /// The destination CIDR block to assign to the Traffic Mirror rule.
        public let destinationCidrBlock: String?
        /// The destination port range.
        public let destinationPortRange: TrafficMirrorPortRangeRequest?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The protocol, for example UDP, to assign to the Traffic Mirror rule. For information about the protocol value, see Protocol Numbers on the  Internet Assigned Numbers Authority (IANA) website.
        public let `protocol`: Int?
        /// The action to take on the filtered traffic.
        public let ruleAction: TrafficMirrorRuleAction?
        /// The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
        public let ruleNumber: Int?
        /// The source CIDR block to assign to the Traffic Mirror rule.
        public let sourceCidrBlock: String?
        /// The source port range.
        public let sourcePortRange: TrafficMirrorPortRangeRequest?
        /// The type of traffic.
        public let trafficDirection: TrafficDirection?
        /// The ID of the filter that this rule is associated with.
        public let trafficMirrorFilterId: String?

        public init(clientToken: String? = CreateTrafficMirrorFilterRuleRequest.idempotencyToken(), description: String? = nil, destinationCidrBlock: String? = nil, destinationPortRange: TrafficMirrorPortRangeRequest? = nil, dryRun: Bool? = nil, protocol: Int? = nil, ruleAction: TrafficMirrorRuleAction? = nil, ruleNumber: Int? = nil, sourceCidrBlock: String? = nil, sourcePortRange: TrafficMirrorPortRangeRequest? = nil, trafficDirection: TrafficDirection? = nil, trafficMirrorFilterId: String? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationPortRange = destinationPortRange
            self.dryRun = dryRun
            self.`protocol` = `protocol`
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
            self.sourceCidrBlock = sourceCidrBlock
            self.sourcePortRange = sourcePortRange
            self.trafficDirection = trafficDirection
            self.trafficMirrorFilterId = trafficMirrorFilterId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case destinationCidrBlock = "DestinationCidrBlock"
            case destinationPortRange = "DestinationPortRange"
            case dryRun = "DryRun"
            case `protocol` = "Protocol"
            case ruleAction = "RuleAction"
            case ruleNumber = "RuleNumber"
            case sourceCidrBlock = "SourceCidrBlock"
            case sourcePortRange = "SourcePortRange"
            case trafficDirection = "TrafficDirection"
            case trafficMirrorFilterId = "TrafficMirrorFilterId"
        }
    }

    public struct CreateTrafficMirrorFilterRuleResult: AWSDecodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
        public let clientToken: String?
        /// The Traffic Mirror rule.
        public let trafficMirrorFilterRule: TrafficMirrorFilterRule?

        public init(clientToken: String? = nil, trafficMirrorFilterRule: TrafficMirrorFilterRule? = nil) {
            self.clientToken = clientToken
            self.trafficMirrorFilterRule = trafficMirrorFilterRule
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case trafficMirrorFilterRule = "trafficMirrorFilterRule"
        }
    }

    public struct CreateTrafficMirrorSessionRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
        public let clientToken: String?
        /// The description of the Traffic Mirror session.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the source network interface.
        public let networkInterfaceId: String?
        /// The number of bytes in each packet to mirror. These are bytes after the VXLAN header. Do not specify this parameter when you want to mirror the entire packet. To mirror a subset of the packet, set this to the length (in bytes) that you want to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. If you do not want to mirror the entire packet, use the PacketLength parameter to specify the number of bytes in each packet to mirror. For sessions with Network Load Balancer (NLB) Traffic Mirror targets the default PacketLength will be set to 8500. Valid values are 1-8500. Setting a PacketLength greater than 8500 will result in an error response.
        public let packetLength: Int?
        /// The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets. Valid values are 1-32766.
        public let sessionNumber: Int?
        /// The tags to assign to a Traffic Mirror session.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the Traffic Mirror filter.
        public let trafficMirrorFilterId: String?
        /// The ID of the Traffic Mirror target.
        public let trafficMirrorTargetId: String?
        /// The VXLAN ID for the Traffic Mirror session. For more information about the VXLAN protocol, see RFC 7348. If you do not specify a VirtualNetworkId, an account-wide unique id is chosen at random.
        public let virtualNetworkId: Int?

        public init(clientToken: String? = CreateTrafficMirrorSessionRequest.idempotencyToken(), description: String? = nil, dryRun: Bool? = nil, networkInterfaceId: String? = nil, packetLength: Int? = nil, sessionNumber: Int? = nil, tagSpecifications: [TagSpecification]? = nil, trafficMirrorFilterId: String? = nil, trafficMirrorTargetId: String? = nil, virtualNetworkId: Int? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.networkInterfaceId = networkInterfaceId
            self.packetLength = packetLength
            self.sessionNumber = sessionNumber
            self.tagSpecifications = tagSpecifications
            self.trafficMirrorFilterId = trafficMirrorFilterId
            self.trafficMirrorTargetId = trafficMirrorTargetId
            self.virtualNetworkId = virtualNetworkId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "DryRun"
            case networkInterfaceId = "NetworkInterfaceId"
            case packetLength = "PacketLength"
            case sessionNumber = "SessionNumber"
            case tagSpecifications = "TagSpecification"
            case trafficMirrorFilterId = "TrafficMirrorFilterId"
            case trafficMirrorTargetId = "TrafficMirrorTargetId"
            case virtualNetworkId = "VirtualNetworkId"
        }
    }

    public struct CreateTrafficMirrorSessionResult: AWSDecodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
        public let clientToken: String?
        /// Information about the Traffic Mirror session.
        public let trafficMirrorSession: TrafficMirrorSession?

        public init(clientToken: String? = nil, trafficMirrorSession: TrafficMirrorSession? = nil) {
            self.clientToken = clientToken
            self.trafficMirrorSession = trafficMirrorSession
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case trafficMirrorSession = "trafficMirrorSession"
        }
    }

    public struct CreateTrafficMirrorTargetRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
        public let clientToken: String?
        /// The description of the Traffic Mirror target.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Gateway Load Balancer endpoint.
        public let gatewayLoadBalancerEndpointId: String?
        /// The network interface ID that is associated with the target.
        public let networkInterfaceId: String?
        /// The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.
        public let networkLoadBalancerArn: String?
        /// The tags to assign to the Traffic Mirror target.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = CreateTrafficMirrorTargetRequest.idempotencyToken(), description: String? = nil, dryRun: Bool? = nil, gatewayLoadBalancerEndpointId: String? = nil, networkInterfaceId: String? = nil, networkLoadBalancerArn: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.gatewayLoadBalancerEndpointId = gatewayLoadBalancerEndpointId
            self.networkInterfaceId = networkInterfaceId
            self.networkLoadBalancerArn = networkLoadBalancerArn
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "DryRun"
            case gatewayLoadBalancerEndpointId = "GatewayLoadBalancerEndpointId"
            case networkInterfaceId = "NetworkInterfaceId"
            case networkLoadBalancerArn = "NetworkLoadBalancerArn"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateTrafficMirrorTargetResult: AWSDecodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
        public let clientToken: String?
        /// Information about the Traffic Mirror target.
        public let trafficMirrorTarget: TrafficMirrorTarget?

        public init(clientToken: String? = nil, trafficMirrorTarget: TrafficMirrorTarget? = nil) {
            self.clientToken = clientToken
            self.trafficMirrorTarget = trafficMirrorTarget
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case trafficMirrorTarget = "trafficMirrorTarget"
        }
    }

    public struct CreateTransitGatewayConnectPeerRequest: AWSEncodableShape {
        public struct _InsideCidrBlocksEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The BGP options for the Connect peer.
        public let bgpOptions: TransitGatewayConnectRequestBgpOptions?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The range of inside IP addresses that are used for BGP peering. You must specify a size /29 IPv4 CIDR block from the 169.254.0.0/16 range. The first address from the range must be configured on the appliance as the BGP IP address. You can also optionally specify a size /125 IPv6 CIDR block from the fd00::/8 range.
        @OptionalCustomCoding<EC2ArrayCoder<_InsideCidrBlocksEncoding, String>>
        public var insideCidrBlocks: [String]?
        /// The peer IP address (GRE outer IP address) on the appliance side of the Connect peer.
        public let peerAddress: String?
        /// The tags to apply to the Connect peer.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The peer IP address (GRE outer IP address) on the transit gateway side of the Connect peer, which must be specified from a transit gateway CIDR block. If not specified, Amazon automatically assigns the first available IP address from the transit gateway CIDR block.
        public let transitGatewayAddress: String?
        /// The ID of the Connect attachment.
        public let transitGatewayAttachmentId: String?

        public init(bgpOptions: TransitGatewayConnectRequestBgpOptions? = nil, dryRun: Bool? = nil, insideCidrBlocks: [String]? = nil, peerAddress: String? = nil, tagSpecifications: [TagSpecification]? = nil, transitGatewayAddress: String? = nil, transitGatewayAttachmentId: String? = nil) {
            self.bgpOptions = bgpOptions
            self.dryRun = dryRun
            self.insideCidrBlocks = insideCidrBlocks
            self.peerAddress = peerAddress
            self.tagSpecifications = tagSpecifications
            self.transitGatewayAddress = transitGatewayAddress
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case bgpOptions = "BgpOptions"
            case dryRun = "DryRun"
            case insideCidrBlocks = "InsideCidrBlocks"
            case peerAddress = "PeerAddress"
            case tagSpecifications = "TagSpecification"
            case transitGatewayAddress = "TransitGatewayAddress"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct CreateTransitGatewayConnectPeerResult: AWSDecodableShape {
        /// Information about the Connect peer.
        public let transitGatewayConnectPeer: TransitGatewayConnectPeer?

        public init(transitGatewayConnectPeer: TransitGatewayConnectPeer? = nil) {
            self.transitGatewayConnectPeer = transitGatewayConnectPeer
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayConnectPeer = "transitGatewayConnectPeer"
        }
    }

    public struct CreateTransitGatewayConnectRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Connect attachment options.
        public let options: CreateTransitGatewayConnectRequestOptions?
        /// The tags to apply to the Connect attachment.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the transit gateway attachment. You can specify a VPC attachment or Amazon Web Services Direct Connect attachment.
        public let transportTransitGatewayAttachmentId: String?

        public init(dryRun: Bool? = nil, options: CreateTransitGatewayConnectRequestOptions? = nil, tagSpecifications: [TagSpecification]? = nil, transportTransitGatewayAttachmentId: String? = nil) {
            self.dryRun = dryRun
            self.options = options
            self.tagSpecifications = tagSpecifications
            self.transportTransitGatewayAttachmentId = transportTransitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case options = "Options"
            case tagSpecifications = "TagSpecification"
            case transportTransitGatewayAttachmentId = "TransportTransitGatewayAttachmentId"
        }
    }

    public struct CreateTransitGatewayConnectRequestOptions: AWSEncodableShape {
        /// The tunnel protocol.
        public let `protocol`: ProtocolValue?

        public init(protocol: ProtocolValue? = nil) {
            self.`protocol` = `protocol`
        }

        private enum CodingKeys: String, CodingKey {
            case `protocol` = "Protocol"
        }
    }

    public struct CreateTransitGatewayConnectResult: AWSDecodableShape {
        /// Information about the Connect attachment.
        public let transitGatewayConnect: TransitGatewayConnect?

        public init(transitGatewayConnect: TransitGatewayConnect? = nil) {
            self.transitGatewayConnect = transitGatewayConnect
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayConnect = "transitGatewayConnect"
        }
    }

    public struct CreateTransitGatewayMulticastDomainRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The options for the transit gateway multicast domain.
        public let options: CreateTransitGatewayMulticastDomainRequestOptions?
        /// The tags for the transit gateway multicast domain.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?

        public init(dryRun: Bool? = nil, options: CreateTransitGatewayMulticastDomainRequestOptions? = nil, tagSpecifications: [TagSpecification]? = nil, transitGatewayId: String? = nil) {
            self.dryRun = dryRun
            self.options = options
            self.tagSpecifications = tagSpecifications
            self.transitGatewayId = transitGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case options = "Options"
            case tagSpecifications = "TagSpecification"
            case transitGatewayId = "TransitGatewayId"
        }
    }

    public struct CreateTransitGatewayMulticastDomainRequestOptions: AWSEncodableShape {
        /// Indicates whether to automatically accept cross-account subnet associations that are associated with the transit gateway multicast domain.
        public let autoAcceptSharedAssociations: AutoAcceptSharedAssociationsValue?
        /// Specify whether to enable Internet Group Management Protocol (IGMP) version 2 for the transit gateway multicast domain.
        public let igmpv2Support: Igmpv2SupportValue?
        /// Specify whether to enable support for statically configuring multicast group sources for a domain.
        public let staticSourcesSupport: StaticSourcesSupportValue?

        public init(autoAcceptSharedAssociations: AutoAcceptSharedAssociationsValue? = nil, igmpv2Support: Igmpv2SupportValue? = nil, staticSourcesSupport: StaticSourcesSupportValue? = nil) {
            self.autoAcceptSharedAssociations = autoAcceptSharedAssociations
            self.igmpv2Support = igmpv2Support
            self.staticSourcesSupport = staticSourcesSupport
        }

        private enum CodingKeys: String, CodingKey {
            case autoAcceptSharedAssociations = "AutoAcceptSharedAssociations"
            case igmpv2Support = "Igmpv2Support"
            case staticSourcesSupport = "StaticSourcesSupport"
        }
    }

    public struct CreateTransitGatewayMulticastDomainResult: AWSDecodableShape {
        /// Information about the transit gateway multicast domain.
        public let transitGatewayMulticastDomain: TransitGatewayMulticastDomain?

        public init(transitGatewayMulticastDomain: TransitGatewayMulticastDomain? = nil) {
            self.transitGatewayMulticastDomain = transitGatewayMulticastDomain
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayMulticastDomain = "transitGatewayMulticastDomain"
        }
    }

    public struct CreateTransitGatewayPeeringAttachmentRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Requests a transit gateway peering attachment.
        public let options: CreateTransitGatewayPeeringAttachmentRequestOptions?
        /// The ID of the Amazon Web Services account that owns the peer transit gateway.
        public let peerAccountId: String?
        /// The Region where the peer transit gateway is located.
        public let peerRegion: String?
        /// The ID of the peer transit gateway with which to create the peering attachment.
        public let peerTransitGatewayId: String?
        /// The tags to apply to the transit gateway peering attachment.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?

        public init(dryRun: Bool? = nil, options: CreateTransitGatewayPeeringAttachmentRequestOptions? = nil, peerAccountId: String? = nil, peerRegion: String? = nil, peerTransitGatewayId: String? = nil, tagSpecifications: [TagSpecification]? = nil, transitGatewayId: String? = nil) {
            self.dryRun = dryRun
            self.options = options
            self.peerAccountId = peerAccountId
            self.peerRegion = peerRegion
            self.peerTransitGatewayId = peerTransitGatewayId
            self.tagSpecifications = tagSpecifications
            self.transitGatewayId = transitGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case options = "Options"
            case peerAccountId = "PeerAccountId"
            case peerRegion = "PeerRegion"
            case peerTransitGatewayId = "PeerTransitGatewayId"
            case tagSpecifications = "TagSpecification"
            case transitGatewayId = "TransitGatewayId"
        }
    }

    public struct CreateTransitGatewayPeeringAttachmentRequestOptions: AWSEncodableShape {
        /// Indicates whether dynamic routing is enabled or disabled.
        public let dynamicRouting: DynamicRoutingValue?

        public init(dynamicRouting: DynamicRoutingValue? = nil) {
            self.dynamicRouting = dynamicRouting
        }

        private enum CodingKeys: String, CodingKey {
            case dynamicRouting = "DynamicRouting"
        }
    }

    public struct CreateTransitGatewayPeeringAttachmentResult: AWSDecodableShape {
        /// The transit gateway peering attachment.
        public let transitGatewayPeeringAttachment: TransitGatewayPeeringAttachment?

        public init(transitGatewayPeeringAttachment: TransitGatewayPeeringAttachment? = nil) {
            self.transitGatewayPeeringAttachment = transitGatewayPeeringAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayPeeringAttachment = "transitGatewayPeeringAttachment"
        }
    }

    public struct CreateTransitGatewayPolicyTableRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags specification for the transit gateway policy table created during the request.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the transit gateway used for the policy table.
        public let transitGatewayId: String?

        public init(dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil, transitGatewayId: String? = nil) {
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
            self.transitGatewayId = transitGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case tagSpecifications = "TagSpecifications"
            case transitGatewayId = "TransitGatewayId"
        }
    }

    public struct CreateTransitGatewayPolicyTableResult: AWSDecodableShape {
        /// Describes the created transit gateway policy table.
        public let transitGatewayPolicyTable: TransitGatewayPolicyTable?

        public init(transitGatewayPolicyTable: TransitGatewayPolicyTable? = nil) {
            self.transitGatewayPolicyTable = transitGatewayPolicyTable
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayPolicyTable = "transitGatewayPolicyTable"
        }
    }

    public struct CreateTransitGatewayPrefixListReferenceRequest: AWSEncodableShape {
        /// Indicates whether to drop traffic that matches this route.
        public let blackhole: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the prefix list that is used for destination matches.
        public let prefixListId: String?
        /// The ID of the attachment to which traffic is routed.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(blackhole: Bool? = nil, dryRun: Bool? = nil, prefixListId: String? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableId: String? = nil) {
            self.blackhole = blackhole
            self.dryRun = dryRun
            self.prefixListId = prefixListId
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case blackhole = "Blackhole"
            case dryRun = "DryRun"
            case prefixListId = "PrefixListId"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct CreateTransitGatewayPrefixListReferenceResult: AWSDecodableShape {
        /// Information about the prefix list reference.
        public let transitGatewayPrefixListReference: TransitGatewayPrefixListReference?

        public init(transitGatewayPrefixListReference: TransitGatewayPrefixListReference? = nil) {
            self.transitGatewayPrefixListReference = transitGatewayPrefixListReference
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayPrefixListReference = "transitGatewayPrefixListReference"
        }
    }

    public struct CreateTransitGatewayRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description of the transit gateway.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The transit gateway options.
        public let options: TransitGatewayRequestOptions?
        /// The tags to apply to the transit gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(description: String? = nil, dryRun: Bool? = nil, options: TransitGatewayRequestOptions? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.description = description
            self.dryRun = dryRun
            self.options = options
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case dryRun = "DryRun"
            case options = "Options"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateTransitGatewayResult: AWSDecodableShape {
        /// Information about the transit gateway.
        public let transitGateway: TransitGateway?

        public init(transitGateway: TransitGateway? = nil) {
            self.transitGateway = transitGateway
        }

        private enum CodingKeys: String, CodingKey {
            case transitGateway = "transitGateway"
        }
    }

    public struct CreateTransitGatewayRouteRequest: AWSEncodableShape {
        /// Indicates whether to drop traffic that matches this route.
        public let blackhole: Bool?
        /// The CIDR range used for destination matches. Routing decisions are based on the most specific match.
        public let destinationCidrBlock: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(blackhole: Bool? = nil, destinationCidrBlock: String? = nil, dryRun: Bool? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableId: String? = nil) {
            self.blackhole = blackhole
            self.destinationCidrBlock = destinationCidrBlock
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case blackhole = "Blackhole"
            case destinationCidrBlock = "DestinationCidrBlock"
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct CreateTransitGatewayRouteResult: AWSDecodableShape {
        /// Information about the route.
        public let route: TransitGatewayRoute?

        public init(route: TransitGatewayRoute? = nil) {
            self.route = route
        }

        private enum CodingKeys: String, CodingKey {
            case route = "route"
        }
    }

    public struct CreateTransitGatewayRouteTableAnnouncementRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the peering attachment.
        public let peeringAttachmentId: String?
        /// The tags specifications applied to the transit gateway route table announcement.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(dryRun: Bool? = nil, peeringAttachmentId: String? = nil, tagSpecifications: [TagSpecification]? = nil, transitGatewayRouteTableId: String? = nil) {
            self.dryRun = dryRun
            self.peeringAttachmentId = peeringAttachmentId
            self.tagSpecifications = tagSpecifications
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case peeringAttachmentId = "PeeringAttachmentId"
            case tagSpecifications = "TagSpecification"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct CreateTransitGatewayRouteTableAnnouncementResult: AWSDecodableShape {
        /// Provides details about the transit gateway route table announcement.
        public let transitGatewayRouteTableAnnouncement: TransitGatewayRouteTableAnnouncement?

        public init(transitGatewayRouteTableAnnouncement: TransitGatewayRouteTableAnnouncement? = nil) {
            self.transitGatewayRouteTableAnnouncement = transitGatewayRouteTableAnnouncement
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayRouteTableAnnouncement = "transitGatewayRouteTableAnnouncement"
        }
    }

    public struct CreateTransitGatewayRouteTableRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to apply to the transit gateway route table.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?

        public init(dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil, transitGatewayId: String? = nil) {
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
            self.transitGatewayId = transitGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case tagSpecifications = "TagSpecifications"
            case transitGatewayId = "TransitGatewayId"
        }
    }

    public struct CreateTransitGatewayRouteTableResult: AWSDecodableShape {
        /// Information about the transit gateway route table.
        public let transitGatewayRouteTable: TransitGatewayRouteTable?

        public init(transitGatewayRouteTable: TransitGatewayRouteTable? = nil) {
            self.transitGatewayRouteTable = transitGatewayRouteTable
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayRouteTable = "transitGatewayRouteTable"
        }
    }

    public struct CreateTransitGatewayVpcAttachmentRequest: AWSEncodableShape {
        public struct _SubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The VPC attachment options.
        public let options: CreateTransitGatewayVpcAttachmentRequestOptions?
        /// The IDs of one or more subnets. You can specify only one subnet per Availability Zone.  You must specify at least one subnet, but we recommend that you specify two subnets for better availability. The transit gateway uses one IP address from each specified subnet.
        @OptionalCustomCoding<EC2ArrayCoder<_SubnetIdsEncoding, String>>
        public var subnetIds: [String]?
        /// The tags to apply to the VPC attachment.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(dryRun: Bool? = nil, options: CreateTransitGatewayVpcAttachmentRequestOptions? = nil, subnetIds: [String]? = nil, tagSpecifications: [TagSpecification]? = nil, transitGatewayId: String? = nil, vpcId: String? = nil) {
            self.dryRun = dryRun
            self.options = options
            self.subnetIds = subnetIds
            self.tagSpecifications = tagSpecifications
            self.transitGatewayId = transitGatewayId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case options = "Options"
            case subnetIds = "SubnetIds"
            case tagSpecifications = "TagSpecifications"
            case transitGatewayId = "TransitGatewayId"
            case vpcId = "VpcId"
        }
    }

    public struct CreateTransitGatewayVpcAttachmentRequestOptions: AWSEncodableShape {
        /// Enable or disable support for appliance mode. If enabled, a traffic flow between a source and destination uses the same Availability Zone for the VPC attachment for the lifetime of that flow. The default is disable.
        public let applianceModeSupport: ApplianceModeSupportValue?
        /// Enable or disable DNS support. The default is enable.
        public let dnsSupport: DnsSupportValue?
        /// Enable or disable IPv6 support.  The default is disable.
        public let ipv6Support: Ipv6SupportValue?
        ///  This parameter is in preview and may not be available for your account.  Enables you to reference a security group across VPCs attached to a transit gateway. Use this option to simplify security group management and control of instance-to-instance traffic across VPCs that are connected by transit gateway. You can also use this option to migrate from VPC peering (which was the only option that supported security group referencing) to transit gateways (which now also support security group referencing). This option is disabled by default and there are no additional costs to use this feature. If you don't enable or disable SecurityGroupReferencingSupport in the request, the attachment will inherit the security group referencing support setting on the transit gateway.
        public let securityGroupReferencingSupport: SecurityGroupReferencingSupportValue?

        public init(applianceModeSupport: ApplianceModeSupportValue? = nil, dnsSupport: DnsSupportValue? = nil, ipv6Support: Ipv6SupportValue? = nil, securityGroupReferencingSupport: SecurityGroupReferencingSupportValue? = nil) {
            self.applianceModeSupport = applianceModeSupport
            self.dnsSupport = dnsSupport
            self.ipv6Support = ipv6Support
            self.securityGroupReferencingSupport = securityGroupReferencingSupport
        }

        private enum CodingKeys: String, CodingKey {
            case applianceModeSupport = "ApplianceModeSupport"
            case dnsSupport = "DnsSupport"
            case ipv6Support = "Ipv6Support"
            case securityGroupReferencingSupport = "SecurityGroupReferencingSupport"
        }
    }

    public struct CreateTransitGatewayVpcAttachmentResult: AWSDecodableShape {
        /// Information about the VPC attachment.
        public let transitGatewayVpcAttachment: TransitGatewayVpcAttachment?

        public init(transitGatewayVpcAttachment: TransitGatewayVpcAttachment? = nil) {
            self.transitGatewayVpcAttachment = transitGatewayVpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayVpcAttachment = "transitGatewayVpcAttachment"
        }
    }

    public struct CreateVerifiedAccessEndpointEniOptions: AWSEncodableShape {
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The IP port number.
        public let port: Int?
        /// The IP protocol.
        public let `protocol`: VerifiedAccessEndpointProtocol?

        public init(networkInterfaceId: String? = nil, port: Int? = nil, protocol: VerifiedAccessEndpointProtocol? = nil) {
            self.networkInterfaceId = networkInterfaceId
            self.port = port
            self.`protocol` = `protocol`
        }

        public func validate(name: String) throws {
            try self.validate(self.port, name: "port", parent: name, max: 65535)
            try self.validate(self.port, name: "port", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaceId = "NetworkInterfaceId"
            case port = "Port"
            case `protocol` = "Protocol"
        }
    }

    public struct CreateVerifiedAccessEndpointLoadBalancerOptions: AWSEncodableShape {
        public struct _SubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ARN of the load balancer.
        public let loadBalancerArn: String?
        /// The IP port number.
        public let port: Int?
        /// The IP protocol.
        public let `protocol`: VerifiedAccessEndpointProtocol?
        /// The IDs of the subnets.
        @OptionalCustomCoding<EC2ArrayCoder<_SubnetIdsEncoding, String>>
        public var subnetIds: [String]?

        public init(loadBalancerArn: String? = nil, port: Int? = nil, protocol: VerifiedAccessEndpointProtocol? = nil, subnetIds: [String]? = nil) {
            self.loadBalancerArn = loadBalancerArn
            self.port = port
            self.`protocol` = `protocol`
            self.subnetIds = subnetIds
        }

        public func validate(name: String) throws {
            try self.validate(self.port, name: "port", parent: name, max: 65535)
            try self.validate(self.port, name: "port", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerArn = "LoadBalancerArn"
            case port = "Port"
            case `protocol` = "Protocol"
            case subnetIds = "SubnetId"
        }
    }

    public struct CreateVerifiedAccessEndpointRequest: AWSEncodableShape {
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The DNS name for users to reach your application.
        public let applicationDomain: String?
        /// The type of attachment.
        public let attachmentType: VerifiedAccessEndpointAttachmentType?
        /// A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// A description for the Verified Access endpoint.
        public let description: String?
        /// The ARN of the public TLS/SSL certificate in Amazon Web Services Certificate Manager to associate with the endpoint. The CN in the certificate must match the DNS name your end users will use to reach your application.
        public let domainCertificateArn: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A custom identifier that is prepended to the DNS name that is generated for the endpoint.
        public let endpointDomainPrefix: String?
        /// The type of Verified Access endpoint to create.
        public let endpointType: VerifiedAccessEndpointType?
        /// The load balancer details. This parameter is required if the endpoint type is load-balancer.
        public let loadBalancerOptions: CreateVerifiedAccessEndpointLoadBalancerOptions?
        /// The network interface details. This parameter is required if the endpoint type is network-interface.
        public let networkInterfaceOptions: CreateVerifiedAccessEndpointEniOptions?
        /// The Verified Access policy document.
        public let policyDocument: String?
        /// The IDs of the security groups to associate with the Verified Access endpoint. Required if AttachmentType is set to vpc.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?
        /// The options for server side encryption.
        public let sseSpecification: VerifiedAccessSseSpecificationRequest?
        /// The tags to assign to the Verified Access endpoint.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the Verified Access group to associate the endpoint with.
        public let verifiedAccessGroupId: String?

        public init(applicationDomain: String? = nil, attachmentType: VerifiedAccessEndpointAttachmentType? = nil, clientToken: String? = CreateVerifiedAccessEndpointRequest.idempotencyToken(), description: String? = nil, domainCertificateArn: String? = nil, dryRun: Bool? = nil, endpointDomainPrefix: String? = nil, endpointType: VerifiedAccessEndpointType? = nil, loadBalancerOptions: CreateVerifiedAccessEndpointLoadBalancerOptions? = nil, networkInterfaceOptions: CreateVerifiedAccessEndpointEniOptions? = nil, policyDocument: String? = nil, securityGroupIds: [String]? = nil, sseSpecification: VerifiedAccessSseSpecificationRequest? = nil, tagSpecifications: [TagSpecification]? = nil, verifiedAccessGroupId: String? = nil) {
            self.applicationDomain = applicationDomain
            self.attachmentType = attachmentType
            self.clientToken = clientToken
            self.description = description
            self.domainCertificateArn = domainCertificateArn
            self.dryRun = dryRun
            self.endpointDomainPrefix = endpointDomainPrefix
            self.endpointType = endpointType
            self.loadBalancerOptions = loadBalancerOptions
            self.networkInterfaceOptions = networkInterfaceOptions
            self.policyDocument = policyDocument
            self.securityGroupIds = securityGroupIds
            self.sseSpecification = sseSpecification
            self.tagSpecifications = tagSpecifications
            self.verifiedAccessGroupId = verifiedAccessGroupId
        }

        public func validate(name: String) throws {
            try self.loadBalancerOptions?.validate(name: "\(name).loadBalancerOptions")
            try self.networkInterfaceOptions?.validate(name: "\(name).networkInterfaceOptions")
        }

        private enum CodingKeys: String, CodingKey {
            case applicationDomain = "ApplicationDomain"
            case attachmentType = "AttachmentType"
            case clientToken = "ClientToken"
            case description = "Description"
            case domainCertificateArn = "DomainCertificateArn"
            case dryRun = "DryRun"
            case endpointDomainPrefix = "EndpointDomainPrefix"
            case endpointType = "EndpointType"
            case loadBalancerOptions = "LoadBalancerOptions"
            case networkInterfaceOptions = "NetworkInterfaceOptions"
            case policyDocument = "PolicyDocument"
            case securityGroupIds = "SecurityGroupId"
            case sseSpecification = "SseSpecification"
            case tagSpecifications = "TagSpecification"
            case verifiedAccessGroupId = "VerifiedAccessGroupId"
        }
    }

    public struct CreateVerifiedAccessEndpointResult: AWSDecodableShape {
        /// Details about the Verified Access endpoint.
        public let verifiedAccessEndpoint: VerifiedAccessEndpoint?

        public init(verifiedAccessEndpoint: VerifiedAccessEndpoint? = nil) {
            self.verifiedAccessEndpoint = verifiedAccessEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case verifiedAccessEndpoint = "verifiedAccessEndpoint"
        }
    }

    public struct CreateVerifiedAccessGroupRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// A description for the Verified Access group.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Verified Access policy document.
        public let policyDocument: String?
        /// The options for server side encryption.
        public let sseSpecification: VerifiedAccessSseSpecificationRequest?
        /// The tags to assign to the Verified Access group.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the Verified Access instance.
        public let verifiedAccessInstanceId: String?

        public init(clientToken: String? = CreateVerifiedAccessGroupRequest.idempotencyToken(), description: String? = nil, dryRun: Bool? = nil, policyDocument: String? = nil, sseSpecification: VerifiedAccessSseSpecificationRequest? = nil, tagSpecifications: [TagSpecification]? = nil, verifiedAccessInstanceId: String? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.policyDocument = policyDocument
            self.sseSpecification = sseSpecification
            self.tagSpecifications = tagSpecifications
            self.verifiedAccessInstanceId = verifiedAccessInstanceId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "DryRun"
            case policyDocument = "PolicyDocument"
            case sseSpecification = "SseSpecification"
            case tagSpecifications = "TagSpecification"
            case verifiedAccessInstanceId = "VerifiedAccessInstanceId"
        }
    }

    public struct CreateVerifiedAccessGroupResult: AWSDecodableShape {
        /// Details about the Verified Access group.
        public let verifiedAccessGroup: VerifiedAccessGroup?

        public init(verifiedAccessGroup: VerifiedAccessGroup? = nil) {
            self.verifiedAccessGroup = verifiedAccessGroup
        }

        private enum CodingKeys: String, CodingKey {
            case verifiedAccessGroup = "verifiedAccessGroup"
        }
    }

    public struct CreateVerifiedAccessInstanceRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// A description for the Verified Access instance.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Enable or disable support for Federal Information Processing Standards (FIPS) on the instance.
        public let fipsEnabled: Bool?
        /// The tags to assign to the Verified Access instance.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = CreateVerifiedAccessInstanceRequest.idempotencyToken(), description: String? = nil, dryRun: Bool? = nil, fipsEnabled: Bool? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.fipsEnabled = fipsEnabled
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "DryRun"
            case fipsEnabled = "FIPSEnabled"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateVerifiedAccessInstanceResult: AWSDecodableShape {
        /// Details about the Verified Access instance.
        public let verifiedAccessInstance: VerifiedAccessInstance?

        public init(verifiedAccessInstance: VerifiedAccessInstance? = nil) {
            self.verifiedAccessInstance = verifiedAccessInstance
        }

        private enum CodingKeys: String, CodingKey {
            case verifiedAccessInstance = "verifiedAccessInstance"
        }
    }

    public struct CreateVerifiedAccessTrustProviderDeviceOptions: AWSEncodableShape {
        ///  The URL Amazon Web Services Verified Access will use to verify the authenticity of the device tokens.
        public let publicSigningKeyUrl: String?
        /// The ID of the tenant application with the device-identity provider.
        public let tenantId: String?

        public init(publicSigningKeyUrl: String? = nil, tenantId: String? = nil) {
            self.publicSigningKeyUrl = publicSigningKeyUrl
            self.tenantId = tenantId
        }

        private enum CodingKeys: String, CodingKey {
            case publicSigningKeyUrl = "PublicSigningKeyUrl"
            case tenantId = "TenantId"
        }
    }

    public struct CreateVerifiedAccessTrustProviderOidcOptions: AWSEncodableShape {
        /// The OIDC authorization endpoint.
        public let authorizationEndpoint: String?
        /// The client identifier.
        public let clientId: String?
        /// The client secret.
        public let clientSecret: String?
        /// The OIDC issuer.
        public let issuer: String?
        /// OpenID Connect (OIDC) scopes are used by an application during authentication to authorize access to a user's details. Each scope returns a specific set of user attributes.
        public let scope: String?
        /// The OIDC token endpoint.
        public let tokenEndpoint: String?
        /// The OIDC user info endpoint.
        public let userInfoEndpoint: String?

        public init(authorizationEndpoint: String? = nil, clientId: String? = nil, clientSecret: String? = nil, issuer: String? = nil, scope: String? = nil, tokenEndpoint: String? = nil, userInfoEndpoint: String? = nil) {
            self.authorizationEndpoint = authorizationEndpoint
            self.clientId = clientId
            self.clientSecret = clientSecret
            self.issuer = issuer
            self.scope = scope
            self.tokenEndpoint = tokenEndpoint
            self.userInfoEndpoint = userInfoEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case authorizationEndpoint = "AuthorizationEndpoint"
            case clientId = "ClientId"
            case clientSecret = "ClientSecret"
            case issuer = "Issuer"
            case scope = "Scope"
            case tokenEndpoint = "TokenEndpoint"
            case userInfoEndpoint = "UserInfoEndpoint"
        }
    }

    public struct CreateVerifiedAccessTrustProviderRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// A description for the Verified Access trust provider.
        public let description: String?
        /// The options for a device-based trust provider. This parameter is required when the provider type is device.
        public let deviceOptions: CreateVerifiedAccessTrustProviderDeviceOptions?
        /// The type of device-based trust provider. This parameter is required when the provider type is device.
        public let deviceTrustProviderType: DeviceTrustProviderType?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The options for a OpenID Connect-compatible user-identity trust provider. This parameter is required when the provider type is user.
        public let oidcOptions: CreateVerifiedAccessTrustProviderOidcOptions?
        /// The identifier to be used when working with policy rules.
        public let policyReferenceName: String?
        /// The options for server side encryption.
        public let sseSpecification: VerifiedAccessSseSpecificationRequest?
        /// The tags to assign to the Verified Access trust provider.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The type of trust provider.
        public let trustProviderType: TrustProviderType?
        /// The type of user-based trust provider. This parameter is required when the provider type is user.
        public let userTrustProviderType: UserTrustProviderType?

        public init(clientToken: String? = CreateVerifiedAccessTrustProviderRequest.idempotencyToken(), description: String? = nil, deviceOptions: CreateVerifiedAccessTrustProviderDeviceOptions? = nil, deviceTrustProviderType: DeviceTrustProviderType? = nil, dryRun: Bool? = nil, oidcOptions: CreateVerifiedAccessTrustProviderOidcOptions? = nil, policyReferenceName: String? = nil, sseSpecification: VerifiedAccessSseSpecificationRequest? = nil, tagSpecifications: [TagSpecification]? = nil, trustProviderType: TrustProviderType? = nil, userTrustProviderType: UserTrustProviderType? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.deviceOptions = deviceOptions
            self.deviceTrustProviderType = deviceTrustProviderType
            self.dryRun = dryRun
            self.oidcOptions = oidcOptions
            self.policyReferenceName = policyReferenceName
            self.sseSpecification = sseSpecification
            self.tagSpecifications = tagSpecifications
            self.trustProviderType = trustProviderType
            self.userTrustProviderType = userTrustProviderType
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case deviceOptions = "DeviceOptions"
            case deviceTrustProviderType = "DeviceTrustProviderType"
            case dryRun = "DryRun"
            case oidcOptions = "OidcOptions"
            case policyReferenceName = "PolicyReferenceName"
            case sseSpecification = "SseSpecification"
            case tagSpecifications = "TagSpecification"
            case trustProviderType = "TrustProviderType"
            case userTrustProviderType = "UserTrustProviderType"
        }
    }

    public struct CreateVerifiedAccessTrustProviderResult: AWSDecodableShape {
        /// Details about the Verified Access trust provider.
        public let verifiedAccessTrustProvider: VerifiedAccessTrustProvider?

        public init(verifiedAccessTrustProvider: VerifiedAccessTrustProvider? = nil) {
            self.verifiedAccessTrustProvider = verifiedAccessTrustProvider
        }

        private enum CodingKeys: String, CodingKey {
            case verifiedAccessTrustProvider = "verifiedAccessTrustProvider"
        }
    }

    public struct CreateVolumePermission: AWSEncodableShape & AWSDecodableShape {
        /// The group to be added or removed. The possible value is all.
        public let group: PermissionGroup?
        /// The ID of the Amazon Web Services account to be added or removed.
        public let userId: String?

        public init(group: PermissionGroup? = nil, userId: String? = nil) {
            self.group = group
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case group = "group"
            case userId = "userId"
        }
    }

    public struct CreateVolumePermissionModifications: AWSEncodableShape {
        public struct _AddEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Adds the specified Amazon Web Services account ID or group to the list.
        @OptionalCustomCoding<EC2ArrayCoder<_AddEncoding, CreateVolumePermission>>
        public var add: [CreateVolumePermission]?
        /// Removes the specified Amazon Web Services account ID or group from the list.
        @OptionalCustomCoding<EC2ArrayCoder<_RemoveEncoding, CreateVolumePermission>>
        public var remove: [CreateVolumePermission]?

        public init(add: [CreateVolumePermission]? = nil, remove: [CreateVolumePermission]? = nil) {
            self.add = add
            self.remove = remove
        }

        private enum CodingKeys: String, CodingKey {
            case add = "Add"
            case remove = "Remove"
        }
    }

    public struct CreateVolumeRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the Availability Zone in which to create the volume. For example, us-east-1a.
        public let availabilityZone: String?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency  of the request. For more information, see Ensure  Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether the volume should be encrypted.  The effect of setting the encryption state to true depends on
        /// the volume origin (new or from a snapshot), starting encryption state, ownership, and whether encryption by default is enabled.  For more information, see Encryption by default in the Amazon EBS User Guide. Encrypted Amazon EBS volumes must be attached to instances that support Amazon EBS encryption.  For more information, see Supported instance types.
        public let encrypted: Bool?
        /// The number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents  the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline  performance of the volume and the rate at which the volume accumulates I/O credits for bursting. The following are the supported values for each volume type:    gp3: 3,000 - 16,000 IOPS    io1: 100 - 64,000 IOPS    io2: 100 - 256,000 IOPS   For io2 volumes, you can achieve up to 256,000 IOPS on
        /// instances
        /// built on the Nitro System. On other instances, you can achieve performance up to 32,000 IOPS. This parameter is required for io1 and io2 volumes. The default for gp3 volumes is 3,000 IOPS. This parameter is not supported for gp2, st1, sc1, or standard volumes.
        public let iops: Int?
        /// The identifier of the Key Management Service (KMS) KMS key to use for Amazon EBS encryption. If this parameter is not specified, your KMS key for Amazon EBS is used. If KmsKeyId is specified, the encrypted state must be true. You can specify the KMS key using any of the following:   Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.   Key alias. For example, alias/ExampleAlias.   Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.   Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.   Amazon Web Services authenticates the KMS key asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid,  the action can appear to complete, but eventually fails.
        public let kmsKeyId: String?
        /// Indicates whether to enable Amazon EBS Multi-Attach. If you enable Multi-Attach, you can attach the  	volume to up to 16 Instances built on the Nitro System in the same Availability Zone. This parameter is  	supported with io1 and io2 volumes only. For more information,  	see  		Amazon EBS Multi-Attach in the Amazon EBS User Guide.
        public let multiAttachEnabled: Bool?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. If you specify a snapshot, the default is the snapshot size. You can specify a volume  size that is equal to or larger than the snapshot size. The following are the supported volumes sizes for each volume type:    gp2 and gp3: 1 - 16,384 GiB    io1: 4 - 16,384 GiB    io2: 4 - 65,536 GiB    st1 and sc1: 125 - 16,384 GiB    standard: 1 - 1024 GiB
        public let size: Int?
        /// The snapshot from which to create the volume. You must specify either a snapshot ID or a volume size.
        public let snapshotId: String?
        /// The tags to apply to the volume during creation.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The throughput to provision for a volume, with a maximum of 1,000 MiB/s. This parameter is valid only for gp3 volumes. Valid Range: Minimum value of 125. Maximum value of 1000.
        public let throughput: Int?
        /// The volume type. This parameter can be one of the following values:   General Purpose SSD: gp2 | gp3    Provisioned IOPS SSD: io1 | io2    Throughput Optimized HDD: st1    Cold HDD: sc1    Magnetic: standard     Throughput Optimized HDD (st1) and Cold HDD (sc1) volumes can't be used as boot volumes.  For more information, see Amazon EBS volume types in the Amazon EBS User Guide. Default: gp2
        public let volumeType: VolumeType?

        public init(availabilityZone: String? = nil, clientToken: String? = CreateVolumeRequest.idempotencyToken(), dryRun: Bool? = nil, encrypted: Bool? = nil, iops: Int? = nil, kmsKeyId: String? = nil, multiAttachEnabled: Bool? = nil, outpostArn: String? = nil, size: Int? = nil, snapshotId: String? = nil, tagSpecifications: [TagSpecification]? = nil, throughput: Int? = nil, volumeType: VolumeType? = nil) {
            self.availabilityZone = availabilityZone
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.encrypted = encrypted
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.multiAttachEnabled = multiAttachEnabled
            self.outpostArn = outpostArn
            self.size = size
            self.snapshotId = snapshotId
            self.tagSpecifications = tagSpecifications
            self.throughput = throughput
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case clientToken = "ClientToken"
            case dryRun = "dryRun"
            case encrypted = "encrypted"
            case iops = "Iops"
            case kmsKeyId = "KmsKeyId"
            case multiAttachEnabled = "MultiAttachEnabled"
            case outpostArn = "OutpostArn"
            case size = "Size"
            case snapshotId = "SnapshotId"
            case tagSpecifications = "TagSpecification"
            case throughput = "Throughput"
            case volumeType = "VolumeType"
        }
    }

    public struct CreateVpcEndpointConnectionNotificationRequest: AWSEncodableShape {
        public struct _ConnectionEventsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
        public let clientToken: String?
        /// The endpoint events for which to receive notifications. Valid values are Accept, Connect, Delete, and Reject.
        @OptionalCustomCoding<EC2ArrayCoder<_ConnectionEventsEncoding, String>>
        public var connectionEvents: [String]?
        /// The ARN of the SNS topic for the notifications.
        public let connectionNotificationArn: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the endpoint service.
        public let serviceId: String?
        /// The ID of the endpoint.
        public let vpcEndpointId: String?

        public init(clientToken: String? = nil, connectionEvents: [String]? = nil, connectionNotificationArn: String? = nil, dryRun: Bool? = nil, serviceId: String? = nil, vpcEndpointId: String? = nil) {
            self.clientToken = clientToken
            self.connectionEvents = connectionEvents
            self.connectionNotificationArn = connectionNotificationArn
            self.dryRun = dryRun
            self.serviceId = serviceId
            self.vpcEndpointId = vpcEndpointId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case connectionEvents = "ConnectionEvents"
            case connectionNotificationArn = "ConnectionNotificationArn"
            case dryRun = "DryRun"
            case serviceId = "ServiceId"
            case vpcEndpointId = "VpcEndpointId"
        }
    }

    public struct CreateVpcEndpointConnectionNotificationResult: AWSDecodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the notification.
        public let connectionNotification: ConnectionNotification?

        public init(clientToken: String? = nil, connectionNotification: ConnectionNotification? = nil) {
            self.clientToken = clientToken
            self.connectionNotification = connectionNotification
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case connectionNotification = "connectionNotification"
        }
    }

    public struct CreateVpcEndpointRequest: AWSEncodableShape {
        public struct _RouteTableIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SubnetConfigurationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
        public let clientToken: String?
        /// The DNS options for the endpoint.
        public let dnsOptions: DnsOptionsSpecification?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IP address type for the endpoint.
        public let ipAddressType: IpAddressType?
        /// (Interface and gateway endpoints) A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format. If this parameter is not specified, we attach a default policy that allows full access to the service.
        public let policyDocument: String?
        /// (Interface endpoint) Indicates whether to associate a private hosted zone with the specified VPC. The private hosted zone contains a record set for the default public DNS name for the service for the Region (for example, kinesis.us-east-1.amazonaws.com), which resolves to the private IP addresses of the endpoint network interfaces in the VPC. This enables you to make requests to the default public DNS name for the service instead of the public DNS names that are automatically generated by the VPC endpoint service. To use a private hosted zone, you must set the following VPC attributes to true: enableDnsHostnames and enableDnsSupport. Use ModifyVpcAttribute to set the VPC attributes. Default: true
        public let privateDnsEnabled: Bool?
        /// (Gateway endpoint) The route table IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_RouteTableIdsEncoding, String>>
        public var routeTableIds: [String]?
        /// (Interface endpoint) The IDs of the security groups to associate with the endpoint network interfaces. If this parameter is not specified, we use the default  security group for the VPC.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?
        /// The name of the endpoint service.
        public let serviceName: String?
        /// The subnet configurations for the endpoint.
        @OptionalCustomCoding<EC2ArrayCoder<_SubnetConfigurationsEncoding, SubnetConfiguration>>
        public var subnetConfigurations: [SubnetConfiguration]?
        /// (Interface and Gateway Load Balancer endpoints) The IDs of the subnets in which to create endpoint network interfaces. For a Gateway Load Balancer endpoint, you can specify only one subnet.
        @OptionalCustomCoding<EC2ArrayCoder<_SubnetIdsEncoding, String>>
        public var subnetIds: [String]?
        /// The tags to associate with the endpoint.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The type of endpoint. Default: Gateway
        public let vpcEndpointType: VpcEndpointType?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(clientToken: String? = nil, dnsOptions: DnsOptionsSpecification? = nil, dryRun: Bool? = nil, ipAddressType: IpAddressType? = nil, policyDocument: String? = nil, privateDnsEnabled: Bool? = nil, routeTableIds: [String]? = nil, securityGroupIds: [String]? = nil, serviceName: String? = nil, subnetConfigurations: [SubnetConfiguration]? = nil, subnetIds: [String]? = nil, tagSpecifications: [TagSpecification]? = nil, vpcEndpointType: VpcEndpointType? = nil, vpcId: String? = nil) {
            self.clientToken = clientToken
            self.dnsOptions = dnsOptions
            self.dryRun = dryRun
            self.ipAddressType = ipAddressType
            self.policyDocument = policyDocument
            self.privateDnsEnabled = privateDnsEnabled
            self.routeTableIds = routeTableIds
            self.securityGroupIds = securityGroupIds
            self.serviceName = serviceName
            self.subnetConfigurations = subnetConfigurations
            self.subnetIds = subnetIds
            self.tagSpecifications = tagSpecifications
            self.vpcEndpointType = vpcEndpointType
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dnsOptions = "DnsOptions"
            case dryRun = "DryRun"
            case ipAddressType = "IpAddressType"
            case policyDocument = "PolicyDocument"
            case privateDnsEnabled = "PrivateDnsEnabled"
            case routeTableIds = "RouteTableId"
            case securityGroupIds = "SecurityGroupId"
            case serviceName = "ServiceName"
            case subnetConfigurations = "SubnetConfiguration"
            case subnetIds = "SubnetId"
            case tagSpecifications = "TagSpecification"
            case vpcEndpointType = "VpcEndpointType"
            case vpcId = "VpcId"
        }
    }

    public struct CreateVpcEndpointResult: AWSDecodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the endpoint.
        public let vpcEndpoint: VpcEndpoint?

        public init(clientToken: String? = nil, vpcEndpoint: VpcEndpoint? = nil) {
            self.clientToken = clientToken
            self.vpcEndpoint = vpcEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case vpcEndpoint = "vpcEndpoint"
        }
    }

    public struct CreateVpcEndpointServiceConfigurationRequest: AWSEncodableShape {
        public struct _GatewayLoadBalancerArnsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _NetworkLoadBalancerArnsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SupportedIpAddressTypesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether requests from service consumers to create an endpoint to your service must be accepted manually.
        public let acceptanceRequired: Bool?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Amazon Resource Names (ARNs) of the Gateway Load Balancers.
        @OptionalCustomCoding<EC2ArrayCoder<_GatewayLoadBalancerArnsEncoding, String>>
        public var gatewayLoadBalancerArns: [String]?
        /// The Amazon Resource Names (ARNs) of the Network Load Balancers.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkLoadBalancerArnsEncoding, String>>
        public var networkLoadBalancerArns: [String]?
        /// (Interface endpoint configuration) The private DNS name to assign to the VPC endpoint service.
        public let privateDnsName: String?
        /// The supported IP address types. The possible values are ipv4 and ipv6.
        @OptionalCustomCoding<EC2ArrayCoder<_SupportedIpAddressTypesEncoding, String>>
        public var supportedIpAddressTypes: [String]?
        /// The tags to associate with the service.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(acceptanceRequired: Bool? = nil, clientToken: String? = nil, dryRun: Bool? = nil, gatewayLoadBalancerArns: [String]? = nil, networkLoadBalancerArns: [String]? = nil, privateDnsName: String? = nil, supportedIpAddressTypes: [String]? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.acceptanceRequired = acceptanceRequired
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.gatewayLoadBalancerArns = gatewayLoadBalancerArns
            self.networkLoadBalancerArns = networkLoadBalancerArns
            self.privateDnsName = privateDnsName
            self.supportedIpAddressTypes = supportedIpAddressTypes
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case acceptanceRequired = "AcceptanceRequired"
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case gatewayLoadBalancerArns = "GatewayLoadBalancerArn"
            case networkLoadBalancerArns = "NetworkLoadBalancerArn"
            case privateDnsName = "PrivateDnsName"
            case supportedIpAddressTypes = "SupportedIpAddressType"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateVpcEndpointServiceConfigurationResult: AWSDecodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the service configuration.
        public let serviceConfiguration: ServiceConfiguration?

        public init(clientToken: String? = nil, serviceConfiguration: ServiceConfiguration? = nil) {
            self.clientToken = clientToken
            self.serviceConfiguration = serviceConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case serviceConfiguration = "serviceConfiguration"
        }
    }

    public struct CreateVpcPeeringConnectionRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Amazon Web Services account ID of the owner of the accepter VPC. Default: Your Amazon Web Services account ID
        public let peerOwnerId: String?
        /// The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which you make the request. Default: The Region in which you make the request.
        public let peerRegion: String?
        /// The ID of the VPC with which you are creating the VPC peering connection. You must
        /// 			specify this parameter in the request.
        public let peerVpcId: String?
        /// The tags to assign to the peering connection.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the requester VPC. You must specify this parameter in the
        /// 			request.
        public let vpcId: String?

        public init(dryRun: Bool? = nil, peerOwnerId: String? = nil, peerRegion: String? = nil, peerVpcId: String? = nil, tagSpecifications: [TagSpecification]? = nil, vpcId: String? = nil) {
            self.dryRun = dryRun
            self.peerOwnerId = peerOwnerId
            self.peerRegion = peerRegion
            self.peerVpcId = peerVpcId
            self.tagSpecifications = tagSpecifications
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case peerOwnerId = "peerOwnerId"
            case peerRegion = "PeerRegion"
            case peerVpcId = "peerVpcId"
            case tagSpecifications = "TagSpecification"
            case vpcId = "vpcId"
        }
    }

    public struct CreateVpcPeeringConnectionResult: AWSDecodableShape {
        /// Information about the VPC peering connection.
        public let vpcPeeringConnection: VpcPeeringConnection?

        public init(vpcPeeringConnection: VpcPeeringConnection? = nil) {
            self.vpcPeeringConnection = vpcPeeringConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpcPeeringConnection = "vpcPeeringConnection"
        }
    }

    public struct CreateVpcRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block.
        public let amazonProvidedIpv6CidrBlock: Bool?
        /// The IPv4 network range for the VPC, in CIDR notation. For example,
        /// 		        10.0.0.0/16. We modify the specified CIDR block to its canonical form; for example, if you specify 100.68.0.18/18, we modify it to 100.68.0.0/18.
        public let cidrBlock: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tenancy options for instances launched into the VPC. For default, instances are launched with shared tenancy by default. You can launch instances with any tenancy into a shared tenancy VPC. For dedicated, instances are launched as dedicated tenancy instances by default. You can only launch instances with a tenancy of dedicated or host into a dedicated tenancy VPC.   Important: The host value cannot be used with this parameter. Use the default or dedicated values only. Default: default
        public let instanceTenancy: Tenancy?
        /// The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. For more information, see What is IPAM? in the Amazon VPC IPAM User Guide.
        public let ipv4IpamPoolId: String?
        /// The netmask length of the IPv4 CIDR you want to allocate to this VPC from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see What is IPAM? in the Amazon VPC IPAM User Guide.
        public let ipv4NetmaskLength: Int?
        /// The IPv6 CIDR block from the IPv6 address pool. You must also specify Ipv6Pool in the request. To let Amazon choose the IPv6 CIDR block for you, omit this parameter.
        public let ipv6CidrBlock: String?
        /// The name of the location from which we advertise the IPV6 CIDR block. Use this parameter to limit the address to this location. You must set AmazonProvidedIpv6CidrBlock to true to use this parameter.
        public let ipv6CidrBlockNetworkBorderGroup: String?
        /// The ID of an IPv6 IPAM pool which will be used to allocate this VPC an IPv6 CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across Amazon Web Services Regions and accounts throughout your Amazon Web Services Organization. For more information, see What is IPAM? in the Amazon VPC IPAM User Guide.
        public let ipv6IpamPoolId: String?
        /// The netmask length of the IPv6 CIDR you want to allocate to this VPC from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see What is IPAM? in the Amazon VPC IPAM User Guide.
        public let ipv6NetmaskLength: Int?
        /// The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
        public let ipv6Pool: String?
        /// The tags to assign to the VPC.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(amazonProvidedIpv6CidrBlock: Bool? = nil, cidrBlock: String? = nil, dryRun: Bool? = nil, instanceTenancy: Tenancy? = nil, ipv4IpamPoolId: String? = nil, ipv4NetmaskLength: Int? = nil, ipv6CidrBlock: String? = nil, ipv6CidrBlockNetworkBorderGroup: String? = nil, ipv6IpamPoolId: String? = nil, ipv6NetmaskLength: Int? = nil, ipv6Pool: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.amazonProvidedIpv6CidrBlock = amazonProvidedIpv6CidrBlock
            self.cidrBlock = cidrBlock
            self.dryRun = dryRun
            self.instanceTenancy = instanceTenancy
            self.ipv4IpamPoolId = ipv4IpamPoolId
            self.ipv4NetmaskLength = ipv4NetmaskLength
            self.ipv6CidrBlock = ipv6CidrBlock
            self.ipv6CidrBlockNetworkBorderGroup = ipv6CidrBlockNetworkBorderGroup
            self.ipv6IpamPoolId = ipv6IpamPoolId
            self.ipv6NetmaskLength = ipv6NetmaskLength
            self.ipv6Pool = ipv6Pool
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case amazonProvidedIpv6CidrBlock = "amazonProvidedIpv6CidrBlock"
            case cidrBlock = "CidrBlock"
            case dryRun = "dryRun"
            case instanceTenancy = "instanceTenancy"
            case ipv4IpamPoolId = "Ipv4IpamPoolId"
            case ipv4NetmaskLength = "Ipv4NetmaskLength"
            case ipv6CidrBlock = "Ipv6CidrBlock"
            case ipv6CidrBlockNetworkBorderGroup = "Ipv6CidrBlockNetworkBorderGroup"
            case ipv6IpamPoolId = "Ipv6IpamPoolId"
            case ipv6NetmaskLength = "Ipv6NetmaskLength"
            case ipv6Pool = "Ipv6Pool"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateVpcResult: AWSDecodableShape {
        /// Information about the VPC.
        public let vpc: Vpc?

        public init(vpc: Vpc? = nil) {
            self.vpc = vpc
        }

        private enum CodingKeys: String, CodingKey {
            case vpc = "vpc"
        }
    }

    public struct CreateVpnConnectionRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the customer gateway.
        public let customerGatewayId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The options for the VPN connection.
        public let options: VpnConnectionOptionsSpecification?
        /// The tags to apply to the VPN connection.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the transit gateway. If you specify a transit gateway, you cannot specify a virtual private gateway.
        public let transitGatewayId: String?
        /// The type of VPN connection (ipsec.1).
        public let type: String?
        /// The ID of the virtual private gateway. If you specify a virtual private gateway, you cannot specify a transit gateway.
        public let vpnGatewayId: String?

        public init(customerGatewayId: String? = nil, dryRun: Bool? = nil, options: VpnConnectionOptionsSpecification? = nil, tagSpecifications: [TagSpecification]? = nil, transitGatewayId: String? = nil, type: String? = nil, vpnGatewayId: String? = nil) {
            self.customerGatewayId = customerGatewayId
            self.dryRun = dryRun
            self.options = options
            self.tagSpecifications = tagSpecifications
            self.transitGatewayId = transitGatewayId
            self.type = type
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case customerGatewayId = "CustomerGatewayId"
            case dryRun = "dryRun"
            case options = "options"
            case tagSpecifications = "TagSpecification"
            case transitGatewayId = "TransitGatewayId"
            case type = "Type"
            case vpnGatewayId = "VpnGatewayId"
        }
    }

    public struct CreateVpnConnectionResult: AWSDecodableShape {
        /// Information about the VPN connection.
        public let vpnConnection: VpnConnection?

        public init(vpnConnection: VpnConnection? = nil) {
            self.vpnConnection = vpnConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnection = "vpnConnection"
        }
    }

    public struct CreateVpnConnectionRouteRequest: AWSEncodableShape {
        /// The CIDR block associated with the local subnet of the customer network.
        public let destinationCidrBlock: String?
        /// The ID of the VPN connection.
        public let vpnConnectionId: String?

        public init(destinationCidrBlock: String? = nil, vpnConnectionId: String? = nil) {
            self.destinationCidrBlock = destinationCidrBlock
            self.vpnConnectionId = vpnConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "DestinationCidrBlock"
            case vpnConnectionId = "VpnConnectionId"
        }
    }

    public struct CreateVpnGatewayRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A private Autonomous System Number (ASN) for the Amazon side of a BGP session. If you're using a 16-bit ASN, it must be in the 64512 to 65534 range. If you're using a 32-bit ASN, it must be in the 4200000000 to 4294967294 range. Default: 64512
        public let amazonSideAsn: Int64?
        /// The Availability Zone for the virtual private gateway.
        public let availabilityZone: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to apply to the virtual private gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The type of VPN connection this virtual private gateway supports.
        public let type: GatewayType?

        public init(amazonSideAsn: Int64? = nil, availabilityZone: String? = nil, dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil, type: GatewayType? = nil) {
            self.amazonSideAsn = amazonSideAsn
            self.availabilityZone = availabilityZone
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case amazonSideAsn = "AmazonSideAsn"
            case availabilityZone = "AvailabilityZone"
            case dryRun = "dryRun"
            case tagSpecifications = "TagSpecification"
            case type = "Type"
        }
    }

    public struct CreateVpnGatewayResult: AWSDecodableShape {
        /// Information about the virtual private gateway.
        public let vpnGateway: VpnGateway?

        public init(vpnGateway: VpnGateway? = nil) {
            self.vpnGateway = vpnGateway
        }

        private enum CodingKeys: String, CodingKey {
            case vpnGateway = "vpnGateway"
        }
    }

    public struct CreditSpecification: AWSDecodableShape {
        /// The credit option for CPU usage of a T instance. Valid values: standard | unlimited
        public let cpuCredits: String?

        public init(cpuCredits: String? = nil) {
            self.cpuCredits = cpuCredits
        }

        private enum CodingKeys: String, CodingKey {
            case cpuCredits = "cpuCredits"
        }
    }

    public struct CreditSpecificationRequest: AWSEncodableShape {
        /// The credit option for CPU usage of a T instance. Valid values: standard | unlimited
        public let cpuCredits: String?

        public init(cpuCredits: String? = nil) {
            self.cpuCredits = cpuCredits
        }

        private enum CodingKeys: String, CodingKey {
            case cpuCredits = "CpuCredits"
        }
    }

    public struct CustomerGateway: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).
        public let bgpAsn: String?
        /// The Amazon Resource Name (ARN) for the customer gateway certificate.
        public let certificateArn: String?
        /// The ID of the customer gateway.
        public let customerGatewayId: String?
        /// The name of customer gateway device.
        public let deviceName: String?
        /// The IP address of the customer gateway device's outside interface.
        public let ipAddress: String?
        /// The current state of the customer gateway (pending | available | deleting | deleted).
        public let state: String?
        /// Any tags assigned to the customer gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The type of VPN connection the customer gateway supports (ipsec.1).
        public let type: String?

        public init(bgpAsn: String? = nil, certificateArn: String? = nil, customerGatewayId: String? = nil, deviceName: String? = nil, ipAddress: String? = nil, state: String? = nil, tags: [Tag]? = nil, type: String? = nil) {
            self.bgpAsn = bgpAsn
            self.certificateArn = certificateArn
            self.customerGatewayId = customerGatewayId
            self.deviceName = deviceName
            self.ipAddress = ipAddress
            self.state = state
            self.tags = tags
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case bgpAsn = "bgpAsn"
            case certificateArn = "certificateArn"
            case customerGatewayId = "customerGatewayId"
            case deviceName = "deviceName"
            case ipAddress = "ipAddress"
            case state = "state"
            case tags = "tagSet"
            case type = "type"
        }
    }

    public struct DataQuery: AWSEncodableShape {
        /// The Region or Availability Zone that's the target for the data query. For example, eu-north-1.
        public let destination: String?
        /// A user-defined ID associated with a data query that's returned in the dataResponse identifying the query. For example, if you set the Id to MyQuery01in the query, the dataResponse identifies the query as MyQuery01.
        public let id: String?
        /// The metric, aggregation-latency, indicating that network latency is aggregated for the query. This is the only supported metric.
        public let metric: MetricType?
        /// The aggregation period used for the data query.
        public let period: PeriodType?
        /// The Region or Availability Zone that's the source for the data query. For example, us-east-1.
        public let source: String?
        /// The metric data aggregation period, p50, between the specified startDate and endDate. For example, a metric of five_minutes is the median of all the data points gathered within those five minutes. p50 is the only supported metric.
        public let statistic: StatisticType?

        public init(destination: String? = nil, id: String? = nil, metric: MetricType? = nil, period: PeriodType? = nil, source: String? = nil, statistic: StatisticType? = nil) {
            self.destination = destination
            self.id = id
            self.metric = metric
            self.period = period
            self.source = source
            self.statistic = statistic
        }

        private enum CodingKeys: String, CodingKey {
            case destination = "Destination"
            case id = "Id"
            case metric = "Metric"
            case period = "Period"
            case source = "Source"
            case statistic = "Statistic"
        }
    }

    public struct DataResponse: AWSDecodableShape {
        public struct _MetricPointsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Region or Availability Zone that's the destination for the data query. For example, eu-west-1.
        public let destination: String?
        /// The ID passed in the DataQuery.
        public let id: String?
        /// The metric used for the network performance request. Only aggregate-latency is supported, which shows network latency during a specified period.
        public let metric: MetricType?
        /// A list of MetricPoint objects.
        @OptionalCustomCoding<EC2ArrayCoder<_MetricPointsEncoding, MetricPoint>>
        public var metricPoints: [MetricPoint]?
        /// The period used for the network performance request.
        public let period: PeriodType?
        /// The Region or Availability Zone that's the source for the data query. For example, us-east-1.
        public let source: String?
        /// The statistic used for the network performance request.
        public let statistic: StatisticType?

        public init(destination: String? = nil, id: String? = nil, metric: MetricType? = nil, metricPoints: [MetricPoint]? = nil, period: PeriodType? = nil, source: String? = nil, statistic: StatisticType? = nil) {
            self.destination = destination
            self.id = id
            self.metric = metric
            self.metricPoints = metricPoints
            self.period = period
            self.source = source
            self.statistic = statistic
        }

        private enum CodingKeys: String, CodingKey {
            case destination = "destination"
            case id = "id"
            case metric = "metric"
            case metricPoints = "metricPointSet"
            case period = "period"
            case source = "source"
            case statistic = "statistic"
        }
    }

    public struct DeleteCarrierGatewayRequest: AWSEncodableShape {
        /// The ID of the carrier gateway.
        public let carrierGatewayId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(carrierGatewayId: String? = nil, dryRun: Bool? = nil) {
            self.carrierGatewayId = carrierGatewayId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGatewayId = "CarrierGatewayId"
            case dryRun = "DryRun"
        }
    }

    public struct DeleteCarrierGatewayResult: AWSDecodableShape {
        /// Information about the carrier gateway.
        public let carrierGateway: CarrierGateway?

        public init(carrierGateway: CarrierGateway? = nil) {
            self.carrierGateway = carrierGateway
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGateway = "carrierGateway"
        }
    }

    public struct DeleteClientVpnEndpointRequest: AWSEncodableShape {
        /// The ID of the Client VPN to be deleted.
        public let clientVpnEndpointId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(clientVpnEndpointId: String? = nil, dryRun: Bool? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
        }
    }

    public struct DeleteClientVpnEndpointResult: AWSDecodableShape {
        /// The current state of the Client VPN endpoint.
        public let status: ClientVpnEndpointStatus?

        public init(status: ClientVpnEndpointStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
        }
    }

    public struct DeleteClientVpnRouteRequest: AWSEncodableShape {
        /// The ID of the Client VPN endpoint from which the route is to be deleted.
        public let clientVpnEndpointId: String?
        /// The IPv4 address range, in CIDR notation, of the route to be deleted.
        public let destinationCidrBlock: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the target subnet used by the route.
        public let targetVpcSubnetId: String?

        public init(clientVpnEndpointId: String? = nil, destinationCidrBlock: String? = nil, dryRun: Bool? = nil, targetVpcSubnetId: String? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.destinationCidrBlock = destinationCidrBlock
            self.dryRun = dryRun
            self.targetVpcSubnetId = targetVpcSubnetId
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case destinationCidrBlock = "DestinationCidrBlock"
            case dryRun = "DryRun"
            case targetVpcSubnetId = "TargetVpcSubnetId"
        }
    }

    public struct DeleteClientVpnRouteResult: AWSDecodableShape {
        /// The current state of the route.
        public let status: ClientVpnRouteStatus?

        public init(status: ClientVpnRouteStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
        }
    }

    public struct DeleteCoipCidrRequest: AWSEncodableShape {
        ///  A customer-owned IP address range that you want to delete.
        public let cidr: String?
        ///  The ID of the customer-owned address pool.
        public let coipPoolId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(cidr: String? = nil, coipPoolId: String? = nil, dryRun: Bool? = nil) {
            self.cidr = cidr
            self.coipPoolId = coipPoolId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case coipPoolId = "CoipPoolId"
            case dryRun = "DryRun"
        }
    }

    public struct DeleteCoipCidrResult: AWSDecodableShape {
        ///  Information about a range of customer-owned IP addresses.
        public let coipCidr: CoipCidr?

        public init(coipCidr: CoipCidr? = nil) {
            self.coipCidr = coipCidr
        }

        private enum CodingKeys: String, CodingKey {
            case coipCidr = "coipCidr"
        }
    }

    public struct DeleteCoipPoolRequest: AWSEncodableShape {
        /// The ID of the CoIP pool that you want to delete.
        public let coipPoolId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(coipPoolId: String? = nil, dryRun: Bool? = nil) {
            self.coipPoolId = coipPoolId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case coipPoolId = "CoipPoolId"
            case dryRun = "DryRun"
        }
    }

    public struct DeleteCoipPoolResult: AWSDecodableShape {
        /// Information about the CoIP address pool.
        public let coipPool: CoipPool?

        public init(coipPool: CoipPool? = nil) {
            self.coipPool = coipPool
        }

        private enum CodingKeys: String, CodingKey {
            case coipPool = "coipPool"
        }
    }

    public struct DeleteCustomerGatewayRequest: AWSEncodableShape {
        /// The ID of the customer gateway.
        public let customerGatewayId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(customerGatewayId: String? = nil, dryRun: Bool? = nil) {
            self.customerGatewayId = customerGatewayId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case customerGatewayId = "CustomerGatewayId"
            case dryRun = "dryRun"
        }
    }

    public struct DeleteDhcpOptionsRequest: AWSEncodableShape {
        /// The ID of the DHCP options set.
        public let dhcpOptionsId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dhcpOptionsId: String? = nil, dryRun: Bool? = nil) {
            self.dhcpOptionsId = dhcpOptionsId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptionsId = "DhcpOptionsId"
            case dryRun = "dryRun"
        }
    }

    public struct DeleteEgressOnlyInternetGatewayRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the egress-only internet gateway.
        public let egressOnlyInternetGatewayId: String?

        public init(dryRun: Bool? = nil, egressOnlyInternetGatewayId: String? = nil) {
            self.dryRun = dryRun
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case egressOnlyInternetGatewayId = "EgressOnlyInternetGatewayId"
        }
    }

    public struct DeleteEgressOnlyInternetGatewayResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let returnCode: Bool?

        public init(returnCode: Bool? = nil) {
            self.returnCode = returnCode
        }

        private enum CodingKeys: String, CodingKey {
            case returnCode = "returnCode"
        }
    }

    public struct DeleteFleetError: AWSDecodableShape {
        /// The error code.
        public let code: DeleteFleetErrorCode?
        /// The description for the error code.
        public let message: String?

        public init(code: DeleteFleetErrorCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct DeleteFleetErrorItem: AWSDecodableShape {
        /// The error.
        public let error: DeleteFleetError?
        /// The ID of the EC2 Fleet.
        public let fleetId: String?

        public init(error: DeleteFleetError? = nil, fleetId: String? = nil) {
            self.error = error
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case error = "error"
            case fleetId = "fleetId"
        }
    }

    public struct DeleteFleetSuccessItem: AWSDecodableShape {
        /// The current state of the EC2 Fleet.
        public let currentFleetState: FleetStateCode?
        /// The ID of the EC2 Fleet.
        public let fleetId: String?
        /// The previous state of the EC2 Fleet.
        public let previousFleetState: FleetStateCode?

        public init(currentFleetState: FleetStateCode? = nil, fleetId: String? = nil, previousFleetState: FleetStateCode? = nil) {
            self.currentFleetState = currentFleetState
            self.fleetId = fleetId
            self.previousFleetState = previousFleetState
        }

        private enum CodingKeys: String, CodingKey {
            case currentFleetState = "currentFleetState"
            case fleetId = "fleetId"
            case previousFleetState = "previousFleetState"
        }
    }

    public struct DeleteFleetsRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the EC2 Fleets.
        @OptionalCustomCoding<EC2StandardArrayCoder<String>>
        public var fleetIds: [String]?
        /// Indicates whether to terminate the associated instances when the EC2 Fleet is deleted. The default is to terminate the instances. To let the instances continue to run after the EC2 Fleet is deleted, specify no-terminate-instances. Supported only for fleets of type maintain and request. For instant fleets, you cannot specify NoTerminateInstances. A deleted instant fleet with running instances is not supported.
        public let terminateInstances: Bool?

        public init(dryRun: Bool? = nil, fleetIds: [String]? = nil, terminateInstances: Bool? = nil) {
            self.dryRun = dryRun
            self.fleetIds = fleetIds
            self.terminateInstances = terminateInstances
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case fleetIds = "FleetId"
            case terminateInstances = "TerminateInstances"
        }
    }

    public struct DeleteFleetsResult: AWSDecodableShape {
        public struct _SuccessfulFleetDeletionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _UnsuccessfulFleetDeletionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the EC2 Fleets that are successfully deleted.
        @OptionalCustomCoding<EC2ArrayCoder<_SuccessfulFleetDeletionsEncoding, DeleteFleetSuccessItem>>
        public var successfulFleetDeletions: [DeleteFleetSuccessItem]?
        /// Information about the EC2 Fleets that are not successfully deleted.
        @OptionalCustomCoding<EC2ArrayCoder<_UnsuccessfulFleetDeletionsEncoding, DeleteFleetErrorItem>>
        public var unsuccessfulFleetDeletions: [DeleteFleetErrorItem]?

        public init(successfulFleetDeletions: [DeleteFleetSuccessItem]? = nil, unsuccessfulFleetDeletions: [DeleteFleetErrorItem]? = nil) {
            self.successfulFleetDeletions = successfulFleetDeletions
            self.unsuccessfulFleetDeletions = unsuccessfulFleetDeletions
        }

        private enum CodingKeys: String, CodingKey {
            case successfulFleetDeletions = "successfulFleetDeletionSet"
            case unsuccessfulFleetDeletions = "unsuccessfulFleetDeletionSet"
        }
    }

    public struct DeleteFlowLogsRequest: AWSEncodableShape {
        public struct _FlowLogIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more flow log IDs. Constraint: Maximum of 1000 flow log IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_FlowLogIdsEncoding, String>>
        public var flowLogIds: [String]?

        public init(dryRun: Bool? = nil, flowLogIds: [String]? = nil) {
            self.dryRun = dryRun
            self.flowLogIds = flowLogIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case flowLogIds = "FlowLogId"
        }
    }

    public struct DeleteFlowLogsResult: AWSDecodableShape {
        public struct _UnsuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the flow logs that could not be deleted successfully.
        @OptionalCustomCoding<EC2ArrayCoder<_UnsuccessfulEncoding, UnsuccessfulItem>>
        public var unsuccessful: [UnsuccessfulItem]?

        public init(unsuccessful: [UnsuccessfulItem]? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful = "unsuccessful"
        }
    }

    public struct DeleteFpgaImageRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AFI.
        public let fpgaImageId: String?

        public init(dryRun: Bool? = nil, fpgaImageId: String? = nil) {
            self.dryRun = dryRun
            self.fpgaImageId = fpgaImageId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case fpgaImageId = "FpgaImageId"
        }
    }

    public struct DeleteFpgaImageResult: AWSDecodableShape {
        /// Is true if the request succeeds, and an error otherwise.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct DeleteInstanceConnectEndpointRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the EC2 Instance Connect Endpoint to delete.
        public let instanceConnectEndpointId: String?

        public init(dryRun: Bool? = nil, instanceConnectEndpointId: String? = nil) {
            self.dryRun = dryRun
            self.instanceConnectEndpointId = instanceConnectEndpointId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceConnectEndpointId = "InstanceConnectEndpointId"
        }
    }

    public struct DeleteInstanceConnectEndpointResult: AWSDecodableShape {
        /// Information about the EC2 Instance Connect Endpoint.
        public let instanceConnectEndpoint: Ec2InstanceConnectEndpoint?

        public init(instanceConnectEndpoint: Ec2InstanceConnectEndpoint? = nil) {
            self.instanceConnectEndpoint = instanceConnectEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case instanceConnectEndpoint = "instanceConnectEndpoint"
        }
    }

    public struct DeleteInstanceEventWindowRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specify true to force delete the event window. Use the force delete parameter if the event window is currently associated with targets.
        public let forceDelete: Bool?
        /// The ID of the event window.
        public let instanceEventWindowId: String?

        public init(dryRun: Bool? = nil, forceDelete: Bool? = nil, instanceEventWindowId: String? = nil) {
            self.dryRun = dryRun
            self.forceDelete = forceDelete
            self.instanceEventWindowId = instanceEventWindowId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case forceDelete = "ForceDelete"
            case instanceEventWindowId = "InstanceEventWindowId"
        }
    }

    public struct DeleteInstanceEventWindowResult: AWSDecodableShape {
        /// The state of the event window.
        public let instanceEventWindowState: InstanceEventWindowStateChange?

        public init(instanceEventWindowState: InstanceEventWindowStateChange? = nil) {
            self.instanceEventWindowState = instanceEventWindowState
        }

        private enum CodingKeys: String, CodingKey {
            case instanceEventWindowState = "instanceEventWindowState"
        }
    }

    public struct DeleteInternetGatewayRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the internet gateway.
        public let internetGatewayId: String?

        public init(dryRun: Bool? = nil, internetGatewayId: String? = nil) {
            self.dryRun = dryRun
            self.internetGatewayId = internetGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case internetGatewayId = "internetGatewayId"
        }
    }

    public struct DeleteIpamPoolRequest: AWSEncodableShape {
        /// Enables you to quickly delete an IPAM pool and all resources within that pool, including provisioned CIDRs, allocations, and other pools.  You can only use this option to delete pools in the private scope or pools in the public scope with a source resource. A source resource is a resource used to provision CIDRs to a resource planning pool.
        public let cascade: Bool?
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the pool to delete.
        public let ipamPoolId: String?

        public init(cascade: Bool? = nil, dryRun: Bool? = nil, ipamPoolId: String? = nil) {
            self.cascade = cascade
            self.dryRun = dryRun
            self.ipamPoolId = ipamPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case cascade = "Cascade"
            case dryRun = "DryRun"
            case ipamPoolId = "IpamPoolId"
        }
    }

    public struct DeleteIpamPoolResult: AWSDecodableShape {
        /// Information about the results of the deletion.
        public let ipamPool: IpamPool?

        public init(ipamPool: IpamPool? = nil) {
            self.ipamPool = ipamPool
        }

        private enum CodingKeys: String, CodingKey {
            case ipamPool = "ipamPool"
        }
    }

    public struct DeleteIpamRequest: AWSEncodableShape {
        /// Enables you to quickly delete an IPAM, private scopes, pools in private scopes, and any allocations in the pools in private scopes. You cannot delete the IPAM with this option if there is a pool in your public scope. If you use this option, IPAM does the following:   Deallocates any CIDRs allocated to VPC resources (such as VPCs) in pools in private scopes.  No VPC resources are deleted as a result of enabling this option. The CIDR associated with the resource will no longer be allocated from an IPAM pool, but the CIDR itself will remain unchanged.    Deprovisions all IPv4 CIDRs provisioned to IPAM pools in private scopes.   Deletes all IPAM pools in private scopes.   Deletes all non-default private scopes in the IPAM.   Deletes the default public and private scopes and the IPAM.
        public let cascade: Bool?
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the IPAM to delete.
        public let ipamId: String?

        public init(cascade: Bool? = nil, dryRun: Bool? = nil, ipamId: String? = nil) {
            self.cascade = cascade
            self.dryRun = dryRun
            self.ipamId = ipamId
        }

        private enum CodingKeys: String, CodingKey {
            case cascade = "Cascade"
            case dryRun = "DryRun"
            case ipamId = "IpamId"
        }
    }

    public struct DeleteIpamResourceDiscoveryRequest: AWSEncodableShape {
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IPAM resource discovery ID.
        public let ipamResourceDiscoveryId: String?

        public init(dryRun: Bool? = nil, ipamResourceDiscoveryId: String? = nil) {
            self.dryRun = dryRun
            self.ipamResourceDiscoveryId = ipamResourceDiscoveryId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case ipamResourceDiscoveryId = "IpamResourceDiscoveryId"
        }
    }

    public struct DeleteIpamResourceDiscoveryResult: AWSDecodableShape {
        /// The IPAM resource discovery.
        public let ipamResourceDiscovery: IpamResourceDiscovery?

        public init(ipamResourceDiscovery: IpamResourceDiscovery? = nil) {
            self.ipamResourceDiscovery = ipamResourceDiscovery
        }

        private enum CodingKeys: String, CodingKey {
            case ipamResourceDiscovery = "ipamResourceDiscovery"
        }
    }

    public struct DeleteIpamResult: AWSDecodableShape {
        /// Information about the results of the deletion.
        public let ipam: Ipam?

        public init(ipam: Ipam? = nil) {
            self.ipam = ipam
        }

        private enum CodingKeys: String, CodingKey {
            case ipam = "ipam"
        }
    }

    public struct DeleteIpamScopeRequest: AWSEncodableShape {
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the scope to delete.
        public let ipamScopeId: String?

        public init(dryRun: Bool? = nil, ipamScopeId: String? = nil) {
            self.dryRun = dryRun
            self.ipamScopeId = ipamScopeId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case ipamScopeId = "IpamScopeId"
        }
    }

    public struct DeleteIpamScopeResult: AWSDecodableShape {
        /// Information about the results of the deletion.
        public let ipamScope: IpamScope?

        public init(ipamScope: IpamScope? = nil) {
            self.ipamScope = ipamScope
        }

        private enum CodingKeys: String, CodingKey {
            case ipamScope = "ipamScope"
        }
    }

    public struct DeleteKeyPairRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name of the key pair.
        public let keyName: String?
        /// The ID of the key pair.
        public let keyPairId: String?

        public init(dryRun: Bool? = nil, keyName: String? = nil, keyPairId: String? = nil) {
            self.dryRun = dryRun
            self.keyName = keyName
            self.keyPairId = keyPairId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case keyName = "KeyName"
            case keyPairId = "KeyPairId"
        }
    }

    public struct DeleteKeyPairResult: AWSDecodableShape {
        /// The ID of the key pair.
        public let keyPairId: String?
        /// Is true if the request succeeds, and an error otherwise.
        public let `return`: Bool?

        public init(keyPairId: String? = nil, return: Bool? = nil) {
            self.keyPairId = keyPairId
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case keyPairId = "keyPairId"
            case `return` = "return"
        }
    }

    public struct DeleteLaunchTemplateRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the launch template. You must specify either the LaunchTemplateId or the LaunchTemplateName, but not both.
        public let launchTemplateId: String?
        /// The name of the launch template. You must specify either the LaunchTemplateName or the LaunchTemplateId, but not both.
        public let launchTemplateName: String?

        public init(dryRun: Bool? = nil, launchTemplateId: String? = nil, launchTemplateName: String? = nil) {
            self.dryRun = dryRun
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
        }

        public func validate(name: String) throws {
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, max: 128)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, min: 3)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, pattern: "^[a-zA-Z0-9\\(\\)\\.\\-/_]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
        }
    }

    public struct DeleteLaunchTemplateResult: AWSDecodableShape {
        /// Information about the launch template.
        public let launchTemplate: LaunchTemplate?

        public init(launchTemplate: LaunchTemplate? = nil) {
            self.launchTemplate = launchTemplate
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplate = "launchTemplate"
        }
    }

    public struct DeleteLaunchTemplateVersionsRequest: AWSEncodableShape {
        public struct _VersionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the launch template. You must specify either the LaunchTemplateId or the LaunchTemplateName, but not both.
        public let launchTemplateId: String?
        /// The name of the launch template. You must specify either the LaunchTemplateName or the LaunchTemplateId, but not both.
        public let launchTemplateName: String?
        /// The version numbers of one or more launch template versions to delete. You can specify up to 200 launch template version numbers.
        @OptionalCustomCoding<EC2ArrayCoder<_VersionsEncoding, String>>
        public var versions: [String]?

        public init(dryRun: Bool? = nil, launchTemplateId: String? = nil, launchTemplateName: String? = nil, versions: [String]? = nil) {
            self.dryRun = dryRun
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.versions = versions
        }

        public func validate(name: String) throws {
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, max: 128)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, min: 3)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, pattern: "^[a-zA-Z0-9\\(\\)\\.\\-/_]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
            case versions = "LaunchTemplateVersion"
        }
    }

    public struct DeleteLaunchTemplateVersionsResponseErrorItem: AWSDecodableShape {
        /// The ID of the launch template.
        public let launchTemplateId: String?
        /// The name of the launch template.
        public let launchTemplateName: String?
        /// Information about the error.
        public let responseError: ResponseError?
        /// The version number of the launch template.
        public let versionNumber: Int64?

        public init(launchTemplateId: String? = nil, launchTemplateName: String? = nil, responseError: ResponseError? = nil, versionNumber: Int64? = nil) {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.responseError = responseError
            self.versionNumber = versionNumber
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId = "launchTemplateId"
            case launchTemplateName = "launchTemplateName"
            case responseError = "responseError"
            case versionNumber = "versionNumber"
        }
    }

    public struct DeleteLaunchTemplateVersionsResponseSuccessItem: AWSDecodableShape {
        /// The ID of the launch template.
        public let launchTemplateId: String?
        /// The name of the launch template.
        public let launchTemplateName: String?
        /// The version number of the launch template.
        public let versionNumber: Int64?

        public init(launchTemplateId: String? = nil, launchTemplateName: String? = nil, versionNumber: Int64? = nil) {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.versionNumber = versionNumber
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId = "launchTemplateId"
            case launchTemplateName = "launchTemplateName"
            case versionNumber = "versionNumber"
        }
    }

    public struct DeleteLaunchTemplateVersionsResult: AWSDecodableShape {
        public struct _SuccessfullyDeletedLaunchTemplateVersionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _UnsuccessfullyDeletedLaunchTemplateVersionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the launch template versions that were successfully deleted.
        @OptionalCustomCoding<EC2ArrayCoder<_SuccessfullyDeletedLaunchTemplateVersionsEncoding, DeleteLaunchTemplateVersionsResponseSuccessItem>>
        public var successfullyDeletedLaunchTemplateVersions: [DeleteLaunchTemplateVersionsResponseSuccessItem]?
        /// Information about the launch template versions that could not be deleted.
        @OptionalCustomCoding<EC2ArrayCoder<_UnsuccessfullyDeletedLaunchTemplateVersionsEncoding, DeleteLaunchTemplateVersionsResponseErrorItem>>
        public var unsuccessfullyDeletedLaunchTemplateVersions: [DeleteLaunchTemplateVersionsResponseErrorItem]?

        public init(successfullyDeletedLaunchTemplateVersions: [DeleteLaunchTemplateVersionsResponseSuccessItem]? = nil, unsuccessfullyDeletedLaunchTemplateVersions: [DeleteLaunchTemplateVersionsResponseErrorItem]? = nil) {
            self.successfullyDeletedLaunchTemplateVersions = successfullyDeletedLaunchTemplateVersions
            self.unsuccessfullyDeletedLaunchTemplateVersions = unsuccessfullyDeletedLaunchTemplateVersions
        }

        private enum CodingKeys: String, CodingKey {
            case successfullyDeletedLaunchTemplateVersions = "successfullyDeletedLaunchTemplateVersionSet"
            case unsuccessfullyDeletedLaunchTemplateVersions = "unsuccessfullyDeletedLaunchTemplateVersionSet"
        }
    }

    public struct DeleteLocalGatewayRouteRequest: AWSEncodableShape {
        /// The CIDR range for the route. This must match the CIDR for the route exactly.
        public let destinationCidrBlock: String?
        ///  Use a prefix list in place of DestinationCidrBlock. You cannot use  DestinationPrefixListId and DestinationCidrBlock in the same request.
        public let destinationPrefixListId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?

        public init(destinationCidrBlock: String? = nil, destinationPrefixListId: String? = nil, dryRun: Bool? = nil, localGatewayRouteTableId: String? = nil) {
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationPrefixListId = destinationPrefixListId
            self.dryRun = dryRun
            self.localGatewayRouteTableId = localGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "DestinationCidrBlock"
            case destinationPrefixListId = "DestinationPrefixListId"
            case dryRun = "DryRun"
            case localGatewayRouteTableId = "LocalGatewayRouteTableId"
        }
    }

    public struct DeleteLocalGatewayRouteResult: AWSDecodableShape {
        /// Information about the route.
        public let route: LocalGatewayRoute?

        public init(route: LocalGatewayRoute? = nil) {
            self.route = route
        }

        private enum CodingKeys: String, CodingKey {
            case route = "route"
        }
    }

    public struct DeleteLocalGatewayRouteTableRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        ///  The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?

        public init(dryRun: Bool? = nil, localGatewayRouteTableId: String? = nil) {
            self.dryRun = dryRun
            self.localGatewayRouteTableId = localGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case localGatewayRouteTableId = "LocalGatewayRouteTableId"
        }
    }

    public struct DeleteLocalGatewayRouteTableResult: AWSDecodableShape {
        /// Information about the local gateway route table.
        public let localGatewayRouteTable: LocalGatewayRouteTable?

        public init(localGatewayRouteTable: LocalGatewayRouteTable? = nil) {
            self.localGatewayRouteTable = localGatewayRouteTable
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayRouteTable = "localGatewayRouteTable"
        }
    }

    public struct DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        ///  The ID of the local gateway route table virtual interface group association.
        public let localGatewayRouteTableVirtualInterfaceGroupAssociationId: String?

        public init(dryRun: Bool? = nil, localGatewayRouteTableVirtualInterfaceGroupAssociationId: String? = nil) {
            self.dryRun = dryRun
            self.localGatewayRouteTableVirtualInterfaceGroupAssociationId = localGatewayRouteTableVirtualInterfaceGroupAssociationId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case localGatewayRouteTableVirtualInterfaceGroupAssociationId = "LocalGatewayRouteTableVirtualInterfaceGroupAssociationId"
        }
    }

    public struct DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult: AWSDecodableShape {
        /// Information about the association.
        public let localGatewayRouteTableVirtualInterfaceGroupAssociation: LocalGatewayRouteTableVirtualInterfaceGroupAssociation?

        public init(localGatewayRouteTableVirtualInterfaceGroupAssociation: LocalGatewayRouteTableVirtualInterfaceGroupAssociation? = nil) {
            self.localGatewayRouteTableVirtualInterfaceGroupAssociation = localGatewayRouteTableVirtualInterfaceGroupAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayRouteTableVirtualInterfaceGroupAssociation = "localGatewayRouteTableVirtualInterfaceGroupAssociation"
        }
    }

    public struct DeleteLocalGatewayRouteTableVpcAssociationRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the association.
        public let localGatewayRouteTableVpcAssociationId: String?

        public init(dryRun: Bool? = nil, localGatewayRouteTableVpcAssociationId: String? = nil) {
            self.dryRun = dryRun
            self.localGatewayRouteTableVpcAssociationId = localGatewayRouteTableVpcAssociationId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case localGatewayRouteTableVpcAssociationId = "LocalGatewayRouteTableVpcAssociationId"
        }
    }

    public struct DeleteLocalGatewayRouteTableVpcAssociationResult: AWSDecodableShape {
        /// Information about the association.
        public let localGatewayRouteTableVpcAssociation: LocalGatewayRouteTableVpcAssociation?

        public init(localGatewayRouteTableVpcAssociation: LocalGatewayRouteTableVpcAssociation? = nil) {
            self.localGatewayRouteTableVpcAssociation = localGatewayRouteTableVpcAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayRouteTableVpcAssociation = "localGatewayRouteTableVpcAssociation"
        }
    }

    public struct DeleteManagedPrefixListRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the prefix list.
        public let prefixListId: String?

        public init(dryRun: Bool? = nil, prefixListId: String? = nil) {
            self.dryRun = dryRun
            self.prefixListId = prefixListId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case prefixListId = "PrefixListId"
        }
    }

    public struct DeleteManagedPrefixListResult: AWSDecodableShape {
        /// Information about the prefix list.
        public let prefixList: ManagedPrefixList?

        public init(prefixList: ManagedPrefixList? = nil) {
            self.prefixList = prefixList
        }

        private enum CodingKeys: String, CodingKey {
            case prefixList = "prefixList"
        }
    }

    public struct DeleteNatGatewayRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the NAT gateway.
        public let natGatewayId: String?

        public init(dryRun: Bool? = nil, natGatewayId: String? = nil) {
            self.dryRun = dryRun
            self.natGatewayId = natGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case natGatewayId = "NatGatewayId"
        }
    }

    public struct DeleteNatGatewayResult: AWSDecodableShape {
        /// The ID of the NAT gateway.
        public let natGatewayId: String?

        public init(natGatewayId: String? = nil) {
            self.natGatewayId = natGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case natGatewayId = "natGatewayId"
        }
    }

    public struct DeleteNetworkAclEntryRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether the rule is an egress rule.
        public let egress: Bool?
        /// The ID of the network ACL.
        public let networkAclId: String?
        /// The rule number of the entry to delete.
        public let ruleNumber: Int?

        public init(dryRun: Bool? = nil, egress: Bool? = nil, networkAclId: String? = nil, ruleNumber: Int? = nil) {
            self.dryRun = dryRun
            self.egress = egress
            self.networkAclId = networkAclId
            self.ruleNumber = ruleNumber
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case egress = "egress"
            case networkAclId = "networkAclId"
            case ruleNumber = "ruleNumber"
        }
    }

    public struct DeleteNetworkAclRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the network ACL.
        public let networkAclId: String?

        public init(dryRun: Bool? = nil, networkAclId: String? = nil) {
            self.dryRun = dryRun
            self.networkAclId = networkAclId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case networkAclId = "networkAclId"
        }
    }

    public struct DeleteNetworkInsightsAccessScopeAnalysisRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Network Access Scope analysis.
        public let networkInsightsAccessScopeAnalysisId: String?

        public init(dryRun: Bool? = nil, networkInsightsAccessScopeAnalysisId: String? = nil) {
            self.dryRun = dryRun
            self.networkInsightsAccessScopeAnalysisId = networkInsightsAccessScopeAnalysisId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case networkInsightsAccessScopeAnalysisId = "NetworkInsightsAccessScopeAnalysisId"
        }
    }

    public struct DeleteNetworkInsightsAccessScopeAnalysisResult: AWSDecodableShape {
        /// The ID of the Network Access Scope analysis.
        public let networkInsightsAccessScopeAnalysisId: String?

        public init(networkInsightsAccessScopeAnalysisId: String? = nil) {
            self.networkInsightsAccessScopeAnalysisId = networkInsightsAccessScopeAnalysisId
        }

        private enum CodingKeys: String, CodingKey {
            case networkInsightsAccessScopeAnalysisId = "networkInsightsAccessScopeAnalysisId"
        }
    }

    public struct DeleteNetworkInsightsAccessScopeRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Network Access Scope.
        public let networkInsightsAccessScopeId: String?

        public init(dryRun: Bool? = nil, networkInsightsAccessScopeId: String? = nil) {
            self.dryRun = dryRun
            self.networkInsightsAccessScopeId = networkInsightsAccessScopeId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case networkInsightsAccessScopeId = "NetworkInsightsAccessScopeId"
        }
    }

    public struct DeleteNetworkInsightsAccessScopeResult: AWSDecodableShape {
        /// The ID of the Network Access Scope.
        public let networkInsightsAccessScopeId: String?

        public init(networkInsightsAccessScopeId: String? = nil) {
            self.networkInsightsAccessScopeId = networkInsightsAccessScopeId
        }

        private enum CodingKeys: String, CodingKey {
            case networkInsightsAccessScopeId = "networkInsightsAccessScopeId"
        }
    }

    public struct DeleteNetworkInsightsAnalysisRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the network insights analysis.
        public let networkInsightsAnalysisId: String?

        public init(dryRun: Bool? = nil, networkInsightsAnalysisId: String? = nil) {
            self.dryRun = dryRun
            self.networkInsightsAnalysisId = networkInsightsAnalysisId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case networkInsightsAnalysisId = "NetworkInsightsAnalysisId"
        }
    }

    public struct DeleteNetworkInsightsAnalysisResult: AWSDecodableShape {
        /// The ID of the network insights analysis.
        public let networkInsightsAnalysisId: String?

        public init(networkInsightsAnalysisId: String? = nil) {
            self.networkInsightsAnalysisId = networkInsightsAnalysisId
        }

        private enum CodingKeys: String, CodingKey {
            case networkInsightsAnalysisId = "networkInsightsAnalysisId"
        }
    }

    public struct DeleteNetworkInsightsPathRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the path.
        public let networkInsightsPathId: String?

        public init(dryRun: Bool? = nil, networkInsightsPathId: String? = nil) {
            self.dryRun = dryRun
            self.networkInsightsPathId = networkInsightsPathId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case networkInsightsPathId = "NetworkInsightsPathId"
        }
    }

    public struct DeleteNetworkInsightsPathResult: AWSDecodableShape {
        /// The ID of the path.
        public let networkInsightsPathId: String?

        public init(networkInsightsPathId: String? = nil) {
            self.networkInsightsPathId = networkInsightsPathId
        }

        private enum CodingKeys: String, CodingKey {
            case networkInsightsPathId = "networkInsightsPathId"
        }
    }

    public struct DeleteNetworkInterfacePermissionRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is DryRunOperation.
        /// 			Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specify true to remove the permission even if the network interface is
        /// 			attached to an instance.
        public let force: Bool?
        /// The ID of the network interface permission.
        public let networkInterfacePermissionId: String?

        public init(dryRun: Bool? = nil, force: Bool? = nil, networkInterfacePermissionId: String? = nil) {
            self.dryRun = dryRun
            self.force = force
            self.networkInterfacePermissionId = networkInterfacePermissionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case force = "Force"
            case networkInterfacePermissionId = "NetworkInterfacePermissionId"
        }
    }

    public struct DeleteNetworkInterfacePermissionResult: AWSDecodableShape {
        /// Returns true if the request succeeds, otherwise returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct DeleteNetworkInterfaceRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the network interface.
        public let networkInterfaceId: String?

        public init(dryRun: Bool? = nil, networkInterfaceId: String? = nil) {
            self.dryRun = dryRun
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct DeletePlacementGroupRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name of the placement group.
        public let groupName: String?

        public init(dryRun: Bool? = nil, groupName: String? = nil) {
            self.dryRun = dryRun
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case groupName = "groupName"
        }
    }

    public struct DeletePublicIpv4PoolRequest: AWSEncodableShape {
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the public IPv4 pool you want to delete.
        public let poolId: String?

        public init(dryRun: Bool? = nil, poolId: String? = nil) {
            self.dryRun = dryRun
            self.poolId = poolId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case poolId = "PoolId"
        }
    }

    public struct DeletePublicIpv4PoolResult: AWSDecodableShape {
        /// Information about the result of deleting the public IPv4 pool.
        public let returnValue: Bool?

        public init(returnValue: Bool? = nil) {
            self.returnValue = returnValue
        }

        private enum CodingKeys: String, CodingKey {
            case returnValue = "returnValue"
        }
    }

    public struct DeleteQueuedReservedInstancesError: AWSDecodableShape {
        /// The error code.
        public let code: DeleteQueuedReservedInstancesErrorCode?
        /// The error message.
        public let message: String?

        public init(code: DeleteQueuedReservedInstancesErrorCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct DeleteQueuedReservedInstancesRequest: AWSEncodableShape {
        public struct _ReservedInstancesIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the Reserved Instances.
        @OptionalCustomCoding<EC2ArrayCoder<_ReservedInstancesIdsEncoding, String>>
        public var reservedInstancesIds: [String]?

        public init(dryRun: Bool? = nil, reservedInstancesIds: [String]? = nil) {
            self.dryRun = dryRun
            self.reservedInstancesIds = reservedInstancesIds
        }

        public func validate(name: String) throws {
            try self.validate(self.reservedInstancesIds, name: "reservedInstancesIds", parent: name, max: 100)
            try self.validate(self.reservedInstancesIds, name: "reservedInstancesIds", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case reservedInstancesIds = "ReservedInstancesId"
        }
    }

    public struct DeleteQueuedReservedInstancesResult: AWSDecodableShape {
        public struct _FailedQueuedPurchaseDeletionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SuccessfulQueuedPurchaseDeletionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the queued purchases that could not be deleted.
        @OptionalCustomCoding<EC2ArrayCoder<_FailedQueuedPurchaseDeletionsEncoding, FailedQueuedPurchaseDeletion>>
        public var failedQueuedPurchaseDeletions: [FailedQueuedPurchaseDeletion]?
        /// Information about the queued purchases that were successfully deleted.
        @OptionalCustomCoding<EC2ArrayCoder<_SuccessfulQueuedPurchaseDeletionsEncoding, SuccessfulQueuedPurchaseDeletion>>
        public var successfulQueuedPurchaseDeletions: [SuccessfulQueuedPurchaseDeletion]?

        public init(failedQueuedPurchaseDeletions: [FailedQueuedPurchaseDeletion]? = nil, successfulQueuedPurchaseDeletions: [SuccessfulQueuedPurchaseDeletion]? = nil) {
            self.failedQueuedPurchaseDeletions = failedQueuedPurchaseDeletions
            self.successfulQueuedPurchaseDeletions = successfulQueuedPurchaseDeletions
        }

        private enum CodingKeys: String, CodingKey {
            case failedQueuedPurchaseDeletions = "failedQueuedPurchaseDeletionSet"
            case successfulQueuedPurchaseDeletions = "successfulQueuedPurchaseDeletionSet"
        }
    }

    public struct DeleteRouteRequest: AWSEncodableShape {
        /// The IPv4 CIDR range for the route. The value you specify must match the CIDR for the route exactly.
        public let destinationCidrBlock: String?
        /// The IPv6 CIDR range for the route. The value you specify must match the CIDR for the route exactly.
        public let destinationIpv6CidrBlock: String?
        /// The ID of the prefix list for the route.
        public let destinationPrefixListId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the route table.
        public let routeTableId: String?

        public init(destinationCidrBlock: String? = nil, destinationIpv6CidrBlock: String? = nil, destinationPrefixListId: String? = nil, dryRun: Bool? = nil, routeTableId: String? = nil) {
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
            self.destinationPrefixListId = destinationPrefixListId
            self.dryRun = dryRun
            self.routeTableId = routeTableId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "destinationCidrBlock"
            case destinationIpv6CidrBlock = "destinationIpv6CidrBlock"
            case destinationPrefixListId = "DestinationPrefixListId"
            case dryRun = "dryRun"
            case routeTableId = "routeTableId"
        }
    }

    public struct DeleteRouteTableRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the route table.
        public let routeTableId: String?

        public init(dryRun: Bool? = nil, routeTableId: String? = nil) {
            self.dryRun = dryRun
            self.routeTableId = routeTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case routeTableId = "routeTableId"
        }
    }

    public struct DeleteSecurityGroupRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the security group.
        public let groupId: String?
        /// [Default VPC] The name of the security group. You can specify either the security group name or the security group ID. For security groups in a nondefault VPC, you must specify the security group ID.
        public let groupName: String?

        public init(dryRun: Bool? = nil, groupId: String? = nil, groupName: String? = nil) {
            self.dryRun = dryRun
            self.groupId = groupId
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case groupId = "GroupId"
            case groupName = "GroupName"
        }
    }

    public struct DeleteSnapshotRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the EBS snapshot.
        public let snapshotId: String?

        public init(dryRun: Bool? = nil, snapshotId: String? = nil) {
            self.dryRun = dryRun
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case snapshotId = "SnapshotId"
        }
    }

    public struct DeleteSpotDatafeedSubscriptionRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
        }
    }

    public struct DeleteSubnetCidrReservationRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the subnet CIDR reservation.
        public let subnetCidrReservationId: String?

        public init(dryRun: Bool? = nil, subnetCidrReservationId: String? = nil) {
            self.dryRun = dryRun
            self.subnetCidrReservationId = subnetCidrReservationId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case subnetCidrReservationId = "SubnetCidrReservationId"
        }
    }

    public struct DeleteSubnetCidrReservationResult: AWSDecodableShape {
        /// Information about the deleted subnet CIDR reservation.
        public let deletedSubnetCidrReservation: SubnetCidrReservation?

        public init(deletedSubnetCidrReservation: SubnetCidrReservation? = nil) {
            self.deletedSubnetCidrReservation = deletedSubnetCidrReservation
        }

        private enum CodingKeys: String, CodingKey {
            case deletedSubnetCidrReservation = "deletedSubnetCidrReservation"
        }
    }

    public struct DeleteSubnetRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(dryRun: Bool? = nil, subnetId: String? = nil) {
            self.dryRun = dryRun
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case subnetId = "SubnetId"
        }
    }

    public struct DeleteTagsRequest: AWSEncodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the resources, separated by spaces. Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.
        @OptionalCustomCoding<EC2StandardArrayCoder<String>>
        public var resources: [String]?
        /// The tags to delete. Specify a tag key and an optional tag value to delete specific tags. If you specify a tag key without a tag value, we delete any tag with this key regardless of its value. If you specify a tag key with an empty string as the tag value, we delete the tag only if its value is an empty string. If you omit this parameter, we delete all user-defined tags for the specified resources. We do not delete Amazon Web Services-generated tags (tags that have the aws: prefix). Constraints: Up to 1000 tags.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(dryRun: Bool? = nil, resources: [String]? = nil, tags: [Tag]? = nil) {
            self.dryRun = dryRun
            self.resources = resources
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case resources = "resourceId"
            case tags = "tag"
        }
    }

    public struct DeleteTrafficMirrorFilterRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Traffic Mirror filter.
        public let trafficMirrorFilterId: String?

        public init(dryRun: Bool? = nil, trafficMirrorFilterId: String? = nil) {
            self.dryRun = dryRun
            self.trafficMirrorFilterId = trafficMirrorFilterId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case trafficMirrorFilterId = "TrafficMirrorFilterId"
        }
    }

    public struct DeleteTrafficMirrorFilterResult: AWSDecodableShape {
        /// The ID of the Traffic Mirror filter.
        public let trafficMirrorFilterId: String?

        public init(trafficMirrorFilterId: String? = nil) {
            self.trafficMirrorFilterId = trafficMirrorFilterId
        }

        private enum CodingKeys: String, CodingKey {
            case trafficMirrorFilterId = "trafficMirrorFilterId"
        }
    }

    public struct DeleteTrafficMirrorFilterRuleRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Traffic Mirror rule.
        public let trafficMirrorFilterRuleId: String?

        public init(dryRun: Bool? = nil, trafficMirrorFilterRuleId: String? = nil) {
            self.dryRun = dryRun
            self.trafficMirrorFilterRuleId = trafficMirrorFilterRuleId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case trafficMirrorFilterRuleId = "TrafficMirrorFilterRuleId"
        }
    }

    public struct DeleteTrafficMirrorFilterRuleResult: AWSDecodableShape {
        /// The ID of the deleted Traffic Mirror rule.
        public let trafficMirrorFilterRuleId: String?

        public init(trafficMirrorFilterRuleId: String? = nil) {
            self.trafficMirrorFilterRuleId = trafficMirrorFilterRuleId
        }

        private enum CodingKeys: String, CodingKey {
            case trafficMirrorFilterRuleId = "trafficMirrorFilterRuleId"
        }
    }

    public struct DeleteTrafficMirrorSessionRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Traffic Mirror session.
        public let trafficMirrorSessionId: String?

        public init(dryRun: Bool? = nil, trafficMirrorSessionId: String? = nil) {
            self.dryRun = dryRun
            self.trafficMirrorSessionId = trafficMirrorSessionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case trafficMirrorSessionId = "TrafficMirrorSessionId"
        }
    }

    public struct DeleteTrafficMirrorSessionResult: AWSDecodableShape {
        /// The ID of the deleted Traffic Mirror session.
        public let trafficMirrorSessionId: String?

        public init(trafficMirrorSessionId: String? = nil) {
            self.trafficMirrorSessionId = trafficMirrorSessionId
        }

        private enum CodingKeys: String, CodingKey {
            case trafficMirrorSessionId = "trafficMirrorSessionId"
        }
    }

    public struct DeleteTrafficMirrorTargetRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Traffic Mirror target.
        public let trafficMirrorTargetId: String?

        public init(dryRun: Bool? = nil, trafficMirrorTargetId: String? = nil) {
            self.dryRun = dryRun
            self.trafficMirrorTargetId = trafficMirrorTargetId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case trafficMirrorTargetId = "TrafficMirrorTargetId"
        }
    }

    public struct DeleteTrafficMirrorTargetResult: AWSDecodableShape {
        /// The ID of the deleted Traffic Mirror target.
        public let trafficMirrorTargetId: String?

        public init(trafficMirrorTargetId: String? = nil) {
            self.trafficMirrorTargetId = trafficMirrorTargetId
        }

        private enum CodingKeys: String, CodingKey {
            case trafficMirrorTargetId = "trafficMirrorTargetId"
        }
    }

    public struct DeleteTransitGatewayConnectPeerRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Connect peer.
        public let transitGatewayConnectPeerId: String?

        public init(dryRun: Bool? = nil, transitGatewayConnectPeerId: String? = nil) {
            self.dryRun = dryRun
            self.transitGatewayConnectPeerId = transitGatewayConnectPeerId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayConnectPeerId = "TransitGatewayConnectPeerId"
        }
    }

    public struct DeleteTransitGatewayConnectPeerResult: AWSDecodableShape {
        /// Information about the deleted Connect peer.
        public let transitGatewayConnectPeer: TransitGatewayConnectPeer?

        public init(transitGatewayConnectPeer: TransitGatewayConnectPeer? = nil) {
            self.transitGatewayConnectPeer = transitGatewayConnectPeer
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayConnectPeer = "transitGatewayConnectPeer"
        }
    }

    public struct DeleteTransitGatewayConnectRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Connect attachment.
        public let transitGatewayAttachmentId: String?

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String? = nil) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct DeleteTransitGatewayConnectResult: AWSDecodableShape {
        /// Information about the deleted Connect attachment.
        public let transitGatewayConnect: TransitGatewayConnect?

        public init(transitGatewayConnect: TransitGatewayConnect? = nil) {
            self.transitGatewayConnect = transitGatewayConnect
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayConnect = "transitGatewayConnect"
        }
    }

    public struct DeleteTransitGatewayMulticastDomainRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct DeleteTransitGatewayMulticastDomainResult: AWSDecodableShape {
        /// Information about the deleted transit gateway multicast domain.
        public let transitGatewayMulticastDomain: TransitGatewayMulticastDomain?

        public init(transitGatewayMulticastDomain: TransitGatewayMulticastDomain? = nil) {
            self.transitGatewayMulticastDomain = transitGatewayMulticastDomain
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayMulticastDomain = "transitGatewayMulticastDomain"
        }
    }

    public struct DeleteTransitGatewayPeeringAttachmentRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway peering attachment.
        public let transitGatewayAttachmentId: String?

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String? = nil) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct DeleteTransitGatewayPeeringAttachmentResult: AWSDecodableShape {
        /// The transit gateway peering attachment.
        public let transitGatewayPeeringAttachment: TransitGatewayPeeringAttachment?

        public init(transitGatewayPeeringAttachment: TransitGatewayPeeringAttachment? = nil) {
            self.transitGatewayPeeringAttachment = transitGatewayPeeringAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayPeeringAttachment = "transitGatewayPeeringAttachment"
        }
    }

    public struct DeleteTransitGatewayPolicyTableRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The transit gateway policy table to delete.
        public let transitGatewayPolicyTableId: String?

        public init(dryRun: Bool? = nil, transitGatewayPolicyTableId: String? = nil) {
            self.dryRun = dryRun
            self.transitGatewayPolicyTableId = transitGatewayPolicyTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayPolicyTableId = "TransitGatewayPolicyTableId"
        }
    }

    public struct DeleteTransitGatewayPolicyTableResult: AWSDecodableShape {
        /// Provides details about the deleted transit gateway policy table.
        public let transitGatewayPolicyTable: TransitGatewayPolicyTable?

        public init(transitGatewayPolicyTable: TransitGatewayPolicyTable? = nil) {
            self.transitGatewayPolicyTable = transitGatewayPolicyTable
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayPolicyTable = "transitGatewayPolicyTable"
        }
    }

    public struct DeleteTransitGatewayPrefixListReferenceRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the prefix list.
        public let prefixListId: String?
        /// The ID of the route table.
        public let transitGatewayRouteTableId: String?

        public init(dryRun: Bool? = nil, prefixListId: String? = nil, transitGatewayRouteTableId: String? = nil) {
            self.dryRun = dryRun
            self.prefixListId = prefixListId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case prefixListId = "PrefixListId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct DeleteTransitGatewayPrefixListReferenceResult: AWSDecodableShape {
        /// Information about the deleted prefix list reference.
        public let transitGatewayPrefixListReference: TransitGatewayPrefixListReference?

        public init(transitGatewayPrefixListReference: TransitGatewayPrefixListReference? = nil) {
            self.transitGatewayPrefixListReference = transitGatewayPrefixListReference
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayPrefixListReference = "transitGatewayPrefixListReference"
        }
    }

    public struct DeleteTransitGatewayRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?

        public init(dryRun: Bool? = nil, transitGatewayId: String? = nil) {
            self.dryRun = dryRun
            self.transitGatewayId = transitGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayId = "TransitGatewayId"
        }
    }

    public struct DeleteTransitGatewayResult: AWSDecodableShape {
        /// Information about the deleted transit gateway.
        public let transitGateway: TransitGateway?

        public init(transitGateway: TransitGateway? = nil) {
            self.transitGateway = transitGateway
        }

        private enum CodingKeys: String, CodingKey {
            case transitGateway = "transitGateway"
        }
    }

    public struct DeleteTransitGatewayRouteRequest: AWSEncodableShape {
        /// The CIDR range for the route. This must match the CIDR for the route exactly.
        public let destinationCidrBlock: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(destinationCidrBlock: String? = nil, dryRun: Bool? = nil, transitGatewayRouteTableId: String? = nil) {
            self.destinationCidrBlock = destinationCidrBlock
            self.dryRun = dryRun
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "DestinationCidrBlock"
            case dryRun = "DryRun"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct DeleteTransitGatewayRouteResult: AWSDecodableShape {
        /// Information about the route.
        public let route: TransitGatewayRoute?

        public init(route: TransitGatewayRoute? = nil) {
            self.route = route
        }

        private enum CodingKeys: String, CodingKey {
            case route = "route"
        }
    }

    public struct DeleteTransitGatewayRouteTableAnnouncementRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The transit gateway route table ID that's being deleted.
        public let transitGatewayRouteTableAnnouncementId: String?

        public init(dryRun: Bool? = nil, transitGatewayRouteTableAnnouncementId: String? = nil) {
            self.dryRun = dryRun
            self.transitGatewayRouteTableAnnouncementId = transitGatewayRouteTableAnnouncementId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayRouteTableAnnouncementId = "TransitGatewayRouteTableAnnouncementId"
        }
    }

    public struct DeleteTransitGatewayRouteTableAnnouncementResult: AWSDecodableShape {
        /// Provides details about a deleted transit gateway route table.
        public let transitGatewayRouteTableAnnouncement: TransitGatewayRouteTableAnnouncement?

        public init(transitGatewayRouteTableAnnouncement: TransitGatewayRouteTableAnnouncement? = nil) {
            self.transitGatewayRouteTableAnnouncement = transitGatewayRouteTableAnnouncement
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayRouteTableAnnouncement = "transitGatewayRouteTableAnnouncement"
        }
    }

    public struct DeleteTransitGatewayRouteTableRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(dryRun: Bool? = nil, transitGatewayRouteTableId: String? = nil) {
            self.dryRun = dryRun
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct DeleteTransitGatewayRouteTableResult: AWSDecodableShape {
        /// Information about the deleted transit gateway route table.
        public let transitGatewayRouteTable: TransitGatewayRouteTable?

        public init(transitGatewayRouteTable: TransitGatewayRouteTable? = nil) {
            self.transitGatewayRouteTable = transitGatewayRouteTable
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayRouteTable = "transitGatewayRouteTable"
        }
    }

    public struct DeleteTransitGatewayVpcAttachmentRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String? = nil) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct DeleteTransitGatewayVpcAttachmentResult: AWSDecodableShape {
        /// Information about the deleted VPC attachment.
        public let transitGatewayVpcAttachment: TransitGatewayVpcAttachment?

        public init(transitGatewayVpcAttachment: TransitGatewayVpcAttachment? = nil) {
            self.transitGatewayVpcAttachment = transitGatewayVpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayVpcAttachment = "transitGatewayVpcAttachment"
        }
    }

    public struct DeleteVerifiedAccessEndpointRequest: AWSEncodableShape {
        /// A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Verified Access endpoint.
        public let verifiedAccessEndpointId: String?

        public init(clientToken: String? = DeleteVerifiedAccessEndpointRequest.idempotencyToken(), dryRun: Bool? = nil, verifiedAccessEndpointId: String? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.verifiedAccessEndpointId = verifiedAccessEndpointId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case verifiedAccessEndpointId = "VerifiedAccessEndpointId"
        }
    }

    public struct DeleteVerifiedAccessEndpointResult: AWSDecodableShape {
        /// Details about the Verified Access endpoint.
        public let verifiedAccessEndpoint: VerifiedAccessEndpoint?

        public init(verifiedAccessEndpoint: VerifiedAccessEndpoint? = nil) {
            self.verifiedAccessEndpoint = verifiedAccessEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case verifiedAccessEndpoint = "verifiedAccessEndpoint"
        }
    }

    public struct DeleteVerifiedAccessGroupRequest: AWSEncodableShape {
        /// A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Verified Access group.
        public let verifiedAccessGroupId: String?

        public init(clientToken: String? = DeleteVerifiedAccessGroupRequest.idempotencyToken(), dryRun: Bool? = nil, verifiedAccessGroupId: String? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.verifiedAccessGroupId = verifiedAccessGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case verifiedAccessGroupId = "VerifiedAccessGroupId"
        }
    }

    public struct DeleteVerifiedAccessGroupResult: AWSDecodableShape {
        /// Details about the Verified Access group.
        public let verifiedAccessGroup: VerifiedAccessGroup?

        public init(verifiedAccessGroup: VerifiedAccessGroup? = nil) {
            self.verifiedAccessGroup = verifiedAccessGroup
        }

        private enum CodingKeys: String, CodingKey {
            case verifiedAccessGroup = "verifiedAccessGroup"
        }
    }

    public struct DeleteVerifiedAccessInstanceRequest: AWSEncodableShape {
        /// A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Verified Access instance.
        public let verifiedAccessInstanceId: String?

        public init(clientToken: String? = DeleteVerifiedAccessInstanceRequest.idempotencyToken(), dryRun: Bool? = nil, verifiedAccessInstanceId: String? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.verifiedAccessInstanceId = verifiedAccessInstanceId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case verifiedAccessInstanceId = "VerifiedAccessInstanceId"
        }
    }

    public struct DeleteVerifiedAccessInstanceResult: AWSDecodableShape {
        /// Details about the Verified Access instance.
        public let verifiedAccessInstance: VerifiedAccessInstance?

        public init(verifiedAccessInstance: VerifiedAccessInstance? = nil) {
            self.verifiedAccessInstance = verifiedAccessInstance
        }

        private enum CodingKeys: String, CodingKey {
            case verifiedAccessInstance = "verifiedAccessInstance"
        }
    }

    public struct DeleteVerifiedAccessTrustProviderRequest: AWSEncodableShape {
        /// A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Verified Access trust provider.
        public let verifiedAccessTrustProviderId: String?

        public init(clientToken: String? = DeleteVerifiedAccessTrustProviderRequest.idempotencyToken(), dryRun: Bool? = nil, verifiedAccessTrustProviderId: String? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.verifiedAccessTrustProviderId = verifiedAccessTrustProviderId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case verifiedAccessTrustProviderId = "VerifiedAccessTrustProviderId"
        }
    }

    public struct DeleteVerifiedAccessTrustProviderResult: AWSDecodableShape {
        /// Details about the Verified Access trust provider.
        public let verifiedAccessTrustProvider: VerifiedAccessTrustProvider?

        public init(verifiedAccessTrustProvider: VerifiedAccessTrustProvider? = nil) {
            self.verifiedAccessTrustProvider = verifiedAccessTrustProvider
        }

        private enum CodingKeys: String, CodingKey {
            case verifiedAccessTrustProvider = "verifiedAccessTrustProvider"
        }
    }

    public struct DeleteVolumeRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the volume.
        public let volumeId: String?

        public init(dryRun: Bool? = nil, volumeId: String? = nil) {
            self.dryRun = dryRun
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case volumeId = "VolumeId"
        }
    }

    public struct DeleteVpcEndpointConnectionNotificationsRequest: AWSEncodableShape {
        public struct _ConnectionNotificationIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the notifications.
        @OptionalCustomCoding<EC2ArrayCoder<_ConnectionNotificationIdsEncoding, String>>
        public var connectionNotificationIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(connectionNotificationIds: [String]? = nil, dryRun: Bool? = nil) {
            self.connectionNotificationIds = connectionNotificationIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case connectionNotificationIds = "ConnectionNotificationId"
            case dryRun = "DryRun"
        }
    }

    public struct DeleteVpcEndpointConnectionNotificationsResult: AWSDecodableShape {
        public struct _UnsuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the notifications that could not be deleted successfully.
        @OptionalCustomCoding<EC2ArrayCoder<_UnsuccessfulEncoding, UnsuccessfulItem>>
        public var unsuccessful: [UnsuccessfulItem]?

        public init(unsuccessful: [UnsuccessfulItem]? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful = "unsuccessful"
        }
    }

    public struct DeleteVpcEndpointServiceConfigurationsRequest: AWSEncodableShape {
        public struct _ServiceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the services.
        @OptionalCustomCoding<EC2ArrayCoder<_ServiceIdsEncoding, String>>
        public var serviceIds: [String]?

        public init(dryRun: Bool? = nil, serviceIds: [String]? = nil) {
            self.dryRun = dryRun
            self.serviceIds = serviceIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case serviceIds = "ServiceId"
        }
    }

    public struct DeleteVpcEndpointServiceConfigurationsResult: AWSDecodableShape {
        public struct _UnsuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the service configurations that were not deleted, if applicable.
        @OptionalCustomCoding<EC2ArrayCoder<_UnsuccessfulEncoding, UnsuccessfulItem>>
        public var unsuccessful: [UnsuccessfulItem]?

        public init(unsuccessful: [UnsuccessfulItem]? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful = "unsuccessful"
        }
    }

    public struct DeleteVpcEndpointsRequest: AWSEncodableShape {
        public struct _VpcEndpointIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the VPC endpoints.
        @OptionalCustomCoding<EC2ArrayCoder<_VpcEndpointIdsEncoding, String>>
        public var vpcEndpointIds: [String]?

        public init(dryRun: Bool? = nil, vpcEndpointIds: [String]? = nil) {
            self.dryRun = dryRun
            self.vpcEndpointIds = vpcEndpointIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case vpcEndpointIds = "VpcEndpointId"
        }
    }

    public struct DeleteVpcEndpointsResult: AWSDecodableShape {
        public struct _UnsuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the VPC endpoints that were not successfully deleted.
        @OptionalCustomCoding<EC2ArrayCoder<_UnsuccessfulEncoding, UnsuccessfulItem>>
        public var unsuccessful: [UnsuccessfulItem]?

        public init(unsuccessful: [UnsuccessfulItem]? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful = "unsuccessful"
        }
    }

    public struct DeleteVpcPeeringConnectionRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String?

        public init(dryRun: Bool? = nil, vpcPeeringConnectionId: String? = nil) {
            self.dryRun = dryRun
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct DeleteVpcPeeringConnectionResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct DeleteVpcRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(dryRun: Bool? = nil, vpcId: String? = nil) {
            self.dryRun = dryRun
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpcId = "VpcId"
        }
    }

    public struct DeleteVpnConnectionRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPN connection.
        public let vpnConnectionId: String?

        public init(dryRun: Bool? = nil, vpnConnectionId: String? = nil) {
            self.dryRun = dryRun
            self.vpnConnectionId = vpnConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpnConnectionId = "VpnConnectionId"
        }
    }

    public struct DeleteVpnConnectionRouteRequest: AWSEncodableShape {
        /// The CIDR block associated with the local subnet of the customer network.
        public let destinationCidrBlock: String?
        /// The ID of the VPN connection.
        public let vpnConnectionId: String?

        public init(destinationCidrBlock: String? = nil, vpnConnectionId: String? = nil) {
            self.destinationCidrBlock = destinationCidrBlock
            self.vpnConnectionId = vpnConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "DestinationCidrBlock"
            case vpnConnectionId = "VpnConnectionId"
        }
    }

    public struct DeleteVpnGatewayRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the virtual private gateway.
        public let vpnGatewayId: String?

        public init(dryRun: Bool? = nil, vpnGatewayId: String? = nil) {
            self.dryRun = dryRun
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpnGatewayId = "VpnGatewayId"
        }
    }

    public struct DeprovisionByoipCidrRequest: AWSEncodableShape {
        /// The address range, in CIDR notation. The prefix must be the same prefix  that you specified when you provisioned the address range.
        public let cidr: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(cidr: String? = nil, dryRun: Bool? = nil) {
            self.cidr = cidr
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case dryRun = "DryRun"
        }
    }

    public struct DeprovisionByoipCidrResult: AWSDecodableShape {
        /// Information about the address range.
        public let byoipCidr: ByoipCidr?

        public init(byoipCidr: ByoipCidr? = nil) {
            self.byoipCidr = byoipCidr
        }

        private enum CodingKeys: String, CodingKey {
            case byoipCidr = "byoipCidr"
        }
    }

    public struct DeprovisionIpamByoasnRequest: AWSEncodableShape {
        /// An ASN.
        public let asn: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IPAM ID.
        public let ipamId: String?

        public init(asn: String? = nil, dryRun: Bool? = nil, ipamId: String? = nil) {
            self.asn = asn
            self.dryRun = dryRun
            self.ipamId = ipamId
        }

        private enum CodingKeys: String, CodingKey {
            case asn = "Asn"
            case dryRun = "DryRun"
            case ipamId = "IpamId"
        }
    }

    public struct DeprovisionIpamByoasnResult: AWSDecodableShape {
        /// An ASN and BYOIP CIDR association.
        public let byoasn: Byoasn?

        public init(byoasn: Byoasn? = nil) {
            self.byoasn = byoasn
        }

        private enum CodingKeys: String, CodingKey {
            case byoasn = "byoasn"
        }
    }

    public struct DeprovisionIpamPoolCidrRequest: AWSEncodableShape {
        /// The CIDR which you want to deprovision from the pool.
        public let cidr: String?
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the pool that has the CIDR you want to deprovision.
        public let ipamPoolId: String?

        public init(cidr: String? = nil, dryRun: Bool? = nil, ipamPoolId: String? = nil) {
            self.cidr = cidr
            self.dryRun = dryRun
            self.ipamPoolId = ipamPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case dryRun = "DryRun"
            case ipamPoolId = "IpamPoolId"
        }
    }

    public struct DeprovisionIpamPoolCidrResult: AWSDecodableShape {
        /// The deprovisioned pool CIDR.
        public let ipamPoolCidr: IpamPoolCidr?

        public init(ipamPoolCidr: IpamPoolCidr? = nil) {
            self.ipamPoolCidr = ipamPoolCidr
        }

        private enum CodingKeys: String, CodingKey {
            case ipamPoolCidr = "ipamPoolCidr"
        }
    }

    public struct DeprovisionPublicIpv4PoolCidrRequest: AWSEncodableShape {
        /// The CIDR you want to deprovision from the pool. Enter the CIDR you want to deprovision with a netmask of /32. You must rerun this command for each IP address in the CIDR range. If your CIDR is a /24, you will have to run this command to deprovision each of the 256 IP addresses in the /24 CIDR.
        public let cidr: String?
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the pool that you want to deprovision the CIDR from.
        public let poolId: String?

        public init(cidr: String? = nil, dryRun: Bool? = nil, poolId: String? = nil) {
            self.cidr = cidr
            self.dryRun = dryRun
            self.poolId = poolId
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case dryRun = "DryRun"
            case poolId = "PoolId"
        }
    }

    public struct DeprovisionPublicIpv4PoolCidrResult: AWSDecodableShape {
        public struct _DeprovisionedAddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The deprovisioned CIDRs.
        @OptionalCustomCoding<EC2ArrayCoder<_DeprovisionedAddressesEncoding, String>>
        public var deprovisionedAddresses: [String]?
        /// The ID of the pool that you deprovisioned the CIDR from.
        public let poolId: String?

        public init(deprovisionedAddresses: [String]? = nil, poolId: String? = nil) {
            self.deprovisionedAddresses = deprovisionedAddresses
            self.poolId = poolId
        }

        private enum CodingKeys: String, CodingKey {
            case deprovisionedAddresses = "deprovisionedAddressSet"
            case poolId = "poolId"
        }
    }

    public struct DeregisterImageRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI.
        public let imageId: String?

        public init(dryRun: Bool? = nil, imageId: String? = nil) {
            self.dryRun = dryRun
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case imageId = "ImageId"
        }
    }

    public struct DeregisterInstanceEventNotificationAttributesRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Information about the tag keys to deregister.
        public let instanceTagAttribute: DeregisterInstanceTagAttributeRequest?

        public init(dryRun: Bool? = nil, instanceTagAttribute: DeregisterInstanceTagAttributeRequest? = nil) {
            self.dryRun = dryRun
            self.instanceTagAttribute = instanceTagAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceTagAttribute = "InstanceTagAttribute"
        }
    }

    public struct DeregisterInstanceEventNotificationAttributesResult: AWSDecodableShape {
        /// The resulting set of tag keys.
        public let instanceTagAttribute: InstanceTagNotificationAttribute?

        public init(instanceTagAttribute: InstanceTagNotificationAttribute? = nil) {
            self.instanceTagAttribute = instanceTagAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case instanceTagAttribute = "instanceTagAttribute"
        }
    }

    public struct DeregisterInstanceTagAttributeRequest: AWSEncodableShape {
        public struct _InstanceTagKeysEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether to deregister all tag keys in the current Region. Specify false  		to deregister all tag keys.
        public let includeAllTagsOfInstance: Bool?
        /// Information about the tag keys to deregister.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceTagKeysEncoding, String>>
        public var instanceTagKeys: [String]?

        public init(includeAllTagsOfInstance: Bool? = nil, instanceTagKeys: [String]? = nil) {
            self.includeAllTagsOfInstance = includeAllTagsOfInstance
            self.instanceTagKeys = instanceTagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case includeAllTagsOfInstance = "IncludeAllTagsOfInstance"
            case instanceTagKeys = "InstanceTagKey"
        }
    }

    public struct DeregisterTransitGatewayMulticastGroupMembersRequest: AWSEncodableShape {
        public struct _NetworkInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IP address assigned to the  transit gateway multicast group.
        public let groupIpAddress: String?
        /// The IDs of the group members' network interfaces.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInterfaceIdsEncoding, String>>
        public var networkInterfaceIds: [String]?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, groupIpAddress: String? = nil, networkInterfaceIds: [String]? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.groupIpAddress = groupIpAddress
            self.networkInterfaceIds = networkInterfaceIds
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupIpAddress = "GroupIpAddress"
            case networkInterfaceIds = "NetworkInterfaceIds"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct DeregisterTransitGatewayMulticastGroupMembersResult: AWSDecodableShape {
        /// Information about the deregistered members.
        public let deregisteredMulticastGroupMembers: TransitGatewayMulticastDeregisteredGroupMembers?

        public init(deregisteredMulticastGroupMembers: TransitGatewayMulticastDeregisteredGroupMembers? = nil) {
            self.deregisteredMulticastGroupMembers = deregisteredMulticastGroupMembers
        }

        private enum CodingKeys: String, CodingKey {
            case deregisteredMulticastGroupMembers = "deregisteredMulticastGroupMembers"
        }
    }

    public struct DeregisterTransitGatewayMulticastGroupSourcesRequest: AWSEncodableShape {
        public struct _NetworkInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IP address assigned to the  transit gateway multicast group.
        public let groupIpAddress: String?
        /// The IDs of the group sources' network interfaces.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInterfaceIdsEncoding, String>>
        public var networkInterfaceIds: [String]?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, groupIpAddress: String? = nil, networkInterfaceIds: [String]? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.groupIpAddress = groupIpAddress
            self.networkInterfaceIds = networkInterfaceIds
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupIpAddress = "GroupIpAddress"
            case networkInterfaceIds = "NetworkInterfaceIds"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct DeregisterTransitGatewayMulticastGroupSourcesResult: AWSDecodableShape {
        /// Information about the deregistered group sources.
        public let deregisteredMulticastGroupSources: TransitGatewayMulticastDeregisteredGroupSources?

        public init(deregisteredMulticastGroupSources: TransitGatewayMulticastDeregisteredGroupSources? = nil) {
            self.deregisteredMulticastGroupSources = deregisteredMulticastGroupSources
        }

        private enum CodingKeys: String, CodingKey {
            case deregisteredMulticastGroupSources = "deregisteredMulticastGroupSources"
        }
    }

    public struct DescribeAccountAttributesRequest: AWSEncodableShape {
        public struct _AttributeNamesEncoding: ArrayCoderProperties { public static let member = "attributeName" }

        /// The account attribute names.
        @OptionalCustomCoding<EC2ArrayCoder<_AttributeNamesEncoding, AccountAttributeName>>
        public var attributeNames: [AccountAttributeName]?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(attributeNames: [AccountAttributeName]? = nil, dryRun: Bool? = nil) {
            self.attributeNames = attributeNames
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case attributeNames = "attributeName"
            case dryRun = "dryRun"
        }
    }

    public struct DescribeAccountAttributesResult: AWSDecodableShape {
        public struct _AccountAttributesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the account attributes.
        @OptionalCustomCoding<EC2ArrayCoder<_AccountAttributesEncoding, AccountAttribute>>
        public var accountAttributes: [AccountAttribute]?

        public init(accountAttributes: [AccountAttribute]? = nil) {
            self.accountAttributes = accountAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case accountAttributes = "accountAttributeSet"
        }
    }

    public struct DescribeAddressTransfersRequest: AWSEncodableShape {
        public struct _AllocationIdsEncoding: ArrayCoderProperties { public static let member = "AllocationId" }

        /// The allocation IDs of Elastic IP addresses.
        @OptionalCustomCoding<EC2ArrayCoder<_AllocationIdsEncoding, String>>
        public var allocationIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of address transfers to return in one page of results.
        public let maxResults: Int?
        /// Specify the pagination token from a previous request to retrieve the next page of results.
        public let nextToken: String?

        public init(allocationIds: [String]? = nil, dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.allocationIds = allocationIds
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case allocationIds = "AllocationId"
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeAddressTransfersResult: AWSDecodableShape {
        public struct _AddressTransfersEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Elastic IP address transfer.
        @OptionalCustomCoding<EC2ArrayCoder<_AddressTransfersEncoding, AddressTransfer>>
        public var addressTransfers: [AddressTransfer]?
        /// Specify the pagination token from a previous request to retrieve the next page of results.
        public let nextToken: String?

        public init(addressTransfers: [AddressTransfer]? = nil, nextToken: String? = nil) {
            self.addressTransfers = addressTransfers
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case addressTransfers = "addressTransferSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeAddressesAttributeRequest: AWSEncodableShape {
        public struct _AllocationIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// [EC2-VPC] The allocation IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_AllocationIdsEncoding, String>>
        public var allocationIds: [String]?
        /// The attribute of the IP address.
        public let attribute: AddressAttributeName?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(allocationIds: [String]? = nil, attribute: AddressAttributeName? = nil, dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.allocationIds = allocationIds
            self.attribute = attribute
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case allocationIds = "AllocationId"
            case attribute = "Attribute"
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeAddressesAttributeResult: AWSDecodableShape {
        public struct _AddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the IP addresses.
        @OptionalCustomCoding<EC2ArrayCoder<_AddressesEncoding, AddressAttribute>>
        public var addresses: [AddressAttribute]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(addresses: [AddressAttribute]? = nil, nextToken: String? = nil) {
            self.addresses = addresses
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case addresses = "addressSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeAddressesRequest: AWSEncodableShape {
        public struct _AllocationIdsEncoding: ArrayCoderProperties { public static let member = "AllocationId" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _PublicIpsEncoding: ArrayCoderProperties { public static let member = "PublicIp" }

        /// Information about the allocation IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_AllocationIdsEncoding, String>>
        public var allocationIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.    allocation-id - The allocation ID for the address.    association-id - The association ID for the address.    instance-id - The ID of the instance the address is associated with, if any.    network-border-group -  A unique set of Availability Zones, Local Zones, or Wavelength Zones from where Amazon Web Services advertises IP addresses.     network-interface-id - The ID of the network interface that the address is associated with, if any.    network-interface-owner-id - The Amazon Web Services account ID of the owner.    private-ip-address - The private IP address associated with the Elastic IP address.    public-ip - The Elastic IP address, or the carrier IP address.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// One or more Elastic IP addresses. Default: Describes all your Elastic IP addresses.
        @OptionalCustomCoding<EC2ArrayCoder<_PublicIpsEncoding, String>>
        public var publicIps: [String]?

        public init(allocationIds: [String]? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, publicIps: [String]? = nil) {
            self.allocationIds = allocationIds
            self.dryRun = dryRun
            self.filters = filters
            self.publicIps = publicIps
        }

        private enum CodingKeys: String, CodingKey {
            case allocationIds = "AllocationId"
            case dryRun = "dryRun"
            case filters = "Filter"
            case publicIps = "PublicIp"
        }
    }

    public struct DescribeAddressesResult: AWSDecodableShape {
        public struct _AddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Elastic IP addresses.
        @OptionalCustomCoding<EC2ArrayCoder<_AddressesEncoding, Address>>
        public var addresses: [Address]?

        public init(addresses: [Address]? = nil) {
            self.addresses = addresses
        }

        private enum CodingKeys: String, CodingKey {
            case addresses = "addressesSet"
        }
    }

    public struct DescribeAggregateIdFormatRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct DescribeAggregateIdFormatResult: AWSDecodableShape {
        public struct _StatusesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about each resource's ID format.
        @OptionalCustomCoding<EC2ArrayCoder<_StatusesEncoding, IdFormat>>
        public var statuses: [IdFormat]?
        /// Indicates whether all resource types in the Region are configured to use longer IDs. This value is only true if all users are configured to use longer IDs for all resources types in the Region.
        public let useLongIdsAggregated: Bool?

        public init(statuses: [IdFormat]? = nil, useLongIdsAggregated: Bool? = nil) {
            self.statuses = statuses
            self.useLongIdsAggregated = useLongIdsAggregated
        }

        private enum CodingKeys: String, CodingKey {
            case statuses = "statusSet"
            case useLongIdsAggregated = "useLongIdsAggregated"
        }
    }

    public struct DescribeAvailabilityZonesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _ZoneIdsEncoding: ArrayCoderProperties { public static let member = "ZoneId" }
        public struct _ZoneNamesEncoding: ArrayCoderProperties { public static let member = "ZoneName" }

        /// Include all Availability Zones, Local Zones, and Wavelength Zones regardless of your opt-in status. If you do not use this parameter, the results include only the zones for the Regions where you have chosen the option to opt in.
        public let allAvailabilityZones: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    group-name - For Availability Zones, use the Region name. For Local Zones, use the name of the group associated with the Local Zone (for example, us-west-2-lax-1) For Wavelength Zones, use the name of the group associated with the Wavelength Zone (for example, us-east-1-wl1).    message - The Zone message.    opt-in-status - The opt-in status (opted-in | not-opted-in | opt-in-not-required).    parent-zone-id - The ID of the zone that handles some of the Local Zone and Wavelength Zone control plane operations, such as API calls.    parent-zone-name - The ID of the zone that handles some of the Local Zone and Wavelength Zone control plane operations, such as API calls.    region-name - The name of the Region for the Zone (for example, us-east-1).    state - The state of the Availability Zone, the Local Zone, or the Wavelength Zone (available).    zone-id - The ID of the Availability Zone (for example, use1-az1), the Local Zone (for example, usw2-lax1-az1), or the Wavelength Zone (for example, us-east-1-wl1-bos-wlz-1).    zone-name - The name of the Availability Zone (for example, us-east-1a), the Local Zone (for example, us-west-2-lax-1a), or the Wavelength Zone (for example, us-east-1-wl1-bos-wlz-1).    zone-type - The type of zone (availability-zone |  local-zone | wavelength-zone).
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the Availability Zones, Local Zones, and Wavelength Zones.
        @OptionalCustomCoding<EC2ArrayCoder<_ZoneIdsEncoding, String>>
        public var zoneIds: [String]?
        /// The names of the Availability Zones, Local Zones, and Wavelength Zones.
        @OptionalCustomCoding<EC2ArrayCoder<_ZoneNamesEncoding, String>>
        public var zoneNames: [String]?

        public init(allAvailabilityZones: Bool? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, zoneIds: [String]? = nil, zoneNames: [String]? = nil) {
            self.allAvailabilityZones = allAvailabilityZones
            self.dryRun = dryRun
            self.filters = filters
            self.zoneIds = zoneIds
            self.zoneNames = zoneNames
        }

        private enum CodingKeys: String, CodingKey {
            case allAvailabilityZones = "AllAvailabilityZones"
            case dryRun = "dryRun"
            case filters = "Filter"
            case zoneIds = "ZoneId"
            case zoneNames = "ZoneName"
        }
    }

    public struct DescribeAvailabilityZonesResult: AWSDecodableShape {
        public struct _AvailabilityZonesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Availability Zones, Local Zones, and Wavelength Zones.
        @OptionalCustomCoding<EC2ArrayCoder<_AvailabilityZonesEncoding, AvailabilityZone>>
        public var availabilityZones: [AvailabilityZone]?

        public init(availabilityZones: [AvailabilityZone]? = nil) {
            self.availabilityZones = availabilityZones
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "availabilityZoneInfo"
        }
    }

    public struct DescribeAwsNetworkPerformanceMetricSubscriptionsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeAwsNetworkPerformanceMetricSubscriptionsResult: AWSDecodableShape {
        public struct _SubscriptionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Describes the current Infrastructure Performance subscriptions.
        @OptionalCustomCoding<EC2ArrayCoder<_SubscriptionsEncoding, Subscription>>
        public var subscriptions: [Subscription]?

        public init(nextToken: String? = nil, subscriptions: [Subscription]? = nil) {
            self.nextToken = nextToken
            self.subscriptions = subscriptions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case subscriptions = "subscriptionSet"
        }
    }

    public struct DescribeBundleTasksRequest: AWSEncodableShape {
        public struct _BundleIdsEncoding: ArrayCoderProperties { public static let member = "BundleId" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The bundle task IDs. Default: Describes all your bundle tasks.
        @OptionalCustomCoding<EC2ArrayCoder<_BundleIdsEncoding, String>>
        public var bundleIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    bundle-id - The ID of the bundle task.    error-code - If the task failed, the error code returned.    error-message - If the task failed, the error message returned.    instance-id - The ID of the instance.    progress - The level of task completion, as a percentage (for example, 20%).    s3-bucket - The Amazon S3 bucket to store the AMI.    s3-prefix - The beginning of the AMI name.    start-time - The time the task started (for example, 2013-09-15T17:15:20.000Z).    state - The state of the task (pending | waiting-for-shutdown | bundling | storing | cancelling | complete | failed).    update-time - The time of the most recent update for the task.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?

        public init(bundleIds: [String]? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil) {
            self.bundleIds = bundleIds
            self.dryRun = dryRun
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case bundleIds = "BundleId"
            case dryRun = "dryRun"
            case filters = "Filter"
        }
    }

    public struct DescribeBundleTasksResult: AWSDecodableShape {
        public struct _BundleTasksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the bundle tasks.
        @OptionalCustomCoding<EC2ArrayCoder<_BundleTasksEncoding, BundleTask>>
        public var bundleTasks: [BundleTask]?

        public init(bundleTasks: [BundleTask]? = nil) {
            self.bundleTasks = bundleTasks
        }

        private enum CodingKeys: String, CodingKey {
            case bundleTasks = "bundleInstanceTasksSet"
        }
    }

    public struct DescribeByoipCidrsRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeByoipCidrsResult: AWSDecodableShape {
        public struct _ByoipCidrsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about your address ranges.
        @OptionalCustomCoding<EC2ArrayCoder<_ByoipCidrsEncoding, ByoipCidr>>
        public var byoipCidrs: [ByoipCidr]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(byoipCidrs: [ByoipCidr]? = nil, nextToken: String? = nil) {
            self.byoipCidrs = byoipCidrs
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case byoipCidrs = "byoipCidrSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeCapacityBlockOfferingsRequest: AWSEncodableShape {
        /// The number of hours for which to reserve Capacity Block.
        public let capacityDurationHours: Int?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The latest end date for the Capacity Block offering.
        public let endDateRange: Date?
        /// The number of instances for which to reserve capacity.
        public let instanceCount: Int?
        /// The type of instance for which the Capacity Block offering reserves capacity.
        public let instanceType: String?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?
        /// The earliest start date for the Capacity Block offering.
        public let startDateRange: Date?

        public init(capacityDurationHours: Int? = nil, dryRun: Bool? = nil, endDateRange: Date? = nil, instanceCount: Int? = nil, instanceType: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, startDateRange: Date? = nil) {
            self.capacityDurationHours = capacityDurationHours
            self.dryRun = dryRun
            self.endDateRange = endDateRange
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.startDateRange = startDateRange
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case capacityDurationHours = "CapacityDurationHours"
            case dryRun = "DryRun"
            case endDateRange = "EndDateRange"
            case instanceCount = "InstanceCount"
            case instanceType = "InstanceType"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case startDateRange = "StartDateRange"
        }
    }

    public struct DescribeCapacityBlockOfferingsResult: AWSDecodableShape {
        public struct _CapacityBlockOfferingsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The recommended Capacity Block offering for the dates specified.
        @OptionalCustomCoding<EC2ArrayCoder<_CapacityBlockOfferingsEncoding, CapacityBlockOffering>>
        public var capacityBlockOfferings: [CapacityBlockOffering]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(capacityBlockOfferings: [CapacityBlockOffering]? = nil, nextToken: String? = nil) {
            self.capacityBlockOfferings = capacityBlockOfferings
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case capacityBlockOfferings = "capacityBlockOfferingSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeCapacityReservationFleetsRequest: AWSEncodableShape {
        public struct _CapacityReservationFleetIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The IDs of the Capacity Reservation Fleets to describe.
        @OptionalCustomCoding<EC2ArrayCoder<_CapacityReservationFleetIdsEncoding, String>>
        public var capacityReservationFleetIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    state - The state of the Fleet (submitted | modifying | active |
        /// 					partially_fulfilled | expiring | expired | cancelling |
        /// 					cancelled | failed).    instance-match-criteria - The instance matching criteria for the Fleet. Only open is supported.    tenancy - The tenancy of the Fleet (default | dedicated).    allocation-strategy - The allocation strategy used by the Fleet. Only prioritized is supported.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(capacityReservationFleetIds: [String]? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.capacityReservationFleetIds = capacityReservationFleetIds
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationFleetIds = "CapacityReservationFleetId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeCapacityReservationFleetsResult: AWSDecodableShape {
        public struct _CapacityReservationFleetsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Capacity Reservation Fleets.
        @OptionalCustomCoding<EC2ArrayCoder<_CapacityReservationFleetsEncoding, CapacityReservationFleet>>
        public var capacityReservationFleets: [CapacityReservationFleet]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(capacityReservationFleets: [CapacityReservationFleet]? = nil, nextToken: String? = nil) {
            self.capacityReservationFleets = capacityReservationFleets
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationFleets = "capacityReservationFleetSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeCapacityReservationsRequest: AWSEncodableShape {
        public struct _CapacityReservationIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The ID of the Capacity Reservation.
        @OptionalCustomCoding<EC2ArrayCoder<_CapacityReservationIdsEncoding, String>>
        public var capacityReservationIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    instance-type - The type of instance for which the Capacity Reservation reserves capacity.    owner-id - The ID of the Amazon Web Services account that owns the Capacity Reservation.    instance-platform - The type of operating system for which the Capacity Reservation reserves capacity.    availability-zone - The Availability Zone of the Capacity Reservation.    tenancy - Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the
        /// 	  			following tenancy settings:    default - The Capacity Reservation is created on hardware that is shared with other Amazon Web Services accounts.    dedicated - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single Amazon Web Services account.      outpost-arn - The Amazon Resource Name (ARN) of the Outpost on which the Capacity Reservation was created.    state - The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:    active- The Capacity Reservation is active and the capacity is available for your use.    expired - The Capacity Reservation expired automatically at the date and time specified in your request.
        /// 	  				The reserved capacity is no longer available for your use.    cancelled - The Capacity Reservation was cancelled. The reserved capacity is no longer available for your use.    pending - The Capacity Reservation request was successful but the capacity provisioning is still pending.    failed - The Capacity Reservation request has failed. A request might fail due to invalid request parameters,
        /// 	  				capacity constraints, or instance limit constraints. Failed requests are retained for 60 minutes.      start-date - The date and time at which the Capacity Reservation was started.    end-date - The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is
        /// 	  			released and you can no longer launch instances into it. The Capacity Reservation's state changes to expired when it reaches its end date and time.    end-date-type - Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:    unlimited - The Capacity Reservation remains active until you explicitly cancel it.    limited - The Capacity Reservation expires automatically at a specified date and time.      instance-match-criteria - Indicates the type of instance launches that the Capacity Reservation accepts. The options include:    open - The Capacity Reservation accepts all instances that have matching
        /// 							attributes (instance type, platform, and Availability Zone). Instances
        /// 							that have matching attributes launch into the Capacity Reservation
        /// 							automatically without specifying any additional parameters.    targeted - The Capacity Reservation only accepts instances that have matching
        /// 							attributes (instance type, platform, and Availability Zone), and
        /// 							explicitly target the Capacity Reservation. This ensures that only
        /// 							permitted instances can use the reserved capacity.      placement-group-arn - The ARN of the cluster placement group in which the Capacity Reservation was created.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(capacityReservationIds: [String]? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.capacityReservationIds = capacityReservationIds
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationIds = "CapacityReservationId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeCapacityReservationsResult: AWSDecodableShape {
        public struct _CapacityReservationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Capacity Reservations.
        @OptionalCustomCoding<EC2ArrayCoder<_CapacityReservationsEncoding, CapacityReservation>>
        public var capacityReservations: [CapacityReservation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(capacityReservations: [CapacityReservation]? = nil, nextToken: String? = nil) {
            self.capacityReservations = capacityReservations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservations = "capacityReservationSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeCarrierGatewaysRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// One or more carrier gateway IDs.
        @OptionalCustomCoding<EC2StandardArrayCoder<String>>
        public var carrierGatewayIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    carrier-gateway-id - The ID of the carrier gateway.    state - The state of the carrier gateway (pending | failed | available | deleting | deleted).    owner-id - The Amazon Web Services account ID of the owner of the carrier gateway.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC associated with the carrier gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(carrierGatewayIds: [String]? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.carrierGatewayIds = carrierGatewayIds
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGatewayIds = "CarrierGatewayId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeCarrierGatewaysResult: AWSDecodableShape {
        public struct _CarrierGatewaysEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the carrier gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_CarrierGatewaysEncoding, CarrierGateway>>
        public var carrierGateways: [CarrierGateway]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(carrierGateways: [CarrierGateway]? = nil, nextToken: String? = nil) {
            self.carrierGateways = carrierGateways
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGateways = "carrierGatewaySet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeClassicLinkInstancesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "InstanceId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    group-id - The ID of a VPC security group that's associated with the instance.    instance-id - The ID of the instance.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC to which the instance is linked.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The instance IDs. Must be instances linked to a VPC through ClassicLink.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]?
        /// The maximum number of items to return for this request.
        /// 	To get the next page of items, make another request with the token returned in the output.
        /// 	For more information, see Pagination. Constraint: If the value is greater than 1000, we return only 1000 items.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, instanceIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.instanceIds = instanceIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case instanceIds = "InstanceId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeClassicLinkInstancesResult: AWSDecodableShape {
        public struct _InstancesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about one or more linked EC2-Classic instances.
        @OptionalCustomCoding<EC2ArrayCoder<_InstancesEncoding, ClassicLinkInstance>>
        public var instances: [ClassicLinkInstance]?
        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(instances: [ClassicLinkInstance]? = nil, nextToken: String? = nil) {
            self.instances = instances
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instances = "instancesSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeClientVpnAuthorizationRulesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.    description - The description of the authorization rule.    destination-cidr - The CIDR of the network to which the authorization rule applies.    group-id - The ID of the Active Directory group to which the authorization rule grants access.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(clientVpnEndpointId: String? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeClientVpnAuthorizationRulesResult: AWSDecodableShape {
        public struct _AuthorizationRulesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the authorization rules.
        @OptionalCustomCoding<EC2ArrayCoder<_AuthorizationRulesEncoding, AuthorizationRule>>
        public var authorizationRules: [AuthorizationRule]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(authorizationRules: [AuthorizationRule]? = nil, nextToken: String? = nil) {
            self.authorizationRules = authorizationRules
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case authorizationRules = "authorizationRule"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeClientVpnConnectionsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.    connection-id - The ID of the connection.    username - For Active Directory client authentication, the user name of the client who established the client connection.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(clientVpnEndpointId: String? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeClientVpnConnectionsResult: AWSDecodableShape {
        public struct _ConnectionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the active and terminated client connections.
        @OptionalCustomCoding<EC2ArrayCoder<_ConnectionsEncoding, ClientVpnConnection>>
        public var connections: [ClientVpnConnection]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(connections: [ClientVpnConnection]? = nil, nextToken: String? = nil) {
            self.connections = connections
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case connections = "connections"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeClientVpnEndpointsRequest: AWSEncodableShape {
        public struct _ClientVpnEndpointIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The ID of the Client VPN endpoint.
        @OptionalCustomCoding<EC2ArrayCoder<_ClientVpnEndpointIdsEncoding, String>>
        public var clientVpnEndpointIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.    endpoint-id - The ID of the Client VPN endpoint.    transport-protocol - The transport protocol (tcp | udp).
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(clientVpnEndpointIds: [String]? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.clientVpnEndpointIds = clientVpnEndpointIds
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointIds = "ClientVpnEndpointId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeClientVpnEndpointsResult: AWSDecodableShape {
        public struct _ClientVpnEndpointsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Client VPN endpoints.
        @OptionalCustomCoding<EC2ArrayCoder<_ClientVpnEndpointsEncoding, ClientVpnEndpoint>>
        public var clientVpnEndpoints: [ClientVpnEndpoint]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(clientVpnEndpoints: [ClientVpnEndpoint]? = nil, nextToken: String? = nil) {
            self.clientVpnEndpoints = clientVpnEndpoints
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpoints = "clientVpnEndpoint"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeClientVpnRoutesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.    destination-cidr - The CIDR of the route destination.    origin - How the route was associated with the Client VPN endpoint (associate | add-route).    target-subnet - The ID of the subnet through which traffic is routed.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(clientVpnEndpointId: String? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeClientVpnRoutesResult: AWSDecodableShape {
        public struct _RoutesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the Client VPN endpoint routes.
        @OptionalCustomCoding<EC2ArrayCoder<_RoutesEncoding, ClientVpnRoute>>
        public var routes: [ClientVpnRoute]?

        public init(nextToken: String? = nil, routes: [ClientVpnRoute]? = nil) {
            self.nextToken = nextToken
            self.routes = routes
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case routes = "routes"
        }
    }

    public struct DescribeClientVpnTargetNetworksRequest: AWSEncodableShape {
        public struct _AssociationIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The IDs of the target network associations.
        @OptionalCustomCoding<EC2ArrayCoder<_AssociationIdsEncoding, String>>
        public var associationIds: [String]?
        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.    association-id - The ID of the association.    target-network-id - The ID of the subnet specified as the target network.    vpc-id - The ID of the VPC in which the target network is located.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(associationIds: [String]? = nil, clientVpnEndpointId: String? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.associationIds = associationIds
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case associationIds = "AssociationIds"
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeClientVpnTargetNetworksResult: AWSDecodableShape {
        public struct _ClientVpnTargetNetworksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the associated target networks.
        @OptionalCustomCoding<EC2ArrayCoder<_ClientVpnTargetNetworksEncoding, TargetNetwork>>
        public var clientVpnTargetNetworks: [TargetNetwork]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(clientVpnTargetNetworks: [TargetNetwork]? = nil, nextToken: String? = nil) {
            self.clientVpnTargetNetworks = clientVpnTargetNetworks
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnTargetNetworks = "clientVpnTargetNetworks"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeCoipPoolsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _PoolIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    coip-pool.local-gateway-route-table-id - The ID of the local gateway route table.    coip-pool.pool-id - The ID of the address pool.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the address pools.
        @OptionalCustomCoding<EC2ArrayCoder<_PoolIdsEncoding, String>>
        public var poolIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, poolIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.poolIds = poolIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case poolIds = "PoolId"
        }
    }

    public struct DescribeCoipPoolsResult: AWSDecodableShape {
        public struct _CoipPoolsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the address pools.
        @OptionalCustomCoding<EC2ArrayCoder<_CoipPoolsEncoding, CoipPool>>
        public var coipPools: [CoipPool]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(coipPools: [CoipPool]? = nil, nextToken: String? = nil) {
            self.coipPools = coipPools
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case coipPools = "coipPoolSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeConversionTasksRequest: AWSEncodableShape {
        public struct _ConversionTaskIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The conversion task IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_ConversionTaskIdsEncoding, String>>
        public var conversionTaskIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(conversionTaskIds: [String]? = nil, dryRun: Bool? = nil) {
            self.conversionTaskIds = conversionTaskIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTaskIds = "conversionTaskId"
            case dryRun = "dryRun"
        }
    }

    public struct DescribeConversionTasksResult: AWSDecodableShape {
        public struct _ConversionTasksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the conversion tasks.
        @OptionalCustomCoding<EC2ArrayCoder<_ConversionTasksEncoding, ConversionTask>>
        public var conversionTasks: [ConversionTask]?

        public init(conversionTasks: [ConversionTask]? = nil) {
            self.conversionTasks = conversionTasks
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTasks = "conversionTasks"
        }
    }

    public struct DescribeCustomerGatewaysRequest: AWSEncodableShape {
        public struct _CustomerGatewayIdsEncoding: ArrayCoderProperties { public static let member = "CustomerGatewayId" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// One or more customer gateway IDs. Default: Describes all your customer gateways.
        @OptionalCustomCoding<EC2ArrayCoder<_CustomerGatewayIdsEncoding, String>>
        public var customerGatewayIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    bgp-asn - The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).    customer-gateway-id - The ID of the customer gateway.    ip-address - The IP address of the customer gateway device's external interface.    state - The state of the customer gateway (pending | available | deleting | deleted).    type - The type of customer gateway. Currently, the only supported type is ipsec.1.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?

        public init(customerGatewayIds: [String]? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil) {
            self.customerGatewayIds = customerGatewayIds
            self.dryRun = dryRun
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case customerGatewayIds = "CustomerGatewayId"
            case dryRun = "dryRun"
            case filters = "Filter"
        }
    }

    public struct DescribeCustomerGatewaysResult: AWSDecodableShape {
        public struct _CustomerGatewaysEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about one or more customer gateways.
        @OptionalCustomCoding<EC2ArrayCoder<_CustomerGatewaysEncoding, CustomerGateway>>
        public var customerGateways: [CustomerGateway]?

        public init(customerGateways: [CustomerGateway]? = nil) {
            self.customerGateways = customerGateways
        }

        private enum CodingKeys: String, CodingKey {
            case customerGateways = "customerGatewaySet"
        }
    }

    public struct DescribeDhcpOptionsRequest: AWSEncodableShape {
        public struct _DhcpOptionsIdsEncoding: ArrayCoderProperties { public static let member = "DhcpOptionsId" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The IDs of one or more DHCP options sets. Default: Describes all your DHCP options sets.
        @OptionalCustomCoding<EC2ArrayCoder<_DhcpOptionsIdsEncoding, String>>
        public var dhcpOptionsIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    dhcp-options-id - The ID of a DHCP options set.    key - The key for one of the options (for example, domain-name).    value - The value for one of the options.    owner-id - The ID of the Amazon Web Services account that owns the DHCP options set.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request.
        /// 	To get the next page of items, make another request with the token returned in the output.
        /// 	For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(dhcpOptionsIds: [String]? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dhcpOptionsIds = dhcpOptionsIds
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptionsIds = "DhcpOptionsId"
            case dryRun = "dryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeDhcpOptionsResult: AWSDecodableShape {
        public struct _DhcpOptionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about one or more DHCP options sets.
        @OptionalCustomCoding<EC2ArrayCoder<_DhcpOptionsEncoding, DhcpOptions>>
        public var dhcpOptions: [DhcpOptions]?
        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(dhcpOptions: [DhcpOptions]? = nil, nextToken: String? = nil) {
            self.dhcpOptions = dhcpOptions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptions = "dhcpOptionsSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeEgressOnlyInternetGatewaysRequest: AWSEncodableShape {
        public struct _EgressOnlyInternetGatewayIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the egress-only internet gateways.
        @OptionalCustomCoding<EC2ArrayCoder<_EgressOnlyInternetGatewayIdsEncoding, String>>
        public var egressOnlyInternetGatewayIds: [String]?
        /// The filters.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request.
        /// 	To get the next page of items, make another request with the token returned in the output.
        /// 	For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, egressOnlyInternetGatewayIds: [String]? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.egressOnlyInternetGatewayIds = egressOnlyInternetGatewayIds
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 255)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case egressOnlyInternetGatewayIds = "EgressOnlyInternetGatewayId"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeEgressOnlyInternetGatewaysResult: AWSDecodableShape {
        public struct _EgressOnlyInternetGatewaysEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the egress-only internet gateways.
        @OptionalCustomCoding<EC2ArrayCoder<_EgressOnlyInternetGatewaysEncoding, EgressOnlyInternetGateway>>
        public var egressOnlyInternetGateways: [EgressOnlyInternetGateway]?
        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(egressOnlyInternetGateways: [EgressOnlyInternetGateway]? = nil, nextToken: String? = nil) {
            self.egressOnlyInternetGateways = egressOnlyInternetGateways
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case egressOnlyInternetGateways = "egressOnlyInternetGatewaySet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeElasticGpusRequest: AWSEncodableShape {
        public struct _ElasticGpuIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Elastic Graphics accelerator IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_ElasticGpuIdsEncoding, String>>
        public var elasticGpuIds: [String]?
        /// The filters.    availability-zone - The Availability Zone in which the Elastic Graphics accelerator resides.    elastic-gpu-health - The status of the Elastic Graphics accelerator (OK | IMPAIRED).    elastic-gpu-state - The state of the Elastic Graphics accelerator (ATTACHED).    elastic-gpu-type - The type of Elastic Graphics accelerator; for example, eg1.medium.    instance-id - The ID of the instance to which the Elastic Graphics accelerator is associated.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000.
        public let maxResults: Int?
        /// The token to request the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, elasticGpuIds: [String]? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.elasticGpuIds = elasticGpuIds
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 10)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case elasticGpuIds = "ElasticGpuId"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeElasticGpusResult: AWSDecodableShape {
        public struct _ElasticGpuSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Elastic Graphics accelerators.
        @OptionalCustomCoding<EC2ArrayCoder<_ElasticGpuSetEncoding, ElasticGpus>>
        public var elasticGpuSet: [ElasticGpus]?
        /// The total number of items to return. If the total number of items available is more than the value specified in max-items then a Next-Token will be provided in the output that you can use to resume pagination.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(elasticGpuSet: [ElasticGpus]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.elasticGpuSet = elasticGpuSet
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case elasticGpuSet = "elasticGpuSet"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeExportImageTasksRequest: AWSEncodableShape {
        public struct _ExportImageTaskIdsEncoding: ArrayCoderProperties { public static let member = "ExportImageTaskId" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the export image tasks.
        @OptionalCustomCoding<EC2ArrayCoder<_ExportImageTaskIdsEncoding, String>>
        public var exportImageTaskIds: [String]?
        /// Filter tasks using the task-state filter and one of the following values: active, completed, deleting, or deleted.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return in a single call.
        public let maxResults: Int?
        /// A token that indicates the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, exportImageTaskIds: [String]? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.exportImageTaskIds = exportImageTaskIds
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 500)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case exportImageTaskIds = "ExportImageTaskId"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeExportImageTasksResult: AWSDecodableShape {
        public struct _ExportImageTasksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the export image tasks.
        @OptionalCustomCoding<EC2ArrayCoder<_ExportImageTasksEncoding, ExportImageTask>>
        public var exportImageTasks: [ExportImageTask]?
        /// The token to use to get the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(exportImageTasks: [ExportImageTask]? = nil, nextToken: String? = nil) {
            self.exportImageTasks = exportImageTasks
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case exportImageTasks = "exportImageTaskSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeExportTasksRequest: AWSEncodableShape {
        public struct _ExportTaskIdsEncoding: ArrayCoderProperties { public static let member = "ExportTaskId" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The export task IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_ExportTaskIdsEncoding, String>>
        public var exportTaskIds: [String]?
        /// the filters for the export tasks.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?

        public init(exportTaskIds: [String]? = nil, filters: [Filter]? = nil) {
            self.exportTaskIds = exportTaskIds
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case exportTaskIds = "exportTaskId"
            case filters = "Filter"
        }
    }

    public struct DescribeExportTasksResult: AWSDecodableShape {
        public struct _ExportTasksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the export tasks.
        @OptionalCustomCoding<EC2ArrayCoder<_ExportTasksEncoding, ExportTask>>
        public var exportTasks: [ExportTask]?

        public init(exportTasks: [ExportTask]? = nil) {
            self.exportTasks = exportTasks
        }

        private enum CodingKeys: String, CodingKey {
            case exportTasks = "exportTaskSet"
        }
    }

    public struct DescribeFastLaunchImagesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _ImageIdsEncoding: ArrayCoderProperties { public static let member = "ImageId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Use the following filters to streamline results.    resource-type - The resource type for pre-provisioning.    owner-id - The owner ID for the pre-provisioning resource.    state - The current state of fast launching for the Windows AMI.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// Specify one or more Windows AMI image IDs for the request.
        @OptionalCustomCoding<EC2ArrayCoder<_ImageIdsEncoding, String>>
        public var imageIds: [String]?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
        /// 	        For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, imageIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.imageIds = imageIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 200)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case imageIds = "ImageId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFastLaunchImagesResult: AWSDecodableShape {
        public struct _FastLaunchImagesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A collection of details about the fast-launch enabled Windows images that meet
        /// 			the requested criteria.
        @OptionalCustomCoding<EC2ArrayCoder<_FastLaunchImagesEncoding, DescribeFastLaunchImagesSuccessItem>>
        public var fastLaunchImages: [DescribeFastLaunchImagesSuccessItem]?
        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(fastLaunchImages: [DescribeFastLaunchImagesSuccessItem]? = nil, nextToken: String? = nil) {
            self.fastLaunchImages = fastLaunchImages
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fastLaunchImages = "fastLaunchImageSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeFastLaunchImagesSuccessItem: AWSDecodableShape {
        /// The image ID that identifies the Windows fast launch enabled image.
        public let imageId: String?
        /// The launch template that the Windows fast launch enabled AMI uses when it launches
        /// 			Windows instances from pre-provisioned snapshots.
        public let launchTemplate: FastLaunchLaunchTemplateSpecificationResponse?
        /// The maximum number of instances that Amazon EC2 can launch at the same time to create
        /// 			pre-provisioned snapshots for Windows fast launch.
        public let maxParallelLaunches: Int?
        /// The owner ID for the Windows fast launch enabled AMI.
        public let ownerId: String?
        /// The resource type that Amazon EC2 uses for pre-provisioning the Windows AMI. Supported values
        /// 			include: snapshot.
        public let resourceType: FastLaunchResourceType?
        /// A group of parameters that are used for pre-provisioning the associated
        /// 			Windows AMI using snapshots.
        public let snapshotConfiguration: FastLaunchSnapshotConfigurationResponse?
        /// The current state of Windows fast launch for the specified Windows AMI.
        public let state: FastLaunchStateCode?
        /// The reason that Windows fast launch for the AMI changed to the current state.
        public let stateTransitionReason: String?
        /// The time that Windows fast launch for the AMI changed to the current state.
        public let stateTransitionTime: Date?

        public init(imageId: String? = nil, launchTemplate: FastLaunchLaunchTemplateSpecificationResponse? = nil, maxParallelLaunches: Int? = nil, ownerId: String? = nil, resourceType: FastLaunchResourceType? = nil, snapshotConfiguration: FastLaunchSnapshotConfigurationResponse? = nil, state: FastLaunchStateCode? = nil, stateTransitionReason: String? = nil, stateTransitionTime: Date? = nil) {
            self.imageId = imageId
            self.launchTemplate = launchTemplate
            self.maxParallelLaunches = maxParallelLaunches
            self.ownerId = ownerId
            self.resourceType = resourceType
            self.snapshotConfiguration = snapshotConfiguration
            self.state = state
            self.stateTransitionReason = stateTransitionReason
            self.stateTransitionTime = stateTransitionTime
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "imageId"
            case launchTemplate = "launchTemplate"
            case maxParallelLaunches = "maxParallelLaunches"
            case ownerId = "ownerId"
            case resourceType = "resourceType"
            case snapshotConfiguration = "snapshotConfiguration"
            case state = "state"
            case stateTransitionReason = "stateTransitionReason"
            case stateTransitionTime = "stateTransitionTime"
        }
    }

    public struct DescribeFastSnapshotRestoreSuccessItem: AWSDecodableShape {
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The time at which fast snapshot restores entered the disabled state.
        public let disabledTime: Date?
        /// The time at which fast snapshot restores entered the disabling state.
        public let disablingTime: Date?
        /// The time at which fast snapshot restores entered the enabled state.
        public let enabledTime: Date?
        /// The time at which fast snapshot restores entered the enabling state.
        public let enablingTime: Date?
        /// The time at which fast snapshot restores entered the optimizing state.
        public let optimizingTime: Date?
        /// The Amazon Web Services owner alias that enabled fast snapshot restores on the snapshot. This is intended for future use.
        public let ownerAlias: String?
        /// The ID of the Amazon Web Services account that enabled fast snapshot restores on the snapshot.
        public let ownerId: String?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The state of fast snapshot restores.
        public let state: FastSnapshotRestoreStateCode?
        /// The reason for the state transition. The possible values are as follows:    Client.UserInitiated - The state successfully transitioned to enabling or disabling.    Client.UserInitiated - Lifecycle state transition - The state successfully transitioned  to optimizing, enabled, or disabled.
        public let stateTransitionReason: String?

        public init(availabilityZone: String? = nil, disabledTime: Date? = nil, disablingTime: Date? = nil, enabledTime: Date? = nil, enablingTime: Date? = nil, optimizingTime: Date? = nil, ownerAlias: String? = nil, ownerId: String? = nil, snapshotId: String? = nil, state: FastSnapshotRestoreStateCode? = nil, stateTransitionReason: String? = nil) {
            self.availabilityZone = availabilityZone
            self.disabledTime = disabledTime
            self.disablingTime = disablingTime
            self.enabledTime = enabledTime
            self.enablingTime = enablingTime
            self.optimizingTime = optimizingTime
            self.ownerAlias = ownerAlias
            self.ownerId = ownerId
            self.snapshotId = snapshotId
            self.state = state
            self.stateTransitionReason = stateTransitionReason
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case disabledTime = "disabledTime"
            case disablingTime = "disablingTime"
            case enabledTime = "enabledTime"
            case enablingTime = "enablingTime"
            case optimizingTime = "optimizingTime"
            case ownerAlias = "ownerAlias"
            case ownerId = "ownerId"
            case snapshotId = "snapshotId"
            case state = "state"
            case stateTransitionReason = "stateTransitionReason"
        }
    }

    public struct DescribeFastSnapshotRestoresRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters. The possible values are:    availability-zone: The Availability Zone of the snapshot.    owner-id: The ID of the Amazon Web Services account that enabled fast snapshot restore on the snapshot.    snapshot-id: The ID of the snapshot.    state: The state of fast snapshot restores for the snapshot  (enabling |  optimizing |  enabled |  disabling |  disabled).
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request.
        /// 	To get the next page of items, make another request with the token returned in the output.
        /// 	For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 200)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFastSnapshotRestoresResult: AWSDecodableShape {
        public struct _FastSnapshotRestoresEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the state of fast snapshot restores.
        @OptionalCustomCoding<EC2ArrayCoder<_FastSnapshotRestoresEncoding, DescribeFastSnapshotRestoreSuccessItem>>
        public var fastSnapshotRestores: [DescribeFastSnapshotRestoreSuccessItem]?
        /// The token to include in another request to get the next page of items.  This value is null when there are no more items to return.
        public let nextToken: String?

        public init(fastSnapshotRestores: [DescribeFastSnapshotRestoreSuccessItem]? = nil, nextToken: String? = nil) {
            self.fastSnapshotRestores = fastSnapshotRestores
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fastSnapshotRestores = "fastSnapshotRestoreSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeFleetError: AWSDecodableShape {
        /// The error code that indicates why the instance could not be launched. For more information about error codes, see Error codes.
        public let errorCode: String?
        /// The error message that describes why the instance could not be launched. For more information about error messages, see Error codes.
        public let errorMessage: String?
        /// The launch templates and overrides that were used for launching the instances. The values that you specify in the Overrides replace the values in the launch template.
        public let launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse?
        /// Indicates if the instance that could not be launched was a Spot Instance or On-Demand Instance.
        public let lifecycle: InstanceLifecycle?

        public init(errorCode: String? = nil, errorMessage: String? = nil, launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse? = nil, lifecycle: InstanceLifecycle? = nil) {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.launchTemplateAndOverrides = launchTemplateAndOverrides
            self.lifecycle = lifecycle
        }

        private enum CodingKeys: String, CodingKey {
            case errorCode = "errorCode"
            case errorMessage = "errorMessage"
            case launchTemplateAndOverrides = "launchTemplateAndOverrides"
            case lifecycle = "lifecycle"
        }
    }

    public struct DescribeFleetHistoryRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The type of events to describe. By default, all events are described.
        public let eventType: FleetEventType?
        /// The ID of the EC2 Fleet.
        public let fleetId: String?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
        /// 	        For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?
        /// The start date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let startTime: Date?

        public init(dryRun: Bool? = nil, eventType: FleetEventType? = nil, fleetId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, startTime: Date? = nil) {
            self.dryRun = dryRun
            self.eventType = eventType
            self.fleetId = fleetId
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case eventType = "EventType"
            case fleetId = "FleetId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case startTime = "StartTime"
        }
    }

    public struct DescribeFleetHistoryResult: AWSDecodableShape {
        public struct _HistoryRecordsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the EC Fleet.
        public let fleetId: String?
        /// Information about the events in the history of the EC2 Fleet.
        @OptionalCustomCoding<EC2ArrayCoder<_HistoryRecordsEncoding, HistoryRecordEntry>>
        public var historyRecords: [HistoryRecordEntry]?
        /// The last date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). All records up to this time were retrieved. If nextToken indicates that there are more items, this value is not present.
        public let lastEvaluatedTime: Date?
        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?
        /// The start date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let startTime: Date?

        public init(fleetId: String? = nil, historyRecords: [HistoryRecordEntry]? = nil, lastEvaluatedTime: Date? = nil, nextToken: String? = nil, startTime: Date? = nil) {
            self.fleetId = fleetId
            self.historyRecords = historyRecords
            self.lastEvaluatedTime = lastEvaluatedTime
            self.nextToken = nextToken
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "fleetId"
            case historyRecords = "historyRecordSet"
            case lastEvaluatedTime = "lastEvaluatedTime"
            case nextToken = "nextToken"
            case startTime = "startTime"
        }
    }

    public struct DescribeFleetInstancesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    instance-type - The instance type.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The ID of the EC2 Fleet.
        public let fleetId: String?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
        /// 	        For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, fleetId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.fleetId = fleetId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case fleetId = "FleetId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFleetInstancesResult: AWSDecodableShape {
        public struct _ActiveInstancesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The running instances. This list is refreshed periodically and might be out of date.
        @OptionalCustomCoding<EC2ArrayCoder<_ActiveInstancesEncoding, ActiveInstance>>
        public var activeInstances: [ActiveInstance]?
        /// The ID of the EC2 Fleet.
        public let fleetId: String?
        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(activeInstances: [ActiveInstance]? = nil, fleetId: String? = nil, nextToken: String? = nil) {
            self.activeInstances = activeInstances
            self.fleetId = fleetId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case activeInstances = "activeInstanceSet"
            case fleetId = "fleetId"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeFleetsInstances: AWSDecodableShape {
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the instances.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The launch templates and overrides that were used for launching the instances. The values that you specify in the Overrides replace the values in the launch template.
        public let launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse?
        /// Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.
        public let lifecycle: InstanceLifecycle?
        /// The value is Windows for Windows instances. Otherwise, the value is blank.
        public let platform: PlatformValues?

        public init(instanceIds: [String]? = nil, instanceType: InstanceType? = nil, launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse? = nil, lifecycle: InstanceLifecycle? = nil, platform: PlatformValues? = nil) {
            self.instanceIds = instanceIds
            self.instanceType = instanceType
            self.launchTemplateAndOverrides = launchTemplateAndOverrides
            self.lifecycle = lifecycle
            self.platform = platform
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIds = "instanceIds"
            case instanceType = "instanceType"
            case launchTemplateAndOverrides = "launchTemplateAndOverrides"
            case lifecycle = "lifecycle"
            case platform = "platform"
        }
    }

    public struct DescribeFleetsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    activity-status - The progress of the EC2 Fleet ( error | pending-fulfillment | pending-termination | fulfilled).    excess-capacity-termination-policy - Indicates whether to terminate running instances if the target capacity is decreased below the current EC2 Fleet size (true | false).    fleet-state - The state of the EC2 Fleet (submitted | active | deleted | failed | deleted-running | deleted-terminating | modifying).    replace-unhealthy-instances - Indicates whether EC2 Fleet should replace unhealthy instances (true | false).    type - The type of request (instant | request | maintain).
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the EC2 Fleets.  If a fleet is of type instant, you must specify the fleet ID, otherwise it does not appear in the response.
        @OptionalCustomCoding<EC2StandardArrayCoder<String>>
        public var fleetIds: [String]?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
        /// 	        For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, fleetIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.fleetIds = fleetIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case fleetIds = "FleetId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFleetsResult: AWSDecodableShape {
        public struct _FleetsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the EC2 Fleets.
        @OptionalCustomCoding<EC2ArrayCoder<_FleetsEncoding, FleetData>>
        public var fleets: [FleetData]?
        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(fleets: [FleetData]? = nil, nextToken: String? = nil) {
            self.fleets = fleets
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fleets = "fleetSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeFlowLogsRequest: AWSEncodableShape {
        public struct _FilterEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _FlowLogIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    deliver-log-status - The status of the logs delivery (SUCCESS | FAILED).    log-destination-type - The type of destination for the flow log data (cloud-watch-logs | s3 | kinesis-data-firehose).    flow-log-id - The ID of the flow log.    log-group-name - The name of the log group.    resource-id - The ID of the VPC, subnet, or network interface.    traffic-type - The type of traffic (ACCEPT | REJECT | ALL).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<EC2ArrayCoder<_FilterEncoding, Filter>>
        public var filter: [Filter]?
        /// One or more flow log IDs. Constraint: Maximum of 1000 flow log IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_FlowLogIdsEncoding, String>>
        public var flowLogIds: [String]?
        /// The maximum number of items to return for this request.
        /// 	To get the next page of items, make another request with the token returned in the output.
        /// 	For more information, see Pagination.
        public let maxResults: Int?
        /// The token to request the next page of items. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filter: [Filter]? = nil, flowLogIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filter = filter
            self.flowLogIds = flowLogIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filter = "Filter"
            case flowLogIds = "FlowLogId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFlowLogsResult: AWSDecodableShape {
        public struct _FlowLogsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the flow logs.
        @OptionalCustomCoding<EC2ArrayCoder<_FlowLogsEncoding, FlowLog>>
        public var flowLogs: [FlowLog]?
        /// The token to request the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(flowLogs: [FlowLog]? = nil, nextToken: String? = nil) {
            self.flowLogs = flowLogs
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case flowLogs = "flowLogSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeFpgaImageAttributeRequest: AWSEncodableShape {
        /// The AFI attribute.
        public let attribute: FpgaImageAttributeName?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AFI.
        public let fpgaImageId: String?

        public init(attribute: FpgaImageAttributeName? = nil, dryRun: Bool? = nil, fpgaImageId: String? = nil) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.fpgaImageId = fpgaImageId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case dryRun = "DryRun"
            case fpgaImageId = "FpgaImageId"
        }
    }

    public struct DescribeFpgaImageAttributeResult: AWSDecodableShape {
        /// Information about the attribute.
        public let fpgaImageAttribute: FpgaImageAttribute?

        public init(fpgaImageAttribute: FpgaImageAttribute? = nil) {
            self.fpgaImageAttribute = fpgaImageAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case fpgaImageAttribute = "fpgaImageAttribute"
        }
    }

    public struct DescribeFpgaImagesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _FpgaImageIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _OwnersEncoding: ArrayCoderProperties { public static let member = "Owner" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    create-time - The creation time of the AFI.    fpga-image-id - The FPGA image identifier (AFI ID).    fpga-image-global-id - The global FPGA image identifier (AGFI ID).    name - The name of the AFI.    owner-id - The Amazon Web Services account ID of the AFI owner.    product-code - The product code.    shell-version - The version of the Amazon Web Services Shell that was used to create the bitstream.    state - The state of the AFI (pending | failed | available | unavailable).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    update-time - The time of the most recent update.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The AFI IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_FpgaImageIdsEncoding, String>>
        public var fpgaImageIds: [String]?
        /// The maximum number of results to return in a single call.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// Filters the AFI by owner. Specify an Amazon Web Services account ID, self
        /// 			(owner is the sender of the request), or an Amazon Web Services owner alias (valid values are
        /// 			amazon | aws-marketplace).
        @OptionalCustomCoding<EC2ArrayCoder<_OwnersEncoding, String>>
        public var owners: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, fpgaImageIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil, owners: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.fpgaImageIds = fpgaImageIds
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.owners = owners
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case fpgaImageIds = "FpgaImageId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case owners = "Owner"
        }
    }

    public struct DescribeFpgaImagesResult: AWSDecodableShape {
        public struct _FpgaImagesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the FPGA images.
        @OptionalCustomCoding<EC2ArrayCoder<_FpgaImagesEncoding, FpgaImage>>
        public var fpgaImages: [FpgaImage]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(fpgaImages: [FpgaImage]? = nil, nextToken: String? = nil) {
            self.fpgaImages = fpgaImages
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fpgaImages = "fpgaImageSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeHostReservationOfferingsRequest: AWSEncodableShape {
        public struct _FilterEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The filters.    instance-family - The instance family of the offering (for example, m4).    payment-option - The payment option (NoUpfront | PartialUpfront | AllUpfront).
        @OptionalCustomCoding<EC2ArrayCoder<_FilterEncoding, Filter>>
        public var filter: [Filter]?
        /// This is the maximum duration of the reservation to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 94608000 for three years.
        public let maxDuration: Int?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
        public let maxResults: Int?
        /// This is the minimum duration of the reservation you'd like to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 31536000 for one year.
        public let minDuration: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?
        /// The ID of the reservation offering.
        public let offeringId: String?

        public init(filter: [Filter]? = nil, maxDuration: Int? = nil, maxResults: Int? = nil, minDuration: Int? = nil, nextToken: String? = nil, offeringId: String? = nil) {
            self.filter = filter
            self.maxDuration = maxDuration
            self.maxResults = maxResults
            self.minDuration = minDuration
            self.nextToken = nextToken
            self.offeringId = offeringId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 500)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "Filter"
            case maxDuration = "MaxDuration"
            case maxResults = "MaxResults"
            case minDuration = "MinDuration"
            case nextToken = "NextToken"
            case offeringId = "OfferingId"
        }
    }

    public struct DescribeHostReservationOfferingsResult: AWSDecodableShape {
        public struct _OfferingSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the offerings.
        @OptionalCustomCoding<EC2ArrayCoder<_OfferingSetEncoding, HostOffering>>
        public var offeringSet: [HostOffering]?

        public init(nextToken: String? = nil, offeringSet: [HostOffering]? = nil) {
            self.nextToken = nextToken
            self.offeringSet = offeringSet
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case offeringSet = "offeringSet"
        }
    }

    public struct DescribeHostReservationsRequest: AWSEncodableShape {
        public struct _FilterEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _HostReservationIdSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The filters.    instance-family - The instance family (for example, m4).    payment-option - The payment option (NoUpfront | PartialUpfront | AllUpfront).    state - The state of the reservation (payment-pending | payment-failed | active | retired).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<EC2ArrayCoder<_FilterEncoding, Filter>>
        public var filter: [Filter]?
        /// The host reservation IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_HostReservationIdSetEncoding, String>>
        public var hostReservationIdSet: [String]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(filter: [Filter]? = nil, hostReservationIdSet: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.hostReservationIdSet = hostReservationIdSet
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "Filter"
            case hostReservationIdSet = "HostReservationIdSet"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeHostReservationsResult: AWSDecodableShape {
        public struct _HostReservationSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Details about the reservation's configuration.
        @OptionalCustomCoding<EC2ArrayCoder<_HostReservationSetEncoding, HostReservation>>
        public var hostReservationSet: [HostReservation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(hostReservationSet: [HostReservation]? = nil, nextToken: String? = nil) {
            self.hostReservationSet = hostReservationSet
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case hostReservationSet = "hostReservationSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeHostsRequest: AWSEncodableShape {
        public struct _FilterEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _HostIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The filters.    auto-placement - Whether auto-placement is enabled or disabled (on | off).    availability-zone - The Availability Zone of the host.    client-token - The idempotency token that you provided when you allocated the host.    host-reservation-id - The ID of the reservation assigned to this host.    instance-type - The instance type size that the Dedicated Host is configured to support.    state - The allocation state of the Dedicated Host (available | under-assessment | permanent-failure | released | released-permanent-failure).    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<EC2ArrayCoder<_FilterEncoding, Filter>>
        public var filter: [Filter]?
        /// The IDs of the Dedicated Hosts. The IDs are used for targeted instance launches.
        @OptionalCustomCoding<EC2ArrayCoder<_HostIdsEncoding, String>>
        public var hostIds: [String]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error. You cannot specify this parameter and the host IDs parameter in the same request.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(filter: [Filter]? = nil, hostIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.hostIds = hostIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "filter"
            case hostIds = "hostId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeHostsResult: AWSDecodableShape {
        public struct _HostsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Dedicated Hosts.
        @OptionalCustomCoding<EC2ArrayCoder<_HostsEncoding, Host>>
        public var hosts: [Host]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(hosts: [Host]? = nil, nextToken: String? = nil) {
            self.hosts = hosts
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case hosts = "hostSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeIamInstanceProfileAssociationsRequest: AWSEncodableShape {
        public struct _AssociationIdsEncoding: ArrayCoderProperties { public static let member = "AssociationId" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The IAM instance profile associations.
        @OptionalCustomCoding<EC2ArrayCoder<_AssociationIdsEncoding, String>>
        public var associationIds: [String]?
        /// The filters.    instance-id - The ID of the instance.    state - The state of the association (associating | associated | disassociating).
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(associationIds: [String]? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.associationIds = associationIds
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case associationIds = "AssociationId"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeIamInstanceProfileAssociationsResult: AWSDecodableShape {
        public struct _IamInstanceProfileAssociationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the IAM instance profile associations.
        @OptionalCustomCoding<EC2ArrayCoder<_IamInstanceProfileAssociationsEncoding, IamInstanceProfileAssociation>>
        public var iamInstanceProfileAssociations: [IamInstanceProfileAssociation]?
        /// The token to include in another request to get the next page of items.  This value is null when there are no more items to return.
        public let nextToken: String?

        public init(iamInstanceProfileAssociations: [IamInstanceProfileAssociation]? = nil, nextToken: String? = nil) {
            self.iamInstanceProfileAssociations = iamInstanceProfileAssociations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfileAssociations = "iamInstanceProfileAssociationSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeIdFormatRequest: AWSEncodableShape {
        /// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway
        public let resource: String?

        public init(resource: String? = nil) {
            self.resource = resource
        }

        private enum CodingKeys: String, CodingKey {
            case resource = "Resource"
        }
    }

    public struct DescribeIdFormatResult: AWSDecodableShape {
        public struct _StatusesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the ID format for the resource.
        @OptionalCustomCoding<EC2ArrayCoder<_StatusesEncoding, IdFormat>>
        public var statuses: [IdFormat]?

        public init(statuses: [IdFormat]? = nil) {
            self.statuses = statuses
        }

        private enum CodingKeys: String, CodingKey {
            case statuses = "statusSet"
        }
    }

    public struct DescribeIdentityIdFormatRequest: AWSEncodableShape {
        /// The ARN of the principal, which can be an IAM role, IAM user, or the root user.
        public let principalArn: String?
        /// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway
        public let resource: String?

        public init(principalArn: String? = nil, resource: String? = nil) {
            self.principalArn = principalArn
            self.resource = resource
        }

        private enum CodingKeys: String, CodingKey {
            case principalArn = "principalArn"
            case resource = "resource"
        }
    }

    public struct DescribeIdentityIdFormatResult: AWSDecodableShape {
        public struct _StatusesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the ID format for the resources.
        @OptionalCustomCoding<EC2ArrayCoder<_StatusesEncoding, IdFormat>>
        public var statuses: [IdFormat]?

        public init(statuses: [IdFormat]? = nil) {
            self.statuses = statuses
        }

        private enum CodingKeys: String, CodingKey {
            case statuses = "statusSet"
        }
    }

    public struct DescribeImageAttributeRequest: AWSEncodableShape {
        /// The AMI attribute.  Note: The blockDeviceMapping attribute is deprecated.  	    Using this attribute returns the Client.AuthFailure error. To get information about  	    the block device mappings for an AMI, use the DescribeImages action.
        public let attribute: ImageAttributeName?
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI.
        public let imageId: String?

        public init(attribute: ImageAttributeName? = nil, dryRun: Bool? = nil, imageId: String? = nil) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case dryRun = "dryRun"
            case imageId = "ImageId"
        }
    }

    public struct DescribeImagesRequest: AWSEncodableShape {
        public struct _ExecutableUsersEncoding: ArrayCoderProperties { public static let member = "ExecutableBy" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _ImageIdsEncoding: ArrayCoderProperties { public static let member = "ImageId" }
        public struct _OwnersEncoding: ArrayCoderProperties { public static let member = "Owner" }

        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Scopes the images by users with explicit launch permissions.  Specify an Amazon Web Services account ID, self (the sender of the request),
        /// 				or all (public AMIs).   If you specify an Amazon Web Services account ID that is not your own, only AMIs shared with that specific Amazon Web Services account ID are returned. However, AMIs that are shared with the account’s organization or organizational unit (OU) are not returned.   If you specify self or your own Amazon Web Services account ID, AMIs shared with your account are returned. In addition, AMIs that are shared with the organization or OU of which you are member are also returned.    If you specify all, all public AMIs are returned.
        @OptionalCustomCoding<EC2ArrayCoder<_ExecutableUsersEncoding, String>>
        public var executableUsers: [String]?
        /// The filters.    architecture - The image architecture (i386 | x86_64 |  arm64 | x86_64_mac | arm64_mac).    block-device-mapping.delete-on-termination - A Boolean value that indicates 	whether the Amazon EBS volume is deleted on instance termination.    block-device-mapping.device-name - The device name specified in the block device mapping (for example, /dev/sdh or xvdh).    block-device-mapping.snapshot-id - The ID of the snapshot used for the Amazon EBS volume.    block-device-mapping.volume-size - The volume size of the Amazon EBS volume, in GiB.    block-device-mapping.volume-type - The volume type of the Amazon EBS volume (io1 | io2 | gp2 | gp3 | sc1 | st1 | standard).    block-device-mapping.encrypted - A Boolean that indicates whether the Amazon EBS volume is encrypted.    creation-date - The time when the image was created, in the ISO 8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for example, 2021-09-29T11:04:43.305Z. You can use a wildcard (*), for example, 2021-09-29T*, which matches an entire day.    description - The description of the image (provided during image creation).    ena-support - A Boolean that indicates whether enhanced networking with ENA is enabled.    hypervisor - The hypervisor type (ovm | xen).    image-id - The ID of the image.    image-type - The image type (machine | kernel | ramdisk).    is-public - A Boolean that indicates whether the image is public.    kernel-id - The kernel ID.    manifest-location - The location of the image manifest.    name - The name of the AMI (provided during image creation).    owner-alias - The owner alias (amazon | aws-marketplace).  The valid aliases are defined in an Amazon-maintained list. This is not the Amazon Web Services account alias that can be  	set using the IAM console. We recommend that you use the Owner  	request parameter instead of this filter.    owner-id - The Amazon Web Services account ID of the owner. We recommend that you use the  		Owner request parameter instead of this filter.    platform - The platform. The only supported value is windows.    product-code - The product code.    product-code.type - The type of the product code (marketplace).    ramdisk-id - The RAM disk ID.    root-device-name - The device name of the root device volume (for example, /dev/sda1).    root-device-type - The type of the root device volume (ebs | instance-store).    source-instance-id - The ID of the instance that the AMI was created from if the AMI was created using CreateImage. This filter is applicable only if the AMI was created using CreateImage.    state - The state of the image (available | pending | failed).    state-reason-code - The reason code for the state change.    state-reason-message - The message for the state change.    sriov-net-support - A value of simple indicates that enhanced networking with the Intel 82599 VF interface is enabled.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    virtualization-type - The virtualization type (paravirtual | hvm).
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The image IDs. Default: Describes all images available to you.
        @OptionalCustomCoding<EC2ArrayCoder<_ImageIdsEncoding, String>>
        public var imageIds: [String]?
        /// Specifies whether to include deprecated AMIs. Default: No deprecated AMIs are included in the response.  If you are the AMI owner, all deprecated AMIs appear in the response regardless of what you specify for this parameter.
        public let includeDeprecated: Bool?
        /// Specifies whether to include disabled AMIs. Default: No disabled AMIs are included in the response.
        public let includeDisabled: Bool?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
        /// 	        For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?
        /// Scopes the results to images with the specified owners. You can specify a combination of   Amazon Web Services account IDs, self, amazon, and aws-marketplace.  If you omit this parameter, the results include all images for which you have launch permissions,  regardless of ownership.
        @OptionalCustomCoding<EC2ArrayCoder<_OwnersEncoding, String>>
        public var owners: [String]?

        public init(dryRun: Bool? = nil, executableUsers: [String]? = nil, filters: [Filter]? = nil, imageIds: [String]? = nil, includeDeprecated: Bool? = nil, includeDisabled: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil, owners: [String]? = nil) {
            self.dryRun = dryRun
            self.executableUsers = executableUsers
            self.filters = filters
            self.imageIds = imageIds
            self.includeDeprecated = includeDeprecated
            self.includeDisabled = includeDisabled
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.owners = owners
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case executableUsers = "ExecutableBy"
            case filters = "Filter"
            case imageIds = "ImageId"
            case includeDeprecated = "IncludeDeprecated"
            case includeDisabled = "IncludeDisabled"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case owners = "Owner"
        }
    }

    public struct DescribeImagesResult: AWSDecodableShape {
        public struct _ImagesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the images.
        @OptionalCustomCoding<EC2ArrayCoder<_ImagesEncoding, Image>>
        public var images: [Image]?
        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(images: [Image]? = nil, nextToken: String? = nil) {
            self.images = images
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case images = "imagesSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeImportImageTasksRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _ImportTaskIdsEncoding: ArrayCoderProperties { public static let member = "ImportTaskId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Filter tasks using the task-state filter and one of the following values: active, completed, deleting, or deleted.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the import image tasks.
        @OptionalCustomCoding<EC2ArrayCoder<_ImportTaskIdsEncoding, String>>
        public var importTaskIds: [String]?
        /// The maximum number of results to return in a single call.
        public let maxResults: Int?
        /// A token that indicates the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, importTaskIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.importTaskIds = importTaskIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filters"
            case importTaskIds = "ImportTaskId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeImportImageTasksResult: AWSDecodableShape {
        public struct _ImportImageTasksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A list of zero or more import image tasks that are currently active or were completed or canceled in the previous 7 days.
        @OptionalCustomCoding<EC2ArrayCoder<_ImportImageTasksEncoding, ImportImageTask>>
        public var importImageTasks: [ImportImageTask]?
        /// The token to use to get the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(importImageTasks: [ImportImageTask]? = nil, nextToken: String? = nil) {
            self.importImageTasks = importImageTasks
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case importImageTasks = "importImageTaskSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeImportSnapshotTasksRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _ImportTaskIdsEncoding: ArrayCoderProperties { public static let member = "ImportTaskId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// A list of import snapshot task IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_ImportTaskIdsEncoding, String>>
        public var importTaskIds: [String]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// A token that indicates the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, importTaskIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.importTaskIds = importTaskIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filters"
            case importTaskIds = "ImportTaskId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeImportSnapshotTasksResult: AWSDecodableShape {
        public struct _ImportSnapshotTasksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A list of zero or more import snapshot tasks that are currently active or were completed or canceled in the previous 7 days.
        @OptionalCustomCoding<EC2ArrayCoder<_ImportSnapshotTasksEncoding, ImportSnapshotTask>>
        public var importSnapshotTasks: [ImportSnapshotTask]?
        /// The token to use to get the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(importSnapshotTasks: [ImportSnapshotTask]? = nil, nextToken: String? = nil) {
            self.importSnapshotTasks = importSnapshotTasks
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case importSnapshotTasks = "importSnapshotTaskSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeInstanceAttributeRequest: AWSEncodableShape {
        /// The instance attribute. Note: The enaSupport attribute is not supported at this time.
        public let attribute: InstanceAttributeName?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String?

        public init(attribute: InstanceAttributeName? = nil, dryRun: Bool? = nil, instanceId: String? = nil) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "attribute"
            case dryRun = "dryRun"
            case instanceId = "instanceId"
        }
    }

    public struct DescribeInstanceConnectEndpointsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _InstanceConnectEndpointIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    instance-connect-endpoint-id - The ID of the EC2 Instance Connect Endpoint.    state - The state of the EC2 Instance Connect Endpoint (create-in-progress | create-complete | create-failed |  delete-in-progress | delete-complete | delete-failed).    subnet-id - The ID of the subnet in which the EC2 Instance Connect Endpoint was created.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    tag-value - The value of a tag assigned to the resource. Use this filter to find all resources  that have a tag with a specific value, regardless of tag key.    vpc-id - The ID of the VPC in which the EC2 Instance Connect Endpoint was created.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// One or more EC2 Instance Connect Endpoint IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceConnectEndpointIdsEncoding, String>>
        public var instanceConnectEndpointIds: [String]?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
        /// 	        For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, instanceConnectEndpointIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.instanceConnectEndpointIds = instanceConnectEndpointIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 50)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case instanceConnectEndpointIds = "InstanceConnectEndpointId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInstanceConnectEndpointsResult: AWSDecodableShape {
        public struct _InstanceConnectEndpointsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the EC2 Instance Connect Endpoints.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceConnectEndpointsEncoding, Ec2InstanceConnectEndpoint>>
        public var instanceConnectEndpoints: [Ec2InstanceConnectEndpoint]?
        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(instanceConnectEndpoints: [Ec2InstanceConnectEndpoint]? = nil, nextToken: String? = nil) {
            self.instanceConnectEndpoints = instanceConnectEndpoints
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceConnectEndpoints = "instanceConnectEndpointSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeInstanceCreditSpecificationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "InstanceId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    instance-id - The ID of the instance.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The instance IDs. Default: Describes all your instances. Constraints: Maximum 1000 explicitly specified instance IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
        /// 	        For more information, see Pagination. You cannot specify this parameter and the instance IDs parameter in the same call.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, instanceIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.instanceIds = instanceIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case instanceIds = "InstanceId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInstanceCreditSpecificationsResult: AWSDecodableShape {
        public struct _InstanceCreditSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the credit option for CPU usage of an instance.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceCreditSpecificationsEncoding, InstanceCreditSpecification>>
        public var instanceCreditSpecifications: [InstanceCreditSpecification]?
        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(instanceCreditSpecifications: [InstanceCreditSpecification]? = nil, nextToken: String? = nil) {
            self.instanceCreditSpecifications = instanceCreditSpecifications
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceCreditSpecifications = "instanceCreditSpecificationSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeInstanceEventNotificationAttributesRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct DescribeInstanceEventNotificationAttributesResult: AWSDecodableShape {
        /// Information about the registered tag keys.
        public let instanceTagAttribute: InstanceTagNotificationAttribute?

        public init(instanceTagAttribute: InstanceTagNotificationAttribute? = nil) {
            self.instanceTagAttribute = instanceTagAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case instanceTagAttribute = "instanceTagAttribute"
        }
    }

    public struct DescribeInstanceEventWindowsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _InstanceEventWindowIdsEncoding: ArrayCoderProperties { public static let member = "InstanceEventWindowId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    dedicated-host-id - The event windows associated with the specified Dedicated Host ID.    event-window-name - The event windows associated with the specified names.     instance-id - The event windows associated with the specified instance ID.    instance-tag - The event windows associated with the specified tag and value.    instance-tag-key - The event windows associated with the specified tag key, regardless of the value.    instance-tag-value - The event windows associated with the specified tag value, regardless of the key.    tag: - The key/value combination of a tag assigned to the event window. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value CMX, specify tag:Owner for the filter name and CMX for the filter value.     tag-key - The key of a tag assigned to the event window. Use this filter to find all event windows that have a tag with a specific key, regardless of the tag value.     tag-value - The value of a tag assigned to the event window. Use this filter to find all event windows that have a tag with a specific value, regardless of the tag key.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the event windows.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceEventWindowIdsEncoding, String>>
        public var instanceEventWindowIds: [String]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 20 and 500. You cannot specify this parameter and the event window IDs parameter in the same call.
        public let maxResults: Int?
        /// The token to request the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, instanceEventWindowIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.instanceEventWindowIds = instanceEventWindowIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 500)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 20)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case instanceEventWindowIds = "InstanceEventWindowId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInstanceEventWindowsResult: AWSDecodableShape {
        public struct _InstanceEventWindowsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the event windows.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceEventWindowsEncoding, InstanceEventWindow>>
        public var instanceEventWindows: [InstanceEventWindow]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(instanceEventWindows: [InstanceEventWindow]? = nil, nextToken: String? = nil) {
            self.instanceEventWindows = instanceEventWindows
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceEventWindows = "instanceEventWindowSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeInstanceStatusRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "InstanceId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    availability-zone - The Availability Zone of the instance.    event.code - The code for the scheduled event (instance-reboot | system-reboot | system-maintenance | instance-retirement | instance-stop).    event.description - A description of the event.    event.instance-event-id - The ID of the event whose date and time you are modifying.    event.not-after - The latest end time for the scheduled event (for example, 2014-09-15T17:15:20.000Z).    event.not-before - The earliest start time for the scheduled event (for example, 2014-09-15T17:15:20.000Z).    event.not-before-deadline - The deadline for starting the event (for example, 2014-09-15T17:15:20.000Z).    instance-state-code - The code for the instance state, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).    instance-status.reachability - Filters on instance status where the name is reachability (passed | failed | initializing | insufficient-data).    instance-status.status - The status of the instance (ok | impaired | initializing | insufficient-data | not-applicable).    system-status.reachability - Filters on system status where the name is reachability (passed | failed | initializing | insufficient-data).    system-status.status - The system status of the instance (ok | impaired | initializing | insufficient-data | not-applicable).
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// When true, includes the health status for all instances. When false, includes the health status for running instances only. Default: false
        public let includeAllInstances: Bool?
        /// The instance IDs. Default: Describes all your instances. Constraints: Maximum 100 explicitly specified instance IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
        /// 	        For more information, see Pagination. You cannot specify this parameter and the instance IDs parameter in the same request.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, includeAllInstances: Bool? = nil, instanceIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.includeAllInstances = includeAllInstances
            self.instanceIds = instanceIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case includeAllInstances = "includeAllInstances"
            case instanceIds = "InstanceId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInstanceStatusResult: AWSDecodableShape {
        public struct _InstanceStatusesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the status of the instances.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceStatusesEncoding, InstanceStatus>>
        public var instanceStatuses: [InstanceStatus]?
        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(instanceStatuses: [InstanceStatus]? = nil, nextToken: String? = nil) {
            self.instanceStatuses = instanceStatuses
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceStatuses = "instanceStatusSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeInstanceTopologyRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    availability-zone - The name of the Availability Zone (for example, us-west-2a) or Local Zone (for example, us-west-2-lax-1b) that the instance is in.    instance-type - The instance type (for example, p4d.24xlarge) or instance family (for example, p4d*). You can use the * wildcard to match zero or more characters, or the ? wildcard to match zero or one character.    zone-id - The ID of the Availability Zone (for example, usw2-az2) or Local Zone (for example, usw2-lax1-az1) that the instance is in.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The name of the placement group that each instance is in. Constraints: Maximum 100 explicitly specified placement group names.
        @OptionalCustomCoding<EC2StandardArrayCoder<String>>
        public var groupNames: [String]?
        /// The instance IDs. Default: Describes all your instances. Constraints: Maximum 100 explicitly specified instance IDs.
        @OptionalCustomCoding<EC2StandardArrayCoder<String>>
        public var instanceIds: [String]?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
        /// 	        For more information, see Pagination. You can't specify this parameter and the instance IDs parameter in the same request. Default: 20
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, groupNames: [String]? = nil, instanceIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.groupNames = groupNames
            self.instanceIds = instanceIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case groupNames = "GroupName"
            case instanceIds = "InstanceId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInstanceTopologyResult: AWSDecodableShape {
        public struct _InstancesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the topology of each instance.
        @OptionalCustomCoding<EC2ArrayCoder<_InstancesEncoding, InstanceTopology>>
        public var instances: [InstanceTopology]?
        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(instances: [InstanceTopology]? = nil, nextToken: String? = nil) {
            self.instances = instances
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instances = "instanceSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeInstanceTypeOfferingsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.    location - This depends on the location type. For example, if the location type is region (default), the location is the Region code (for example, us-east-2.)    instance-type - The instance type. For example, c5.2xlarge.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The location type.
        public let locationType: LocationType?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
        /// 	        For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, locationType: LocationType? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.locationType = locationType
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case locationType = "LocationType"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInstanceTypeOfferingsResult: AWSDecodableShape {
        public struct _InstanceTypeOfferingsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The instance types offered.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceTypeOfferingsEncoding, InstanceTypeOffering>>
        public var instanceTypeOfferings: [InstanceTypeOffering]?
        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(instanceTypeOfferings: [InstanceTypeOffering]? = nil, nextToken: String? = nil) {
            self.instanceTypeOfferings = instanceTypeOfferings
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceTypeOfferings = "instanceTypeOfferingSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeInstanceTypesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.    auto-recovery-supported - Indicates whether Amazon CloudWatch action based recovery is supported  (true | false).    bare-metal - Indicates whether it is a bare metal instance type  (true | false).    burstable-performance-supported - Indicates whether the instance type is a  burstable performance T instance type  (true | false).    current-generation - Indicates whether this instance type is the latest generation instance type of an instance family  (true | false).    ebs-info.ebs-optimized-info.baseline-bandwidth-in-mbps - The baseline bandwidth performance for an EBS-optimized instance type, in Mbps.    ebs-info.ebs-optimized-info.baseline-iops - The baseline input/output storage operations per second for an EBS-optimized instance type.    ebs-info.ebs-optimized-info.baseline-throughput-in-mbps - The baseline throughput performance for an EBS-optimized instance type, in MB/s.    ebs-info.ebs-optimized-info.maximum-bandwidth-in-mbps - The maximum bandwidth performance for an EBS-optimized instance type, in Mbps.    ebs-info.ebs-optimized-info.maximum-iops - The maximum input/output storage operations per second for an EBS-optimized instance type.    ebs-info.ebs-optimized-info.maximum-throughput-in-mbps - The maximum throughput performance for an EBS-optimized instance type, in MB/s.    ebs-info.ebs-optimized-support - Indicates whether the instance type is EBS-optimized (supported | unsupported | default).    ebs-info.encryption-support - Indicates whether EBS encryption is supported (supported | unsupported).    ebs-info.nvme-support - Indicates whether non-volatile memory express (NVMe) is supported for EBS volumes (required | supported | unsupported).    free-tier-eligible - Indicates whether the instance type is eligible to use in the free tier  (true | false).    hibernation-supported - Indicates whether On-Demand hibernation is supported  (true | false).    hypervisor - The hypervisor (nitro | xen).    instance-storage-info.disk.count - The number of local disks.    instance-storage-info.disk.size-in-gb - The storage size of each instance storage disk, in GB.    instance-storage-info.disk.type - The storage technology for the local instance storage disks (hdd | ssd).    instance-storage-info.encryption-support - Indicates whether data is encrypted at rest  (required | supported | unsupported).    instance-storage-info.nvme-support - Indicates whether non-volatile memory express (NVMe) is supported for instance store (required | supported | unsupported).    instance-storage-info.total-size-in-gb - The total amount of storage available from all local instance storage, in GB.    instance-storage-supported - Indicates whether the instance type has local instance storage  (true | false).    instance-type - The instance type (for example c5.2xlarge or c5*).    memory-info.size-in-mib - The memory size.    network-info.efa-info.maximum-efa-interfaces - The maximum number of Elastic  Fabric Adapters (EFAs) per instance.    network-info.efa-supported - Indicates whether the instance type supports Elastic Fabric Adapter (EFA)  (true | false).    network-info.ena-support - Indicates whether Elastic Network Adapter (ENA) is supported or required (required | supported | unsupported).    network-info.encryption-in-transit-supported - Indicates whether the instance type  automatically encrypts in-transit traffic between instances  (true | false).    network-info.ipv4-addresses-per-interface - The maximum number of private IPv4 addresses per network interface.    network-info.ipv6-addresses-per-interface - The maximum number of private IPv6 addresses per network interface.    network-info.ipv6-supported - Indicates whether the instance type supports IPv6  (true | false).    network-info.maximum-network-cards - The maximum number of network cards per instance.    network-info.maximum-network-interfaces - The maximum number of network interfaces per instance.    network-info.network-performance - The network performance (for example, "25 Gigabit").    nitro-enclaves-support - Indicates whether Nitro Enclaves is supported (supported | unsupported).    nitro-tpm-support - Indicates whether NitroTPM is supported (supported | unsupported).    nitro-tpm-info.supported-versions - The supported NitroTPM version (2.0).    processor-info.supported-architecture - The CPU architecture (arm64 | i386 | x86_64).    processor-info.sustained-clock-speed-in-ghz - The CPU clock speed, in GHz.    processor-info.supported-features - The supported CPU features (amd-sev-snp).    supported-boot-mode - The boot mode (legacy-bios | uefi).    supported-root-device-type - The root device type (ebs | instance-store).    supported-usage-class - The usage class (on-demand | spot).    supported-virtualization-type - The virtualization type (hvm | paravirtual).    vcpu-info.default-cores - The default number of cores for the instance type.    vcpu-info.default-threads-per-core - The default number of threads per core for the instance type.    vcpu-info.default-vcpus - The default number of vCPUs for the instance type.    vcpu-info.valid-cores - The number of cores that can be configured for the instance type.    vcpu-info.valid-threads-per-core - The number of threads per core that can be configured for the instance type. For example, "1" or "1,2".
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The instance types. For more information, see Instance types in the Amazon EC2 User Guide.
        @OptionalCustomCoding<EC2StandardArrayCoder<InstanceType>>
        public var instanceTypes: [InstanceType]?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
        /// 	        For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, instanceTypes: [InstanceType]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.instanceTypes = instanceTypes
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.instanceTypes, name: "instanceTypes", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case instanceTypes = "InstanceType"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInstanceTypesResult: AWSDecodableShape {
        public struct _InstanceTypesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The instance type. For more information, see Instance types in the Amazon EC2 User Guide.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceTypesEncoding, InstanceTypeInfo>>
        public var instanceTypes: [InstanceTypeInfo]?
        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(instanceTypes: [InstanceTypeInfo]? = nil, nextToken: String? = nil) {
            self.instanceTypes = instanceTypes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceTypes = "instanceTypeSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeInstancesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "InstanceId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    affinity - The affinity setting for an instance running on a Dedicated Host (default | host).    architecture - The instance architecture (i386 | x86_64 | arm64).    availability-zone - The Availability Zone of the instance.    block-device-mapping.attach-time - The attach time for an EBS volume mapped to the instance, for example, 2022-09-15T17:15:20.000Z.    block-device-mapping.delete-on-termination - A Boolean that indicates whether the EBS volume is deleted on instance termination.    block-device-mapping.device-name - The device name specified in the block device mapping (for example, /dev/sdh or xvdh).    block-device-mapping.status - The status for the EBS volume (attaching | attached | detaching | detached).    block-device-mapping.volume-id - The volume ID of the EBS volume.    boot-mode - The boot mode that was specified by the AMI (legacy-bios | uefi | uefi-preferred).    capacity-reservation-id - The ID of the Capacity Reservation into which the instance was launched.    capacity-reservation-specification.capacity-reservation-preference - The instance's Capacity Reservation preference (open | none).    capacity-reservation-specification.capacity-reservation-target.capacity-reservation-id - The ID of the targeted Capacity Reservation.    capacity-reservation-specification.capacity-reservation-target.capacity-reservation-resource-group-arn - The ARN of the targeted Capacity Reservation group.    client-token - The idempotency token you provided when you launched the instance.    current-instance-boot-mode - The boot mode that is used to launch the instance at launch or start (legacy-bios | uefi).    dns-name - The public DNS name of the instance.    ebs-optimized - A Boolean that indicates whether the instance is optimized for Amazon EBS I/O.    ena-support - A Boolean that indicates whether the instance is enabled for enhanced networking with ENA.    enclave-options.enabled - A Boolean that indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves.    hibernation-options.configured - A Boolean that indicates whether the instance is enabled for hibernation. A value of true means that the instance is enabled for hibernation.    host-id - The ID of the Dedicated Host on which the instance is running, if applicable.    hypervisor - The hypervisor type of the instance (ovm | xen). The value xen is used for both Xen and Nitro hypervisors.    iam-instance-profile.arn - The instance profile associated with the instance. Specified as an ARN.    iam-instance-profile.id - The instance profile associated with the instance. Specified as an ID.    iam-instance-profile.name - The instance profile associated with the instance. Specified as an name.    image-id - The ID of the image used to launch the instance.    instance-id - The ID of the instance.    instance-lifecycle - Indicates whether this is a Spot Instance, a Scheduled Instance, or a Capacity Block (spot | scheduled | capacity-block).    instance-state-code - The state of the instance, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).    instance-type - The type of instance (for example, t2.micro).    instance.group-id - The ID of the security group for the instance.     instance.group-name - The name of the security group for the instance.     ip-address - The public IPv4 address of the instance.    ipv6-address - The IPv6 address of the instance.    kernel-id - The kernel ID.    key-name - The name of the key pair used when the instance was launched.    launch-index - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on).     launch-time - The time when the instance was launched, in the ISO 8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for example, 2021-09-29T11:04:43.305Z. You can use a wildcard (*), for example, 2021-09-29T*, which matches an entire day.    maintenance-options.auto-recovery - The current automatic recovery behavior of the instance (disabled | default).    metadata-options.http-endpoint - The status of access to the HTTP metadata endpoint on your instance (enabled | disabled)    metadata-options.http-protocol-ipv4 - Indicates whether the IPv4 endpoint is enabled (disabled | enabled).    metadata-options.http-protocol-ipv6 - Indicates whether the IPv6 endpoint is enabled (disabled | enabled).    metadata-options.http-put-response-hop-limit - The HTTP metadata request put response hop limit (integer, possible values 1 to 64)    metadata-options.http-tokens - The metadata request authorization state (optional | required)    metadata-options.instance-metadata-tags - The status of access to instance tags from the instance metadata (enabled | disabled)    metadata-options.state - The state of the metadata option changes (pending | applied).    monitoring-state - Indicates whether detailed monitoring is enabled (disabled | enabled).    network-interface.addresses.association.allocation-id - The allocation ID.    network-interface.addresses.association.association-id - The association ID.    network-interface.addresses.association.carrier-ip - The carrier IP address.    network-interface.addresses.association.customer-owned-ip - The customer-owned IP address.    network-interface.addresses.association.ip-owner-id - The owner ID of the private IPv4 address associated with the network interface.    network-interface.addresses.association.public-dns-name - The public DNS name.    network-interface.addresses.association.public-ip - The ID of the association of an Elastic IP address (IPv4) with a network interface.    network-interface.addresses.primary - Specifies whether the IPv4 address of the network interface is the primary private IPv4 address.    network-interface.addresses.private-dns-name - The private DNS name.    network-interface.addresses.private-ip-address - The private IPv4 address associated with the network interface.    network-interface.association.allocation-id - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.    network-interface.association.association-id - The association ID returned when the network interface was associated with an IPv4 address.    network-interface.association.carrier-ip - The customer-owned IP address.    network-interface.association.customer-owned-ip - The customer-owned IP address.    network-interface.association.ip-owner-id - The owner of the Elastic IP address (IPv4) associated with the network interface.    network-interface.association.public-dns-name - The public DNS name.    network-interface.association.public-ip - The address of the Elastic IP address (IPv4) bound to the network interface.    network-interface.attachment.attach-time - The time that the network interface was attached to an instance.    network-interface.attachment.attachment-id - The ID of the interface attachment.    network-interface.attachment.delete-on-termination - Specifies whether the attachment is deleted when an instance is terminated.    network-interface.attachment.device-index - The device index to which the network interface is attached.    network-interface.attachment.instance-id - The ID of the instance to which the network interface is attached.    network-interface.attachment.instance-owner-id - The owner ID of the instance to which the network interface is attached.    network-interface.attachment.network-card-index - The index of the network card.    network-interface.attachment.status - The status of the attachment (attaching | attached | detaching | detached).    network-interface.availability-zone - The Availability Zone for the network interface.    network-interface.deny-all-igw-traffic - A Boolean that indicates whether  a network interface with an IPv6 address is unreachable from the public internet.    network-interface.description - The description of the network interface.    network-interface.group-id - The ID of a security group associated with the network interface.    network-interface.group-name - The name of a security group associated with the network interface.    network-interface.ipv4-prefixes.ipv4-prefix - The IPv4 prefixes that are assigned to the network interface.    network-interface.ipv6-address - The IPv6 address associated with the network interface.    network-interface.ipv6-addresses.ipv6-address - The IPv6 address associated with the network interface.    network-interface.ipv6-addresses.is-primary-ipv6 - A Boolean that indicates whether this is the primary IPv6 address.    network-interface.ipv6-native - A Boolean that indicates whether this is an IPv6 only network interface.    network-interface.ipv6-prefixes.ipv6-prefix - The IPv6 prefix assigned to the network interface.    network-interface.mac-address - The MAC address of the network interface.    network-interface.network-interface-id - The ID of the network interface.    network-interface.outpost-arn - The ARN of the Outpost.    network-interface.owner-id - The ID of the owner of the network interface.    network-interface.private-dns-name - The private DNS name of the network interface.    network-interface.private-ip-address - The private IPv4 address.    network-interface.public-dns-name - The public DNS name.    network-interface.requester-id - The requester ID for the network interface.    network-interface.requester-managed - Indicates whether the network interface is being managed by Amazon Web Services.    network-interface.status - The status of the network interface (available) | in-use).    network-interface.source-dest-check - Whether the network interface performs source/destination checking. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the network interface to perform network address translation (NAT) in your VPC.    network-interface.subnet-id - The ID of the subnet for the network interface.    network-interface.tag-key - The key of a tag assigned to the network interface.    network-interface.tag-value - The value of a tag assigned to the network interface.    network-interface.vpc-id - The ID of the VPC for the network interface.    outpost-arn - The Amazon Resource Name (ARN) of the Outpost.    owner-id - The Amazon Web Services account ID of the instance owner.    placement-group-name - The name of the placement group for the instance.    placement-partition-number - The partition in which the instance is located.    platform - The platform. To list only Windows instances, use windows.    platform-details - The platform (Linux/UNIX | Red Hat BYOL Linux |  Red Hat Enterprise Linux | Red Hat Enterprise Linux with HA | Red Hat Enterprise Linux with SQL Server Standard and HA | Red Hat Enterprise Linux with SQL Server Enterprise and HA | Red Hat Enterprise Linux with SQL Server Standard | Red Hat Enterprise Linux with SQL Server Web | Red Hat Enterprise Linux with SQL Server Enterprise | SQL Server Enterprise | SQL Server Standard | SQL Server Web | SUSE Linux | Ubuntu Pro | Windows | Windows BYOL | Windows with SQL Server Enterprise | Windows with SQL Server Standard | Windows with SQL Server Web).    private-dns-name - The private IPv4 DNS name of the instance.    private-dns-name-options.enable-resource-name-dns-a-record - A Boolean that indicates whether to respond to DNS queries for instance hostnames with DNS A records.    private-dns-name-options.enable-resource-name-dns-aaaa-record - A Boolean that indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.    private-dns-name-options.hostname-type - The type of hostname (ip-name | resource-name).    private-ip-address - The private IPv4 address of the instance.    product-code - The product code associated with the AMI used to launch the instance.    product-code.type - The type of product code (devpay | marketplace).    ramdisk-id - The RAM disk ID.    reason - The reason for the current state of the instance (for example, shows "User Initiated [date]" when you stop or terminate the instance). Similar to the state-reason-code filter.    requester-id - The ID of the entity that launched the instance on your behalf (for example, Amazon Web Services Management Console, Auto Scaling, and so on).    reservation-id - The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you get one reservation ID. If you launch ten instances using the same launch request, you also get one reservation ID.    root-device-name - The device name of the root device volume (for example, /dev/sda1).    root-device-type - The type of the root device volume (ebs | instance-store).    source-dest-check - Indicates whether the instance performs source/destination checking. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the instance to perform network address translation (NAT) in your VPC.     spot-instance-request-id - The ID of the Spot Instance request.    state-reason-code - The reason code for the state change.    state-reason-message - A message that describes the state change.    subnet-id - The ID of the subnet for the instance.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.    tenancy - The tenancy of an instance (dedicated | default | host).    tpm-support - Indicates if the instance is configured for NitroTPM support (v2.0).     usage-operation - The usage operation value for the instance (RunInstances | RunInstances:00g0 | RunInstances:0010 | RunInstances:1010 | RunInstances:1014 | RunInstances:1110 | RunInstances:0014 | RunInstances:0210 | RunInstances:0110 | RunInstances:0100 | RunInstances:0004 | RunInstances:0200 | RunInstances:000g | RunInstances:0g00 | RunInstances:0002 | RunInstances:0800 | RunInstances:0102 | RunInstances:0006 | RunInstances:0202).    usage-operation-update-time - The time that the usage operation was last updated, for example, 2022-09-15T17:15:20.000Z.    virtualization-type - The virtualization type of the instance (paravirtual | hvm).    vpc-id - The ID of the VPC that the instance is running in.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The instance IDs. Default: Describes all your instances.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
        /// 	        For more information, see Pagination. You cannot specify this parameter and the instance IDs parameter in the same request.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, instanceIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.instanceIds = instanceIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case instanceIds = "InstanceId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeInstancesResult: AWSDecodableShape {
        public struct _ReservationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?
        /// Information about the reservations.
        @OptionalCustomCoding<EC2ArrayCoder<_ReservationsEncoding, Reservation>>
        public var reservations: [Reservation]?

        public init(nextToken: String? = nil, reservations: [Reservation]? = nil) {
            self.nextToken = nextToken
            self.reservations = reservations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case reservations = "reservationSet"
        }
    }

    public struct DescribeInternetGatewaysRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _InternetGatewayIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    attachment.state - The current state of the attachment between the gateway and the VPC (available). Present only if a VPC is attached.    attachment.vpc-id - The ID of an attached VPC.    internet-gateway-id - The ID of the Internet gateway.    owner-id - The ID of the Amazon Web Services account that owns the internet gateway.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the internet gateways. Default: Describes all your internet gateways.
        @OptionalCustomCoding<EC2ArrayCoder<_InternetGatewayIdsEncoding, String>>
        public var internetGatewayIds: [String]?
        /// The maximum number of items to return for this request.
        /// 	To get the next page of items, make another request with the token returned in the output.
        /// 	For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, internetGatewayIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.internetGatewayIds = internetGatewayIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case internetGatewayIds = "internetGatewayId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInternetGatewaysResult: AWSDecodableShape {
        public struct _InternetGatewaysEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about one or more internet gateways.
        @OptionalCustomCoding<EC2ArrayCoder<_InternetGatewaysEncoding, InternetGateway>>
        public var internetGateways: [InternetGateway]?
        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(internetGateways: [InternetGateway]? = nil, nextToken: String? = nil) {
            self.internetGateways = internetGateways
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case internetGateways = "internetGatewaySet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeIpamByoasnRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeIpamByoasnResult: AWSDecodableShape {
        public struct _ByoasnsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// ASN and BYOIP CIDR associations.
        @OptionalCustomCoding<EC2ArrayCoder<_ByoasnsEncoding, Byoasn>>
        public var byoasns: [Byoasn]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(byoasns: [Byoasn]? = nil, nextToken: String? = nil) {
            self.byoasns = byoasns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case byoasns = "byoasnSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeIpamPoolsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _IpamPoolIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters for the request. For more information about filtering, see Filtering CLI output.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the IPAM pools you would like information on.
        @OptionalCustomCoding<EC2ArrayCoder<_IpamPoolIdsEncoding, String>>
        public var ipamPoolIds: [String]?
        /// The maximum number of results to return in the request.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, ipamPoolIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.ipamPoolIds = ipamPoolIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case ipamPoolIds = "IpamPoolId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeIpamPoolsResult: AWSDecodableShape {
        public struct _IpamPoolsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the IPAM pools.
        @OptionalCustomCoding<EC2ArrayCoder<_IpamPoolsEncoding, IpamPool>>
        public var ipamPools: [IpamPool]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(ipamPools: [IpamPool]? = nil, nextToken: String? = nil) {
            self.ipamPools = ipamPools
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ipamPools = "ipamPoolSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeIpamResourceDiscoveriesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _IpamResourceDiscoveryIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The resource discovery filters.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IPAM resource discovery IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_IpamResourceDiscoveryIdsEncoding, String>>
        public var ipamResourceDiscoveryIds: [String]?
        /// The maximum number of resource discoveries to return in one page of results.
        public let maxResults: Int?
        /// Specify the pagination token from a previous request to retrieve the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, ipamResourceDiscoveryIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.ipamResourceDiscoveryIds = ipamResourceDiscoveryIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case ipamResourceDiscoveryIds = "IpamResourceDiscoveryId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeIpamResourceDiscoveriesResult: AWSDecodableShape {
        public struct _IpamResourceDiscoveriesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The resource discoveries.
        @OptionalCustomCoding<EC2ArrayCoder<_IpamResourceDiscoveriesEncoding, IpamResourceDiscovery>>
        public var ipamResourceDiscoveries: [IpamResourceDiscovery]?
        /// Specify the pagination token from a previous request to retrieve the next page of results.
        public let nextToken: String?

        public init(ipamResourceDiscoveries: [IpamResourceDiscovery]? = nil, nextToken: String? = nil) {
            self.ipamResourceDiscoveries = ipamResourceDiscoveries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ipamResourceDiscoveries = "ipamResourceDiscoverySet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeIpamResourceDiscoveryAssociationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _IpamResourceDiscoveryAssociationIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The resource discovery association filters.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The resource discovery association IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_IpamResourceDiscoveryAssociationIdsEncoding, String>>
        public var ipamResourceDiscoveryAssociationIds: [String]?
        /// The maximum number of resource discovery associations to return in one page of results.
        public let maxResults: Int?
        /// Specify the pagination token from a previous request to retrieve the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, ipamResourceDiscoveryAssociationIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.ipamResourceDiscoveryAssociationIds = ipamResourceDiscoveryAssociationIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case ipamResourceDiscoveryAssociationIds = "IpamResourceDiscoveryAssociationId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeIpamResourceDiscoveryAssociationsResult: AWSDecodableShape {
        public struct _IpamResourceDiscoveryAssociationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The resource discovery associations.
        @OptionalCustomCoding<EC2ArrayCoder<_IpamResourceDiscoveryAssociationsEncoding, IpamResourceDiscoveryAssociation>>
        public var ipamResourceDiscoveryAssociations: [IpamResourceDiscoveryAssociation]?
        /// Specify the pagination token from a previous request to retrieve the next page of results.
        public let nextToken: String?

        public init(ipamResourceDiscoveryAssociations: [IpamResourceDiscoveryAssociation]? = nil, nextToken: String? = nil) {
            self.ipamResourceDiscoveryAssociations = ipamResourceDiscoveryAssociations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ipamResourceDiscoveryAssociations = "ipamResourceDiscoveryAssociationSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeIpamScopesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _IpamScopeIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters for the request. For more information about filtering, see Filtering CLI output.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the scopes you want information on.
        @OptionalCustomCoding<EC2ArrayCoder<_IpamScopeIdsEncoding, String>>
        public var ipamScopeIds: [String]?
        /// The maximum number of results to return in the request.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, ipamScopeIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.ipamScopeIds = ipamScopeIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case ipamScopeIds = "IpamScopeId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeIpamScopesResult: AWSDecodableShape {
        public struct _IpamScopesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The scopes you want information on.
        @OptionalCustomCoding<EC2ArrayCoder<_IpamScopesEncoding, IpamScope>>
        public var ipamScopes: [IpamScope]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(ipamScopes: [IpamScope]? = nil, nextToken: String? = nil) {
            self.ipamScopes = ipamScopes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ipamScopes = "ipamScopeSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeIpamsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _IpamIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters for the request. For more information about filtering, see Filtering CLI output.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the IPAMs you want information on.
        @OptionalCustomCoding<EC2ArrayCoder<_IpamIdsEncoding, String>>
        public var ipamIds: [String]?
        /// The maximum number of results to return in the request.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, ipamIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.ipamIds = ipamIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case ipamIds = "IpamId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeIpamsResult: AWSDecodableShape {
        public struct _IpamsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the IPAMs.
        @OptionalCustomCoding<EC2ArrayCoder<_IpamsEncoding, Ipam>>
        public var ipams: [Ipam]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(ipams: [Ipam]? = nil, nextToken: String? = nil) {
            self.ipams = ipams
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ipams = "ipamSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeIpv6PoolsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _PoolIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the IPv6 address pools.
        @OptionalCustomCoding<EC2ArrayCoder<_PoolIdsEncoding, String>>
        public var poolIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, poolIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.poolIds = poolIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case poolIds = "PoolId"
        }
    }

    public struct DescribeIpv6PoolsResult: AWSDecodableShape {
        public struct _Ipv6PoolsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the IPv6 address pools.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv6PoolsEncoding, Ipv6Pool>>
        public var ipv6Pools: [Ipv6Pool]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(ipv6Pools: [Ipv6Pool]? = nil, nextToken: String? = nil) {
            self.ipv6Pools = ipv6Pools
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Pools = "ipv6PoolSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeKeyPairsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _KeyNamesEncoding: ArrayCoderProperties { public static let member = "KeyName" }
        public struct _KeyPairIdsEncoding: ArrayCoderProperties { public static let member = "KeyPairId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    key-pair-id - The ID of the key pair.    fingerprint - The fingerprint of the key pair.    key-name - The name of the key pair.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// If true, the public key material is included in the response. Default: false
        public let includePublicKey: Bool?
        /// The key pair names. Default: Describes all of your key pairs.
        @OptionalCustomCoding<EC2ArrayCoder<_KeyNamesEncoding, String>>
        public var keyNames: [String]?
        /// The IDs of the key pairs.
        @OptionalCustomCoding<EC2ArrayCoder<_KeyPairIdsEncoding, String>>
        public var keyPairIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, includePublicKey: Bool? = nil, keyNames: [String]? = nil, keyPairIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.includePublicKey = includePublicKey
            self.keyNames = keyNames
            self.keyPairIds = keyPairIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case includePublicKey = "IncludePublicKey"
            case keyNames = "KeyName"
            case keyPairIds = "KeyPairId"
        }
    }

    public struct DescribeKeyPairsResult: AWSDecodableShape {
        public struct _KeyPairsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the key pairs.
        @OptionalCustomCoding<EC2ArrayCoder<_KeyPairsEncoding, KeyPairInfo>>
        public var keyPairs: [KeyPairInfo]?

        public init(keyPairs: [KeyPairInfo]? = nil) {
            self.keyPairs = keyPairs
        }

        private enum CodingKeys: String, CodingKey {
            case keyPairs = "keySet"
        }
    }

    public struct DescribeLaunchTemplateVersionsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VersionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    create-time - The time the launch template version was created.    ebs-optimized - A boolean that indicates whether the instance is optimized for Amazon EBS I/O.    http-endpoint - Indicates whether the HTTP metadata endpoint on your instances is enabled (enabled | disabled).    http-protocol-ipv4 - Indicates whether the IPv4 endpoint for the instance metadata service is enabled (enabled | disabled).    host-resource-group-arn - The ARN of the host resource group in which to launch the instances.    http-tokens - The state of token usage for your instance metadata requests (optional | required).    iam-instance-profile - The ARN of the IAM instance profile.    image-id - The ID of the AMI.    instance-type - The instance type.    is-default-version - A boolean that indicates whether the launch template version is the default version.    kernel-id - The kernel ID.    license-configuration-arn - The ARN of the license configuration.    network-card-index - The index of the network card.    ram-disk-id - The RAM disk ID.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The ID of the launch template. To describe one or more versions of a specified launch template, you must specify either the LaunchTemplateId or the LaunchTemplateName, but not both. To describe all the latest or default launch template versions in your account, you must omit this parameter.
        public let launchTemplateId: String?
        /// The name of the launch template. To describe one or more versions of a specified launch template, you must specify either the LaunchTemplateName or the LaunchTemplateId, but not both. To describe all the latest or default launch template versions in your account, you must omit this parameter.
        public let launchTemplateName: String?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 1 and 200.
        public let maxResults: Int?
        /// The version number up to which to describe launch template versions.
        public let maxVersion: String?
        /// The version number after which to describe launch template versions.
        public let minVersion: String?
        /// The token to request the next page of results.
        public let nextToken: String?
        /// If true, and if a Systems Manager parameter is specified for ImageId, the AMI ID is displayed in the response for imageId. If false, and if a Systems Manager parameter is specified for ImageId, the parameter is displayed in the response for imageId. For more information, see Use a Systems  Manager parameter instead of an AMI ID in the Amazon Elastic Compute Cloud User Guide. Default: false
        public let resolveAlias: Bool?
        /// One or more versions of the launch template. Valid values depend on whether you are describing a specified launch template (by ID or name) or all launch templates in your account. To describe one or more versions of a specified launch template, valid values are $Latest, $Default, and numbers. To describe all launch templates in your account that are defined as the latest version, the valid value is $Latest. To describe all launch templates in your account that are defined as the default version, the valid value is $Default. You can specify $Latest and $Default in the same request. You cannot specify numbers.
        @OptionalCustomCoding<EC2ArrayCoder<_VersionsEncoding, String>>
        public var versions: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, launchTemplateId: String? = nil, launchTemplateName: String? = nil, maxResults: Int? = nil, maxVersion: String? = nil, minVersion: String? = nil, nextToken: String? = nil, resolveAlias: Bool? = nil, versions: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.maxResults = maxResults
            self.maxVersion = maxVersion
            self.minVersion = minVersion
            self.nextToken = nextToken
            self.resolveAlias = resolveAlias
            self.versions = versions
        }

        public func validate(name: String) throws {
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, max: 128)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, min: 3)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, pattern: "^[a-zA-Z0-9\\(\\)\\.\\-/_]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
            case maxResults = "MaxResults"
            case maxVersion = "MaxVersion"
            case minVersion = "MinVersion"
            case nextToken = "NextToken"
            case resolveAlias = "ResolveAlias"
            case versions = "LaunchTemplateVersion"
        }
    }

    public struct DescribeLaunchTemplateVersionsResult: AWSDecodableShape {
        public struct _LaunchTemplateVersionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the launch template versions.
        @OptionalCustomCoding<EC2ArrayCoder<_LaunchTemplateVersionsEncoding, LaunchTemplateVersion>>
        public var launchTemplateVersions: [LaunchTemplateVersion]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(launchTemplateVersions: [LaunchTemplateVersion]? = nil, nextToken: String? = nil) {
            self.launchTemplateVersions = launchTemplateVersions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateVersions = "launchTemplateVersionSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeLaunchTemplatesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _LaunchTemplateIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _LaunchTemplateNamesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    create-time - The time the launch template was created.    launch-template-name - The name of the launch template.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// One or more launch template IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_LaunchTemplateIdsEncoding, String>>
        public var launchTemplateIds: [String]?
        /// One or more launch template names.
        @OptionalCustomCoding<EC2ArrayCoder<_LaunchTemplateNamesEncoding, String>>
        public var launchTemplateNames: [String]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 1 and 200.
        public let maxResults: Int?
        /// The token to request the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, launchTemplateIds: [String]? = nil, launchTemplateNames: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.launchTemplateIds = launchTemplateIds
            self.launchTemplateNames = launchTemplateNames
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.launchTemplateNames?.forEach {
                try validate($0, name: "launchTemplateNames[]", parent: name, max: 128)
                try validate($0, name: "launchTemplateNames[]", parent: name, min: 3)
                try validate($0, name: "launchTemplateNames[]", parent: name, pattern: "^[a-zA-Z0-9\\(\\)\\.\\-/_]+$")
            }
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 200)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case launchTemplateIds = "LaunchTemplateId"
            case launchTemplateNames = "LaunchTemplateName"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeLaunchTemplatesResult: AWSDecodableShape {
        public struct _LaunchTemplatesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the launch templates.
        @OptionalCustomCoding<EC2ArrayCoder<_LaunchTemplatesEncoding, LaunchTemplate>>
        public var launchTemplates: [LaunchTemplate]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(launchTemplates: [LaunchTemplate]? = nil, nextToken: String? = nil) {
            self.launchTemplates = launchTemplates
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplates = "launchTemplates"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    local-gateway-id - The ID of a local gateway.    local-gateway-route-table-arn - The Amazon Resource Name (ARN) of the local  gateway route table for the virtual interface group.    local-gateway-route-table-id - The ID of the local gateway route table.    local-gateway-route-table-virtual-interface-group-association-id - The ID of the association.    local-gateway-route-table-virtual-interface-group-id - The ID of the virtual interface group.    owner-id - The ID of the Amazon Web Services account that owns the local gateway virtual  interface group association.    state - The state of the association.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the associations.
        @OptionalCustomCoding<EC2ArrayCoder<_LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdsEncoding, String>>
        public var localGatewayRouteTableVirtualInterfaceGroupAssociationIds: [String]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, localGatewayRouteTableVirtualInterfaceGroupAssociationIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.localGatewayRouteTableVirtualInterfaceGroupAssociationIds = localGatewayRouteTableVirtualInterfaceGroupAssociationIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case localGatewayRouteTableVirtualInterfaceGroupAssociationIds = "LocalGatewayRouteTableVirtualInterfaceGroupAssociationId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult: AWSDecodableShape {
        public struct _LocalGatewayRouteTableVirtualInterfaceGroupAssociationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the associations.
        @OptionalCustomCoding<EC2ArrayCoder<_LocalGatewayRouteTableVirtualInterfaceGroupAssociationsEncoding, LocalGatewayRouteTableVirtualInterfaceGroupAssociation>>
        public var localGatewayRouteTableVirtualInterfaceGroupAssociations: [LocalGatewayRouteTableVirtualInterfaceGroupAssociation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(localGatewayRouteTableVirtualInterfaceGroupAssociations: [LocalGatewayRouteTableVirtualInterfaceGroupAssociation]? = nil, nextToken: String? = nil) {
            self.localGatewayRouteTableVirtualInterfaceGroupAssociations = localGatewayRouteTableVirtualInterfaceGroupAssociations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayRouteTableVirtualInterfaceGroupAssociations = "localGatewayRouteTableVirtualInterfaceGroupAssociationSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeLocalGatewayRouteTableVpcAssociationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _LocalGatewayRouteTableVpcAssociationIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    local-gateway-id - The ID of a local gateway.    local-gateway-route-table-arn - The Amazon Resource Name (ARN) of the local  gateway route table for the association.    local-gateway-route-table-id - The ID of the local gateway route table.    local-gateway-route-table-vpc-association-id - The ID of the association.    owner-id - The ID of the Amazon Web Services account that owns the local gateway route table for the association.    state - The state of the association.    vpc-id - The ID of the VPC.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the associations.
        @OptionalCustomCoding<EC2ArrayCoder<_LocalGatewayRouteTableVpcAssociationIdsEncoding, String>>
        public var localGatewayRouteTableVpcAssociationIds: [String]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, localGatewayRouteTableVpcAssociationIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.localGatewayRouteTableVpcAssociationIds = localGatewayRouteTableVpcAssociationIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case localGatewayRouteTableVpcAssociationIds = "LocalGatewayRouteTableVpcAssociationId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeLocalGatewayRouteTableVpcAssociationsResult: AWSDecodableShape {
        public struct _LocalGatewayRouteTableVpcAssociationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the associations.
        @OptionalCustomCoding<EC2ArrayCoder<_LocalGatewayRouteTableVpcAssociationsEncoding, LocalGatewayRouteTableVpcAssociation>>
        public var localGatewayRouteTableVpcAssociations: [LocalGatewayRouteTableVpcAssociation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(localGatewayRouteTableVpcAssociations: [LocalGatewayRouteTableVpcAssociation]? = nil, nextToken: String? = nil) {
            self.localGatewayRouteTableVpcAssociations = localGatewayRouteTableVpcAssociations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayRouteTableVpcAssociations = "localGatewayRouteTableVpcAssociationSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeLocalGatewayRouteTablesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _LocalGatewayRouteTableIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    local-gateway-id - The ID of a local gateway.    local-gateway-route-table-arn - The Amazon Resource Name (ARN) of the  local gateway route table.    local-gateway-route-table-id - The ID of a local gateway route table.    outpost-arn - The Amazon Resource Name (ARN) of the Outpost.    owner-id - The ID of the Amazon Web Services account that owns the local gateway route table.    state - The state of the local gateway route table.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the local gateway route tables.
        @OptionalCustomCoding<EC2ArrayCoder<_LocalGatewayRouteTableIdsEncoding, String>>
        public var localGatewayRouteTableIds: [String]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, localGatewayRouteTableIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.localGatewayRouteTableIds = localGatewayRouteTableIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case localGatewayRouteTableIds = "LocalGatewayRouteTableId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeLocalGatewayRouteTablesResult: AWSDecodableShape {
        public struct _LocalGatewayRouteTablesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the local gateway route tables.
        @OptionalCustomCoding<EC2ArrayCoder<_LocalGatewayRouteTablesEncoding, LocalGatewayRouteTable>>
        public var localGatewayRouteTables: [LocalGatewayRouteTable]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(localGatewayRouteTables: [LocalGatewayRouteTable]? = nil, nextToken: String? = nil) {
            self.localGatewayRouteTables = localGatewayRouteTables
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayRouteTables = "localGatewayRouteTableSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeLocalGatewayVirtualInterfaceGroupsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _LocalGatewayVirtualInterfaceGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    local-gateway-id - The ID of a local gateway.    local-gateway-virtual-interface-group-id - The ID of the virtual interface group.    local-gateway-virtual-interface-id - The ID of the virtual interface.    owner-id - The ID of the Amazon Web Services account that owns the local gateway virtual interface group.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the virtual interface groups.
        @OptionalCustomCoding<EC2ArrayCoder<_LocalGatewayVirtualInterfaceGroupIdsEncoding, String>>
        public var localGatewayVirtualInterfaceGroupIds: [String]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, localGatewayVirtualInterfaceGroupIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.localGatewayVirtualInterfaceGroupIds = localGatewayVirtualInterfaceGroupIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case localGatewayVirtualInterfaceGroupIds = "LocalGatewayVirtualInterfaceGroupId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeLocalGatewayVirtualInterfaceGroupsResult: AWSDecodableShape {
        public struct _LocalGatewayVirtualInterfaceGroupsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The virtual interface groups.
        @OptionalCustomCoding<EC2ArrayCoder<_LocalGatewayVirtualInterfaceGroupsEncoding, LocalGatewayVirtualInterfaceGroup>>
        public var localGatewayVirtualInterfaceGroups: [LocalGatewayVirtualInterfaceGroup]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(localGatewayVirtualInterfaceGroups: [LocalGatewayVirtualInterfaceGroup]? = nil, nextToken: String? = nil) {
            self.localGatewayVirtualInterfaceGroups = localGatewayVirtualInterfaceGroups
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayVirtualInterfaceGroups = "localGatewayVirtualInterfaceGroupSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeLocalGatewayVirtualInterfacesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _LocalGatewayVirtualInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    local-address - The local address.    local-bgp-asn - The Border Gateway Protocol (BGP) Autonomous System Number (ASN)  of the local gateway.    local-gateway-id - The ID of the local gateway.    local-gateway-virtual-interface-id - The ID of the virtual interface.    owner-id - The ID of the Amazon Web Services account that owns the local gateway virtual interface.    peer-address - The peer address.    peer-bgp-asn - The peer BGP ASN.    vlan - The ID of the VLAN.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the virtual interfaces.
        @OptionalCustomCoding<EC2ArrayCoder<_LocalGatewayVirtualInterfaceIdsEncoding, String>>
        public var localGatewayVirtualInterfaceIds: [String]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, localGatewayVirtualInterfaceIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.localGatewayVirtualInterfaceIds = localGatewayVirtualInterfaceIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case localGatewayVirtualInterfaceIds = "LocalGatewayVirtualInterfaceId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeLocalGatewayVirtualInterfacesResult: AWSDecodableShape {
        public struct _LocalGatewayVirtualInterfacesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the virtual interfaces.
        @OptionalCustomCoding<EC2ArrayCoder<_LocalGatewayVirtualInterfacesEncoding, LocalGatewayVirtualInterface>>
        public var localGatewayVirtualInterfaces: [LocalGatewayVirtualInterface]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(localGatewayVirtualInterfaces: [LocalGatewayVirtualInterface]? = nil, nextToken: String? = nil) {
            self.localGatewayVirtualInterfaces = localGatewayVirtualInterfaces
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayVirtualInterfaces = "localGatewayVirtualInterfaceSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeLocalGatewaysRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _LocalGatewayIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    local-gateway-id - The ID of a local gateway.    outpost-arn - The Amazon Resource Name (ARN) of the Outpost.    owner-id - The ID of the Amazon Web Services account that owns the local gateway.    state - The state of the association.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the local gateways.
        @OptionalCustomCoding<EC2ArrayCoder<_LocalGatewayIdsEncoding, String>>
        public var localGatewayIds: [String]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, localGatewayIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.localGatewayIds = localGatewayIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case localGatewayIds = "LocalGatewayId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeLocalGatewaysResult: AWSDecodableShape {
        public struct _LocalGatewaysEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the local gateways.
        @OptionalCustomCoding<EC2ArrayCoder<_LocalGatewaysEncoding, LocalGateway>>
        public var localGateways: [LocalGateway]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(localGateways: [LocalGateway]? = nil, nextToken: String? = nil) {
            self.localGateways = localGateways
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case localGateways = "localGatewaySet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeLockedSnapshotsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _SnapshotIdsEncoding: ArrayCoderProperties { public static let member = "SnapshotId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    lock-state - The state of the snapshot lock (compliance-cooloff |  governance | compliance | expired).
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request.
        /// 	To get the next page of items, make another request with the token returned in the output.
        /// 	For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?
        /// The IDs of the snapshots for which to view the lock status.
        @OptionalCustomCoding<EC2ArrayCoder<_SnapshotIdsEncoding, String>>
        public var snapshotIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, snapshotIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.snapshotIds = snapshotIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case snapshotIds = "SnapshotId"
        }
    }

    public struct DescribeLockedSnapshotsResult: AWSDecodableShape {
        public struct _SnapshotsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to include in another request to get the next page of items.  This value is null when there are no more items to return.
        public let nextToken: String?
        /// Information about the snapshots.
        @OptionalCustomCoding<EC2ArrayCoder<_SnapshotsEncoding, LockedSnapshotsInfo>>
        public var snapshots: [LockedSnapshotsInfo]?

        public init(nextToken: String? = nil, snapshots: [LockedSnapshotsInfo]? = nil) {
            self.nextToken = nextToken
            self.snapshots = snapshots
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case snapshots = "snapshotSet"
        }
    }

    public struct DescribeMacHostsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _HostIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The filters.    availability-zone - The Availability Zone of the EC2 Mac Dedicated Host.    instance-type - The instance type size that the EC2 Mac Dedicated Host is configured to support.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        ///  The IDs of the EC2 Mac Dedicated Hosts.
        @OptionalCustomCoding<EC2ArrayCoder<_HostIdsEncoding, String>>
        public var hostIds: [String]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(filters: [Filter]? = nil, hostIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.filters = filters
            self.hostIds = hostIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 500)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case hostIds = "HostId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeMacHostsResult: AWSDecodableShape {
        public struct _MacHostsEncoding: ArrayCoderProperties { public static let member = "item" }

        ///  Information about the EC2 Mac Dedicated Hosts.
        @OptionalCustomCoding<EC2ArrayCoder<_MacHostsEncoding, MacHost>>
        public var macHosts: [MacHost]?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(macHosts: [MacHost]? = nil, nextToken: String? = nil) {
            self.macHosts = macHosts
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case macHosts = "macHostSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeManagedPrefixListsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _PrefixListIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    owner-id - The ID of the prefix list owner.    prefix-list-id - The ID of the prefix list.    prefix-list-name - The name of the prefix list.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// One or more prefix list IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_PrefixListIdsEncoding, String>>
        public var prefixListIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, prefixListIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.prefixListIds = prefixListIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case prefixListIds = "PrefixListId"
        }
    }

    public struct DescribeManagedPrefixListsResult: AWSDecodableShape {
        public struct _PrefixListsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the prefix lists.
        @OptionalCustomCoding<EC2ArrayCoder<_PrefixListsEncoding, ManagedPrefixList>>
        public var prefixLists: [ManagedPrefixList]?

        public init(nextToken: String? = nil, prefixLists: [ManagedPrefixList]? = nil) {
            self.nextToken = nextToken
            self.prefixLists = prefixLists
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case prefixLists = "prefixListSet"
        }
    }

    public struct DescribeMovingAddressesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _PublicIpsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    moving-status - The status of the Elastic IP address (MovingToVpc | RestoringToClassic).
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value outside of this range, an error is returned. Default: If no value is provided, the default is 1000.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// One or more Elastic IP addresses.
        @OptionalCustomCoding<EC2ArrayCoder<_PublicIpsEncoding, String>>
        public var publicIps: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, publicIps: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.publicIps = publicIps
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "filter"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case publicIps = "publicIp"
        }
    }

    public struct DescribeMovingAddressesResult: AWSDecodableShape {
        public struct _MovingAddressStatusesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The status for each Elastic IP address.
        @OptionalCustomCoding<EC2ArrayCoder<_MovingAddressStatusesEncoding, MovingAddressStatus>>
        public var movingAddressStatuses: [MovingAddressStatus]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(movingAddressStatuses: [MovingAddressStatus]? = nil, nextToken: String? = nil) {
            self.movingAddressStatuses = movingAddressStatuses
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case movingAddressStatuses = "movingAddressStatusSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeNatGatewaysRequest: AWSEncodableShape {
        public struct _FilterEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _NatGatewayIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    nat-gateway-id - The ID of the NAT gateway.    state - The state of the NAT gateway (pending | failed | available | deleting | deleted).    subnet-id - The ID of the subnet in which the NAT gateway resides.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC in which the NAT gateway resides.
        @OptionalCustomCoding<EC2ArrayCoder<_FilterEncoding, Filter>>
        public var filter: [Filter]?
        /// The maximum number of items to return for this request.
        /// 	To get the next page of items, make another request with the token returned in the output.
        /// 	For more information, see Pagination.
        public let maxResults: Int?
        /// The IDs of the NAT gateways.
        @OptionalCustomCoding<EC2ArrayCoder<_NatGatewayIdsEncoding, String>>
        public var natGatewayIds: [String]?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filter: [Filter]? = nil, maxResults: Int? = nil, natGatewayIds: [String]? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filter = filter
            self.maxResults = maxResults
            self.natGatewayIds = natGatewayIds
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filter = "Filter"
            case maxResults = "MaxResults"
            case natGatewayIds = "NatGatewayId"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeNatGatewaysResult: AWSDecodableShape {
        public struct _NatGatewaysEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the NAT gateways.
        @OptionalCustomCoding<EC2ArrayCoder<_NatGatewaysEncoding, NatGateway>>
        public var natGateways: [NatGateway]?
        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(natGateways: [NatGateway]? = nil, nextToken: String? = nil) {
            self.natGateways = natGateways
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case natGateways = "natGatewaySet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeNetworkAclsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _NetworkAclIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    association.association-id - The ID of an association ID for the ACL.    association.network-acl-id - The ID of the network ACL involved in the association.    association.subnet-id - The ID of the subnet involved in the association.    default - Indicates whether the ACL is the default network ACL for the VPC.    entry.cidr - The IPv4 CIDR range specified in the entry.    entry.icmp.code - The ICMP code specified in the entry, if any.    entry.icmp.type - The ICMP type specified in the entry, if any.    entry.ipv6-cidr - The IPv6 CIDR range specified in the entry.    entry.port-range.from - The start of the port range specified in the entry.     entry.port-range.to - The end of the port range specified in the entry.     entry.protocol - The protocol specified in the entry (tcp | udp | icmp or a protocol number).    entry.rule-action - Allows or denies the matching traffic (allow | deny).    entry.egress - A Boolean that indicates the type of rule. Specify true
        /// 		                for egress rules, or false for ingress rules.    entry.rule-number - The number of an entry (in other words, rule) in the set of ACL entries.    network-acl-id - The ID of the network ACL.    owner-id - The ID of the Amazon Web Services account that owns the network ACL.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC for the network ACL.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request.
        /// 	To get the next page of items, make another request with the token returned in the output.
        /// 	For more information, see Pagination.
        public let maxResults: Int?
        /// The IDs of the network ACLs. Default: Describes all your network ACLs.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkAclIdsEncoding, String>>
        public var networkAclIds: [String]?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, networkAclIds: [String]? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.networkAclIds = networkAclIds
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case networkAclIds = "NetworkAclId"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeNetworkAclsResult: AWSDecodableShape {
        public struct _NetworkAclsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about one or more network ACLs.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkAclsEncoding, NetworkAcl>>
        public var networkAcls: [NetworkAcl]?
        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(networkAcls: [NetworkAcl]? = nil, nextToken: String? = nil) {
            self.networkAcls = networkAcls
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case networkAcls = "networkAclSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeNetworkInsightsAccessScopeAnalysesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _NetworkInsightsAccessScopeAnalysisIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Filters the results based on the start time. The analysis must have started on or after this time.
        public let analysisStartTimeBegin: Date?
        /// Filters the results based on the start time. The analysis must have started on or before this time.
        public let analysisStartTimeEnd: Date?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// There are no supported filters.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The IDs of the Network Access Scope analyses.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInsightsAccessScopeAnalysisIdsEncoding, String>>
        public var networkInsightsAccessScopeAnalysisIds: [String]?
        /// The ID of the Network Access Scope.
        public let networkInsightsAccessScopeId: String?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(analysisStartTimeBegin: Date? = nil, analysisStartTimeEnd: Date? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, networkInsightsAccessScopeAnalysisIds: [String]? = nil, networkInsightsAccessScopeId: String? = nil, nextToken: String? = nil) {
            self.analysisStartTimeBegin = analysisStartTimeBegin
            self.analysisStartTimeEnd = analysisStartTimeEnd
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.networkInsightsAccessScopeAnalysisIds = networkInsightsAccessScopeAnalysisIds
            self.networkInsightsAccessScopeId = networkInsightsAccessScopeId
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case analysisStartTimeBegin = "AnalysisStartTimeBegin"
            case analysisStartTimeEnd = "AnalysisStartTimeEnd"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case networkInsightsAccessScopeAnalysisIds = "NetworkInsightsAccessScopeAnalysisId"
            case networkInsightsAccessScopeId = "NetworkInsightsAccessScopeId"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeNetworkInsightsAccessScopeAnalysesResult: AWSDecodableShape {
        public struct _NetworkInsightsAccessScopeAnalysesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Network Access Scope analyses.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInsightsAccessScopeAnalysesEncoding, NetworkInsightsAccessScopeAnalysis>>
        public var networkInsightsAccessScopeAnalyses: [NetworkInsightsAccessScopeAnalysis]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(networkInsightsAccessScopeAnalyses: [NetworkInsightsAccessScopeAnalysis]? = nil, nextToken: String? = nil) {
            self.networkInsightsAccessScopeAnalyses = networkInsightsAccessScopeAnalyses
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case networkInsightsAccessScopeAnalyses = "networkInsightsAccessScopeAnalysisSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeNetworkInsightsAccessScopesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _NetworkInsightsAccessScopeIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// There are no supported filters.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The IDs of the Network Access Scopes.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInsightsAccessScopeIdsEncoding, String>>
        public var networkInsightsAccessScopeIds: [String]?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, networkInsightsAccessScopeIds: [String]? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.networkInsightsAccessScopeIds = networkInsightsAccessScopeIds
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case networkInsightsAccessScopeIds = "NetworkInsightsAccessScopeId"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeNetworkInsightsAccessScopesResult: AWSDecodableShape {
        public struct _NetworkInsightsAccessScopesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Network Access Scopes.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInsightsAccessScopesEncoding, NetworkInsightsAccessScope>>
        public var networkInsightsAccessScopes: [NetworkInsightsAccessScope]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(networkInsightsAccessScopes: [NetworkInsightsAccessScope]? = nil, nextToken: String? = nil) {
            self.networkInsightsAccessScopes = networkInsightsAccessScopes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case networkInsightsAccessScopes = "networkInsightsAccessScopeSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeNetworkInsightsAnalysesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _NetworkInsightsAnalysisIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The time when the network insights analyses ended.
        public let analysisEndTime: Date?
        /// The time when the network insights analyses started.
        public let analysisStartTime: Date?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters. The following are the possible values:   path-found - A Boolean value that indicates whether a feasible path is found.   status - The status of the analysis (running | succeeded | failed).
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The ID of the network insights analyses. You must specify either analysis IDs or a path ID.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInsightsAnalysisIdsEncoding, String>>
        public var networkInsightsAnalysisIds: [String]?
        /// The ID of the path. You must specify either a path ID or analysis IDs.
        public let networkInsightsPathId: String?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(analysisEndTime: Date? = nil, analysisStartTime: Date? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, networkInsightsAnalysisIds: [String]? = nil, networkInsightsPathId: String? = nil, nextToken: String? = nil) {
            self.analysisEndTime = analysisEndTime
            self.analysisStartTime = analysisStartTime
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.networkInsightsAnalysisIds = networkInsightsAnalysisIds
            self.networkInsightsPathId = networkInsightsPathId
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case analysisEndTime = "AnalysisEndTime"
            case analysisStartTime = "AnalysisStartTime"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case networkInsightsAnalysisIds = "NetworkInsightsAnalysisId"
            case networkInsightsPathId = "NetworkInsightsPathId"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeNetworkInsightsAnalysesResult: AWSDecodableShape {
        public struct _NetworkInsightsAnalysesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the network insights analyses.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInsightsAnalysesEncoding, NetworkInsightsAnalysis>>
        public var networkInsightsAnalyses: [NetworkInsightsAnalysis]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(networkInsightsAnalyses: [NetworkInsightsAnalysis]? = nil, nextToken: String? = nil) {
            self.networkInsightsAnalyses = networkInsightsAnalyses
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case networkInsightsAnalyses = "networkInsightsAnalysisSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeNetworkInsightsPathsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _NetworkInsightsPathIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters. The following are the possible values:   destination - The ID of the resource.   filter-at-source.source-address - The source IPv4 address at the source.   filter-at-source.source-port-range - The source port range at the source.   filter-at-source.destination-address - The destination IPv4 address at the source.   filter-at-source.destination-port-range - The destination port range at the source.   filter-at-destination.source-address - The source IPv4 address at the destination.   filter-at-destination.source-port-range - The source port range at the destination.   filter-at-destination.destination-address - The destination IPv4 address at the destination.   filter-at-destination.destination-port-range - The destination port range at the destination.   protocol - The protocol.   source - The ID of the resource.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The IDs of the paths.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInsightsPathIdsEncoding, String>>
        public var networkInsightsPathIds: [String]?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, networkInsightsPathIds: [String]? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.networkInsightsPathIds = networkInsightsPathIds
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case networkInsightsPathIds = "NetworkInsightsPathId"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeNetworkInsightsPathsResult: AWSDecodableShape {
        public struct _NetworkInsightsPathsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the paths.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInsightsPathsEncoding, NetworkInsightsPath>>
        public var networkInsightsPaths: [NetworkInsightsPath]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(networkInsightsPaths: [NetworkInsightsPath]? = nil, nextToken: String? = nil) {
            self.networkInsightsPaths = networkInsightsPaths
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case networkInsightsPaths = "networkInsightsPathSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeNetworkInterfaceAttributeRequest: AWSEncodableShape {
        /// The attribute of the network interface. This parameter is required.
        public let attribute: NetworkInterfaceAttribute?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the network interface.
        public let networkInterfaceId: String?

        public init(attribute: NetworkInterfaceAttribute? = nil, dryRun: Bool? = nil, networkInterfaceId: String? = nil) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "attribute"
            case dryRun = "dryRun"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct DescribeNetworkInterfaceAttributeResult: AWSDecodableShape {
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The attachment (if any) of the network interface.
        public let attachment: NetworkInterfaceAttachment?
        /// The description of the network interface.
        public let description: AttributeValue?
        /// The security groups associated with the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_GroupsEncoding, GroupIdentifier>>
        public var groups: [GroupIdentifier]?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// Indicates whether source/destination checking is enabled.
        public let sourceDestCheck: AttributeBooleanValue?

        public init(attachment: NetworkInterfaceAttachment? = nil, description: AttributeValue? = nil, groups: [GroupIdentifier]? = nil, networkInterfaceId: String? = nil, sourceDestCheck: AttributeBooleanValue? = nil) {
            self.attachment = attachment
            self.description = description
            self.groups = groups
            self.networkInterfaceId = networkInterfaceId
            self.sourceDestCheck = sourceDestCheck
        }

        private enum CodingKeys: String, CodingKey {
            case attachment = "attachment"
            case description = "description"
            case groups = "groupSet"
            case networkInterfaceId = "networkInterfaceId"
            case sourceDestCheck = "sourceDestCheck"
        }
    }

    public struct DescribeNetworkInterfacePermissionsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// One or more filters.    network-interface-permission.network-interface-permission-id - The ID of the
        /// 				permission.    network-interface-permission.network-interface-id - The ID of
        /// 					the network interface.    network-interface-permission.aws-account-id - The Amazon Web Services account ID.    network-interface-permission.aws-service - The Amazon Web Service.    network-interface-permission.permission - The type of
        /// 					permission (INSTANCE-ATTACH |
        /// 					EIP-ASSOCIATE).
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request. To get the next page of items,
        /// 			make another request with the token returned in the output. If this parameter is not specified,
        /// 			up to 50 results are returned by default. For more information, see
        /// 			Pagination.
        public let maxResults: Int?
        /// The network interface permission IDs.
        @OptionalCustomCoding<EC2StandardArrayCoder<String>>
        public var networkInterfacePermissionIds: [String]?
        /// The token returned from a previous paginated request.
        /// 		    Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(filters: [Filter]? = nil, maxResults: Int? = nil, networkInterfacePermissionIds: [String]? = nil, nextToken: String? = nil) {
            self.filters = filters
            self.maxResults = maxResults
            self.networkInterfacePermissionIds = networkInterfacePermissionIds
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 255)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case maxResults = "MaxResults"
            case networkInterfacePermissionIds = "NetworkInterfacePermissionId"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeNetworkInterfacePermissionsResult: AWSDecodableShape {
        public struct _NetworkInterfacePermissionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The network interface permissions.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInterfacePermissionsEncoding, NetworkInterfacePermission>>
        public var networkInterfacePermissions: [NetworkInterfacePermission]?
        /// The token to include in another request to get the next page of items.
        /// 		  This value is null when there are no more items to return.
        public let nextToken: String?

        public init(networkInterfacePermissions: [NetworkInterfacePermission]? = nil, nextToken: String? = nil) {
            self.networkInterfacePermissions = networkInterfacePermissions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfacePermissions = "networkInterfacePermissions"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeNetworkInterfacesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _NetworkInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    association.allocation-id - The allocation ID returned when you
        /// 		                allocated the Elastic IP address (IPv4) for your network interface.    association.association-id - The association ID returned when the
        /// 		                network interface was associated with an IPv4 address.    addresses.association.owner-id - The owner ID of the addresses associated with the network interface.    addresses.association.public-ip - The association ID returned when
        /// 		                the network interface was associated with the Elastic IP address
        /// 		                (IPv4).    addresses.primary - Whether the private IPv4 address is the primary IP address associated with the network interface.     addresses.private-ip-address - The private IPv4 addresses
        /// 		                associated with the network interface.    association.ip-owner-id - The owner of the Elastic IP address (IPv4) associated with the network interface.    association.public-ip - The address of the Elastic IP address (IPv4) bound to the network interface.    association.public-dns-name - The public DNS name for the network interface (IPv4).    attachment.attach-time - The time that the network interface was attached to an instance.    attachment.attachment-id - The ID of the interface attachment.    attachment.delete-on-termination - Indicates whether the attachment is deleted when an instance is terminated.    attachment.device-index - The device index to which the network interface is attached.    attachment.instance-id - The ID of the instance to which the network interface is attached.    attachment.instance-owner-id - The owner ID of the instance to which the network interface is attached.    attachment.status - The status of the attachment (attaching | attached | detaching | detached).    availability-zone - The Availability Zone of the network interface.    description - The description of the network interface.    group-id - The ID of a security group associated with the network interface.    ipv6-addresses.ipv6-address - An IPv6 address associated with the network interface.    interface-type - The type of network interface (api_gateway_managed |
        /// 		               aws_codestar_connections_managed | branch |
        /// 		               ec2_instance_connect_endpoint | efa | efs |
        /// 		               gateway_load_balancer | gateway_load_balancer_endpoint |
        /// 		               global_accelerator_managed |
        /// 		               interface | iot_rules_managed |
        /// 		               lambda | load_balancer |
        /// 		               nat_gateway | network_load_balancer |
        /// 		               quicksight |
        /// 		               transit_gateway | trunk |
        /// 		               vpc_endpoint).    mac-address - The MAC address of the network interface.    network-interface-id - The ID of the network interface.    owner-id - The Amazon Web Services account ID of the network interface owner.    private-dns-name - The private DNS name of the network interface (IPv4).    private-ip-address - The private IPv4 address or addresses of the network interface.    requester-id - The alias or Amazon Web Services account ID of the principal or service that created the network interface.    requester-managed - Indicates whether the network interface is being managed by an Amazon Web Service
        /// 		               (for example, Amazon Web Services Management Console, Auto Scaling, and so on).    source-dest-check - Indicates whether the network interface performs source/destination checking.
        /// 		            A value of true means checking is enabled, and false means checking is disabled.
        /// 		            The value must be false for the network interface to perform network address translation (NAT) in your VPC.     status - The status of the network interface. If the network interface is not attached to an instance, the status is available;
        /// 		            if a network interface is attached to an instance the status is in-use.    subnet-id - The ID of the subnet for the network interface.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC for the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request. To get the next page of items,
        /// 		    make another request with the token returned in the output. You cannot specify this
        /// 		    parameter and the network interface IDs parameter in the same request. For more information,
        /// 		    see Pagination.
        public let maxResults: Int?
        /// The network interface IDs. Default: Describes all your network interfaces.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInterfaceIdsEncoding, String>>
        public var networkInterfaceIds: [String]?
        /// The token returned from a previous paginated request.
        /// 		    Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, networkInterfaceIds: [String]? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.networkInterfaceIds = networkInterfaceIds
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "filter"
            case maxResults = "MaxResults"
            case networkInterfaceIds = "NetworkInterfaceId"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeNetworkInterfacesResult: AWSDecodableShape {
        public struct _NetworkInterfacesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about one or more network interfaces.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInterfacesEncoding, NetworkInterface>>
        public var networkInterfaces: [NetworkInterface]?
        /// The token to include in another request to get the next page of items.
        /// 		    This value is null when there are no more items to return.
        public let nextToken: String?

        public init(networkInterfaces: [NetworkInterface]? = nil, nextToken: String? = nil) {
            self.networkInterfaces = networkInterfaces
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaces = "networkInterfaceSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribePlacementGroupsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _GroupIdsEncoding: ArrayCoderProperties { public static let member = "GroupId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    group-name - The name of the placement group.    group-arn - The Amazon Resource Name (ARN) of the placement group.    spread-level - The spread level for the placement group (host | rack).     state - The state of the placement group (pending | available | deleting | deleted).    strategy - The strategy of the placement group (cluster | spread | partition).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the placement groups.
        @OptionalCustomCoding<EC2ArrayCoder<_GroupIdsEncoding, String>>
        public var groupIds: [String]?
        /// The names of the placement groups. Default: Describes all your placement groups, or only those otherwise specified.
        @OptionalCustomCoding<EC2StandardArrayCoder<String>>
        public var groupNames: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, groupIds: [String]? = nil, groupNames: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.groupIds = groupIds
            self.groupNames = groupNames
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case groupIds = "GroupId"
            case groupNames = "groupName"
        }
    }

    public struct DescribePlacementGroupsResult: AWSDecodableShape {
        public struct _PlacementGroupsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the placement groups.
        @OptionalCustomCoding<EC2ArrayCoder<_PlacementGroupsEncoding, PlacementGroup>>
        public var placementGroups: [PlacementGroup]?

        public init(placementGroups: [PlacementGroup]? = nil) {
            self.placementGroups = placementGroups
        }

        private enum CodingKeys: String, CodingKey {
            case placementGroups = "placementGroupSet"
        }
    }

    public struct DescribePrefixListsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _PrefixListIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    prefix-list-id: The ID of a prefix list.    prefix-list-name: The name of a prefix list.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// One or more prefix list IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_PrefixListIdsEncoding, String>>
        public var prefixListIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, prefixListIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.prefixListIds = prefixListIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case prefixListIds = "PrefixListId"
        }
    }

    public struct DescribePrefixListsResult: AWSDecodableShape {
        public struct _PrefixListsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// All available prefix lists.
        @OptionalCustomCoding<EC2ArrayCoder<_PrefixListsEncoding, PrefixList>>
        public var prefixLists: [PrefixList]?

        public init(nextToken: String? = nil, prefixLists: [PrefixList]? = nil) {
            self.nextToken = nextToken
            self.prefixLists = prefixLists
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case prefixLists = "prefixListSet"
        }
    }

    public struct DescribePrincipalIdFormatRequest: AWSEncodableShape {
        public struct _ResourcesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token to request the next page of results.
        public let nextToken: String?
        /// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway
        @OptionalCustomCoding<EC2ArrayCoder<_ResourcesEncoding, String>>
        public var resources: [String]?

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil, resources: [String]? = nil) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.resources = resources
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case resources = "Resource"
        }
    }

    public struct DescribePrincipalIdFormatResult: AWSDecodableShape {
        public struct _PrincipalsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the ID format settings for the ARN.
        @OptionalCustomCoding<EC2ArrayCoder<_PrincipalsEncoding, PrincipalIdFormat>>
        public var principals: [PrincipalIdFormat]?

        public init(nextToken: String? = nil, principals: [PrincipalIdFormat]? = nil) {
            self.nextToken = nextToken
            self.principals = principals
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case principals = "principalSet"
        }
    }

    public struct DescribePublicIpv4PoolsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _PoolIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// One or more filters.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the address pools.
        @OptionalCustomCoding<EC2ArrayCoder<_PoolIdsEncoding, String>>
        public var poolIds: [String]?

        public init(filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, poolIds: [String]? = nil) {
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.poolIds = poolIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 10)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case poolIds = "PoolId"
        }
    }

    public struct DescribePublicIpv4PoolsResult: AWSDecodableShape {
        public struct _PublicIpv4PoolsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the address pools.
        @OptionalCustomCoding<EC2ArrayCoder<_PublicIpv4PoolsEncoding, PublicIpv4Pool>>
        public var publicIpv4Pools: [PublicIpv4Pool]?

        public init(nextToken: String? = nil, publicIpv4Pools: [PublicIpv4Pool]? = nil) {
            self.nextToken = nextToken
            self.publicIpv4Pools = publicIpv4Pools
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case publicIpv4Pools = "publicIpv4PoolSet"
        }
    }

    public struct DescribeRegionsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _RegionNamesEncoding: ArrayCoderProperties { public static let member = "RegionName" }

        /// Indicates whether to display all Regions, including Regions that are disabled for your account.
        public let allRegions: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    endpoint - The endpoint of the Region (for example, ec2.us-east-1.amazonaws.com).    opt-in-status - The opt-in status of the Region (opt-in-not-required | opted-in |  not-opted-in).    region-name - The name of the Region (for example, us-east-1).
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The names of the Regions. You can specify any Regions, whether they are enabled and disabled for your account.
        @OptionalCustomCoding<EC2ArrayCoder<_RegionNamesEncoding, String>>
        public var regionNames: [String]?

        public init(allRegions: Bool? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, regionNames: [String]? = nil) {
            self.allRegions = allRegions
            self.dryRun = dryRun
            self.filters = filters
            self.regionNames = regionNames
        }

        private enum CodingKeys: String, CodingKey {
            case allRegions = "AllRegions"
            case dryRun = "dryRun"
            case filters = "Filter"
            case regionNames = "RegionName"
        }
    }

    public struct DescribeRegionsResult: AWSDecodableShape {
        public struct _RegionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Regions.
        @OptionalCustomCoding<EC2ArrayCoder<_RegionsEncoding, Region>>
        public var regions: [Region]?

        public init(regions: [Region]? = nil) {
            self.regions = regions
        }

        private enum CodingKeys: String, CodingKey {
            case regions = "regionInfo"
        }
    }

    public struct DescribeReplaceRootVolumeTasksRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _ReplaceRootVolumeTaskIdsEncoding: ArrayCoderProperties { public static let member = "ReplaceRootVolumeTaskId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Filter to use:    instance-id - The ID of the instance for which the root volume replacement task was created.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request.
        /// 	To get the next page of items, make another request with the token returned in the output.
        /// 	For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?
        /// The ID of the root volume replacement task to view.
        @OptionalCustomCoding<EC2ArrayCoder<_ReplaceRootVolumeTaskIdsEncoding, String>>
        public var replaceRootVolumeTaskIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, replaceRootVolumeTaskIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.replaceRootVolumeTaskIds = replaceRootVolumeTaskIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 50)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case replaceRootVolumeTaskIds = "ReplaceRootVolumeTaskId"
        }
    }

    public struct DescribeReplaceRootVolumeTasksResult: AWSDecodableShape {
        public struct _ReplaceRootVolumeTasksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to include in another request to get the next page of items.  This value is null when there are no more items to return.
        public let nextToken: String?
        /// Information about the root volume replacement task.
        @OptionalCustomCoding<EC2ArrayCoder<_ReplaceRootVolumeTasksEncoding, ReplaceRootVolumeTask>>
        public var replaceRootVolumeTasks: [ReplaceRootVolumeTask]?

        public init(nextToken: String? = nil, replaceRootVolumeTasks: [ReplaceRootVolumeTask]? = nil) {
            self.nextToken = nextToken
            self.replaceRootVolumeTasks = replaceRootVolumeTasks
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case replaceRootVolumeTasks = "replaceRootVolumeTaskSet"
        }
    }

    public struct DescribeReservedInstancesListingsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// One or more filters.    reserved-instances-id - The ID of the Reserved Instances.    reserved-instances-listing-id - The ID of the Reserved Instances listing.    status - The status of the Reserved Instance listing (pending | active | cancelled | closed).    status-message - The reason for the status.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// One or more Reserved Instance IDs.
        public let reservedInstancesId: String?
        /// One or more Reserved Instance listing IDs.
        public let reservedInstancesListingId: String?

        public init(filters: [Filter]? = nil, reservedInstancesId: String? = nil, reservedInstancesListingId: String? = nil) {
            self.filters = filters
            self.reservedInstancesId = reservedInstancesId
            self.reservedInstancesListingId = reservedInstancesListingId
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case reservedInstancesId = "reservedInstancesId"
            case reservedInstancesListingId = "reservedInstancesListingId"
        }
    }

    public struct DescribeReservedInstancesListingsResult: AWSDecodableShape {
        public struct _ReservedInstancesListingsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Reserved Instance listing.
        @OptionalCustomCoding<EC2ArrayCoder<_ReservedInstancesListingsEncoding, ReservedInstancesListing>>
        public var reservedInstancesListings: [ReservedInstancesListing]?

        public init(reservedInstancesListings: [ReservedInstancesListing]? = nil) {
            self.reservedInstancesListings = reservedInstancesListings
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesListings = "reservedInstancesListingsSet"
        }
    }

    public struct DescribeReservedInstancesModificationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _ReservedInstancesModificationIdsEncoding: ArrayCoderProperties { public static let member = "ReservedInstancesModificationId" }

        /// One or more filters.    client-token - The idempotency token for the modification request.    create-date - The time when the modification request was created.    effective-date - The time when the modification becomes effective.    modification-result.reserved-instances-id - The ID for the Reserved Instances created as part of the modification request. This ID is only available when the status of the modification is fulfilled.    modification-result.target-configuration.availability-zone - The Availability Zone for the new Reserved Instances.    modification-result.target-configuration.instance-count  - The number of new Reserved Instances.    modification-result.target-configuration.instance-type - The instance type of the new Reserved Instances.    reserved-instances-id - The ID of the Reserved Instances modified.    reserved-instances-modification-id - The ID of the modification request.    status - The status of the Reserved Instances modification request (processing | fulfilled | failed).    status-message - The reason for the status.    update-date - The time when the modification request was last updated.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// IDs for the submitted modification request.
        @OptionalCustomCoding<EC2ArrayCoder<_ReservedInstancesModificationIdsEncoding, String>>
        public var reservedInstancesModificationIds: [String]?

        public init(filters: [Filter]? = nil, nextToken: String? = nil, reservedInstancesModificationIds: [String]? = nil) {
            self.filters = filters
            self.nextToken = nextToken
            self.reservedInstancesModificationIds = reservedInstancesModificationIds
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case nextToken = "nextToken"
            case reservedInstancesModificationIds = "ReservedInstancesModificationId"
        }
    }

    public struct DescribeReservedInstancesModificationsResult: AWSDecodableShape {
        public struct _ReservedInstancesModificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when
        /// 			there are no more results to return.
        public let nextToken: String?
        /// The Reserved Instance modification information.
        @OptionalCustomCoding<EC2ArrayCoder<_ReservedInstancesModificationsEncoding, ReservedInstancesModification>>
        public var reservedInstancesModifications: [ReservedInstancesModification]?

        public init(nextToken: String? = nil, reservedInstancesModifications: [ReservedInstancesModification]? = nil) {
            self.nextToken = nextToken
            self.reservedInstancesModifications = reservedInstancesModifications
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case reservedInstancesModifications = "reservedInstancesModificationsSet"
        }
    }

    public struct DescribeReservedInstancesOfferingsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The Availability Zone in which the Reserved Instance can be used.
        public let availabilityZone: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    availability-zone - The Availability Zone where the Reserved Instance can be used.    duration - The duration of the Reserved Instance (for example, one year or three years), in seconds (31536000 | 94608000).    fixed-price - The purchase price of the Reserved Instance (for example, 9800.0).    instance-type - The instance type that is covered by the reservation.    marketplace - Set to true to show only Reserved Instance Marketplace offerings. When this filter is not used, which is the default behavior, all offerings from both Amazon Web Services and the Reserved Instance Marketplace are listed.    product-description - The Reserved Instance product platform description (Linux/UNIX | Linux with SQL Server Standard | Linux with SQL Server Web | Linux with SQL Server Enterprise | SUSE Linux |  Red Hat Enterprise Linux | Red Hat Enterprise Linux with HA |  Windows | Windows with SQL Server Standard | Windows with SQL Server Web | Windows with SQL Server Enterprise).    reserved-instances-offering-id - The Reserved Instances offering ID.    scope - The scope of the Reserved Instance (Availability Zone or Region).    usage-price - The usage price of the Reserved Instance, per hour (for example, 0.84).
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// Include Reserved Instance Marketplace offerings in the response.
        public let includeMarketplace: Bool?
        /// The tenancy of the instances covered by the reservation. A Reserved Instance with a tenancy of dedicated is applied to instances that run in a VPC on single-tenant hardware (i.e., Dedicated Instances).  Important: The host value cannot be used with this parameter. Use the default or dedicated values only. Default: default
        public let instanceTenancy: Tenancy?
        /// The instance type that the reservation will cover (for example, m1.small). For more information, see  Instance types in the Amazon EC2 User Guide.
        public let instanceType: InstanceType?
        /// The maximum duration (in seconds) to filter when searching for offerings. Default: 94608000 (3 years)
        public let maxDuration: Int64?
        /// The maximum number of instances to filter when searching for offerings. Default: 20
        public let maxInstanceCount: Int?
        /// The maximum number of results to return for the request in a single page. The remaining
        /// 			results of the initial request can be seen by sending another request with the returned
        /// 				NextToken value. The maximum is 100. Default: 100
        public let maxResults: Int?
        /// The minimum duration (in seconds) to filter when searching for offerings. Default: 2592000 (1 month)
        public let minDuration: Int64?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// The offering class of the Reserved Instance. Can be standard or convertible.
        public let offeringClass: OfferingClassType?
        /// The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API
        /// 			version, you only have access to the Medium Utilization Reserved Instance
        /// 			offering type.
        public let offeringType: OfferingTypeValues?
        /// The Reserved Instance product platform description. Instances that include (Amazon VPC) in the description are for use with Amazon VPC.
        public let productDescription: RIProductDescription?
        /// One or more Reserved Instances offering IDs.
        @OptionalCustomCoding<EC2StandardArrayCoder<String>>
        public var reservedInstancesOfferingIds: [String]?

        public init(availabilityZone: String? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, includeMarketplace: Bool? = nil, instanceTenancy: Tenancy? = nil, instanceType: InstanceType? = nil, maxDuration: Int64? = nil, maxInstanceCount: Int? = nil, maxResults: Int? = nil, minDuration: Int64? = nil, nextToken: String? = nil, offeringClass: OfferingClassType? = nil, offeringType: OfferingTypeValues? = nil, productDescription: RIProductDescription? = nil, reservedInstancesOfferingIds: [String]? = nil) {
            self.availabilityZone = availabilityZone
            self.dryRun = dryRun
            self.filters = filters
            self.includeMarketplace = includeMarketplace
            self.instanceTenancy = instanceTenancy
            self.instanceType = instanceType
            self.maxDuration = maxDuration
            self.maxInstanceCount = maxInstanceCount
            self.maxResults = maxResults
            self.minDuration = minDuration
            self.nextToken = nextToken
            self.offeringClass = offeringClass
            self.offeringType = offeringType
            self.productDescription = productDescription
            self.reservedInstancesOfferingIds = reservedInstancesOfferingIds
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case dryRun = "dryRun"
            case filters = "Filter"
            case includeMarketplace = "IncludeMarketplace"
            case instanceTenancy = "instanceTenancy"
            case instanceType = "InstanceType"
            case maxDuration = "MaxDuration"
            case maxInstanceCount = "MaxInstanceCount"
            case maxResults = "maxResults"
            case minDuration = "MinDuration"
            case nextToken = "nextToken"
            case offeringClass = "OfferingClass"
            case offeringType = "offeringType"
            case productDescription = "ProductDescription"
            case reservedInstancesOfferingIds = "ReservedInstancesOfferingId"
        }
    }

    public struct DescribeReservedInstancesOfferingsResult: AWSDecodableShape {
        public struct _ReservedInstancesOfferingsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when
        /// 			there are no more results to return.
        public let nextToken: String?
        /// A list of Reserved Instances offerings.
        @OptionalCustomCoding<EC2ArrayCoder<_ReservedInstancesOfferingsEncoding, ReservedInstancesOffering>>
        public var reservedInstancesOfferings: [ReservedInstancesOffering]?

        public init(nextToken: String? = nil, reservedInstancesOfferings: [ReservedInstancesOffering]? = nil) {
            self.nextToken = nextToken
            self.reservedInstancesOfferings = reservedInstancesOfferings
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case reservedInstancesOfferings = "reservedInstancesOfferingsSet"
        }
    }

    public struct DescribeReservedInstancesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _ReservedInstancesIdsEncoding: ArrayCoderProperties { public static let member = "ReservedInstancesId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    availability-zone - The Availability Zone where the Reserved Instance can be used.    duration - The duration of the Reserved Instance (one year or three years), in seconds (31536000 | 94608000).    end - The time when the Reserved Instance expires (for example, 2015-08-07T11:54:42.000Z).    fixed-price - The purchase price of the Reserved Instance (for example, 9800.0).    instance-type - The instance type that is covered by the reservation.    scope - The scope of the Reserved Instance (Region or Availability Zone).    product-description - The Reserved Instance product platform description (Linux/UNIX | Linux with SQL Server Standard | Linux with SQL Server Web | Linux with SQL Server Enterprise | SUSE Linux |  Red Hat Enterprise Linux | Red Hat Enterprise Linux with HA |  Windows | Windows with SQL Server Standard | Windows with SQL Server Web | Windows with SQL Server Enterprise).    reserved-instances-id - The ID of the Reserved Instance.    start - The time at which the Reserved Instance purchase request was placed (for example, 2014-08-07T11:54:42.000Z).    state - The state of the Reserved Instance (payment-pending | active | payment-failed | retired).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    usage-price - The usage price of the Reserved Instance, per hour (for example, 0.84).
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// Describes whether the Reserved Instance is Standard or Convertible.
        public let offeringClass: OfferingClassType?
        /// The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API
        /// 			version, you only have access to the Medium Utilization Reserved Instance
        /// 			offering type.
        public let offeringType: OfferingTypeValues?
        /// One or more Reserved Instance IDs. Default: Describes all your Reserved Instances, or only those otherwise specified.
        @OptionalCustomCoding<EC2ArrayCoder<_ReservedInstancesIdsEncoding, String>>
        public var reservedInstancesIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, offeringClass: OfferingClassType? = nil, offeringType: OfferingTypeValues? = nil, reservedInstancesIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.offeringClass = offeringClass
            self.offeringType = offeringType
            self.reservedInstancesIds = reservedInstancesIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case offeringClass = "OfferingClass"
            case offeringType = "offeringType"
            case reservedInstancesIds = "ReservedInstancesId"
        }
    }

    public struct DescribeReservedInstancesResult: AWSDecodableShape {
        public struct _ReservedInstancesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A list of Reserved Instances.
        @OptionalCustomCoding<EC2ArrayCoder<_ReservedInstancesEncoding, ReservedInstances>>
        public var reservedInstances: [ReservedInstances]?

        public init(reservedInstances: [ReservedInstances]? = nil) {
            self.reservedInstances = reservedInstances
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstances = "reservedInstancesSet"
        }
    }

    public struct DescribeRouteTablesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _RouteTableIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    association.gateway-id - The ID of the gateway involved in the
        /// 		                association.    association.route-table-association-id - The ID of an association ID for the route table.    association.route-table-id - The ID of the route table involved in the association.    association.subnet-id - The ID of the subnet involved in the association.    association.main - Indicates whether the route table is the main route table for the VPC (true | false). Route tables that do not have an association ID are not returned in the response.    owner-id - The ID of the Amazon Web Services account that owns the route table.    route-table-id - The ID of the route table.    route.destination-cidr-block - The IPv4 CIDR range specified in a route in the table.    route.destination-ipv6-cidr-block - The IPv6 CIDR range specified in a route in the route table.    route.destination-prefix-list-id - The ID (prefix) of the Amazon Web Service specified in a route in the table.    route.egress-only-internet-gateway-id - The ID of an egress-only Internet gateway specified in a route in the route table.    route.gateway-id - The ID of a gateway specified in a route in the table.    route.instance-id - The ID of an instance specified in a route in the table.    route.nat-gateway-id - The ID of a NAT gateway.    route.transit-gateway-id - The ID of a transit gateway.    route.origin - Describes how the route was created.  CreateRouteTable indicates that the route was automatically created when the route table was created; CreateRoute indicates that the route was manually added to the route table; EnableVgwRoutePropagation indicates that the route was propagated by route propagation.    route.state - The state of a route in the route table (active | blackhole). The blackhole state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, the specified NAT instance has been terminated, and so on).    route.vpc-peering-connection-id - The ID of a VPC peering
        /// 		                connection specified in a route in the table.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC for the route table.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request.
        /// 	To get the next page of items, make another request with the token returned in the output.
        /// 	For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?
        /// The IDs of the route tables. Default: Describes all your route tables.
        @OptionalCustomCoding<EC2ArrayCoder<_RouteTableIdsEncoding, String>>
        public var routeTableIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, routeTableIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.routeTableIds = routeTableIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case routeTableIds = "RouteTableId"
        }
    }

    public struct DescribeRouteTablesResult: AWSDecodableShape {
        public struct _RouteTablesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?
        /// Information about one or more route tables.
        @OptionalCustomCoding<EC2ArrayCoder<_RouteTablesEncoding, RouteTable>>
        public var routeTables: [RouteTable]?

        public init(nextToken: String? = nil, routeTables: [RouteTable]? = nil) {
            self.nextToken = nextToken
            self.routeTables = routeTables
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case routeTables = "routeTableSet"
        }
    }

    public struct DescribeScheduledInstanceAvailabilityRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    availability-zone - The Availability Zone (for example, us-west-2a).    instance-type - The instance type (for example, c4.large).    platform - The platform (Linux/UNIX or Windows).
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The time period for the first schedule to start.
        public let firstSlotStartTimeRange: SlotDateTimeRangeRequest?
        /// The maximum number of results to return in a single call.  This value can be between 5 and 300. The default value is 300. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The maximum available duration, in hours. This value must be greater than MinSlotDurationInHours and less than 1,720.
        public let maxSlotDurationInHours: Int?
        /// The minimum available duration, in hours. The minimum required duration is 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.
        public let minSlotDurationInHours: Int?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The schedule recurrence.
        public let recurrence: ScheduledInstanceRecurrenceRequest?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, firstSlotStartTimeRange: SlotDateTimeRangeRequest? = nil, maxResults: Int? = nil, maxSlotDurationInHours: Int? = nil, minSlotDurationInHours: Int? = nil, nextToken: String? = nil, recurrence: ScheduledInstanceRecurrenceRequest? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.firstSlotStartTimeRange = firstSlotStartTimeRange
            self.maxResults = maxResults
            self.maxSlotDurationInHours = maxSlotDurationInHours
            self.minSlotDurationInHours = minSlotDurationInHours
            self.nextToken = nextToken
            self.recurrence = recurrence
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 300)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case firstSlotStartTimeRange = "FirstSlotStartTimeRange"
            case maxResults = "MaxResults"
            case maxSlotDurationInHours = "MaxSlotDurationInHours"
            case minSlotDurationInHours = "MinSlotDurationInHours"
            case nextToken = "NextToken"
            case recurrence = "Recurrence"
        }
    }

    public struct DescribeScheduledInstanceAvailabilityResult: AWSDecodableShape {
        public struct _ScheduledInstanceAvailabilitySetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the available Scheduled Instances.
        @OptionalCustomCoding<EC2ArrayCoder<_ScheduledInstanceAvailabilitySetEncoding, ScheduledInstanceAvailability>>
        public var scheduledInstanceAvailabilitySet: [ScheduledInstanceAvailability]?

        public init(nextToken: String? = nil, scheduledInstanceAvailabilitySet: [ScheduledInstanceAvailability]? = nil) {
            self.nextToken = nextToken
            self.scheduledInstanceAvailabilitySet = scheduledInstanceAvailabilitySet
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case scheduledInstanceAvailabilitySet = "scheduledInstanceAvailabilitySet"
        }
    }

    public struct DescribeScheduledInstancesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _ScheduledInstanceIdsEncoding: ArrayCoderProperties { public static let member = "ScheduledInstanceId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    availability-zone - The Availability Zone (for example, us-west-2a).    instance-type - The instance type (for example, c4.large).    platform - The platform (Linux/UNIX or Windows).
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return in a single call.  This value can be between 5 and 300. The default value is 100. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The Scheduled Instance IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_ScheduledInstanceIdsEncoding, String>>
        public var scheduledInstanceIds: [String]?
        /// The time period for the first schedule to start.
        public let slotStartTimeRange: SlotStartTimeRangeRequest?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, scheduledInstanceIds: [String]? = nil, slotStartTimeRange: SlotStartTimeRangeRequest? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.scheduledInstanceIds = scheduledInstanceIds
            self.slotStartTimeRange = slotStartTimeRange
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case scheduledInstanceIds = "ScheduledInstanceId"
            case slotStartTimeRange = "SlotStartTimeRange"
        }
    }

    public struct DescribeScheduledInstancesResult: AWSDecodableShape {
        public struct _ScheduledInstanceSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the Scheduled Instances.
        @OptionalCustomCoding<EC2ArrayCoder<_ScheduledInstanceSetEncoding, ScheduledInstance>>
        public var scheduledInstanceSet: [ScheduledInstance]?

        public init(nextToken: String? = nil, scheduledInstanceSet: [ScheduledInstance]? = nil) {
            self.nextToken = nextToken
            self.scheduledInstanceSet = scheduledInstanceSet
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case scheduledInstanceSet = "scheduledInstanceSet"
        }
    }

    public struct DescribeSecurityGroupReferencesRequest: AWSEncodableShape {
        public struct _GroupIdEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the security groups in your account.
        @OptionalCustomCoding<EC2ArrayCoder<_GroupIdEncoding, String>>
        public var groupId: [String]?

        public init(dryRun: Bool? = nil, groupId: [String]? = nil) {
            self.dryRun = dryRun
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupId = "GroupId"
        }
    }

    public struct DescribeSecurityGroupReferencesResult: AWSDecodableShape {
        public struct _SecurityGroupReferenceSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the VPCs with the referencing security groups.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupReferenceSetEncoding, SecurityGroupReference>>
        public var securityGroupReferenceSet: [SecurityGroupReference]?

        public init(securityGroupReferenceSet: [SecurityGroupReference]? = nil) {
            self.securityGroupReferenceSet = securityGroupReferenceSet
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupReferenceSet = "securityGroupReferenceSet"
        }
    }

    public struct DescribeSecurityGroupRulesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _SecurityGroupRuleIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    group-id - The ID of the security group.    security-group-rule-id - The ID of the security group rule.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request. To get the next page of  items, make another request with the token returned in the output. This value can be between 5 and 1000. If this parameter is not specified, then all items are returned. For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?
        /// The IDs of the security group rules.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupRuleIdsEncoding, String>>
        public var securityGroupRuleIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, securityGroupRuleIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.securityGroupRuleIds = securityGroupRuleIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case securityGroupRuleIds = "SecurityGroupRuleId"
        }
    }

    public struct DescribeSecurityGroupRulesResult: AWSDecodableShape {
        public struct _SecurityGroupRulesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to include in another request to get the next page of items.  This value is null when there are no more items to return.
        public let nextToken: String?
        /// Information about security group rules.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupRulesEncoding, SecurityGroupRule>>
        public var securityGroupRules: [SecurityGroupRule]?

        public init(nextToken: String? = nil, securityGroupRules: [SecurityGroupRule]? = nil) {
            self.nextToken = nextToken
            self.securityGroupRules = securityGroupRules
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case securityGroupRules = "securityGroupRuleSet"
        }
    }

    public struct DescribeSecurityGroupsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _GroupIdsEncoding: ArrayCoderProperties { public static let member = "groupId" }
        public struct _GroupNamesEncoding: ArrayCoderProperties { public static let member = "GroupName" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters. If using multiple filters for rules, the results include security groups for which any combination of rules - not necessarily a single rule - match all filters.    description - The description of the security group.    egress.ip-permission.cidr - An IPv4 CIDR block for an outbound security group rule.    egress.ip-permission.from-port - For an outbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.    egress.ip-permission.group-id - The ID of a security group that has been referenced in an outbound security group rule.    egress.ip-permission.group-name - The name of a security group that is referenced in an outbound security group rule.    egress.ip-permission.ipv6-cidr - An IPv6 CIDR block for an outbound security group rule.    egress.ip-permission.prefix-list-id - The ID of a prefix list to which a security group rule allows outbound access.    egress.ip-permission.protocol - The IP protocol for an outbound security group rule (tcp | udp | icmp, a protocol number, or -1 for all protocols).    egress.ip-permission.to-port - For an outbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.    egress.ip-permission.user-id - The ID of an Amazon Web Services account that has been referenced in an outbound security group rule.    group-id - The ID of the security group.     group-name - The name of the security group.    ip-permission.cidr - An IPv4 CIDR block for an inbound security group rule.    ip-permission.from-port - For an inbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.    ip-permission.group-id - The ID of a security group that has been referenced in an inbound security group rule.    ip-permission.group-name - The name of a security group that is referenced in an inbound security group rule.    ip-permission.ipv6-cidr - An IPv6 CIDR block for an inbound security group rule.    ip-permission.prefix-list-id - The ID of a prefix list from which a security group rule allows inbound access.    ip-permission.protocol - The IP protocol for an inbound security group rule (tcp | udp | icmp, a protocol number, or -1 for all protocols).    ip-permission.to-port - For an inbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.    ip-permission.user-id - The ID of an Amazon Web Services account that has been referenced in an inbound security group rule.    owner-id - The Amazon Web Services account ID of the owner of the security group.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC specified when the security group was created.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the security groups. Required for security groups in a nondefault VPC. Default: Describes all of your security groups.
        @OptionalCustomCoding<EC2ArrayCoder<_GroupIdsEncoding, String>>
        public var groupIds: [String]?
        /// [Default VPC] The names of the security groups. You can specify either
        /// 			the security group name or the security group ID. Default: Describes all of your security groups.
        @OptionalCustomCoding<EC2ArrayCoder<_GroupNamesEncoding, String>>
        public var groupNames: [String]?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. This value can be between 5 and 1000.  If this parameter is not specified, then all items are returned. For more information, see  Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, groupIds: [String]? = nil, groupNames: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.groupIds = groupIds
            self.groupNames = groupNames
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case groupIds = "GroupId"
            case groupNames = "GroupName"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeSecurityGroupsResult: AWSDecodableShape {
        public struct _SecurityGroupsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to include in another request to get the next page of items.  This value is null when there are no more items to return.
        public let nextToken: String?
        /// Information about the security groups.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupsEncoding, SecurityGroup>>
        public var securityGroups: [SecurityGroup]?

        public init(nextToken: String? = nil, securityGroups: [SecurityGroup]? = nil) {
            self.nextToken = nextToken
            self.securityGroups = securityGroups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case securityGroups = "securityGroupInfo"
        }
    }

    public struct DescribeSnapshotAttributeRequest: AWSEncodableShape {
        /// The snapshot attribute you would like to view.
        public let attribute: SnapshotAttributeName?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the EBS snapshot.
        public let snapshotId: String?

        public init(attribute: SnapshotAttributeName? = nil, dryRun: Bool? = nil, snapshotId: String? = nil) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case dryRun = "dryRun"
            case snapshotId = "SnapshotId"
        }
    }

    public struct DescribeSnapshotAttributeResult: AWSDecodableShape {
        public struct _CreateVolumePermissionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ProductCodesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The users and groups that have the permissions for creating volumes from the snapshot.
        @OptionalCustomCoding<EC2ArrayCoder<_CreateVolumePermissionsEncoding, CreateVolumePermission>>
        public var createVolumePermissions: [CreateVolumePermission]?
        /// The product codes.
        @OptionalCustomCoding<EC2ArrayCoder<_ProductCodesEncoding, ProductCode>>
        public var productCodes: [ProductCode]?
        /// The ID of the EBS snapshot.
        public let snapshotId: String?

        public init(createVolumePermissions: [CreateVolumePermission]? = nil, productCodes: [ProductCode]? = nil, snapshotId: String? = nil) {
            self.createVolumePermissions = createVolumePermissions
            self.productCodes = productCodes
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case createVolumePermissions = "createVolumePermission"
            case productCodes = "productCodes"
            case snapshotId = "snapshotId"
        }
    }

    public struct DescribeSnapshotTierStatusRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    snapshot-id - The snapshot ID.    volume-id - The ID of the volume the snapshot is for.    last-tiering-operation - The state of the last archive or restore action. (archival-in-progress | archival-completed | archival-failed | permanent-restore-in-progress | permanent-restore-completed | permanent-restore-failed |
        /// 		temporary-restore-in-progress | temporary-restore-completed | temporary-restore-failed)
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request.
        /// 	To get the next page of items, make another request with the token returned in the output.
        /// 	For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeSnapshotTierStatusResult: AWSDecodableShape {
        public struct _SnapshotTierStatusesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to include in another request to get the next page of items.  This value is null when there are no more items to return.
        public let nextToken: String?
        /// Information about the snapshot's storage tier.
        @OptionalCustomCoding<EC2ArrayCoder<_SnapshotTierStatusesEncoding, SnapshotTierStatus>>
        public var snapshotTierStatuses: [SnapshotTierStatus]?

        public init(nextToken: String? = nil, snapshotTierStatuses: [SnapshotTierStatus]? = nil) {
            self.nextToken = nextToken
            self.snapshotTierStatuses = snapshotTierStatuses
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case snapshotTierStatuses = "snapshotTierStatusSet"
        }
    }

    public struct DescribeSnapshotsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _OwnerIdsEncoding: ArrayCoderProperties { public static let member = "Owner" }
        public struct _SnapshotIdsEncoding: ArrayCoderProperties { public static let member = "SnapshotId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    description - A description of the snapshot.    encrypted - Indicates whether the snapshot is encrypted (true | false)    owner-alias - The owner alias, from an Amazon-maintained list   (amazon).  This is not the user-configured Amazon Web Services account alias set using the IAM console. We recommend that you use the related parameter instead of this filter.    owner-id - The Amazon Web Services account ID of the owner. We recommend that  you use the related parameter instead of this filter.    progress - The progress of the snapshot, as a percentage (for example, 80%).    snapshot-id - The snapshot ID.    start-time - The time stamp when the snapshot was initiated.    status - The status of the snapshot (pending | completed | error).    storage-tier - The storage tier of the snapshot (archive | standard).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    volume-id - The ID of the volume the snapshot is for.    volume-size - The size of the volume, in GiB.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of snapshots to return for this request. This value can be between 5 and 1,000; if this value is larger than 1,000, only 1,000 results are returned.  If this parameter is not used, then the request returns all snapshots.  You cannot specify this parameter and the snapshot IDs parameter in the same request. For more information,  see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?
        /// Scopes the results to snapshots with the specified owners. You can specify a combination of Amazon Web Services account IDs, self, and amazon.
        @OptionalCustomCoding<EC2ArrayCoder<_OwnerIdsEncoding, String>>
        public var ownerIds: [String]?
        /// The IDs of the Amazon Web Services accounts that can create volumes from the snapshot.
        @OptionalCustomCoding<EC2StandardArrayCoder<String>>
        public var restorableByUserIds: [String]?
        /// The snapshot IDs. Default: Describes the snapshots for which you have create volume permissions.
        @OptionalCustomCoding<EC2ArrayCoder<_SnapshotIdsEncoding, String>>
        public var snapshotIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, ownerIds: [String]? = nil, restorableByUserIds: [String]? = nil, snapshotIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.ownerIds = ownerIds
            self.restorableByUserIds = restorableByUserIds
            self.snapshotIds = snapshotIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case ownerIds = "Owner"
            case restorableByUserIds = "RestorableBy"
            case snapshotIds = "SnapshotId"
        }
    }

    public struct DescribeSnapshotsResult: AWSDecodableShape {
        public struct _SnapshotsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to include in another request to return the next page of snapshots.  This value is null when there are no more snapshots to return.
        public let nextToken: String?
        /// Information about the snapshots.
        @OptionalCustomCoding<EC2ArrayCoder<_SnapshotsEncoding, Snapshot>>
        public var snapshots: [Snapshot]?

        public init(nextToken: String? = nil, snapshots: [Snapshot]? = nil) {
            self.nextToken = nextToken
            self.snapshots = snapshots
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case snapshots = "snapshotSet"
        }
    }

    public struct DescribeSpotDatafeedSubscriptionRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
        }
    }

    public struct DescribeSpotDatafeedSubscriptionResult: AWSDecodableShape {
        /// The Spot Instance data feed subscription.
        public let spotDatafeedSubscription: SpotDatafeedSubscription?

        public init(spotDatafeedSubscription: SpotDatafeedSubscription? = nil) {
            self.spotDatafeedSubscription = spotDatafeedSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case spotDatafeedSubscription = "spotDatafeedSubscription"
        }
    }

    public struct DescribeSpotFleetInstancesRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
        /// 	        For more information, see Pagination.
        public let maxResults: Int?
        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String?

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil, spotFleetRequestId: String? = nil) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.spotFleetRequestId = spotFleetRequestId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case spotFleetRequestId = "spotFleetRequestId"
        }
    }

    public struct DescribeSpotFleetInstancesResponse: AWSDecodableShape {
        public struct _ActiveInstancesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The running instances. This list is refreshed periodically and might be out of date.
        @OptionalCustomCoding<EC2ArrayCoder<_ActiveInstancesEncoding, ActiveInstance>>
        public var activeInstances: [ActiveInstance]?
        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String?

        public init(activeInstances: [ActiveInstance]? = nil, nextToken: String? = nil, spotFleetRequestId: String? = nil) {
            self.activeInstances = activeInstances
            self.nextToken = nextToken
            self.spotFleetRequestId = spotFleetRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case activeInstances = "activeInstanceSet"
            case nextToken = "nextToken"
            case spotFleetRequestId = "spotFleetRequestId"
        }
    }

    public struct DescribeSpotFleetRequestHistoryRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The type of events to describe. By default, all events are described.
        public let eventType: EventType?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
        /// 	        For more information, see Pagination.
        public let maxResults: Int?
        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String?
        /// The starting date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let startTime: Date?

        public init(dryRun: Bool? = nil, eventType: EventType? = nil, maxResults: Int? = nil, nextToken: String? = nil, spotFleetRequestId: String? = nil, startTime: Date? = nil) {
            self.dryRun = dryRun
            self.eventType = eventType
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.spotFleetRequestId = spotFleetRequestId
            self.startTime = startTime
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case eventType = "eventType"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case spotFleetRequestId = "spotFleetRequestId"
            case startTime = "startTime"
        }
    }

    public struct DescribeSpotFleetRequestHistoryResponse: AWSDecodableShape {
        public struct _HistoryRecordsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the events in the history of the Spot Fleet request.
        @OptionalCustomCoding<EC2ArrayCoder<_HistoryRecordsEncoding, HistoryRecord>>
        public var historyRecords: [HistoryRecord]?
        /// The last date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). All records up to this time were retrieved. If nextToken indicates that there are more items, this value is not present.
        public let lastEvaluatedTime: Date?
        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String?
        /// The starting date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let startTime: Date?

        public init(historyRecords: [HistoryRecord]? = nil, lastEvaluatedTime: Date? = nil, nextToken: String? = nil, spotFleetRequestId: String? = nil, startTime: Date? = nil) {
            self.historyRecords = historyRecords
            self.lastEvaluatedTime = lastEvaluatedTime
            self.nextToken = nextToken
            self.spotFleetRequestId = spotFleetRequestId
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case historyRecords = "historyRecordSet"
            case lastEvaluatedTime = "lastEvaluatedTime"
            case nextToken = "nextToken"
            case spotFleetRequestId = "spotFleetRequestId"
            case startTime = "startTime"
        }
    }

    public struct DescribeSpotFleetRequestsRequest: AWSEncodableShape {
        public struct _SpotFleetRequestIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
        /// 	        For more information, see Pagination.
        public let maxResults: Int?
        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?
        /// The IDs of the Spot Fleet requests.
        @OptionalCustomCoding<EC2ArrayCoder<_SpotFleetRequestIdsEncoding, String>>
        public var spotFleetRequestIds: [String]?

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil, spotFleetRequestIds: [String]? = nil) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.spotFleetRequestIds = spotFleetRequestIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case spotFleetRequestIds = "spotFleetRequestId"
        }
    }

    public struct DescribeSpotFleetRequestsResponse: AWSDecodableShape {
        public struct _SpotFleetRequestConfigsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?
        /// Information about the configuration of your Spot Fleet.
        @OptionalCustomCoding<EC2ArrayCoder<_SpotFleetRequestConfigsEncoding, SpotFleetRequestConfig>>
        public var spotFleetRequestConfigs: [SpotFleetRequestConfig]?

        public init(nextToken: String? = nil, spotFleetRequestConfigs: [SpotFleetRequestConfig]? = nil) {
            self.nextToken = nextToken
            self.spotFleetRequestConfigs = spotFleetRequestConfigs
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case spotFleetRequestConfigs = "spotFleetRequestConfigSet"
        }
    }

    public struct DescribeSpotInstanceRequestsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _SpotInstanceRequestIdsEncoding: ArrayCoderProperties { public static let member = "SpotInstanceRequestId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    availability-zone-group - The Availability Zone group.    create-time - The time stamp when the Spot Instance request was created.    fault-code - The fault code related to the request.    fault-message - The fault message related to the request.    instance-id - The ID of the instance that fulfilled the request.    launch-group - The Spot Instance launch group.    launch.block-device-mapping.delete-on-termination - Indicates whether the EBS volume is deleted on instance termination.    launch.block-device-mapping.device-name - The device name for the volume in the block device mapping (for example, /dev/sdh or xvdh).    launch.block-device-mapping.snapshot-id - The ID of the snapshot for the EBS volume.    launch.block-device-mapping.volume-size - The size of the EBS volume, in GiB.    launch.block-device-mapping.volume-type - The type of EBS volume: gp2 or gp3 for General Purpose SSD, io1  or io2 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard for Magnetic.    launch.group-id - The ID of the security group for the instance.    launch.group-name - The name of the security group for the instance.    launch.image-id - The ID of the AMI.    launch.instance-type - The type of instance (for example, m3.medium).    launch.kernel-id - The kernel ID.    launch.key-name - The name of the key pair the instance launched with.    launch.monitoring-enabled - Whether detailed monitoring is enabled for the Spot Instance.    launch.ramdisk-id - The RAM disk ID.    launched-availability-zone - The Availability Zone in which the request is launched.    network-interface.addresses.primary - Indicates whether the IP address is the primary private IP address.    network-interface.delete-on-termination - Indicates whether the network interface is deleted when the instance is terminated.    network-interface.description - A description of the network interface.    network-interface.device-index - The index of the device for the network interface attachment on the instance.    network-interface.group-id - The ID of the security group associated with the network interface.    network-interface.network-interface-id - The ID of the network interface.    network-interface.private-ip-address - The primary private IP address of the network interface.    network-interface.subnet-id - The ID of the subnet for the instance.    product-description - The product description associated with the instance (Linux/UNIX | Windows).    spot-instance-request-id - The Spot Instance request ID.    spot-price - The maximum hourly price for any Spot Instance launched to fulfill the request.    state - The state of the Spot Instance request (open | active | closed | cancelled | failed). Spot request status information can help you track your Amazon EC2 Spot Instance requests. For more information, see Spot request status in the Amazon EC2 User Guide for Linux Instances.    status-code - The short code describing the most recent evaluation of your Spot Instance request.    status-message - The message explaining the status of the Spot Instance request.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    type - The type of Spot Instance request (one-time | persistent).    valid-from - The start date of the request.    valid-until - The end date of the request.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
        /// 	        For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?
        /// The IDs of the Spot Instance requests.
        @OptionalCustomCoding<EC2ArrayCoder<_SpotInstanceRequestIdsEncoding, String>>
        public var spotInstanceRequestIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, spotInstanceRequestIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.spotInstanceRequestIds = spotInstanceRequestIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case spotInstanceRequestIds = "SpotInstanceRequestId"
        }
    }

    public struct DescribeSpotInstanceRequestsResult: AWSDecodableShape {
        public struct _SpotInstanceRequestsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?
        /// The Spot Instance requests.
        @OptionalCustomCoding<EC2ArrayCoder<_SpotInstanceRequestsEncoding, SpotInstanceRequest>>
        public var spotInstanceRequests: [SpotInstanceRequest]?

        public init(nextToken: String? = nil, spotInstanceRequests: [SpotInstanceRequest]? = nil) {
            self.nextToken = nextToken
            self.spotInstanceRequests = spotInstanceRequests
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case spotInstanceRequests = "spotInstanceRequestSet"
        }
    }

    public struct DescribeSpotPriceHistoryRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Filters the results by the specified Availability Zone.
        public let availabilityZone: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The date and time, up to the current date, from which to stop retrieving the price history data, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let endTime: Date?
        /// The filters.    availability-zone - The Availability Zone for which prices should be returned.    instance-type - The type of instance (for example, m3.medium).    product-description - The product description for the Spot price (Linux/UNIX | Red Hat Enterprise Linux | SUSE Linux | Windows | Linux/UNIX (Amazon VPC) | Red Hat Enterprise Linux (Amazon VPC) | SUSE Linux (Amazon VPC) | Windows (Amazon VPC)).    spot-price - The Spot price. The value must match exactly (or use wildcards; greater than or less than comparison is not supported).    timestamp - The time stamp of the Spot price history, in UTC format (for example, ddd MMM dd HH:mm:ss UTC YYYY). You can use wildcards (* and ?). Greater than or less than comparison is not supported.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// Filters the results by the specified instance types.
        @OptionalCustomCoding<EC2StandardArrayCoder<InstanceType>>
        public var instanceTypes: [InstanceType]?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
        /// 	        For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?
        /// Filters the results by the specified basic product descriptions.
        @OptionalCustomCoding<EC2StandardArrayCoder<String>>
        public var productDescriptions: [String]?
        /// The date and time, up to the past 90 days, from which to start retrieving the price history data, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let startTime: Date?

        public init(availabilityZone: String? = nil, dryRun: Bool? = nil, endTime: Date? = nil, filters: [Filter]? = nil, instanceTypes: [InstanceType]? = nil, maxResults: Int? = nil, nextToken: String? = nil, productDescriptions: [String]? = nil, startTime: Date? = nil) {
            self.availabilityZone = availabilityZone
            self.dryRun = dryRun
            self.endTime = endTime
            self.filters = filters
            self.instanceTypes = instanceTypes
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.productDescriptions = productDescriptions
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case dryRun = "dryRun"
            case endTime = "endTime"
            case filters = "Filter"
            case instanceTypes = "InstanceType"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case productDescriptions = "ProductDescription"
            case startTime = "startTime"
        }
    }

    public struct DescribeSpotPriceHistoryResult: AWSDecodableShape {
        public struct _SpotPriceHistoryEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to include in another request to get the next page of items. This value is an empty string ("") or null when there are no more items to return.
        public let nextToken: String?
        /// The historical Spot prices.
        @OptionalCustomCoding<EC2ArrayCoder<_SpotPriceHistoryEncoding, SpotPrice>>
        public var spotPriceHistory: [SpotPrice]?

        public init(nextToken: String? = nil, spotPriceHistory: [SpotPrice]? = nil) {
            self.nextToken = nextToken
            self.spotPriceHistory = spotPriceHistory
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case spotPriceHistory = "spotPriceHistorySet"
        }
    }

    public struct DescribeStaleSecurityGroupsRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil, vpcId: String? = nil) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.vpcId = vpcId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 255)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1024)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case vpcId = "VpcId"
        }
    }

    public struct DescribeStaleSecurityGroupsResult: AWSDecodableShape {
        public struct _StaleSecurityGroupSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to include in another request to get the next page of items.  If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// Information about the stale security groups.
        @OptionalCustomCoding<EC2ArrayCoder<_StaleSecurityGroupSetEncoding, StaleSecurityGroup>>
        public var staleSecurityGroupSet: [StaleSecurityGroup]?

        public init(nextToken: String? = nil, staleSecurityGroupSet: [StaleSecurityGroup]? = nil) {
            self.nextToken = nextToken
            self.staleSecurityGroupSet = staleSecurityGroupSet
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case staleSecurityGroupSet = "staleSecurityGroupSet"
        }
    }

    public struct DescribeStoreImageTasksRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _ImageIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    task-state - Returns tasks in a certain state (InProgress | Completed | Failed)    bucket - Returns task information for tasks that targeted a specific bucket. For the filter value, specify the bucket name.    When you specify the ImageIds parameter, any filters that you specify are ignored. To use the filters, you must remove the ImageIds parameter.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The AMI IDs for which to show progress. Up to 20 AMI IDs can be included in a request.
        @OptionalCustomCoding<EC2ArrayCoder<_ImageIdsEncoding, String>>
        public var imageIds: [String]?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
        /// 	        For more information, see Pagination. You cannot specify this parameter and the ImageIds parameter in the same call.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, imageIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.imageIds = imageIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 200)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case imageIds = "ImageId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeStoreImageTasksResult: AWSDecodableShape {
        public struct _StoreImageTaskResultsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?
        /// The information about the AMI store tasks.
        @OptionalCustomCoding<EC2ArrayCoder<_StoreImageTaskResultsEncoding, StoreImageTaskResult>>
        public var storeImageTaskResults: [StoreImageTaskResult]?

        public init(nextToken: String? = nil, storeImageTaskResults: [StoreImageTaskResult]? = nil) {
            self.nextToken = nextToken
            self.storeImageTaskResults = storeImageTaskResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case storeImageTaskResults = "storeImageTaskResultSet"
        }
    }

    public struct DescribeSubnetsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _SubnetIdsEncoding: ArrayCoderProperties { public static let member = "SubnetId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    availability-zone - The Availability Zone for the subnet. You can also use availabilityZone as the filter name.    availability-zone-id - The ID of the Availability Zone for the subnet. You can also use availabilityZoneId as the filter name.    available-ip-address-count - The number of IPv4 addresses in the subnet that are available.    cidr-block - The IPv4 CIDR block of the subnet. The CIDR block you specify must exactly match the subnet's CIDR block for information to be returned for the subnet. You can also use cidr or cidrBlock as the filter names.    customer-owned-ipv4-pool - The customer-owned IPv4 address pool associated with the subnet.    default-for-az - Indicates whether this is the default subnet for the Availability Zone (true | false). You can also use defaultForAz as the filter name.    enable-dns64 - Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations.    enable-lni-at-device-index - Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1).     ipv6-cidr-block-association.ipv6-cidr-block - An IPv6 CIDR block associated with the subnet.    ipv6-cidr-block-association.association-id - An association ID for an IPv6 CIDR block associated with the subnet.    ipv6-cidr-block-association.state - The state of an IPv6 CIDR block associated with the subnet.    ipv6-native - Indicates whether this is an IPv6 only subnet (true | false).    map-customer-owned-ip-on-launch - Indicates whether a network interface created in this subnet (including a network interface created by RunInstances) receives a customer-owned IPv4 address.    map-public-ip-on-launch - Indicates whether instances launched in this subnet receive a public IPv4 address.    outpost-arn - The Amazon Resource Name (ARN) of the Outpost.    owner-id - The ID of the Amazon Web Services account that owns the subnet.    private-dns-name-options-on-launch.hostname-type - The type of hostname to assign to instances in the subnet at launch. For IPv4-only and dual-stack (IPv4 and IPv6) subnets, an instance DNS name can be based on the instance IPv4 address (ip-name) or the instance ID (resource-name). For IPv6 only subnets, an instance DNS name must be based on the instance ID (resource-name).    private-dns-name-options-on-launch.enable-resource-name-dns-a-record - Indicates whether to respond to DNS queries for instance hostnames with DNS A records.    private-dns-name-options-on-launch.enable-resource-name-dns-aaaa-record - Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.    state - The state of the subnet (pending | available).    subnet-arn - The Amazon Resource Name (ARN) of the subnet.    subnet-id - The ID of the subnet.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC for the subnet.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request.
        /// 	To get the next page of items, make another request with the token returned in the output.
        /// 	For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?
        /// The IDs of the subnets. Default: Describes all your subnets.
        @OptionalCustomCoding<EC2ArrayCoder<_SubnetIdsEncoding, String>>
        public var subnetIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, subnetIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.subnetIds = subnetIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case subnetIds = "SubnetId"
        }
    }

    public struct DescribeSubnetsResult: AWSDecodableShape {
        public struct _SubnetsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?
        /// Information about one or more subnets.
        @OptionalCustomCoding<EC2ArrayCoder<_SubnetsEncoding, Subnet>>
        public var subnets: [Subnet]?

        public init(nextToken: String? = nil, subnets: [Subnet]? = nil) {
            self.nextToken = nextToken
            self.subnets = subnets
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case subnets = "subnetSet"
        }
    }

    public struct DescribeTagsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    key - The tag key.    resource-id - The ID of the resource.    resource-type - The resource type (customer-gateway | dedicated-host | dhcp-options | elastic-ip | fleet | fpga-image | host-reservation | image | instance | internet-gateway | key-pair | launch-template | natgateway | network-acl | network-interface | placement-group | reserved-instances | route-table | security-group | snapshot | spot-instances-request | subnet | volume | vpc | vpc-endpoint | vpc-endpoint-service | vpc-peering-connection | vpn-connection | vpn-gateway).    tag: - The key/value combination of the tag. For example, specify "tag:Owner" for the filter name and "TeamA" for the filter value to find resources with the tag "Owner=TeamA".    value - The tag value.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request. This value can be between 5 and 1000.  To get the next page of items, make another request with the token returned in the output. For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeTagsResult: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to include in another request to get the next page of items.  This value is null when there are no more items to return.
        public let nextToken: String?
        /// The tags.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, TagDescription>>
        public var tags: [TagDescription]?

        public init(nextToken: String? = nil, tags: [TagDescription]? = nil) {
            self.nextToken = nextToken
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case tags = "tagSet"
        }
    }

    public struct DescribeTrafficMirrorFiltersRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _TrafficMirrorFilterIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    description: The Traffic Mirror filter description.    traffic-mirror-filter-id: The ID of the Traffic Mirror filter.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the Traffic Mirror filter.
        @OptionalCustomCoding<EC2ArrayCoder<_TrafficMirrorFilterIdsEncoding, String>>
        public var trafficMirrorFilterIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, trafficMirrorFilterIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.trafficMirrorFilterIds = trafficMirrorFilterIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case trafficMirrorFilterIds = "TrafficMirrorFilterId"
        }
    }

    public struct DescribeTrafficMirrorFiltersResult: AWSDecodableShape {
        public struct _TrafficMirrorFiltersEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. The value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about one or more Traffic Mirror filters.
        @OptionalCustomCoding<EC2ArrayCoder<_TrafficMirrorFiltersEncoding, TrafficMirrorFilter>>
        public var trafficMirrorFilters: [TrafficMirrorFilter]?

        public init(nextToken: String? = nil, trafficMirrorFilters: [TrafficMirrorFilter]? = nil) {
            self.nextToken = nextToken
            self.trafficMirrorFilters = trafficMirrorFilters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case trafficMirrorFilters = "trafficMirrorFilterSet"
        }
    }

    public struct DescribeTrafficMirrorSessionsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _TrafficMirrorSessionIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    description: The Traffic Mirror session description.    network-interface-id: The ID of the Traffic Mirror session network interface.    owner-id: The ID of the account that owns the Traffic Mirror session.    packet-length: The assigned number of packets to mirror.     session-number: The assigned session number.     traffic-mirror-filter-id: The ID of the Traffic Mirror filter.    traffic-mirror-session-id: The ID of the Traffic Mirror session.    traffic-mirror-target-id: The ID of the Traffic Mirror target.    virtual-network-id: The virtual network ID of the Traffic Mirror session.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the Traffic Mirror session.
        @OptionalCustomCoding<EC2ArrayCoder<_TrafficMirrorSessionIdsEncoding, String>>
        public var trafficMirrorSessionIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, trafficMirrorSessionIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.trafficMirrorSessionIds = trafficMirrorSessionIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case trafficMirrorSessionIds = "TrafficMirrorSessionId"
        }
    }

    public struct DescribeTrafficMirrorSessionsResult: AWSDecodableShape {
        public struct _TrafficMirrorSessionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. The value is null when there are no more results to return.
        public let nextToken: String?
        /// Describes one or more Traffic Mirror sessions. By default, all Traffic Mirror sessions are described. Alternatively, you can filter the results.
        @OptionalCustomCoding<EC2ArrayCoder<_TrafficMirrorSessionsEncoding, TrafficMirrorSession>>
        public var trafficMirrorSessions: [TrafficMirrorSession]?

        public init(nextToken: String? = nil, trafficMirrorSessions: [TrafficMirrorSession]? = nil) {
            self.nextToken = nextToken
            self.trafficMirrorSessions = trafficMirrorSessions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case trafficMirrorSessions = "trafficMirrorSessionSet"
        }
    }

    public struct DescribeTrafficMirrorTargetsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _TrafficMirrorTargetIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    description: The Traffic Mirror target description.    network-interface-id: The ID of the Traffic Mirror session network interface.    network-load-balancer-arn: The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the session.    owner-id: The ID of the account that owns the Traffic Mirror session.    traffic-mirror-target-id: The ID of the Traffic Mirror target.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the Traffic Mirror targets.
        @OptionalCustomCoding<EC2ArrayCoder<_TrafficMirrorTargetIdsEncoding, String>>
        public var trafficMirrorTargetIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, trafficMirrorTargetIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.trafficMirrorTargetIds = trafficMirrorTargetIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case trafficMirrorTargetIds = "TrafficMirrorTargetId"
        }
    }

    public struct DescribeTrafficMirrorTargetsResult: AWSDecodableShape {
        public struct _TrafficMirrorTargetsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. The value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about one or more Traffic Mirror targets.
        @OptionalCustomCoding<EC2ArrayCoder<_TrafficMirrorTargetsEncoding, TrafficMirrorTarget>>
        public var trafficMirrorTargets: [TrafficMirrorTarget]?

        public init(nextToken: String? = nil, trafficMirrorTargets: [TrafficMirrorTarget]? = nil) {
            self.nextToken = nextToken
            self.trafficMirrorTargets = trafficMirrorTargets
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case trafficMirrorTargets = "trafficMirrorTargetSet"
        }
    }

    public struct DescribeTransitGatewayAttachmentsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    association.state - The state of the association (associating | associated | disassociating).    association.transit-gateway-route-table-id - The ID of the route table for the transit gateway.    resource-id - The ID of the resource.    resource-owner-id - The ID of the Amazon Web Services account that owns the resource.    resource-type - The resource type. Valid values are vpc | vpn | direct-connect-gateway | peering | connect.    state - The state of the attachment. Valid values are available | deleted | deleting | failed |  failing | initiatingRequest | modifying | pendingAcceptance | pending | rollingBack | rejected | rejecting.    transit-gateway-attachment-id - The ID of the attachment.    transit-gateway-id - The ID of the transit gateway.    transit-gateway-owner-id - The ID of the Amazon Web Services account that owns the transit gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the attachments.
        @OptionalCustomCoding<EC2StandardArrayCoder<String>>
        public var transitGatewayAttachmentIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayAttachmentIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayAttachmentIds = transitGatewayAttachmentIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayAttachmentIds = "TransitGatewayAttachmentIds"
        }
    }

    public struct DescribeTransitGatewayAttachmentsResult: AWSDecodableShape {
        public struct _TransitGatewayAttachmentsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the attachments.
        @OptionalCustomCoding<EC2ArrayCoder<_TransitGatewayAttachmentsEncoding, TransitGatewayAttachment>>
        public var transitGatewayAttachments: [TransitGatewayAttachment]?

        public init(nextToken: String? = nil, transitGatewayAttachments: [TransitGatewayAttachment]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayAttachments = transitGatewayAttachments
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case transitGatewayAttachments = "transitGatewayAttachments"
        }
    }

    public struct DescribeTransitGatewayConnectPeersRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _TransitGatewayConnectPeerIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    state - The state of the Connect peer (pending | available | deleting | deleted).    transit-gateway-attachment-id - The ID of the attachment.    transit-gateway-connect-peer-id - The ID of the Connect peer.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the Connect peers.
        @OptionalCustomCoding<EC2ArrayCoder<_TransitGatewayConnectPeerIdsEncoding, String>>
        public var transitGatewayConnectPeerIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayConnectPeerIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayConnectPeerIds = transitGatewayConnectPeerIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayConnectPeerIds = "TransitGatewayConnectPeerIds"
        }
    }

    public struct DescribeTransitGatewayConnectPeersResult: AWSDecodableShape {
        public struct _TransitGatewayConnectPeersEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the Connect peers.
        @OptionalCustomCoding<EC2ArrayCoder<_TransitGatewayConnectPeersEncoding, TransitGatewayConnectPeer>>
        public var transitGatewayConnectPeers: [TransitGatewayConnectPeer]?

        public init(nextToken: String? = nil, transitGatewayConnectPeers: [TransitGatewayConnectPeer]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayConnectPeers = transitGatewayConnectPeers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case transitGatewayConnectPeers = "transitGatewayConnectPeerSet"
        }
    }

    public struct DescribeTransitGatewayConnectsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    options.protocol - The tunnel protocol (gre).    state - The state of the attachment (initiating | initiatingRequest | pendingAcceptance | rollingBack | pending | available | modifying | deleting | deleted | failed | rejected | rejecting | failing).    transit-gateway-attachment-id - The ID of the Connect attachment.    transit-gateway-id - The ID of the transit gateway.    transport-transit-gateway-attachment-id - The ID of the transit gateway attachment from which the Connect attachment was created.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the attachments.
        @OptionalCustomCoding<EC2StandardArrayCoder<String>>
        public var transitGatewayAttachmentIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayAttachmentIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayAttachmentIds = transitGatewayAttachmentIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayAttachmentIds = "TransitGatewayAttachmentIds"
        }
    }

    public struct DescribeTransitGatewayConnectsResult: AWSDecodableShape {
        public struct _TransitGatewayConnectsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the Connect attachments.
        @OptionalCustomCoding<EC2ArrayCoder<_TransitGatewayConnectsEncoding, TransitGatewayConnect>>
        public var transitGatewayConnects: [TransitGatewayConnect]?

        public init(nextToken: String? = nil, transitGatewayConnects: [TransitGatewayConnect]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayConnects = transitGatewayConnects
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case transitGatewayConnects = "transitGatewayConnectSet"
        }
    }

    public struct DescribeTransitGatewayMulticastDomainsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _TransitGatewayMulticastDomainIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    state - The state of the transit gateway multicast domain. Valid values are pending | available | deleting | deleted.    transit-gateway-id - The ID of the transit gateway.    transit-gateway-multicast-domain-id - The ID of the transit gateway multicast domain.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the transit gateway multicast domain.
        @OptionalCustomCoding<EC2ArrayCoder<_TransitGatewayMulticastDomainIdsEncoding, String>>
        public var transitGatewayMulticastDomainIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayMulticastDomainIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayMulticastDomainIds = transitGatewayMulticastDomainIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayMulticastDomainIds = "TransitGatewayMulticastDomainIds"
        }
    }

    public struct DescribeTransitGatewayMulticastDomainsResult: AWSDecodableShape {
        public struct _TransitGatewayMulticastDomainsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the transit gateway multicast domains.
        @OptionalCustomCoding<EC2ArrayCoder<_TransitGatewayMulticastDomainsEncoding, TransitGatewayMulticastDomain>>
        public var transitGatewayMulticastDomains: [TransitGatewayMulticastDomain]?

        public init(nextToken: String? = nil, transitGatewayMulticastDomains: [TransitGatewayMulticastDomain]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayMulticastDomains = transitGatewayMulticastDomains
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case transitGatewayMulticastDomains = "transitGatewayMulticastDomains"
        }
    }

    public struct DescribeTransitGatewayPeeringAttachmentsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    transit-gateway-attachment-id - The ID of the transit gateway attachment.    local-owner-id - The ID of your Amazon Web Services account.    remote-owner-id - The ID of the Amazon Web Services account in the remote Region that owns the transit gateway.    state - The state of the peering attachment. Valid values are available | deleted | deleting | failed |  failing | initiatingRequest | modifying | pendingAcceptance | pending | rollingBack | rejected | rejecting).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.    transit-gateway-id - The ID of the transit gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// One or more IDs of the transit gateway peering attachments.
        @OptionalCustomCoding<EC2StandardArrayCoder<String>>
        public var transitGatewayAttachmentIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayAttachmentIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayAttachmentIds = transitGatewayAttachmentIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayAttachmentIds = "TransitGatewayAttachmentIds"
        }
    }

    public struct DescribeTransitGatewayPeeringAttachmentsResult: AWSDecodableShape {
        public struct _TransitGatewayPeeringAttachmentsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The transit gateway peering attachments.
        @OptionalCustomCoding<EC2ArrayCoder<_TransitGatewayPeeringAttachmentsEncoding, TransitGatewayPeeringAttachment>>
        public var transitGatewayPeeringAttachments: [TransitGatewayPeeringAttachment]?

        public init(nextToken: String? = nil, transitGatewayPeeringAttachments: [TransitGatewayPeeringAttachment]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayPeeringAttachments = transitGatewayPeeringAttachments
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case transitGatewayPeeringAttachments = "transitGatewayPeeringAttachments"
        }
    }

    public struct DescribeTransitGatewayPolicyTablesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _TransitGatewayPolicyTableIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters associated with the transit gateway policy table.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the transit gateway policy tables.
        @OptionalCustomCoding<EC2ArrayCoder<_TransitGatewayPolicyTableIdsEncoding, String>>
        public var transitGatewayPolicyTableIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayPolicyTableIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayPolicyTableIds = transitGatewayPolicyTableIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayPolicyTableIds = "TransitGatewayPolicyTableIds"
        }
    }

    public struct DescribeTransitGatewayPolicyTablesResult: AWSDecodableShape {
        public struct _TransitGatewayPolicyTablesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token for the next page of results.
        public let nextToken: String?
        /// Describes the transit gateway policy tables.
        @OptionalCustomCoding<EC2ArrayCoder<_TransitGatewayPolicyTablesEncoding, TransitGatewayPolicyTable>>
        public var transitGatewayPolicyTables: [TransitGatewayPolicyTable]?

        public init(nextToken: String? = nil, transitGatewayPolicyTables: [TransitGatewayPolicyTable]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayPolicyTables = transitGatewayPolicyTables
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case transitGatewayPolicyTables = "transitGatewayPolicyTables"
        }
    }

    public struct DescribeTransitGatewayRouteTableAnnouncementsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _TransitGatewayRouteTableAnnouncementIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters associated with the transit gateway policy table.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the transit gateway route tables that are being advertised.
        @OptionalCustomCoding<EC2ArrayCoder<_TransitGatewayRouteTableAnnouncementIdsEncoding, String>>
        public var transitGatewayRouteTableAnnouncementIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayRouteTableAnnouncementIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayRouteTableAnnouncementIds = transitGatewayRouteTableAnnouncementIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayRouteTableAnnouncementIds = "TransitGatewayRouteTableAnnouncementIds"
        }
    }

    public struct DescribeTransitGatewayRouteTableAnnouncementsResult: AWSDecodableShape {
        public struct _TransitGatewayRouteTableAnnouncementsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token for the next page of results.
        public let nextToken: String?
        /// Describes the transit gateway route table announcement.
        @OptionalCustomCoding<EC2ArrayCoder<_TransitGatewayRouteTableAnnouncementsEncoding, TransitGatewayRouteTableAnnouncement>>
        public var transitGatewayRouteTableAnnouncements: [TransitGatewayRouteTableAnnouncement]?

        public init(nextToken: String? = nil, transitGatewayRouteTableAnnouncements: [TransitGatewayRouteTableAnnouncement]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayRouteTableAnnouncements = transitGatewayRouteTableAnnouncements
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case transitGatewayRouteTableAnnouncements = "transitGatewayRouteTableAnnouncements"
        }
    }

    public struct DescribeTransitGatewayRouteTablesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _TransitGatewayRouteTableIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    default-association-route-table - Indicates whether this is the default association route table for the transit gateway (true | false).    default-propagation-route-table - Indicates whether this is the default propagation route table for the transit gateway (true | false).    state - The state of the route table (available | deleting | deleted | pending).    transit-gateway-id - The ID of the transit gateway.    transit-gateway-route-table-id - The ID of the transit gateway route table.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the transit gateway route tables.
        @OptionalCustomCoding<EC2ArrayCoder<_TransitGatewayRouteTableIdsEncoding, String>>
        public var transitGatewayRouteTableIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayRouteTableIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayRouteTableIds = transitGatewayRouteTableIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayRouteTableIds = "TransitGatewayRouteTableIds"
        }
    }

    public struct DescribeTransitGatewayRouteTablesResult: AWSDecodableShape {
        public struct _TransitGatewayRouteTablesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the transit gateway route tables.
        @OptionalCustomCoding<EC2ArrayCoder<_TransitGatewayRouteTablesEncoding, TransitGatewayRouteTable>>
        public var transitGatewayRouteTables: [TransitGatewayRouteTable]?

        public init(nextToken: String? = nil, transitGatewayRouteTables: [TransitGatewayRouteTable]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayRouteTables = transitGatewayRouteTables
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case transitGatewayRouteTables = "transitGatewayRouteTables"
        }
    }

    public struct DescribeTransitGatewayVpcAttachmentsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    state - The state of the attachment. Valid values are available | deleted | deleting | failed |  failing | initiatingRequest | modifying | pendingAcceptance | pending | rollingBack | rejected | rejecting.    transit-gateway-attachment-id - The ID of the attachment.    transit-gateway-id - The ID of the transit gateway.    vpc-id - The ID of the VPC.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the attachments.
        @OptionalCustomCoding<EC2StandardArrayCoder<String>>
        public var transitGatewayAttachmentIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayAttachmentIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayAttachmentIds = transitGatewayAttachmentIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayAttachmentIds = "TransitGatewayAttachmentIds"
        }
    }

    public struct DescribeTransitGatewayVpcAttachmentsResult: AWSDecodableShape {
        public struct _TransitGatewayVpcAttachmentsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the VPC attachments.
        @OptionalCustomCoding<EC2ArrayCoder<_TransitGatewayVpcAttachmentsEncoding, TransitGatewayVpcAttachment>>
        public var transitGatewayVpcAttachments: [TransitGatewayVpcAttachment]?

        public init(nextToken: String? = nil, transitGatewayVpcAttachments: [TransitGatewayVpcAttachment]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayVpcAttachments = transitGatewayVpcAttachments
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case transitGatewayVpcAttachments = "transitGatewayVpcAttachments"
        }
    }

    public struct DescribeTransitGatewaysRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _TransitGatewayIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    options.propagation-default-route-table-id - The ID of the default propagation route table.    options.amazon-side-asn - The private ASN for the Amazon side of a BGP session.    options.association-default-route-table-id - The ID of the default association route table.    options.auto-accept-shared-attachments - Indicates whether there is automatic acceptance of attachment requests (enable | disable).    options.default-route-table-association - Indicates whether resource attachments are automatically  associated with the default association route table (enable | disable).    options.default-route-table-propagation - Indicates whether resource attachments automatically propagate  routes to the default propagation route table (enable | disable).    options.dns-support - Indicates whether DNS support is enabled (enable | disable).    options.vpn-ecmp-support - Indicates whether Equal Cost Multipath Protocol support is enabled  (enable | disable).    owner-id - The ID of the Amazon Web Services account that owns the transit gateway.    state - The state of the transit gateway (available | deleted | deleting | modifying | pending).    transit-gateway-id - The ID of the transit gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the transit gateways.
        @OptionalCustomCoding<EC2ArrayCoder<_TransitGatewayIdsEncoding, String>>
        public var transitGatewayIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayIds = transitGatewayIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayIds = "TransitGatewayIds"
        }
    }

    public struct DescribeTransitGatewaysResult: AWSDecodableShape {
        public struct _TransitGatewaysEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the transit gateways.
        @OptionalCustomCoding<EC2ArrayCoder<_TransitGatewaysEncoding, TransitGateway>>
        public var transitGateways: [TransitGateway]?

        public init(nextToken: String? = nil, transitGateways: [TransitGateway]? = nil) {
            self.nextToken = nextToken
            self.transitGateways = transitGateways
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case transitGateways = "transitGatewaySet"
        }
    }

    public struct DescribeTrunkInterfaceAssociationsRequest: AWSEncodableShape {
        public struct _AssociationIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The IDs of the associations.
        @OptionalCustomCoding<EC2ArrayCoder<_AssociationIdsEncoding, String>>
        public var associationIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    gre-key - The ID of a trunk interface association.    interface-protocol - The interface protocol. Valid values are VLAN and GRE.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(associationIds: [String]? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.associationIds = associationIds
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 255)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case associationIds = "AssociationId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeTrunkInterfaceAssociationsResult: AWSDecodableShape {
        public struct _InterfaceAssociationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the trunk associations.
        @OptionalCustomCoding<EC2ArrayCoder<_InterfaceAssociationsEncoding, TrunkInterfaceAssociation>>
        public var interfaceAssociations: [TrunkInterfaceAssociation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(interfaceAssociations: [TrunkInterfaceAssociation]? = nil, nextToken: String? = nil) {
            self.interfaceAssociations = interfaceAssociations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case interfaceAssociations = "interfaceAssociationSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeVerifiedAccessEndpointsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VerifiedAccessEndpointIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the Verified Access endpoint.
        @OptionalCustomCoding<EC2ArrayCoder<_VerifiedAccessEndpointIdsEncoding, String>>
        public var verifiedAccessEndpointIds: [String]?
        /// The ID of the Verified Access group.
        public let verifiedAccessGroupId: String?
        /// The ID of the Verified Access instance.
        public let verifiedAccessInstanceId: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, verifiedAccessEndpointIds: [String]? = nil, verifiedAccessGroupId: String? = nil, verifiedAccessInstanceId: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.verifiedAccessEndpointIds = verifiedAccessEndpointIds
            self.verifiedAccessGroupId = verifiedAccessGroupId
            self.verifiedAccessInstanceId = verifiedAccessInstanceId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case verifiedAccessEndpointIds = "VerifiedAccessEndpointId"
            case verifiedAccessGroupId = "VerifiedAccessGroupId"
            case verifiedAccessInstanceId = "VerifiedAccessInstanceId"
        }
    }

    public struct DescribeVerifiedAccessEndpointsResult: AWSDecodableShape {
        public struct _VerifiedAccessEndpointsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Details about the Verified Access endpoints.
        @OptionalCustomCoding<EC2ArrayCoder<_VerifiedAccessEndpointsEncoding, VerifiedAccessEndpoint>>
        public var verifiedAccessEndpoints: [VerifiedAccessEndpoint]?

        public init(nextToken: String? = nil, verifiedAccessEndpoints: [VerifiedAccessEndpoint]? = nil) {
            self.nextToken = nextToken
            self.verifiedAccessEndpoints = verifiedAccessEndpoints
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case verifiedAccessEndpoints = "verifiedAccessEndpointSet"
        }
    }

    public struct DescribeVerifiedAccessGroupsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VerifiedAccessGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the Verified Access groups.
        @OptionalCustomCoding<EC2ArrayCoder<_VerifiedAccessGroupIdsEncoding, String>>
        public var verifiedAccessGroupIds: [String]?
        /// The ID of the Verified Access instance.
        public let verifiedAccessInstanceId: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, verifiedAccessGroupIds: [String]? = nil, verifiedAccessInstanceId: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.verifiedAccessGroupIds = verifiedAccessGroupIds
            self.verifiedAccessInstanceId = verifiedAccessInstanceId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case verifiedAccessGroupIds = "VerifiedAccessGroupId"
            case verifiedAccessInstanceId = "VerifiedAccessInstanceId"
        }
    }

    public struct DescribeVerifiedAccessGroupsResult: AWSDecodableShape {
        public struct _VerifiedAccessGroupsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Details about the Verified Access groups.
        @OptionalCustomCoding<EC2ArrayCoder<_VerifiedAccessGroupsEncoding, VerifiedAccessGroup>>
        public var verifiedAccessGroups: [VerifiedAccessGroup]?

        public init(nextToken: String? = nil, verifiedAccessGroups: [VerifiedAccessGroup]? = nil) {
            self.nextToken = nextToken
            self.verifiedAccessGroups = verifiedAccessGroups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case verifiedAccessGroups = "verifiedAccessGroupSet"
        }
    }

    public struct DescribeVerifiedAccessInstanceLoggingConfigurationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VerifiedAccessInstanceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the Verified Access instances.
        @OptionalCustomCoding<EC2ArrayCoder<_VerifiedAccessInstanceIdsEncoding, String>>
        public var verifiedAccessInstanceIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, verifiedAccessInstanceIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.verifiedAccessInstanceIds = verifiedAccessInstanceIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 10)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case verifiedAccessInstanceIds = "VerifiedAccessInstanceId"
        }
    }

    public struct DescribeVerifiedAccessInstanceLoggingConfigurationsResult: AWSDecodableShape {
        public struct _LoggingConfigurationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The logging configuration for the Verified Access instances.
        @OptionalCustomCoding<EC2ArrayCoder<_LoggingConfigurationsEncoding, VerifiedAccessInstanceLoggingConfiguration>>
        public var loggingConfigurations: [VerifiedAccessInstanceLoggingConfiguration]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(loggingConfigurations: [VerifiedAccessInstanceLoggingConfiguration]? = nil, nextToken: String? = nil) {
            self.loggingConfigurations = loggingConfigurations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case loggingConfigurations = "loggingConfigurationSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeVerifiedAccessInstancesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VerifiedAccessInstanceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the Verified Access instances.
        @OptionalCustomCoding<EC2ArrayCoder<_VerifiedAccessInstanceIdsEncoding, String>>
        public var verifiedAccessInstanceIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, verifiedAccessInstanceIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.verifiedAccessInstanceIds = verifiedAccessInstanceIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 200)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case verifiedAccessInstanceIds = "VerifiedAccessInstanceId"
        }
    }

    public struct DescribeVerifiedAccessInstancesResult: AWSDecodableShape {
        public struct _VerifiedAccessInstancesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Details about the Verified Access instances.
        @OptionalCustomCoding<EC2ArrayCoder<_VerifiedAccessInstancesEncoding, VerifiedAccessInstance>>
        public var verifiedAccessInstances: [VerifiedAccessInstance]?

        public init(nextToken: String? = nil, verifiedAccessInstances: [VerifiedAccessInstance]? = nil) {
            self.nextToken = nextToken
            self.verifiedAccessInstances = verifiedAccessInstances
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case verifiedAccessInstances = "verifiedAccessInstanceSet"
        }
    }

    public struct DescribeVerifiedAccessTrustProvidersRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VerifiedAccessTrustProviderIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the Verified Access trust providers.
        @OptionalCustomCoding<EC2ArrayCoder<_VerifiedAccessTrustProviderIdsEncoding, String>>
        public var verifiedAccessTrustProviderIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, verifiedAccessTrustProviderIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.verifiedAccessTrustProviderIds = verifiedAccessTrustProviderIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 200)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case verifiedAccessTrustProviderIds = "VerifiedAccessTrustProviderId"
        }
    }

    public struct DescribeVerifiedAccessTrustProvidersResult: AWSDecodableShape {
        public struct _VerifiedAccessTrustProvidersEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Details about the Verified Access trust providers.
        @OptionalCustomCoding<EC2ArrayCoder<_VerifiedAccessTrustProvidersEncoding, VerifiedAccessTrustProvider>>
        public var verifiedAccessTrustProviders: [VerifiedAccessTrustProvider]?

        public init(nextToken: String? = nil, verifiedAccessTrustProviders: [VerifiedAccessTrustProvider]? = nil) {
            self.nextToken = nextToken
            self.verifiedAccessTrustProviders = verifiedAccessTrustProviders
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case verifiedAccessTrustProviders = "verifiedAccessTrustProviderSet"
        }
    }

    public struct DescribeVolumeAttributeRequest: AWSEncodableShape {
        /// The attribute of the volume. This parameter is required.
        public let attribute: VolumeAttributeName?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the volume.
        public let volumeId: String?

        public init(attribute: VolumeAttributeName? = nil, dryRun: Bool? = nil, volumeId: String? = nil) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case dryRun = "dryRun"
            case volumeId = "VolumeId"
        }
    }

    public struct DescribeVolumeAttributeResult: AWSDecodableShape {
        public struct _ProductCodesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The state of autoEnableIO attribute.
        public let autoEnableIO: AttributeBooleanValue?
        /// A list of product codes.
        @OptionalCustomCoding<EC2ArrayCoder<_ProductCodesEncoding, ProductCode>>
        public var productCodes: [ProductCode]?
        /// The ID of the volume.
        public let volumeId: String?

        public init(autoEnableIO: AttributeBooleanValue? = nil, productCodes: [ProductCode]? = nil, volumeId: String? = nil) {
            self.autoEnableIO = autoEnableIO
            self.productCodes = productCodes
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case autoEnableIO = "autoEnableIO"
            case productCodes = "productCodes"
            case volumeId = "volumeId"
        }
    }

    public struct DescribeVolumeStatusRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VolumeIdsEncoding: ArrayCoderProperties { public static let member = "VolumeId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    action.code - The action code for the event (for example, enable-volume-io).    action.description - A description of the action.    action.event-id - The event ID associated with the action.    availability-zone - The Availability Zone of the instance.    event.description - A description of the event.    event.event-id - The event ID.    event.event-type - The event type (for io-enabled: passed | failed; for io-performance: io-performance:degraded | io-performance:severely-degraded | io-performance:stalled).    event.not-after - The latest end time for the event.    event.not-before - The earliest start time for the event.    volume-status.details-name - The cause for volume-status.status (io-enabled | io-performance).    volume-status.details-status - The status of volume-status.details-name (for io-enabled: passed | failed; for io-performance: normal | degraded | severely-degraded | stalled).    volume-status.status - The status of the volume (ok | impaired | warning | insufficient-data).
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. This value can be between 5 and 1,000; if the value is larger than 1,000, only 1,000 results are returned. If this parameter is not used,  then all items are returned. You cannot specify this parameter and the volume IDs parameter in the  same request. For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?
        /// The IDs of the volumes. Default: Describes all your volumes.
        @OptionalCustomCoding<EC2ArrayCoder<_VolumeIdsEncoding, String>>
        public var volumeIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, volumeIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.volumeIds = volumeIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case volumeIds = "VolumeId"
        }
    }

    public struct DescribeVolumeStatusResult: AWSDecodableShape {
        public struct _VolumeStatusesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to include in another request to get the next page of items.  This value is null when there are no more items to return.
        public let nextToken: String?
        /// Information about the status of the volumes.
        @OptionalCustomCoding<EC2ArrayCoder<_VolumeStatusesEncoding, VolumeStatusItem>>
        public var volumeStatuses: [VolumeStatusItem]?

        public init(nextToken: String? = nil, volumeStatuses: [VolumeStatusItem]? = nil) {
            self.nextToken = nextToken
            self.volumeStatuses = volumeStatuses
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case volumeStatuses = "volumeStatusSet"
        }
    }

    public struct DescribeVolumesModificationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VolumeIdsEncoding: ArrayCoderProperties { public static let member = "VolumeId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    modification-state - The current modification state (modifying |  optimizing | completed | failed).    original-iops - The original IOPS rate of the volume.    original-size - The original size of the volume, in GiB.    original-volume-type - The original volume type of the volume (standard |  io1 | io2 | gp2 | sc1 | st1).    originalMultiAttachEnabled - Indicates whether Multi-Attach support was enabled (true | false).    start-time - The modification start time.    target-iops - The target IOPS rate of the volume.    target-size - The target size of the volume, in GiB.    target-volume-type - The target volume type of the volume (standard |  io1 | io2 | gp2 | sc1 | st1).    targetMultiAttachEnabled - Indicates whether Multi-Attach support is to be enabled (true | false).    volume-id - The ID of the volume.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results (up to a limit of 500) to be returned in a paginated request. For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned by a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?
        /// The IDs of the volumes.
        @OptionalCustomCoding<EC2ArrayCoder<_VolumeIdsEncoding, String>>
        public var volumeIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, volumeIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.volumeIds = volumeIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case volumeIds = "VolumeId"
        }
    }

    public struct DescribeVolumesModificationsResult: AWSDecodableShape {
        public struct _VolumesModificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to include in another request to get the next page of items.  This value is null if there are no more items to return.
        public let nextToken: String?
        /// Information about the volume modifications.
        @OptionalCustomCoding<EC2ArrayCoder<_VolumesModificationsEncoding, VolumeModification>>
        public var volumesModifications: [VolumeModification]?

        public init(nextToken: String? = nil, volumesModifications: [VolumeModification]? = nil) {
            self.nextToken = nextToken
            self.volumesModifications = volumesModifications
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case volumesModifications = "volumeModificationSet"
        }
    }

    public struct DescribeVolumesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VolumeIdsEncoding: ArrayCoderProperties { public static let member = "VolumeId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    attachment.attach-time - The time stamp when the attachment initiated.    attachment.delete-on-termination - Whether the volume is deleted on instance termination.    attachment.device - The device name specified in the block device mapping (for example, /dev/sda1).    attachment.instance-id - The ID of the instance the volume is attached to.    attachment.status - The attachment state (attaching | attached | detaching).    availability-zone - The Availability Zone in which the volume was created.    create-time - The time stamp when the volume was created.    encrypted - Indicates whether the volume is encrypted (true | false)    multi-attach-enabled - Indicates whether the volume is enabled for Multi-Attach (true 			| false)    fast-restored - Indicates whether the volume was created from a  snapshot that is enabled for fast snapshot restore (true |  false).    size - The size of the volume, in GiB.    snapshot-id - The snapshot from which the volume was created.    status - The state of the volume (creating | available | in-use | deleting | deleted | error).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    volume-id - The volume ID.    volume-type - The Amazon EBS volume type (gp2 | gp3 | io1 | io2 |  st1 | sc1| standard)
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of volumes to return for this request.  This value can be between 5 and 500; if you specify a value larger than 500, only 500 items are returned.  If this parameter is not used, then all items are returned. You cannot specify this parameter and the volume IDs parameter in the same request. For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request.  Pagination continues from the end of the items returned from the previous request.
        public let nextToken: String?
        /// The volume IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_VolumeIdsEncoding, String>>
        public var volumeIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, volumeIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.volumeIds = volumeIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case volumeIds = "VolumeId"
        }
    }

    public struct DescribeVolumesResult: AWSDecodableShape {
        public struct _VolumesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to include in another request to get the next page of items.  This value is null when there are no more items to return.
        public let nextToken: String?
        /// Information about the volumes.
        @OptionalCustomCoding<EC2ArrayCoder<_VolumesEncoding, Volume>>
        public var volumes: [Volume]?

        public init(nextToken: String? = nil, volumes: [Volume]? = nil) {
            self.nextToken = nextToken
            self.volumes = volumes
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case volumes = "volumeSet"
        }
    }

    public struct DescribeVpcAttributeRequest: AWSEncodableShape {
        /// The VPC attribute.
        public let attribute: VpcAttributeName?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(attribute: VpcAttributeName? = nil, dryRun: Bool? = nil, vpcId: String? = nil) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case dryRun = "dryRun"
            case vpcId = "VpcId"
        }
    }

    public struct DescribeVpcAttributeResult: AWSDecodableShape {
        /// Indicates whether the instances launched in the VPC get DNS hostnames.
        /// 				If this attribute is true, instances in the VPC get DNS hostnames;
        /// 				otherwise, they do not.
        public let enableDnsHostnames: AttributeBooleanValue?
        /// Indicates whether DNS resolution is enabled for
        /// 				the VPC. If this attribute is true, the Amazon DNS server
        /// 				resolves DNS hostnames for your instances to their corresponding
        /// 				IP addresses; otherwise, it does not.
        public let enableDnsSupport: AttributeBooleanValue?
        /// Indicates whether Network Address Usage metrics are enabled for your VPC.
        public let enableNetworkAddressUsageMetrics: AttributeBooleanValue?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(enableDnsHostnames: AttributeBooleanValue? = nil, enableDnsSupport: AttributeBooleanValue? = nil, enableNetworkAddressUsageMetrics: AttributeBooleanValue? = nil, vpcId: String? = nil) {
            self.enableDnsHostnames = enableDnsHostnames
            self.enableDnsSupport = enableDnsSupport
            self.enableNetworkAddressUsageMetrics = enableNetworkAddressUsageMetrics
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case enableDnsHostnames = "enableDnsHostnames"
            case enableDnsSupport = "enableDnsSupport"
            case enableNetworkAddressUsageMetrics = "enableNetworkAddressUsageMetrics"
            case vpcId = "vpcId"
        }
    }

    public struct DescribeVpcClassicLinkDnsSupportRequest: AWSEncodableShape {
        public struct _VpcIdsEncoding: ArrayCoderProperties { public static let member = "VpcId" }

        /// The maximum number of items to return for this request.
        /// 	To get the next page of items, make another request with the token returned in the output.
        /// 	For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?
        /// The IDs of the VPCs.
        @OptionalCustomCoding<EC2ArrayCoder<_VpcIdsEncoding, String>>
        public var vpcIds: [String]?

        public init(maxResults: Int? = nil, nextToken: String? = nil, vpcIds: [String]? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.vpcIds = vpcIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 255)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1024)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case vpcIds = "VpcIds"
        }
    }

    public struct DescribeVpcClassicLinkDnsSupportResult: AWSDecodableShape {
        public struct _VpcsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?
        /// Information about the ClassicLink DNS support status of the VPCs.
        @OptionalCustomCoding<EC2ArrayCoder<_VpcsEncoding, ClassicLinkDnsSupport>>
        public var vpcs: [ClassicLinkDnsSupport]?

        public init(nextToken: String? = nil, vpcs: [ClassicLinkDnsSupport]? = nil) {
            self.nextToken = nextToken
            self.vpcs = vpcs
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case vpcs = "vpcs"
        }
    }

    public struct DescribeVpcClassicLinkRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VpcIdsEncoding: ArrayCoderProperties { public static let member = "VpcId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    is-classic-link-enabled - Whether the VPC is enabled for ClassicLink
        /// 					   (true | false).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The VPCs for which you want to describe the ClassicLink status.
        @OptionalCustomCoding<EC2ArrayCoder<_VpcIdsEncoding, String>>
        public var vpcIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, vpcIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.vpcIds = vpcIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case vpcIds = "VpcId"
        }
    }

    public struct DescribeVpcClassicLinkResult: AWSDecodableShape {
        public struct _VpcsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ClassicLink status of the VPCs.
        @OptionalCustomCoding<EC2ArrayCoder<_VpcsEncoding, VpcClassicLink>>
        public var vpcs: [VpcClassicLink]?

        public init(vpcs: [VpcClassicLink]? = nil) {
            self.vpcs = vpcs
        }

        private enum CodingKeys: String, CodingKey {
            case vpcs = "vpcSet"
        }
    }

    public struct DescribeVpcEndpointConnectionNotificationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The ID of the notification.
        public let connectionNotificationId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    connection-notification-arn - The ARN of the SNS topic for the notification.    connection-notification-id - The ID of the notification.    connection-notification-state - The state of the notification (Enabled | Disabled).    connection-notification-type - The type of notification (Topic).    service-id - The ID of the endpoint service.    vpc-endpoint-id - The ID of the VPC endpoint.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another request with the returned NextToken value.
        public let maxResults: Int?
        /// The token to request the next page of results.
        public let nextToken: String?

        public init(connectionNotificationId: String? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.connectionNotificationId = connectionNotificationId
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case connectionNotificationId = "ConnectionNotificationId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeVpcEndpointConnectionNotificationsResult: AWSDecodableShape {
        public struct _ConnectionNotificationSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The notifications.
        @OptionalCustomCoding<EC2ArrayCoder<_ConnectionNotificationSetEncoding, ConnectionNotification>>
        public var connectionNotificationSet: [ConnectionNotification]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(connectionNotificationSet: [ConnectionNotification]? = nil, nextToken: String? = nil) {
            self.connectionNotificationSet = connectionNotificationSet
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case connectionNotificationSet = "connectionNotificationSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeVpcEndpointConnectionsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    ip-address-type - The IP address type (ipv4 | ipv6).    service-id - The ID of the service.    vpc-endpoint-owner - The ID of the Amazon Web Services account ID
        /// 		        that owns the endpoint.    vpc-endpoint-state - The state of the endpoint
        /// 			        (pendingAcceptance | pending |
        /// 			        available | deleting | deleted |
        /// 			        rejected | failed).    vpc-endpoint-id - The ID of the endpoint.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results are returned.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeVpcEndpointConnectionsResult: AWSDecodableShape {
        public struct _VpcEndpointConnectionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the VPC endpoint connections.
        @OptionalCustomCoding<EC2ArrayCoder<_VpcEndpointConnectionsEncoding, VpcEndpointConnection>>
        public var vpcEndpointConnections: [VpcEndpointConnection]?

        public init(nextToken: String? = nil, vpcEndpointConnections: [VpcEndpointConnection]? = nil) {
            self.nextToken = nextToken
            self.vpcEndpointConnections = vpcEndpointConnections
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case vpcEndpointConnections = "vpcEndpointConnectionSet"
        }
    }

    public struct DescribeVpcEndpointServiceConfigurationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _ServiceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    service-name - The name of the service.    service-id - The ID of the service.    service-state - The state of the service (Pending | Available | Deleting | Deleted | Failed).     supported-ip-address-types - The IP address type (ipv4 | ipv6).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results are returned.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// The IDs of the endpoint services.
        @OptionalCustomCoding<EC2ArrayCoder<_ServiceIdsEncoding, String>>
        public var serviceIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, serviceIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.serviceIds = serviceIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case serviceIds = "ServiceId"
        }
    }

    public struct DescribeVpcEndpointServiceConfigurationsResult: AWSDecodableShape {
        public struct _ServiceConfigurationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the services.
        @OptionalCustomCoding<EC2ArrayCoder<_ServiceConfigurationsEncoding, ServiceConfiguration>>
        public var serviceConfigurations: [ServiceConfiguration]?

        public init(nextToken: String? = nil, serviceConfigurations: [ServiceConfiguration]? = nil) {
            self.nextToken = nextToken
            self.serviceConfigurations = serviceConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case serviceConfigurations = "serviceConfigurationSet"
        }
    }

    public struct DescribeVpcEndpointServicePermissionsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    principal - The ARN of the principal.    principal-type - The principal type (All |
        /// 						Service | OrganizationUnit | Account
        /// 					| User | Role).
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results are returned.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// The ID of the service.
        public let serviceId: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, serviceId: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.serviceId = serviceId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case serviceId = "ServiceId"
        }
    }

    public struct DescribeVpcEndpointServicePermissionsResult: AWSDecodableShape {
        public struct _AllowedPrincipalsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the allowed principals.
        @OptionalCustomCoding<EC2ArrayCoder<_AllowedPrincipalsEncoding, AllowedPrincipal>>
        public var allowedPrincipals: [AllowedPrincipal]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(allowedPrincipals: [AllowedPrincipal]? = nil, nextToken: String? = nil) {
            self.allowedPrincipals = allowedPrincipals
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case allowedPrincipals = "allowedPrincipals"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeVpcEndpointServicesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _ServiceNamesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    owner - The ID or alias of the Amazon Web Services account that owns  the service.    service-name - The name of the service.    service-type - The type of service (Interface | Gateway | GatewayLoadBalancer).    supported-ip-address-types - The IP address type (ipv4 | ipv6).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. Constraint: If the value is greater than 1,000, we return only 1,000 items.
        public let maxResults: Int?
        /// The token for the next set of items to return. (You received this token from a prior call.)
        public let nextToken: String?
        /// The service names.
        @OptionalCustomCoding<EC2ArrayCoder<_ServiceNamesEncoding, String>>
        public var serviceNames: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, serviceNames: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.serviceNames = serviceNames
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case serviceNames = "ServiceName"
        }
    }

    public struct DescribeVpcEndpointServicesResult: AWSDecodableShape {
        public struct _ServiceDetailsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ServiceNamesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// Information about the service.
        @OptionalCustomCoding<EC2ArrayCoder<_ServiceDetailsEncoding, ServiceDetail>>
        public var serviceDetails: [ServiceDetail]?
        /// The supported services.
        @OptionalCustomCoding<EC2ArrayCoder<_ServiceNamesEncoding, String>>
        public var serviceNames: [String]?

        public init(nextToken: String? = nil, serviceDetails: [ServiceDetail]? = nil, serviceNames: [String]? = nil) {
            self.nextToken = nextToken
            self.serviceDetails = serviceDetails
            self.serviceNames = serviceNames
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case serviceDetails = "serviceDetailSet"
            case serviceNames = "serviceNameSet"
        }
    }

    public struct DescribeVpcEndpointsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VpcEndpointIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    ip-address-type - The IP address type (ipv4 | ipv6).    service-name - The name of the service.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC in which the endpoint resides.    vpc-endpoint-id - The ID of the endpoint.    vpc-endpoint-state - The state of the endpoint (pendingAcceptance | pending | available | deleting | deleted | rejected | failed).    vpc-endpoint-type - The type of VPC endpoint (Interface | Gateway | GatewayLoadBalancer).
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. Constraint: If the value is greater than 1,000, we return only 1,000 items.
        public let maxResults: Int?
        /// The token for the next set of items to return. (You received this token from a prior call.)
        public let nextToken: String?
        /// The IDs of the VPC endpoints.
        @OptionalCustomCoding<EC2ArrayCoder<_VpcEndpointIdsEncoding, String>>
        public var vpcEndpointIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, vpcEndpointIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.vpcEndpointIds = vpcEndpointIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case vpcEndpointIds = "VpcEndpointId"
        }
    }

    public struct DescribeVpcEndpointsResult: AWSDecodableShape {
        public struct _VpcEndpointsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// Information about the endpoints.
        @OptionalCustomCoding<EC2ArrayCoder<_VpcEndpointsEncoding, VpcEndpoint>>
        public var vpcEndpoints: [VpcEndpoint]?

        public init(nextToken: String? = nil, vpcEndpoints: [VpcEndpoint]? = nil) {
            self.nextToken = nextToken
            self.vpcEndpoints = vpcEndpoints
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case vpcEndpoints = "vpcEndpointSet"
        }
    }

    public struct DescribeVpcPeeringConnectionsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VpcPeeringConnectionIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    accepter-vpc-info.cidr-block - The IPv4 CIDR block of the accepter VPC.    accepter-vpc-info.owner-id - The ID of the Amazon Web Services account that owns the accepter VPC.    accepter-vpc-info.vpc-id - The ID of the accepter VPC.    expiration-time - The expiration date and time for the VPC peering connection.    requester-vpc-info.cidr-block - The IPv4 CIDR block of the requester's VPC.    requester-vpc-info.owner-id - The ID of the Amazon Web Services account that owns the requester VPC.    requester-vpc-info.vpc-id - The ID of the requester VPC.    status-code - The status of the VPC peering connection (pending-acceptance | failed | expired | provisioning | active | deleting | deleted | rejected).    status-message - A message that provides more information about the status of the VPC peering connection, if applicable.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-peering-connection-id - The ID of the VPC peering connection.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request.
        /// 	To get the next page of items, make another request with the token returned in the output.
        /// 	For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?
        /// The IDs of the VPC peering connections. Default: Describes all your VPC peering connections.
        @OptionalCustomCoding<EC2ArrayCoder<_VpcPeeringConnectionIdsEncoding, String>>
        public var vpcPeeringConnectionIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, vpcPeeringConnectionIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.vpcPeeringConnectionIds = vpcPeeringConnectionIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case vpcPeeringConnectionIds = "VpcPeeringConnectionId"
        }
    }

    public struct DescribeVpcPeeringConnectionsResult: AWSDecodableShape {
        public struct _VpcPeeringConnectionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?
        /// Information about the VPC peering connections.
        @OptionalCustomCoding<EC2ArrayCoder<_VpcPeeringConnectionsEncoding, VpcPeeringConnection>>
        public var vpcPeeringConnections: [VpcPeeringConnection]?

        public init(nextToken: String? = nil, vpcPeeringConnections: [VpcPeeringConnection]? = nil) {
            self.nextToken = nextToken
            self.vpcPeeringConnections = vpcPeeringConnections
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case vpcPeeringConnections = "vpcPeeringConnectionSet"
        }
    }

    public struct DescribeVpcsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VpcIdsEncoding: ArrayCoderProperties { public static let member = "VpcId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    cidr - The primary IPv4 CIDR block of the VPC. The CIDR block you specify must exactly match the VPC's CIDR block for information to be returned for the VPC. Must contain the slash followed by one or two digits (for example, /28).    cidr-block-association.cidr-block - An IPv4 CIDR block associated with the VPC.    cidr-block-association.association-id - The association ID for an IPv4 CIDR block associated with the VPC.    cidr-block-association.state - The state of an IPv4 CIDR block associated with the VPC.    dhcp-options-id - The ID of a set of DHCP options.    ipv6-cidr-block-association.ipv6-cidr-block - An IPv6 CIDR block associated with the VPC.    ipv6-cidr-block-association.ipv6-pool - The ID of the IPv6 address pool from which the IPv6 CIDR block is allocated.    ipv6-cidr-block-association.association-id - The association ID for an IPv6 CIDR block associated with the VPC.    ipv6-cidr-block-association.state - The state of an IPv6 CIDR block associated with the VPC.    is-default - Indicates whether the VPC is the default VPC.    owner-id - The ID of the Amazon Web Services account that owns the VPC.    state - The state of the VPC (pending | available).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request.
        /// 	To get the next page of items, make another request with the token returned in the output.
        /// 	For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?
        /// The IDs of the VPCs. Default: Describes all your VPCs.
        @OptionalCustomCoding<EC2ArrayCoder<_VpcIdsEncoding, String>>
        public var vpcIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, vpcIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.vpcIds = vpcIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case vpcIds = "VpcId"
        }
    }

    public struct DescribeVpcsResult: AWSDecodableShape {
        public struct _VpcsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?
        /// Information about one or more VPCs.
        @OptionalCustomCoding<EC2ArrayCoder<_VpcsEncoding, Vpc>>
        public var vpcs: [Vpc]?

        public init(nextToken: String? = nil, vpcs: [Vpc]? = nil) {
            self.nextToken = nextToken
            self.vpcs = vpcs
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case vpcs = "vpcSet"
        }
    }

    public struct DescribeVpnConnectionsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VpnConnectionIdsEncoding: ArrayCoderProperties { public static let member = "VpnConnectionId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    customer-gateway-configuration - The configuration information for the customer gateway.    customer-gateway-id - The ID of a customer gateway associated with the VPN connection.    state - The state of the VPN connection (pending | available | deleting | deleted).    option.static-routes-only - Indicates whether the connection has static routes only. Used for devices that do not support Border Gateway Protocol (BGP).    route.destination-cidr-block - The destination CIDR block. This corresponds to the subnet used in a customer data center.    bgp-asn - The BGP Autonomous System Number (ASN) associated with a BGP device.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    type - The type of VPN connection. Currently the only supported type is ipsec.1.    vpn-connection-id - The ID of the VPN connection.    vpn-gateway-id - The ID of a virtual private gateway associated with the VPN connection.    transit-gateway-id - The ID of a transit gateway associated with the VPN connection.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// One or more VPN connection IDs. Default: Describes your VPN connections.
        @OptionalCustomCoding<EC2ArrayCoder<_VpnConnectionIdsEncoding, String>>
        public var vpnConnectionIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, vpnConnectionIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.vpnConnectionIds = vpnConnectionIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case vpnConnectionIds = "VpnConnectionId"
        }
    }

    public struct DescribeVpnConnectionsResult: AWSDecodableShape {
        public struct _VpnConnectionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about one or more VPN connections.
        @OptionalCustomCoding<EC2ArrayCoder<_VpnConnectionsEncoding, VpnConnection>>
        public var vpnConnections: [VpnConnection]?

        public init(vpnConnections: [VpnConnection]? = nil) {
            self.vpnConnections = vpnConnections
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnections = "vpnConnectionSet"
        }
    }

    public struct DescribeVpnGatewaysRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VpnGatewayIdsEncoding: ArrayCoderProperties { public static let member = "VpnGatewayId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    amazon-side-asn - The Autonomous System Number (ASN) for the Amazon side of the gateway.    attachment.state - The current state of the attachment between the gateway and the VPC (attaching | attached | detaching | detached).    attachment.vpc-id - The ID of an attached VPC.    availability-zone - The Availability Zone for the virtual private gateway (if applicable).    state - The state of the virtual private gateway (pending | available | deleting | deleted).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    type - The type of virtual private gateway. Currently the only supported type is ipsec.1.    vpn-gateway-id - The ID of the virtual private gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// One or more virtual private gateway IDs. Default: Describes all your virtual private gateways.
        @OptionalCustomCoding<EC2ArrayCoder<_VpnGatewayIdsEncoding, String>>
        public var vpnGatewayIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, vpnGatewayIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.vpnGatewayIds = vpnGatewayIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case vpnGatewayIds = "VpnGatewayId"
        }
    }

    public struct DescribeVpnGatewaysResult: AWSDecodableShape {
        public struct _VpnGatewaysEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about one or more virtual private gateways.
        @OptionalCustomCoding<EC2ArrayCoder<_VpnGatewaysEncoding, VpnGateway>>
        public var vpnGateways: [VpnGateway]?

        public init(vpnGateways: [VpnGateway]? = nil) {
            self.vpnGateways = vpnGateways
        }

        private enum CodingKeys: String, CodingKey {
            case vpnGateways = "vpnGatewaySet"
        }
    }

    public struct DestinationOptionsRequest: AWSEncodableShape {
        /// The format for the flow log. The default is plain-text.
        public let fileFormat: DestinationFileFormat?
        /// Indicates whether to use Hive-compatible prefixes for flow logs stored in Amazon S3. The default is false.
        public let hiveCompatiblePartitions: Bool?
        /// Indicates whether to partition the flow log per hour. This reduces the cost and response  time for queries. The default is false.
        public let perHourPartition: Bool?

        public init(fileFormat: DestinationFileFormat? = nil, hiveCompatiblePartitions: Bool? = nil, perHourPartition: Bool? = nil) {
            self.fileFormat = fileFormat
            self.hiveCompatiblePartitions = hiveCompatiblePartitions
            self.perHourPartition = perHourPartition
        }

        private enum CodingKeys: String, CodingKey {
            case fileFormat = "FileFormat"
            case hiveCompatiblePartitions = "HiveCompatiblePartitions"
            case perHourPartition = "PerHourPartition"
        }
    }

    public struct DestinationOptionsResponse: AWSDecodableShape {
        /// The format for the flow log.
        public let fileFormat: DestinationFileFormat?
        /// Indicates whether to use Hive-compatible prefixes for flow logs stored in Amazon S3.
        public let hiveCompatiblePartitions: Bool?
        /// Indicates whether to partition the flow log per hour.
        public let perHourPartition: Bool?

        public init(fileFormat: DestinationFileFormat? = nil, hiveCompatiblePartitions: Bool? = nil, perHourPartition: Bool? = nil) {
            self.fileFormat = fileFormat
            self.hiveCompatiblePartitions = hiveCompatiblePartitions
            self.perHourPartition = perHourPartition
        }

        private enum CodingKeys: String, CodingKey {
            case fileFormat = "fileFormat"
            case hiveCompatiblePartitions = "hiveCompatiblePartitions"
            case perHourPartition = "perHourPartition"
        }
    }

    public struct DetachClassicLinkVpcRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance to unlink from the VPC.
        public let instanceId: String?
        /// The ID of the VPC to which the instance is linked.
        public let vpcId: String?

        public init(dryRun: Bool? = nil, instanceId: String? = nil, vpcId: String? = nil) {
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceId = "instanceId"
            case vpcId = "vpcId"
        }
    }

    public struct DetachClassicLinkVpcResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct DetachInternetGatewayRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the internet gateway.
        public let internetGatewayId: String?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(dryRun: Bool? = nil, internetGatewayId: String? = nil, vpcId: String? = nil) {
            self.dryRun = dryRun
            self.internetGatewayId = internetGatewayId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case internetGatewayId = "internetGatewayId"
            case vpcId = "vpcId"
        }
    }

    public struct DetachNetworkInterfaceRequest: AWSEncodableShape {
        /// The ID of the attachment.
        public let attachmentId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specifies whether to force a detachment.    Use the Force parameter only as a last resort to detach a network interface from a failed instance.    If you use the Force parameter to detach a network interface, you might not be able to attach a different network interface to the same index on the instance without first stopping and starting the instance.   If you force the detachment of a network interface, the instance metadata might not get updated. This means that the attributes associated with the detached network interface might still be visible. The instance metadata will get updated when you stop and start the instance.
        public let force: Bool?

        public init(attachmentId: String? = nil, dryRun: Bool? = nil, force: Bool? = nil) {
            self.attachmentId = attachmentId
            self.dryRun = dryRun
            self.force = force
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentId = "attachmentId"
            case dryRun = "dryRun"
            case force = "force"
        }
    }

    public struct DetachVerifiedAccessTrustProviderRequest: AWSEncodableShape {
        /// A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Verified Access instance.
        public let verifiedAccessInstanceId: String?
        /// The ID of the Verified Access trust provider.
        public let verifiedAccessTrustProviderId: String?

        public init(clientToken: String? = DetachVerifiedAccessTrustProviderRequest.idempotencyToken(), dryRun: Bool? = nil, verifiedAccessInstanceId: String? = nil, verifiedAccessTrustProviderId: String? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.verifiedAccessInstanceId = verifiedAccessInstanceId
            self.verifiedAccessTrustProviderId = verifiedAccessTrustProviderId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case verifiedAccessInstanceId = "VerifiedAccessInstanceId"
            case verifiedAccessTrustProviderId = "VerifiedAccessTrustProviderId"
        }
    }

    public struct DetachVerifiedAccessTrustProviderResult: AWSDecodableShape {
        /// Details about the Verified Access instance.
        public let verifiedAccessInstance: VerifiedAccessInstance?
        /// Details about the Verified Access trust provider.
        public let verifiedAccessTrustProvider: VerifiedAccessTrustProvider?

        public init(verifiedAccessInstance: VerifiedAccessInstance? = nil, verifiedAccessTrustProvider: VerifiedAccessTrustProvider? = nil) {
            self.verifiedAccessInstance = verifiedAccessInstance
            self.verifiedAccessTrustProvider = verifiedAccessTrustProvider
        }

        private enum CodingKeys: String, CodingKey {
            case verifiedAccessInstance = "verifiedAccessInstance"
            case verifiedAccessTrustProvider = "verifiedAccessTrustProvider"
        }
    }

    public struct DetachVolumeRequest: AWSEncodableShape {
        /// The device name.
        public let device: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Forces detachment if the previous detachment attempt did not occur cleanly (for example, logging into an instance, unmounting the volume, and detaching normally). This option can lead to data loss or a corrupted file system. Use this option only as a last resort to detach a volume from a failed instance. The instance won't have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures.
        public let force: Bool?
        /// The ID of the instance. If you are detaching a Multi-Attach enabled volume, you must specify an instance ID.
        public let instanceId: String?
        /// The ID of the volume.
        public let volumeId: String?

        public init(device: String? = nil, dryRun: Bool? = nil, force: Bool? = nil, instanceId: String? = nil, volumeId: String? = nil) {
            self.device = device
            self.dryRun = dryRun
            self.force = force
            self.instanceId = instanceId
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case device = "Device"
            case dryRun = "dryRun"
            case force = "Force"
            case instanceId = "InstanceId"
            case volumeId = "VolumeId"
        }
    }

    public struct DetachVpnGatewayRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String?
        /// The ID of the virtual private gateway.
        public let vpnGatewayId: String?

        public init(dryRun: Bool? = nil, vpcId: String? = nil, vpnGatewayId: String? = nil) {
            self.dryRun = dryRun
            self.vpcId = vpcId
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpcId = "VpcId"
            case vpnGatewayId = "VpnGatewayId"
        }
    }

    public struct DeviceOptions: AWSDecodableShape {
        ///  The URL Amazon Web Services Verified Access will use to verify the authenticity of the device tokens.
        public let publicSigningKeyUrl: String?
        /// The ID of the tenant application with the device-identity provider.
        public let tenantId: String?

        public init(publicSigningKeyUrl: String? = nil, tenantId: String? = nil) {
            self.publicSigningKeyUrl = publicSigningKeyUrl
            self.tenantId = tenantId
        }

        private enum CodingKeys: String, CodingKey {
            case publicSigningKeyUrl = "publicSigningKeyUrl"
            case tenantId = "tenantId"
        }
    }

    public struct DhcpConfiguration: AWSDecodableShape {
        public struct _ValuesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The name of a DHCP option.
        public let key: String?
        /// The values for the DHCP option.
        @OptionalCustomCoding<EC2ArrayCoder<_ValuesEncoding, AttributeValue>>
        public var values: [AttributeValue]?

        public init(key: String? = nil, values: [AttributeValue]? = nil) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case values = "valueSet"
        }
    }

    public struct DhcpOptions: AWSDecodableShape {
        public struct _DhcpConfigurationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The DHCP options in the set.
        @OptionalCustomCoding<EC2ArrayCoder<_DhcpConfigurationsEncoding, DhcpConfiguration>>
        public var dhcpConfigurations: [DhcpConfiguration]?
        /// The ID of the set of DHCP options.
        public let dhcpOptionsId: String?
        /// The ID of the Amazon Web Services account that owns the DHCP options set.
        public let ownerId: String?
        /// Any tags assigned to the DHCP options set.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(dhcpConfigurations: [DhcpConfiguration]? = nil, dhcpOptionsId: String? = nil, ownerId: String? = nil, tags: [Tag]? = nil) {
            self.dhcpConfigurations = dhcpConfigurations
            self.dhcpOptionsId = dhcpOptionsId
            self.ownerId = ownerId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpConfigurations = "dhcpConfigurationSet"
            case dhcpOptionsId = "dhcpOptionsId"
            case ownerId = "ownerId"
            case tags = "tagSet"
        }
    }

    public struct DirectoryServiceAuthentication: AWSDecodableShape {
        /// The ID of the Active Directory used for authentication.
        public let directoryId: String?

        public init(directoryId: String? = nil) {
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "directoryId"
        }
    }

    public struct DirectoryServiceAuthenticationRequest: AWSEncodableShape {
        /// The ID of the Active Directory to be used for authentication.
        public let directoryId: String?

        public init(directoryId: String? = nil) {
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
        }
    }

    public struct DisableAddressTransferRequest: AWSEncodableShape {
        /// The allocation ID of an Elastic IP address.
        public let allocationId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(allocationId: String? = nil, dryRun: Bool? = nil) {
            self.allocationId = allocationId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "AllocationId"
            case dryRun = "DryRun"
        }
    }

    public struct DisableAddressTransferResult: AWSDecodableShape {
        /// An Elastic IP address transfer.
        public let addressTransfer: AddressTransfer?

        public init(addressTransfer: AddressTransfer? = nil) {
            self.addressTransfer = addressTransfer
        }

        private enum CodingKeys: String, CodingKey {
            case addressTransfer = "addressTransfer"
        }
    }

    public struct DisableAwsNetworkPerformanceMetricSubscriptionRequest: AWSEncodableShape {
        /// The target Region or Availability Zone that the metric subscription is disabled for. For example, eu-north-1.
        public let destination: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The metric used for the disabled subscription.
        public let metric: MetricType?
        /// The source Region or Availability Zone that the metric subscription is disabled for. For example, us-east-1.
        public let source: String?
        /// The statistic used for the disabled subscription.
        public let statistic: StatisticType?

        public init(destination: String? = nil, dryRun: Bool? = nil, metric: MetricType? = nil, source: String? = nil, statistic: StatisticType? = nil) {
            self.destination = destination
            self.dryRun = dryRun
            self.metric = metric
            self.source = source
            self.statistic = statistic
        }

        private enum CodingKeys: String, CodingKey {
            case destination = "Destination"
            case dryRun = "DryRun"
            case metric = "Metric"
            case source = "Source"
            case statistic = "Statistic"
        }
    }

    public struct DisableAwsNetworkPerformanceMetricSubscriptionResult: AWSDecodableShape {
        /// Indicates whether the unsubscribe action was successful.
        public let output: Bool?

        public init(output: Bool? = nil) {
            self.output = output
        }

        private enum CodingKeys: String, CodingKey {
            case output = "output"
        }
    }

    public struct DisableEbsEncryptionByDefaultRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct DisableEbsEncryptionByDefaultResult: AWSDecodableShape {
        /// The updated status of encryption by default.
        public let ebsEncryptionByDefault: Bool?

        public init(ebsEncryptionByDefault: Bool? = nil) {
            self.ebsEncryptionByDefault = ebsEncryptionByDefault
        }

        private enum CodingKeys: String, CodingKey {
            case ebsEncryptionByDefault = "ebsEncryptionByDefault"
        }
    }

    public struct DisableFastLaunchRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Forces the image settings to turn off Windows fast launch for your Windows AMI. This parameter overrides
        /// 			any errors that are encountered while cleaning up resources in your account.
        public let force: Bool?
        /// Specify the ID of the image for which to disable Windows fast launch.
        public let imageId: String?

        public init(dryRun: Bool? = nil, force: Bool? = nil, imageId: String? = nil) {
            self.dryRun = dryRun
            self.force = force
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case force = "Force"
            case imageId = "ImageId"
        }
    }

    public struct DisableFastLaunchResult: AWSDecodableShape {
        /// The ID of the image for which Windows fast launch was disabled.
        public let imageId: String?
        /// The launch template that was used to launch Windows instances from pre-provisioned snapshots.
        public let launchTemplate: FastLaunchLaunchTemplateSpecificationResponse?
        /// The maximum number of instances that Amazon EC2 can launch at the same time to
        /// 			create pre-provisioned snapshots for Windows fast launch.
        public let maxParallelLaunches: Int?
        /// The owner of the Windows AMI for which Windows fast launch was disabled.
        public let ownerId: String?
        /// The pre-provisioning resource type that must be cleaned after turning off Windows fast launch
        /// 			for the Windows AMI. Supported values include: snapshot.
        public let resourceType: FastLaunchResourceType?
        /// Parameters that were used for Windows fast launch for the Windows AMI before
        /// 			Windows fast launch was disabled. This informs the clean-up process.
        public let snapshotConfiguration: FastLaunchSnapshotConfigurationResponse?
        /// The current state of Windows fast launch for the specified Windows AMI.
        public let state: FastLaunchStateCode?
        /// The reason that the state changed for Windows fast launch for the Windows AMI.
        public let stateTransitionReason: String?
        /// The time that the state changed for Windows fast launch for the Windows AMI.
        public let stateTransitionTime: Date?

        public init(imageId: String? = nil, launchTemplate: FastLaunchLaunchTemplateSpecificationResponse? = nil, maxParallelLaunches: Int? = nil, ownerId: String? = nil, resourceType: FastLaunchResourceType? = nil, snapshotConfiguration: FastLaunchSnapshotConfigurationResponse? = nil, state: FastLaunchStateCode? = nil, stateTransitionReason: String? = nil, stateTransitionTime: Date? = nil) {
            self.imageId = imageId
            self.launchTemplate = launchTemplate
            self.maxParallelLaunches = maxParallelLaunches
            self.ownerId = ownerId
            self.resourceType = resourceType
            self.snapshotConfiguration = snapshotConfiguration
            self.state = state
            self.stateTransitionReason = stateTransitionReason
            self.stateTransitionTime = stateTransitionTime
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "imageId"
            case launchTemplate = "launchTemplate"
            case maxParallelLaunches = "maxParallelLaunches"
            case ownerId = "ownerId"
            case resourceType = "resourceType"
            case snapshotConfiguration = "snapshotConfiguration"
            case state = "state"
            case stateTransitionReason = "stateTransitionReason"
            case stateTransitionTime = "stateTransitionTime"
        }
    }

    public struct DisableFastSnapshotRestoreErrorItem: AWSDecodableShape {
        public struct _FastSnapshotRestoreStateErrorsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The errors.
        @OptionalCustomCoding<EC2ArrayCoder<_FastSnapshotRestoreStateErrorsEncoding, DisableFastSnapshotRestoreStateErrorItem>>
        public var fastSnapshotRestoreStateErrors: [DisableFastSnapshotRestoreStateErrorItem]?
        /// The ID of the snapshot.
        public let snapshotId: String?

        public init(fastSnapshotRestoreStateErrors: [DisableFastSnapshotRestoreStateErrorItem]? = nil, snapshotId: String? = nil) {
            self.fastSnapshotRestoreStateErrors = fastSnapshotRestoreStateErrors
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case fastSnapshotRestoreStateErrors = "fastSnapshotRestoreStateErrorSet"
            case snapshotId = "snapshotId"
        }
    }

    public struct DisableFastSnapshotRestoreStateError: AWSDecodableShape {
        /// The error code.
        public let code: String?
        /// The error message.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct DisableFastSnapshotRestoreStateErrorItem: AWSDecodableShape {
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The error.
        public let error: DisableFastSnapshotRestoreStateError?

        public init(availabilityZone: String? = nil, error: DisableFastSnapshotRestoreStateError? = nil) {
            self.availabilityZone = availabilityZone
            self.error = error
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case error = "error"
        }
    }

    public struct DisableFastSnapshotRestoreSuccessItem: AWSDecodableShape {
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The time at which fast snapshot restores entered the disabled state.
        public let disabledTime: Date?
        /// The time at which fast snapshot restores entered the disabling state.
        public let disablingTime: Date?
        /// The time at which fast snapshot restores entered the enabled state.
        public let enabledTime: Date?
        /// The time at which fast snapshot restores entered the enabling state.
        public let enablingTime: Date?
        /// The time at which fast snapshot restores entered the optimizing state.
        public let optimizingTime: Date?
        /// The Amazon Web Services owner alias that enabled fast snapshot restores on the snapshot. This is intended for future use.
        public let ownerAlias: String?
        /// The ID of the Amazon Web Services account that enabled fast snapshot restores on the snapshot.
        public let ownerId: String?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The state of fast snapshot restores for the snapshot.
        public let state: FastSnapshotRestoreStateCode?
        /// The reason for the state transition. The possible values are as follows:    Client.UserInitiated - The state successfully transitioned to enabling or disabling.    Client.UserInitiated - Lifecycle state transition - The state successfully transitioned  to optimizing, enabled, or disabled.
        public let stateTransitionReason: String?

        public init(availabilityZone: String? = nil, disabledTime: Date? = nil, disablingTime: Date? = nil, enabledTime: Date? = nil, enablingTime: Date? = nil, optimizingTime: Date? = nil, ownerAlias: String? = nil, ownerId: String? = nil, snapshotId: String? = nil, state: FastSnapshotRestoreStateCode? = nil, stateTransitionReason: String? = nil) {
            self.availabilityZone = availabilityZone
            self.disabledTime = disabledTime
            self.disablingTime = disablingTime
            self.enabledTime = enabledTime
            self.enablingTime = enablingTime
            self.optimizingTime = optimizingTime
            self.ownerAlias = ownerAlias
            self.ownerId = ownerId
            self.snapshotId = snapshotId
            self.state = state
            self.stateTransitionReason = stateTransitionReason
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case disabledTime = "disabledTime"
            case disablingTime = "disablingTime"
            case enabledTime = "enabledTime"
            case enablingTime = "enablingTime"
            case optimizingTime = "optimizingTime"
            case ownerAlias = "ownerAlias"
            case ownerId = "ownerId"
            case snapshotId = "snapshotId"
            case state = "state"
            case stateTransitionReason = "stateTransitionReason"
        }
    }

    public struct DisableFastSnapshotRestoresRequest: AWSEncodableShape {
        public struct _AvailabilityZonesEncoding: ArrayCoderProperties { public static let member = "AvailabilityZone" }
        public struct _SourceSnapshotIdsEncoding: ArrayCoderProperties { public static let member = "SnapshotId" }

        /// One or more Availability Zones. For example, us-east-2a.
        @OptionalCustomCoding<EC2ArrayCoder<_AvailabilityZonesEncoding, String>>
        public var availabilityZones: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of one or more snapshots. For example, snap-1234567890abcdef0.
        @OptionalCustomCoding<EC2ArrayCoder<_SourceSnapshotIdsEncoding, String>>
        public var sourceSnapshotIds: [String]?

        public init(availabilityZones: [String]? = nil, dryRun: Bool? = nil, sourceSnapshotIds: [String]? = nil) {
            self.availabilityZones = availabilityZones
            self.dryRun = dryRun
            self.sourceSnapshotIds = sourceSnapshotIds
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZone"
            case dryRun = "DryRun"
            case sourceSnapshotIds = "SourceSnapshotId"
        }
    }

    public struct DisableFastSnapshotRestoresResult: AWSDecodableShape {
        public struct _SuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _UnsuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the snapshots for which fast snapshot restores were successfully disabled.
        @OptionalCustomCoding<EC2ArrayCoder<_SuccessfulEncoding, DisableFastSnapshotRestoreSuccessItem>>
        public var successful: [DisableFastSnapshotRestoreSuccessItem]?
        /// Information about the snapshots for which fast snapshot restores could not be disabled.
        @OptionalCustomCoding<EC2ArrayCoder<_UnsuccessfulEncoding, DisableFastSnapshotRestoreErrorItem>>
        public var unsuccessful: [DisableFastSnapshotRestoreErrorItem]?

        public init(successful: [DisableFastSnapshotRestoreSuccessItem]? = nil, unsuccessful: [DisableFastSnapshotRestoreErrorItem]? = nil) {
            self.successful = successful
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case successful = "successful"
            case unsuccessful = "unsuccessful"
        }
    }

    public struct DisableImageBlockPublicAccessRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct DisableImageBlockPublicAccessResult: AWSDecodableShape {
        /// Returns unblocked if the request succeeds; otherwise, it returns an error.
        public let imageBlockPublicAccessState: ImageBlockPublicAccessDisabledState?

        public init(imageBlockPublicAccessState: ImageBlockPublicAccessDisabledState? = nil) {
            self.imageBlockPublicAccessState = imageBlockPublicAccessState
        }

        private enum CodingKeys: String, CodingKey {
            case imageBlockPublicAccessState = "imageBlockPublicAccessState"
        }
    }

    public struct DisableImageDeprecationRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI.
        public let imageId: String?

        public init(dryRun: Bool? = nil, imageId: String? = nil) {
            self.dryRun = dryRun
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case imageId = "ImageId"
        }
    }

    public struct DisableImageDeprecationResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct DisableImageRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI.
        public let imageId: String?

        public init(dryRun: Bool? = nil, imageId: String? = nil) {
            self.dryRun = dryRun
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case imageId = "ImageId"
        }
    }

    public struct DisableImageResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct DisableIpamOrganizationAdminAccountRequest: AWSEncodableShape {
        /// The Organizations member account ID that you want to disable as IPAM account.
        public let delegatedAdminAccountId: String?
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(delegatedAdminAccountId: String? = nil, dryRun: Bool? = nil) {
            self.delegatedAdminAccountId = delegatedAdminAccountId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case delegatedAdminAccountId = "DelegatedAdminAccountId"
            case dryRun = "DryRun"
        }
    }

    public struct DisableIpamOrganizationAdminAccountResult: AWSDecodableShape {
        /// The result of disabling the IPAM account.
        public let success: Bool?

        public init(success: Bool? = nil) {
            self.success = success
        }

        private enum CodingKeys: String, CodingKey {
            case success = "success"
        }
    }

    public struct DisableSerialConsoleAccessRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct DisableSerialConsoleAccessResult: AWSDecodableShape {
        /// If true, access to the EC2 serial console of all instances is enabled for
        /// 			your account. If false, access to the EC2 serial console of all instances
        /// 			is disabled for your account.
        public let serialConsoleAccessEnabled: Bool?

        public init(serialConsoleAccessEnabled: Bool? = nil) {
            self.serialConsoleAccessEnabled = serialConsoleAccessEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case serialConsoleAccessEnabled = "serialConsoleAccessEnabled"
        }
    }

    public struct DisableSnapshotBlockPublicAccessRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct DisableSnapshotBlockPublicAccessResult: AWSDecodableShape {
        /// Returns unblocked if the request succeeds.
        public let state: SnapshotBlockPublicAccessState?

        public init(state: SnapshotBlockPublicAccessState? = nil) {
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
        }
    }

    public struct DisableTransitGatewayRouteTablePropagationRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the route table announcement.
        public let transitGatewayRouteTableAnnouncementId: String?
        /// The ID of the propagation route table.
        public let transitGatewayRouteTableId: String?

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableAnnouncementId: String? = nil, transitGatewayRouteTableId: String? = nil) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableAnnouncementId = transitGatewayRouteTableAnnouncementId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableAnnouncementId = "TransitGatewayRouteTableAnnouncementId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct DisableTransitGatewayRouteTablePropagationResult: AWSDecodableShape {
        /// Information about route propagation.
        public let propagation: TransitGatewayPropagation?

        public init(propagation: TransitGatewayPropagation? = nil) {
            self.propagation = propagation
        }

        private enum CodingKeys: String, CodingKey {
            case propagation = "propagation"
        }
    }

    public struct DisableVgwRoutePropagationRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the virtual private gateway.
        public let gatewayId: String?
        /// The ID of the route table.
        public let routeTableId: String?

        public init(dryRun: Bool? = nil, gatewayId: String? = nil, routeTableId: String? = nil) {
            self.dryRun = dryRun
            self.gatewayId = gatewayId
            self.routeTableId = routeTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case gatewayId = "GatewayId"
            case routeTableId = "RouteTableId"
        }
    }

    public struct DisableVpcClassicLinkDnsSupportRequest: AWSEncodableShape {
        /// The ID of the VPC.
        public let vpcId: String?

        public init(vpcId: String? = nil) {
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
        }
    }

    public struct DisableVpcClassicLinkDnsSupportResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct DisableVpcClassicLinkRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(dryRun: Bool? = nil, vpcId: String? = nil) {
            self.dryRun = dryRun
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpcId = "vpcId"
        }
    }

    public struct DisableVpcClassicLinkResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct DisassociateAddressRequest: AWSEncodableShape {
        /// The association ID. This parameter is required.
        public let associationId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Deprecated.
        public let publicIp: String?

        public init(associationId: String? = nil, dryRun: Bool? = nil, publicIp: String? = nil) {
            self.associationId = associationId
            self.dryRun = dryRun
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "AssociationId"
            case dryRun = "dryRun"
            case publicIp = "PublicIp"
        }
    }

    public struct DisassociateClientVpnTargetNetworkRequest: AWSEncodableShape {
        /// The ID of the target network association.
        public let associationId: String?
        /// The ID of the Client VPN endpoint from which to disassociate the target network.
        public let clientVpnEndpointId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(associationId: String? = nil, clientVpnEndpointId: String? = nil, dryRun: Bool? = nil) {
            self.associationId = associationId
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "AssociationId"
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
        }
    }

    public struct DisassociateClientVpnTargetNetworkResult: AWSDecodableShape {
        /// The ID of the target network association.
        public let associationId: String?
        /// The current state of the target network association.
        public let status: AssociationStatus?

        public init(associationId: String? = nil, status: AssociationStatus? = nil) {
            self.associationId = associationId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case status = "status"
        }
    }

    public struct DisassociateEnclaveCertificateIamRoleRequest: AWSEncodableShape {
        /// The ARN of the ACM certificate from which to disassociate the IAM role.
        public let certificateArn: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ARN of the IAM role to disassociate.
        public let roleArn: String?

        public init(certificateArn: String? = nil, dryRun: Bool? = nil, roleArn: String? = nil) {
            self.certificateArn = certificateArn
            self.dryRun = dryRun
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "CertificateArn"
            case dryRun = "DryRun"
            case roleArn = "RoleArn"
        }
    }

    public struct DisassociateEnclaveCertificateIamRoleResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct DisassociateIamInstanceProfileRequest: AWSEncodableShape {
        /// The ID of the IAM instance profile association.
        public let associationId: String?

        public init(associationId: String? = nil) {
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "AssociationId"
        }
    }

    public struct DisassociateIamInstanceProfileResult: AWSDecodableShape {
        /// Information about the IAM instance profile association.
        public let iamInstanceProfileAssociation: IamInstanceProfileAssociation?

        public init(iamInstanceProfileAssociation: IamInstanceProfileAssociation? = nil) {
            self.iamInstanceProfileAssociation = iamInstanceProfileAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfileAssociation = "iamInstanceProfileAssociation"
        }
    }

    public struct DisassociateInstanceEventWindowRequest: AWSEncodableShape {
        /// One or more targets to disassociate from the specified event window.
        public let associationTarget: InstanceEventWindowDisassociationRequest?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the event window.
        public let instanceEventWindowId: String?

        public init(associationTarget: InstanceEventWindowDisassociationRequest? = nil, dryRun: Bool? = nil, instanceEventWindowId: String? = nil) {
            self.associationTarget = associationTarget
            self.dryRun = dryRun
            self.instanceEventWindowId = instanceEventWindowId
        }

        private enum CodingKeys: String, CodingKey {
            case associationTarget = "AssociationTarget"
            case dryRun = "DryRun"
            case instanceEventWindowId = "InstanceEventWindowId"
        }
    }

    public struct DisassociateInstanceEventWindowResult: AWSDecodableShape {
        /// Information about the event window.
        public let instanceEventWindow: InstanceEventWindow?

        public init(instanceEventWindow: InstanceEventWindow? = nil) {
            self.instanceEventWindow = instanceEventWindow
        }

        private enum CodingKeys: String, CodingKey {
            case instanceEventWindow = "instanceEventWindow"
        }
    }

    public struct DisassociateIpamByoasnRequest: AWSEncodableShape {
        /// A public 2-byte or 4-byte ASN.
        public let asn: String?
        /// A BYOIP CIDR.
        public let cidr: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(asn: String? = nil, cidr: String? = nil, dryRun: Bool? = nil) {
            self.asn = asn
            self.cidr = cidr
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case asn = "Asn"
            case cidr = "Cidr"
            case dryRun = "DryRun"
        }
    }

    public struct DisassociateIpamByoasnResult: AWSDecodableShape {
        /// An ASN and BYOIP CIDR association.
        public let asnAssociation: AsnAssociation?

        public init(asnAssociation: AsnAssociation? = nil) {
            self.asnAssociation = asnAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case asnAssociation = "asnAssociation"
        }
    }

    public struct DisassociateIpamResourceDiscoveryRequest: AWSEncodableShape {
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A resource discovery association ID.
        public let ipamResourceDiscoveryAssociationId: String?

        public init(dryRun: Bool? = nil, ipamResourceDiscoveryAssociationId: String? = nil) {
            self.dryRun = dryRun
            self.ipamResourceDiscoveryAssociationId = ipamResourceDiscoveryAssociationId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case ipamResourceDiscoveryAssociationId = "IpamResourceDiscoveryAssociationId"
        }
    }

    public struct DisassociateIpamResourceDiscoveryResult: AWSDecodableShape {
        /// A resource discovery association.
        public let ipamResourceDiscoveryAssociation: IpamResourceDiscoveryAssociation?

        public init(ipamResourceDiscoveryAssociation: IpamResourceDiscoveryAssociation? = nil) {
            self.ipamResourceDiscoveryAssociation = ipamResourceDiscoveryAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case ipamResourceDiscoveryAssociation = "ipamResourceDiscoveryAssociation"
        }
    }

    public struct DisassociateNatGatewayAddressRequest: AWSEncodableShape {
        public struct _AssociationIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The association IDs of EIPs that have been associated with the NAT gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_AssociationIdsEncoding, String>>
        public var associationIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum amount of time to wait (in seconds) before forcibly releasing the IP addresses if connections are still in progress. Default value is 350 seconds.
        public let maxDrainDurationSeconds: Int?
        /// The ID of the NAT gateway.
        public let natGatewayId: String?

        public init(associationIds: [String]? = nil, dryRun: Bool? = nil, maxDrainDurationSeconds: Int? = nil, natGatewayId: String? = nil) {
            self.associationIds = associationIds
            self.dryRun = dryRun
            self.maxDrainDurationSeconds = maxDrainDurationSeconds
            self.natGatewayId = natGatewayId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxDrainDurationSeconds, name: "maxDrainDurationSeconds", parent: name, max: 4000)
            try self.validate(self.maxDrainDurationSeconds, name: "maxDrainDurationSeconds", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case associationIds = "AssociationId"
            case dryRun = "DryRun"
            case maxDrainDurationSeconds = "MaxDrainDurationSeconds"
            case natGatewayId = "NatGatewayId"
        }
    }

    public struct DisassociateNatGatewayAddressResult: AWSDecodableShape {
        public struct _NatGatewayAddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the NAT gateway IP addresses.
        @OptionalCustomCoding<EC2ArrayCoder<_NatGatewayAddressesEncoding, NatGatewayAddress>>
        public var natGatewayAddresses: [NatGatewayAddress]?
        /// The ID of the NAT gateway.
        public let natGatewayId: String?

        public init(natGatewayAddresses: [NatGatewayAddress]? = nil, natGatewayId: String? = nil) {
            self.natGatewayAddresses = natGatewayAddresses
            self.natGatewayId = natGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case natGatewayAddresses = "natGatewayAddressSet"
            case natGatewayId = "natGatewayId"
        }
    }

    public struct DisassociateRouteTableRequest: AWSEncodableShape {
        /// The association ID representing the current association between the route table and subnet or gateway.
        public let associationId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(associationId: String? = nil, dryRun: Bool? = nil) {
            self.associationId = associationId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case dryRun = "dryRun"
        }
    }

    public struct DisassociateSubnetCidrBlockRequest: AWSEncodableShape {
        /// The association ID for the CIDR block.
        public let associationId: String?

        public init(associationId: String? = nil) {
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
        }
    }

    public struct DisassociateSubnetCidrBlockResult: AWSDecodableShape {
        /// Information about the IPv6 CIDR block association.
        public let ipv6CidrBlockAssociation: SubnetIpv6CidrBlockAssociation?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(ipv6CidrBlockAssociation: SubnetIpv6CidrBlockAssociation? = nil, subnetId: String? = nil) {
            self.ipv6CidrBlockAssociation = ipv6CidrBlockAssociation
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrBlockAssociation = "ipv6CidrBlockAssociation"
            case subnetId = "subnetId"
        }
    }

    public struct DisassociateTransitGatewayMulticastDomainRequest: AWSEncodableShape {
        public struct _SubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the subnets;
        @OptionalCustomCoding<EC2ArrayCoder<_SubnetIdsEncoding, String>>
        public var subnetIds: [String]?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, subnetIds: [String]? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.subnetIds = subnetIds
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case subnetIds = "SubnetIds"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct DisassociateTransitGatewayMulticastDomainResult: AWSDecodableShape {
        /// Information about the association.
        public let associations: TransitGatewayMulticastDomainAssociations?

        public init(associations: TransitGatewayMulticastDomainAssociations? = nil) {
            self.associations = associations
        }

        private enum CodingKeys: String, CodingKey {
            case associations = "associations"
        }
    }

    public struct DisassociateTransitGatewayPolicyTableRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway attachment to disassociate from the policy table.
        public let transitGatewayAttachmentId: String?
        /// The ID of the disassociated policy table.
        public let transitGatewayPolicyTableId: String?

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayPolicyTableId: String? = nil) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayPolicyTableId = transitGatewayPolicyTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayPolicyTableId = "TransitGatewayPolicyTableId"
        }
    }

    public struct DisassociateTransitGatewayPolicyTableResult: AWSDecodableShape {
        /// Returns details about the transit gateway policy table disassociation.
        public let association: TransitGatewayPolicyTableAssociation?

        public init(association: TransitGatewayPolicyTableAssociation? = nil) {
            self.association = association
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
        }
    }

    public struct DisassociateTransitGatewayRouteTableRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableId: String? = nil) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct DisassociateTransitGatewayRouteTableResult: AWSDecodableShape {
        /// Information about the association.
        public let association: TransitGatewayAssociation?

        public init(association: TransitGatewayAssociation? = nil) {
            self.association = association
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
        }
    }

    public struct DisassociateTrunkInterfaceRequest: AWSEncodableShape {
        /// The ID of the association
        public let associationId: String?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(associationId: String? = nil, clientToken: String? = DisassociateTrunkInterfaceRequest.idempotencyToken(), dryRun: Bool? = nil) {
            self.associationId = associationId
            self.clientToken = clientToken
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "AssociationId"
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
        }
    }

    public struct DisassociateTrunkInterfaceResult: AWSDecodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(clientToken: String? = nil, return: Bool? = nil) {
            self.clientToken = clientToken
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case `return` = "return"
        }
    }

    public struct DisassociateVpcCidrBlockRequest: AWSEncodableShape {
        /// The association ID for the CIDR block.
        public let associationId: String?

        public init(associationId: String? = nil) {
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
        }
    }

    public struct DisassociateVpcCidrBlockResult: AWSDecodableShape {
        /// Information about the IPv4 CIDR block association.
        public let cidrBlockAssociation: VpcCidrBlockAssociation?
        /// Information about the IPv6 CIDR block association.
        public let ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(cidrBlockAssociation: VpcCidrBlockAssociation? = nil, ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation? = nil, vpcId: String? = nil) {
            self.cidrBlockAssociation = cidrBlockAssociation
            self.ipv6CidrBlockAssociation = ipv6CidrBlockAssociation
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlockAssociation = "cidrBlockAssociation"
            case ipv6CidrBlockAssociation = "ipv6CidrBlockAssociation"
            case vpcId = "vpcId"
        }
    }

    public struct DiskImage: AWSEncodableShape {
        /// A description of the disk image.
        public let description: String?
        /// Information about the disk image.
        public let image: DiskImageDetail?
        /// Information about the volume.
        public let volume: VolumeDetail?

        public init(description: String? = nil, image: DiskImageDetail? = nil, volume: VolumeDetail? = nil) {
            self.description = description
            self.image = image
            self.volume = volume
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case image = "Image"
            case volume = "Volume"
        }
    }

    public struct DiskImageDescription: AWSDecodableShape {
        /// The checksum computed for the disk image.
        public let checksum: String?
        /// The disk image format.
        public let format: DiskImageFormat?
        /// A presigned URL for the import manifest stored in Amazon S3. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the Authenticating REST Requests topic in the Amazon Simple Storage Service Developer Guide. For information about the import manifest referenced by this API action, see VM Import Manifest.
        public let importManifestUrl: String?
        /// The size of the disk image, in GiB.
        public let size: Int64?

        public init(checksum: String? = nil, format: DiskImageFormat? = nil, importManifestUrl: String? = nil, size: Int64? = nil) {
            self.checksum = checksum
            self.format = format
            self.importManifestUrl = importManifestUrl
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case checksum = "checksum"
            case format = "format"
            case importManifestUrl = "importManifestUrl"
            case size = "size"
        }
    }

    public struct DiskImageDetail: AWSEncodableShape {
        /// The size of the disk image, in GiB.
        public let bytes: Int64?
        /// The disk image format.
        public let format: DiskImageFormat?
        /// A presigned URL for the import manifest stored in Amazon S3 and presented here as an Amazon S3 presigned URL. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the Authenticating REST Requests topic in the Amazon Simple Storage Service Developer Guide. For information about the import manifest referenced by this API action, see VM Import Manifest.
        public let importManifestUrl: String?

        public init(bytes: Int64? = nil, format: DiskImageFormat? = nil, importManifestUrl: String? = nil) {
            self.bytes = bytes
            self.format = format
            self.importManifestUrl = importManifestUrl
        }

        private enum CodingKeys: String, CodingKey {
            case bytes = "bytes"
            case format = "format"
            case importManifestUrl = "importManifestUrl"
        }
    }

    public struct DiskImageVolumeDescription: AWSDecodableShape {
        /// The volume identifier.
        public let id: String?
        /// The size of the volume, in GiB.
        public let size: Int64?

        public init(id: String? = nil, size: Int64? = nil) {
            self.id = id
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case size = "size"
        }
    }

    public struct DiskInfo: AWSDecodableShape {
        /// The number of disks with this configuration.
        public let count: Int?
        /// The size of the disk in GB.
        public let sizeInGB: Int64?
        /// The type of disk.
        public let type: DiskType?

        public init(count: Int? = nil, sizeInGB: Int64? = nil, type: DiskType? = nil) {
            self.count = count
            self.sizeInGB = sizeInGB
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case count = "count"
            case sizeInGB = "sizeInGB"
            case type = "type"
        }
    }

    public struct DnsEntry: AWSDecodableShape {
        /// The DNS name.
        public let dnsName: String?
        /// The ID of the private hosted zone.
        public let hostedZoneId: String?

        public init(dnsName: String? = nil, hostedZoneId: String? = nil) {
            self.dnsName = dnsName
            self.hostedZoneId = hostedZoneId
        }

        private enum CodingKeys: String, CodingKey {
            case dnsName = "dnsName"
            case hostedZoneId = "hostedZoneId"
        }
    }

    public struct DnsOptions: AWSDecodableShape {
        /// The DNS records created for the endpoint.
        public let dnsRecordIpType: DnsRecordIpType?
        /// Indicates whether to enable private DNS only for inbound endpoints.
        public let privateDnsOnlyForInboundResolverEndpoint: Bool?

        public init(dnsRecordIpType: DnsRecordIpType? = nil, privateDnsOnlyForInboundResolverEndpoint: Bool? = nil) {
            self.dnsRecordIpType = dnsRecordIpType
            self.privateDnsOnlyForInboundResolverEndpoint = privateDnsOnlyForInboundResolverEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case dnsRecordIpType = "dnsRecordIpType"
            case privateDnsOnlyForInboundResolverEndpoint = "privateDnsOnlyForInboundResolverEndpoint"
        }
    }

    public struct DnsOptionsSpecification: AWSEncodableShape {
        /// The DNS records created for the endpoint.
        public let dnsRecordIpType: DnsRecordIpType?
        /// Indicates whether to enable private DNS only for inbound endpoints. This option is available only for services that support both gateway and interface endpoints. It routes traffic that originates from the VPC to the gateway endpoint and traffic that originates from on-premises to the interface endpoint.
        public let privateDnsOnlyForInboundResolverEndpoint: Bool?

        public init(dnsRecordIpType: DnsRecordIpType? = nil, privateDnsOnlyForInboundResolverEndpoint: Bool? = nil) {
            self.dnsRecordIpType = dnsRecordIpType
            self.privateDnsOnlyForInboundResolverEndpoint = privateDnsOnlyForInboundResolverEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case dnsRecordIpType = "DnsRecordIpType"
            case privateDnsOnlyForInboundResolverEndpoint = "PrivateDnsOnlyForInboundResolverEndpoint"
        }
    }

    public struct DnsServersOptionsModifyStructure: AWSEncodableShape {
        public struct _CustomDnsServersEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IPv4 address range, in CIDR notation, of the DNS servers to be used. You can specify up to
        /// 			two DNS servers. Ensure that the DNS servers can be reached by the clients. The specified values
        /// 			overwrite the existing values.
        @OptionalCustomCoding<EC2ArrayCoder<_CustomDnsServersEncoding, String>>
        public var customDnsServers: [String]?
        /// Indicates whether DNS servers should be used. Specify False to delete the existing DNS
        /// 			servers.
        public let enabled: Bool?

        public init(customDnsServers: [String]? = nil, enabled: Bool? = nil) {
            self.customDnsServers = customDnsServers
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case customDnsServers = "CustomDnsServers"
            case enabled = "Enabled"
        }
    }

    public struct EbsBlockDevice: AWSEncodableShape & AWSDecodableShape {
        /// Indicates whether the EBS volume is deleted on instance termination. For more information, see Preserving Amazon EBS volumes on instance termination in the Amazon EC2 User Guide.
        public let deleteOnTermination: Bool?
        /// Indicates whether the encryption state of an EBS volume is changed while being restored from a backing snapshot. The effect of setting the encryption state to true depends on
        /// the volume origin (new or from a snapshot), starting encryption state, ownership, and whether encryption by default is enabled. For more information, see Amazon EBS encryption in the Amazon EBS User Guide. In no case can you remove encryption from an encrypted volume. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. For more information, see Supported instance types. This parameter is not returned by DescribeImageAttribute. For CreateImage and RegisterImage, whether you can  include this parameter, and the allowed values differ depending on the type of block  device mapping you are creating.   If you are creating a block device mapping for a new (empty)  volume, you can include this parameter, and specify either true  for an encrypted volume, or false for an unencrypted volume. If you omit  this parameter, it defaults to false (unencrypted).   If you are creating a block device mapping from an existing  encrypted or unencrypted snapshot, you must omit this parameter. If you  include this parameter, the request will fail, regardless of the value that you  specify.   If you are creating a block device mapping from an existing  unencrypted volume, you can include this parameter, but you must specify  false. If you specify true, the request will fail. In this  case, we recommend that you omit the parameter.   If you are creating a block device mapping from an existing  encrypted volume, you can include this parameter, and specify either  true or false. However, if you specify false,  the parameter is ignored and the block device mapping is always encrypted. In this  case, we recommend that you omit the parameter.
        public let encrypted: Bool?
        /// The number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. The following are the supported values for each volume type:    gp3: 3,000 - 16,000 IOPS    io1: 100 - 64,000 IOPS    io2: 100 - 256,000 IOPS   For io2 volumes, you can achieve up to 256,000 IOPS on
        /// instances
        /// built on the Nitro System. On other instances, you can achieve performance up to 32,000 IOPS. This parameter is required for io1 and io2 volumes. The default for gp3 volumes is 3,000 IOPS.
        public let iops: Int?
        /// Identifier (key ID, key alias, ID ARN, or alias ARN) for a customer managed CMK under which the EBS volume is encrypted. This parameter is only supported on BlockDeviceMapping objects called by RunInstances, RequestSpotFleet, and RequestSpotInstances.
        public let kmsKeyId: String?
        /// The ARN of the Outpost on which the snapshot is stored. This parameter is not supported when using CreateImage.
        public let outpostArn: String?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The throughput that the volume supports, in MiB/s. This parameter is valid only for gp3 volumes. Valid Range: Minimum value of 125. Maximum value of 1000.
        public let throughput: Int?
        /// The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. If you specify a snapshot, the default is the snapshot size. You can specify a volume size that is equal to or larger than the snapshot size. The following are the supported sizes for each volume type:    gp2 and gp3: 1 - 16,384 GiB    io1: 4 - 16,384 GiB    io2: 4 - 65,536 GiB    st1 and sc1: 125 - 16,384 GiB    standard: 1 - 1024 GiB
        public let volumeSize: Int?
        /// The volume type. For more information, see Amazon EBS volume types in the Amazon EBS User Guide.
        public let volumeType: VolumeType?

        public init(deleteOnTermination: Bool? = nil, encrypted: Bool? = nil, iops: Int? = nil, kmsKeyId: String? = nil, outpostArn: String? = nil, snapshotId: String? = nil, throughput: Int? = nil, volumeSize: Int? = nil, volumeType: VolumeType? = nil) {
            self.deleteOnTermination = deleteOnTermination
            self.encrypted = encrypted
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.outpostArn = outpostArn
            self.snapshotId = snapshotId
            self.throughput = throughput
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination = "deleteOnTermination"
            case encrypted = "encrypted"
            case iops = "iops"
            case kmsKeyId = "kmsKeyId"
            case outpostArn = "outpostArn"
            case snapshotId = "snapshotId"
            case throughput = "throughput"
            case volumeSize = "volumeSize"
            case volumeType = "volumeType"
        }
    }

    public struct EbsInfo: AWSDecodableShape {
        /// Describes the optimized EBS performance for the instance type.
        public let ebsOptimizedInfo: EbsOptimizedInfo?
        /// Indicates whether the instance type is Amazon EBS-optimized. For more information, see Amazon EBS-optimized instances in Amazon EC2 User Guide.
        public let ebsOptimizedSupport: EbsOptimizedSupport?
        /// Indicates whether Amazon EBS encryption is supported.
        public let encryptionSupport: EbsEncryptionSupport?
        /// Indicates whether non-volatile memory express (NVMe) is supported.
        public let nvmeSupport: EbsNvmeSupport?

        public init(ebsOptimizedInfo: EbsOptimizedInfo? = nil, ebsOptimizedSupport: EbsOptimizedSupport? = nil, encryptionSupport: EbsEncryptionSupport? = nil, nvmeSupport: EbsNvmeSupport? = nil) {
            self.ebsOptimizedInfo = ebsOptimizedInfo
            self.ebsOptimizedSupport = ebsOptimizedSupport
            self.encryptionSupport = encryptionSupport
            self.nvmeSupport = nvmeSupport
        }

        private enum CodingKeys: String, CodingKey {
            case ebsOptimizedInfo = "ebsOptimizedInfo"
            case ebsOptimizedSupport = "ebsOptimizedSupport"
            case encryptionSupport = "encryptionSupport"
            case nvmeSupport = "nvmeSupport"
        }
    }

    public struct EbsInstanceBlockDevice: AWSDecodableShape {
        /// The ARN of the Amazon ECS or Fargate task  to which the volume is attached.
        public let associatedResource: String?
        /// The time stamp when the attachment initiated.
        public let attachTime: Date?
        /// Indicates whether the volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// The attachment state.
        public let status: AttachmentStatus?
        /// The ID of the EBS volume.
        public let volumeId: String?
        /// The ID of the Amazon Web Services account that owns the volume. This parameter is returned only for volumes that are attached to  Fargate tasks.
        public let volumeOwnerId: String?

        public init(associatedResource: String? = nil, attachTime: Date? = nil, deleteOnTermination: Bool? = nil, status: AttachmentStatus? = nil, volumeId: String? = nil, volumeOwnerId: String? = nil) {
            self.associatedResource = associatedResource
            self.attachTime = attachTime
            self.deleteOnTermination = deleteOnTermination
            self.status = status
            self.volumeId = volumeId
            self.volumeOwnerId = volumeOwnerId
        }

        private enum CodingKeys: String, CodingKey {
            case associatedResource = "associatedResource"
            case attachTime = "attachTime"
            case deleteOnTermination = "deleteOnTermination"
            case status = "status"
            case volumeId = "volumeId"
            case volumeOwnerId = "volumeOwnerId"
        }
    }

    public struct EbsInstanceBlockDeviceSpecification: AWSEncodableShape {
        /// Indicates whether the volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// The ID of the EBS volume.
        public let volumeId: String?

        public init(deleteOnTermination: Bool? = nil, volumeId: String? = nil) {
            self.deleteOnTermination = deleteOnTermination
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination = "deleteOnTermination"
            case volumeId = "volumeId"
        }
    }

    public struct EbsOptimizedInfo: AWSDecodableShape {
        /// The baseline bandwidth performance for an EBS-optimized instance type, in Mbps.
        public let baselineBandwidthInMbps: Int?
        /// The baseline input/output storage operations per seconds for an EBS-optimized instance type.
        public let baselineIops: Int?
        /// The baseline throughput performance for an EBS-optimized instance type, in MB/s.
        public let baselineThroughputInMBps: Double?
        /// The maximum bandwidth performance for an EBS-optimized instance type, in Mbps.
        public let maximumBandwidthInMbps: Int?
        /// The maximum input/output storage operations per second for an EBS-optimized instance type.
        public let maximumIops: Int?
        /// The maximum throughput performance for an EBS-optimized instance type, in MB/s.
        public let maximumThroughputInMBps: Double?

        public init(baselineBandwidthInMbps: Int? = nil, baselineIops: Int? = nil, baselineThroughputInMBps: Double? = nil, maximumBandwidthInMbps: Int? = nil, maximumIops: Int? = nil, maximumThroughputInMBps: Double? = nil) {
            self.baselineBandwidthInMbps = baselineBandwidthInMbps
            self.baselineIops = baselineIops
            self.baselineThroughputInMBps = baselineThroughputInMBps
            self.maximumBandwidthInMbps = maximumBandwidthInMbps
            self.maximumIops = maximumIops
            self.maximumThroughputInMBps = maximumThroughputInMBps
        }

        private enum CodingKeys: String, CodingKey {
            case baselineBandwidthInMbps = "baselineBandwidthInMbps"
            case baselineIops = "baselineIops"
            case baselineThroughputInMBps = "baselineThroughputInMBps"
            case maximumBandwidthInMbps = "maximumBandwidthInMbps"
            case maximumIops = "maximumIops"
            case maximumThroughputInMBps = "maximumThroughputInMBps"
        }
    }

    public struct Ec2InstanceConnectEndpoint: AWSDecodableShape {
        public struct _NetworkInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Availability Zone of the EC2 Instance Connect Endpoint.
        public let availabilityZone: String?
        /// The date and time that the EC2 Instance Connect Endpoint was created.
        public let createdAt: Date?
        /// The DNS name of the EC2 Instance Connect Endpoint.
        public let dnsName: String?
        public let fipsDnsName: String?
        /// The Amazon Resource Name (ARN) of the EC2 Instance Connect Endpoint.
        public let instanceConnectEndpointArn: String?
        /// The ID of the EC2 Instance Connect Endpoint.
        public let instanceConnectEndpointId: String?
        /// The ID of the elastic network interface that Amazon EC2 automatically created when creating the EC2 Instance Connect Endpoint.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInterfaceIdsEncoding, String>>
        public var networkInterfaceIds: [String]?
        /// The ID of the Amazon Web Services account that created the EC2 Instance Connect Endpoint.
        public let ownerId: String?
        /// Indicates whether your client's IP address is preserved as the source. The value is true or false.   If true, your client's IP address is used when you connect to a resource.   If false, the elastic network interface IP address is used when you connect to a resource.   Default: true
        public let preserveClientIp: Bool?
        /// The security groups associated with the endpoint. If you didn't specify a security group,  the default security group for your VPC is associated with the endpoint.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?
        /// The current state of the EC2 Instance Connect Endpoint.
        public let state: Ec2InstanceConnectEndpointState?
        /// The message for the current state of the EC2 Instance Connect Endpoint.  Can include a failure message.
        public let stateMessage: String?
        /// The ID of the subnet in which the EC2 Instance Connect Endpoint was created.
        public let subnetId: String?
        /// The tags assigned to the EC2 Instance Connect Endpoint.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VPC in which the EC2 Instance Connect Endpoint was created.
        public let vpcId: String?

        public init(availabilityZone: String? = nil, createdAt: Date? = nil, dnsName: String? = nil, fipsDnsName: String? = nil, instanceConnectEndpointArn: String? = nil, instanceConnectEndpointId: String? = nil, networkInterfaceIds: [String]? = nil, ownerId: String? = nil, preserveClientIp: Bool? = nil, securityGroupIds: [String]? = nil, state: Ec2InstanceConnectEndpointState? = nil, stateMessage: String? = nil, subnetId: String? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.availabilityZone = availabilityZone
            self.createdAt = createdAt
            self.dnsName = dnsName
            self.fipsDnsName = fipsDnsName
            self.instanceConnectEndpointArn = instanceConnectEndpointArn
            self.instanceConnectEndpointId = instanceConnectEndpointId
            self.networkInterfaceIds = networkInterfaceIds
            self.ownerId = ownerId
            self.preserveClientIp = preserveClientIp
            self.securityGroupIds = securityGroupIds
            self.state = state
            self.stateMessage = stateMessage
            self.subnetId = subnetId
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case createdAt = "createdAt"
            case dnsName = "dnsName"
            case fipsDnsName = "fipsDnsName"
            case instanceConnectEndpointArn = "instanceConnectEndpointArn"
            case instanceConnectEndpointId = "instanceConnectEndpointId"
            case networkInterfaceIds = "networkInterfaceIdSet"
            case ownerId = "ownerId"
            case preserveClientIp = "preserveClientIp"
            case securityGroupIds = "securityGroupIdSet"
            case state = "state"
            case stateMessage = "stateMessage"
            case subnetId = "subnetId"
            case tags = "tagSet"
            case vpcId = "vpcId"
        }
    }

    public struct EfaInfo: AWSDecodableShape {
        /// The maximum number of Elastic Fabric Adapters for the instance type.
        public let maximumEfaInterfaces: Int?

        public init(maximumEfaInterfaces: Int? = nil) {
            self.maximumEfaInterfaces = maximumEfaInterfaces
        }

        private enum CodingKeys: String, CodingKey {
            case maximumEfaInterfaces = "maximumEfaInterfaces"
        }
    }

    public struct EgressOnlyInternetGateway: AWSDecodableShape {
        public struct _AttachmentsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the attachment of the egress-only internet gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_AttachmentsEncoding, InternetGatewayAttachment>>
        public var attachments: [InternetGatewayAttachment]?
        /// The ID of the egress-only internet gateway.
        public let egressOnlyInternetGatewayId: String?
        /// The tags assigned to the egress-only internet gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(attachments: [InternetGatewayAttachment]? = nil, egressOnlyInternetGatewayId: String? = nil, tags: [Tag]? = nil) {
            self.attachments = attachments
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case attachments = "attachmentSet"
            case egressOnlyInternetGatewayId = "egressOnlyInternetGatewayId"
            case tags = "tagSet"
        }
    }

    public struct ElasticGpuAssociation: AWSDecodableShape {
        /// The ID of the association.
        public let elasticGpuAssociationId: String?
        /// The state of the association between the instance and the Elastic Graphics accelerator.
        public let elasticGpuAssociationState: String?
        /// The time the Elastic Graphics accelerator was associated with the instance.
        public let elasticGpuAssociationTime: String?
        /// The ID of the Elastic Graphics accelerator.
        public let elasticGpuId: String?

        public init(elasticGpuAssociationId: String? = nil, elasticGpuAssociationState: String? = nil, elasticGpuAssociationTime: String? = nil, elasticGpuId: String? = nil) {
            self.elasticGpuAssociationId = elasticGpuAssociationId
            self.elasticGpuAssociationState = elasticGpuAssociationState
            self.elasticGpuAssociationTime = elasticGpuAssociationTime
            self.elasticGpuId = elasticGpuId
        }

        private enum CodingKeys: String, CodingKey {
            case elasticGpuAssociationId = "elasticGpuAssociationId"
            case elasticGpuAssociationState = "elasticGpuAssociationState"
            case elasticGpuAssociationTime = "elasticGpuAssociationTime"
            case elasticGpuId = "elasticGpuId"
        }
    }

    public struct ElasticGpuHealth: AWSDecodableShape {
        /// The health status.
        public let status: ElasticGpuStatus?

        public init(status: ElasticGpuStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
        }
    }

    public struct ElasticGpuSpecification: AWSEncodableShape {
        /// The type of Elastic Graphics accelerator. For more information about the values to specify for Type, see Elastic Graphics Basics, specifically the Elastic Graphics accelerator column, in the  Amazon Elastic Compute Cloud User Guide for Windows Instances.
        public let type: String?

        public init(type: String? = nil) {
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case type = "Type"
        }
    }

    public struct ElasticGpuSpecificationResponse: AWSDecodableShape {
        /// Deprecated.  Amazon Elastic Graphics reached end of life on January 8, 2024. For  workloads that require graphics acceleration, we recommend that you use Amazon EC2 G4ad,  G4dn, or G5 instances.
        public let type: String?

        public init(type: String? = nil) {
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case type = "type"
        }
    }

    public struct ElasticGpus: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Availability Zone in the which the Elastic Graphics accelerator resides.
        public let availabilityZone: String?
        /// The status of the Elastic Graphics accelerator.
        public let elasticGpuHealth: ElasticGpuHealth?
        /// The ID of the Elastic Graphics accelerator.
        public let elasticGpuId: String?
        /// The state of the Elastic Graphics accelerator.
        public let elasticGpuState: ElasticGpuState?
        /// The type of Elastic Graphics accelerator.
        public let elasticGpuType: String?
        /// The ID of the instance to which the Elastic Graphics accelerator is attached.
        public let instanceId: String?
        /// The tags assigned to the Elastic Graphics accelerator.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(availabilityZone: String? = nil, elasticGpuHealth: ElasticGpuHealth? = nil, elasticGpuId: String? = nil, elasticGpuState: ElasticGpuState? = nil, elasticGpuType: String? = nil, instanceId: String? = nil, tags: [Tag]? = nil) {
            self.availabilityZone = availabilityZone
            self.elasticGpuHealth = elasticGpuHealth
            self.elasticGpuId = elasticGpuId
            self.elasticGpuState = elasticGpuState
            self.elasticGpuType = elasticGpuType
            self.instanceId = instanceId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case elasticGpuHealth = "elasticGpuHealth"
            case elasticGpuId = "elasticGpuId"
            case elasticGpuState = "elasticGpuState"
            case elasticGpuType = "elasticGpuType"
            case instanceId = "instanceId"
            case tags = "tagSet"
        }
    }

    public struct ElasticInferenceAccelerator: AWSEncodableShape {
        ///  The number of elastic inference accelerators to attach to the instance.   Default: 1
        public let count: Int?
        ///  	The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, eia1.xlarge, eia2.medium, eia2.large, and eia2.xlarge.
        public let type: String?

        public init(count: Int? = nil, type: String? = nil) {
            self.count = count
            self.type = type
        }

        public func validate(name: String) throws {
            try self.validate(self.count, name: "count", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case count = "Count"
            case type = "Type"
        }
    }

    public struct ElasticInferenceAcceleratorAssociation: AWSDecodableShape {
        ///  The Amazon Resource Name (ARN) of the elastic inference accelerator.
        public let elasticInferenceAcceleratorArn: String?
        ///  The ID of the association.
        public let elasticInferenceAcceleratorAssociationId: String?
        ///  The state of the elastic inference accelerator.
        public let elasticInferenceAcceleratorAssociationState: String?
        ///  The time at which the elastic inference accelerator is associated with an instance.
        public let elasticInferenceAcceleratorAssociationTime: Date?

        public init(elasticInferenceAcceleratorArn: String? = nil, elasticInferenceAcceleratorAssociationId: String? = nil, elasticInferenceAcceleratorAssociationState: String? = nil, elasticInferenceAcceleratorAssociationTime: Date? = nil) {
            self.elasticInferenceAcceleratorArn = elasticInferenceAcceleratorArn
            self.elasticInferenceAcceleratorAssociationId = elasticInferenceAcceleratorAssociationId
            self.elasticInferenceAcceleratorAssociationState = elasticInferenceAcceleratorAssociationState
            self.elasticInferenceAcceleratorAssociationTime = elasticInferenceAcceleratorAssociationTime
        }

        private enum CodingKeys: String, CodingKey {
            case elasticInferenceAcceleratorArn = "elasticInferenceAcceleratorArn"
            case elasticInferenceAcceleratorAssociationId = "elasticInferenceAcceleratorAssociationId"
            case elasticInferenceAcceleratorAssociationState = "elasticInferenceAcceleratorAssociationState"
            case elasticInferenceAcceleratorAssociationTime = "elasticInferenceAcceleratorAssociationTime"
        }
    }

    public struct EnaSrdSpecification: AWSEncodableShape {
        /// Indicates whether ENA Express is enabled for the network interface.
        public let enaSrdEnabled: Bool?
        /// Configures ENA Express for UDP network traffic.
        public let enaSrdUdpSpecification: EnaSrdUdpSpecification?

        public init(enaSrdEnabled: Bool? = nil, enaSrdUdpSpecification: EnaSrdUdpSpecification? = nil) {
            self.enaSrdEnabled = enaSrdEnabled
            self.enaSrdUdpSpecification = enaSrdUdpSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case enaSrdEnabled = "EnaSrdEnabled"
            case enaSrdUdpSpecification = "EnaSrdUdpSpecification"
        }
    }

    public struct EnaSrdSpecificationRequest: AWSEncodableShape & AWSDecodableShape {
        /// Specifies whether ENA Express is enabled for the network interface when you
        /// 			launch an instance from your launch template.
        public let enaSrdEnabled: Bool?
        /// Contains ENA Express settings for UDP network traffic in your launch template.
        public let enaSrdUdpSpecification: EnaSrdUdpSpecificationRequest?

        public init(enaSrdEnabled: Bool? = nil, enaSrdUdpSpecification: EnaSrdUdpSpecificationRequest? = nil) {
            self.enaSrdEnabled = enaSrdEnabled
            self.enaSrdUdpSpecification = enaSrdUdpSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case enaSrdEnabled = "EnaSrdEnabled"
            case enaSrdUdpSpecification = "EnaSrdUdpSpecification"
        }
    }

    public struct EnaSrdUdpSpecification: AWSEncodableShape {
        /// Indicates whether UDP traffic to and from the instance uses ENA Express. To specify this setting,
        /// 			you must first enable ENA Express.
        public let enaSrdUdpEnabled: Bool?

        public init(enaSrdUdpEnabled: Bool? = nil) {
            self.enaSrdUdpEnabled = enaSrdUdpEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case enaSrdUdpEnabled = "EnaSrdUdpEnabled"
        }
    }

    public struct EnaSrdUdpSpecificationRequest: AWSEncodableShape & AWSDecodableShape {
        /// Indicates whether UDP traffic uses ENA Express for your instance. To ensure that
        /// 			UDP traffic can use ENA Express when you launch an instance, you must also set
        /// 			EnaSrdEnabled in the EnaSrdSpecificationRequest to true in your
        /// 			launch template.
        public let enaSrdUdpEnabled: Bool?

        public init(enaSrdUdpEnabled: Bool? = nil) {
            self.enaSrdUdpEnabled = enaSrdUdpEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case enaSrdUdpEnabled = "EnaSrdUdpEnabled"
        }
    }

    public struct EnableAddressTransferRequest: AWSEncodableShape {
        /// The allocation ID of an Elastic IP address.
        public let allocationId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the account that you want to transfer the Elastic IP address to.
        public let transferAccountId: String?

        public init(allocationId: String? = nil, dryRun: Bool? = nil, transferAccountId: String? = nil) {
            self.allocationId = allocationId
            self.dryRun = dryRun
            self.transferAccountId = transferAccountId
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "AllocationId"
            case dryRun = "DryRun"
            case transferAccountId = "TransferAccountId"
        }
    }

    public struct EnableAddressTransferResult: AWSDecodableShape {
        /// An Elastic IP address transfer.
        public let addressTransfer: AddressTransfer?

        public init(addressTransfer: AddressTransfer? = nil) {
            self.addressTransfer = addressTransfer
        }

        private enum CodingKeys: String, CodingKey {
            case addressTransfer = "addressTransfer"
        }
    }

    public struct EnableAwsNetworkPerformanceMetricSubscriptionRequest: AWSEncodableShape {
        /// The target Region (like us-east-2) or Availability Zone ID (like use2-az2) that the metric subscription is enabled for. If you use Availability Zone IDs, the Source and Destination Availability Zones must be in the same Region.
        public let destination: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The metric used for the enabled subscription.
        public let metric: MetricType?
        /// The source Region (like us-east-1) or Availability Zone ID (like use1-az1) that the metric subscription is enabled for. If you use Availability Zone IDs, the Source and Destination Availability Zones must be in the same Region.
        public let source: String?
        /// The statistic used for the enabled subscription.
        public let statistic: StatisticType?

        public init(destination: String? = nil, dryRun: Bool? = nil, metric: MetricType? = nil, source: String? = nil, statistic: StatisticType? = nil) {
            self.destination = destination
            self.dryRun = dryRun
            self.metric = metric
            self.source = source
            self.statistic = statistic
        }

        private enum CodingKeys: String, CodingKey {
            case destination = "Destination"
            case dryRun = "DryRun"
            case metric = "Metric"
            case source = "Source"
            case statistic = "Statistic"
        }
    }

    public struct EnableAwsNetworkPerformanceMetricSubscriptionResult: AWSDecodableShape {
        /// Indicates whether the subscribe action was successful.
        public let output: Bool?

        public init(output: Bool? = nil) {
            self.output = output
        }

        private enum CodingKeys: String, CodingKey {
            case output = "output"
        }
    }

    public struct EnableEbsEncryptionByDefaultRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct EnableEbsEncryptionByDefaultResult: AWSDecodableShape {
        /// The updated status of encryption by default.
        public let ebsEncryptionByDefault: Bool?

        public init(ebsEncryptionByDefault: Bool? = nil) {
            self.ebsEncryptionByDefault = ebsEncryptionByDefault
        }

        private enum CodingKeys: String, CodingKey {
            case ebsEncryptionByDefault = "ebsEncryptionByDefault"
        }
    }

    public struct EnableFastLaunchRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specify the ID of the image for which to enable Windows fast launch.
        public let imageId: String?
        /// The launch template to use when launching Windows instances from pre-provisioned
        /// 			snapshots. Launch template parameters can include either the name or ID of the launch
        /// 			template, but not both.
        public let launchTemplate: FastLaunchLaunchTemplateSpecificationRequest?
        /// The maximum number of instances that Amazon EC2 can launch at the same time to create
        /// 			pre-provisioned snapshots for Windows fast launch. Value must be
        /// 			6 or greater.
        public let maxParallelLaunches: Int?
        /// The type of resource to use for pre-provisioning the AMI for Windows fast launch.
        /// 			Supported values include: snapshot, which is the default value.
        public let resourceType: String?
        /// Configuration settings for creating and managing the snapshots that are used for
        /// 			pre-provisioning the AMI for Windows fast launch. The associated ResourceType
        /// 			must be snapshot.
        public let snapshotConfiguration: FastLaunchSnapshotConfigurationRequest?

        public init(dryRun: Bool? = nil, imageId: String? = nil, launchTemplate: FastLaunchLaunchTemplateSpecificationRequest? = nil, maxParallelLaunches: Int? = nil, resourceType: String? = nil, snapshotConfiguration: FastLaunchSnapshotConfigurationRequest? = nil) {
            self.dryRun = dryRun
            self.imageId = imageId
            self.launchTemplate = launchTemplate
            self.maxParallelLaunches = maxParallelLaunches
            self.resourceType = resourceType
            self.snapshotConfiguration = snapshotConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case imageId = "ImageId"
            case launchTemplate = "LaunchTemplate"
            case maxParallelLaunches = "MaxParallelLaunches"
            case resourceType = "ResourceType"
            case snapshotConfiguration = "SnapshotConfiguration"
        }
    }

    public struct EnableFastLaunchResult: AWSDecodableShape {
        /// The image ID that identifies the AMI for which Windows fast launch was enabled.
        public let imageId: String?
        /// The launch template that is used when launching Windows instances from pre-provisioned snapshots.
        public let launchTemplate: FastLaunchLaunchTemplateSpecificationResponse?
        /// The maximum number of instances that Amazon EC2 can launch at the same time to
        /// 			create pre-provisioned snapshots for Windows fast launch.
        public let maxParallelLaunches: Int?
        /// The owner ID for the AMI for which Windows fast launch was enabled.
        public let ownerId: String?
        /// The type of resource that was defined for pre-provisioning the AMI for Windows fast launch.
        public let resourceType: FastLaunchResourceType?
        /// Settings to create and manage the pre-provisioned snapshots that Amazon EC2 uses for faster
        /// 			launches from the Windows AMI. This property is returned when the associated
        /// 			resourceType is snapshot.
        public let snapshotConfiguration: FastLaunchSnapshotConfigurationResponse?
        /// The current state of Windows fast launch for the specified AMI.
        public let state: FastLaunchStateCode?
        /// The reason that the state changed for Windows fast launch for the AMI.
        public let stateTransitionReason: String?
        /// The time that the state changed for Windows fast launch for the AMI.
        public let stateTransitionTime: Date?

        public init(imageId: String? = nil, launchTemplate: FastLaunchLaunchTemplateSpecificationResponse? = nil, maxParallelLaunches: Int? = nil, ownerId: String? = nil, resourceType: FastLaunchResourceType? = nil, snapshotConfiguration: FastLaunchSnapshotConfigurationResponse? = nil, state: FastLaunchStateCode? = nil, stateTransitionReason: String? = nil, stateTransitionTime: Date? = nil) {
            self.imageId = imageId
            self.launchTemplate = launchTemplate
            self.maxParallelLaunches = maxParallelLaunches
            self.ownerId = ownerId
            self.resourceType = resourceType
            self.snapshotConfiguration = snapshotConfiguration
            self.state = state
            self.stateTransitionReason = stateTransitionReason
            self.stateTransitionTime = stateTransitionTime
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "imageId"
            case launchTemplate = "launchTemplate"
            case maxParallelLaunches = "maxParallelLaunches"
            case ownerId = "ownerId"
            case resourceType = "resourceType"
            case snapshotConfiguration = "snapshotConfiguration"
            case state = "state"
            case stateTransitionReason = "stateTransitionReason"
            case stateTransitionTime = "stateTransitionTime"
        }
    }

    public struct EnableFastSnapshotRestoreErrorItem: AWSDecodableShape {
        public struct _FastSnapshotRestoreStateErrorsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The errors.
        @OptionalCustomCoding<EC2ArrayCoder<_FastSnapshotRestoreStateErrorsEncoding, EnableFastSnapshotRestoreStateErrorItem>>
        public var fastSnapshotRestoreStateErrors: [EnableFastSnapshotRestoreStateErrorItem]?
        /// The ID of the snapshot.
        public let snapshotId: String?

        public init(fastSnapshotRestoreStateErrors: [EnableFastSnapshotRestoreStateErrorItem]? = nil, snapshotId: String? = nil) {
            self.fastSnapshotRestoreStateErrors = fastSnapshotRestoreStateErrors
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case fastSnapshotRestoreStateErrors = "fastSnapshotRestoreStateErrorSet"
            case snapshotId = "snapshotId"
        }
    }

    public struct EnableFastSnapshotRestoreStateError: AWSDecodableShape {
        /// The error code.
        public let code: String?
        /// The error message.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct EnableFastSnapshotRestoreStateErrorItem: AWSDecodableShape {
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The error.
        public let error: EnableFastSnapshotRestoreStateError?

        public init(availabilityZone: String? = nil, error: EnableFastSnapshotRestoreStateError? = nil) {
            self.availabilityZone = availabilityZone
            self.error = error
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case error = "error"
        }
    }

    public struct EnableFastSnapshotRestoreSuccessItem: AWSDecodableShape {
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The time at which fast snapshot restores entered the disabled state.
        public let disabledTime: Date?
        /// The time at which fast snapshot restores entered the disabling state.
        public let disablingTime: Date?
        /// The time at which fast snapshot restores entered the enabled state.
        public let enabledTime: Date?
        /// The time at which fast snapshot restores entered the enabling state.
        public let enablingTime: Date?
        /// The time at which fast snapshot restores entered the optimizing state.
        public let optimizingTime: Date?
        /// The Amazon Web Services owner alias that enabled fast snapshot restores on the snapshot. This is intended for future use.
        public let ownerAlias: String?
        /// The ID of the Amazon Web Services account that enabled fast snapshot restores on the snapshot.
        public let ownerId: String?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The state of fast snapshot restores.
        public let state: FastSnapshotRestoreStateCode?
        /// The reason for the state transition. The possible values are as follows:    Client.UserInitiated - The state successfully transitioned to enabling or disabling.    Client.UserInitiated - Lifecycle state transition - The state successfully transitioned  to optimizing, enabled, or disabled.
        public let stateTransitionReason: String?

        public init(availabilityZone: String? = nil, disabledTime: Date? = nil, disablingTime: Date? = nil, enabledTime: Date? = nil, enablingTime: Date? = nil, optimizingTime: Date? = nil, ownerAlias: String? = nil, ownerId: String? = nil, snapshotId: String? = nil, state: FastSnapshotRestoreStateCode? = nil, stateTransitionReason: String? = nil) {
            self.availabilityZone = availabilityZone
            self.disabledTime = disabledTime
            self.disablingTime = disablingTime
            self.enabledTime = enabledTime
            self.enablingTime = enablingTime
            self.optimizingTime = optimizingTime
            self.ownerAlias = ownerAlias
            self.ownerId = ownerId
            self.snapshotId = snapshotId
            self.state = state
            self.stateTransitionReason = stateTransitionReason
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case disabledTime = "disabledTime"
            case disablingTime = "disablingTime"
            case enabledTime = "enabledTime"
            case enablingTime = "enablingTime"
            case optimizingTime = "optimizingTime"
            case ownerAlias = "ownerAlias"
            case ownerId = "ownerId"
            case snapshotId = "snapshotId"
            case state = "state"
            case stateTransitionReason = "stateTransitionReason"
        }
    }

    public struct EnableFastSnapshotRestoresRequest: AWSEncodableShape {
        public struct _AvailabilityZonesEncoding: ArrayCoderProperties { public static let member = "AvailabilityZone" }
        public struct _SourceSnapshotIdsEncoding: ArrayCoderProperties { public static let member = "SnapshotId" }

        /// One or more Availability Zones. For example, us-east-2a.
        @OptionalCustomCoding<EC2ArrayCoder<_AvailabilityZonesEncoding, String>>
        public var availabilityZones: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of one or more snapshots. For example, snap-1234567890abcdef0. You can specify a snapshot that was shared with you from another Amazon Web Services account.
        @OptionalCustomCoding<EC2ArrayCoder<_SourceSnapshotIdsEncoding, String>>
        public var sourceSnapshotIds: [String]?

        public init(availabilityZones: [String]? = nil, dryRun: Bool? = nil, sourceSnapshotIds: [String]? = nil) {
            self.availabilityZones = availabilityZones
            self.dryRun = dryRun
            self.sourceSnapshotIds = sourceSnapshotIds
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZone"
            case dryRun = "DryRun"
            case sourceSnapshotIds = "SourceSnapshotId"
        }
    }

    public struct EnableFastSnapshotRestoresResult: AWSDecodableShape {
        public struct _SuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _UnsuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the snapshots for which fast snapshot restores were successfully enabled.
        @OptionalCustomCoding<EC2ArrayCoder<_SuccessfulEncoding, EnableFastSnapshotRestoreSuccessItem>>
        public var successful: [EnableFastSnapshotRestoreSuccessItem]?
        /// Information about the snapshots for which fast snapshot restores could not be enabled.
        @OptionalCustomCoding<EC2ArrayCoder<_UnsuccessfulEncoding, EnableFastSnapshotRestoreErrorItem>>
        public var unsuccessful: [EnableFastSnapshotRestoreErrorItem]?

        public init(successful: [EnableFastSnapshotRestoreSuccessItem]? = nil, unsuccessful: [EnableFastSnapshotRestoreErrorItem]? = nil) {
            self.successful = successful
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case successful = "successful"
            case unsuccessful = "unsuccessful"
        }
    }

    public struct EnableImageBlockPublicAccessRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specify block-new-sharing to enable block public access for AMIs at the account level in the specified Region. This will block any attempt to publicly share your AMIs in the specified Region.
        public let imageBlockPublicAccessState: ImageBlockPublicAccessEnabledState?

        public init(dryRun: Bool? = nil, imageBlockPublicAccessState: ImageBlockPublicAccessEnabledState? = nil) {
            self.dryRun = dryRun
            self.imageBlockPublicAccessState = imageBlockPublicAccessState
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case imageBlockPublicAccessState = "ImageBlockPublicAccessState"
        }
    }

    public struct EnableImageBlockPublicAccessResult: AWSDecodableShape {
        /// Returns block-new-sharing if the request succeeds; otherwise, it returns an error.
        public let imageBlockPublicAccessState: ImageBlockPublicAccessEnabledState?

        public init(imageBlockPublicAccessState: ImageBlockPublicAccessEnabledState? = nil) {
            self.imageBlockPublicAccessState = imageBlockPublicAccessState
        }

        private enum CodingKeys: String, CodingKey {
            case imageBlockPublicAccessState = "imageBlockPublicAccessState"
        }
    }

    public struct EnableImageDeprecationRequest: AWSEncodableShape {
        /// The date and time to deprecate the AMI, in UTC, in the following format: YYYY-MM-DDTHH:MM:SSZ. If you specify a value for seconds, Amazon EC2 rounds the seconds to the nearest minute. You can’t specify a date in the past. The upper limit for DeprecateAt is 10 years from now, except for public AMIs, where the upper limit is 2 years from the creation date.
        public let deprecateAt: Date?
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI.
        public let imageId: String?

        public init(deprecateAt: Date? = nil, dryRun: Bool? = nil, imageId: String? = nil) {
            self.deprecateAt = deprecateAt
            self.dryRun = dryRun
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case deprecateAt = "DeprecateAt"
            case dryRun = "DryRun"
            case imageId = "ImageId"
        }
    }

    public struct EnableImageDeprecationResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct EnableImageRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI.
        public let imageId: String?

        public init(dryRun: Bool? = nil, imageId: String? = nil) {
            self.dryRun = dryRun
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case imageId = "ImageId"
        }
    }

    public struct EnableImageResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct EnableIpamOrganizationAdminAccountRequest: AWSEncodableShape {
        /// The Organizations member account ID that you want to enable as the IPAM account.
        public let delegatedAdminAccountId: String?
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(delegatedAdminAccountId: String? = nil, dryRun: Bool? = nil) {
            self.delegatedAdminAccountId = delegatedAdminAccountId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case delegatedAdminAccountId = "DelegatedAdminAccountId"
            case dryRun = "DryRun"
        }
    }

    public struct EnableIpamOrganizationAdminAccountResult: AWSDecodableShape {
        /// The result of enabling the IPAM account.
        public let success: Bool?

        public init(success: Bool? = nil) {
            self.success = success
        }

        private enum CodingKeys: String, CodingKey {
            case success = "success"
        }
    }

    public struct EnableReachabilityAnalyzerOrganizationSharingRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct EnableReachabilityAnalyzerOrganizationSharingResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, returns an error.
        public let returnValue: Bool?

        public init(returnValue: Bool? = nil) {
            self.returnValue = returnValue
        }

        private enum CodingKeys: String, CodingKey {
            case returnValue = "returnValue"
        }
    }

    public struct EnableSerialConsoleAccessRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct EnableSerialConsoleAccessResult: AWSDecodableShape {
        /// If true, access to the EC2 serial console of all instances is enabled for
        /// 			your account. If false, access to the EC2 serial console of all instances
        /// 			is disabled for your account.
        public let serialConsoleAccessEnabled: Bool?

        public init(serialConsoleAccessEnabled: Bool? = nil) {
            self.serialConsoleAccessEnabled = serialConsoleAccessEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case serialConsoleAccessEnabled = "serialConsoleAccessEnabled"
        }
    }

    public struct EnableSnapshotBlockPublicAccessRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The mode in which to enable block public access for snapshots for the Region.  Specify one of the following values:    block-all-sharing - Prevents all public sharing of snapshots in  the Region. Users in the account will no longer be able to request new public  sharing. Additionally, snapshots that are already publicly shared are treated as  private and they are no longer publicly available.  If you enable block public access for snapshots in block-all-sharing  mode, it does not change the permissions for snapshots that are already publicly shared.  Instead, it prevents these snapshots from be publicly visible and publicly accessible.  Therefore, the attributes for these snapshots still indicate that they are publicly  shared, even though they are not publicly available.     block-new-sharing  - Prevents only new public sharing of snapshots  in the Region. Users in the account will no longer be able to request new public  sharing. However, snapshots that are already publicly shared, remain publicly  available.    unblocked is not a valid value for EnableSnapshotBlockPublicAccess.
        public let state: SnapshotBlockPublicAccessState?

        public init(dryRun: Bool? = nil, state: SnapshotBlockPublicAccessState? = nil) {
            self.dryRun = dryRun
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case state = "State"
        }
    }

    public struct EnableSnapshotBlockPublicAccessResult: AWSDecodableShape {
        /// The state of block public access for snapshots for the account and Region. Returns  either block-all-sharing or block-new-sharing if the request  succeeds.
        public let state: SnapshotBlockPublicAccessState?

        public init(state: SnapshotBlockPublicAccessState? = nil) {
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
        }
    }

    public struct EnableTransitGatewayRouteTablePropagationRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway route table announcement.
        public let transitGatewayRouteTableAnnouncementId: String?
        /// The ID of the propagation route table.
        public let transitGatewayRouteTableId: String?

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableAnnouncementId: String? = nil, transitGatewayRouteTableId: String? = nil) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableAnnouncementId = transitGatewayRouteTableAnnouncementId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableAnnouncementId = "TransitGatewayRouteTableAnnouncementId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct EnableTransitGatewayRouteTablePropagationResult: AWSDecodableShape {
        /// Information about route propagation.
        public let propagation: TransitGatewayPropagation?

        public init(propagation: TransitGatewayPropagation? = nil) {
            self.propagation = propagation
        }

        private enum CodingKeys: String, CodingKey {
            case propagation = "propagation"
        }
    }

    public struct EnableVgwRoutePropagationRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the virtual private gateway that is attached to a VPC. The virtual private gateway must be attached to the same VPC that the routing tables are associated with.
        public let gatewayId: String?
        /// The ID of the route table. The routing table must be associated with the same VPC that the virtual private gateway is attached to.
        public let routeTableId: String?

        public init(dryRun: Bool? = nil, gatewayId: String? = nil, routeTableId: String? = nil) {
            self.dryRun = dryRun
            self.gatewayId = gatewayId
            self.routeTableId = routeTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case gatewayId = "GatewayId"
            case routeTableId = "RouteTableId"
        }
    }

    public struct EnableVolumeIORequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the volume.
        public let volumeId: String?

        public init(dryRun: Bool? = nil, volumeId: String? = nil) {
            self.dryRun = dryRun
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case volumeId = "volumeId"
        }
    }

    public struct EnableVpcClassicLinkDnsSupportRequest: AWSEncodableShape {
        /// The ID of the VPC.
        public let vpcId: String?

        public init(vpcId: String? = nil) {
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
        }
    }

    public struct EnableVpcClassicLinkDnsSupportResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct EnableVpcClassicLinkRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(dryRun: Bool? = nil, vpcId: String? = nil) {
            self.dryRun = dryRun
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpcId = "vpcId"
        }
    }

    public struct EnableVpcClassicLinkResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct EnclaveOptions: AWSDecodableShape {
        /// If this parameter is set to true, the instance is enabled for Amazon Web Services Nitro Enclaves; otherwise, it is not enabled for Amazon Web Services Nitro Enclaves.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "enabled"
        }
    }

    public struct EnclaveOptionsRequest: AWSEncodableShape {
        /// To enable the instance for Amazon Web Services Nitro Enclaves, set this parameter to true.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public struct EventInformation: AWSDecodableShape {
        /// The description of the event.
        public let eventDescription: String?
        /// The event.  error events:    iamFleetRoleInvalid - The EC2 Fleet or Spot Fleet does not have the required permissions either to launch or terminate an instance.    allLaunchSpecsTemporarilyBlacklisted - None of the configurations are valid, and several attempts to launch instances have failed. For more information, see the description of the event.    spotInstanceCountLimitExceeded - You've reached the limit on the number of Spot Instances that you can launch.    spotFleetRequestConfigurationInvalid - The configuration is not valid. For more information, see the description of the event.    fleetRequestChange events:    active - The EC2 Fleet or Spot Fleet request has been validated and Amazon EC2 is attempting to maintain the target number of running instances.    deleted (EC2 Fleet) / cancelled (Spot Fleet) - The EC2 Fleet is deleted or the Spot Fleet request is canceled and has no running instances. The EC2 Fleet or Spot Fleet will be deleted two days after its instances are terminated.    deleted_running (EC2 Fleet) / cancelled_running (Spot Fleet) - The EC2 Fleet is deleted or the Spot Fleet request is canceled and does not launch additional instances. Its existing instances continue to run until they are interrupted or terminated. The request remains in this state until all instances are interrupted or terminated.    deleted_terminating (EC2 Fleet) / cancelled_terminating (Spot Fleet) - The EC2 Fleet is deleted or the Spot Fleet request is canceled and its instances are terminating. The request remains in this state until all instances are terminated.    expired - The EC2 Fleet or Spot Fleet request has expired. If the request was created with TerminateInstancesWithExpiration set, a subsequent terminated event indicates that the instances are terminated.    modify_in_progress - The EC2 Fleet or Spot Fleet request is being modified. The request remains in this state until the modification is fully processed.    modify_succeeded - The EC2 Fleet or Spot Fleet request was modified.    submitted - The EC2 Fleet or Spot Fleet request is being evaluated and Amazon EC2 is preparing to launch the target number of instances.    progress - The EC2 Fleet or Spot Fleet request is in the process of being fulfilled.    instanceChange events:    launched - A new instance was launched.    terminated - An instance was terminated by the user.    termination_notified - An instance termination notification was sent when a Spot Instance was terminated by Amazon EC2 during scale-down, when the target capacity of the fleet was modified down, for example, from a target capacity of 4 to a target capacity of 3.    Information events:    fleetProgressHalted - The price in every launch specification is not valid because it is below the Spot price (all the launch specifications have produced launchSpecUnusable events). A launch specification might become valid if the Spot price changes.    launchSpecTemporarilyBlacklisted - The configuration is not valid and several attempts to launch instances have failed. For more information, see the description of the event.    launchSpecUnusable - The price in a launch specification is not valid because it is below the Spot price.    registerWithLoadBalancersFailed - An attempt to register instances with load balancers failed. For more information, see the description of the event.
        public let eventSubType: String?
        /// The ID of the instance. This information is available only for instanceChange events.
        public let instanceId: String?

        public init(eventDescription: String? = nil, eventSubType: String? = nil, instanceId: String? = nil) {
            self.eventDescription = eventDescription
            self.eventSubType = eventSubType
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case eventDescription = "eventDescription"
            case eventSubType = "eventSubType"
            case instanceId = "instanceId"
        }
    }

    public struct Explanation: AWSDecodableShape {
        public struct _AddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _AvailabilityZonesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _CidrsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _LoadBalancerTargetGroupsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PortRangesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ProtocolsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The network ACL.
        public let acl: AnalysisComponent?
        /// The network ACL rule.
        public let aclRule: AnalysisAclRule?
        /// The IPv4 address, in CIDR notation.
        public let address: String?
        /// The IPv4 addresses, in CIDR notation.
        @OptionalCustomCoding<EC2ArrayCoder<_AddressesEncoding, String>>
        public var addresses: [String]?
        /// The resource to which the component is attached.
        public let attachedTo: AnalysisComponent?
        /// The Availability Zones.
        @OptionalCustomCoding<EC2ArrayCoder<_AvailabilityZonesEncoding, String>>
        public var availabilityZones: [String]?
        /// The CIDR ranges.
        @OptionalCustomCoding<EC2ArrayCoder<_CidrsEncoding, String>>
        public var cidrs: [String]?
        /// The listener for a Classic Load Balancer.
        public let classicLoadBalancerListener: AnalysisLoadBalancerListener?
        /// The component.
        public let component: AnalysisComponent?
        /// The Amazon Web Services account for the component.
        public let componentAccount: String?
        /// The Region for the component.
        public let componentRegion: String?
        /// The customer gateway.
        public let customerGateway: AnalysisComponent?
        /// The destination.
        public let destination: AnalysisComponent?
        /// The destination VPC.
        public let destinationVpc: AnalysisComponent?
        /// The direction. The following are the possible values:   egress   ingress
        public let direction: String?
        /// The load balancer listener.
        public let elasticLoadBalancerListener: AnalysisComponent?
        /// The explanation code.
        public let explanationCode: String?
        /// The Network Firewall stateful rule.
        public let firewallStatefulRule: FirewallStatefulRule?
        /// The Network Firewall stateless rule.
        public let firewallStatelessRule: FirewallStatelessRule?
        /// The route table.
        public let ingressRouteTable: AnalysisComponent?
        /// The internet gateway.
        public let internetGateway: AnalysisComponent?
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String?
        /// The listener port of the load balancer.
        public let loadBalancerListenerPort: Int?
        /// The target.
        public let loadBalancerTarget: AnalysisLoadBalancerTarget?
        /// The target group.
        public let loadBalancerTargetGroup: AnalysisComponent?
        /// The target groups.
        @OptionalCustomCoding<EC2ArrayCoder<_LoadBalancerTargetGroupsEncoding, AnalysisComponent>>
        public var loadBalancerTargetGroups: [AnalysisComponent]?
        /// The target port.
        public let loadBalancerTargetPort: Int?
        /// The missing component.
        public let missingComponent: String?
        /// The NAT gateway.
        public let natGateway: AnalysisComponent?
        /// The network interface.
        public let networkInterface: AnalysisComponent?
        /// The packet field.
        public let packetField: String?
        /// The port.
        public let port: Int?
        /// The port ranges.
        @OptionalCustomCoding<EC2ArrayCoder<_PortRangesEncoding, PortRange>>
        public var portRanges: [PortRange]?
        /// The prefix list.
        public let prefixList: AnalysisComponent?
        /// The protocols.
        @OptionalCustomCoding<EC2ArrayCoder<_ProtocolsEncoding, String>>
        public var protocols: [String]?
        /// The route table.
        public let routeTable: AnalysisComponent?
        /// The route table route.
        public let routeTableRoute: AnalysisRouteTableRoute?
        /// The security group.
        public let securityGroup: AnalysisComponent?
        /// The security group rule.
        public let securityGroupRule: AnalysisSecurityGroupRule?
        /// The security groups.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupsEncoding, AnalysisComponent>>
        public var securityGroups: [AnalysisComponent]?
        /// The source VPC.
        public let sourceVpc: AnalysisComponent?
        /// The state.
        public let state: String?
        /// The subnet.
        public let subnet: AnalysisComponent?
        /// The route table for the subnet.
        public let subnetRouteTable: AnalysisComponent?
        /// The transit gateway.
        public let transitGateway: AnalysisComponent?
        /// The transit gateway attachment.
        public let transitGatewayAttachment: AnalysisComponent?
        /// The transit gateway route table.
        public let transitGatewayRouteTable: AnalysisComponent?
        /// The transit gateway route table route.
        public let transitGatewayRouteTableRoute: TransitGatewayRouteTableRoute?
        /// The component VPC.
        public let vpc: AnalysisComponent?
        /// The VPC endpoint.
        public let vpcEndpoint: AnalysisComponent?
        /// The VPC peering connection.
        public let vpcPeeringConnection: AnalysisComponent?
        /// The VPN connection.
        public let vpnConnection: AnalysisComponent?
        /// The VPN gateway.
        public let vpnGateway: AnalysisComponent?

        public init(acl: AnalysisComponent? = nil, aclRule: AnalysisAclRule? = nil, address: String? = nil, addresses: [String]? = nil, attachedTo: AnalysisComponent? = nil, availabilityZones: [String]? = nil, cidrs: [String]? = nil, classicLoadBalancerListener: AnalysisLoadBalancerListener? = nil, component: AnalysisComponent? = nil, componentAccount: String? = nil, componentRegion: String? = nil, customerGateway: AnalysisComponent? = nil, destination: AnalysisComponent? = nil, destinationVpc: AnalysisComponent? = nil, direction: String? = nil, elasticLoadBalancerListener: AnalysisComponent? = nil, explanationCode: String? = nil, firewallStatefulRule: FirewallStatefulRule? = nil, firewallStatelessRule: FirewallStatelessRule? = nil, ingressRouteTable: AnalysisComponent? = nil, internetGateway: AnalysisComponent? = nil, loadBalancerArn: String? = nil, loadBalancerListenerPort: Int? = nil, loadBalancerTarget: AnalysisLoadBalancerTarget? = nil, loadBalancerTargetGroup: AnalysisComponent? = nil, loadBalancerTargetGroups: [AnalysisComponent]? = nil, loadBalancerTargetPort: Int? = nil, missingComponent: String? = nil, natGateway: AnalysisComponent? = nil, networkInterface: AnalysisComponent? = nil, packetField: String? = nil, port: Int? = nil, portRanges: [PortRange]? = nil, prefixList: AnalysisComponent? = nil, protocols: [String]? = nil, routeTable: AnalysisComponent? = nil, routeTableRoute: AnalysisRouteTableRoute? = nil, securityGroup: AnalysisComponent? = nil, securityGroupRule: AnalysisSecurityGroupRule? = nil, securityGroups: [AnalysisComponent]? = nil, sourceVpc: AnalysisComponent? = nil, state: String? = nil, subnet: AnalysisComponent? = nil, subnetRouteTable: AnalysisComponent? = nil, transitGateway: AnalysisComponent? = nil, transitGatewayAttachment: AnalysisComponent? = nil, transitGatewayRouteTable: AnalysisComponent? = nil, transitGatewayRouteTableRoute: TransitGatewayRouteTableRoute? = nil, vpc: AnalysisComponent? = nil, vpcEndpoint: AnalysisComponent? = nil, vpcPeeringConnection: AnalysisComponent? = nil, vpnConnection: AnalysisComponent? = nil, vpnGateway: AnalysisComponent? = nil) {
            self.acl = acl
            self.aclRule = aclRule
            self.address = address
            self.addresses = addresses
            self.attachedTo = attachedTo
            self.availabilityZones = availabilityZones
            self.cidrs = cidrs
            self.classicLoadBalancerListener = classicLoadBalancerListener
            self.component = component
            self.componentAccount = componentAccount
            self.componentRegion = componentRegion
            self.customerGateway = customerGateway
            self.destination = destination
            self.destinationVpc = destinationVpc
            self.direction = direction
            self.elasticLoadBalancerListener = elasticLoadBalancerListener
            self.explanationCode = explanationCode
            self.firewallStatefulRule = firewallStatefulRule
            self.firewallStatelessRule = firewallStatelessRule
            self.ingressRouteTable = ingressRouteTable
            self.internetGateway = internetGateway
            self.loadBalancerArn = loadBalancerArn
            self.loadBalancerListenerPort = loadBalancerListenerPort
            self.loadBalancerTarget = loadBalancerTarget
            self.loadBalancerTargetGroup = loadBalancerTargetGroup
            self.loadBalancerTargetGroups = loadBalancerTargetGroups
            self.loadBalancerTargetPort = loadBalancerTargetPort
            self.missingComponent = missingComponent
            self.natGateway = natGateway
            self.networkInterface = networkInterface
            self.packetField = packetField
            self.port = port
            self.portRanges = portRanges
            self.prefixList = prefixList
            self.protocols = protocols
            self.routeTable = routeTable
            self.routeTableRoute = routeTableRoute
            self.securityGroup = securityGroup
            self.securityGroupRule = securityGroupRule
            self.securityGroups = securityGroups
            self.sourceVpc = sourceVpc
            self.state = state
            self.subnet = subnet
            self.subnetRouteTable = subnetRouteTable
            self.transitGateway = transitGateway
            self.transitGatewayAttachment = transitGatewayAttachment
            self.transitGatewayRouteTable = transitGatewayRouteTable
            self.transitGatewayRouteTableRoute = transitGatewayRouteTableRoute
            self.vpc = vpc
            self.vpcEndpoint = vpcEndpoint
            self.vpcPeeringConnection = vpcPeeringConnection
            self.vpnConnection = vpnConnection
            self.vpnGateway = vpnGateway
        }

        private enum CodingKeys: String, CodingKey {
            case acl = "acl"
            case aclRule = "aclRule"
            case address = "address"
            case addresses = "addressSet"
            case attachedTo = "attachedTo"
            case availabilityZones = "availabilityZoneSet"
            case cidrs = "cidrSet"
            case classicLoadBalancerListener = "classicLoadBalancerListener"
            case component = "component"
            case componentAccount = "componentAccount"
            case componentRegion = "componentRegion"
            case customerGateway = "customerGateway"
            case destination = "destination"
            case destinationVpc = "destinationVpc"
            case direction = "direction"
            case elasticLoadBalancerListener = "elasticLoadBalancerListener"
            case explanationCode = "explanationCode"
            case firewallStatefulRule = "firewallStatefulRule"
            case firewallStatelessRule = "firewallStatelessRule"
            case ingressRouteTable = "ingressRouteTable"
            case internetGateway = "internetGateway"
            case loadBalancerArn = "loadBalancerArn"
            case loadBalancerListenerPort = "loadBalancerListenerPort"
            case loadBalancerTarget = "loadBalancerTarget"
            case loadBalancerTargetGroup = "loadBalancerTargetGroup"
            case loadBalancerTargetGroups = "loadBalancerTargetGroupSet"
            case loadBalancerTargetPort = "loadBalancerTargetPort"
            case missingComponent = "missingComponent"
            case natGateway = "natGateway"
            case networkInterface = "networkInterface"
            case packetField = "packetField"
            case port = "port"
            case portRanges = "portRangeSet"
            case prefixList = "prefixList"
            case protocols = "protocolSet"
            case routeTable = "routeTable"
            case routeTableRoute = "routeTableRoute"
            case securityGroup = "securityGroup"
            case securityGroupRule = "securityGroupRule"
            case securityGroups = "securityGroupSet"
            case sourceVpc = "sourceVpc"
            case state = "state"
            case subnet = "subnet"
            case subnetRouteTable = "subnetRouteTable"
            case transitGateway = "transitGateway"
            case transitGatewayAttachment = "transitGatewayAttachment"
            case transitGatewayRouteTable = "transitGatewayRouteTable"
            case transitGatewayRouteTableRoute = "transitGatewayRouteTableRoute"
            case vpc = "vpc"
            case vpcEndpoint = "vpcEndpoint"
            case vpcPeeringConnection = "vpcPeeringConnection"
            case vpnConnection = "vpnConnection"
            case vpnGateway = "vpnGateway"
        }
    }

    public struct ExportClientVpnClientCertificateRevocationListRequest: AWSEncodableShape {
        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(clientVpnEndpointId: String? = nil, dryRun: Bool? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
        }
    }

    public struct ExportClientVpnClientCertificateRevocationListResult: AWSDecodableShape {
        /// Information about the client certificate revocation list.
        public let certificateRevocationList: String?
        /// The current state of the client certificate revocation list.
        public let status: ClientCertificateRevocationListStatus?

        public init(certificateRevocationList: String? = nil, status: ClientCertificateRevocationListStatus? = nil) {
            self.certificateRevocationList = certificateRevocationList
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case certificateRevocationList = "certificateRevocationList"
            case status = "status"
        }
    }

    public struct ExportClientVpnClientConfigurationRequest: AWSEncodableShape {
        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(clientVpnEndpointId: String? = nil, dryRun: Bool? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
        }
    }

    public struct ExportClientVpnClientConfigurationResult: AWSDecodableShape {
        /// The contents of the Client VPN endpoint configuration file.
        public let clientConfiguration: String?

        public init(clientConfiguration: String? = nil) {
            self.clientConfiguration = clientConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case clientConfiguration = "clientConfiguration"
        }
    }

    public struct ExportImageRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Token to enable idempotency for export image requests.
        public let clientToken: String?
        /// A description of the image being exported. The maximum length is 255 characters.
        public let description: String?
        /// The disk image format.
        public let diskImageFormat: DiskImageFormat?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the image.
        public let imageId: String?
        /// The name of the role that grants VM Import/Export permission to export images to your Amazon S3 bucket. If this parameter is not specified, the default role is named 'vmimport'.
        public let roleName: String?
        /// The Amazon S3 bucket for the destination image. The destination bucket must exist.
        public let s3ExportLocation: ExportTaskS3LocationRequest?
        /// The tags to apply to the export image task during creation.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = ExportImageRequest.idempotencyToken(), description: String? = nil, diskImageFormat: DiskImageFormat? = nil, dryRun: Bool? = nil, imageId: String? = nil, roleName: String? = nil, s3ExportLocation: ExportTaskS3LocationRequest? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.diskImageFormat = diskImageFormat
            self.dryRun = dryRun
            self.imageId = imageId
            self.roleName = roleName
            self.s3ExportLocation = s3ExportLocation
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case diskImageFormat = "DiskImageFormat"
            case dryRun = "DryRun"
            case imageId = "ImageId"
            case roleName = "RoleName"
            case s3ExportLocation = "S3ExportLocation"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct ExportImageResult: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description of the image being exported.
        public let description: String?
        /// The disk image format for the exported image.
        public let diskImageFormat: DiskImageFormat?
        /// The ID of the export image task.
        public let exportImageTaskId: String?
        /// The ID of the image.
        public let imageId: String?
        /// The percent complete of the export image task.
        public let progress: String?
        /// The name of the role that grants VM Import/Export permission to export images to your Amazon S3 bucket.
        public let roleName: String?
        /// Information about the destination Amazon S3 bucket.
        public let s3ExportLocation: ExportTaskS3Location?
        /// The status of the export image task. The possible values are active, completed, deleting, and deleted.
        public let status: String?
        /// The status message for the export image task.
        public let statusMessage: String?
        /// Any tags assigned to the export image task.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(description: String? = nil, diskImageFormat: DiskImageFormat? = nil, exportImageTaskId: String? = nil, imageId: String? = nil, progress: String? = nil, roleName: String? = nil, s3ExportLocation: ExportTaskS3Location? = nil, status: String? = nil, statusMessage: String? = nil, tags: [Tag]? = nil) {
            self.description = description
            self.diskImageFormat = diskImageFormat
            self.exportImageTaskId = exportImageTaskId
            self.imageId = imageId
            self.progress = progress
            self.roleName = roleName
            self.s3ExportLocation = s3ExportLocation
            self.status = status
            self.statusMessage = statusMessage
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case diskImageFormat = "diskImageFormat"
            case exportImageTaskId = "exportImageTaskId"
            case imageId = "imageId"
            case progress = "progress"
            case roleName = "roleName"
            case s3ExportLocation = "s3ExportLocation"
            case status = "status"
            case statusMessage = "statusMessage"
            case tags = "tagSet"
        }
    }

    public struct ExportImageTask: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description of the image being exported.
        public let description: String?
        /// The ID of the export image task.
        public let exportImageTaskId: String?
        /// The ID of the image.
        public let imageId: String?
        /// The percent complete of the export image task.
        public let progress: String?
        /// Information about the destination Amazon S3 bucket.
        public let s3ExportLocation: ExportTaskS3Location?
        /// The status of the export image task. The possible values are active, completed, deleting, and deleted.
        public let status: String?
        /// The status message for the export image task.
        public let statusMessage: String?
        /// Any tags assigned to the export image task.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(description: String? = nil, exportImageTaskId: String? = nil, imageId: String? = nil, progress: String? = nil, s3ExportLocation: ExportTaskS3Location? = nil, status: String? = nil, statusMessage: String? = nil, tags: [Tag]? = nil) {
            self.description = description
            self.exportImageTaskId = exportImageTaskId
            self.imageId = imageId
            self.progress = progress
            self.s3ExportLocation = s3ExportLocation
            self.status = status
            self.statusMessage = statusMessage
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case exportImageTaskId = "exportImageTaskId"
            case imageId = "imageId"
            case progress = "progress"
            case s3ExportLocation = "s3ExportLocation"
            case status = "status"
            case statusMessage = "statusMessage"
            case tags = "tagSet"
        }
    }

    public struct ExportTask: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description of the resource being exported.
        public let description: String?
        /// The ID of the export task.
        public let exportTaskId: String?
        /// Information about the export task.
        public let exportToS3Task: ExportToS3Task?
        /// Information about the instance to export.
        public let instanceExportDetails: InstanceExportDetails?
        /// The state of the export task.
        public let state: ExportTaskState?
        /// The status message related to the export task.
        public let statusMessage: String?
        /// The tags for the export task.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(description: String? = nil, exportTaskId: String? = nil, exportToS3Task: ExportToS3Task? = nil, instanceExportDetails: InstanceExportDetails? = nil, state: ExportTaskState? = nil, statusMessage: String? = nil, tags: [Tag]? = nil) {
            self.description = description
            self.exportTaskId = exportTaskId
            self.exportToS3Task = exportToS3Task
            self.instanceExportDetails = instanceExportDetails
            self.state = state
            self.statusMessage = statusMessage
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case exportTaskId = "exportTaskId"
            case exportToS3Task = "exportToS3"
            case instanceExportDetails = "instanceExport"
            case state = "state"
            case statusMessage = "statusMessage"
            case tags = "tagSet"
        }
    }

    public struct ExportTaskS3Location: AWSDecodableShape {
        /// The destination Amazon S3 bucket.
        public let s3Bucket: String?
        /// The prefix (logical hierarchy) in the bucket.
        public let s3Prefix: String?

        public init(s3Bucket: String? = nil, s3Prefix: String? = nil) {
            self.s3Bucket = s3Bucket
            self.s3Prefix = s3Prefix
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket = "s3Bucket"
            case s3Prefix = "s3Prefix"
        }
    }

    public struct ExportTaskS3LocationRequest: AWSEncodableShape {
        /// The destination Amazon S3 bucket.
        public let s3Bucket: String?
        /// The prefix (logical hierarchy) in the bucket.
        public let s3Prefix: String?

        public init(s3Bucket: String? = nil, s3Prefix: String? = nil) {
            self.s3Bucket = s3Bucket
            self.s3Prefix = s3Prefix
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket = "S3Bucket"
            case s3Prefix = "S3Prefix"
        }
    }

    public struct ExportToS3Task: AWSDecodableShape {
        /// The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is exported.
        public let containerFormat: ContainerFormat?
        /// The format for the exported image.
        public let diskImageFormat: DiskImageFormat?
        /// The Amazon S3 bucket for the destination image. The destination bucket must exist and have an access control list (ACL) attached that specifies the Region-specific canonical account ID for the Grantee. For more information about the ACL to your S3 bucket, see Prerequisites in the VM Import/Export User Guide.
        public let s3Bucket: String?
        /// The encryption key for your S3 bucket.
        public let s3Key: String?

        public init(containerFormat: ContainerFormat? = nil, diskImageFormat: DiskImageFormat? = nil, s3Bucket: String? = nil, s3Key: String? = nil) {
            self.containerFormat = containerFormat
            self.diskImageFormat = diskImageFormat
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
        }

        private enum CodingKeys: String, CodingKey {
            case containerFormat = "containerFormat"
            case diskImageFormat = "diskImageFormat"
            case s3Bucket = "s3Bucket"
            case s3Key = "s3Key"
        }
    }

    public struct ExportToS3TaskSpecification: AWSEncodableShape {
        /// The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is exported.
        public let containerFormat: ContainerFormat?
        /// The format for the exported image.
        public let diskImageFormat: DiskImageFormat?
        /// The Amazon S3 bucket for the destination image. The destination bucket must exist and have an access control list (ACL) attached that specifies the Region-specific canonical account ID for the Grantee. For more information about the ACL to your S3 bucket, see Prerequisites in the VM Import/Export User Guide.
        public let s3Bucket: String?
        /// The image is written to a single object in the Amazon S3 bucket at the S3 key s3prefix + exportTaskId + '.' + diskImageFormat.
        public let s3Prefix: String?

        public init(containerFormat: ContainerFormat? = nil, diskImageFormat: DiskImageFormat? = nil, s3Bucket: String? = nil, s3Prefix: String? = nil) {
            self.containerFormat = containerFormat
            self.diskImageFormat = diskImageFormat
            self.s3Bucket = s3Bucket
            self.s3Prefix = s3Prefix
        }

        private enum CodingKeys: String, CodingKey {
            case containerFormat = "containerFormat"
            case diskImageFormat = "diskImageFormat"
            case s3Bucket = "s3Bucket"
            case s3Prefix = "s3Prefix"
        }
    }

    public struct ExportTransitGatewayRoutesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    attachment.transit-gateway-attachment-id - The id of the transit gateway attachment.    attachment.resource-id - The resource id of the transit gateway attachment.    route-search.exact-match - The exact match of the specified filter.    route-search.longest-prefix-match - The longest prefix that matches the route.    route-search.subnet-of-match - The routes with a subnet that match the specified CIDR filter.    route-search.supernet-of-match - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.    state - The state of the route (active | blackhole).    transit-gateway-route-destination-cidr-block - The CIDR range.    type - The type of route (propagated | static).
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The name of the S3 bucket.
        public let s3Bucket: String?
        /// The ID of the route table.
        public let transitGatewayRouteTableId: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, s3Bucket: String? = nil, transitGatewayRouteTableId: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.s3Bucket = s3Bucket
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case s3Bucket = "S3Bucket"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct ExportTransitGatewayRoutesResult: AWSDecodableShape {
        /// The URL of the exported file in Amazon S3. For example,  s3://bucket_name/VPCTransitGateway/TransitGatewayRouteTables/file_name.
        public let s3Location: String?

        public init(s3Location: String? = nil) {
            self.s3Location = s3Location
        }

        private enum CodingKeys: String, CodingKey {
            case s3Location = "s3Location"
        }
    }

    public struct FailedCapacityReservationFleetCancellationResult: AWSDecodableShape {
        /// Information about the Capacity Reservation Fleet cancellation error.
        public let cancelCapacityReservationFleetError: CancelCapacityReservationFleetError?
        /// The ID of the Capacity Reservation Fleet that could not be cancelled.
        public let capacityReservationFleetId: String?

        public init(cancelCapacityReservationFleetError: CancelCapacityReservationFleetError? = nil, capacityReservationFleetId: String? = nil) {
            self.cancelCapacityReservationFleetError = cancelCapacityReservationFleetError
            self.capacityReservationFleetId = capacityReservationFleetId
        }

        private enum CodingKeys: String, CodingKey {
            case cancelCapacityReservationFleetError = "cancelCapacityReservationFleetError"
            case capacityReservationFleetId = "capacityReservationFleetId"
        }
    }

    public struct FailedQueuedPurchaseDeletion: AWSDecodableShape {
        /// The error.
        public let error: DeleteQueuedReservedInstancesError?
        /// The ID of the Reserved Instance.
        public let reservedInstancesId: String?

        public init(error: DeleteQueuedReservedInstancesError? = nil, reservedInstancesId: String? = nil) {
            self.error = error
            self.reservedInstancesId = reservedInstancesId
        }

        private enum CodingKeys: String, CodingKey {
            case error = "error"
            case reservedInstancesId = "reservedInstancesId"
        }
    }

    public struct FastLaunchLaunchTemplateSpecificationRequest: AWSEncodableShape {
        /// Specify the ID of the launch template that the AMI should use for Windows fast launch.
        public let launchTemplateId: String?
        /// Specify the name of the launch template that the AMI should use for Windows fast launch.
        public let launchTemplateName: String?
        /// Specify the version of the launch template that the AMI should use for Windows fast launch.
        public let version: String?

        public init(launchTemplateId: String? = nil, launchTemplateName: String? = nil, version: String? = nil) {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
            case version = "Version"
        }
    }

    public struct FastLaunchLaunchTemplateSpecificationResponse: AWSDecodableShape {
        /// The ID of the launch template that the AMI uses for Windows fast launch.
        public let launchTemplateId: String?
        /// The name of the launch template that the AMI uses for Windows fast launch.
        public let launchTemplateName: String?
        /// The version of the launch template that the AMI uses for Windows fast launch.
        public let version: String?

        public init(launchTemplateId: String? = nil, launchTemplateName: String? = nil, version: String? = nil) {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId = "launchTemplateId"
            case launchTemplateName = "launchTemplateName"
            case version = "version"
        }
    }

    public struct FastLaunchSnapshotConfigurationRequest: AWSEncodableShape {
        /// The number of pre-provisioned snapshots to keep on hand for a Windows fast launch
        /// 			enabled AMI.
        public let targetResourceCount: Int?

        public init(targetResourceCount: Int? = nil) {
            self.targetResourceCount = targetResourceCount
        }

        private enum CodingKeys: String, CodingKey {
            case targetResourceCount = "TargetResourceCount"
        }
    }

    public struct FastLaunchSnapshotConfigurationResponse: AWSDecodableShape {
        /// The number of pre-provisioned snapshots requested to keep on hand for a Windows fast launch
        /// 			enabled AMI.
        public let targetResourceCount: Int?

        public init(targetResourceCount: Int? = nil) {
            self.targetResourceCount = targetResourceCount
        }

        private enum CodingKeys: String, CodingKey {
            case targetResourceCount = "targetResourceCount"
        }
    }

    public struct FederatedAuthentication: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the IAM SAML identity provider.
        public let samlProviderArn: String?
        /// The Amazon Resource Name (ARN) of the IAM SAML identity provider for the self-service portal.
        public let selfServiceSamlProviderArn: String?

        public init(samlProviderArn: String? = nil, selfServiceSamlProviderArn: String? = nil) {
            self.samlProviderArn = samlProviderArn
            self.selfServiceSamlProviderArn = selfServiceSamlProviderArn
        }

        private enum CodingKeys: String, CodingKey {
            case samlProviderArn = "samlProviderArn"
            case selfServiceSamlProviderArn = "selfServiceSamlProviderArn"
        }
    }

    public struct FederatedAuthenticationRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the IAM SAML identity provider.
        public let samlProviderArn: String?
        /// The Amazon Resource Name (ARN) of the IAM SAML identity provider for the self-service portal.
        public let selfServiceSAMLProviderArn: String?

        public init(samlProviderArn: String? = nil, selfServiceSAMLProviderArn: String? = nil) {
            self.samlProviderArn = samlProviderArn
            self.selfServiceSAMLProviderArn = selfServiceSAMLProviderArn
        }

        private enum CodingKeys: String, CodingKey {
            case samlProviderArn = "SAMLProviderArn"
            case selfServiceSAMLProviderArn = "SelfServiceSAMLProviderArn"
        }
    }

    public struct Filter: AWSEncodableShape {
        public struct _ValuesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The name of the filter. Filter names are case-sensitive.
        public let name: String?
        /// The filter values. Filter values are case-sensitive. If you specify multiple values for a  filter, the values are joined with an OR, and the request returns all results  that match any of the specified values.
        @OptionalCustomCoding<EC2ArrayCoder<_ValuesEncoding, String>>
        public var values: [String]?

        public init(name: String? = nil, values: [String]? = nil) {
            self.name = name
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Value"
        }
    }

    public struct FilterPortRange: AWSDecodableShape {
        /// The first port in the range.
        public let fromPort: Int?
        /// The last port in the range.
        public let toPort: Int?

        public init(fromPort: Int? = nil, toPort: Int? = nil) {
            self.fromPort = fromPort
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case fromPort = "fromPort"
            case toPort = "toPort"
        }
    }

    public struct FirewallStatefulRule: AWSDecodableShape {
        public struct _DestinationPortsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _DestinationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SourcePortsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SourcesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The destination ports.
        @OptionalCustomCoding<EC2ArrayCoder<_DestinationPortsEncoding, PortRange>>
        public var destinationPorts: [PortRange]?
        /// The destination IP addresses, in CIDR notation.
        @OptionalCustomCoding<EC2ArrayCoder<_DestinationsEncoding, String>>
        public var destinations: [String]?
        /// The direction. The possible values are FORWARD and ANY.
        public let direction: String?
        /// The protocol.
        public let `protocol`: String?
        /// The rule action. The possible values are pass, drop, and  alert.
        public let ruleAction: String?
        /// The ARN of the stateful rule group.
        public let ruleGroupArn: String?
        /// The source ports.
        @OptionalCustomCoding<EC2ArrayCoder<_SourcePortsEncoding, PortRange>>
        public var sourcePorts: [PortRange]?
        /// The source IP addresses, in CIDR notation.
        @OptionalCustomCoding<EC2ArrayCoder<_SourcesEncoding, String>>
        public var sources: [String]?

        public init(destinationPorts: [PortRange]? = nil, destinations: [String]? = nil, direction: String? = nil, protocol: String? = nil, ruleAction: String? = nil, ruleGroupArn: String? = nil, sourcePorts: [PortRange]? = nil, sources: [String]? = nil) {
            self.destinationPorts = destinationPorts
            self.destinations = destinations
            self.direction = direction
            self.`protocol` = `protocol`
            self.ruleAction = ruleAction
            self.ruleGroupArn = ruleGroupArn
            self.sourcePorts = sourcePorts
            self.sources = sources
        }

        private enum CodingKeys: String, CodingKey {
            case destinationPorts = "destinationPortSet"
            case destinations = "destinationSet"
            case direction = "direction"
            case `protocol` = "protocol"
            case ruleAction = "ruleAction"
            case ruleGroupArn = "ruleGroupArn"
            case sourcePorts = "sourcePortSet"
            case sources = "sourceSet"
        }
    }

    public struct FirewallStatelessRule: AWSDecodableShape {
        public struct _DestinationPortsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _DestinationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ProtocolsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SourcePortsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SourcesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The destination ports.
        @OptionalCustomCoding<EC2ArrayCoder<_DestinationPortsEncoding, PortRange>>
        public var destinationPorts: [PortRange]?
        /// The destination IP addresses, in CIDR notation.
        @OptionalCustomCoding<EC2ArrayCoder<_DestinationsEncoding, String>>
        public var destinations: [String]?
        /// The rule priority.
        public let priority: Int?
        /// The protocols.
        @OptionalCustomCoding<EC2ArrayCoder<_ProtocolsEncoding, Int>>
        public var protocols: [Int]?
        /// The rule action. The possible values are pass, drop, and  forward_to_site.
        public let ruleAction: String?
        /// The ARN of the stateless rule group.
        public let ruleGroupArn: String?
        /// The source ports.
        @OptionalCustomCoding<EC2ArrayCoder<_SourcePortsEncoding, PortRange>>
        public var sourcePorts: [PortRange]?
        /// The source IP addresses, in CIDR notation.
        @OptionalCustomCoding<EC2ArrayCoder<_SourcesEncoding, String>>
        public var sources: [String]?

        public init(destinationPorts: [PortRange]? = nil, destinations: [String]? = nil, priority: Int? = nil, protocols: [Int]? = nil, ruleAction: String? = nil, ruleGroupArn: String? = nil, sourcePorts: [PortRange]? = nil, sources: [String]? = nil) {
            self.destinationPorts = destinationPorts
            self.destinations = destinations
            self.priority = priority
            self.protocols = protocols
            self.ruleAction = ruleAction
            self.ruleGroupArn = ruleGroupArn
            self.sourcePorts = sourcePorts
            self.sources = sources
        }

        private enum CodingKeys: String, CodingKey {
            case destinationPorts = "destinationPortSet"
            case destinations = "destinationSet"
            case priority = "priority"
            case protocols = "protocolSet"
            case ruleAction = "ruleAction"
            case ruleGroupArn = "ruleGroupArn"
            case sourcePorts = "sourcePortSet"
            case sources = "sourceSet"
        }
    }

    public struct FleetCapacityReservation: AWSDecodableShape {
        /// The Availability Zone in which the Capacity Reservation reserves capacity.
        public let availabilityZone: String?
        /// The ID of the Availability Zone in which the Capacity Reservation reserves capacity.
        public let availabilityZoneId: String?
        /// The ID of the Capacity Reservation.
        public let capacityReservationId: String?
        /// The date and time at which the Capacity Reservation was created.
        public let createDate: Date?
        /// Indicates whether the Capacity Reservation reserves capacity for EBS-optimized instance types.
        public let ebsOptimized: Bool?
        /// The number of capacity units fulfilled by the Capacity Reservation. For more information, see
        ///
        /// 				Total target capacity in the Amazon EC2 User Guide.
        public let fulfilledCapacity: Double?
        /// The type of operating system for which the Capacity Reservation reserves capacity.
        public let instancePlatform: CapacityReservationInstancePlatform?
        /// The instance type for which the Capacity Reservation reserves capacity.
        public let instanceType: InstanceType?
        /// The priority of the instance type in the Capacity Reservation Fleet. For more information,
        /// 			see
        /// 				Instance type priority in the Amazon EC2 User Guide.
        public let priority: Int?
        /// The total number of instances for which the Capacity Reservation reserves capacity.
        public let totalInstanceCount: Int?
        /// The weight of the instance type in the Capacity Reservation Fleet. For more information,
        /// 			see
        /// 				Instance type weight in the Amazon EC2 User Guide.
        public let weight: Double?

        public init(availabilityZone: String? = nil, availabilityZoneId: String? = nil, capacityReservationId: String? = nil, createDate: Date? = nil, ebsOptimized: Bool? = nil, fulfilledCapacity: Double? = nil, instancePlatform: CapacityReservationInstancePlatform? = nil, instanceType: InstanceType? = nil, priority: Int? = nil, totalInstanceCount: Int? = nil, weight: Double? = nil) {
            self.availabilityZone = availabilityZone
            self.availabilityZoneId = availabilityZoneId
            self.capacityReservationId = capacityReservationId
            self.createDate = createDate
            self.ebsOptimized = ebsOptimized
            self.fulfilledCapacity = fulfilledCapacity
            self.instancePlatform = instancePlatform
            self.instanceType = instanceType
            self.priority = priority
            self.totalInstanceCount = totalInstanceCount
            self.weight = weight
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case availabilityZoneId = "availabilityZoneId"
            case capacityReservationId = "capacityReservationId"
            case createDate = "createDate"
            case ebsOptimized = "ebsOptimized"
            case fulfilledCapacity = "fulfilledCapacity"
            case instancePlatform = "instancePlatform"
            case instanceType = "instanceType"
            case priority = "priority"
            case totalInstanceCount = "totalInstanceCount"
            case weight = "weight"
        }
    }

    public struct FleetData: AWSDecodableShape {
        public struct _ErrorsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _InstancesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _LaunchTemplateConfigsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The progress of the EC2 Fleet. If there is an error, the status is error. After all requests are placed, the status is pending_fulfillment. If the size of the EC2 Fleet is equal to or greater than its target capacity, the status is fulfilled. If the size of the EC2 Fleet is decreased, the status is pending_termination while instances are terminating.
        public let activityStatus: FleetActivityStatus?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring idempotency. Constraints: Maximum 64 ASCII characters
        public let clientToken: String?
        /// Reserved.
        public let context: String?
        /// The creation date and time of the EC2 Fleet.
        public let createTime: Date?
        /// Information about the instances that could not be launched by the fleet. Valid only when Type is set to instant.
        @OptionalCustomCoding<EC2ArrayCoder<_ErrorsEncoding, DescribeFleetError>>
        public var errors: [DescribeFleetError]?
        /// Indicates whether running instances should be terminated if the target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet. Supported only for fleets of type maintain.
        public let excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy?
        /// The ID of the EC2 Fleet.
        public let fleetId: String?
        /// The state of the EC2 Fleet.
        public let fleetState: FleetStateCode?
        /// The number of units fulfilled by this request compared to the set target capacity.
        public let fulfilledCapacity: Double?
        /// The number of units fulfilled by this request compared to the set target On-Demand capacity.
        public let fulfilledOnDemandCapacity: Double?
        /// Information about the instances that were launched by the fleet. Valid only when Type is set to instant.
        @OptionalCustomCoding<EC2ArrayCoder<_InstancesEncoding, DescribeFleetsInstances>>
        public var instances: [DescribeFleetsInstances]?
        /// The launch template and overrides.
        @OptionalCustomCoding<EC2ArrayCoder<_LaunchTemplateConfigsEncoding, FleetLaunchTemplateConfig>>
        public var launchTemplateConfigs: [FleetLaunchTemplateConfig]?
        /// The allocation strategy of On-Demand Instances in an EC2 Fleet.
        public let onDemandOptions: OnDemandOptions?
        /// Indicates whether EC2 Fleet should replace unhealthy Spot Instances. Supported only for fleets of type maintain. For more information, see EC2 Fleet health checks in the Amazon EC2 User Guide.
        public let replaceUnhealthyInstances: Bool?
        /// The configuration of Spot Instances in an EC2 Fleet.
        public let spotOptions: SpotOptions?
        /// The tags for an EC2 Fleet resource.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The number of units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is maintain, you can specify a target capacity of 0 and add capacity later.
        public let targetCapacitySpecification: TargetCapacitySpecification?
        /// Indicates whether running instances should be terminated when the EC2 Fleet expires.
        public let terminateInstancesWithExpiration: Bool?
        /// The type of request. Indicates whether the EC2 Fleet only requests the target capacity, or also attempts to maintain it. If you request a certain target capacity, EC2 Fleet only places the required requests; it does not attempt to replenish instances if capacity is diminished, and it does not submit requests in alternative capacity pools if capacity is unavailable. To maintain a certain target capacity, EC2 Fleet places the required requests to meet this target capacity. It also automatically replenishes any interrupted Spot Instances. Default: maintain.
        public let type: FleetType?
        /// The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
        public let validFrom: Date?
        /// The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new instance requests are placed or able to fulfill the request. The default end date is 7 days from the current date.
        public let validUntil: Date?

        public init(activityStatus: FleetActivityStatus? = nil, clientToken: String? = nil, context: String? = nil, createTime: Date? = nil, errors: [DescribeFleetError]? = nil, excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy? = nil, fleetId: String? = nil, fleetState: FleetStateCode? = nil, fulfilledCapacity: Double? = nil, fulfilledOnDemandCapacity: Double? = nil, instances: [DescribeFleetsInstances]? = nil, launchTemplateConfigs: [FleetLaunchTemplateConfig]? = nil, onDemandOptions: OnDemandOptions? = nil, replaceUnhealthyInstances: Bool? = nil, spotOptions: SpotOptions? = nil, tags: [Tag]? = nil, targetCapacitySpecification: TargetCapacitySpecification? = nil, terminateInstancesWithExpiration: Bool? = nil, type: FleetType? = nil, validFrom: Date? = nil, validUntil: Date? = nil) {
            self.activityStatus = activityStatus
            self.clientToken = clientToken
            self.context = context
            self.createTime = createTime
            self.errors = errors
            self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
            self.fleetId = fleetId
            self.fleetState = fleetState
            self.fulfilledCapacity = fulfilledCapacity
            self.fulfilledOnDemandCapacity = fulfilledOnDemandCapacity
            self.instances = instances
            self.launchTemplateConfigs = launchTemplateConfigs
            self.onDemandOptions = onDemandOptions
            self.replaceUnhealthyInstances = replaceUnhealthyInstances
            self.spotOptions = spotOptions
            self.tags = tags
            self.targetCapacitySpecification = targetCapacitySpecification
            self.terminateInstancesWithExpiration = terminateInstancesWithExpiration
            self.type = type
            self.validFrom = validFrom
            self.validUntil = validUntil
        }

        private enum CodingKeys: String, CodingKey {
            case activityStatus = "activityStatus"
            case clientToken = "clientToken"
            case context = "context"
            case createTime = "createTime"
            case errors = "errorSet"
            case excessCapacityTerminationPolicy = "excessCapacityTerminationPolicy"
            case fleetId = "fleetId"
            case fleetState = "fleetState"
            case fulfilledCapacity = "fulfilledCapacity"
            case fulfilledOnDemandCapacity = "fulfilledOnDemandCapacity"
            case instances = "fleetInstanceSet"
            case launchTemplateConfigs = "launchTemplateConfigs"
            case onDemandOptions = "onDemandOptions"
            case replaceUnhealthyInstances = "replaceUnhealthyInstances"
            case spotOptions = "spotOptions"
            case tags = "tagSet"
            case targetCapacitySpecification = "targetCapacitySpecification"
            case terminateInstancesWithExpiration = "terminateInstancesWithExpiration"
            case type = "type"
            case validFrom = "validFrom"
            case validUntil = "validUntil"
        }
    }

    public struct FleetLaunchTemplateConfig: AWSDecodableShape {
        public struct _OverridesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The launch template.
        public let launchTemplateSpecification: FleetLaunchTemplateSpecification?
        /// Any parameters that you specify override the same parameters in the launch template.
        @OptionalCustomCoding<EC2ArrayCoder<_OverridesEncoding, FleetLaunchTemplateOverrides>>
        public var overrides: [FleetLaunchTemplateOverrides]?

        public init(launchTemplateSpecification: FleetLaunchTemplateSpecification? = nil, overrides: [FleetLaunchTemplateOverrides]? = nil) {
            self.launchTemplateSpecification = launchTemplateSpecification
            self.overrides = overrides
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateSpecification = "launchTemplateSpecification"
            case overrides = "overrides"
        }
    }

    public struct FleetLaunchTemplateConfigRequest: AWSEncodableShape {
        public struct _OverridesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The launch template to use. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateSpecification: FleetLaunchTemplateSpecificationRequest?
        /// Any parameters that you specify override the same parameters in the launch template. For fleets of type request and maintain, a maximum of 300 items is allowed across all launch templates.
        @OptionalCustomCoding<EC2ArrayCoder<_OverridesEncoding, FleetLaunchTemplateOverridesRequest>>
        public var overrides: [FleetLaunchTemplateOverridesRequest]?

        public init(launchTemplateSpecification: FleetLaunchTemplateSpecificationRequest? = nil, overrides: [FleetLaunchTemplateOverridesRequest]? = nil) {
            self.launchTemplateSpecification = launchTemplateSpecification
            self.overrides = overrides
        }

        public func validate(name: String) throws {
            try self.launchTemplateSpecification?.validate(name: "\(name).launchTemplateSpecification")
            try self.overrides?.forEach {
                try $0.validate(name: "\(name).overrides[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateSpecification = "LaunchTemplateSpecification"
            case overrides = "Overrides"
        }
    }

    public struct FleetLaunchTemplateOverrides: AWSDecodableShape {
        /// The Availability Zone in which to launch the instances.
        public let availabilityZone: String?
        /// The ID of the AMI. An AMI is required to launch an instance. This parameter is only available for fleets of type instant. For fleets of type maintain and request, you must specify the AMI ID in the launch template.
        public let imageId: String?
        /// The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with those attributes.  If you specify InstanceRequirements, you can't specify InstanceType.
        public let instanceRequirements: InstanceRequirements?
        /// The instance type.  mac1.metal is not supported as a launch template override.  If you specify InstanceType, you can't specify InstanceRequirements.
        public let instanceType: InstanceType?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.   If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify this parameter.
        public let maxPrice: String?
        /// The location where the instance launched, if applicable.
        public let placement: PlacementResponse?
        /// The priority for the launch template override. The highest priority is launched first. If the On-Demand AllocationStrategy is set to prioritized, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. If the Spot AllocationStrategy is set to capacity-optimized-prioritized, EC2 Fleet uses priority on a best-effort basis to determine which launch template override to use in fulfilling Spot capacity, but optimizes for capacity first. Valid values are whole numbers starting at 0. The lower the number, the higher the priority. If no number is set, the override has the lowest priority. You can set the same priority for different launch template overrides.
        public let priority: Double?
        /// The ID of the subnet in which to launch the instances.
        public let subnetId: String?
        /// The number of units provided by the specified instance type.  When specifying weights, the price used in the lowest-price and price-capacity-optimized allocation strategies is per unit hour (where the instance price is divided by the specified weight). However, if all the specified weights are above the requested TargetCapacity, resulting in only 1 instance being launched, the price used is per instance hour.
        public let weightedCapacity: Double?

        public init(availabilityZone: String? = nil, imageId: String? = nil, instanceRequirements: InstanceRequirements? = nil, instanceType: InstanceType? = nil, maxPrice: String? = nil, placement: PlacementResponse? = nil, priority: Double? = nil, subnetId: String? = nil, weightedCapacity: Double? = nil) {
            self.availabilityZone = availabilityZone
            self.imageId = imageId
            self.instanceRequirements = instanceRequirements
            self.instanceType = instanceType
            self.maxPrice = maxPrice
            self.placement = placement
            self.priority = priority
            self.subnetId = subnetId
            self.weightedCapacity = weightedCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case imageId = "imageId"
            case instanceRequirements = "instanceRequirements"
            case instanceType = "instanceType"
            case maxPrice = "maxPrice"
            case placement = "placement"
            case priority = "priority"
            case subnetId = "subnetId"
            case weightedCapacity = "weightedCapacity"
        }
    }

    public struct FleetLaunchTemplateOverridesRequest: AWSEncodableShape {
        /// The Availability Zone in which to launch the instances.
        public let availabilityZone: String?
        /// The ID of the AMI. An AMI is required to launch an instance. This parameter is only available for fleets of type instant. For fleets of type maintain and request, you must specify the AMI ID in the launch template.
        public let imageId: String?
        /// The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with those attributes.  If you specify InstanceRequirements, you can't specify InstanceType.
        public let instanceRequirements: InstanceRequirementsRequest?
        /// The instance type.  mac1.metal is not supported as a launch template override.  If you specify InstanceType, you can't specify InstanceRequirements.
        public let instanceType: InstanceType?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.   If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify this parameter.
        public let maxPrice: String?
        /// The location where the instance launched, if applicable.
        public let placement: Placement?
        /// The priority for the launch template override. The highest priority is launched first. If the On-Demand AllocationStrategy is set to prioritized, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. If the Spot AllocationStrategy is set to capacity-optimized-prioritized, EC2 Fleet uses priority on a best-effort basis to determine which launch template override to use in fulfilling Spot capacity, but optimizes for capacity first. Valid values are whole numbers starting at 0. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority. You can set the same priority for different launch template overrides.
        public let priority: Double?
        /// The IDs of the subnets in which to launch the instances. Separate multiple subnet IDs using commas (for example, subnet-1234abcdeexample1, subnet-0987cdef6example2). A request of type instant can have only one subnet ID.
        public let subnetId: String?
        /// The number of units provided by the specified instance type.  When specifying weights, the price used in the lowest-price and price-capacity-optimized allocation strategies is per unit hour (where the instance price is divided by the specified weight). However, if all the specified weights are above the requested TargetCapacity, resulting in only 1 instance being launched, the price used is per instance hour.
        public let weightedCapacity: Double?

        public init(availabilityZone: String? = nil, imageId: String? = nil, instanceRequirements: InstanceRequirementsRequest? = nil, instanceType: InstanceType? = nil, maxPrice: String? = nil, placement: Placement? = nil, priority: Double? = nil, subnetId: String? = nil, weightedCapacity: Double? = nil) {
            self.availabilityZone = availabilityZone
            self.imageId = imageId
            self.instanceRequirements = instanceRequirements
            self.instanceType = instanceType
            self.maxPrice = maxPrice
            self.placement = placement
            self.priority = priority
            self.subnetId = subnetId
            self.weightedCapacity = weightedCapacity
        }

        public func validate(name: String) throws {
            try self.instanceRequirements?.validate(name: "\(name).instanceRequirements")
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case imageId = "ImageId"
            case instanceRequirements = "InstanceRequirements"
            case instanceType = "InstanceType"
            case maxPrice = "MaxPrice"
            case placement = "Placement"
            case priority = "Priority"
            case subnetId = "SubnetId"
            case weightedCapacity = "WeightedCapacity"
        }
    }

    public struct FleetLaunchTemplateSpecification: AWSEncodableShape & AWSDecodableShape {
        /// The ID of the launch template. You must specify the LaunchTemplateId or the LaunchTemplateName, but not both.
        public let launchTemplateId: String?
        /// The name of the launch template. You must specify the LaunchTemplateName or the LaunchTemplateId, but not both.
        public let launchTemplateName: String?
        /// The launch template version number, $Latest, or $Default. You must specify a value, otherwise the request fails. If the value is $Latest, Amazon EC2 uses the latest version of the launch template. If the value is $Default, Amazon EC2 uses the default version of the launch template.
        public let version: String?

        public init(launchTemplateId: String? = nil, launchTemplateName: String? = nil, version: String? = nil) {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.version = version
        }

        public func validate(name: String) throws {
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, max: 128)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, min: 3)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, pattern: "^[a-zA-Z0-9\\(\\)\\.\\-/_]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId = "launchTemplateId"
            case launchTemplateName = "launchTemplateName"
            case version = "version"
        }
    }

    public struct FleetLaunchTemplateSpecificationRequest: AWSEncodableShape {
        /// The ID of the launch template. You must specify the LaunchTemplateId or the LaunchTemplateName, but not both.
        public let launchTemplateId: String?
        /// The name of the launch template. You must specify the LaunchTemplateName or the LaunchTemplateId, but not both.
        public let launchTemplateName: String?
        /// The launch template version number, $Latest, or $Default. You must specify a value, otherwise the request fails. If the value is $Latest, Amazon EC2 uses the latest version of the launch template. If the value is $Default, Amazon EC2 uses the default version of the launch template.
        public let version: String?

        public init(launchTemplateId: String? = nil, launchTemplateName: String? = nil, version: String? = nil) {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.version = version
        }

        public func validate(name: String) throws {
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, max: 128)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, min: 3)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, pattern: "^[a-zA-Z0-9\\(\\)\\.\\-/_]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
            case version = "Version"
        }
    }

    public struct FleetSpotCapacityRebalance: AWSDecodableShape {
        /// The replacement strategy to use. Only available for fleets of type maintain.  launch - EC2 Fleet launches a new replacement Spot Instance when a rebalance notification is emitted for an existing Spot Instance in the fleet. EC2 Fleet does not terminate the instances that receive a rebalance notification. You can terminate the old instances, or you can leave them running. You are charged for all instances while they are running.   launch-before-terminate - EC2 Fleet launches a new replacement Spot Instance when a rebalance notification is emitted for an existing Spot Instance in the fleet, and then, after a delay that you specify (in TerminationDelay), terminates the instances that received a rebalance notification.
        public let replacementStrategy: FleetReplacementStrategy?
        /// The amount of time (in seconds) that Amazon EC2 waits before terminating the old Spot Instance after launching a new replacement Spot Instance. Required when ReplacementStrategy is set to launch-before-terminate. Not valid when ReplacementStrategy is set to launch. Valid values: Minimum value of 120 seconds. Maximum value of 7200 seconds.
        public let terminationDelay: Int?

        public init(replacementStrategy: FleetReplacementStrategy? = nil, terminationDelay: Int? = nil) {
            self.replacementStrategy = replacementStrategy
            self.terminationDelay = terminationDelay
        }

        private enum CodingKeys: String, CodingKey {
            case replacementStrategy = "replacementStrategy"
            case terminationDelay = "terminationDelay"
        }
    }

    public struct FleetSpotCapacityRebalanceRequest: AWSEncodableShape {
        /// The replacement strategy to use. Only available for fleets of type maintain.  launch - EC2 Fleet launches a replacement Spot Instance when a rebalance notification is emitted for an existing Spot Instance in the fleet. EC2 Fleet does not terminate the instances that receive a rebalance notification. You can terminate the old instances, or you can leave them running. You are charged for all instances while they are running.   launch-before-terminate - EC2 Fleet launches a replacement Spot Instance when a rebalance notification is emitted for an existing Spot Instance in the fleet, and then, after a delay that you specify (in TerminationDelay), terminates the instances that received a rebalance notification.
        public let replacementStrategy: FleetReplacementStrategy?
        /// The amount of time (in seconds) that Amazon EC2 waits before terminating the old Spot Instance after launching a new replacement Spot Instance. Required when ReplacementStrategy is set to launch-before-terminate. Not valid when ReplacementStrategy is set to launch. Valid values: Minimum value of 120 seconds. Maximum value of 7200 seconds.
        public let terminationDelay: Int?

        public init(replacementStrategy: FleetReplacementStrategy? = nil, terminationDelay: Int? = nil) {
            self.replacementStrategy = replacementStrategy
            self.terminationDelay = terminationDelay
        }

        private enum CodingKeys: String, CodingKey {
            case replacementStrategy = "ReplacementStrategy"
            case terminationDelay = "TerminationDelay"
        }
    }

    public struct FleetSpotMaintenanceStrategies: AWSDecodableShape {
        /// The strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an elevated risk of being interrupted.
        public let capacityRebalance: FleetSpotCapacityRebalance?

        public init(capacityRebalance: FleetSpotCapacityRebalance? = nil) {
            self.capacityRebalance = capacityRebalance
        }

        private enum CodingKeys: String, CodingKey {
            case capacityRebalance = "capacityRebalance"
        }
    }

    public struct FleetSpotMaintenanceStrategiesRequest: AWSEncodableShape {
        /// The strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an elevated risk of being interrupted.
        public let capacityRebalance: FleetSpotCapacityRebalanceRequest?

        public init(capacityRebalance: FleetSpotCapacityRebalanceRequest? = nil) {
            self.capacityRebalance = capacityRebalance
        }

        private enum CodingKeys: String, CodingKey {
            case capacityRebalance = "CapacityRebalance"
        }
    }

    public struct FlowLog: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The date and time the flow log was created.
        public let creationTime: Date?
        /// The ARN of the IAM role that allows the service to publish flow logs across accounts.
        public let deliverCrossAccountRole: String?
        /// Information about the error that occurred. Rate limited indicates that CloudWatch Logs throttling has been applied for one or more network interfaces, or that you've reached the limit on the number of log groups that you can create. Access error indicates that the IAM role associated with the flow log does not have sufficient permissions to publish to CloudWatch Logs. Unknown error indicates an internal error.
        public let deliverLogsErrorMessage: String?
        /// The ARN of the IAM role allows the service to publish logs to CloudWatch Logs.
        public let deliverLogsPermissionArn: String?
        /// The status of the logs delivery (SUCCESS | FAILED).
        public let deliverLogsStatus: String?
        /// The destination options.
        public let destinationOptions: DestinationOptionsResponse?
        /// The ID of the flow log.
        public let flowLogId: String?
        /// The status of the flow log (ACTIVE).
        public let flowLogStatus: String?
        /// The Amazon Resource Name (ARN) of the destination for the flow log data.
        public let logDestination: String?
        /// The type of destination for the flow log data.
        public let logDestinationType: LogDestinationType?
        /// The format of the flow log record.
        public let logFormat: String?
        /// The name of the flow log group.
        public let logGroupName: String?
        /// The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record. When a network interface is attached to a Nitro-based instance, the aggregation interval is always 60 seconds (1 minute) or less, regardless of the specified value. Valid Values: 60 | 600
        public let maxAggregationInterval: Int?
        /// The ID of the resource being monitored.
        public let resourceId: String?
        /// The tags for the flow log.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The type of traffic captured for the flow log.
        public let trafficType: TrafficType?

        public init(creationTime: Date? = nil, deliverCrossAccountRole: String? = nil, deliverLogsErrorMessage: String? = nil, deliverLogsPermissionArn: String? = nil, deliverLogsStatus: String? = nil, destinationOptions: DestinationOptionsResponse? = nil, flowLogId: String? = nil, flowLogStatus: String? = nil, logDestination: String? = nil, logDestinationType: LogDestinationType? = nil, logFormat: String? = nil, logGroupName: String? = nil, maxAggregationInterval: Int? = nil, resourceId: String? = nil, tags: [Tag]? = nil, trafficType: TrafficType? = nil) {
            self.creationTime = creationTime
            self.deliverCrossAccountRole = deliverCrossAccountRole
            self.deliverLogsErrorMessage = deliverLogsErrorMessage
            self.deliverLogsPermissionArn = deliverLogsPermissionArn
            self.deliverLogsStatus = deliverLogsStatus
            self.destinationOptions = destinationOptions
            self.flowLogId = flowLogId
            self.flowLogStatus = flowLogStatus
            self.logDestination = logDestination
            self.logDestinationType = logDestinationType
            self.logFormat = logFormat
            self.logGroupName = logGroupName
            self.maxAggregationInterval = maxAggregationInterval
            self.resourceId = resourceId
            self.tags = tags
            self.trafficType = trafficType
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case deliverCrossAccountRole = "deliverCrossAccountRole"
            case deliverLogsErrorMessage = "deliverLogsErrorMessage"
            case deliverLogsPermissionArn = "deliverLogsPermissionArn"
            case deliverLogsStatus = "deliverLogsStatus"
            case destinationOptions = "destinationOptions"
            case flowLogId = "flowLogId"
            case flowLogStatus = "flowLogStatus"
            case logDestination = "logDestination"
            case logDestinationType = "logDestinationType"
            case logFormat = "logFormat"
            case logGroupName = "logGroupName"
            case maxAggregationInterval = "maxAggregationInterval"
            case resourceId = "resourceId"
            case tags = "tagSet"
            case trafficType = "trafficType"
        }
    }

    public struct FpgaDeviceInfo: AWSDecodableShape {
        /// The count of FPGA accelerators for the instance type.
        public let count: Int?
        /// The manufacturer of the FPGA accelerator.
        public let manufacturer: String?
        /// Describes the memory for the FPGA accelerator for the instance type.
        public let memoryInfo: FpgaDeviceMemoryInfo?
        /// The name of the FPGA accelerator.
        public let name: String?

        public init(count: Int? = nil, manufacturer: String? = nil, memoryInfo: FpgaDeviceMemoryInfo? = nil, name: String? = nil) {
            self.count = count
            self.manufacturer = manufacturer
            self.memoryInfo = memoryInfo
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case count = "count"
            case manufacturer = "manufacturer"
            case memoryInfo = "memoryInfo"
            case name = "name"
        }
    }

    public struct FpgaDeviceMemoryInfo: AWSDecodableShape {
        /// The size of the memory available to the FPGA accelerator, in MiB.
        public let sizeInMiB: Int?

        public init(sizeInMiB: Int? = nil) {
            self.sizeInMiB = sizeInMiB
        }

        private enum CodingKeys: String, CodingKey {
            case sizeInMiB = "sizeInMiB"
        }
    }

    public struct FpgaImage: AWSDecodableShape {
        public struct _InstanceTypesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ProductCodesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The date and time the AFI was created.
        public let createTime: Date?
        /// Indicates whether data retention support is enabled for the AFI.
        public let dataRetentionSupport: Bool?
        /// The description of the AFI.
        public let description: String?
        /// The global FPGA image identifier (AGFI ID).
        public let fpgaImageGlobalId: String?
        /// The FPGA image identifier (AFI ID).
        public let fpgaImageId: String?
        /// The instance types supported by the AFI.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceTypesEncoding, String>>
        public var instanceTypes: [String]?
        /// The name of the AFI.
        public let name: String?
        /// The alias of the AFI owner. Possible values include self, amazon, and aws-marketplace.
        public let ownerAlias: String?
        /// The ID of the Amazon Web Services account that owns the AFI.
        public let ownerId: String?
        /// Information about the PCI bus.
        public let pciId: PciId?
        /// The product codes for the AFI.
        @OptionalCustomCoding<EC2ArrayCoder<_ProductCodesEncoding, ProductCode>>
        public var productCodes: [ProductCode]?
        /// Indicates whether the AFI is public.
        public let `public`: Bool?
        /// The version of the Amazon Web Services Shell that was used to create the bitstream.
        public let shellVersion: String?
        /// Information about the state of the AFI.
        public let state: FpgaImageState?
        /// Any tags assigned to the AFI.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The time of the most recent update to the AFI.
        public let updateTime: Date?

        public init(createTime: Date? = nil, dataRetentionSupport: Bool? = nil, description: String? = nil, fpgaImageGlobalId: String? = nil, fpgaImageId: String? = nil, instanceTypes: [String]? = nil, name: String? = nil, ownerAlias: String? = nil, ownerId: String? = nil, pciId: PciId? = nil, productCodes: [ProductCode]? = nil, public: Bool? = nil, shellVersion: String? = nil, state: FpgaImageState? = nil, tags: [Tag]? = nil, updateTime: Date? = nil) {
            self.createTime = createTime
            self.dataRetentionSupport = dataRetentionSupport
            self.description = description
            self.fpgaImageGlobalId = fpgaImageGlobalId
            self.fpgaImageId = fpgaImageId
            self.instanceTypes = instanceTypes
            self.name = name
            self.ownerAlias = ownerAlias
            self.ownerId = ownerId
            self.pciId = pciId
            self.productCodes = productCodes
            self.`public` = `public`
            self.shellVersion = shellVersion
            self.state = state
            self.tags = tags
            self.updateTime = updateTime
        }

        private enum CodingKeys: String, CodingKey {
            case createTime = "createTime"
            case dataRetentionSupport = "dataRetentionSupport"
            case description = "description"
            case fpgaImageGlobalId = "fpgaImageGlobalId"
            case fpgaImageId = "fpgaImageId"
            case instanceTypes = "instanceTypes"
            case name = "name"
            case ownerAlias = "ownerAlias"
            case ownerId = "ownerId"
            case pciId = "pciId"
            case productCodes = "productCodes"
            case `public` = "public"
            case shellVersion = "shellVersion"
            case state = "state"
            case tags = "tags"
            case updateTime = "updateTime"
        }
    }

    public struct FpgaImageAttribute: AWSDecodableShape {
        public struct _LoadPermissionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ProductCodesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The description of the AFI.
        public let description: String?
        /// The ID of the AFI.
        public let fpgaImageId: String?
        /// The load permissions.
        @OptionalCustomCoding<EC2ArrayCoder<_LoadPermissionsEncoding, LoadPermission>>
        public var loadPermissions: [LoadPermission]?
        /// The name of the AFI.
        public let name: String?
        /// The product codes.
        @OptionalCustomCoding<EC2ArrayCoder<_ProductCodesEncoding, ProductCode>>
        public var productCodes: [ProductCode]?

        public init(description: String? = nil, fpgaImageId: String? = nil, loadPermissions: [LoadPermission]? = nil, name: String? = nil, productCodes: [ProductCode]? = nil) {
            self.description = description
            self.fpgaImageId = fpgaImageId
            self.loadPermissions = loadPermissions
            self.name = name
            self.productCodes = productCodes
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case fpgaImageId = "fpgaImageId"
            case loadPermissions = "loadPermissions"
            case name = "name"
            case productCodes = "productCodes"
        }
    }

    public struct FpgaImageState: AWSDecodableShape {
        /// The state. The following are the possible values:    pending - AFI bitstream generation is in progress.    available - The AFI is available for use.    failed - AFI bitstream generation failed.    unavailable - The AFI is no longer available for use.
        public let code: FpgaImageStateCode?
        /// If the state is failed, this is the error message.
        public let message: String?

        public init(code: FpgaImageStateCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct FpgaInfo: AWSDecodableShape {
        public struct _FpgasEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Describes the FPGAs for the instance type.
        @OptionalCustomCoding<EC2ArrayCoder<_FpgasEncoding, FpgaDeviceInfo>>
        public var fpgas: [FpgaDeviceInfo]?
        /// The total memory of all FPGA accelerators for the instance type.
        public let totalFpgaMemoryInMiB: Int?

        public init(fpgas: [FpgaDeviceInfo]? = nil, totalFpgaMemoryInMiB: Int? = nil) {
            self.fpgas = fpgas
            self.totalFpgaMemoryInMiB = totalFpgaMemoryInMiB
        }

        private enum CodingKeys: String, CodingKey {
            case fpgas = "fpgas"
            case totalFpgaMemoryInMiB = "totalFpgaMemoryInMiB"
        }
    }

    public struct GetAssociatedEnclaveCertificateIamRolesRequest: AWSEncodableShape {
        /// The ARN of the ACM certificate for which to view the associated IAM roles, encryption keys, and Amazon
        /// 			S3 object information.
        public let certificateArn: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(certificateArn: String? = nil, dryRun: Bool? = nil) {
            self.certificateArn = certificateArn
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "CertificateArn"
            case dryRun = "DryRun"
        }
    }

    public struct GetAssociatedEnclaveCertificateIamRolesResult: AWSDecodableShape {
        public struct _AssociatedRolesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the associated IAM roles.
        @OptionalCustomCoding<EC2ArrayCoder<_AssociatedRolesEncoding, AssociatedRole>>
        public var associatedRoles: [AssociatedRole]?

        public init(associatedRoles: [AssociatedRole]? = nil) {
            self.associatedRoles = associatedRoles
        }

        private enum CodingKeys: String, CodingKey {
            case associatedRoles = "associatedRoleSet"
        }
    }

    public struct GetAssociatedIpv6PoolCidrsRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the IPv6 address pool.
        public let poolId: String?

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil, poolId: String? = nil) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.poolId = poolId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case poolId = "PoolId"
        }
    }

    public struct GetAssociatedIpv6PoolCidrsResult: AWSDecodableShape {
        public struct _Ipv6CidrAssociationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the IPv6 CIDR block associations.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv6CidrAssociationsEncoding, Ipv6CidrAssociation>>
        public var ipv6CidrAssociations: [Ipv6CidrAssociation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(ipv6CidrAssociations: [Ipv6CidrAssociation]? = nil, nextToken: String? = nil) {
            self.ipv6CidrAssociations = ipv6CidrAssociations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrAssociations = "ipv6CidrAssociationSet"
            case nextToken = "nextToken"
        }
    }

    public struct GetAwsNetworkPerformanceDataRequest: AWSEncodableShape {
        /// A list of network performance data queries.
        @OptionalCustomCoding<EC2StandardArrayCoder<DataQuery>>
        public var dataQueries: [DataQuery]?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ending time for the performance data request. The end time must be formatted as yyyy-mm-ddThh:mm:ss. For example, 2022-06-12T12:00:00.000Z.
        public let endTime: Date?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The starting time for the performance data request. The starting time must be formatted as yyyy-mm-ddThh:mm:ss.  For example, 2022-06-10T12:00:00.000Z.
        public let startTime: Date?

        public init(dataQueries: [DataQuery]? = nil, dryRun: Bool? = nil, endTime: Date? = nil, maxResults: Int? = nil, nextToken: String? = nil, startTime: Date? = nil) {
            self.dataQueries = dataQueries
            self.dryRun = dryRun
            self.endTime = endTime
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case dataQueries = "DataQuery"
            case dryRun = "DryRun"
            case endTime = "EndTime"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case startTime = "StartTime"
        }
    }

    public struct GetAwsNetworkPerformanceDataResult: AWSDecodableShape {
        public struct _DataResponsesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The list of data responses.
        @OptionalCustomCoding<EC2ArrayCoder<_DataResponsesEncoding, DataResponse>>
        public var dataResponses: [DataResponse]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(dataResponses: [DataResponse]? = nil, nextToken: String? = nil) {
            self.dataResponses = dataResponses
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dataResponses = "dataResponseSet"
            case nextToken = "nextToken"
        }
    }

    public struct GetCapacityReservationUsageRequest: AWSEncodableShape {
        /// The ID of the Capacity Reservation.
        public let capacityReservationId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(capacityReservationId: String? = nil, dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.capacityReservationId = capacityReservationId
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationId = "CapacityReservationId"
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct GetCapacityReservationUsageResult: AWSDecodableShape {
        public struct _InstanceUsagesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.
        public let availableInstanceCount: Int?
        /// The ID of the Capacity Reservation.
        public let capacityReservationId: String?
        /// The type of instance for which the Capacity Reservation reserves capacity.
        public let instanceType: String?
        /// Information about the Capacity Reservation usage.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceUsagesEncoding, InstanceUsage>>
        public var instanceUsages: [InstanceUsage]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:    active - The Capacity Reservation is active and the capacity is available for your use.    expired - The Capacity Reservation expired automatically at the date and time specified
        /// 					in your request. The reserved capacity is no longer available for your use.    cancelled - The Capacity Reservation was cancelled. The reserved capacity is no
        /// 					longer available for your use.    pending - The Capacity Reservation request was successful but the capacity
        /// 					provisioning is still pending.    failed - The Capacity Reservation request has failed. A request might fail
        /// 					due to invalid request parameters, capacity constraints, or instance limit constraints.
        /// 					Failed requests are retained for 60 minutes.
        public let state: CapacityReservationState?
        /// The number of instances for which the Capacity Reservation reserves capacity.
        public let totalInstanceCount: Int?

        public init(availableInstanceCount: Int? = nil, capacityReservationId: String? = nil, instanceType: String? = nil, instanceUsages: [InstanceUsage]? = nil, nextToken: String? = nil, state: CapacityReservationState? = nil, totalInstanceCount: Int? = nil) {
            self.availableInstanceCount = availableInstanceCount
            self.capacityReservationId = capacityReservationId
            self.instanceType = instanceType
            self.instanceUsages = instanceUsages
            self.nextToken = nextToken
            self.state = state
            self.totalInstanceCount = totalInstanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case availableInstanceCount = "availableInstanceCount"
            case capacityReservationId = "capacityReservationId"
            case instanceType = "instanceType"
            case instanceUsages = "instanceUsageSet"
            case nextToken = "nextToken"
            case state = "state"
            case totalInstanceCount = "totalInstanceCount"
        }
    }

    public struct GetCoipPoolUsageRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    coip-address-usage.allocation-id - The allocation ID of the address.    coip-address-usage.aws-account-id - The ID of the Amazon Web Services account that is using the customer-owned IP address.    coip-address-usage.aws-service - The Amazon Web Services service that is using the customer-owned IP address.    coip-address-usage.co-ip - The customer-owned IP address.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the address pool.
        public let poolId: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, poolId: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.poolId = poolId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case poolId = "PoolId"
        }
    }

    public struct GetCoipPoolUsageResult: AWSDecodableShape {
        public struct _CoipAddressUsagesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the address usage.
        @OptionalCustomCoding<EC2ArrayCoder<_CoipAddressUsagesEncoding, CoipAddressUsage>>
        public var coipAddressUsages: [CoipAddressUsage]?
        /// The ID of the customer-owned address pool.
        public let coipPoolId: String?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(coipAddressUsages: [CoipAddressUsage]? = nil, coipPoolId: String? = nil, localGatewayRouteTableId: String? = nil, nextToken: String? = nil) {
            self.coipAddressUsages = coipAddressUsages
            self.coipPoolId = coipPoolId
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case coipAddressUsages = "coipAddressUsageSet"
            case coipPoolId = "coipPoolId"
            case localGatewayRouteTableId = "localGatewayRouteTableId"
            case nextToken = "nextToken"
        }
    }

    public struct GetConsoleOutputRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String?
        /// When enabled, retrieves the latest console output for the instance. Default: disabled (false)
        public let latest: Bool?

        public init(dryRun: Bool? = nil, instanceId: String? = nil, latest: Bool? = nil) {
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.latest = latest
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceId = "InstanceId"
            case latest = "Latest"
        }
    }

    public struct GetConsoleOutputResult: AWSDecodableShape {
        /// The ID of the instance.
        public let instanceId: String?
        /// The console output, base64-encoded. If you are using a command line tool, the tool decodes the output for you.
        public let output: String?
        /// The time at which the output was last updated.
        public let timestamp: Date?

        public init(instanceId: String? = nil, output: String? = nil, timestamp: Date? = nil) {
            self.instanceId = instanceId
            self.output = output
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case output = "output"
            case timestamp = "timestamp"
        }
    }

    public struct GetConsoleScreenshotRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String?
        /// When set to true, acts as keystroke input and wakes up an instance that's in standby or "sleep" mode.
        public let wakeUp: Bool?

        public init(dryRun: Bool? = nil, instanceId: String? = nil, wakeUp: Bool? = nil) {
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.wakeUp = wakeUp
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceId = "InstanceId"
            case wakeUp = "WakeUp"
        }
    }

    public struct GetConsoleScreenshotResult: AWSDecodableShape {
        /// The data that comprises the image.
        public let imageData: String?
        /// The ID of the instance.
        public let instanceId: String?

        public init(imageData: String? = nil, instanceId: String? = nil) {
            self.imageData = imageData
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case imageData = "imageData"
            case instanceId = "instanceId"
        }
    }

    public struct GetDefaultCreditSpecificationRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The instance family.
        public let instanceFamily: UnlimitedSupportedInstanceFamily?

        public init(dryRun: Bool? = nil, instanceFamily: UnlimitedSupportedInstanceFamily? = nil) {
            self.dryRun = dryRun
            self.instanceFamily = instanceFamily
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceFamily = "InstanceFamily"
        }
    }

    public struct GetDefaultCreditSpecificationResult: AWSDecodableShape {
        /// The default credit option for CPU usage of the instance family.
        public let instanceFamilyCreditSpecification: InstanceFamilyCreditSpecification?

        public init(instanceFamilyCreditSpecification: InstanceFamilyCreditSpecification? = nil) {
            self.instanceFamilyCreditSpecification = instanceFamilyCreditSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case instanceFamilyCreditSpecification = "instanceFamilyCreditSpecification"
        }
    }

    public struct GetEbsDefaultKmsKeyIdRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct GetEbsDefaultKmsKeyIdResult: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the default KMS key for encryption by default.
        public let kmsKeyId: String?

        public init(kmsKeyId: String? = nil) {
            self.kmsKeyId = kmsKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "kmsKeyId"
        }
    }

    public struct GetEbsEncryptionByDefaultRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct GetEbsEncryptionByDefaultResult: AWSDecodableShape {
        /// Indicates whether encryption by default is enabled.
        public let ebsEncryptionByDefault: Bool?
        /// Reserved for future use.
        public let sseType: SSEType?

        public init(ebsEncryptionByDefault: Bool? = nil, sseType: SSEType? = nil) {
            self.ebsEncryptionByDefault = ebsEncryptionByDefault
            self.sseType = sseType
        }

        private enum CodingKeys: String, CodingKey {
            case ebsEncryptionByDefault = "ebsEncryptionByDefault"
            case sseType = "sseType"
        }
    }

    public struct GetFlowLogsIntegrationTemplateRequest: AWSEncodableShape {
        /// To store the CloudFormation template in Amazon S3, specify the location in Amazon S3.
        public let configDeliveryS3DestinationArn: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the flow log.
        public let flowLogId: String?
        /// Information about the service integration.
        public let integrateServices: IntegrateServices?

        public init(configDeliveryS3DestinationArn: String? = nil, dryRun: Bool? = nil, flowLogId: String? = nil, integrateServices: IntegrateServices? = nil) {
            self.configDeliveryS3DestinationArn = configDeliveryS3DestinationArn
            self.dryRun = dryRun
            self.flowLogId = flowLogId
            self.integrateServices = integrateServices
        }

        public func validate(name: String) throws {
            try self.integrateServices?.validate(name: "\(name).integrateServices")
        }

        private enum CodingKeys: String, CodingKey {
            case configDeliveryS3DestinationArn = "ConfigDeliveryS3DestinationArn"
            case dryRun = "DryRun"
            case flowLogId = "FlowLogId"
            case integrateServices = "IntegrateService"
        }
    }

    public struct GetFlowLogsIntegrationTemplateResult: AWSDecodableShape {
        /// The generated CloudFormation template.
        public let result: String?

        public init(result: String? = nil) {
            self.result = result
        }

        private enum CodingKeys: String, CodingKey {
            case result = "result"
        }
    }

    public struct GetGroupsForCapacityReservationRequest: AWSEncodableShape {
        /// The ID of the Capacity Reservation. If you specify a Capacity Reservation that is shared
        /// 			with you, the operation returns only Capacity Reservation groups that you own.
        public let capacityReservationId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(capacityReservationId: String? = nil, dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.capacityReservationId = capacityReservationId
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationId = "CapacityReservationId"
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct GetGroupsForCapacityReservationResult: AWSDecodableShape {
        public struct _CapacityReservationGroupsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the resource groups to which the Capacity Reservation has been added.
        @OptionalCustomCoding<EC2ArrayCoder<_CapacityReservationGroupsEncoding, CapacityReservationGroup>>
        public var capacityReservationGroups: [CapacityReservationGroup]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(capacityReservationGroups: [CapacityReservationGroup]? = nil, nextToken: String? = nil) {
            self.capacityReservationGroups = capacityReservationGroups
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationGroups = "capacityReservationGroupSet"
            case nextToken = "nextToken"
        }
    }

    public struct GetHostReservationPurchasePreviewRequest: AWSEncodableShape {
        public struct _HostIdSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the Dedicated Hosts with which the reservation is associated.
        @OptionalCustomCoding<EC2ArrayCoder<_HostIdSetEncoding, String>>
        public var hostIdSet: [String]?
        /// The offering ID of the reservation.
        public let offeringId: String?

        public init(hostIdSet: [String]? = nil, offeringId: String? = nil) {
            self.hostIdSet = hostIdSet
            self.offeringId = offeringId
        }

        private enum CodingKeys: String, CodingKey {
            case hostIdSet = "HostIdSet"
            case offeringId = "OfferingId"
        }
    }

    public struct GetHostReservationPurchasePreviewResult: AWSDecodableShape {
        public struct _PurchaseEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The currency in which the totalUpfrontPrice and totalHourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The purchase information of the Dedicated Host reservation and the Dedicated Hosts associated with it.
        @OptionalCustomCoding<EC2ArrayCoder<_PurchaseEncoding, Purchase>>
        public var purchase: [Purchase]?
        /// The potential total hourly price of the reservation per hour.
        public let totalHourlyPrice: String?
        /// The potential total upfront price. This is billed immediately.
        public let totalUpfrontPrice: String?

        public init(currencyCode: CurrencyCodeValues? = nil, purchase: [Purchase]? = nil, totalHourlyPrice: String? = nil, totalUpfrontPrice: String? = nil) {
            self.currencyCode = currencyCode
            self.purchase = purchase
            self.totalHourlyPrice = totalHourlyPrice
            self.totalUpfrontPrice = totalUpfrontPrice
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode = "currencyCode"
            case purchase = "purchase"
            case totalHourlyPrice = "totalHourlyPrice"
            case totalUpfrontPrice = "totalUpfrontPrice"
        }
    }

    public struct GetImageBlockPublicAccessStateRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct GetImageBlockPublicAccessStateResult: AWSDecodableShape {
        /// The current state of block public access for AMIs at the account level in the specified Amazon Web Services Region. Possible values:    block-new-sharing - Any attempt to publicly share your AMIs in the specified Region is blocked.    unblocked - Your AMIs in the specified Region can be publicly shared.
        public let imageBlockPublicAccessState: String?

        public init(imageBlockPublicAccessState: String? = nil) {
            self.imageBlockPublicAccessState = imageBlockPublicAccessState
        }

        private enum CodingKeys: String, CodingKey {
            case imageBlockPublicAccessState = "imageBlockPublicAccessState"
        }
    }

    public struct GetInstanceMetadataDefaultsRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct GetInstanceMetadataDefaultsResult: AWSDecodableShape {
        /// The account-level default IMDS settings.
        public let accountLevel: InstanceMetadataDefaultsResponse?

        public init(accountLevel: InstanceMetadataDefaultsResponse? = nil) {
            self.accountLevel = accountLevel
        }

        private enum CodingKeys: String, CodingKey {
            case accountLevel = "accountLevel"
        }
    }

    public struct GetInstanceTypesFromInstanceRequirementsRequest: AWSEncodableShape {
        public struct _ArchitectureTypesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _VirtualizationTypesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The processor architecture type.
        @OptionalCustomCoding<EC2ArrayCoder<_ArchitectureTypesEncoding, ArchitectureType>>
        public var architectureTypes: [ArchitectureType]?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The attributes required for the instance types.
        public let instanceRequirements: InstanceRequirementsRequest?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
        /// 	        For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?
        /// The virtualization type.
        @OptionalCustomCoding<EC2ArrayCoder<_VirtualizationTypesEncoding, VirtualizationType>>
        public var virtualizationTypes: [VirtualizationType]?

        public init(architectureTypes: [ArchitectureType]? = nil, dryRun: Bool? = nil, instanceRequirements: InstanceRequirementsRequest? = nil, maxResults: Int? = nil, nextToken: String? = nil, virtualizationTypes: [VirtualizationType]? = nil) {
            self.architectureTypes = architectureTypes
            self.dryRun = dryRun
            self.instanceRequirements = instanceRequirements
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.virtualizationTypes = virtualizationTypes
        }

        public func validate(name: String) throws {
            try self.validate(self.architectureTypes, name: "architectureTypes", parent: name, max: 3)
            try self.instanceRequirements?.validate(name: "\(name).instanceRequirements")
            try self.validate(self.virtualizationTypes, name: "virtualizationTypes", parent: name, max: 2)
        }

        private enum CodingKeys: String, CodingKey {
            case architectureTypes = "ArchitectureType"
            case dryRun = "DryRun"
            case instanceRequirements = "InstanceRequirements"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case virtualizationTypes = "VirtualizationType"
        }
    }

    public struct GetInstanceTypesFromInstanceRequirementsResult: AWSDecodableShape {
        public struct _InstanceTypesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The instance types with the specified instance attributes.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceTypesEncoding, InstanceTypeInfoFromInstanceRequirements>>
        public var instanceTypes: [InstanceTypeInfoFromInstanceRequirements]?
        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(instanceTypes: [InstanceTypeInfoFromInstanceRequirements]? = nil, nextToken: String? = nil) {
            self.instanceTypes = instanceTypes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceTypes = "instanceTypeSet"
            case nextToken = "nextToken"
        }
    }

    public struct GetInstanceUefiDataRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance from which to retrieve the UEFI data.
        public let instanceId: String?

        public init(dryRun: Bool? = nil, instanceId: String? = nil) {
            self.dryRun = dryRun
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceId = "InstanceId"
        }
    }

    public struct GetInstanceUefiDataResult: AWSDecodableShape {
        /// The ID of the instance from which to retrieve the UEFI data.
        public let instanceId: String?
        /// Base64 representation of the non-volatile UEFI variable store.
        public let uefiData: String?

        public init(instanceId: String? = nil, uefiData: String? = nil) {
            self.instanceId = instanceId
            self.uefiData = uefiData
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case uefiData = "uefiData"
        }
    }

    public struct GetIpamAddressHistoryRequest: AWSEncodableShape {
        /// The CIDR you want the history of. The CIDR can be an IPv4 or IPv6 IP address range.  If you enter a /16 IPv4 CIDR, you will get records that match it exactly. You will not get records for any subnets within the /16 CIDR.
        public let cidr: String?
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The end of the time period for which you are looking for history. If you omit this option, it will default to the current time.
        public let endTime: Date?
        /// The ID of the IPAM scope that the CIDR is in.
        public let ipamScopeId: String?
        /// The maximum number of historical results you would like returned per page. Defaults to 100.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The start of the time period for which you are looking for history. If you omit this option, it will default to the value of EndTime.
        public let startTime: Date?
        /// The ID of the VPC you want your history records filtered by.
        public let vpcId: String?

        public init(cidr: String? = nil, dryRun: Bool? = nil, endTime: Date? = nil, ipamScopeId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, startTime: Date? = nil, vpcId: String? = nil) {
            self.cidr = cidr
            self.dryRun = dryRun
            self.endTime = endTime
            self.ipamScopeId = ipamScopeId
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.startTime = startTime
            self.vpcId = vpcId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case dryRun = "DryRun"
            case endTime = "EndTime"
            case ipamScopeId = "IpamScopeId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case startTime = "StartTime"
            case vpcId = "VpcId"
        }
    }

    public struct GetIpamAddressHistoryResult: AWSDecodableShape {
        public struct _HistoryRecordsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A historical record for a CIDR within an IPAM scope. If the CIDR is associated with an EC2 instance, you will see an object in the response for the instance and one for the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_HistoryRecordsEncoding, IpamAddressHistoryRecord>>
        public var historyRecords: [IpamAddressHistoryRecord]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(historyRecords: [IpamAddressHistoryRecord]? = nil, nextToken: String? = nil) {
            self.historyRecords = historyRecords
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case historyRecords = "historyRecordSet"
            case nextToken = "nextToken"
        }
    }

    public struct GetIpamDiscoveredAccountsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The Amazon Web Services Region that the account information is returned from.
        public let discoveryRegion: String?
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Discovered account filters.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// A resource discovery ID.
        public let ipamResourceDiscoveryId: String?
        /// The maximum number of discovered accounts to return in one page of results.
        public let maxResults: Int?
        /// Specify the pagination token from a previous request to retrieve the next page of results.
        public let nextToken: String?

        public init(discoveryRegion: String? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, ipamResourceDiscoveryId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.discoveryRegion = discoveryRegion
            self.dryRun = dryRun
            self.filters = filters
            self.ipamResourceDiscoveryId = ipamResourceDiscoveryId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case discoveryRegion = "DiscoveryRegion"
            case dryRun = "DryRun"
            case filters = "Filter"
            case ipamResourceDiscoveryId = "IpamResourceDiscoveryId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct GetIpamDiscoveredAccountsResult: AWSDecodableShape {
        public struct _IpamDiscoveredAccountsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Discovered accounts.
        @OptionalCustomCoding<EC2ArrayCoder<_IpamDiscoveredAccountsEncoding, IpamDiscoveredAccount>>
        public var ipamDiscoveredAccounts: [IpamDiscoveredAccount]?
        /// Specify the pagination token from a previous request to retrieve the next page of results.
        public let nextToken: String?

        public init(ipamDiscoveredAccounts: [IpamDiscoveredAccount]? = nil, nextToken: String? = nil) {
            self.ipamDiscoveredAccounts = ipamDiscoveredAccounts
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ipamDiscoveredAccounts = "ipamDiscoveredAccountSet"
            case nextToken = "nextToken"
        }
    }

    public struct GetIpamDiscoveredPublicAddressesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The Amazon Web Services Region for the IP address.
        public let addressRegion: String?
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Filters.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// An IPAM resource discovery ID.
        public let ipamResourceDiscoveryId: String?
        /// The maximum number of IPAM discovered public addresses to return in one page of results.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(addressRegion: String? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, ipamResourceDiscoveryId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.addressRegion = addressRegion
            self.dryRun = dryRun
            self.filters = filters
            self.ipamResourceDiscoveryId = ipamResourceDiscoveryId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case addressRegion = "AddressRegion"
            case dryRun = "DryRun"
            case filters = "Filter"
            case ipamResourceDiscoveryId = "IpamResourceDiscoveryId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct GetIpamDiscoveredPublicAddressesResult: AWSDecodableShape {
        public struct _IpamDiscoveredPublicAddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// IPAM discovered public addresses.
        @OptionalCustomCoding<EC2ArrayCoder<_IpamDiscoveredPublicAddressesEncoding, IpamDiscoveredPublicAddress>>
        public var ipamDiscoveredPublicAddresses: [IpamDiscoveredPublicAddress]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The oldest successful resource discovery time.
        public let oldestSampleTime: Date?

        public init(ipamDiscoveredPublicAddresses: [IpamDiscoveredPublicAddress]? = nil, nextToken: String? = nil, oldestSampleTime: Date? = nil) {
            self.ipamDiscoveredPublicAddresses = ipamDiscoveredPublicAddresses
            self.nextToken = nextToken
            self.oldestSampleTime = oldestSampleTime
        }

        private enum CodingKeys: String, CodingKey {
            case ipamDiscoveredPublicAddresses = "ipamDiscoveredPublicAddressSet"
            case nextToken = "nextToken"
            case oldestSampleTime = "oldestSampleTime"
        }
    }

    public struct GetIpamDiscoveredResourceCidrsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Filters.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// A resource discovery ID.
        public let ipamResourceDiscoveryId: String?
        /// The maximum number of discovered resource CIDRs to return in one page of results.
        public let maxResults: Int?
        /// Specify the pagination token from a previous request to retrieve the next page of results.
        public let nextToken: String?
        /// A resource Region.
        public let resourceRegion: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, ipamResourceDiscoveryId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, resourceRegion: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.ipamResourceDiscoveryId = ipamResourceDiscoveryId
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.resourceRegion = resourceRegion
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case ipamResourceDiscoveryId = "IpamResourceDiscoveryId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case resourceRegion = "ResourceRegion"
        }
    }

    public struct GetIpamDiscoveredResourceCidrsResult: AWSDecodableShape {
        public struct _IpamDiscoveredResourceCidrsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Discovered resource CIDRs.
        @OptionalCustomCoding<EC2ArrayCoder<_IpamDiscoveredResourceCidrsEncoding, IpamDiscoveredResourceCidr>>
        public var ipamDiscoveredResourceCidrs: [IpamDiscoveredResourceCidr]?
        /// Specify the pagination token from a previous request to retrieve the next page of results.
        public let nextToken: String?

        public init(ipamDiscoveredResourceCidrs: [IpamDiscoveredResourceCidr]? = nil, nextToken: String? = nil) {
            self.ipamDiscoveredResourceCidrs = ipamDiscoveredResourceCidrs
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ipamDiscoveredResourceCidrs = "ipamDiscoveredResourceCidrSet"
            case nextToken = "nextToken"
        }
    }

    public struct GetIpamPoolAllocationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters for the request. For more information about filtering, see Filtering CLI output.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The ID of the allocation.
        public let ipamPoolAllocationId: String?
        /// The ID of the IPAM pool you want to see the allocations for.
        public let ipamPoolId: String?
        /// The maximum number of results you would like returned per page.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, ipamPoolAllocationId: String? = nil, ipamPoolId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.ipamPoolAllocationId = ipamPoolAllocationId
            self.ipamPoolId = ipamPoolId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1000)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case ipamPoolAllocationId = "IpamPoolAllocationId"
            case ipamPoolId = "IpamPoolId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct GetIpamPoolAllocationsResult: AWSDecodableShape {
        public struct _IpamPoolAllocationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IPAM pool allocations you want information on.
        @OptionalCustomCoding<EC2ArrayCoder<_IpamPoolAllocationsEncoding, IpamPoolAllocation>>
        public var ipamPoolAllocations: [IpamPoolAllocation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(ipamPoolAllocations: [IpamPoolAllocation]? = nil, nextToken: String? = nil) {
            self.ipamPoolAllocations = ipamPoolAllocations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ipamPoolAllocations = "ipamPoolAllocationSet"
            case nextToken = "nextToken"
        }
    }

    public struct GetIpamPoolCidrsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters for the request. For more information about filtering, see Filtering CLI output.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The ID of the IPAM pool you want the CIDR for.
        public let ipamPoolId: String?
        /// The maximum number of results to return in the request.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, ipamPoolId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.ipamPoolId = ipamPoolId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case ipamPoolId = "IpamPoolId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct GetIpamPoolCidrsResult: AWSDecodableShape {
        public struct _IpamPoolCidrsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the CIDRs provisioned to an IPAM pool.
        @OptionalCustomCoding<EC2ArrayCoder<_IpamPoolCidrsEncoding, IpamPoolCidr>>
        public var ipamPoolCidrs: [IpamPoolCidr]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(ipamPoolCidrs: [IpamPoolCidr]? = nil, nextToken: String? = nil) {
            self.ipamPoolCidrs = ipamPoolCidrs
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ipamPoolCidrs = "ipamPoolCidrSet"
            case nextToken = "nextToken"
        }
    }

    public struct GetIpamResourceCidrsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters for the request. For more information about filtering, see Filtering CLI output.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The ID of the IPAM pool that the resource is in.
        public let ipamPoolId: String?
        /// The ID of the scope that the resource is in.
        public let ipamScopeId: String?
        /// The maximum number of results to return in the request.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the resource.
        public let resourceId: String?
        /// The ID of the Amazon Web Services account that owns the resource.
        public let resourceOwner: String?
        /// The resource tag.
        public let resourceTag: RequestIpamResourceTag?
        /// The resource type.
        public let resourceType: IpamResourceType?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, ipamPoolId: String? = nil, ipamScopeId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, resourceId: String? = nil, resourceOwner: String? = nil, resourceTag: RequestIpamResourceTag? = nil, resourceType: IpamResourceType? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.ipamPoolId = ipamPoolId
            self.ipamScopeId = ipamScopeId
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.resourceId = resourceId
            self.resourceOwner = resourceOwner
            self.resourceTag = resourceTag
            self.resourceType = resourceType
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case ipamPoolId = "IpamPoolId"
            case ipamScopeId = "IpamScopeId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case resourceId = "ResourceId"
            case resourceOwner = "ResourceOwner"
            case resourceTag = "ResourceTag"
            case resourceType = "ResourceType"
        }
    }

    public struct GetIpamResourceCidrsResult: AWSDecodableShape {
        public struct _IpamResourceCidrsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The resource CIDRs.
        @OptionalCustomCoding<EC2ArrayCoder<_IpamResourceCidrsEncoding, IpamResourceCidr>>
        public var ipamResourceCidrs: [IpamResourceCidr]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(ipamResourceCidrs: [IpamResourceCidr]? = nil, nextToken: String? = nil) {
            self.ipamResourceCidrs = ipamResourceCidrs
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ipamResourceCidrs = "ipamResourceCidrSet"
            case nextToken = "nextToken"
        }
    }

    public struct GetLaunchTemplateDataRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String?

        public init(dryRun: Bool? = nil, instanceId: String? = nil) {
            self.dryRun = dryRun
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceId = "InstanceId"
        }
    }

    public struct GetLaunchTemplateDataResult: AWSDecodableShape {
        /// The instance data.
        public let launchTemplateData: ResponseLaunchTemplateData?

        public init(launchTemplateData: ResponseLaunchTemplateData? = nil) {
            self.launchTemplateData = launchTemplateData
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateData = "launchTemplateData"
        }
    }

    public struct GetManagedPrefixListAssociationsRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the prefix list.
        public let prefixListId: String?

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil, prefixListId: String? = nil) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.prefixListId = prefixListId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 255)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case prefixListId = "PrefixListId"
        }
    }

    public struct GetManagedPrefixListAssociationsResult: AWSDecodableShape {
        public struct _PrefixListAssociationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the associations.
        @OptionalCustomCoding<EC2ArrayCoder<_PrefixListAssociationsEncoding, PrefixListAssociation>>
        public var prefixListAssociations: [PrefixListAssociation]?

        public init(nextToken: String? = nil, prefixListAssociations: [PrefixListAssociation]? = nil) {
            self.nextToken = nextToken
            self.prefixListAssociations = prefixListAssociations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case prefixListAssociations = "prefixListAssociationSet"
        }
    }

    public struct GetManagedPrefixListEntriesRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the prefix list.
        public let prefixListId: String?
        /// The version of the prefix list for which to return the entries. The default is the current version.
        public let targetVersion: Int64?

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil, prefixListId: String? = nil, targetVersion: Int64? = nil) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.prefixListId = prefixListId
            self.targetVersion = targetVersion
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case prefixListId = "PrefixListId"
            case targetVersion = "TargetVersion"
        }
    }

    public struct GetManagedPrefixListEntriesResult: AWSDecodableShape {
        public struct _EntriesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the prefix list entries.
        @OptionalCustomCoding<EC2ArrayCoder<_EntriesEncoding, PrefixListEntry>>
        public var entries: [PrefixListEntry]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(entries: [PrefixListEntry]? = nil, nextToken: String? = nil) {
            self.entries = entries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case entries = "entrySet"
            case nextToken = "nextToken"
        }
    }

    public struct GetNetworkInsightsAccessScopeAnalysisFindingsRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The ID of the Network Access Scope analysis.
        public let networkInsightsAccessScopeAnalysisId: String?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, networkInsightsAccessScopeAnalysisId: String? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.networkInsightsAccessScopeAnalysisId = networkInsightsAccessScopeAnalysisId
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case networkInsightsAccessScopeAnalysisId = "NetworkInsightsAccessScopeAnalysisId"
            case nextToken = "NextToken"
        }
    }

    public struct GetNetworkInsightsAccessScopeAnalysisFindingsResult: AWSDecodableShape {
        public struct _AnalysisFindingsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The findings associated with Network Access Scope Analysis.
        @OptionalCustomCoding<EC2ArrayCoder<_AnalysisFindingsEncoding, AccessScopeAnalysisFinding>>
        public var analysisFindings: [AccessScopeAnalysisFinding]?
        /// The status of Network Access Scope Analysis.
        public let analysisStatus: AnalysisStatus?
        /// The ID of the Network Access Scope analysis.
        public let networkInsightsAccessScopeAnalysisId: String?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(analysisFindings: [AccessScopeAnalysisFinding]? = nil, analysisStatus: AnalysisStatus? = nil, networkInsightsAccessScopeAnalysisId: String? = nil, nextToken: String? = nil) {
            self.analysisFindings = analysisFindings
            self.analysisStatus = analysisStatus
            self.networkInsightsAccessScopeAnalysisId = networkInsightsAccessScopeAnalysisId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case analysisFindings = "analysisFindingSet"
            case analysisStatus = "analysisStatus"
            case networkInsightsAccessScopeAnalysisId = "networkInsightsAccessScopeAnalysisId"
            case nextToken = "nextToken"
        }
    }

    public struct GetNetworkInsightsAccessScopeContentRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Network Access Scope.
        public let networkInsightsAccessScopeId: String?

        public init(dryRun: Bool? = nil, networkInsightsAccessScopeId: String? = nil) {
            self.dryRun = dryRun
            self.networkInsightsAccessScopeId = networkInsightsAccessScopeId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case networkInsightsAccessScopeId = "NetworkInsightsAccessScopeId"
        }
    }

    public struct GetNetworkInsightsAccessScopeContentResult: AWSDecodableShape {
        /// The Network Access Scope content.
        public let networkInsightsAccessScopeContent: NetworkInsightsAccessScopeContent?

        public init(networkInsightsAccessScopeContent: NetworkInsightsAccessScopeContent? = nil) {
            self.networkInsightsAccessScopeContent = networkInsightsAccessScopeContent
        }

        private enum CodingKeys: String, CodingKey {
            case networkInsightsAccessScopeContent = "networkInsightsAccessScopeContent"
        }
    }

    public struct GetPasswordDataRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Windows instance.
        public let instanceId: String?

        public init(dryRun: Bool? = nil, instanceId: String? = nil) {
            self.dryRun = dryRun
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceId = "InstanceId"
        }
    }

    public struct GetPasswordDataResult: AWSDecodableShape {
        /// The ID of the Windows instance.
        public let instanceId: String?
        /// The password of the instance. Returns an empty string if the password is not available.
        public let passwordData: String?
        /// The time the data was last updated.
        public let timestamp: Date?

        public init(instanceId: String? = nil, passwordData: String? = nil, timestamp: Date? = nil) {
            self.instanceId = instanceId
            self.passwordData = passwordData
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case passwordData = "passwordData"
            case timestamp = "timestamp"
        }
    }

    public struct GetReservedInstancesExchangeQuoteRequest: AWSEncodableShape {
        public struct _ReservedInstanceIdsEncoding: ArrayCoderProperties { public static let member = "ReservedInstanceId" }
        public struct _TargetConfigurationsEncoding: ArrayCoderProperties { public static let member = "TargetConfigurationRequest" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the Convertible Reserved Instances to exchange.
        @OptionalCustomCoding<EC2ArrayCoder<_ReservedInstanceIdsEncoding, String>>
        public var reservedInstanceIds: [String]?
        /// The configuration of the target Convertible Reserved Instance to exchange for your current Convertible Reserved Instances.
        @OptionalCustomCoding<EC2ArrayCoder<_TargetConfigurationsEncoding, TargetConfigurationRequest>>
        public var targetConfigurations: [TargetConfigurationRequest]?

        public init(dryRun: Bool? = nil, reservedInstanceIds: [String]? = nil, targetConfigurations: [TargetConfigurationRequest]? = nil) {
            self.dryRun = dryRun
            self.reservedInstanceIds = reservedInstanceIds
            self.targetConfigurations = targetConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case reservedInstanceIds = "ReservedInstanceId"
            case targetConfigurations = "TargetConfiguration"
        }
    }

    public struct GetReservedInstancesExchangeQuoteResult: AWSDecodableShape {
        public struct _ReservedInstanceValueSetEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TargetConfigurationValueSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The currency of the transaction.
        public let currencyCode: String?
        /// If true, the exchange is valid. If false, the exchange cannot be completed.
        public let isValidExchange: Bool?
        /// The new end date of the reservation term.
        public let outputReservedInstancesWillExpireAt: Date?
        /// The total true upfront charge for the exchange.
        public let paymentDue: String?
        /// The cost associated with the Reserved Instance.
        public let reservedInstanceValueRollup: ReservationValue?
        /// The configuration of your Convertible Reserved Instances.
        @OptionalCustomCoding<EC2ArrayCoder<_ReservedInstanceValueSetEncoding, ReservedInstanceReservationValue>>
        public var reservedInstanceValueSet: [ReservedInstanceReservationValue]?
        /// The cost associated with the Reserved Instance.
        public let targetConfigurationValueRollup: ReservationValue?
        /// The values of the target Convertible Reserved Instances.
        @OptionalCustomCoding<EC2ArrayCoder<_TargetConfigurationValueSetEncoding, TargetReservationValue>>
        public var targetConfigurationValueSet: [TargetReservationValue]?
        /// Describes the reason why the exchange cannot be completed.
        public let validationFailureReason: String?

        public init(currencyCode: String? = nil, isValidExchange: Bool? = nil, outputReservedInstancesWillExpireAt: Date? = nil, paymentDue: String? = nil, reservedInstanceValueRollup: ReservationValue? = nil, reservedInstanceValueSet: [ReservedInstanceReservationValue]? = nil, targetConfigurationValueRollup: ReservationValue? = nil, targetConfigurationValueSet: [TargetReservationValue]? = nil, validationFailureReason: String? = nil) {
            self.currencyCode = currencyCode
            self.isValidExchange = isValidExchange
            self.outputReservedInstancesWillExpireAt = outputReservedInstancesWillExpireAt
            self.paymentDue = paymentDue
            self.reservedInstanceValueRollup = reservedInstanceValueRollup
            self.reservedInstanceValueSet = reservedInstanceValueSet
            self.targetConfigurationValueRollup = targetConfigurationValueRollup
            self.targetConfigurationValueSet = targetConfigurationValueSet
            self.validationFailureReason = validationFailureReason
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode = "currencyCode"
            case isValidExchange = "isValidExchange"
            case outputReservedInstancesWillExpireAt = "outputReservedInstancesWillExpireAt"
            case paymentDue = "paymentDue"
            case reservedInstanceValueRollup = "reservedInstanceValueRollup"
            case reservedInstanceValueSet = "reservedInstanceValueSet"
            case targetConfigurationValueRollup = "targetConfigurationValueRollup"
            case targetConfigurationValueSet = "targetConfigurationValueSet"
            case validationFailureReason = "validationFailureReason"
        }
    }

    public struct GetSecurityGroupsForVpcRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters. If using multiple filters, the results include security groups which match all filters.    group-id: The security group ID.    description: The security group's description.    group-name: The security group name.    owner-id: The security group owner ID.    primary-vpc-id: The VPC ID in which the security group was created.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request.
        /// 	To get the next page of items, make another request with the token returned in the output.
        /// 	For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?
        /// The VPC ID where the security group can be used.
        public let vpcId: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, vpcId: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.vpcId = vpcId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case vpcId = "VpcId"
        }
    }

    public struct GetSecurityGroupsForVpcResult: AWSDecodableShape {
        public struct _SecurityGroupForVpcsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?
        /// The security group that can be used by interfaces in the VPC.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupForVpcsEncoding, SecurityGroupForVpc>>
        public var securityGroupForVpcs: [SecurityGroupForVpc]?

        public init(nextToken: String? = nil, securityGroupForVpcs: [SecurityGroupForVpc]? = nil) {
            self.nextToken = nextToken
            self.securityGroupForVpcs = securityGroupForVpcs
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case securityGroupForVpcs = "securityGroupForVpcSet"
        }
    }

    public struct GetSerialConsoleAccessStatusRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct GetSerialConsoleAccessStatusResult: AWSDecodableShape {
        /// If true, access to the EC2 serial console of all instances is enabled for
        /// 			your account. If false, access to the EC2 serial console of all instances
        /// 			is disabled for your account.
        public let serialConsoleAccessEnabled: Bool?

        public init(serialConsoleAccessEnabled: Bool? = nil) {
            self.serialConsoleAccessEnabled = serialConsoleAccessEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case serialConsoleAccessEnabled = "serialConsoleAccessEnabled"
        }
    }

    public struct GetSnapshotBlockPublicAccessStateRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct GetSnapshotBlockPublicAccessStateResult: AWSDecodableShape {
        /// The current state of block public access for snapshots. Possible values include:    block-all-sharing - All public sharing of snapshots is blocked. Users in  the account can't request new public sharing. Additionally, snapshots that were already  publicly shared are treated as private and are not publicly available.    block-new-sharing  - Only new public sharing of snapshots is blocked.  Users in the account can't request new public sharing. However, snapshots that were  already publicly shared, remain publicly available.    unblocked  - Public sharing is not blocked. Users can publicly share  snapshots.
        public let state: SnapshotBlockPublicAccessState?

        public init(state: SnapshotBlockPublicAccessState? = nil) {
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
        }
    }

    public struct GetSpotPlacementScoresRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with those attributes. If you specify InstanceRequirementsWithMetadata, you can't specify InstanceTypes.
        public let instanceRequirementsWithMetadata: InstanceRequirementsWithMetadataRequest?
        /// The instance types. We recommend that you specify at least three instance types. If you specify one or two instance types, or specify variations of a single instance type (for example, an m3.xlarge with and without instance storage), the returned placement score will always be low.  If you specify InstanceTypes, you can't specify InstanceRequirementsWithMetadata.
        @OptionalCustomCoding<EC2StandardArrayCoder<String>>
        public var instanceTypes: [String]?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
        /// 	        For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?
        /// The Regions used to narrow down the list of Regions to be scored. Enter the Region code, for example, us-east-1.
        @OptionalCustomCoding<EC2StandardArrayCoder<String>>
        public var regionNames: [String]?
        /// Specify true so that the response returns a list of scored Availability Zones. Otherwise, the response returns a list of scored Regions. A list of scored Availability Zones is useful if you want to launch all of your Spot capacity into a single Availability Zone.
        public let singleAvailabilityZone: Bool?
        /// The target capacity.
        public let targetCapacity: Int?
        /// The unit for the target capacity.
        public let targetCapacityUnitType: TargetCapacityUnitType?

        public init(dryRun: Bool? = nil, instanceRequirementsWithMetadata: InstanceRequirementsWithMetadataRequest? = nil, instanceTypes: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil, regionNames: [String]? = nil, singleAvailabilityZone: Bool? = nil, targetCapacity: Int? = nil, targetCapacityUnitType: TargetCapacityUnitType? = nil) {
            self.dryRun = dryRun
            self.instanceRequirementsWithMetadata = instanceRequirementsWithMetadata
            self.instanceTypes = instanceTypes
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.regionNames = regionNames
            self.singleAvailabilityZone = singleAvailabilityZone
            self.targetCapacity = targetCapacity
            self.targetCapacityUnitType = targetCapacityUnitType
        }

        public func validate(name: String) throws {
            try self.instanceRequirementsWithMetadata?.validate(name: "\(name).instanceRequirementsWithMetadata")
            try self.validate(self.instanceTypes, name: "instanceTypes", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 10)
            try self.validate(self.regionNames, name: "regionNames", parent: name, max: 10)
            try self.validate(self.targetCapacity, name: "targetCapacity", parent: name, max: 2000000000)
            try self.validate(self.targetCapacity, name: "targetCapacity", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceRequirementsWithMetadata = "InstanceRequirementsWithMetadata"
            case instanceTypes = "InstanceType"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case regionNames = "RegionName"
            case singleAvailabilityZone = "SingleAvailabilityZone"
            case targetCapacity = "TargetCapacity"
            case targetCapacityUnitType = "TargetCapacityUnitType"
        }
    }

    public struct GetSpotPlacementScoresResult: AWSDecodableShape {
        public struct _SpotPlacementScoresEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?
        /// The Spot placement score for the top 10 Regions or Availability Zones, scored on a scale from 1 to 10. Each score  reflects how likely it is that each Region or Availability Zone will succeed at fulfilling the specified target capacity  at the time of the Spot placement score request. A score of 10 means that your Spot capacity request is highly likely to succeed in that Region or Availability Zone.  If you request a Spot placement score for Regions, a high score assumes that your fleet request will be configured to use all Availability Zones and the capacity-optimized allocation strategy. If you request a Spot placement score for Availability Zones, a high score assumes that your fleet request will be configured to use a single Availability Zone and the capacity-optimized allocation strategy. Different  Regions or Availability Zones might return the same score.  The Spot placement score serves as a recommendation only. No score guarantees that your Spot request will be fully or partially fulfilled.
        @OptionalCustomCoding<EC2ArrayCoder<_SpotPlacementScoresEncoding, SpotPlacementScore>>
        public var spotPlacementScores: [SpotPlacementScore]?

        public init(nextToken: String? = nil, spotPlacementScores: [SpotPlacementScore]? = nil) {
            self.nextToken = nextToken
            self.spotPlacementScores = spotPlacementScores
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case spotPlacementScores = "spotPlacementScoreSet"
        }
    }

    public struct GetSubnetCidrReservationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    reservationType - The type of reservation (prefix | explicit).    subnet-id - The ID of the subnet.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, subnetId: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.subnetId = subnetId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case subnetId = "SubnetId"
        }
    }

    public struct GetSubnetCidrReservationsResult: AWSDecodableShape {
        public struct _SubnetIpv4CidrReservationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SubnetIpv6CidrReservationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the IPv4 subnet CIDR reservations.
        @OptionalCustomCoding<EC2ArrayCoder<_SubnetIpv4CidrReservationsEncoding, SubnetCidrReservation>>
        public var subnetIpv4CidrReservations: [SubnetCidrReservation]?
        /// Information about the IPv6 subnet CIDR reservations.
        @OptionalCustomCoding<EC2ArrayCoder<_SubnetIpv6CidrReservationsEncoding, SubnetCidrReservation>>
        public var subnetIpv6CidrReservations: [SubnetCidrReservation]?

        public init(nextToken: String? = nil, subnetIpv4CidrReservations: [SubnetCidrReservation]? = nil, subnetIpv6CidrReservations: [SubnetCidrReservation]? = nil) {
            self.nextToken = nextToken
            self.subnetIpv4CidrReservations = subnetIpv4CidrReservations
            self.subnetIpv6CidrReservations = subnetIpv6CidrReservations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case subnetIpv4CidrReservations = "subnetIpv4CidrReservationSet"
            case subnetIpv6CidrReservations = "subnetIpv6CidrReservationSet"
        }
    }

    public struct GetTransitGatewayAttachmentPropagationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    transit-gateway-route-table-id - The ID of the transit gateway route table.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayAttachmentId: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct GetTransitGatewayAttachmentPropagationsResult: AWSDecodableShape {
        public struct _TransitGatewayAttachmentPropagationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the propagation route tables.
        @OptionalCustomCoding<EC2ArrayCoder<_TransitGatewayAttachmentPropagationsEncoding, TransitGatewayAttachmentPropagation>>
        public var transitGatewayAttachmentPropagations: [TransitGatewayAttachmentPropagation]?

        public init(nextToken: String? = nil, transitGatewayAttachmentPropagations: [TransitGatewayAttachmentPropagation]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayAttachmentPropagations = transitGatewayAttachmentPropagations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case transitGatewayAttachmentPropagations = "transitGatewayAttachmentPropagations"
        }
    }

    public struct GetTransitGatewayMulticastDomainAssociationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    resource-id - The ID of the resource.    resource-type - The type of resource. The valid value is: vpc.    state - The state of the subnet association. Valid values are associated | associating | disassociated | disassociating.    subnet-id - The ID of the subnet.    transit-gateway-attachment-id - The id of the transit gateway attachment.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct GetTransitGatewayMulticastDomainAssociationsResult: AWSDecodableShape {
        public struct _MulticastDomainAssociationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the multicast domain associations.
        @OptionalCustomCoding<EC2ArrayCoder<_MulticastDomainAssociationsEncoding, TransitGatewayMulticastDomainAssociation>>
        public var multicastDomainAssociations: [TransitGatewayMulticastDomainAssociation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(multicastDomainAssociations: [TransitGatewayMulticastDomainAssociation]? = nil, nextToken: String? = nil) {
            self.multicastDomainAssociations = multicastDomainAssociations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case multicastDomainAssociations = "multicastDomainAssociations"
            case nextToken = "nextToken"
        }
    }

    public struct GetTransitGatewayPolicyTableAssociationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters associated with the transit gateway policy table.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the transit gateway policy table.
        public let transitGatewayPolicyTableId: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayPolicyTableId: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayPolicyTableId = transitGatewayPolicyTableId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayPolicyTableId = "TransitGatewayPolicyTableId"
        }
    }

    public struct GetTransitGatewayPolicyTableAssociationsResult: AWSDecodableShape {
        public struct _AssociationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Returns details about the transit gateway policy table association.
        @OptionalCustomCoding<EC2ArrayCoder<_AssociationsEncoding, TransitGatewayPolicyTableAssociation>>
        public var associations: [TransitGatewayPolicyTableAssociation]?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(associations: [TransitGatewayPolicyTableAssociation]? = nil, nextToken: String? = nil) {
            self.associations = associations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case associations = "associations"
            case nextToken = "nextToken"
        }
    }

    public struct GetTransitGatewayPolicyTableEntriesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters associated with the transit gateway policy table.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the transit gateway policy table.
        public let transitGatewayPolicyTableId: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayPolicyTableId: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayPolicyTableId = transitGatewayPolicyTableId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayPolicyTableId = "TransitGatewayPolicyTableId"
        }
    }

    public struct GetTransitGatewayPolicyTableEntriesResult: AWSDecodableShape {
        public struct _TransitGatewayPolicyTableEntriesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The entries for the transit gateway policy table.
        @OptionalCustomCoding<EC2ArrayCoder<_TransitGatewayPolicyTableEntriesEncoding, TransitGatewayPolicyTableEntry>>
        public var transitGatewayPolicyTableEntries: [TransitGatewayPolicyTableEntry]?

        public init(transitGatewayPolicyTableEntries: [TransitGatewayPolicyTableEntry]? = nil) {
            self.transitGatewayPolicyTableEntries = transitGatewayPolicyTableEntries
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayPolicyTableEntries = "transitGatewayPolicyTableEntries"
        }
    }

    public struct GetTransitGatewayPrefixListReferencesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    attachment.resource-id - The ID of the resource for the attachment.    attachment.resource-type - The type of resource for the attachment. Valid values are vpc | vpn | direct-connect-gateway | peering.    attachment.transit-gateway-attachment-id - The ID of the attachment.    is-blackhole - Whether traffic matching the route is blocked (true | false).    prefix-list-id - The ID of the prefix list.    prefix-list-owner-id - The ID of the owner of the prefix list.    state - The state of the prefix list reference (pending | available | modifying | deleting).
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayRouteTableId: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct GetTransitGatewayPrefixListReferencesResult: AWSDecodableShape {
        public struct _TransitGatewayPrefixListReferencesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the prefix list references.
        @OptionalCustomCoding<EC2ArrayCoder<_TransitGatewayPrefixListReferencesEncoding, TransitGatewayPrefixListReference>>
        public var transitGatewayPrefixListReferences: [TransitGatewayPrefixListReference]?

        public init(nextToken: String? = nil, transitGatewayPrefixListReferences: [TransitGatewayPrefixListReference]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayPrefixListReferences = transitGatewayPrefixListReferences
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case transitGatewayPrefixListReferences = "transitGatewayPrefixListReferenceSet"
        }
    }

    public struct GetTransitGatewayRouteTableAssociationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    resource-id - The ID of the resource.    resource-type - The resource type. Valid values are vpc | vpn | direct-connect-gateway | peering | connect.    transit-gateway-attachment-id - The ID of the attachment.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayRouteTableId: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct GetTransitGatewayRouteTableAssociationsResult: AWSDecodableShape {
        public struct _AssociationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the associations.
        @OptionalCustomCoding<EC2ArrayCoder<_AssociationsEncoding, TransitGatewayRouteTableAssociation>>
        public var associations: [TransitGatewayRouteTableAssociation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(associations: [TransitGatewayRouteTableAssociation]? = nil, nextToken: String? = nil) {
            self.associations = associations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case associations = "associations"
            case nextToken = "nextToken"
        }
    }

    public struct GetTransitGatewayRouteTablePropagationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    resource-id - The ID of the resource.    resource-type - The resource type. Valid values are vpc | vpn | direct-connect-gateway | peering | connect.    transit-gateway-attachment-id - The ID of the attachment.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayRouteTableId: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct GetTransitGatewayRouteTablePropagationsResult: AWSDecodableShape {
        public struct _TransitGatewayRouteTablePropagationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the route table propagations.
        @OptionalCustomCoding<EC2ArrayCoder<_TransitGatewayRouteTablePropagationsEncoding, TransitGatewayRouteTablePropagation>>
        public var transitGatewayRouteTablePropagations: [TransitGatewayRouteTablePropagation]?

        public init(nextToken: String? = nil, transitGatewayRouteTablePropagations: [TransitGatewayRouteTablePropagation]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayRouteTablePropagations = transitGatewayRouteTablePropagations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case transitGatewayRouteTablePropagations = "transitGatewayRouteTablePropagations"
        }
    }

    public struct GetVerifiedAccessEndpointPolicyRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Verified Access endpoint.
        public let verifiedAccessEndpointId: String?

        public init(dryRun: Bool? = nil, verifiedAccessEndpointId: String? = nil) {
            self.dryRun = dryRun
            self.verifiedAccessEndpointId = verifiedAccessEndpointId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case verifiedAccessEndpointId = "VerifiedAccessEndpointId"
        }
    }

    public struct GetVerifiedAccessEndpointPolicyResult: AWSDecodableShape {
        /// The Verified Access policy document.
        public let policyDocument: String?
        /// The status of the Verified Access policy.
        public let policyEnabled: Bool?

        public init(policyDocument: String? = nil, policyEnabled: Bool? = nil) {
            self.policyDocument = policyDocument
            self.policyEnabled = policyEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case policyDocument = "policyDocument"
            case policyEnabled = "policyEnabled"
        }
    }

    public struct GetVerifiedAccessGroupPolicyRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Verified Access group.
        public let verifiedAccessGroupId: String?

        public init(dryRun: Bool? = nil, verifiedAccessGroupId: String? = nil) {
            self.dryRun = dryRun
            self.verifiedAccessGroupId = verifiedAccessGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case verifiedAccessGroupId = "VerifiedAccessGroupId"
        }
    }

    public struct GetVerifiedAccessGroupPolicyResult: AWSDecodableShape {
        /// The Verified Access policy document.
        public let policyDocument: String?
        /// The status of the Verified Access policy.
        public let policyEnabled: Bool?

        public init(policyDocument: String? = nil, policyEnabled: Bool? = nil) {
            self.policyDocument = policyDocument
            self.policyEnabled = policyEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case policyDocument = "policyDocument"
            case policyEnabled = "policyEnabled"
        }
    }

    public struct GetVpnConnectionDeviceSampleConfigurationRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IKE version to be used in the sample configuration file for your customer gateway device. You can specify one of the following versions: ikev1 or ikev2.
        public let internetKeyExchangeVersion: String?
        /// Device identifier provided by the GetVpnConnectionDeviceTypes API.
        public let vpnConnectionDeviceTypeId: String?
        /// The VpnConnectionId specifies the Site-to-Site VPN connection used for the sample configuration.
        public let vpnConnectionId: String?

        public init(dryRun: Bool? = nil, internetKeyExchangeVersion: String? = nil, vpnConnectionDeviceTypeId: String? = nil, vpnConnectionId: String? = nil) {
            self.dryRun = dryRun
            self.internetKeyExchangeVersion = internetKeyExchangeVersion
            self.vpnConnectionDeviceTypeId = vpnConnectionDeviceTypeId
            self.vpnConnectionId = vpnConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case internetKeyExchangeVersion = "InternetKeyExchangeVersion"
            case vpnConnectionDeviceTypeId = "VpnConnectionDeviceTypeId"
            case vpnConnectionId = "VpnConnectionId"
        }
    }

    public struct GetVpnConnectionDeviceSampleConfigurationResult: AWSDecodableShape {
        /// Sample configuration file for the specified customer gateway device.
        public let vpnConnectionDeviceSampleConfiguration: String?

        public init(vpnConnectionDeviceSampleConfiguration: String? = nil) {
            self.vpnConnectionDeviceSampleConfiguration = vpnConnectionDeviceSampleConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnectionDeviceSampleConfiguration = "vpnConnectionDeviceSampleConfiguration"
        }
    }

    public struct GetVpnConnectionDeviceTypesRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results returned by GetVpnConnectionDeviceTypes in paginated output. When this parameter is used, GetVpnConnectionDeviceTypes only returns MaxResults results in a single page along with a NextToken response element. The remaining results of the initial request can be seen by sending another GetVpnConnectionDeviceTypes request with the returned NextToken value. This value can be between 200 and 1000. If this parameter is not used, then GetVpnConnectionDeviceTypes returns all results.
        public let maxResults: Int?
        /// The NextToken value returned from a previous paginated GetVpnConnectionDeviceTypes request where MaxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the NextToken value. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 200)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct GetVpnConnectionDeviceTypesResult: AWSDecodableShape {
        public struct _VpnConnectionDeviceTypesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The NextToken value to include in a future GetVpnConnectionDeviceTypes request. When the results of a GetVpnConnectionDeviceTypes request exceed MaxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// List of customer gateway devices that have a sample configuration file available for use.
        @OptionalCustomCoding<EC2ArrayCoder<_VpnConnectionDeviceTypesEncoding, VpnConnectionDeviceType>>
        public var vpnConnectionDeviceTypes: [VpnConnectionDeviceType]?

        public init(nextToken: String? = nil, vpnConnectionDeviceTypes: [VpnConnectionDeviceType]? = nil) {
            self.nextToken = nextToken
            self.vpnConnectionDeviceTypes = vpnConnectionDeviceTypes
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case vpnConnectionDeviceTypes = "vpnConnectionDeviceTypeSet"
        }
    }

    public struct GetVpnTunnelReplacementStatusRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Site-to-Site VPN connection.
        public let vpnConnectionId: String?
        /// The external IP address of the VPN tunnel.
        public let vpnTunnelOutsideIpAddress: String?

        public init(dryRun: Bool? = nil, vpnConnectionId: String? = nil, vpnTunnelOutsideIpAddress: String? = nil) {
            self.dryRun = dryRun
            self.vpnConnectionId = vpnConnectionId
            self.vpnTunnelOutsideIpAddress = vpnTunnelOutsideIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case vpnConnectionId = "VpnConnectionId"
            case vpnTunnelOutsideIpAddress = "VpnTunnelOutsideIpAddress"
        }
    }

    public struct GetVpnTunnelReplacementStatusResult: AWSDecodableShape {
        /// The ID of the customer gateway.
        public let customerGatewayId: String?
        /// Get details of pending tunnel endpoint maintenance.
        public let maintenanceDetails: MaintenanceDetails?
        /// The ID of the transit gateway associated with the VPN connection.
        public let transitGatewayId: String?
        /// The ID of the Site-to-Site VPN connection.
        public let vpnConnectionId: String?
        /// The ID of the virtual private gateway.
        public let vpnGatewayId: String?
        /// The external IP address of the VPN tunnel.
        public let vpnTunnelOutsideIpAddress: String?

        public init(customerGatewayId: String? = nil, maintenanceDetails: MaintenanceDetails? = nil, transitGatewayId: String? = nil, vpnConnectionId: String? = nil, vpnGatewayId: String? = nil, vpnTunnelOutsideIpAddress: String? = nil) {
            self.customerGatewayId = customerGatewayId
            self.maintenanceDetails = maintenanceDetails
            self.transitGatewayId = transitGatewayId
            self.vpnConnectionId = vpnConnectionId
            self.vpnGatewayId = vpnGatewayId
            self.vpnTunnelOutsideIpAddress = vpnTunnelOutsideIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case customerGatewayId = "customerGatewayId"
            case maintenanceDetails = "maintenanceDetails"
            case transitGatewayId = "transitGatewayId"
            case vpnConnectionId = "vpnConnectionId"
            case vpnGatewayId = "vpnGatewayId"
            case vpnTunnelOutsideIpAddress = "vpnTunnelOutsideIpAddress"
        }
    }

    public struct GpuDeviceInfo: AWSDecodableShape {
        /// The number of GPUs for the instance type.
        public let count: Int?
        /// The manufacturer of the GPU accelerator.
        public let manufacturer: String?
        /// Describes the memory available to the GPU accelerator.
        public let memoryInfo: GpuDeviceMemoryInfo?
        /// The name of the GPU accelerator.
        public let name: String?

        public init(count: Int? = nil, manufacturer: String? = nil, memoryInfo: GpuDeviceMemoryInfo? = nil, name: String? = nil) {
            self.count = count
            self.manufacturer = manufacturer
            self.memoryInfo = memoryInfo
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case count = "count"
            case manufacturer = "manufacturer"
            case memoryInfo = "memoryInfo"
            case name = "name"
        }
    }

    public struct GpuDeviceMemoryInfo: AWSDecodableShape {
        /// The size of the memory available to the GPU accelerator, in MiB.
        public let sizeInMiB: Int?

        public init(sizeInMiB: Int? = nil) {
            self.sizeInMiB = sizeInMiB
        }

        private enum CodingKeys: String, CodingKey {
            case sizeInMiB = "sizeInMiB"
        }
    }

    public struct GpuInfo: AWSDecodableShape {
        public struct _GpusEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Describes the GPU accelerators for the instance type.
        @OptionalCustomCoding<EC2ArrayCoder<_GpusEncoding, GpuDeviceInfo>>
        public var gpus: [GpuDeviceInfo]?
        /// The total size of the memory for the GPU accelerators for the instance type, in MiB.
        public let totalGpuMemoryInMiB: Int?

        public init(gpus: [GpuDeviceInfo]? = nil, totalGpuMemoryInMiB: Int? = nil) {
            self.gpus = gpus
            self.totalGpuMemoryInMiB = totalGpuMemoryInMiB
        }

        private enum CodingKeys: String, CodingKey {
            case gpus = "gpus"
            case totalGpuMemoryInMiB = "totalGpuMemoryInMiB"
        }
    }

    public struct GroupIdentifier: AWSEncodableShape & AWSDecodableShape {
        /// The ID of the security group.
        public let groupId: String?
        /// The name of the security group.
        public let groupName: String?

        public init(groupId: String? = nil, groupName: String? = nil) {
            self.groupId = groupId
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "groupId"
            case groupName = "groupName"
        }
    }

    public struct HibernationOptions: AWSDecodableShape {
        /// If true, your instance is enabled for hibernation; otherwise, it is not enabled for hibernation.
        public let configured: Bool?

        public init(configured: Bool? = nil) {
            self.configured = configured
        }

        private enum CodingKeys: String, CodingKey {
            case configured = "configured"
        }
    }

    public struct HibernationOptionsRequest: AWSEncodableShape {
        /// Set to true to enable your instance for hibernation. For Spot Instances, if you set Configured to true, either omit the InstanceInterruptionBehavior parameter (for  SpotMarketOptions ), or set it to hibernate. When Configured is true:   If you omit InstanceInterruptionBehavior, it defaults to hibernate.   If you set InstanceInterruptionBehavior to a value other than hibernate, you'll get an error.   Default: false
        public let configured: Bool?

        public init(configured: Bool? = nil) {
            self.configured = configured
        }

        private enum CodingKeys: String, CodingKey {
            case configured = "Configured"
        }
    }

    public struct HistoryRecord: AWSDecodableShape {
        /// Information about the event.
        public let eventInformation: EventInformation?
        /// The event type.    error - An error with the Spot Fleet request.    fleetRequestChange - A change in the status or configuration of the Spot Fleet request.    instanceChange - An instance was launched or terminated.    Information - An informational event.
        public let eventType: EventType?
        /// The date and time of the event, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let timestamp: Date?

        public init(eventInformation: EventInformation? = nil, eventType: EventType? = nil, timestamp: Date? = nil) {
            self.eventInformation = eventInformation
            self.eventType = eventType
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case eventInformation = "eventInformation"
            case eventType = "eventType"
            case timestamp = "timestamp"
        }
    }

    public struct HistoryRecordEntry: AWSDecodableShape {
        /// Information about the event.
        public let eventInformation: EventInformation?
        /// The event type.
        public let eventType: FleetEventType?
        /// The date and time of the event, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let timestamp: Date?

        public init(eventInformation: EventInformation? = nil, eventType: FleetEventType? = nil, timestamp: Date? = nil) {
            self.eventInformation = eventInformation
            self.eventType = eventType
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case eventInformation = "eventInformation"
            case eventType = "eventType"
            case timestamp = "timestamp"
        }
    }

    public struct Host: AWSDecodableShape {
        public struct _InstancesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The time that the Dedicated Host was allocated.
        public let allocationTime: Date?
        /// Indicates whether the Dedicated Host supports multiple instance types of the same instance family. If the value is on, the Dedicated Host supports multiple instance types in the instance family. If the value is off, the Dedicated Host supports a single instance type only.
        public let allowsMultipleInstanceTypes: AllowsMultipleInstanceTypes?
        /// The ID of the Outpost hardware asset on which the Dedicated Host is allocated.
        public let assetId: String?
        /// Whether auto-placement is on or off.
        public let autoPlacement: AutoPlacement?
        /// The Availability Zone of the Dedicated Host.
        public let availabilityZone: String?
        /// The ID of the Availability Zone in which the Dedicated Host is allocated.
        public let availabilityZoneId: String?
        /// Information about the instances running on the Dedicated Host.
        public let availableCapacity: AvailableCapacity?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// The ID of the Dedicated Host.
        public let hostId: String?
        /// Indicates whether host maintenance is enabled or disabled for the Dedicated Host.
        public let hostMaintenance: HostMaintenance?
        /// The hardware specifications of the Dedicated Host.
        public let hostProperties: HostProperties?
        /// Indicates whether host recovery is enabled or disabled for the Dedicated Host.
        public let hostRecovery: HostRecovery?
        /// The reservation ID of the Dedicated Host. This returns a null response if the Dedicated Host doesn't have an associated reservation.
        public let hostReservationId: String?
        /// The IDs and instance type that are currently running on the Dedicated Host.
        @OptionalCustomCoding<EC2ArrayCoder<_InstancesEncoding, HostInstance>>
        public var instances: [HostInstance]?
        /// Indicates whether the Dedicated Host is in a host resource group. If memberOfServiceLinkedResourceGroup is true, the host is in a host resource group; otherwise, it is not.
        public let memberOfServiceLinkedResourceGroup: Bool?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services Outpost on which the Dedicated Host is allocated.
        public let outpostArn: String?
        /// The ID of the Amazon Web Services account that owns the Dedicated Host.
        public let ownerId: String?
        /// The time that the Dedicated Host was released.
        public let releaseTime: Date?
        /// The Dedicated Host's state.
        public let state: AllocationState?
        /// Any tags assigned to the Dedicated Host.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(allocationTime: Date? = nil, allowsMultipleInstanceTypes: AllowsMultipleInstanceTypes? = nil, assetId: String? = nil, autoPlacement: AutoPlacement? = nil, availabilityZone: String? = nil, availabilityZoneId: String? = nil, availableCapacity: AvailableCapacity? = nil, clientToken: String? = nil, hostId: String? = nil, hostMaintenance: HostMaintenance? = nil, hostProperties: HostProperties? = nil, hostRecovery: HostRecovery? = nil, hostReservationId: String? = nil, instances: [HostInstance]? = nil, memberOfServiceLinkedResourceGroup: Bool? = nil, outpostArn: String? = nil, ownerId: String? = nil, releaseTime: Date? = nil, state: AllocationState? = nil, tags: [Tag]? = nil) {
            self.allocationTime = allocationTime
            self.allowsMultipleInstanceTypes = allowsMultipleInstanceTypes
            self.assetId = assetId
            self.autoPlacement = autoPlacement
            self.availabilityZone = availabilityZone
            self.availabilityZoneId = availabilityZoneId
            self.availableCapacity = availableCapacity
            self.clientToken = clientToken
            self.hostId = hostId
            self.hostMaintenance = hostMaintenance
            self.hostProperties = hostProperties
            self.hostRecovery = hostRecovery
            self.hostReservationId = hostReservationId
            self.instances = instances
            self.memberOfServiceLinkedResourceGroup = memberOfServiceLinkedResourceGroup
            self.outpostArn = outpostArn
            self.ownerId = ownerId
            self.releaseTime = releaseTime
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case allocationTime = "allocationTime"
            case allowsMultipleInstanceTypes = "allowsMultipleInstanceTypes"
            case assetId = "assetId"
            case autoPlacement = "autoPlacement"
            case availabilityZone = "availabilityZone"
            case availabilityZoneId = "availabilityZoneId"
            case availableCapacity = "availableCapacity"
            case clientToken = "clientToken"
            case hostId = "hostId"
            case hostMaintenance = "hostMaintenance"
            case hostProperties = "hostProperties"
            case hostRecovery = "hostRecovery"
            case hostReservationId = "hostReservationId"
            case instances = "instances"
            case memberOfServiceLinkedResourceGroup = "memberOfServiceLinkedResourceGroup"
            case outpostArn = "outpostArn"
            case ownerId = "ownerId"
            case releaseTime = "releaseTime"
            case state = "state"
            case tags = "tagSet"
        }
    }

    public struct HostInstance: AWSDecodableShape {
        /// The ID of instance that is running on the Dedicated Host.
        public let instanceId: String?
        /// The instance type (for example, m3.medium) of the running instance.
        public let instanceType: String?
        /// The ID of the Amazon Web Services account that owns the instance.
        public let ownerId: String?

        public init(instanceId: String? = nil, instanceType: String? = nil, ownerId: String? = nil) {
            self.instanceId = instanceId
            self.instanceType = instanceType
            self.ownerId = ownerId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case instanceType = "instanceType"
            case ownerId = "ownerId"
        }
    }

    public struct HostOffering: AWSDecodableShape {
        /// The currency of the offering.
        public let currencyCode: CurrencyCodeValues?
        /// The duration of the offering (in seconds).
        public let duration: Int?
        /// The hourly price of the offering.
        public let hourlyPrice: String?
        /// The instance family of the offering.
        public let instanceFamily: String?
        /// The ID of the offering.
        public let offeringId: String?
        /// The available payment option.
        public let paymentOption: PaymentOption?
        /// The upfront price of the offering. Does not apply to No Upfront offerings.
        public let upfrontPrice: String?

        public init(currencyCode: CurrencyCodeValues? = nil, duration: Int? = nil, hourlyPrice: String? = nil, instanceFamily: String? = nil, offeringId: String? = nil, paymentOption: PaymentOption? = nil, upfrontPrice: String? = nil) {
            self.currencyCode = currencyCode
            self.duration = duration
            self.hourlyPrice = hourlyPrice
            self.instanceFamily = instanceFamily
            self.offeringId = offeringId
            self.paymentOption = paymentOption
            self.upfrontPrice = upfrontPrice
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode = "currencyCode"
            case duration = "duration"
            case hourlyPrice = "hourlyPrice"
            case instanceFamily = "instanceFamily"
            case offeringId = "offeringId"
            case paymentOption = "paymentOption"
            case upfrontPrice = "upfrontPrice"
        }
    }

    public struct HostProperties: AWSDecodableShape {
        /// The number of cores on the Dedicated Host.
        public let cores: Int?
        /// The instance family supported by the Dedicated Host. For example, m5.
        public let instanceFamily: String?
        /// The instance type supported by the Dedicated Host. For example, m5.large. If the host supports multiple instance types, no instanceType is returned.
        public let instanceType: String?
        /// The number of sockets on the Dedicated Host.
        public let sockets: Int?
        /// The total number of vCPUs on the Dedicated Host.
        public let totalVCpus: Int?

        public init(cores: Int? = nil, instanceFamily: String? = nil, instanceType: String? = nil, sockets: Int? = nil, totalVCpus: Int? = nil) {
            self.cores = cores
            self.instanceFamily = instanceFamily
            self.instanceType = instanceType
            self.sockets = sockets
            self.totalVCpus = totalVCpus
        }

        private enum CodingKeys: String, CodingKey {
            case cores = "cores"
            case instanceFamily = "instanceFamily"
            case instanceType = "instanceType"
            case sockets = "sockets"
            case totalVCpus = "totalVCpus"
        }
    }

    public struct HostReservation: AWSDecodableShape {
        public struct _HostIdSetEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The number of Dedicated Hosts the reservation is associated with.
        public let count: Int?
        /// The currency in which the upfrontPrice and hourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The length of the reservation's term, specified in seconds. Can be 31536000 (1 year) | 94608000 (3 years).
        public let duration: Int?
        /// The date and time that the reservation ends.
        public let end: Date?
        /// The IDs of the Dedicated Hosts associated with the reservation.
        @OptionalCustomCoding<EC2ArrayCoder<_HostIdSetEncoding, String>>
        public var hostIdSet: [String]?
        /// The ID of the reservation that specifies the associated Dedicated Hosts.
        public let hostReservationId: String?
        /// The hourly price of the reservation.
        public let hourlyPrice: String?
        /// The instance family of the Dedicated Host Reservation. The instance family on the Dedicated Host must be the same in order for it to benefit from the reservation.
        public let instanceFamily: String?
        /// The ID of the reservation. This remains the same regardless of which Dedicated Hosts are associated with it.
        public let offeringId: String?
        /// The payment option selected for this reservation.
        public let paymentOption: PaymentOption?
        /// The date and time that the reservation started.
        public let start: Date?
        /// The state of the reservation.
        public let state: ReservationState?
        /// Any tags assigned to the Dedicated Host Reservation.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The upfront price of the reservation.
        public let upfrontPrice: String?

        public init(count: Int? = nil, currencyCode: CurrencyCodeValues? = nil, duration: Int? = nil, end: Date? = nil, hostIdSet: [String]? = nil, hostReservationId: String? = nil, hourlyPrice: String? = nil, instanceFamily: String? = nil, offeringId: String? = nil, paymentOption: PaymentOption? = nil, start: Date? = nil, state: ReservationState? = nil, tags: [Tag]? = nil, upfrontPrice: String? = nil) {
            self.count = count
            self.currencyCode = currencyCode
            self.duration = duration
            self.end = end
            self.hostIdSet = hostIdSet
            self.hostReservationId = hostReservationId
            self.hourlyPrice = hourlyPrice
            self.instanceFamily = instanceFamily
            self.offeringId = offeringId
            self.paymentOption = paymentOption
            self.start = start
            self.state = state
            self.tags = tags
            self.upfrontPrice = upfrontPrice
        }

        private enum CodingKeys: String, CodingKey {
            case count = "count"
            case currencyCode = "currencyCode"
            case duration = "duration"
            case end = "end"
            case hostIdSet = "hostIdSet"
            case hostReservationId = "hostReservationId"
            case hourlyPrice = "hourlyPrice"
            case instanceFamily = "instanceFamily"
            case offeringId = "offeringId"
            case paymentOption = "paymentOption"
            case start = "start"
            case state = "state"
            case tags = "tagSet"
            case upfrontPrice = "upfrontPrice"
        }
    }

    public struct IKEVersionsListValue: AWSDecodableShape {
        /// The IKE version.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct IKEVersionsRequestListValue: AWSEncodableShape {
        /// The IKE version.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct IamInstanceProfile: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the instance profile.
        public let arn: String?
        /// The ID of the instance profile.
        public let id: String?

        public init(arn: String? = nil, id: String? = nil) {
            self.arn = arn
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case id = "id"
        }
    }

    public struct IamInstanceProfileAssociation: AWSDecodableShape {
        /// The ID of the association.
        public let associationId: String?
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfile?
        /// The ID of the instance.
        public let instanceId: String?
        /// The state of the association.
        public let state: IamInstanceProfileAssociationState?
        /// The time the IAM instance profile was associated with the instance.
        public let timestamp: Date?

        public init(associationId: String? = nil, iamInstanceProfile: IamInstanceProfile? = nil, instanceId: String? = nil, state: IamInstanceProfileAssociationState? = nil, timestamp: Date? = nil) {
            self.associationId = associationId
            self.iamInstanceProfile = iamInstanceProfile
            self.instanceId = instanceId
            self.state = state
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case iamInstanceProfile = "iamInstanceProfile"
            case instanceId = "instanceId"
            case state = "state"
            case timestamp = "timestamp"
        }
    }

    public struct IamInstanceProfileSpecification: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the instance profile.
        public let arn: String?
        /// The name of the instance profile.
        public let name: String?

        public init(arn: String? = nil, name: String? = nil) {
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case name = "name"
        }
    }

    public struct IcmpTypeCode: AWSEncodableShape & AWSDecodableShape {
        /// The ICMP code. A value of -1 means all codes for the specified ICMP type.
        public let code: Int?
        /// The ICMP type. A value of -1 means all types.
        public let type: Int?

        public init(code: Int? = nil, type: Int? = nil) {
            self.code = code
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case type = "type"
        }
    }

    public struct IdFormat: AWSDecodableShape {
        /// The date in UTC at which you are permanently switched over to using longer IDs. If a deadline is not yet available for this resource type, this field is not returned.
        public let deadline: Date?
        /// The type of resource.
        public let resource: String?
        /// Indicates whether longer IDs (17-character IDs) are enabled for the resource.
        public let useLongIds: Bool?

        public init(deadline: Date? = nil, resource: String? = nil, useLongIds: Bool? = nil) {
            self.deadline = deadline
            self.resource = resource
            self.useLongIds = useLongIds
        }

        private enum CodingKeys: String, CodingKey {
            case deadline = "deadline"
            case resource = "resource"
            case useLongIds = "useLongIds"
        }
    }

    public struct Image: AWSDecodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ProductCodesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The architecture of the image.
        public let architecture: ArchitectureValues?
        /// Any block device mapping entries.
        @OptionalCustomCoding<EC2ArrayCoder<_BlockDeviceMappingsEncoding, BlockDeviceMapping>>
        public var blockDeviceMappings: [BlockDeviceMapping]?
        /// The boot mode of the image. For more information, see Boot modes in the Amazon EC2 User Guide.
        public let bootMode: BootModeValues?
        /// The date and time the image was created.
        public let creationDate: String?
        /// The date and time to deprecate the AMI, in UTC, in the following format:  YYYY-MM-DDTHH:MM:SSZ. If you specified a value for seconds, Amazon EC2 rounds the seconds to the nearest minute.
        public let deprecationTime: String?
        /// The description of the AMI that was provided during image creation.
        public let description: String?
        /// Specifies whether enhanced networking with ENA is enabled.
        public let enaSupport: Bool?
        /// The hypervisor type of the image. Only xen is supported. ovm is not supported.
        public let hypervisor: HypervisorType?
        /// The ID of the AMI.
        public let imageId: String?
        /// The location of the AMI.
        public let imageLocation: String?
        /// The owner alias (amazon | aws-marketplace).
        public let imageOwnerAlias: String?
        /// The type of image.
        public let imageType: ImageTypeValues?
        /// If v2.0, it indicates that IMDSv2 is specified in the AMI. Instances launched from this AMI will have HttpTokens automatically set to required so that, by default, the instance requires that IMDSv2 is used when requesting instance metadata. In addition, HttpPutResponseHopLimit is set to 2. For more information, see Configure the AMI in the Amazon EC2 User Guide.
        public let imdsSupport: ImdsSupportValues?
        /// The kernel associated with the image, if any. Only applicable for machine images.
        public let kernelId: String?
        /// The name of the AMI that was provided during image creation.
        public let name: String?
        /// The ID of the Amazon Web Services account that owns the image.
        public let ownerId: String?
        /// This value is set to windows for Windows AMIs; otherwise, it is blank.
        public let platform: PlatformValues?
        /// The platform details associated with the billing code of the AMI. For more information, see Understand AMI billing information in the Amazon EC2 User Guide.
        public let platformDetails: String?
        /// Any product codes associated with the AMI.
        @OptionalCustomCoding<EC2ArrayCoder<_ProductCodesEncoding, ProductCode>>
        public var productCodes: [ProductCode]?
        /// Indicates whether the image has public launch permissions. The value is true if
        /// 				this image has public launch permissions or false
        /// 				if it has only implicit and explicit launch permissions.
        public let `public`: Bool?
        /// The RAM disk associated with the image, if any. Only applicable for machine images.
        public let ramdiskId: String?
        /// The device name of the root device volume (for example, /dev/sda1).
        public let rootDeviceName: String?
        /// The type of root device used by the AMI. The AMI can use an Amazon EBS volume or an instance store volume.
        public let rootDeviceType: DeviceType?
        /// The ID of the instance that the AMI was created from if the AMI was created using CreateImage. This field only appears if the AMI was created using CreateImage.
        public let sourceInstanceId: String?
        /// Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
        public let sriovNetSupport: String?
        /// The current state of the AMI. If the state is available, the image is successfully registered and can be used to launch an instance.
        public let state: ImageState?
        /// The reason for the state change.
        public let stateReason: StateReason?
        /// Any tags assigned to the image.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// If the image is configured for NitroTPM support, the value is v2.0.  For more information, see NitroTPM in the Amazon EC2 User Guide.
        public let tpmSupport: TpmSupportValues?
        /// The operation of the Amazon EC2 instance and the billing code that is associated with the AMI. usageOperation corresponds to the lineitem/Operation column on your Amazon Web Services Cost and Usage Report and in the Amazon Web Services Price 	List API. You can view these fields on the Instances or  	AMIs pages in the Amazon EC2 console, or in the responses that are  	returned by the DescribeImages  	command in the Amazon EC2 API, or the describe-images  	command in the CLI.
        public let usageOperation: String?
        /// The type of virtualization of the AMI.
        public let virtualizationType: VirtualizationType?

        public init(architecture: ArchitectureValues? = nil, blockDeviceMappings: [BlockDeviceMapping]? = nil, bootMode: BootModeValues? = nil, creationDate: String? = nil, deprecationTime: String? = nil, description: String? = nil, enaSupport: Bool? = nil, hypervisor: HypervisorType? = nil, imageId: String? = nil, imageLocation: String? = nil, imageOwnerAlias: String? = nil, imageType: ImageTypeValues? = nil, imdsSupport: ImdsSupportValues? = nil, kernelId: String? = nil, name: String? = nil, ownerId: String? = nil, platform: PlatformValues? = nil, platformDetails: String? = nil, productCodes: [ProductCode]? = nil, public: Bool? = nil, ramdiskId: String? = nil, rootDeviceName: String? = nil, rootDeviceType: DeviceType? = nil, sourceInstanceId: String? = nil, sriovNetSupport: String? = nil, state: ImageState? = nil, stateReason: StateReason? = nil, tags: [Tag]? = nil, tpmSupport: TpmSupportValues? = nil, usageOperation: String? = nil, virtualizationType: VirtualizationType? = nil) {
            self.architecture = architecture
            self.blockDeviceMappings = blockDeviceMappings
            self.bootMode = bootMode
            self.creationDate = creationDate
            self.deprecationTime = deprecationTime
            self.description = description
            self.enaSupport = enaSupport
            self.hypervisor = hypervisor
            self.imageId = imageId
            self.imageLocation = imageLocation
            self.imageOwnerAlias = imageOwnerAlias
            self.imageType = imageType
            self.imdsSupport = imdsSupport
            self.kernelId = kernelId
            self.name = name
            self.ownerId = ownerId
            self.platform = platform
            self.platformDetails = platformDetails
            self.productCodes = productCodes
            self.`public` = `public`
            self.ramdiskId = ramdiskId
            self.rootDeviceName = rootDeviceName
            self.rootDeviceType = rootDeviceType
            self.sourceInstanceId = sourceInstanceId
            self.sriovNetSupport = sriovNetSupport
            self.state = state
            self.stateReason = stateReason
            self.tags = tags
            self.tpmSupport = tpmSupport
            self.usageOperation = usageOperation
            self.virtualizationType = virtualizationType
        }

        private enum CodingKeys: String, CodingKey {
            case architecture = "architecture"
            case blockDeviceMappings = "blockDeviceMapping"
            case bootMode = "bootMode"
            case creationDate = "creationDate"
            case deprecationTime = "deprecationTime"
            case description = "description"
            case enaSupport = "enaSupport"
            case hypervisor = "hypervisor"
            case imageId = "imageId"
            case imageLocation = "imageLocation"
            case imageOwnerAlias = "imageOwnerAlias"
            case imageType = "imageType"
            case imdsSupport = "imdsSupport"
            case kernelId = "kernelId"
            case name = "name"
            case ownerId = "imageOwnerId"
            case platform = "platform"
            case platformDetails = "platformDetails"
            case productCodes = "productCodes"
            case `public` = "isPublic"
            case ramdiskId = "ramdiskId"
            case rootDeviceName = "rootDeviceName"
            case rootDeviceType = "rootDeviceType"
            case sourceInstanceId = "sourceInstanceId"
            case sriovNetSupport = "sriovNetSupport"
            case state = "imageState"
            case stateReason = "stateReason"
            case tags = "tagSet"
            case tpmSupport = "tpmSupport"
            case usageOperation = "usageOperation"
            case virtualizationType = "virtualizationType"
        }
    }

    public struct ImageAttribute: AWSDecodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _LaunchPermissionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ProductCodesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The block device mapping entries.
        @OptionalCustomCoding<EC2ArrayCoder<_BlockDeviceMappingsEncoding, BlockDeviceMapping>>
        public var blockDeviceMappings: [BlockDeviceMapping]?
        /// The boot mode.
        public let bootMode: AttributeValue?
        /// A description for the AMI.
        public let description: AttributeValue?
        /// The ID of the AMI.
        public let imageId: String?
        /// If v2.0, it indicates that IMDSv2 is specified in the AMI. Instances launched from this AMI will have HttpTokens automatically set to required so that, by default, the instance requires that IMDSv2 is used when requesting instance metadata. In addition, HttpPutResponseHopLimit is set to 2. For more information, see Configure the AMI in the Amazon EC2 User Guide.
        public let imdsSupport: AttributeValue?
        /// The kernel ID.
        public let kernelId: AttributeValue?
        /// The date and time, in ISO 8601 date-time format, when the AMI was last used to launch an EC2 instance. When the AMI is used to launch an instance, there is a 24-hour delay before that usage is reported.   lastLaunchedTime data is available starting April 2017.
        public let lastLaunchedTime: AttributeValue?
        /// The launch permissions.
        @OptionalCustomCoding<EC2ArrayCoder<_LaunchPermissionsEncoding, LaunchPermission>>
        public var launchPermissions: [LaunchPermission]?
        /// The product codes.
        @OptionalCustomCoding<EC2ArrayCoder<_ProductCodesEncoding, ProductCode>>
        public var productCodes: [ProductCode]?
        /// The RAM disk ID.
        public let ramdiskId: AttributeValue?
        /// Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
        public let sriovNetSupport: AttributeValue?
        /// If the image is configured for NitroTPM support, the value is v2.0.
        public let tpmSupport: AttributeValue?
        /// Base64 representation of the non-volatile UEFI variable store. To retrieve the UEFI data, use the GetInstanceUefiData command. You can inspect and modify the UEFI data by using the python-uefivars tool on GitHub. For more information, see UEFI Secure Boot in the Amazon EC2 User Guide.
        public let uefiData: AttributeValue?

        public init(blockDeviceMappings: [BlockDeviceMapping]? = nil, bootMode: AttributeValue? = nil, description: AttributeValue? = nil, imageId: String? = nil, imdsSupport: AttributeValue? = nil, kernelId: AttributeValue? = nil, lastLaunchedTime: AttributeValue? = nil, launchPermissions: [LaunchPermission]? = nil, productCodes: [ProductCode]? = nil, ramdiskId: AttributeValue? = nil, sriovNetSupport: AttributeValue? = nil, tpmSupport: AttributeValue? = nil, uefiData: AttributeValue? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.bootMode = bootMode
            self.description = description
            self.imageId = imageId
            self.imdsSupport = imdsSupport
            self.kernelId = kernelId
            self.lastLaunchedTime = lastLaunchedTime
            self.launchPermissions = launchPermissions
            self.productCodes = productCodes
            self.ramdiskId = ramdiskId
            self.sriovNetSupport = sriovNetSupport
            self.tpmSupport = tpmSupport
            self.uefiData = uefiData
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "blockDeviceMapping"
            case bootMode = "bootMode"
            case description = "description"
            case imageId = "imageId"
            case imdsSupport = "imdsSupport"
            case kernelId = "kernel"
            case lastLaunchedTime = "lastLaunchedTime"
            case launchPermissions = "launchPermission"
            case productCodes = "productCodes"
            case ramdiskId = "ramdisk"
            case sriovNetSupport = "sriovNetSupport"
            case tpmSupport = "tpmSupport"
            case uefiData = "uefiData"
        }
    }

    public struct ImageDiskContainer: AWSEncodableShape {
        /// The description of the disk image.
        public let description: String?
        /// The block device mapping for the disk.
        public let deviceName: String?
        /// The format of the disk image being imported. Valid values: OVA | VHD | VHDX | VMDK | RAW
        public let format: String?
        /// The ID of the EBS snapshot to be used for importing the snapshot.
        public let snapshotId: String?
        /// The URL to the Amazon S3-based disk image being imported. The URL can either be a https URL (https://..) or an Amazon S3 URL (s3://..)
        public let url: String?
        /// The S3 bucket for the disk image.
        public let userBucket: UserBucket?

        public init(description: String? = nil, deviceName: String? = nil, format: String? = nil, snapshotId: String? = nil, url: String? = nil, userBucket: UserBucket? = nil) {
            self.description = description
            self.deviceName = deviceName
            self.format = format
            self.snapshotId = snapshotId
            self.url = url
            self.userBucket = userBucket
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case deviceName = "DeviceName"
            case format = "Format"
            case snapshotId = "SnapshotId"
            case url = "Url"
            case userBucket = "UserBucket"
        }
    }

    public struct ImageRecycleBinInfo: AWSDecodableShape {
        /// The description of the AMI.
        public let description: String?
        /// The ID of the AMI.
        public let imageId: String?
        /// The name of the AMI.
        public let name: String?
        /// The date and time when the AMI entered the Recycle Bin.
        public let recycleBinEnterTime: Date?
        /// The date and time when the AMI is to be permanently deleted from the Recycle Bin.
        public let recycleBinExitTime: Date?

        public init(description: String? = nil, imageId: String? = nil, name: String? = nil, recycleBinEnterTime: Date? = nil, recycleBinExitTime: Date? = nil) {
            self.description = description
            self.imageId = imageId
            self.name = name
            self.recycleBinEnterTime = recycleBinEnterTime
            self.recycleBinExitTime = recycleBinExitTime
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case imageId = "imageId"
            case name = "name"
            case recycleBinEnterTime = "recycleBinEnterTime"
            case recycleBinExitTime = "recycleBinExitTime"
        }
    }

    public struct ImportClientVpnClientCertificateRevocationListRequest: AWSEncodableShape {
        /// The client certificate revocation list file. For more information, see Generate a Client Certificate Revocation List in the
        /// 				Client VPN Administrator Guide.
        public let certificateRevocationList: String?
        /// The ID of the Client VPN endpoint to which the client certificate revocation list applies.
        public let clientVpnEndpointId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(certificateRevocationList: String? = nil, clientVpnEndpointId: String? = nil, dryRun: Bool? = nil) {
            self.certificateRevocationList = certificateRevocationList
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case certificateRevocationList = "CertificateRevocationList"
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
        }
    }

    public struct ImportClientVpnClientCertificateRevocationListResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ImportImageLicenseConfigurationRequest: AWSEncodableShape {
        /// The ARN of a license configuration.
        public let licenseConfigurationArn: String?

        public init(licenseConfigurationArn: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "LicenseConfigurationArn"
        }
    }

    public struct ImportImageLicenseConfigurationResponse: AWSDecodableShape {
        /// The ARN of a license configuration.
        public let licenseConfigurationArn: String?

        public init(licenseConfigurationArn: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "licenseConfigurationArn"
        }
    }

    public struct ImportImageRequest: AWSEncodableShape {
        public struct _DiskContainersEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _LicenseSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The architecture of the virtual machine. Valid values: i386 | x86_64
        public let architecture: String?
        /// The boot mode of the virtual machine.  The uefi-preferred boot mode isn't supported for importing images. For more information, see Boot modes in the VM Import/Export User Guide.
        public let bootMode: BootModeValues?
        /// The client-specific data.
        public let clientData: ClientData?
        /// The token to enable idempotency for VM import requests.
        public let clientToken: String?
        /// A description string for the import image task.
        public let description: String?
        /// Information about the disk containers.
        @OptionalCustomCoding<EC2ArrayCoder<_DiskContainersEncoding, ImageDiskContainer>>
        public var diskContainers: [ImageDiskContainer]?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specifies whether the destination AMI of the imported image should be encrypted. The default KMS key for EBS is used unless you specify a non-default KMS key using KmsKeyId. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
        public let encrypted: Bool?
        /// The target hypervisor platform. Valid values: xen
        public let hypervisor: String?
        /// An identifier for the symmetric KMS key to use when creating the encrypted AMI. This parameter is only required if you want to use a non-default KMS key; if this parameter is not specified, the default KMS key for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.  The KMS key identifier may be provided in any of the following formats:    Key ID   Key alias   ARN using key ID. The ID ARN contains the arn:aws:kms namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the key namespace, and then the key ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.   ARN using key alias. The alias ARN contains the arn:aws:kms namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the alias namespace, and then the key alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.    Amazon Web Services parses KmsKeyId asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure.  The specified KMS key must exist in the Region that the AMI is being copied to. Amazon EBS does not support asymmetric KMS keys.
        public let kmsKeyId: String?
        /// The ARNs of the license configurations.
        @OptionalCustomCoding<EC2ArrayCoder<_LicenseSpecificationsEncoding, ImportImageLicenseConfigurationRequest>>
        public var licenseSpecifications: [ImportImageLicenseConfigurationRequest]?
        /// The license type to be used for the Amazon Machine Image (AMI) after importing. Specify AWS to replace the source-system license with an Amazon Web Services license or BYOL to retain the source-system license. Leaving this parameter undefined is the same as choosing AWS when importing a Windows Server operating system, and the same as choosing BYOL when importing a Windows client operating system (such as Windows 10) or a Linux operating system. To use BYOL, you must have existing licenses with rights to use these licenses in a third party cloud, such as Amazon Web Services. For more information, see Prerequisites in the VM Import/Export User Guide.
        public let licenseType: String?
        /// The operating system of the virtual machine. If you import a VM that is compatible with Unified Extensible Firmware Interface (UEFI) using an EBS snapshot, you must specify a value for the platform. Valid values: Windows | Linux
        public let platform: String?
        /// The name of the role to use when not using the default role, 'vmimport'.
        public let roleName: String?
        /// The tags to apply to the import image task during creation.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The usage operation value. For more information, see Licensing options in the VM Import/Export User Guide.
        public let usageOperation: String?

        public init(architecture: String? = nil, bootMode: BootModeValues? = nil, clientData: ClientData? = nil, clientToken: String? = nil, description: String? = nil, diskContainers: [ImageDiskContainer]? = nil, dryRun: Bool? = nil, encrypted: Bool? = nil, hypervisor: String? = nil, kmsKeyId: String? = nil, licenseSpecifications: [ImportImageLicenseConfigurationRequest]? = nil, licenseType: String? = nil, platform: String? = nil, roleName: String? = nil, tagSpecifications: [TagSpecification]? = nil, usageOperation: String? = nil) {
            self.architecture = architecture
            self.bootMode = bootMode
            self.clientData = clientData
            self.clientToken = clientToken
            self.description = description
            self.diskContainers = diskContainers
            self.dryRun = dryRun
            self.encrypted = encrypted
            self.hypervisor = hypervisor
            self.kmsKeyId = kmsKeyId
            self.licenseSpecifications = licenseSpecifications
            self.licenseType = licenseType
            self.platform = platform
            self.roleName = roleName
            self.tagSpecifications = tagSpecifications
            self.usageOperation = usageOperation
        }

        private enum CodingKeys: String, CodingKey {
            case architecture = "Architecture"
            case bootMode = "BootMode"
            case clientData = "ClientData"
            case clientToken = "ClientToken"
            case description = "Description"
            case diskContainers = "DiskContainer"
            case dryRun = "DryRun"
            case encrypted = "Encrypted"
            case hypervisor = "Hypervisor"
            case kmsKeyId = "KmsKeyId"
            case licenseSpecifications = "LicenseSpecifications"
            case licenseType = "LicenseType"
            case platform = "Platform"
            case roleName = "RoleName"
            case tagSpecifications = "TagSpecification"
            case usageOperation = "UsageOperation"
        }
    }

    public struct ImportImageResult: AWSDecodableShape {
        public struct _LicenseSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SnapshotDetailsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The architecture of the virtual machine.
        public let architecture: String?
        /// A description of the import task.
        public let description: String?
        /// Indicates whether the AMI is encrypted.
        public let encrypted: Bool?
        /// The target hypervisor of the import task.
        public let hypervisor: String?
        /// The ID of the Amazon Machine Image (AMI) created by the import task.
        public let imageId: String?
        /// The task ID of the import image task.
        public let importTaskId: String?
        /// The identifier for the symmetric KMS key that was used to create the encrypted AMI.
        public let kmsKeyId: String?
        /// The ARNs of the license configurations.
        @OptionalCustomCoding<EC2ArrayCoder<_LicenseSpecificationsEncoding, ImportImageLicenseConfigurationResponse>>
        public var licenseSpecifications: [ImportImageLicenseConfigurationResponse]?
        /// The license type of the virtual machine.
        public let licenseType: String?
        /// The operating system of the virtual machine.
        public let platform: String?
        /// The progress of the task.
        public let progress: String?
        /// Information about the snapshots.
        @OptionalCustomCoding<EC2ArrayCoder<_SnapshotDetailsEncoding, SnapshotDetail>>
        public var snapshotDetails: [SnapshotDetail]?
        /// A brief status of the task.
        public let status: String?
        /// A detailed status message of the import task.
        public let statusMessage: String?
        /// Any tags assigned to the import image task.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The usage operation value.
        public let usageOperation: String?

        public init(architecture: String? = nil, description: String? = nil, encrypted: Bool? = nil, hypervisor: String? = nil, imageId: String? = nil, importTaskId: String? = nil, kmsKeyId: String? = nil, licenseSpecifications: [ImportImageLicenseConfigurationResponse]? = nil, licenseType: String? = nil, platform: String? = nil, progress: String? = nil, snapshotDetails: [SnapshotDetail]? = nil, status: String? = nil, statusMessage: String? = nil, tags: [Tag]? = nil, usageOperation: String? = nil) {
            self.architecture = architecture
            self.description = description
            self.encrypted = encrypted
            self.hypervisor = hypervisor
            self.imageId = imageId
            self.importTaskId = importTaskId
            self.kmsKeyId = kmsKeyId
            self.licenseSpecifications = licenseSpecifications
            self.licenseType = licenseType
            self.platform = platform
            self.progress = progress
            self.snapshotDetails = snapshotDetails
            self.status = status
            self.statusMessage = statusMessage
            self.tags = tags
            self.usageOperation = usageOperation
        }

        private enum CodingKeys: String, CodingKey {
            case architecture = "architecture"
            case description = "description"
            case encrypted = "encrypted"
            case hypervisor = "hypervisor"
            case imageId = "imageId"
            case importTaskId = "importTaskId"
            case kmsKeyId = "kmsKeyId"
            case licenseSpecifications = "licenseSpecifications"
            case licenseType = "licenseType"
            case platform = "platform"
            case progress = "progress"
            case snapshotDetails = "snapshotDetailSet"
            case status = "status"
            case statusMessage = "statusMessage"
            case tags = "tagSet"
            case usageOperation = "usageOperation"
        }
    }

    public struct ImportImageTask: AWSDecodableShape {
        public struct _LicenseSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SnapshotDetailsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The architecture of the virtual machine. Valid values: i386 | x86_64 | arm64
        public let architecture: String?
        /// The boot mode of the virtual machine.
        public let bootMode: BootModeValues?
        /// A description of the import task.
        public let description: String?
        /// Indicates whether the image is encrypted.
        public let encrypted: Bool?
        /// The target hypervisor for the import task. Valid values: xen
        public let hypervisor: String?
        /// The ID of the Amazon Machine Image (AMI) of the imported virtual machine.
        public let imageId: String?
        /// The ID of the import image task.
        public let importTaskId: String?
        /// The identifier for the KMS key that was used to create the encrypted image.
        public let kmsKeyId: String?
        /// The ARNs of the license configurations that are associated with the import image task.
        @OptionalCustomCoding<EC2ArrayCoder<_LicenseSpecificationsEncoding, ImportImageLicenseConfigurationResponse>>
        public var licenseSpecifications: [ImportImageLicenseConfigurationResponse]?
        /// The license type of the virtual machine.
        public let licenseType: String?
        /// The description string for the import image task.
        public let platform: String?
        /// The percentage of progress of the import image task.
        public let progress: String?
        /// Information about the snapshots.
        @OptionalCustomCoding<EC2ArrayCoder<_SnapshotDetailsEncoding, SnapshotDetail>>
        public var snapshotDetails: [SnapshotDetail]?
        /// A brief status for the import image task.
        public let status: String?
        /// A descriptive status message for the import image task.
        public let statusMessage: String?
        /// The tags for the import image task.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The usage operation value.
        public let usageOperation: String?

        public init(architecture: String? = nil, bootMode: BootModeValues? = nil, description: String? = nil, encrypted: Bool? = nil, hypervisor: String? = nil, imageId: String? = nil, importTaskId: String? = nil, kmsKeyId: String? = nil, licenseSpecifications: [ImportImageLicenseConfigurationResponse]? = nil, licenseType: String? = nil, platform: String? = nil, progress: String? = nil, snapshotDetails: [SnapshotDetail]? = nil, status: String? = nil, statusMessage: String? = nil, tags: [Tag]? = nil, usageOperation: String? = nil) {
            self.architecture = architecture
            self.bootMode = bootMode
            self.description = description
            self.encrypted = encrypted
            self.hypervisor = hypervisor
            self.imageId = imageId
            self.importTaskId = importTaskId
            self.kmsKeyId = kmsKeyId
            self.licenseSpecifications = licenseSpecifications
            self.licenseType = licenseType
            self.platform = platform
            self.progress = progress
            self.snapshotDetails = snapshotDetails
            self.status = status
            self.statusMessage = statusMessage
            self.tags = tags
            self.usageOperation = usageOperation
        }

        private enum CodingKeys: String, CodingKey {
            case architecture = "architecture"
            case bootMode = "bootMode"
            case description = "description"
            case encrypted = "encrypted"
            case hypervisor = "hypervisor"
            case imageId = "imageId"
            case importTaskId = "importTaskId"
            case kmsKeyId = "kmsKeyId"
            case licenseSpecifications = "licenseSpecifications"
            case licenseType = "licenseType"
            case platform = "platform"
            case progress = "progress"
            case snapshotDetails = "snapshotDetailSet"
            case status = "status"
            case statusMessage = "statusMessage"
            case tags = "tagSet"
            case usageOperation = "usageOperation"
        }
    }

    public struct ImportInstanceLaunchSpecification: AWSEncodableShape {
        public struct _GroupIdsEncoding: ArrayCoderProperties { public static let member = "SecurityGroupId" }
        public struct _GroupNamesEncoding: ArrayCoderProperties { public static let member = "SecurityGroup" }

        /// Reserved.
        public let additionalInfo: String?
        /// The architecture of the instance.
        public let architecture: ArchitectureValues?
        /// The security group IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_GroupIdsEncoding, String>>
        public var groupIds: [String]?
        /// The security group names.
        @OptionalCustomCoding<EC2ArrayCoder<_GroupNamesEncoding, String>>
        public var groupNames: [String]?
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
        public let instanceInitiatedShutdownBehavior: ShutdownBehavior?
        /// The instance type. For more information about the instance types that you can import, see Instance Types in the VM Import/Export User Guide.
        public let instanceType: InstanceType?
        /// Indicates whether monitoring is enabled.
        public let monitoring: Bool?
        /// The placement information for the instance.
        public let placement: Placement?
        /// [EC2-VPC] An available IP address from the IP address range of the subnet.
        public let privateIpAddress: String?
        /// [EC2-VPC] The ID of the subnet in which to launch the instance.
        public let subnetId: String?
        /// The Base64-encoded user data to make available to the instance.
        public let userData: UserData?

        public init(additionalInfo: String? = nil, architecture: ArchitectureValues? = nil, groupIds: [String]? = nil, groupNames: [String]? = nil, instanceInitiatedShutdownBehavior: ShutdownBehavior? = nil, instanceType: InstanceType? = nil, monitoring: Bool? = nil, placement: Placement? = nil, privateIpAddress: String? = nil, subnetId: String? = nil, userData: UserData? = nil) {
            self.additionalInfo = additionalInfo
            self.architecture = architecture
            self.groupIds = groupIds
            self.groupNames = groupNames
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.instanceType = instanceType
            self.monitoring = monitoring
            self.placement = placement
            self.privateIpAddress = privateIpAddress
            self.subnetId = subnetId
            self.userData = userData
        }

        private enum CodingKeys: String, CodingKey {
            case additionalInfo = "additionalInfo"
            case architecture = "architecture"
            case groupIds = "GroupId"
            case groupNames = "GroupName"
            case instanceInitiatedShutdownBehavior = "instanceInitiatedShutdownBehavior"
            case instanceType = "instanceType"
            case monitoring = "monitoring"
            case placement = "placement"
            case privateIpAddress = "privateIpAddress"
            case subnetId = "subnetId"
            case userData = "userData"
        }
    }

    public struct ImportInstanceRequest: AWSEncodableShape {
        /// A description for the instance being imported.
        public let description: String?
        /// The disk image.
        @OptionalCustomCoding<EC2StandardArrayCoder<DiskImage>>
        public var diskImages: [DiskImage]?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The launch specification.
        public let launchSpecification: ImportInstanceLaunchSpecification?
        /// The instance operating system.
        public let platform: PlatformValues?

        public init(description: String? = nil, diskImages: [DiskImage]? = nil, dryRun: Bool? = nil, launchSpecification: ImportInstanceLaunchSpecification? = nil, platform: PlatformValues? = nil) {
            self.description = description
            self.diskImages = diskImages
            self.dryRun = dryRun
            self.launchSpecification = launchSpecification
            self.platform = platform
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case diskImages = "diskImage"
            case dryRun = "dryRun"
            case launchSpecification = "launchSpecification"
            case platform = "platform"
        }
    }

    public struct ImportInstanceResult: AWSDecodableShape {
        /// Information about the conversion task.
        public let conversionTask: ConversionTask?

        public init(conversionTask: ConversionTask? = nil) {
            self.conversionTask = conversionTask
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTask = "conversionTask"
        }
    }

    public struct ImportInstanceTaskDetails: AWSDecodableShape {
        public struct _VolumesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description of the task.
        public let description: String?
        /// The ID of the instance.
        public let instanceId: String?
        /// The instance operating system.
        public let platform: PlatformValues?
        /// The volumes.
        @OptionalCustomCoding<EC2ArrayCoder<_VolumesEncoding, ImportInstanceVolumeDetailItem>>
        public var volumes: [ImportInstanceVolumeDetailItem]?

        public init(description: String? = nil, instanceId: String? = nil, platform: PlatformValues? = nil, volumes: [ImportInstanceVolumeDetailItem]? = nil) {
            self.description = description
            self.instanceId = instanceId
            self.platform = platform
            self.volumes = volumes
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case instanceId = "instanceId"
            case platform = "platform"
            case volumes = "volumes"
        }
    }

    public struct ImportInstanceVolumeDetailItem: AWSDecodableShape {
        /// The Availability Zone where the resulting instance will reside.
        public let availabilityZone: String?
        /// The number of bytes converted so far.
        public let bytesConverted: Int64?
        /// A description of the task.
        public let description: String?
        /// The image.
        public let image: DiskImageDescription?
        /// The status of the import of this particular disk image.
        public let status: String?
        /// The status information or errors related to the disk image.
        public let statusMessage: String?
        /// The volume.
        public let volume: DiskImageVolumeDescription?

        public init(availabilityZone: String? = nil, bytesConverted: Int64? = nil, description: String? = nil, image: DiskImageDescription? = nil, status: String? = nil, statusMessage: String? = nil, volume: DiskImageVolumeDescription? = nil) {
            self.availabilityZone = availabilityZone
            self.bytesConverted = bytesConverted
            self.description = description
            self.image = image
            self.status = status
            self.statusMessage = statusMessage
            self.volume = volume
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case bytesConverted = "bytesConverted"
            case description = "description"
            case image = "image"
            case status = "status"
            case statusMessage = "statusMessage"
            case volume = "volume"
        }
    }

    public struct ImportKeyPairRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A unique name for the key pair.
        public let keyName: String?
        /// The public key. For API calls, the text must be base64-encoded. For command line tools, base64 encoding is performed for you.
        public let publicKeyMaterial: AWSBase64Data?
        /// The tags to apply to the imported key pair.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(dryRun: Bool? = nil, keyName: String? = nil, publicKeyMaterial: AWSBase64Data? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.dryRun = dryRun
            self.keyName = keyName
            self.publicKeyMaterial = publicKeyMaterial
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case keyName = "keyName"
            case publicKeyMaterial = "publicKeyMaterial"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct ImportKeyPairResult: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        ///   For RSA key pairs, the key fingerprint is the MD5 public key fingerprint as specified in section 4 of RFC 4716.   For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with OpenSSH 6.8.
        public let keyFingerprint: String?
        /// The key pair name that you provided.
        public let keyName: String?
        /// The ID of the resulting key pair.
        public let keyPairId: String?
        /// The tags applied to the imported key pair.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(keyFingerprint: String? = nil, keyName: String? = nil, keyPairId: String? = nil, tags: [Tag]? = nil) {
            self.keyFingerprint = keyFingerprint
            self.keyName = keyName
            self.keyPairId = keyPairId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case keyFingerprint = "keyFingerprint"
            case keyName = "keyName"
            case keyPairId = "keyPairId"
            case tags = "tagSet"
        }
    }

    public struct ImportSnapshotRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The client-specific data.
        public let clientData: ClientData?
        /// Token to enable idempotency for VM import requests.
        public let clientToken: String?
        /// The description string for the import snapshot task.
        public let description: String?
        /// Information about the disk container.
        public let diskContainer: SnapshotDiskContainer?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specifies whether the destination snapshot of the imported image should be encrypted. The default KMS key for EBS is used unless you specify a non-default KMS key using KmsKeyId. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
        public let encrypted: Bool?
        /// An identifier for the symmetric KMS key to use when creating the encrypted snapshot. This parameter is only required if you want to use a non-default KMS key; if this parameter is not specified, the default KMS key for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.  The KMS key identifier may be provided in any of the following formats:    Key ID   Key alias   ARN using key ID. The ID ARN contains the arn:aws:kms namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the key namespace, and then the key ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.   ARN using key alias. The alias ARN contains the arn:aws:kms namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the alias namespace, and then the key alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.    Amazon Web Services parses KmsKeyId asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure.  The specified KMS key must exist in the Region that the snapshot is being copied to. Amazon EBS does not support asymmetric KMS keys.
        public let kmsKeyId: String?
        /// The name of the role to use when not using the default role, 'vmimport'.
        public let roleName: String?
        /// The tags to apply to the import snapshot task during creation.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientData: ClientData? = nil, clientToken: String? = nil, description: String? = nil, diskContainer: SnapshotDiskContainer? = nil, dryRun: Bool? = nil, encrypted: Bool? = nil, kmsKeyId: String? = nil, roleName: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientData = clientData
            self.clientToken = clientToken
            self.description = description
            self.diskContainer = diskContainer
            self.dryRun = dryRun
            self.encrypted = encrypted
            self.kmsKeyId = kmsKeyId
            self.roleName = roleName
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientData = "ClientData"
            case clientToken = "ClientToken"
            case description = "Description"
            case diskContainer = "DiskContainer"
            case dryRun = "DryRun"
            case encrypted = "Encrypted"
            case kmsKeyId = "KmsKeyId"
            case roleName = "RoleName"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct ImportSnapshotResult: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description of the import snapshot task.
        public let description: String?
        /// The ID of the import snapshot task.
        public let importTaskId: String?
        /// Information about the import snapshot task.
        public let snapshotTaskDetail: SnapshotTaskDetail?
        /// Any tags assigned to the import snapshot task.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(description: String? = nil, importTaskId: String? = nil, snapshotTaskDetail: SnapshotTaskDetail? = nil, tags: [Tag]? = nil) {
            self.description = description
            self.importTaskId = importTaskId
            self.snapshotTaskDetail = snapshotTaskDetail
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case importTaskId = "importTaskId"
            case snapshotTaskDetail = "snapshotTaskDetail"
            case tags = "tagSet"
        }
    }

    public struct ImportSnapshotTask: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description of the import snapshot task.
        public let description: String?
        /// The ID of the import snapshot task.
        public let importTaskId: String?
        /// Describes an import snapshot task.
        public let snapshotTaskDetail: SnapshotTaskDetail?
        /// The tags for the import snapshot task.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(description: String? = nil, importTaskId: String? = nil, snapshotTaskDetail: SnapshotTaskDetail? = nil, tags: [Tag]? = nil) {
            self.description = description
            self.importTaskId = importTaskId
            self.snapshotTaskDetail = snapshotTaskDetail
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case importTaskId = "importTaskId"
            case snapshotTaskDetail = "snapshotTaskDetail"
            case tags = "tagSet"
        }
    }

    public struct ImportVolumeRequest: AWSEncodableShape {
        /// The Availability Zone for the resulting EBS volume.
        public let availabilityZone: String?
        /// A description of the volume.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The disk image.
        public let image: DiskImageDetail?
        /// The volume size.
        public let volume: VolumeDetail?

        public init(availabilityZone: String? = nil, description: String? = nil, dryRun: Bool? = nil, image: DiskImageDetail? = nil, volume: VolumeDetail? = nil) {
            self.availabilityZone = availabilityZone
            self.description = description
            self.dryRun = dryRun
            self.image = image
            self.volume = volume
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case description = "description"
            case dryRun = "dryRun"
            case image = "image"
            case volume = "volume"
        }
    }

    public struct ImportVolumeResult: AWSDecodableShape {
        /// Information about the conversion task.
        public let conversionTask: ConversionTask?

        public init(conversionTask: ConversionTask? = nil) {
            self.conversionTask = conversionTask
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTask = "conversionTask"
        }
    }

    public struct ImportVolumeTaskDetails: AWSDecodableShape {
        /// The Availability Zone where the resulting volume will reside.
        public let availabilityZone: String?
        /// The number of bytes converted so far.
        public let bytesConverted: Int64?
        /// The description you provided when starting the import volume task.
        public let description: String?
        /// The image.
        public let image: DiskImageDescription?
        /// The volume.
        public let volume: DiskImageVolumeDescription?

        public init(availabilityZone: String? = nil, bytesConverted: Int64? = nil, description: String? = nil, image: DiskImageDescription? = nil, volume: DiskImageVolumeDescription? = nil) {
            self.availabilityZone = availabilityZone
            self.bytesConverted = bytesConverted
            self.description = description
            self.image = image
            self.volume = volume
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case bytesConverted = "bytesConverted"
            case description = "description"
            case image = "image"
            case volume = "volume"
        }
    }

    public struct InferenceAcceleratorInfo: AWSDecodableShape {
        /// Describes the Inference accelerators for the instance type.
        @OptionalCustomCoding<EC2StandardArrayCoder<InferenceDeviceInfo>>
        public var accelerators: [InferenceDeviceInfo]?
        /// The total size of the memory for the inference accelerators for the instance type, in MiB.
        public let totalInferenceMemoryInMiB: Int?

        public init(accelerators: [InferenceDeviceInfo]? = nil, totalInferenceMemoryInMiB: Int? = nil) {
            self.accelerators = accelerators
            self.totalInferenceMemoryInMiB = totalInferenceMemoryInMiB
        }

        private enum CodingKeys: String, CodingKey {
            case accelerators = "accelerators"
            case totalInferenceMemoryInMiB = "totalInferenceMemoryInMiB"
        }
    }

    public struct InferenceDeviceInfo: AWSDecodableShape {
        /// The number of Inference accelerators for the instance type.
        public let count: Int?
        /// The manufacturer of the Inference accelerator.
        public let manufacturer: String?
        /// Describes the memory available to the inference accelerator.
        public let memoryInfo: InferenceDeviceMemoryInfo?
        /// The name of the Inference accelerator.
        public let name: String?

        public init(count: Int? = nil, manufacturer: String? = nil, memoryInfo: InferenceDeviceMemoryInfo? = nil, name: String? = nil) {
            self.count = count
            self.manufacturer = manufacturer
            self.memoryInfo = memoryInfo
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case count = "count"
            case manufacturer = "manufacturer"
            case memoryInfo = "memoryInfo"
            case name = "name"
        }
    }

    public struct InferenceDeviceMemoryInfo: AWSDecodableShape {
        /// The size of the memory available to the inference accelerator, in MiB.
        public let sizeInMiB: Int?

        public init(sizeInMiB: Int? = nil) {
            self.sizeInMiB = sizeInMiB
        }

        private enum CodingKeys: String, CodingKey {
            case sizeInMiB = "sizeInMiB"
        }
    }

    public struct Instance: AWSDecodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ElasticGpuAssociationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ElasticInferenceAcceleratorAssociationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _LicensesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _NetworkInterfacesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ProductCodesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The AMI launch index, which can be used to find this instance in the launch group.
        public let amiLaunchIndex: Int?
        /// The architecture of the image.
        public let architecture: ArchitectureValues?
        /// Any block device mapping entries for the instance.
        @OptionalCustomCoding<EC2ArrayCoder<_BlockDeviceMappingsEncoding, InstanceBlockDeviceMapping>>
        public var blockDeviceMappings: [InstanceBlockDeviceMapping]?
        /// The boot mode that was specified by the AMI. If the value is uefi-preferred,  the AMI supports both UEFI and Legacy BIOS. The currentInstanceBootMode parameter  is the boot mode that is used to boot the instance at launch or start.  The operating system contained in the AMI must be configured to support the specified boot mode.  For more information, see Boot modes in the Amazon EC2 User Guide.
        public let bootMode: BootModeValues?
        /// The ID of the Capacity Reservation.
        public let capacityReservationId: String?
        /// Information about the Capacity Reservation targeting option.
        public let capacityReservationSpecification: CapacityReservationSpecificationResponse?
        /// The idempotency token you provided when you launched the instance, if applicable.
        public let clientToken: String?
        /// The CPU options for the instance.
        public let cpuOptions: CpuOptions?
        /// The boot mode that is used to boot the instance at launch or start. For more information, see Boot modes in the Amazon EC2 User Guide.
        public let currentInstanceBootMode: InstanceBootModeValues?
        /// Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.
        public let ebsOptimized: Bool?
        /// Deprecated.  Amazon Elastic Graphics reached end of life on January 8, 2024. For  workloads that require graphics acceleration, we recommend that you use Amazon EC2 G4ad,  G4dn, or G5 instances.
        @OptionalCustomCoding<EC2ArrayCoder<_ElasticGpuAssociationsEncoding, ElasticGpuAssociation>>
        public var elasticGpuAssociations: [ElasticGpuAssociation]?
        /// The elastic inference accelerator associated with the instance.
        @OptionalCustomCoding<EC2ArrayCoder<_ElasticInferenceAcceleratorAssociationsEncoding, ElasticInferenceAcceleratorAssociation>>
        public var elasticInferenceAcceleratorAssociations: [ElasticInferenceAcceleratorAssociation]?
        /// Specifies whether enhanced networking with ENA is enabled.
        public let enaSupport: Bool?
        /// Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves.
        public let enclaveOptions: EnclaveOptions?
        /// Indicates whether the instance is enabled for hibernation.
        public let hibernationOptions: HibernationOptions?
        /// The hypervisor type of the instance. The value xen is used for both Xen and Nitro hypervisors.
        public let hypervisor: HypervisorType?
        /// The IAM instance profile associated with the instance, if applicable.
        public let iamInstanceProfile: IamInstanceProfile?
        /// The ID of the AMI used to launch the instance.
        public let imageId: String?
        /// The ID of the instance.
        public let instanceId: String?
        /// Indicates whether this is a Spot Instance or a Scheduled Instance.
        public let instanceLifecycle: InstanceLifecycleType?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The IPv6 address assigned to the instance.
        public let ipv6Address: String?
        /// The kernel associated with this instance, if applicable.
        public let kernelId: String?
        /// The name of the key pair, if this instance was launched with an associated key pair.
        public let keyName: String?
        /// The time the instance was launched.
        public let launchTime: Date?
        /// The license configurations for the instance.
        @OptionalCustomCoding<EC2ArrayCoder<_LicensesEncoding, LicenseConfiguration>>
        public var licenses: [LicenseConfiguration]?
        /// Provides information on the recovery and maintenance options of your instance.
        public let maintenanceOptions: InstanceMaintenanceOptions?
        /// The metadata options for the instance.
        public let metadataOptions: InstanceMetadataOptionsResponse?
        /// The monitoring for the instance.
        public let monitoring: Monitoring?
        /// The network interfaces for the instance.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInterfacesEncoding, InstanceNetworkInterface>>
        public var networkInterfaces: [InstanceNetworkInterface]?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// The location where the instance launched, if applicable.
        public let placement: Placement?
        /// The platform. This value is windows for Windows instances; otherwise, it is empty.
        public let platform: PlatformValues?
        /// The platform details value for the instance. For more information, see AMI billing information fields in the Amazon EC2 User Guide.
        public let platformDetails: String?
        /// [IPv4 only] The private DNS hostname name assigned to the instance. This DNS hostname can only be used inside the Amazon EC2 network. This name is not available until the instance enters the running state.  The Amazon-provided DNS server resolves Amazon-provided private DNS hostnames if you've enabled DNS resolution and DNS hostnames in your VPC. If you are not using the Amazon-provided DNS server in your VPC, your custom domain name servers must resolve the hostname as appropriate.
        public let privateDnsName: String?
        /// The options for the instance hostname.
        public let privateDnsNameOptions: PrivateDnsNameOptionsResponse?
        /// The private IPv4 address assigned to the instance.
        public let privateIpAddress: String?
        /// The product codes attached to this instance, if applicable.
        @OptionalCustomCoding<EC2ArrayCoder<_ProductCodesEncoding, ProductCode>>
        public var productCodes: [ProductCode]?
        /// [IPv4 only] The public DNS name assigned to the instance. This name is not available until the instance enters the running state. This name is only available if you've enabled DNS hostnames for your VPC.
        public let publicDnsName: String?
        /// The public IPv4 address, or the Carrier IP address assigned to the instance, if applicable. A Carrier IP address only applies to an instance launched in a subnet associated with a Wavelength Zone.
        public let publicIpAddress: String?
        /// The RAM disk associated with this instance, if applicable.
        public let ramdiskId: String?
        /// The device name of the root device volume (for example, /dev/sda1).
        public let rootDeviceName: String?
        /// The root device type used by the AMI. The AMI can use an EBS volume or an instance store volume.
        public let rootDeviceType: DeviceType?
        /// The security groups for the instance.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupsEncoding, GroupIdentifier>>
        public var securityGroups: [GroupIdentifier]?
        /// Indicates whether source/destination checking is enabled.
        public let sourceDestCheck: Bool?
        /// If the request is a Spot Instance request, the ID of the request.
        public let spotInstanceRequestId: String?
        /// Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
        public let sriovNetSupport: String?
        /// The current state of the instance.
        public let state: InstanceState?
        /// The reason for the most recent state transition.
        public let stateReason: StateReason?
        /// The reason for the most recent state transition. This might be an empty string.
        public let stateTransitionReason: String?
        /// The ID of the subnet in which the instance is running.
        public let subnetId: String?
        /// Any tags assigned to the instance.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// If the instance is configured for NitroTPM support, the value is v2.0. For more information, see NitroTPM in the Amazon EC2 User Guide.
        public let tpmSupport: String?
        /// The usage operation value for the instance. For more information, see AMI billing information fields in the Amazon EC2 User Guide.
        public let usageOperation: String?
        /// The time that the usage operation was last updated.
        public let usageOperationUpdateTime: Date?
        /// The virtualization type of the instance.
        public let virtualizationType: VirtualizationType?
        /// The ID of the VPC in which the instance is running.
        public let vpcId: String?

        public init(amiLaunchIndex: Int? = nil, architecture: ArchitectureValues? = nil, blockDeviceMappings: [InstanceBlockDeviceMapping]? = nil, bootMode: BootModeValues? = nil, capacityReservationId: String? = nil, capacityReservationSpecification: CapacityReservationSpecificationResponse? = nil, clientToken: String? = nil, cpuOptions: CpuOptions? = nil, currentInstanceBootMode: InstanceBootModeValues? = nil, ebsOptimized: Bool? = nil, elasticGpuAssociations: [ElasticGpuAssociation]? = nil, elasticInferenceAcceleratorAssociations: [ElasticInferenceAcceleratorAssociation]? = nil, enaSupport: Bool? = nil, enclaveOptions: EnclaveOptions? = nil, hibernationOptions: HibernationOptions? = nil, hypervisor: HypervisorType? = nil, iamInstanceProfile: IamInstanceProfile? = nil, imageId: String? = nil, instanceId: String? = nil, instanceLifecycle: InstanceLifecycleType? = nil, instanceType: InstanceType? = nil, ipv6Address: String? = nil, kernelId: String? = nil, keyName: String? = nil, launchTime: Date? = nil, licenses: [LicenseConfiguration]? = nil, maintenanceOptions: InstanceMaintenanceOptions? = nil, metadataOptions: InstanceMetadataOptionsResponse? = nil, monitoring: Monitoring? = nil, networkInterfaces: [InstanceNetworkInterface]? = nil, outpostArn: String? = nil, placement: Placement? = nil, platform: PlatformValues? = nil, platformDetails: String? = nil, privateDnsName: String? = nil, privateDnsNameOptions: PrivateDnsNameOptionsResponse? = nil, privateIpAddress: String? = nil, productCodes: [ProductCode]? = nil, publicDnsName: String? = nil, publicIpAddress: String? = nil, ramdiskId: String? = nil, rootDeviceName: String? = nil, rootDeviceType: DeviceType? = nil, securityGroups: [GroupIdentifier]? = nil, sourceDestCheck: Bool? = nil, spotInstanceRequestId: String? = nil, sriovNetSupport: String? = nil, state: InstanceState? = nil, stateReason: StateReason? = nil, stateTransitionReason: String? = nil, subnetId: String? = nil, tags: [Tag]? = nil, tpmSupport: String? = nil, usageOperation: String? = nil, usageOperationUpdateTime: Date? = nil, virtualizationType: VirtualizationType? = nil, vpcId: String? = nil) {
            self.amiLaunchIndex = amiLaunchIndex
            self.architecture = architecture
            self.blockDeviceMappings = blockDeviceMappings
            self.bootMode = bootMode
            self.capacityReservationId = capacityReservationId
            self.capacityReservationSpecification = capacityReservationSpecification
            self.clientToken = clientToken
            self.cpuOptions = cpuOptions
            self.currentInstanceBootMode = currentInstanceBootMode
            self.ebsOptimized = ebsOptimized
            self.elasticGpuAssociations = elasticGpuAssociations
            self.elasticInferenceAcceleratorAssociations = elasticInferenceAcceleratorAssociations
            self.enaSupport = enaSupport
            self.enclaveOptions = enclaveOptions
            self.hibernationOptions = hibernationOptions
            self.hypervisor = hypervisor
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceId = instanceId
            self.instanceLifecycle = instanceLifecycle
            self.instanceType = instanceType
            self.ipv6Address = ipv6Address
            self.kernelId = kernelId
            self.keyName = keyName
            self.launchTime = launchTime
            self.licenses = licenses
            self.maintenanceOptions = maintenanceOptions
            self.metadataOptions = metadataOptions
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.outpostArn = outpostArn
            self.placement = placement
            self.platform = platform
            self.platformDetails = platformDetails
            self.privateDnsName = privateDnsName
            self.privateDnsNameOptions = privateDnsNameOptions
            self.privateIpAddress = privateIpAddress
            self.productCodes = productCodes
            self.publicDnsName = publicDnsName
            self.publicIpAddress = publicIpAddress
            self.ramdiskId = ramdiskId
            self.rootDeviceName = rootDeviceName
            self.rootDeviceType = rootDeviceType
            self.securityGroups = securityGroups
            self.sourceDestCheck = sourceDestCheck
            self.spotInstanceRequestId = spotInstanceRequestId
            self.sriovNetSupport = sriovNetSupport
            self.state = state
            self.stateReason = stateReason
            self.stateTransitionReason = stateTransitionReason
            self.subnetId = subnetId
            self.tags = tags
            self.tpmSupport = tpmSupport
            self.usageOperation = usageOperation
            self.usageOperationUpdateTime = usageOperationUpdateTime
            self.virtualizationType = virtualizationType
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case amiLaunchIndex = "amiLaunchIndex"
            case architecture = "architecture"
            case blockDeviceMappings = "blockDeviceMapping"
            case bootMode = "bootMode"
            case capacityReservationId = "capacityReservationId"
            case capacityReservationSpecification = "capacityReservationSpecification"
            case clientToken = "clientToken"
            case cpuOptions = "cpuOptions"
            case currentInstanceBootMode = "currentInstanceBootMode"
            case ebsOptimized = "ebsOptimized"
            case elasticGpuAssociations = "elasticGpuAssociationSet"
            case elasticInferenceAcceleratorAssociations = "elasticInferenceAcceleratorAssociationSet"
            case enaSupport = "enaSupport"
            case enclaveOptions = "enclaveOptions"
            case hibernationOptions = "hibernationOptions"
            case hypervisor = "hypervisor"
            case iamInstanceProfile = "iamInstanceProfile"
            case imageId = "imageId"
            case instanceId = "instanceId"
            case instanceLifecycle = "instanceLifecycle"
            case instanceType = "instanceType"
            case ipv6Address = "ipv6Address"
            case kernelId = "kernelId"
            case keyName = "keyName"
            case launchTime = "launchTime"
            case licenses = "licenseSet"
            case maintenanceOptions = "maintenanceOptions"
            case metadataOptions = "metadataOptions"
            case monitoring = "monitoring"
            case networkInterfaces = "networkInterfaceSet"
            case outpostArn = "outpostArn"
            case placement = "placement"
            case platform = "platform"
            case platformDetails = "platformDetails"
            case privateDnsName = "privateDnsName"
            case privateDnsNameOptions = "privateDnsNameOptions"
            case privateIpAddress = "privateIpAddress"
            case productCodes = "productCodes"
            case publicDnsName = "dnsName"
            case publicIpAddress = "ipAddress"
            case ramdiskId = "ramdiskId"
            case rootDeviceName = "rootDeviceName"
            case rootDeviceType = "rootDeviceType"
            case securityGroups = "groupSet"
            case sourceDestCheck = "sourceDestCheck"
            case spotInstanceRequestId = "spotInstanceRequestId"
            case sriovNetSupport = "sriovNetSupport"
            case state = "instanceState"
            case stateReason = "stateReason"
            case stateTransitionReason = "reason"
            case subnetId = "subnetId"
            case tags = "tagSet"
            case tpmSupport = "tpmSupport"
            case usageOperation = "usageOperation"
            case usageOperationUpdateTime = "usageOperationUpdateTime"
            case virtualizationType = "virtualizationType"
            case vpcId = "vpcId"
        }
    }

    public struct InstanceAttachmentEnaSrdSpecification: AWSDecodableShape {
        /// Indicates whether ENA Express is enabled for the network interface.
        public let enaSrdEnabled: Bool?
        /// Configures ENA Express for UDP network traffic.
        public let enaSrdUdpSpecification: InstanceAttachmentEnaSrdUdpSpecification?

        public init(enaSrdEnabled: Bool? = nil, enaSrdUdpSpecification: InstanceAttachmentEnaSrdUdpSpecification? = nil) {
            self.enaSrdEnabled = enaSrdEnabled
            self.enaSrdUdpSpecification = enaSrdUdpSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case enaSrdEnabled = "enaSrdEnabled"
            case enaSrdUdpSpecification = "enaSrdUdpSpecification"
        }
    }

    public struct InstanceAttachmentEnaSrdUdpSpecification: AWSDecodableShape {
        /// Indicates whether UDP traffic to and from the instance uses ENA Express. To specify this setting,
        /// 			you must first enable ENA Express.
        public let enaSrdUdpEnabled: Bool?

        public init(enaSrdUdpEnabled: Bool? = nil) {
            self.enaSrdUdpEnabled = enaSrdUdpEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case enaSrdUdpEnabled = "enaSrdUdpEnabled"
        }
    }

    public struct InstanceAttribute: AWSDecodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ProductCodesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The block device mapping of the instance.
        @OptionalCustomCoding<EC2ArrayCoder<_BlockDeviceMappingsEncoding, InstanceBlockDeviceMapping>>
        public var blockDeviceMappings: [InstanceBlockDeviceMapping]?
        /// To enable the instance for Amazon Web Services Stop Protection, set this parameter to true; otherwise, set it to false.
        public let disableApiStop: AttributeBooleanValue?
        /// If the value is true, you can't terminate the instance through the Amazon EC2 console, CLI, or API; otherwise, you can.
        public let disableApiTermination: AttributeBooleanValue?
        /// Indicates whether the instance is optimized for Amazon EBS I/O.
        public let ebsOptimized: AttributeBooleanValue?
        /// Indicates whether enhanced networking with ENA is enabled.
        public let enaSupport: AttributeBooleanValue?
        /// To enable the instance for Amazon Web Services Nitro Enclaves, set this parameter to true; otherwise, set it to false.
        public let enclaveOptions: EnclaveOptions?
        /// The security groups associated with the instance.
        @OptionalCustomCoding<EC2ArrayCoder<_GroupsEncoding, GroupIdentifier>>
        public var groups: [GroupIdentifier]?
        /// The ID of the instance.
        public let instanceId: String?
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
        public let instanceInitiatedShutdownBehavior: AttributeValue?
        /// The instance type.
        public let instanceType: AttributeValue?
        /// The kernel ID.
        public let kernelId: AttributeValue?
        /// A list of product codes.
        @OptionalCustomCoding<EC2ArrayCoder<_ProductCodesEncoding, ProductCode>>
        public var productCodes: [ProductCode]?
        /// The RAM disk ID.
        public let ramdiskId: AttributeValue?
        /// The device name of the root device volume (for example, /dev/sda1).
        public let rootDeviceName: AttributeValue?
        /// Enable or disable source/destination checks, which ensure that the instance is either the source or the destination of any traffic that it receives. If the value is true, source/destination checks are enabled; otherwise, they are disabled. The default value is true. You must disable source/destination checks if the instance runs services such as network address translation, routing, or firewalls.
        public let sourceDestCheck: AttributeBooleanValue?
        /// Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
        public let sriovNetSupport: AttributeValue?
        /// The user data.
        public let userData: AttributeValue?

        public init(blockDeviceMappings: [InstanceBlockDeviceMapping]? = nil, disableApiStop: AttributeBooleanValue? = nil, disableApiTermination: AttributeBooleanValue? = nil, ebsOptimized: AttributeBooleanValue? = nil, enaSupport: AttributeBooleanValue? = nil, enclaveOptions: EnclaveOptions? = nil, groups: [GroupIdentifier]? = nil, instanceId: String? = nil, instanceInitiatedShutdownBehavior: AttributeValue? = nil, instanceType: AttributeValue? = nil, kernelId: AttributeValue? = nil, productCodes: [ProductCode]? = nil, ramdiskId: AttributeValue? = nil, rootDeviceName: AttributeValue? = nil, sourceDestCheck: AttributeBooleanValue? = nil, sriovNetSupport: AttributeValue? = nil, userData: AttributeValue? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.disableApiStop = disableApiStop
            self.disableApiTermination = disableApiTermination
            self.ebsOptimized = ebsOptimized
            self.enaSupport = enaSupport
            self.enclaveOptions = enclaveOptions
            self.groups = groups
            self.instanceId = instanceId
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.productCodes = productCodes
            self.ramdiskId = ramdiskId
            self.rootDeviceName = rootDeviceName
            self.sourceDestCheck = sourceDestCheck
            self.sriovNetSupport = sriovNetSupport
            self.userData = userData
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "blockDeviceMapping"
            case disableApiStop = "disableApiStop"
            case disableApiTermination = "disableApiTermination"
            case ebsOptimized = "ebsOptimized"
            case enaSupport = "enaSupport"
            case enclaveOptions = "enclaveOptions"
            case groups = "groupSet"
            case instanceId = "instanceId"
            case instanceInitiatedShutdownBehavior = "instanceInitiatedShutdownBehavior"
            case instanceType = "instanceType"
            case kernelId = "kernel"
            case productCodes = "productCodes"
            case ramdiskId = "ramdisk"
            case rootDeviceName = "rootDeviceName"
            case sourceDestCheck = "sourceDestCheck"
            case sriovNetSupport = "sriovNetSupport"
            case userData = "userData"
        }
    }

    public struct InstanceBlockDeviceMapping: AWSDecodableShape {
        /// The device name (for example, /dev/sdh or xvdh).
        public let deviceName: String?
        /// Parameters used to automatically set up EBS volumes when the instance is launched.
        public let ebs: EbsInstanceBlockDevice?

        public init(deviceName: String? = nil, ebs: EbsInstanceBlockDevice? = nil) {
            self.deviceName = deviceName
            self.ebs = ebs
        }

        private enum CodingKeys: String, CodingKey {
            case deviceName = "deviceName"
            case ebs = "ebs"
        }
    }

    public struct InstanceBlockDeviceMappingSpecification: AWSEncodableShape {
        /// The device name (for example, /dev/sdh or xvdh).
        public let deviceName: String?
        /// Parameters used to automatically set up EBS volumes when the instance is launched.
        public let ebs: EbsInstanceBlockDeviceSpecification?
        /// suppress the specified device included in the block device mapping.
        public let noDevice: String?
        /// The virtual device name.
        public let virtualName: String?

        public init(deviceName: String? = nil, ebs: EbsInstanceBlockDeviceSpecification? = nil, noDevice: String? = nil, virtualName: String? = nil) {
            self.deviceName = deviceName
            self.ebs = ebs
            self.noDevice = noDevice
            self.virtualName = virtualName
        }

        private enum CodingKeys: String, CodingKey {
            case deviceName = "deviceName"
            case ebs = "ebs"
            case noDevice = "noDevice"
            case virtualName = "virtualName"
        }
    }

    public struct InstanceCapacity: AWSDecodableShape {
        /// The number of instances that can be launched onto the Dedicated Host based on the host's available capacity.
        public let availableCapacity: Int?
        /// The instance type supported by the Dedicated Host.
        public let instanceType: String?
        /// The total number of instances that can be launched onto the Dedicated Host if there are no instances running on it.
        public let totalCapacity: Int?

        public init(availableCapacity: Int? = nil, instanceType: String? = nil, totalCapacity: Int? = nil) {
            self.availableCapacity = availableCapacity
            self.instanceType = instanceType
            self.totalCapacity = totalCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case availableCapacity = "availableCapacity"
            case instanceType = "instanceType"
            case totalCapacity = "totalCapacity"
        }
    }

    public struct InstanceCount: AWSDecodableShape {
        /// The number of listed Reserved Instances in the state specified by the state.
        public let instanceCount: Int?
        /// The states of the listed Reserved Instances.
        public let state: ListingState?

        public init(instanceCount: Int? = nil, state: ListingState? = nil) {
            self.instanceCount = instanceCount
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case instanceCount = "instanceCount"
            case state = "state"
        }
    }

    public struct InstanceCreditSpecification: AWSDecodableShape {
        /// The credit option for CPU usage of the instance. Valid values: standard | unlimited
        public let cpuCredits: String?
        /// The ID of the instance.
        public let instanceId: String?

        public init(cpuCredits: String? = nil, instanceId: String? = nil) {
            self.cpuCredits = cpuCredits
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case cpuCredits = "cpuCredits"
            case instanceId = "instanceId"
        }
    }

    public struct InstanceCreditSpecificationRequest: AWSEncodableShape {
        /// The credit option for CPU usage of the instance. Valid values: standard | unlimited  T3 instances with host tenancy do not support the unlimited CPU credit option.
        public let cpuCredits: String?
        /// The ID of the instance.
        public let instanceId: String?

        public init(cpuCredits: String? = nil, instanceId: String? = nil) {
            self.cpuCredits = cpuCredits
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case cpuCredits = "CpuCredits"
            case instanceId = "InstanceId"
        }
    }

    public struct InstanceEventWindow: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TimeRangesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// One or more targets associated with the event window.
        public let associationTarget: InstanceEventWindowAssociationTarget?
        /// The cron expression defined for the event window.
        public let cronExpression: String?
        /// The ID of the event window.
        public let instanceEventWindowId: String?
        /// The name of the event window.
        public let name: String?
        /// The current state of the event window.
        public let state: InstanceEventWindowState?
        /// The instance tags associated with the event window.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// One or more time ranges defined for the event window.
        @OptionalCustomCoding<EC2ArrayCoder<_TimeRangesEncoding, InstanceEventWindowTimeRange>>
        public var timeRanges: [InstanceEventWindowTimeRange]?

        public init(associationTarget: InstanceEventWindowAssociationTarget? = nil, cronExpression: String? = nil, instanceEventWindowId: String? = nil, name: String? = nil, state: InstanceEventWindowState? = nil, tags: [Tag]? = nil, timeRanges: [InstanceEventWindowTimeRange]? = nil) {
            self.associationTarget = associationTarget
            self.cronExpression = cronExpression
            self.instanceEventWindowId = instanceEventWindowId
            self.name = name
            self.state = state
            self.tags = tags
            self.timeRanges = timeRanges
        }

        private enum CodingKeys: String, CodingKey {
            case associationTarget = "associationTarget"
            case cronExpression = "cronExpression"
            case instanceEventWindowId = "instanceEventWindowId"
            case name = "name"
            case state = "state"
            case tags = "tagSet"
            case timeRanges = "timeRangeSet"
        }
    }

    public struct InstanceEventWindowAssociationRequest: AWSEncodableShape {
        public struct _DedicatedHostIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _InstanceTagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the Dedicated Hosts to associate with the event window.
        @OptionalCustomCoding<EC2ArrayCoder<_DedicatedHostIdsEncoding, String>>
        public var dedicatedHostIds: [String]?
        /// The IDs of the instances to associate with the event window. If the instance is on a Dedicated Host, you can't specify the Instance ID parameter; you must use the Dedicated Host ID parameter.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]?
        /// The instance tags to associate with the event window. Any instances associated with the tags will be associated with the event window.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceTagsEncoding, Tag>>
        public var instanceTags: [Tag]?

        public init(dedicatedHostIds: [String]? = nil, instanceIds: [String]? = nil, instanceTags: [Tag]? = nil) {
            self.dedicatedHostIds = dedicatedHostIds
            self.instanceIds = instanceIds
            self.instanceTags = instanceTags
        }

        private enum CodingKeys: String, CodingKey {
            case dedicatedHostIds = "DedicatedHostId"
            case instanceIds = "InstanceId"
            case instanceTags = "InstanceTag"
        }
    }

    public struct InstanceEventWindowAssociationTarget: AWSDecodableShape {
        public struct _DedicatedHostIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the Dedicated Hosts associated with the event window.
        @OptionalCustomCoding<EC2ArrayCoder<_DedicatedHostIdsEncoding, String>>
        public var dedicatedHostIds: [String]?
        /// The IDs of the instances associated with the event window.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]?
        /// The instance tags associated with the event window. Any instances associated with the tags will be associated with the event window.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(dedicatedHostIds: [String]? = nil, instanceIds: [String]? = nil, tags: [Tag]? = nil) {
            self.dedicatedHostIds = dedicatedHostIds
            self.instanceIds = instanceIds
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dedicatedHostIds = "dedicatedHostIdSet"
            case instanceIds = "instanceIdSet"
            case tags = "tagSet"
        }
    }

    public struct InstanceEventWindowDisassociationRequest: AWSEncodableShape {
        public struct _DedicatedHostIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _InstanceTagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the Dedicated Hosts to disassociate from the event window.
        @OptionalCustomCoding<EC2ArrayCoder<_DedicatedHostIdsEncoding, String>>
        public var dedicatedHostIds: [String]?
        /// The IDs of the instances to disassociate from the event window.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]?
        /// The instance tags to disassociate from the event window. Any instances associated with the tags will be disassociated from the event window.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceTagsEncoding, Tag>>
        public var instanceTags: [Tag]?

        public init(dedicatedHostIds: [String]? = nil, instanceIds: [String]? = nil, instanceTags: [Tag]? = nil) {
            self.dedicatedHostIds = dedicatedHostIds
            self.instanceIds = instanceIds
            self.instanceTags = instanceTags
        }

        private enum CodingKeys: String, CodingKey {
            case dedicatedHostIds = "DedicatedHostId"
            case instanceIds = "InstanceId"
            case instanceTags = "InstanceTag"
        }
    }

    public struct InstanceEventWindowStateChange: AWSDecodableShape {
        /// The ID of the event window.
        public let instanceEventWindowId: String?
        /// The current state of the event window.
        public let state: InstanceEventWindowState?

        public init(instanceEventWindowId: String? = nil, state: InstanceEventWindowState? = nil) {
            self.instanceEventWindowId = instanceEventWindowId
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case instanceEventWindowId = "instanceEventWindowId"
            case state = "state"
        }
    }

    public struct InstanceEventWindowTimeRange: AWSDecodableShape {
        /// The hour when the time range ends.
        public let endHour: Int?
        /// The day on which the time range ends.
        public let endWeekDay: WeekDay?
        /// The hour when the time range begins.
        public let startHour: Int?
        /// The day on which the time range begins.
        public let startWeekDay: WeekDay?

        public init(endHour: Int? = nil, endWeekDay: WeekDay? = nil, startHour: Int? = nil, startWeekDay: WeekDay? = nil) {
            self.endHour = endHour
            self.endWeekDay = endWeekDay
            self.startHour = startHour
            self.startWeekDay = startWeekDay
        }

        private enum CodingKeys: String, CodingKey {
            case endHour = "endHour"
            case endWeekDay = "endWeekDay"
            case startHour = "startHour"
            case startWeekDay = "startWeekDay"
        }
    }

    public struct InstanceEventWindowTimeRangeRequest: AWSEncodableShape {
        /// The hour when the time range ends.
        public let endHour: Int?
        /// The day on which the time range ends.
        public let endWeekDay: WeekDay?
        /// The hour when the time range begins.
        public let startHour: Int?
        /// The day on which the time range begins.
        public let startWeekDay: WeekDay?

        public init(endHour: Int? = nil, endWeekDay: WeekDay? = nil, startHour: Int? = nil, startWeekDay: WeekDay? = nil) {
            self.endHour = endHour
            self.endWeekDay = endWeekDay
            self.startHour = startHour
            self.startWeekDay = startWeekDay
        }

        public func validate(name: String) throws {
            try self.validate(self.endHour, name: "endHour", parent: name, max: 23)
            try self.validate(self.endHour, name: "endHour", parent: name, min: 0)
            try self.validate(self.startHour, name: "startHour", parent: name, max: 23)
            try self.validate(self.startHour, name: "startHour", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case endHour = "EndHour"
            case endWeekDay = "EndWeekDay"
            case startHour = "StartHour"
            case startWeekDay = "StartWeekDay"
        }
    }

    public struct InstanceExportDetails: AWSDecodableShape {
        /// The ID of the resource being exported.
        public let instanceId: String?
        /// The target virtualization environment.
        public let targetEnvironment: ExportEnvironment?

        public init(instanceId: String? = nil, targetEnvironment: ExportEnvironment? = nil) {
            self.instanceId = instanceId
            self.targetEnvironment = targetEnvironment
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case targetEnvironment = "targetEnvironment"
        }
    }

    public struct InstanceFamilyCreditSpecification: AWSDecodableShape {
        /// The default credit option for CPU usage of the instance family. Valid values are standard and unlimited.
        public let cpuCredits: String?
        /// The instance family.
        public let instanceFamily: UnlimitedSupportedInstanceFamily?

        public init(cpuCredits: String? = nil, instanceFamily: UnlimitedSupportedInstanceFamily? = nil) {
            self.cpuCredits = cpuCredits
            self.instanceFamily = instanceFamily
        }

        private enum CodingKeys: String, CodingKey {
            case cpuCredits = "cpuCredits"
            case instanceFamily = "instanceFamily"
        }
    }

    public struct InstanceIpv4Prefix: AWSDecodableShape {
        /// One or more IPv4 prefixes assigned to the network interface.
        public let ipv4Prefix: String?

        public init(ipv4Prefix: String? = nil) {
            self.ipv4Prefix = ipv4Prefix
        }

        private enum CodingKeys: String, CodingKey {
            case ipv4Prefix = "ipv4Prefix"
        }
    }

    public struct InstanceIpv6Address: AWSEncodableShape & AWSDecodableShape {
        /// The IPv6 address.
        public let ipv6Address: String?
        /// Determines if an IPv6 address associated with a network interface is the primary IPv6 address. When you enable an IPv6 GUA address to be a primary IPv6, the first IPv6 GUA will be made the primary IPv6 address until the instance is terminated or the network interface is detached.   For more information, see RunInstances.
        public let isPrimaryIpv6: Bool?

        public init(ipv6Address: String? = nil, isPrimaryIpv6: Bool? = nil) {
            self.ipv6Address = ipv6Address
            self.isPrimaryIpv6 = isPrimaryIpv6
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Address = "ipv6Address"
            case isPrimaryIpv6 = "isPrimaryIpv6"
        }
    }

    public struct InstanceIpv6AddressRequest: AWSEncodableShape {
        /// The IPv6 address.
        public let ipv6Address: String?

        public init(ipv6Address: String? = nil) {
            self.ipv6Address = ipv6Address
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Address = "Ipv6Address"
        }
    }

    public struct InstanceIpv6Prefix: AWSDecodableShape {
        /// One or more IPv6 prefixes assigned to the network interface.
        public let ipv6Prefix: String?

        public init(ipv6Prefix: String? = nil) {
            self.ipv6Prefix = ipv6Prefix
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Prefix = "ipv6Prefix"
        }
    }

    public struct InstanceMaintenanceOptions: AWSDecodableShape {
        /// Provides information on the current automatic recovery behavior of your instance.
        public let autoRecovery: InstanceAutoRecoveryState?

        public init(autoRecovery: InstanceAutoRecoveryState? = nil) {
            self.autoRecovery = autoRecovery
        }

        private enum CodingKeys: String, CodingKey {
            case autoRecovery = "autoRecovery"
        }
    }

    public struct InstanceMaintenanceOptionsRequest: AWSEncodableShape {
        /// Disables the automatic recovery behavior of your instance or sets it to default. For more information, see Simplified automatic recovery.
        public let autoRecovery: InstanceAutoRecoveryState?

        public init(autoRecovery: InstanceAutoRecoveryState? = nil) {
            self.autoRecovery = autoRecovery
        }

        private enum CodingKeys: String, CodingKey {
            case autoRecovery = "AutoRecovery"
        }
    }

    public struct InstanceMarketOptionsRequest: AWSEncodableShape {
        /// The market type.
        public let marketType: MarketType?
        /// The options for Spot Instances.
        public let spotOptions: SpotMarketOptions?

        public init(marketType: MarketType? = nil, spotOptions: SpotMarketOptions? = nil) {
            self.marketType = marketType
            self.spotOptions = spotOptions
        }

        private enum CodingKeys: String, CodingKey {
            case marketType = "MarketType"
            case spotOptions = "SpotOptions"
        }
    }

    public struct InstanceMetadataDefaultsResponse: AWSDecodableShape {
        /// Indicates whether the IMDS endpoint for an instance is enabled or disabled. When disabled, the instance metadata can't be accessed.
        public let httpEndpoint: InstanceMetadataEndpointState?
        /// The maximum number of hops that the metadata token can travel.
        public let httpPutResponseHopLimit: Int?
        /// Indicates whether IMDSv2 is required.    optional – IMDSv2 is optional, which means that you can use either IMDSv2 or IMDSv1.    required – IMDSv2 is required, which means that IMDSv1 is disabled, and you must use IMDSv2.
        public let httpTokens: HttpTokensState?
        /// Indicates whether access to instance tags from the instance metadata is enabled or disabled. For more information, see Work with instance tags using the instance metadata in the Amazon EC2 User Guide.
        public let instanceMetadataTags: InstanceMetadataTagsState?

        public init(httpEndpoint: InstanceMetadataEndpointState? = nil, httpPutResponseHopLimit: Int? = nil, httpTokens: HttpTokensState? = nil, instanceMetadataTags: InstanceMetadataTagsState? = nil) {
            self.httpEndpoint = httpEndpoint
            self.httpPutResponseHopLimit = httpPutResponseHopLimit
            self.httpTokens = httpTokens
            self.instanceMetadataTags = instanceMetadataTags
        }

        private enum CodingKeys: String, CodingKey {
            case httpEndpoint = "httpEndpoint"
            case httpPutResponseHopLimit = "httpPutResponseHopLimit"
            case httpTokens = "httpTokens"
            case instanceMetadataTags = "instanceMetadataTags"
        }
    }

    public struct InstanceMetadataOptionsRequest: AWSEncodableShape {
        /// Enables or disables the HTTP metadata endpoint on your instances. If you specify a value of disabled, you cannot access your instance metadata. Default: enabled
        public let httpEndpoint: InstanceMetadataEndpointState?
        /// Enables or disables the IPv6 endpoint for the instance metadata service. Default: disabled
        public let httpProtocolIpv6: InstanceMetadataProtocolState?
        /// The maximum number of hops that the metadata token can travel. Possible values: Integers from 1 to 64
        public let httpPutResponseHopLimit: Int?
        /// Indicates whether IMDSv2 is required.    optional - IMDSv2 is optional, which means that you can use either IMDSv2 or IMDSv1.    required - IMDSv2 is required, which means that IMDSv1 is disabled, and you must use IMDSv2.   Default:   If the value of ImdsSupport for the Amazon Machine Image (AMI) for your instance is v2.0 and the account level default is set to no-preference, the default is required.   If the value of ImdsSupport for the Amazon Machine Image (AMI) for your instance is v2.0, but the account level default is set to V1 or V2, the default is optional.   The default value can also be affected by other combinations of parameters. For more information, see Order of precedence for instance metadata options in the Amazon EC2 User Guide.
        public let httpTokens: HttpTokensState?
        /// Set to enabled to allow access to instance tags from the instance metadata. Set to disabled to turn off access to instance tags from the instance metadata. For more information, see Work with instance tags using the instance metadata. Default: disabled
        public let instanceMetadataTags: InstanceMetadataTagsState?

        public init(httpEndpoint: InstanceMetadataEndpointState? = nil, httpProtocolIpv6: InstanceMetadataProtocolState? = nil, httpPutResponseHopLimit: Int? = nil, httpTokens: HttpTokensState? = nil, instanceMetadataTags: InstanceMetadataTagsState? = nil) {
            self.httpEndpoint = httpEndpoint
            self.httpProtocolIpv6 = httpProtocolIpv6
            self.httpPutResponseHopLimit = httpPutResponseHopLimit
            self.httpTokens = httpTokens
            self.instanceMetadataTags = instanceMetadataTags
        }

        private enum CodingKeys: String, CodingKey {
            case httpEndpoint = "HttpEndpoint"
            case httpProtocolIpv6 = "HttpProtocolIpv6"
            case httpPutResponseHopLimit = "HttpPutResponseHopLimit"
            case httpTokens = "HttpTokens"
            case instanceMetadataTags = "InstanceMetadataTags"
        }
    }

    public struct InstanceMetadataOptionsResponse: AWSDecodableShape {
        /// Indicates whether the HTTP metadata endpoint on your instances is enabled or disabled. If the value is disabled, you cannot access your instance metadata.
        public let httpEndpoint: InstanceMetadataEndpointState?
        /// Indicates whether the IPv6 endpoint for the instance metadata service is enabled or disabled. Default: disabled
        public let httpProtocolIpv6: InstanceMetadataProtocolState?
        /// The maximum number of hops that the metadata token can travel. Possible values: Integers from 1 to 64
        public let httpPutResponseHopLimit: Int?
        /// Indicates whether IMDSv2 is required.    optional - IMDSv2 is optional, which means that you can use either IMDSv2 or IMDSv1.    required - IMDSv2 is required, which means that IMDSv1 is disabled, and you must use IMDSv2.
        public let httpTokens: HttpTokensState?
        /// Indicates whether access to instance tags from the instance metadata is enabled or disabled. For more information, see Work with instance tags using the instance metadata.
        public let instanceMetadataTags: InstanceMetadataTagsState?
        /// The state of the metadata option changes.  pending - The metadata options are being updated and the instance is not ready to process metadata traffic with the new selection.  applied - The metadata options have been successfully applied on the instance.
        public let state: InstanceMetadataOptionsState?

        public init(httpEndpoint: InstanceMetadataEndpointState? = nil, httpProtocolIpv6: InstanceMetadataProtocolState? = nil, httpPutResponseHopLimit: Int? = nil, httpTokens: HttpTokensState? = nil, instanceMetadataTags: InstanceMetadataTagsState? = nil, state: InstanceMetadataOptionsState? = nil) {
            self.httpEndpoint = httpEndpoint
            self.httpProtocolIpv6 = httpProtocolIpv6
            self.httpPutResponseHopLimit = httpPutResponseHopLimit
            self.httpTokens = httpTokens
            self.instanceMetadataTags = instanceMetadataTags
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case httpEndpoint = "httpEndpoint"
            case httpProtocolIpv6 = "httpProtocolIpv6"
            case httpPutResponseHopLimit = "httpPutResponseHopLimit"
            case httpTokens = "httpTokens"
            case instanceMetadataTags = "instanceMetadataTags"
            case state = "state"
        }
    }

    public struct InstanceMonitoring: AWSDecodableShape {
        /// The ID of the instance.
        public let instanceId: String?
        /// The monitoring for the instance.
        public let monitoring: Monitoring?

        public init(instanceId: String? = nil, monitoring: Monitoring? = nil) {
            self.instanceId = instanceId
            self.monitoring = monitoring
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case monitoring = "monitoring"
        }
    }

    public struct InstanceNetworkInterface: AWSDecodableShape {
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv4PrefixesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv6AddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv6PrefixesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PrivateIpAddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The association information for an Elastic IPv4 associated with the network interface.
        public let association: InstanceNetworkInterfaceAssociation?
        /// The network interface attachment.
        public let attachment: InstanceNetworkInterfaceAttachment?
        /// A security group connection tracking configuration that enables you to set the timeout for connection tracking on an Elastic network interface. For more information, see Connection tracking timeouts in the Amazon Elastic Compute Cloud User Guide.
        public let connectionTrackingConfiguration: ConnectionTrackingSpecificationResponse?
        /// The description.
        public let description: String?
        /// The security groups.
        @OptionalCustomCoding<EC2ArrayCoder<_GroupsEncoding, GroupIdentifier>>
        public var groups: [GroupIdentifier]?
        /// The type of network interface. Valid values: interface | efa | trunk
        public let interfaceType: String?
        /// The IPv4 delegated prefixes that are assigned to the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv4PrefixesEncoding, InstanceIpv4Prefix>>
        public var ipv4Prefixes: [InstanceIpv4Prefix]?
        /// The IPv6 addresses associated with the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv6AddressesEncoding, InstanceIpv6Address>>
        public var ipv6Addresses: [InstanceIpv6Address]?
        /// The IPv6 delegated prefixes that are assigned to the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv6PrefixesEncoding, InstanceIpv6Prefix>>
        public var ipv6Prefixes: [InstanceIpv6Prefix]?
        /// The MAC address.
        public let macAddress: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The ID of the Amazon Web Services account that created the network interface.
        public let ownerId: String?
        /// The private DNS name.
        public let privateDnsName: String?
        /// The IPv4 address of the network interface within the subnet.
        public let privateIpAddress: String?
        /// The private IPv4 addresses associated with the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_PrivateIpAddressesEncoding, InstancePrivateIpAddress>>
        public var privateIpAddresses: [InstancePrivateIpAddress]?
        /// Indicates whether source/destination checking is enabled.
        public let sourceDestCheck: Bool?
        /// The status of the network interface.
        public let status: NetworkInterfaceStatus?
        /// The ID of the subnet.
        public let subnetId: String?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(association: InstanceNetworkInterfaceAssociation? = nil, attachment: InstanceNetworkInterfaceAttachment? = nil, connectionTrackingConfiguration: ConnectionTrackingSpecificationResponse? = nil, description: String? = nil, groups: [GroupIdentifier]? = nil, interfaceType: String? = nil, ipv4Prefixes: [InstanceIpv4Prefix]? = nil, ipv6Addresses: [InstanceIpv6Address]? = nil, ipv6Prefixes: [InstanceIpv6Prefix]? = nil, macAddress: String? = nil, networkInterfaceId: String? = nil, ownerId: String? = nil, privateDnsName: String? = nil, privateIpAddress: String? = nil, privateIpAddresses: [InstancePrivateIpAddress]? = nil, sourceDestCheck: Bool? = nil, status: NetworkInterfaceStatus? = nil, subnetId: String? = nil, vpcId: String? = nil) {
            self.association = association
            self.attachment = attachment
            self.connectionTrackingConfiguration = connectionTrackingConfiguration
            self.description = description
            self.groups = groups
            self.interfaceType = interfaceType
            self.ipv4Prefixes = ipv4Prefixes
            self.ipv6Addresses = ipv6Addresses
            self.ipv6Prefixes = ipv6Prefixes
            self.macAddress = macAddress
            self.networkInterfaceId = networkInterfaceId
            self.ownerId = ownerId
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.sourceDestCheck = sourceDestCheck
            self.status = status
            self.subnetId = subnetId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
            case attachment = "attachment"
            case connectionTrackingConfiguration = "connectionTrackingConfiguration"
            case description = "description"
            case groups = "groupSet"
            case interfaceType = "interfaceType"
            case ipv4Prefixes = "ipv4PrefixSet"
            case ipv6Addresses = "ipv6AddressesSet"
            case ipv6Prefixes = "ipv6PrefixSet"
            case macAddress = "macAddress"
            case networkInterfaceId = "networkInterfaceId"
            case ownerId = "ownerId"
            case privateDnsName = "privateDnsName"
            case privateIpAddress = "privateIpAddress"
            case privateIpAddresses = "privateIpAddressesSet"
            case sourceDestCheck = "sourceDestCheck"
            case status = "status"
            case subnetId = "subnetId"
            case vpcId = "vpcId"
        }
    }

    public struct InstanceNetworkInterfaceAssociation: AWSDecodableShape {
        /// The carrier IP address associated with the network interface.
        public let carrierIp: String?
        /// The customer-owned IP address associated with the network interface.
        public let customerOwnedIp: String?
        /// The ID of the owner of the Elastic IP address.
        public let ipOwnerId: String?
        /// The public DNS name.
        public let publicDnsName: String?
        /// The public IP address or Elastic IP address bound to the network interface.
        public let publicIp: String?

        public init(carrierIp: String? = nil, customerOwnedIp: String? = nil, ipOwnerId: String? = nil, publicDnsName: String? = nil, publicIp: String? = nil) {
            self.carrierIp = carrierIp
            self.customerOwnedIp = customerOwnedIp
            self.ipOwnerId = ipOwnerId
            self.publicDnsName = publicDnsName
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case carrierIp = "carrierIp"
            case customerOwnedIp = "customerOwnedIp"
            case ipOwnerId = "ipOwnerId"
            case publicDnsName = "publicDnsName"
            case publicIp = "publicIp"
        }
    }

    public struct InstanceNetworkInterfaceAttachment: AWSDecodableShape {
        /// The ID of the network interface attachment.
        public let attachmentId: String?
        /// The time stamp when the attachment initiated.
        public let attachTime: Date?
        /// Indicates whether the network interface is deleted when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// The index of the device on the instance for the network interface attachment.
        public let deviceIndex: Int?
        /// Contains the ENA Express settings for the network interface that's attached
        /// 			to the instance.
        public let enaSrdSpecification: InstanceAttachmentEnaSrdSpecification?
        /// The index of the network card.
        public let networkCardIndex: Int?
        /// The attachment state.
        public let status: AttachmentStatus?

        public init(attachmentId: String? = nil, attachTime: Date? = nil, deleteOnTermination: Bool? = nil, deviceIndex: Int? = nil, enaSrdSpecification: InstanceAttachmentEnaSrdSpecification? = nil, networkCardIndex: Int? = nil, status: AttachmentStatus? = nil) {
            self.attachmentId = attachmentId
            self.attachTime = attachTime
            self.deleteOnTermination = deleteOnTermination
            self.deviceIndex = deviceIndex
            self.enaSrdSpecification = enaSrdSpecification
            self.networkCardIndex = networkCardIndex
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentId = "attachmentId"
            case attachTime = "attachTime"
            case deleteOnTermination = "deleteOnTermination"
            case deviceIndex = "deviceIndex"
            case enaSrdSpecification = "enaSrdSpecification"
            case networkCardIndex = "networkCardIndex"
            case status = "status"
        }
    }

    public struct InstanceNetworkInterfaceSpecification: AWSEncodableShape & AWSDecodableShape {
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "SecurityGroupId" }
        public struct _Ipv4PrefixesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv6AddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv6PrefixesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PrivateIpAddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether to assign a carrier IP address to the network interface. You can only assign a carrier IP address to a network interface that is in a subnet in a Wavelength Zone. For more information about carrier IP addresses, see Carrier IP address in the Amazon Web Services Wavelength Developer Guide.
        public let associateCarrierIpAddress: Bool?
        /// Indicates whether to assign a public IPv4 address to an instance you launch in a VPC. The public IP address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is true. Amazon Web Services charges for all public IPv4 addresses, including public IPv4 addresses
        /// associated with running instances and Elastic IP addresses. For more information, see the Public IPv4 Address tab on the Amazon VPC pricing page.
        public let associatePublicIpAddress: Bool?
        /// A security group connection tracking specification that enables you to set the timeout for connection tracking on an Elastic network interface. For more information, see Connection tracking timeouts in the Amazon Elastic Compute Cloud User Guide.
        public let connectionTrackingSpecification: ConnectionTrackingSpecificationRequest?
        /// If set to true, the interface is deleted when the instance is terminated. You can specify true only if creating a new network interface when launching an instance.
        public let deleteOnTermination: Bool?
        /// The description of the network interface. Applies only if creating a network interface when launching an instance.
        public let description: String?
        /// The position of the network interface in the attachment order.  A primary network interface has a device index of 0. If you specify a network interface when launching an instance,  you must specify the device index.
        public let deviceIndex: Int?
        /// Specifies the ENA Express settings for the network interface that's attached to
        /// 			the instance.
        public let enaSrdSpecification: EnaSrdSpecificationRequest?
        /// The IDs of the security groups for the network interface. Applies only if creating a network interface when launching an instance.
        @OptionalCustomCoding<EC2ArrayCoder<_GroupsEncoding, String>>
        public var groups: [String]?
        /// The type of network interface. Valid values: interface | efa
        public let interfaceType: String?
        /// The number of IPv4 delegated prefixes to be automatically assigned to the network interface.  You cannot use this option if you use the Ipv4Prefix option.
        public let ipv4PrefixCount: Int?
        /// The IPv4 delegated prefixes to be assigned to the network interface. You cannot  use this option if you use the Ipv4PrefixCount option.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv4PrefixesEncoding, Ipv4PrefixSpecificationRequest>>
        public var ipv4Prefixes: [Ipv4PrefixSpecificationRequest]?
        /// A number of IPv6 addresses to assign to the network interface. Amazon EC2 chooses the IPv6 addresses from the range of the subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.
        public let ipv6AddressCount: Int?
        /// The IPv6 addresses to assign to the network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv6AddressesEncoding, InstanceIpv6Address>>
        public var ipv6Addresses: [InstanceIpv6Address]?
        /// The number of IPv6 delegated prefixes to be automatically assigned to the network interface.  You cannot use this option if you use the Ipv6Prefix option.
        public let ipv6PrefixCount: Int?
        /// The IPv6 delegated prefixes to be assigned to the network interface. You cannot  use this option if you use the Ipv6PrefixCount option.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv6PrefixesEncoding, Ipv6PrefixSpecificationRequest>>
        public var ipv6Prefixes: [Ipv6PrefixSpecificationRequest]?
        /// The index of the network card. Some instance types support multiple network cards.  The primary network interface must be assigned to network card index 0.  The default is network card index 0. If you are using RequestSpotInstances to create Spot Instances, omit this parameter because you can’t specify the network card index when using this API. To specify the network card index, use RunInstances.
        public let networkCardIndex: Int?
        /// The ID of the network interface. If you are creating a Spot Fleet, omit this parameter because you can’t specify a network interface ID in a launch specification.
        public let networkInterfaceId: String?
        /// The primary IPv6 address of the network interface. When you enable an IPv6 GUA address to be a primary IPv6, the first IPv6 GUA will be made the primary IPv6 address until the instance is terminated or the network interface is detached. For more information about primary IPv6 addresses, see RunInstances.
        public let primaryIpv6: Bool?
        /// The private IPv4 address of the network interface. Applies only if creating a network interface when launching an instance. You cannot specify this option if you're launching 	more than one instance in a RunInstances request.
        public let privateIpAddress: String?
        /// The private IPv4 addresses to assign to the network interface. Only one private IPv4 address can be designated as primary. You cannot specify this option if you're 	launching more than one instance in a RunInstances request.
        @OptionalCustomCoding<EC2ArrayCoder<_PrivateIpAddressesEncoding, PrivateIpAddressSpecification>>
        public var privateIpAddresses: [PrivateIpAddressSpecification]?
        /// The number of secondary private IPv4 addresses. You can't specify this option and specify more than one private IP address using the private IP addresses option. You cannot specify this option if you're 	launching more than one instance in a RunInstances request.
        public let secondaryPrivateIpAddressCount: Int?
        /// The ID of the subnet associated with the network interface. Applies only if creating a network interface when launching an instance.
        public let subnetId: String?

        public init(associateCarrierIpAddress: Bool? = nil, associatePublicIpAddress: Bool? = nil, connectionTrackingSpecification: ConnectionTrackingSpecificationRequest? = nil, deleteOnTermination: Bool? = nil, description: String? = nil, deviceIndex: Int? = nil, enaSrdSpecification: EnaSrdSpecificationRequest? = nil, groups: [String]? = nil, interfaceType: String? = nil, ipv4PrefixCount: Int? = nil, ipv4Prefixes: [Ipv4PrefixSpecificationRequest]? = nil, ipv6AddressCount: Int? = nil, ipv6Addresses: [InstanceIpv6Address]? = nil, ipv6PrefixCount: Int? = nil, ipv6Prefixes: [Ipv6PrefixSpecificationRequest]? = nil, networkCardIndex: Int? = nil, networkInterfaceId: String? = nil, primaryIpv6: Bool? = nil, privateIpAddress: String? = nil, privateIpAddresses: [PrivateIpAddressSpecification]? = nil, secondaryPrivateIpAddressCount: Int? = nil, subnetId: String? = nil) {
            self.associateCarrierIpAddress = associateCarrierIpAddress
            self.associatePublicIpAddress = associatePublicIpAddress
            self.connectionTrackingSpecification = connectionTrackingSpecification
            self.deleteOnTermination = deleteOnTermination
            self.description = description
            self.deviceIndex = deviceIndex
            self.enaSrdSpecification = enaSrdSpecification
            self.groups = groups
            self.interfaceType = interfaceType
            self.ipv4PrefixCount = ipv4PrefixCount
            self.ipv4Prefixes = ipv4Prefixes
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.ipv6PrefixCount = ipv6PrefixCount
            self.ipv6Prefixes = ipv6Prefixes
            self.networkCardIndex = networkCardIndex
            self.networkInterfaceId = networkInterfaceId
            self.primaryIpv6 = primaryIpv6
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case associateCarrierIpAddress = "AssociateCarrierIpAddress"
            case associatePublicIpAddress = "associatePublicIpAddress"
            case connectionTrackingSpecification = "ConnectionTrackingSpecification"
            case deleteOnTermination = "deleteOnTermination"
            case description = "description"
            case deviceIndex = "deviceIndex"
            case enaSrdSpecification = "EnaSrdSpecification"
            case groups = "SecurityGroupId"
            case interfaceType = "InterfaceType"
            case ipv4PrefixCount = "Ipv4PrefixCount"
            case ipv4Prefixes = "Ipv4Prefix"
            case ipv6AddressCount = "ipv6AddressCount"
            case ipv6Addresses = "ipv6AddressesSet"
            case ipv6PrefixCount = "Ipv6PrefixCount"
            case ipv6Prefixes = "Ipv6Prefix"
            case networkCardIndex = "NetworkCardIndex"
            case networkInterfaceId = "networkInterfaceId"
            case primaryIpv6 = "PrimaryIpv6"
            case privateIpAddress = "privateIpAddress"
            case privateIpAddresses = "privateIpAddressesSet"
            case secondaryPrivateIpAddressCount = "secondaryPrivateIpAddressCount"
            case subnetId = "subnetId"
        }
    }

    public struct InstancePrivateIpAddress: AWSDecodableShape {
        /// The association information for an Elastic IP address for the network interface.
        public let association: InstanceNetworkInterfaceAssociation?
        /// Indicates whether this IPv4 address is the primary private IP address of the network interface.
        public let primary: Bool?
        /// The private IPv4 DNS name.
        public let privateDnsName: String?
        /// The private IPv4 address of the network interface.
        public let privateIpAddress: String?

        public init(association: InstanceNetworkInterfaceAssociation? = nil, primary: Bool? = nil, privateDnsName: String? = nil, privateIpAddress: String? = nil) {
            self.association = association
            self.primary = primary
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
            case primary = "primary"
            case privateDnsName = "privateDnsName"
            case privateIpAddress = "privateIpAddress"
        }
    }

    public struct InstanceRequirements: AWSEncodableShape & AWSDecodableShape {
        public struct _AcceleratorManufacturersEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _AcceleratorNamesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _AcceleratorTypesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _AllowedInstanceTypesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _CpuManufacturersEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ExcludedInstanceTypesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _InstanceGenerationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _LocalStorageTypesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The minimum and maximum number of accelerators (GPUs, FPGAs, or Amazon Web Services Inferentia chips) on an instance. To exclude accelerator-enabled instance types, set Max to 0. Default: No minimum or maximum limits
        public let acceleratorCount: AcceleratorCount?
        /// Indicates whether instance types must have accelerators by specific manufacturers.   For instance types with Amazon Web Services devices, specify amazon-web-services.   For instance types with AMD devices, specify amd.   For instance types with Habana devices, specify habana.   For instance types with NVIDIA devices, specify nvidia.   For instance types with Xilinx devices, specify xilinx.   Default: Any manufacturer
        @OptionalCustomCoding<EC2ArrayCoder<_AcceleratorManufacturersEncoding, AcceleratorManufacturer>>
        public var acceleratorManufacturers: [AcceleratorManufacturer]?
        /// The accelerators that must be on the instance type.   For instance types with NVIDIA A10G GPUs, specify a10g.   For instance types with NVIDIA A100 GPUs, specify a100.   For instance types with NVIDIA H100 GPUs, specify h100.   For instance types with Amazon Web Services Inferentia chips, specify inferentia.   For instance types with NVIDIA GRID K520 GPUs, specify k520.   For instance types with NVIDIA K80 GPUs, specify k80.   For instance types with NVIDIA M60 GPUs, specify m60.   For instance types with AMD Radeon Pro V520 GPUs, specify radeon-pro-v520.   For instance types with NVIDIA T4 GPUs, specify t4.   For instance types with NVIDIA T4G GPUs, specify t4g.   For instance types with Xilinx VU9P FPGAs, specify vu9p.   For instance types with NVIDIA V100 GPUs, specify v100.   Default: Any accelerator
        @OptionalCustomCoding<EC2ArrayCoder<_AcceleratorNamesEncoding, AcceleratorName>>
        public var acceleratorNames: [AcceleratorName]?
        /// The minimum and maximum amount of total accelerator memory, in MiB. Default: No minimum or maximum limits
        public let acceleratorTotalMemoryMiB: AcceleratorTotalMemoryMiB?
        /// The accelerator types that must be on the instance type.   For instance types with GPU accelerators, specify gpu.   For instance types with FPGA accelerators, specify fpga.   For instance types with inference accelerators, specify inference.   Default: Any accelerator type
        @OptionalCustomCoding<EC2ArrayCoder<_AcceleratorTypesEncoding, AcceleratorType>>
        public var acceleratorTypes: [AcceleratorType]?
        /// The instance types to apply your specified attributes against. All other instance types  are ignored, even if they match your specified attributes. You can use strings with one or more wild cards, represented by an asterisk (*), to allow an instance type, size, or generation. The following are examples: m5.8xlarge, c5*.*, m5a.*, r*, *3*. For example, if you specify c5*,Amazon EC2 will allow the entire C5 instance family, which includes all C5a and C5n instance types. If you specify m5a.*, Amazon EC2 will allow all the M5a instance types, but not the M5n instance types.  If you specify AllowedInstanceTypes, you can't specify ExcludedInstanceTypes.  Default: All instance types
        @OptionalCustomCoding<EC2ArrayCoder<_AllowedInstanceTypesEncoding, String>>
        public var allowedInstanceTypes: [String]?
        /// Indicates whether bare metal instance types must be included, excluded, or required.   To include bare metal instance types, specify included.   To require only bare metal instance types, specify required.   To exclude bare metal instance types, specify excluded.   Default: excluded
        public let bareMetal: BareMetal?
        /// The minimum and maximum baseline bandwidth to Amazon EBS, in Mbps. For more information, see Amazon EBS–optimized instances in the Amazon EC2 User Guide. Default: No minimum or maximum limits
        public let baselineEbsBandwidthMbps: BaselineEbsBandwidthMbps?
        /// Indicates whether burstable performance T instance types are included, excluded, or required. For more information, see  Burstable performance instances.   To include burstable performance instance types, specify included.   To require only burstable performance instance types, specify required.   To exclude burstable performance instance types, specify excluded.   Default: excluded
        public let burstablePerformance: BurstablePerformance?
        /// The CPU manufacturers to include.   For instance types with Intel CPUs, specify intel.   For instance types with AMD CPUs, specify amd.   For instance types with Amazon Web Services CPUs, specify amazon-web-services.    Don't confuse the CPU manufacturer with the CPU architecture. Instances will  be launched with a compatible CPU architecture based on the Amazon Machine Image (AMI) that you  specify in your launch template.  Default: Any manufacturer
        @OptionalCustomCoding<EC2ArrayCoder<_CpuManufacturersEncoding, CpuManufacturer>>
        public var cpuManufacturers: [CpuManufacturer]?
        /// The instance types to exclude. You can use strings with one or more wild cards, represented by an asterisk (*), to exclude an instance type, size, or generation. The following are examples: m5.8xlarge, c5*.*, m5a.*, r*, *3*. For example, if you specify c5*,Amazon EC2 will exclude the entire C5 instance family, which includes all C5a and C5n instance types. If you specify m5a.*, Amazon EC2 will exclude all the M5a instance types, but not the M5n instance types.  If you specify ExcludedInstanceTypes, you can't specify AllowedInstanceTypes.  Default: No excluded instance types
        @OptionalCustomCoding<EC2ArrayCoder<_ExcludedInstanceTypesEncoding, String>>
        public var excludedInstanceTypes: [String]?
        /// Indicates whether current or previous generation instance types are included. The current generation instance types are recommended for use. Current generation instance types are typically the latest two to three generations in each instance family. For more information, see Instance types in the Amazon EC2 User Guide. For current generation instance types, specify current. For previous generation instance types, specify previous. Default: Current and previous generation instance types
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceGenerationsEncoding, InstanceGeneration>>
        public var instanceGenerations: [InstanceGeneration]?
        /// Indicates whether instance types with instance store volumes are included, excluded, or required. For more information, Amazon EC2 instance store in the Amazon EC2 User Guide.   To include instance types with instance store volumes, specify included.   To require only instance types with instance store volumes, specify required.   To exclude instance types with instance store volumes, specify excluded.   Default: included
        public let localStorage: LocalStorage?
        /// The type of local storage that is required.   For instance types with hard disk drive (HDD) storage, specify hdd.   For instance types with solid state drive (SSD) storage, specify ssd.   Default: hdd and ssd
        @OptionalCustomCoding<EC2ArrayCoder<_LocalStorageTypesEncoding, LocalStorageType>>
        public var localStorageTypes: [LocalStorageType]?
        /// [Price protection] The price protection threshold for Spot Instances, as a percentage of an identified On-Demand price. The identified On-Demand price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. If no current generation C, M, or R instance type matches your attributes, then the identified price is from the lowest priced current generation instance types, and failing that, from the lowest priced previous generation instance types that match your attributes. When Amazon EC2 selects instance types with your attributes, it will exclude instance types whose price exceeds your specified threshold. The parameter accepts an integer, which Amazon EC2 interprets as a percentage. If you set DesiredCapacityType to vcpu or memory-mib, the price protection threshold is based on the per vCPU or per memory price instead of the per instance price.  Only one of SpotMaxPricePercentageOverLowestPrice or MaxSpotPriceAsPercentageOfOptimalOnDemandPrice can be specified. If you don't specify either, Amazon EC2 will automatically apply optimal price protection to consistently select from a wide range of instance types. To indicate no price protection threshold for Spot Instances, meaning you want to consider all instance types that match your attributes, include one of these parameters and specify a high value, such as 999999.
        public let maxSpotPriceAsPercentageOfOptimalOnDemandPrice: Int?
        /// The minimum and maximum amount of memory per vCPU, in GiB. Default: No minimum or maximum limits
        public let memoryGiBPerVCpu: MemoryGiBPerVCpu?
        /// The minimum and maximum amount of memory, in MiB.
        public let memoryMiB: MemoryMiB?
        /// The minimum and maximum amount of network bandwidth, in gigabits per second (Gbps). Default: No minimum or maximum limits
        public let networkBandwidthGbps: NetworkBandwidthGbps?
        /// The minimum and maximum number of network interfaces. Default: No minimum or maximum limits
        public let networkInterfaceCount: NetworkInterfaceCount?
        /// [Price protection] The price protection threshold for On-Demand Instances, as a percentage higher than an identified On-Demand price. The identified On-Demand price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. When Amazon EC2 selects instance types with your attributes, it will exclude instance types whose price exceeds your specified threshold. The parameter accepts an integer, which Amazon EC2 interprets as a percentage. To turn off price protection, specify a high value, such as 999999. This parameter is not supported for GetSpotPlacementScores and GetInstanceTypesFromInstanceRequirements.  If you set TargetCapacityUnitType to vcpu or memory-mib, the price protection threshold is applied based on the per-vCPU or per-memory price instead of the per-instance price.  Default: 20
        public let onDemandMaxPricePercentageOverLowestPrice: Int?
        /// Indicates whether instance types must support hibernation for On-Demand Instances. This parameter is not supported for GetSpotPlacementScores. Default: false
        public let requireHibernateSupport: Bool?
        /// [Price protection] The price protection threshold for Spot Instances, as a percentage higher than an identified Spot price. The identified Spot price is the Spot price of the lowest priced current generation C, M, or R instance type with your specified attributes. If no current generation C, M, or R instance type matches your attributes, then the identified Spot price is from the lowest priced current generation instance types, and failing that, from the lowest priced previous generation instance types that match your attributes. When Amazon EC2 selects instance types with your attributes, it will exclude instance types whose Spot price exceeds your specified threshold. The parameter accepts an integer, which Amazon EC2 interprets as a percentage. If you set TargetCapacityUnitType to vcpu or memory-mib, the price protection threshold is applied based on the per-vCPU or per-memory price instead of the per-instance price. This parameter is not supported for GetSpotPlacementScores and GetInstanceTypesFromInstanceRequirements.  Only one of SpotMaxPricePercentageOverLowestPrice or MaxSpotPriceAsPercentageOfOptimalOnDemandPrice can be specified. If you don't specify either, Amazon EC2 will automatically apply optimal price protection to consistently select from a wide range of instance types. To indicate no price protection threshold for Spot Instances, meaning you want to consider all instance types that match your attributes, include one of these parameters and specify a high value, such as 999999.  Default: 100
        public let spotMaxPricePercentageOverLowestPrice: Int?
        /// The minimum and maximum amount of total local storage, in GB. Default: No minimum or maximum limits
        public let totalLocalStorageGB: TotalLocalStorageGB?
        /// The minimum and maximum number of vCPUs.
        public let vCpuCount: VCpuCountRange?

        public init(acceleratorCount: AcceleratorCount? = nil, acceleratorManufacturers: [AcceleratorManufacturer]? = nil, acceleratorNames: [AcceleratorName]? = nil, acceleratorTotalMemoryMiB: AcceleratorTotalMemoryMiB? = nil, acceleratorTypes: [AcceleratorType]? = nil, allowedInstanceTypes: [String]? = nil, bareMetal: BareMetal? = nil, baselineEbsBandwidthMbps: BaselineEbsBandwidthMbps? = nil, burstablePerformance: BurstablePerformance? = nil, cpuManufacturers: [CpuManufacturer]? = nil, excludedInstanceTypes: [String]? = nil, instanceGenerations: [InstanceGeneration]? = nil, localStorage: LocalStorage? = nil, localStorageTypes: [LocalStorageType]? = nil, maxSpotPriceAsPercentageOfOptimalOnDemandPrice: Int? = nil, memoryGiBPerVCpu: MemoryGiBPerVCpu? = nil, memoryMiB: MemoryMiB? = nil, networkBandwidthGbps: NetworkBandwidthGbps? = nil, networkInterfaceCount: NetworkInterfaceCount? = nil, onDemandMaxPricePercentageOverLowestPrice: Int? = nil, requireHibernateSupport: Bool? = nil, spotMaxPricePercentageOverLowestPrice: Int? = nil, totalLocalStorageGB: TotalLocalStorageGB? = nil, vCpuCount: VCpuCountRange? = nil) {
            self.acceleratorCount = acceleratorCount
            self.acceleratorManufacturers = acceleratorManufacturers
            self.acceleratorNames = acceleratorNames
            self.acceleratorTotalMemoryMiB = acceleratorTotalMemoryMiB
            self.acceleratorTypes = acceleratorTypes
            self.allowedInstanceTypes = allowedInstanceTypes
            self.bareMetal = bareMetal
            self.baselineEbsBandwidthMbps = baselineEbsBandwidthMbps
            self.burstablePerformance = burstablePerformance
            self.cpuManufacturers = cpuManufacturers
            self.excludedInstanceTypes = excludedInstanceTypes
            self.instanceGenerations = instanceGenerations
            self.localStorage = localStorage
            self.localStorageTypes = localStorageTypes
            self.maxSpotPriceAsPercentageOfOptimalOnDemandPrice = maxSpotPriceAsPercentageOfOptimalOnDemandPrice
            self.memoryGiBPerVCpu = memoryGiBPerVCpu
            self.memoryMiB = memoryMiB
            self.networkBandwidthGbps = networkBandwidthGbps
            self.networkInterfaceCount = networkInterfaceCount
            self.onDemandMaxPricePercentageOverLowestPrice = onDemandMaxPricePercentageOverLowestPrice
            self.requireHibernateSupport = requireHibernateSupport
            self.spotMaxPricePercentageOverLowestPrice = spotMaxPricePercentageOverLowestPrice
            self.totalLocalStorageGB = totalLocalStorageGB
            self.vCpuCount = vCpuCount
        }

        public func validate(name: String) throws {
            try self.allowedInstanceTypes?.forEach {
                try validate($0, name: "allowedInstanceTypes[]", parent: name, max: 30)
                try validate($0, name: "allowedInstanceTypes[]", parent: name, min: 1)
                try validate($0, name: "allowedInstanceTypes[]", parent: name, pattern: "^[a-zA-Z0-9\\.\\*\\-]+$")
            }
            try self.validate(self.allowedInstanceTypes, name: "allowedInstanceTypes", parent: name, max: 400)
            try self.excludedInstanceTypes?.forEach {
                try validate($0, name: "excludedInstanceTypes[]", parent: name, max: 30)
                try validate($0, name: "excludedInstanceTypes[]", parent: name, min: 1)
                try validate($0, name: "excludedInstanceTypes[]", parent: name, pattern: "^[a-zA-Z0-9\\.\\*\\-]+$")
            }
            try self.validate(self.excludedInstanceTypes, name: "excludedInstanceTypes", parent: name, max: 400)
        }

        private enum CodingKeys: String, CodingKey {
            case acceleratorCount = "acceleratorCount"
            case acceleratorManufacturers = "acceleratorManufacturerSet"
            case acceleratorNames = "acceleratorNameSet"
            case acceleratorTotalMemoryMiB = "acceleratorTotalMemoryMiB"
            case acceleratorTypes = "acceleratorTypeSet"
            case allowedInstanceTypes = "allowedInstanceTypeSet"
            case bareMetal = "bareMetal"
            case baselineEbsBandwidthMbps = "baselineEbsBandwidthMbps"
            case burstablePerformance = "burstablePerformance"
            case cpuManufacturers = "cpuManufacturerSet"
            case excludedInstanceTypes = "excludedInstanceTypeSet"
            case instanceGenerations = "instanceGenerationSet"
            case localStorage = "localStorage"
            case localStorageTypes = "localStorageTypeSet"
            case maxSpotPriceAsPercentageOfOptimalOnDemandPrice = "maxSpotPriceAsPercentageOfOptimalOnDemandPrice"
            case memoryGiBPerVCpu = "memoryGiBPerVCpu"
            case memoryMiB = "memoryMiB"
            case networkBandwidthGbps = "networkBandwidthGbps"
            case networkInterfaceCount = "networkInterfaceCount"
            case onDemandMaxPricePercentageOverLowestPrice = "onDemandMaxPricePercentageOverLowestPrice"
            case requireHibernateSupport = "requireHibernateSupport"
            case spotMaxPricePercentageOverLowestPrice = "spotMaxPricePercentageOverLowestPrice"
            case totalLocalStorageGB = "totalLocalStorageGB"
            case vCpuCount = "vCpuCount"
        }
    }

    public struct InstanceRequirementsRequest: AWSEncodableShape {
        public struct _AcceleratorManufacturersEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _AcceleratorNamesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _AcceleratorTypesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _AllowedInstanceTypesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _CpuManufacturersEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ExcludedInstanceTypesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _InstanceGenerationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _LocalStorageTypesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The minimum and maximum number of accelerators (GPUs, FPGAs, or Amazon Web Services Inferentia chips) on an instance. To exclude accelerator-enabled instance types, set Max to 0. Default: No minimum or maximum limits
        public let acceleratorCount: AcceleratorCountRequest?
        /// Indicates whether instance types must have accelerators by specific manufacturers.   For instance types with Amazon Web Services devices, specify amazon-web-services.   For instance types with AMD devices, specify amd.   For instance types with Habana devices, specify habana.   For instance types with NVIDIA devices, specify nvidia.   For instance types with Xilinx devices, specify xilinx.   Default: Any manufacturer
        @OptionalCustomCoding<EC2ArrayCoder<_AcceleratorManufacturersEncoding, AcceleratorManufacturer>>
        public var acceleratorManufacturers: [AcceleratorManufacturer]?
        /// The accelerators that must be on the instance type.   For instance types with NVIDIA A10G GPUs, specify a10g.   For instance types with NVIDIA A100 GPUs, specify a100.   For instance types with NVIDIA H100 GPUs, specify h100.   For instance types with Amazon Web Services Inferentia chips, specify inferentia.   For instance types with NVIDIA GRID K520 GPUs, specify k520.   For instance types with NVIDIA K80 GPUs, specify k80.   For instance types with NVIDIA M60 GPUs, specify m60.   For instance types with AMD Radeon Pro V520 GPUs, specify radeon-pro-v520.   For instance types with NVIDIA T4 GPUs, specify t4.   For instance types with NVIDIA T4G GPUs, specify t4g.   For instance types with Xilinx VU9P FPGAs, specify vu9p.   For instance types with NVIDIA V100 GPUs, specify v100.   Default: Any accelerator
        @OptionalCustomCoding<EC2ArrayCoder<_AcceleratorNamesEncoding, AcceleratorName>>
        public var acceleratorNames: [AcceleratorName]?
        /// The minimum and maximum amount of total accelerator memory, in MiB. Default: No minimum or maximum limits
        public let acceleratorTotalMemoryMiB: AcceleratorTotalMemoryMiBRequest?
        /// The accelerator types that must be on the instance type.   To include instance types with GPU hardware, specify gpu.   To include instance types with FPGA hardware, specify fpga.   To include instance types with inference hardware, specify inference.   Default: Any accelerator type
        @OptionalCustomCoding<EC2ArrayCoder<_AcceleratorTypesEncoding, AcceleratorType>>
        public var acceleratorTypes: [AcceleratorType]?
        /// The instance types to apply your specified attributes against. All other instance types  are ignored, even if they match your specified attributes. You can use strings with one or more wild cards, represented by an asterisk (*), to allow an instance type, size, or generation. The following are examples: m5.8xlarge, c5*.*, m5a.*, r*, *3*. For example, if you specify c5*,Amazon EC2 will allow the entire C5 instance family, which includes all C5a and C5n instance types. If you specify m5a.*, Amazon EC2 will allow all the M5a instance types, but not the M5n instance types.  If you specify AllowedInstanceTypes, you can't specify ExcludedInstanceTypes.  Default: All instance types
        @OptionalCustomCoding<EC2ArrayCoder<_AllowedInstanceTypesEncoding, String>>
        public var allowedInstanceTypes: [String]?
        /// Indicates whether bare metal instance types must be included, excluded, or required.   To include bare metal instance types, specify included.   To require only bare metal instance types, specify required.   To exclude bare metal instance types, specify excluded.   Default: excluded
        public let bareMetal: BareMetal?
        /// The minimum and maximum baseline bandwidth to Amazon EBS, in Mbps. For more information, see Amazon EBS–optimized instances in the Amazon EC2 User Guide. Default: No minimum or maximum limits
        public let baselineEbsBandwidthMbps: BaselineEbsBandwidthMbpsRequest?
        /// Indicates whether burstable performance T instance types are included, excluded, or required. For more information, see  Burstable performance instances.   To include burstable performance instance types, specify included.   To require only burstable performance instance types, specify required.   To exclude burstable performance instance types, specify excluded.   Default: excluded
        public let burstablePerformance: BurstablePerformance?
        /// The CPU manufacturers to include.   For instance types with Intel CPUs, specify intel.   For instance types with AMD CPUs, specify amd.   For instance types with Amazon Web Services CPUs, specify amazon-web-services.    Don't confuse the CPU manufacturer with the CPU architecture. Instances will  be launched with a compatible CPU architecture based on the Amazon Machine Image (AMI) that you  specify in your launch template.  Default: Any manufacturer
        @OptionalCustomCoding<EC2ArrayCoder<_CpuManufacturersEncoding, CpuManufacturer>>
        public var cpuManufacturers: [CpuManufacturer]?
        /// The instance types to exclude. You can use strings with one or more wild cards, represented by an asterisk (*), to exclude an instance family, type, size, or generation. The following are examples: m5.8xlarge, c5*.*, m5a.*, r*, *3*. For example, if you specify c5*,Amazon EC2 will exclude the entire C5 instance family, which includes all C5a and C5n instance types. If you specify m5a.*, Amazon EC2 will exclude all the M5a instance types, but not the M5n instance types.  If you specify ExcludedInstanceTypes, you can't specify AllowedInstanceTypes.  Default: No excluded instance types
        @OptionalCustomCoding<EC2ArrayCoder<_ExcludedInstanceTypesEncoding, String>>
        public var excludedInstanceTypes: [String]?
        /// Indicates whether current or previous generation instance types are included. The current generation instance types are recommended for use. Current generation instance types are typically the latest two to three generations in each instance family. For more information, see Instance types in the Amazon EC2 User Guide. For current generation instance types, specify current. For previous generation instance types, specify previous. Default: Current and previous generation instance types
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceGenerationsEncoding, InstanceGeneration>>
        public var instanceGenerations: [InstanceGeneration]?
        /// Indicates whether instance types with instance store volumes are included, excluded, or required. For more information, Amazon EC2 instance store in the Amazon EC2 User Guide.   To include instance types with instance store volumes, specify included.   To require only instance types with instance store volumes, specify required.   To exclude instance types with instance store volumes, specify excluded.   Default: included
        public let localStorage: LocalStorage?
        /// The type of local storage that is required.   For instance types with hard disk drive (HDD) storage, specify hdd.   For instance types with solid state drive (SSD) storage, specify ssd.   Default: hdd and ssd
        @OptionalCustomCoding<EC2ArrayCoder<_LocalStorageTypesEncoding, LocalStorageType>>
        public var localStorageTypes: [LocalStorageType]?
        /// [Price protection] The price protection threshold for Spot Instances, as a percentage of an identified On-Demand price. The identified On-Demand price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. If no current generation C, M, or R instance type matches your attributes, then the identified price is from the lowest priced current generation instance types, and failing that, from the lowest priced previous generation instance types that match your attributes. When Amazon EC2 selects instance types with your attributes, it will exclude instance types whose price exceeds your specified threshold. The parameter accepts an integer, which Amazon EC2 interprets as a percentage. If you set DesiredCapacityType to vcpu or memory-mib, the price protection threshold is based on the per vCPU or per memory price instead of the per instance price.  Only one of SpotMaxPricePercentageOverLowestPrice or MaxSpotPriceAsPercentageOfOptimalOnDemandPrice can be specified. If you don't specify either, Amazon EC2 will automatically apply optimal price protection to consistently select from a wide range of instance types. To indicate no price protection threshold for Spot Instances, meaning you want to consider all instance types that match your attributes, include one of these parameters and specify a high value, such as 999999.
        public let maxSpotPriceAsPercentageOfOptimalOnDemandPrice: Int?
        /// The minimum and maximum amount of memory per vCPU, in GiB. Default: No minimum or maximum limits
        public let memoryGiBPerVCpu: MemoryGiBPerVCpuRequest?
        /// The minimum and maximum amount of memory, in MiB.
        public let memoryMiB: MemoryMiBRequest?
        /// The minimum and maximum amount of baseline network bandwidth, in gigabits per second  (Gbps). For more information, see Amazon EC2 instance network bandwidth in the Amazon EC2 User Guide. Default: No minimum or maximum limits
        public let networkBandwidthGbps: NetworkBandwidthGbpsRequest?
        /// The minimum and maximum number of network interfaces. Default: No minimum or maximum limits
        public let networkInterfaceCount: NetworkInterfaceCountRequest?
        /// [Price protection] The price protection threshold for On-Demand Instances, as a percentage higher than an identified On-Demand price. The identified On-Demand price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. When Amazon EC2 selects instance types with your attributes, it will exclude instance types whose price exceeds your specified threshold. The parameter accepts an integer, which Amazon EC2 interprets as a percentage. To indicate no price protection threshold, specify a high value, such as 999999. This parameter is not supported for GetSpotPlacementScores and GetInstanceTypesFromInstanceRequirements.  If you set TargetCapacityUnitType to vcpu or memory-mib, the price protection threshold is applied based on the per-vCPU or per-memory price instead of the per-instance price.  Default: 20
        public let onDemandMaxPricePercentageOverLowestPrice: Int?
        /// Indicates whether instance types must support hibernation for On-Demand Instances. This parameter is not supported for GetSpotPlacementScores. Default: false
        public let requireHibernateSupport: Bool?
        /// [Price protection] The price protection threshold for Spot Instances, as a percentage higher than an identified Spot price. The identified Spot price is the Spot price of the lowest priced current generation C, M, or R instance type with your specified attributes. If no current generation C, M, or R instance type matches your attributes, then the identified Spot price is from the lowest priced current generation instance types, and failing that, from the lowest priced previous generation instance types that match your attributes. When Amazon EC2 selects instance types with your attributes, it will exclude instance types whose Spot price exceeds your specified threshold. The parameter accepts an integer, which Amazon EC2 interprets as a percentage. If you set TargetCapacityUnitType to vcpu or memory-mib, the price protection threshold is applied based on the per-vCPU or per-memory price instead of the per-instance price. This parameter is not supported for GetSpotPlacementScores and GetInstanceTypesFromInstanceRequirements.  Only one of SpotMaxPricePercentageOverLowestPrice or MaxSpotPriceAsPercentageOfOptimalOnDemandPrice can be specified. If you don't specify either, Amazon EC2 will automatically apply optimal price protection to consistently select from a wide range of instance types. To indicate no price protection threshold for Spot Instances, meaning you want to consider all instance types that match your attributes, include one of these parameters and specify a high value, such as 999999.  Default: 100
        public let spotMaxPricePercentageOverLowestPrice: Int?
        /// The minimum and maximum amount of total local storage, in GB. Default: No minimum or maximum limits
        public let totalLocalStorageGB: TotalLocalStorageGBRequest?
        /// The minimum and maximum number of vCPUs.
        public let vCpuCount: VCpuCountRangeRequest?

        public init(acceleratorCount: AcceleratorCountRequest? = nil, acceleratorManufacturers: [AcceleratorManufacturer]? = nil, acceleratorNames: [AcceleratorName]? = nil, acceleratorTotalMemoryMiB: AcceleratorTotalMemoryMiBRequest? = nil, acceleratorTypes: [AcceleratorType]? = nil, allowedInstanceTypes: [String]? = nil, bareMetal: BareMetal? = nil, baselineEbsBandwidthMbps: BaselineEbsBandwidthMbpsRequest? = nil, burstablePerformance: BurstablePerformance? = nil, cpuManufacturers: [CpuManufacturer]? = nil, excludedInstanceTypes: [String]? = nil, instanceGenerations: [InstanceGeneration]? = nil, localStorage: LocalStorage? = nil, localStorageTypes: [LocalStorageType]? = nil, maxSpotPriceAsPercentageOfOptimalOnDemandPrice: Int? = nil, memoryGiBPerVCpu: MemoryGiBPerVCpuRequest? = nil, memoryMiB: MemoryMiBRequest? = nil, networkBandwidthGbps: NetworkBandwidthGbpsRequest? = nil, networkInterfaceCount: NetworkInterfaceCountRequest? = nil, onDemandMaxPricePercentageOverLowestPrice: Int? = nil, requireHibernateSupport: Bool? = nil, spotMaxPricePercentageOverLowestPrice: Int? = nil, totalLocalStorageGB: TotalLocalStorageGBRequest? = nil, vCpuCount: VCpuCountRangeRequest? = nil) {
            self.acceleratorCount = acceleratorCount
            self.acceleratorManufacturers = acceleratorManufacturers
            self.acceleratorNames = acceleratorNames
            self.acceleratorTotalMemoryMiB = acceleratorTotalMemoryMiB
            self.acceleratorTypes = acceleratorTypes
            self.allowedInstanceTypes = allowedInstanceTypes
            self.bareMetal = bareMetal
            self.baselineEbsBandwidthMbps = baselineEbsBandwidthMbps
            self.burstablePerformance = burstablePerformance
            self.cpuManufacturers = cpuManufacturers
            self.excludedInstanceTypes = excludedInstanceTypes
            self.instanceGenerations = instanceGenerations
            self.localStorage = localStorage
            self.localStorageTypes = localStorageTypes
            self.maxSpotPriceAsPercentageOfOptimalOnDemandPrice = maxSpotPriceAsPercentageOfOptimalOnDemandPrice
            self.memoryGiBPerVCpu = memoryGiBPerVCpu
            self.memoryMiB = memoryMiB
            self.networkBandwidthGbps = networkBandwidthGbps
            self.networkInterfaceCount = networkInterfaceCount
            self.onDemandMaxPricePercentageOverLowestPrice = onDemandMaxPricePercentageOverLowestPrice
            self.requireHibernateSupport = requireHibernateSupport
            self.spotMaxPricePercentageOverLowestPrice = spotMaxPricePercentageOverLowestPrice
            self.totalLocalStorageGB = totalLocalStorageGB
            self.vCpuCount = vCpuCount
        }

        public func validate(name: String) throws {
            try self.allowedInstanceTypes?.forEach {
                try validate($0, name: "allowedInstanceTypes[]", parent: name, max: 30)
                try validate($0, name: "allowedInstanceTypes[]", parent: name, min: 1)
                try validate($0, name: "allowedInstanceTypes[]", parent: name, pattern: "^[a-zA-Z0-9\\.\\*\\-]+$")
            }
            try self.validate(self.allowedInstanceTypes, name: "allowedInstanceTypes", parent: name, max: 400)
            try self.excludedInstanceTypes?.forEach {
                try validate($0, name: "excludedInstanceTypes[]", parent: name, max: 30)
                try validate($0, name: "excludedInstanceTypes[]", parent: name, min: 1)
                try validate($0, name: "excludedInstanceTypes[]", parent: name, pattern: "^[a-zA-Z0-9\\.\\*\\-]+$")
            }
            try self.validate(self.excludedInstanceTypes, name: "excludedInstanceTypes", parent: name, max: 400)
        }

        private enum CodingKeys: String, CodingKey {
            case acceleratorCount = "AcceleratorCount"
            case acceleratorManufacturers = "AcceleratorManufacturer"
            case acceleratorNames = "AcceleratorName"
            case acceleratorTotalMemoryMiB = "AcceleratorTotalMemoryMiB"
            case acceleratorTypes = "AcceleratorType"
            case allowedInstanceTypes = "AllowedInstanceType"
            case bareMetal = "BareMetal"
            case baselineEbsBandwidthMbps = "BaselineEbsBandwidthMbps"
            case burstablePerformance = "BurstablePerformance"
            case cpuManufacturers = "CpuManufacturer"
            case excludedInstanceTypes = "ExcludedInstanceType"
            case instanceGenerations = "InstanceGeneration"
            case localStorage = "LocalStorage"
            case localStorageTypes = "LocalStorageType"
            case maxSpotPriceAsPercentageOfOptimalOnDemandPrice = "MaxSpotPriceAsPercentageOfOptimalOnDemandPrice"
            case memoryGiBPerVCpu = "MemoryGiBPerVCpu"
            case memoryMiB = "MemoryMiB"
            case networkBandwidthGbps = "NetworkBandwidthGbps"
            case networkInterfaceCount = "NetworkInterfaceCount"
            case onDemandMaxPricePercentageOverLowestPrice = "OnDemandMaxPricePercentageOverLowestPrice"
            case requireHibernateSupport = "RequireHibernateSupport"
            case spotMaxPricePercentageOverLowestPrice = "SpotMaxPricePercentageOverLowestPrice"
            case totalLocalStorageGB = "TotalLocalStorageGB"
            case vCpuCount = "VCpuCount"
        }
    }

    public struct InstanceRequirementsWithMetadataRequest: AWSEncodableShape {
        public struct _ArchitectureTypesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _VirtualizationTypesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The architecture type.
        @OptionalCustomCoding<EC2ArrayCoder<_ArchitectureTypesEncoding, ArchitectureType>>
        public var architectureTypes: [ArchitectureType]?
        /// The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with those attributes.
        public let instanceRequirements: InstanceRequirementsRequest?
        /// The virtualization type.
        @OptionalCustomCoding<EC2ArrayCoder<_VirtualizationTypesEncoding, VirtualizationType>>
        public var virtualizationTypes: [VirtualizationType]?

        public init(architectureTypes: [ArchitectureType]? = nil, instanceRequirements: InstanceRequirementsRequest? = nil, virtualizationTypes: [VirtualizationType]? = nil) {
            self.architectureTypes = architectureTypes
            self.instanceRequirements = instanceRequirements
            self.virtualizationTypes = virtualizationTypes
        }

        public func validate(name: String) throws {
            try self.validate(self.architectureTypes, name: "architectureTypes", parent: name, max: 3)
            try self.instanceRequirements?.validate(name: "\(name).instanceRequirements")
            try self.validate(self.virtualizationTypes, name: "virtualizationTypes", parent: name, max: 2)
        }

        private enum CodingKeys: String, CodingKey {
            case architectureTypes = "ArchitectureType"
            case instanceRequirements = "InstanceRequirements"
            case virtualizationTypes = "VirtualizationType"
        }
    }

    public struct InstanceSpecification: AWSEncodableShape {
        public struct _ExcludeDataVolumeIdsEncoding: ArrayCoderProperties { public static let member = "VolumeId" }

        /// Excludes the root volume from being snapshotted.
        public let excludeBootVolume: Bool?
        /// The IDs of the data (non-root) volumes to exclude from the multi-volume snapshot set.  If you specify the ID of the root volume, the request fails. To exclude the root volume,  use ExcludeBootVolume. You can specify up to 40 volume IDs per request.
        @OptionalCustomCoding<EC2ArrayCoder<_ExcludeDataVolumeIdsEncoding, String>>
        public var excludeDataVolumeIds: [String]?
        /// The instance to specify which volumes should be snapshotted.
        public let instanceId: String?

        public init(excludeBootVolume: Bool? = nil, excludeDataVolumeIds: [String]? = nil, instanceId: String? = nil) {
            self.excludeBootVolume = excludeBootVolume
            self.excludeDataVolumeIds = excludeDataVolumeIds
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case excludeBootVolume = "ExcludeBootVolume"
            case excludeDataVolumeIds = "ExcludeDataVolumeId"
            case instanceId = "InstanceId"
        }
    }

    public struct InstanceState: AWSDecodableShape {
        /// The state of the instance as a 16-bit unsigned integer.  The high byte is all of the bits between 2^8 and (2^16)-1, which equals decimal values between 256 and 65,535. These numerical values are used for internal purposes and should be ignored. The low byte is all of the bits between 2^0 and (2^8)-1, which equals decimal values between 0 and 255.  The valid values for instance-state-code will all be in the range of the low byte and they are:    0 : pending     16 : running     32 : shutting-down     48 : terminated     64 : stopping     80 : stopped    You can ignore the high byte value by zeroing out all of the bits above 2^8 or 256 in decimal.
        public let code: Int?
        /// The current state of the instance.
        public let name: InstanceStateName?

        public init(code: Int? = nil, name: InstanceStateName? = nil) {
            self.code = code
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case name = "name"
        }
    }

    public struct InstanceStateChange: AWSDecodableShape {
        /// The current state of the instance.
        public let currentState: InstanceState?
        /// The ID of the instance.
        public let instanceId: String?
        /// The previous state of the instance.
        public let previousState: InstanceState?

        public init(currentState: InstanceState? = nil, instanceId: String? = nil, previousState: InstanceState? = nil) {
            self.currentState = currentState
            self.instanceId = instanceId
            self.previousState = previousState
        }

        private enum CodingKeys: String, CodingKey {
            case currentState = "currentState"
            case instanceId = "instanceId"
            case previousState = "previousState"
        }
    }

    public struct InstanceStatus: AWSDecodableShape {
        public struct _EventsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Availability Zone of the instance.
        public let availabilityZone: String?
        /// Any scheduled events associated with the instance.
        @OptionalCustomCoding<EC2ArrayCoder<_EventsEncoding, InstanceStatusEvent>>
        public var events: [InstanceStatusEvent]?
        /// The ID of the instance.
        public let instanceId: String?
        /// The intended state of the instance. DescribeInstanceStatus requires that an instance be in the running state.
        public let instanceState: InstanceState?
        /// Reports impaired functionality that stems from issues internal to the instance, such as impaired reachability.
        public let instanceStatus: InstanceStatusSummary?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// Reports impaired functionality that stems from issues related to the systems that support an instance, such as hardware failures and network connectivity problems.
        public let systemStatus: InstanceStatusSummary?

        public init(availabilityZone: String? = nil, events: [InstanceStatusEvent]? = nil, instanceId: String? = nil, instanceState: InstanceState? = nil, instanceStatus: InstanceStatusSummary? = nil, outpostArn: String? = nil, systemStatus: InstanceStatusSummary? = nil) {
            self.availabilityZone = availabilityZone
            self.events = events
            self.instanceId = instanceId
            self.instanceState = instanceState
            self.instanceStatus = instanceStatus
            self.outpostArn = outpostArn
            self.systemStatus = systemStatus
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case events = "eventsSet"
            case instanceId = "instanceId"
            case instanceState = "instanceState"
            case instanceStatus = "instanceStatus"
            case outpostArn = "outpostArn"
            case systemStatus = "systemStatus"
        }
    }

    public struct InstanceStatusDetails: AWSDecodableShape {
        /// The time when a status check failed. For an instance that was launched and impaired, this is the time when the instance was launched.
        public let impairedSince: Date?
        /// The type of instance status.
        public let name: StatusName?
        /// The status.
        public let status: StatusType?

        public init(impairedSince: Date? = nil, name: StatusName? = nil, status: StatusType? = nil) {
            self.impairedSince = impairedSince
            self.name = name
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case impairedSince = "impairedSince"
            case name = "name"
            case status = "status"
        }
    }

    public struct InstanceStatusEvent: AWSDecodableShape {
        /// The event code.
        public let code: EventCode?
        /// A description of the event. After a scheduled event is completed, it can still be described for up to a week. If the event has been completed, this description starts with the following text: [Completed].
        public let description: String?
        /// The ID of the event.
        public let instanceEventId: String?
        /// The latest scheduled end time for the event.
        public let notAfter: Date?
        /// The earliest scheduled start time for the event.
        public let notBefore: Date?
        /// The deadline for starting the event.
        public let notBeforeDeadline: Date?

        public init(code: EventCode? = nil, description: String? = nil, instanceEventId: String? = nil, notAfter: Date? = nil, notBefore: Date? = nil, notBeforeDeadline: Date? = nil) {
            self.code = code
            self.description = description
            self.instanceEventId = instanceEventId
            self.notAfter = notAfter
            self.notBefore = notBefore
            self.notBeforeDeadline = notBeforeDeadline
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case description = "description"
            case instanceEventId = "instanceEventId"
            case notAfter = "notAfter"
            case notBefore = "notBefore"
            case notBeforeDeadline = "notBeforeDeadline"
        }
    }

    public struct InstanceStatusSummary: AWSDecodableShape {
        public struct _DetailsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The system instance health or application instance health.
        @OptionalCustomCoding<EC2ArrayCoder<_DetailsEncoding, InstanceStatusDetails>>
        public var details: [InstanceStatusDetails]?
        /// The status.
        public let status: SummaryStatus?

        public init(details: [InstanceStatusDetails]? = nil, status: SummaryStatus? = nil) {
            self.details = details
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case details = "details"
            case status = "status"
        }
    }

    public struct InstanceStorageInfo: AWSDecodableShape {
        public struct _DisksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Describes the disks that are available for the instance type.
        @OptionalCustomCoding<EC2ArrayCoder<_DisksEncoding, DiskInfo>>
        public var disks: [DiskInfo]?
        /// Indicates whether data is encrypted at rest.
        public let encryptionSupport: InstanceStorageEncryptionSupport?
        /// Indicates whether non-volatile memory express (NVMe) is supported.
        public let nvmeSupport: EphemeralNvmeSupport?
        /// The total size of the disks, in GB.
        public let totalSizeInGB: Int64?

        public init(disks: [DiskInfo]? = nil, encryptionSupport: InstanceStorageEncryptionSupport? = nil, nvmeSupport: EphemeralNvmeSupport? = nil, totalSizeInGB: Int64? = nil) {
            self.disks = disks
            self.encryptionSupport = encryptionSupport
            self.nvmeSupport = nvmeSupport
            self.totalSizeInGB = totalSizeInGB
        }

        private enum CodingKeys: String, CodingKey {
            case disks = "disks"
            case encryptionSupport = "encryptionSupport"
            case nvmeSupport = "nvmeSupport"
            case totalSizeInGB = "totalSizeInGB"
        }
    }

    public struct InstanceTagNotificationAttribute: AWSDecodableShape {
        public struct _InstanceTagKeysEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates wheter all tag keys in the current Region are registered to appear in scheduled event notifications.  	true indicates that all tag keys in the current Region are registered.
        public let includeAllTagsOfInstance: Bool?
        /// The registered tag keys.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceTagKeysEncoding, String>>
        public var instanceTagKeys: [String]?

        public init(includeAllTagsOfInstance: Bool? = nil, instanceTagKeys: [String]? = nil) {
            self.includeAllTagsOfInstance = includeAllTagsOfInstance
            self.instanceTagKeys = instanceTagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case includeAllTagsOfInstance = "includeAllTagsOfInstance"
            case instanceTagKeys = "instanceTagKeySet"
        }
    }

    public struct InstanceTopology: AWSDecodableShape {
        public struct _NetworkNodesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The name of the Availability Zone or Local Zone that the instance is in.
        public let availabilityZone: String?
        /// The name of the placement group that the instance is in.
        public let groupName: String?
        /// The instance ID.
        public let instanceId: String?
        /// The instance type.
        public let instanceType: String?
        /// The network nodes. The nodes are hashed based on your account. Instances from different accounts running under the same server will return a different hashed list of strings.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkNodesEncoding, String>>
        public var networkNodes: [String]?
        /// The ID of the Availability Zone or Local Zone that the instance is in.
        public let zoneId: String?

        public init(availabilityZone: String? = nil, groupName: String? = nil, instanceId: String? = nil, instanceType: String? = nil, networkNodes: [String]? = nil, zoneId: String? = nil) {
            self.availabilityZone = availabilityZone
            self.groupName = groupName
            self.instanceId = instanceId
            self.instanceType = instanceType
            self.networkNodes = networkNodes
            self.zoneId = zoneId
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case groupName = "groupName"
            case instanceId = "instanceId"
            case instanceType = "instanceType"
            case networkNodes = "networkNodeSet"
            case zoneId = "zoneId"
        }
    }

    public struct InstanceTypeInfo: AWSDecodableShape {
        public struct _SupportedBootModesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SupportedRootDeviceTypesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SupportedUsageClassesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SupportedVirtualizationTypesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether Amazon CloudWatch action based recovery is supported.
        public let autoRecoverySupported: Bool?
        /// Indicates whether the instance is a bare metal instance type.
        public let bareMetal: Bool?
        /// Indicates whether the instance type is a burstable performance T instance  type. For more information, see Burstable  performance instances.
        public let burstablePerformanceSupported: Bool?
        /// Indicates whether the instance type is current generation.
        public let currentGeneration: Bool?
        /// Indicates whether Dedicated Hosts are supported on the instance type.
        public let dedicatedHostsSupported: Bool?
        /// Describes the Amazon EBS settings for the instance type.
        public let ebsInfo: EbsInfo?
        /// Describes the FPGA accelerator settings for the instance type.
        public let fpgaInfo: FpgaInfo?
        /// Indicates whether the instance type is eligible for the free tier.
        public let freeTierEligible: Bool?
        /// Describes the GPU accelerator settings for the instance type.
        public let gpuInfo: GpuInfo?
        /// Indicates whether On-Demand hibernation is supported.
        public let hibernationSupported: Bool?
        /// The hypervisor for the instance type.
        public let hypervisor: InstanceTypeHypervisor?
        /// Describes the Inference accelerator settings for the instance type.
        public let inferenceAcceleratorInfo: InferenceAcceleratorInfo?
        /// Describes the instance storage for the instance type.
        public let instanceStorageInfo: InstanceStorageInfo?
        /// Indicates whether instance storage is supported.
        public let instanceStorageSupported: Bool?
        /// The instance type. For more information, see Instance types in the Amazon EC2 User Guide.
        public let instanceType: InstanceType?
        /// Describes the media accelerator settings for the instance type.
        public let mediaAcceleratorInfo: MediaAcceleratorInfo?
        /// Describes the memory for the instance type.
        public let memoryInfo: MemoryInfo?
        /// Describes the network settings for the instance type.
        public let networkInfo: NetworkInfo?
        /// Describes the Neuron accelerator settings for the instance type.
        public let neuronInfo: NeuronInfo?
        /// Indicates whether Nitro Enclaves is supported.
        public let nitroEnclavesSupport: NitroEnclavesSupport?
        /// Describes the supported NitroTPM versions for the instance type.
        public let nitroTpmInfo: NitroTpmInfo?
        /// Indicates whether NitroTPM is supported.
        public let nitroTpmSupport: NitroTpmSupport?
        /// Describes the placement group settings for the instance type.
        public let placementGroupInfo: PlacementGroupInfo?
        /// Describes the processor.
        public let processorInfo: ProcessorInfo?
        /// The supported boot modes. For more information, see Boot modes in the Amazon EC2 User Guide.
        @OptionalCustomCoding<EC2ArrayCoder<_SupportedBootModesEncoding, BootModeType>>
        public var supportedBootModes: [BootModeType]?
        /// The supported root device types.
        @OptionalCustomCoding<EC2ArrayCoder<_SupportedRootDeviceTypesEncoding, RootDeviceType>>
        public var supportedRootDeviceTypes: [RootDeviceType]?
        /// Indicates whether the instance type is offered for spot or On-Demand.
        @OptionalCustomCoding<EC2ArrayCoder<_SupportedUsageClassesEncoding, UsageClassType>>
        public var supportedUsageClasses: [UsageClassType]?
        /// The supported virtualization types.
        @OptionalCustomCoding<EC2ArrayCoder<_SupportedVirtualizationTypesEncoding, VirtualizationType>>
        public var supportedVirtualizationTypes: [VirtualizationType]?
        /// Describes the vCPU configurations for the instance type.
        public let vCpuInfo: VCpuInfo?

        public init(autoRecoverySupported: Bool? = nil, bareMetal: Bool? = nil, burstablePerformanceSupported: Bool? = nil, currentGeneration: Bool? = nil, dedicatedHostsSupported: Bool? = nil, ebsInfo: EbsInfo? = nil, fpgaInfo: FpgaInfo? = nil, freeTierEligible: Bool? = nil, gpuInfo: GpuInfo? = nil, hibernationSupported: Bool? = nil, hypervisor: InstanceTypeHypervisor? = nil, inferenceAcceleratorInfo: InferenceAcceleratorInfo? = nil, instanceStorageInfo: InstanceStorageInfo? = nil, instanceStorageSupported: Bool? = nil, instanceType: InstanceType? = nil, mediaAcceleratorInfo: MediaAcceleratorInfo? = nil, memoryInfo: MemoryInfo? = nil, networkInfo: NetworkInfo? = nil, neuronInfo: NeuronInfo? = nil, nitroEnclavesSupport: NitroEnclavesSupport? = nil, nitroTpmInfo: NitroTpmInfo? = nil, nitroTpmSupport: NitroTpmSupport? = nil, placementGroupInfo: PlacementGroupInfo? = nil, processorInfo: ProcessorInfo? = nil, supportedBootModes: [BootModeType]? = nil, supportedRootDeviceTypes: [RootDeviceType]? = nil, supportedUsageClasses: [UsageClassType]? = nil, supportedVirtualizationTypes: [VirtualizationType]? = nil, vCpuInfo: VCpuInfo? = nil) {
            self.autoRecoverySupported = autoRecoverySupported
            self.bareMetal = bareMetal
            self.burstablePerformanceSupported = burstablePerformanceSupported
            self.currentGeneration = currentGeneration
            self.dedicatedHostsSupported = dedicatedHostsSupported
            self.ebsInfo = ebsInfo
            self.fpgaInfo = fpgaInfo
            self.freeTierEligible = freeTierEligible
            self.gpuInfo = gpuInfo
            self.hibernationSupported = hibernationSupported
            self.hypervisor = hypervisor
            self.inferenceAcceleratorInfo = inferenceAcceleratorInfo
            self.instanceStorageInfo = instanceStorageInfo
            self.instanceStorageSupported = instanceStorageSupported
            self.instanceType = instanceType
            self.mediaAcceleratorInfo = mediaAcceleratorInfo
            self.memoryInfo = memoryInfo
            self.networkInfo = networkInfo
            self.neuronInfo = neuronInfo
            self.nitroEnclavesSupport = nitroEnclavesSupport
            self.nitroTpmInfo = nitroTpmInfo
            self.nitroTpmSupport = nitroTpmSupport
            self.placementGroupInfo = placementGroupInfo
            self.processorInfo = processorInfo
            self.supportedBootModes = supportedBootModes
            self.supportedRootDeviceTypes = supportedRootDeviceTypes
            self.supportedUsageClasses = supportedUsageClasses
            self.supportedVirtualizationTypes = supportedVirtualizationTypes
            self.vCpuInfo = vCpuInfo
        }

        private enum CodingKeys: String, CodingKey {
            case autoRecoverySupported = "autoRecoverySupported"
            case bareMetal = "bareMetal"
            case burstablePerformanceSupported = "burstablePerformanceSupported"
            case currentGeneration = "currentGeneration"
            case dedicatedHostsSupported = "dedicatedHostsSupported"
            case ebsInfo = "ebsInfo"
            case fpgaInfo = "fpgaInfo"
            case freeTierEligible = "freeTierEligible"
            case gpuInfo = "gpuInfo"
            case hibernationSupported = "hibernationSupported"
            case hypervisor = "hypervisor"
            case inferenceAcceleratorInfo = "inferenceAcceleratorInfo"
            case instanceStorageInfo = "instanceStorageInfo"
            case instanceStorageSupported = "instanceStorageSupported"
            case instanceType = "instanceType"
            case mediaAcceleratorInfo = "mediaAcceleratorInfo"
            case memoryInfo = "memoryInfo"
            case networkInfo = "networkInfo"
            case neuronInfo = "neuronInfo"
            case nitroEnclavesSupport = "nitroEnclavesSupport"
            case nitroTpmInfo = "nitroTpmInfo"
            case nitroTpmSupport = "nitroTpmSupport"
            case placementGroupInfo = "placementGroupInfo"
            case processorInfo = "processorInfo"
            case supportedBootModes = "supportedBootModes"
            case supportedRootDeviceTypes = "supportedRootDeviceTypes"
            case supportedUsageClasses = "supportedUsageClasses"
            case supportedVirtualizationTypes = "supportedVirtualizationTypes"
            case vCpuInfo = "vCpuInfo"
        }
    }

    public struct InstanceTypeInfoFromInstanceRequirements: AWSDecodableShape {
        /// The matching instance type.
        public let instanceType: String?

        public init(instanceType: String? = nil) {
            self.instanceType = instanceType
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "instanceType"
        }
    }

    public struct InstanceTypeOffering: AWSDecodableShape {
        /// The instance type. For more information, see Instance types in the Amazon EC2 User Guide.
        public let instanceType: InstanceType?
        /// The identifier for the location. This depends on the location type. For example, if the location type is region, the location is the Region code (for example, us-east-2.)
        public let location: String?
        /// The location type.
        public let locationType: LocationType?

        public init(instanceType: InstanceType? = nil, location: String? = nil, locationType: LocationType? = nil) {
            self.instanceType = instanceType
            self.location = location
            self.locationType = locationType
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "instanceType"
            case location = "location"
            case locationType = "locationType"
        }
    }

    public struct InstanceUsage: AWSDecodableShape {
        /// The ID of the Amazon Web Services account that is making use of the Capacity Reservation.
        public let accountId: String?
        /// The number of instances the Amazon Web Services account currently has in the Capacity Reservation.
        public let usedInstanceCount: Int?

        public init(accountId: String? = nil, usedInstanceCount: Int? = nil) {
            self.accountId = accountId
            self.usedInstanceCount = usedInstanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case usedInstanceCount = "usedInstanceCount"
        }
    }

    public struct IntegrateServices: AWSEncodableShape {
        public struct _AthenaIntegrationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the integration with Amazon Athena.
        @OptionalCustomCoding<EC2ArrayCoder<_AthenaIntegrationsEncoding, AthenaIntegration>>
        public var athenaIntegrations: [AthenaIntegration]?

        public init(athenaIntegrations: [AthenaIntegration]? = nil) {
            self.athenaIntegrations = athenaIntegrations
        }

        public func validate(name: String) throws {
            try self.validate(self.athenaIntegrations, name: "athenaIntegrations", parent: name, max: 10)
            try self.validate(self.athenaIntegrations, name: "athenaIntegrations", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case athenaIntegrations = "AthenaIntegration"
        }
    }

    public struct InternetGateway: AWSDecodableShape {
        public struct _AttachmentsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Any VPCs attached to the internet gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_AttachmentsEncoding, InternetGatewayAttachment>>
        public var attachments: [InternetGatewayAttachment]?
        /// The ID of the internet gateway.
        public let internetGatewayId: String?
        /// The ID of the Amazon Web Services account that owns the internet gateway.
        public let ownerId: String?
        /// Any tags assigned to the internet gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(attachments: [InternetGatewayAttachment]? = nil, internetGatewayId: String? = nil, ownerId: String? = nil, tags: [Tag]? = nil) {
            self.attachments = attachments
            self.internetGatewayId = internetGatewayId
            self.ownerId = ownerId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case attachments = "attachmentSet"
            case internetGatewayId = "internetGatewayId"
            case ownerId = "ownerId"
            case tags = "tagSet"
        }
    }

    public struct InternetGatewayAttachment: AWSDecodableShape {
        /// The current state of the attachment. For an internet gateway, the state is
        /// 				available when attached to a VPC; otherwise, this value is not
        /// 			returned.
        public let state: AttachmentStatus?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(state: AttachmentStatus? = nil, vpcId: String? = nil) {
            self.state = state
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case vpcId = "vpcId"
        }
    }

    public struct IpPermission: AWSEncodableShape & AWSDecodableShape {
        public struct _IpRangesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv6RangesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PrefixListIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _UserIdGroupPairsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// If the protocol is TCP or UDP, this is the start of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP type or -1 (all ICMP types).
        public let fromPort: Int?
        /// The IP protocol name (tcp, udp, icmp, icmpv6)  or number (see Protocol Numbers). Use -1 to specify all protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or icmpv6 allows traffic on all ports, regardless of any port range you specify. For tcp, udp, and icmp, you must specify a port range. For icmpv6, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
        public let ipProtocol: String?
        /// The IPv4 address ranges.
        @OptionalCustomCoding<EC2ArrayCoder<_IpRangesEncoding, IpRange>>
        public var ipRanges: [IpRange]?
        /// The IPv6 address ranges.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv6RangesEncoding, Ipv6Range>>
        public var ipv6Ranges: [Ipv6Range]?
        /// The prefix list IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_PrefixListIdsEncoding, PrefixListId>>
        public var prefixListIds: [PrefixListId]?
        /// If the protocol is TCP or UDP, this is the end of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP code or -1 (all ICMP codes).  If the start port is -1 (all ICMP types), then the end port must be -1 (all ICMP codes).
        public let toPort: Int?
        /// The security group and Amazon Web Services account ID pairs.
        @OptionalCustomCoding<EC2ArrayCoder<_UserIdGroupPairsEncoding, UserIdGroupPair>>
        public var userIdGroupPairs: [UserIdGroupPair]?

        public init(fromPort: Int? = nil, ipProtocol: String? = nil, ipRanges: [IpRange]? = nil, ipv6Ranges: [Ipv6Range]? = nil, prefixListIds: [PrefixListId]? = nil, toPort: Int? = nil, userIdGroupPairs: [UserIdGroupPair]? = nil) {
            self.fromPort = fromPort
            self.ipProtocol = ipProtocol
            self.ipRanges = ipRanges
            self.ipv6Ranges = ipv6Ranges
            self.prefixListIds = prefixListIds
            self.toPort = toPort
            self.userIdGroupPairs = userIdGroupPairs
        }

        private enum CodingKeys: String, CodingKey {
            case fromPort = "fromPort"
            case ipProtocol = "ipProtocol"
            case ipRanges = "ipRanges"
            case ipv6Ranges = "ipv6Ranges"
            case prefixListIds = "prefixListIds"
            case toPort = "toPort"
            case userIdGroupPairs = "groups"
        }
    }

    public struct IpRange: AWSEncodableShape & AWSDecodableShape {
        /// The IPv4 address range. You can either specify a CIDR block or a source security group, not both. To specify a single IPv4 address, use the /32 prefix length.
        public let cidrIp: String?
        /// A description for the security group rule that references this IPv4 address range. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
        public let description: String?

        public init(cidrIp: String? = nil, description: String? = nil) {
            self.cidrIp = cidrIp
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIp = "cidrIp"
            case description = "description"
        }
    }

    public struct Ipam: AWSDecodableShape {
        public struct _OperatingRegionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IPAM's default resource discovery association ID.
        public let defaultResourceDiscoveryAssociationId: String?
        /// The IPAM's default resource discovery ID.
        public let defaultResourceDiscoveryId: String?
        /// The description for the IPAM.
        public let description: String?
        /// The Amazon Resource Name (ARN) of the IPAM.
        public let ipamArn: String?
        /// The ID of the IPAM.
        public let ipamId: String?
        /// The Amazon Web Services Region of the IPAM.
        public let ipamRegion: String?
        /// The operating Regions for an IPAM. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions. For more information about operating Regions, see Create an IPAM in the Amazon VPC IPAM User Guide.
        @OptionalCustomCoding<EC2ArrayCoder<_OperatingRegionsEncoding, IpamOperatingRegion>>
        public var operatingRegions: [IpamOperatingRegion]?
        /// The Amazon Web Services account ID of the owner of the IPAM.
        public let ownerId: String?
        /// The ID of the IPAM's default private scope.
        public let privateDefaultScopeId: String?
        /// The ID of the IPAM's default public scope.
        public let publicDefaultScopeId: String?
        /// The IPAM's resource discovery association count.
        public let resourceDiscoveryAssociationCount: Int?
        /// The number of scopes in the IPAM. The scope quota is 5. For more information on quotas, see Quotas in IPAM in the Amazon VPC IPAM User Guide.
        public let scopeCount: Int?
        /// The state of the IPAM.
        public let state: IpamState?
        /// The state message.
        public let stateMessage: String?
        /// The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// IPAM is offered in a Free Tier and an Advanced Tier. For more information about the features available in each tier and the costs associated with the tiers, see Amazon VPC pricing > IPAM tab.
        public let tier: IpamTier?

        public init(defaultResourceDiscoveryAssociationId: String? = nil, defaultResourceDiscoveryId: String? = nil, description: String? = nil, ipamArn: String? = nil, ipamId: String? = nil, ipamRegion: String? = nil, operatingRegions: [IpamOperatingRegion]? = nil, ownerId: String? = nil, privateDefaultScopeId: String? = nil, publicDefaultScopeId: String? = nil, resourceDiscoveryAssociationCount: Int? = nil, scopeCount: Int? = nil, state: IpamState? = nil, stateMessage: String? = nil, tags: [Tag]? = nil, tier: IpamTier? = nil) {
            self.defaultResourceDiscoveryAssociationId = defaultResourceDiscoveryAssociationId
            self.defaultResourceDiscoveryId = defaultResourceDiscoveryId
            self.description = description
            self.ipamArn = ipamArn
            self.ipamId = ipamId
            self.ipamRegion = ipamRegion
            self.operatingRegions = operatingRegions
            self.ownerId = ownerId
            self.privateDefaultScopeId = privateDefaultScopeId
            self.publicDefaultScopeId = publicDefaultScopeId
            self.resourceDiscoveryAssociationCount = resourceDiscoveryAssociationCount
            self.scopeCount = scopeCount
            self.state = state
            self.stateMessage = stateMessage
            self.tags = tags
            self.tier = tier
        }

        private enum CodingKeys: String, CodingKey {
            case defaultResourceDiscoveryAssociationId = "defaultResourceDiscoveryAssociationId"
            case defaultResourceDiscoveryId = "defaultResourceDiscoveryId"
            case description = "description"
            case ipamArn = "ipamArn"
            case ipamId = "ipamId"
            case ipamRegion = "ipamRegion"
            case operatingRegions = "operatingRegionSet"
            case ownerId = "ownerId"
            case privateDefaultScopeId = "privateDefaultScopeId"
            case publicDefaultScopeId = "publicDefaultScopeId"
            case resourceDiscoveryAssociationCount = "resourceDiscoveryAssociationCount"
            case scopeCount = "scopeCount"
            case state = "state"
            case stateMessage = "stateMessage"
            case tags = "tagSet"
            case tier = "tier"
        }
    }

    public struct IpamAddressHistoryRecord: AWSDecodableShape {
        /// The CIDR of the resource.
        public let resourceCidr: String?
        /// The compliance status of a resource. For more information on compliance statuses, see Monitor CIDR usage by resource in the Amazon VPC IPAM User Guide.
        public let resourceComplianceStatus: IpamComplianceStatus?
        /// The ID of the resource.
        public let resourceId: String?
        /// The name of the resource.
        public let resourceName: String?
        /// The overlap status of an IPAM resource. The overlap status tells you if the CIDR for a resource overlaps with another CIDR in the scope. For more information on overlap statuses, see Monitor CIDR usage by resource in the Amazon VPC IPAM User Guide.
        public let resourceOverlapStatus: IpamOverlapStatus?
        /// The ID of the resource owner.
        public let resourceOwnerId: String?
        /// The Amazon Web Services Region of the resource.
        public let resourceRegion: String?
        /// The type of the resource.
        public let resourceType: IpamAddressHistoryResourceType?
        /// Sampled end time of the resource-to-CIDR association within the IPAM scope. Changes are picked up in periodic snapshots, so the end time may have occurred before this specific time.
        public let sampledEndTime: Date?
        /// Sampled start time of the resource-to-CIDR association within the IPAM scope. Changes are picked up in periodic snapshots, so the start time may have occurred before this specific time.
        public let sampledStartTime: Date?
        /// The VPC ID of the resource.
        public let vpcId: String?

        public init(resourceCidr: String? = nil, resourceComplianceStatus: IpamComplianceStatus? = nil, resourceId: String? = nil, resourceName: String? = nil, resourceOverlapStatus: IpamOverlapStatus? = nil, resourceOwnerId: String? = nil, resourceRegion: String? = nil, resourceType: IpamAddressHistoryResourceType? = nil, sampledEndTime: Date? = nil, sampledStartTime: Date? = nil, vpcId: String? = nil) {
            self.resourceCidr = resourceCidr
            self.resourceComplianceStatus = resourceComplianceStatus
            self.resourceId = resourceId
            self.resourceName = resourceName
            self.resourceOverlapStatus = resourceOverlapStatus
            self.resourceOwnerId = resourceOwnerId
            self.resourceRegion = resourceRegion
            self.resourceType = resourceType
            self.sampledEndTime = sampledEndTime
            self.sampledStartTime = sampledStartTime
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceCidr = "resourceCidr"
            case resourceComplianceStatus = "resourceComplianceStatus"
            case resourceId = "resourceId"
            case resourceName = "resourceName"
            case resourceOverlapStatus = "resourceOverlapStatus"
            case resourceOwnerId = "resourceOwnerId"
            case resourceRegion = "resourceRegion"
            case resourceType = "resourceType"
            case sampledEndTime = "sampledEndTime"
            case sampledStartTime = "sampledStartTime"
            case vpcId = "vpcId"
        }
    }

    public struct IpamCidrAuthorizationContext: AWSEncodableShape {
        /// The plain-text authorization message for the prefix and account.
        public let message: String?
        /// The signed authorization message for the prefix and account.
        public let signature: String?

        public init(message: String? = nil, signature: String? = nil) {
            self.message = message
            self.signature = signature
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case signature = "Signature"
        }
    }

    public struct IpamDiscoveredAccount: AWSDecodableShape {
        /// The account ID.
        public let accountId: String?
        /// The Amazon Web Services Region that the account information is returned from.  An account can be discovered in multiple regions and will have a separate discovered account for each Region.
        public let discoveryRegion: String?
        /// The resource discovery failure reason.
        public let failureReason: IpamDiscoveryFailureReason?
        /// The last attempted resource discovery time.
        public let lastAttemptedDiscoveryTime: Date?
        /// The last successful resource discovery time.
        public let lastSuccessfulDiscoveryTime: Date?

        public init(accountId: String? = nil, discoveryRegion: String? = nil, failureReason: IpamDiscoveryFailureReason? = nil, lastAttemptedDiscoveryTime: Date? = nil, lastSuccessfulDiscoveryTime: Date? = nil) {
            self.accountId = accountId
            self.discoveryRegion = discoveryRegion
            self.failureReason = failureReason
            self.lastAttemptedDiscoveryTime = lastAttemptedDiscoveryTime
            self.lastSuccessfulDiscoveryTime = lastSuccessfulDiscoveryTime
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case discoveryRegion = "discoveryRegion"
            case failureReason = "failureReason"
            case lastAttemptedDiscoveryTime = "lastAttemptedDiscoveryTime"
            case lastSuccessfulDiscoveryTime = "lastSuccessfulDiscoveryTime"
        }
    }

    public struct IpamDiscoveredPublicAddress: AWSDecodableShape {
        public struct _SecurityGroupsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IP address.
        public let address: String?
        /// The allocation ID of the resource the IP address is assigned to.
        public let addressAllocationId: String?
        /// The ID of the owner of the resource the IP address is assigned to.
        public let addressOwnerId: String?
        /// The Region of the resource the IP address is assigned to.
        public let addressRegion: String?
        /// The IP address type.
        public let addressType: IpamPublicAddressType?
        /// The association status.
        public let associationStatus: IpamPublicAddressAssociationStatus?
        /// The instance ID of the instance the assigned IP address is assigned to.
        public let instanceId: String?
        /// The resource discovery ID.
        public let ipamResourceDiscoveryId: String?
        /// The network border group that the resource that the IP address is assigned to is in.
        public let networkBorderGroup: String?
        /// The description of the network interface that IP address is assigned to.
        public let networkInterfaceDescription: String?
        /// The network interface ID of the resource with the assigned IP address.
        public let networkInterfaceId: String?
        /// The ID of the public IPv4 pool that the resource with the assigned IP address is from.
        public let publicIpv4PoolId: String?
        /// The last successful resource discovery time.
        public let sampleTime: Date?
        /// Security groups associated with the resource that the IP address is assigned to.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupsEncoding, IpamPublicAddressSecurityGroup>>
        public var securityGroups: [IpamPublicAddressSecurityGroup]?
        /// The Amazon Web Services service associated with the IP address.
        public let service: IpamPublicAddressAwsService?
        /// The resource ARN or ID.
        public let serviceResource: String?
        /// The ID of the subnet that the resource with the assigned IP address is in.
        public let subnetId: String?
        /// Tags associated with the IP address.
        public let tags: IpamPublicAddressTags?
        /// The ID of the VPC that the resource with the assigned IP address is in.
        public let vpcId: String?

        public init(address: String? = nil, addressAllocationId: String? = nil, addressOwnerId: String? = nil, addressRegion: String? = nil, addressType: IpamPublicAddressType? = nil, associationStatus: IpamPublicAddressAssociationStatus? = nil, instanceId: String? = nil, ipamResourceDiscoveryId: String? = nil, networkBorderGroup: String? = nil, networkInterfaceDescription: String? = nil, networkInterfaceId: String? = nil, publicIpv4PoolId: String? = nil, sampleTime: Date? = nil, securityGroups: [IpamPublicAddressSecurityGroup]? = nil, service: IpamPublicAddressAwsService? = nil, serviceResource: String? = nil, subnetId: String? = nil, tags: IpamPublicAddressTags? = nil, vpcId: String? = nil) {
            self.address = address
            self.addressAllocationId = addressAllocationId
            self.addressOwnerId = addressOwnerId
            self.addressRegion = addressRegion
            self.addressType = addressType
            self.associationStatus = associationStatus
            self.instanceId = instanceId
            self.ipamResourceDiscoveryId = ipamResourceDiscoveryId
            self.networkBorderGroup = networkBorderGroup
            self.networkInterfaceDescription = networkInterfaceDescription
            self.networkInterfaceId = networkInterfaceId
            self.publicIpv4PoolId = publicIpv4PoolId
            self.sampleTime = sampleTime
            self.securityGroups = securityGroups
            self.service = service
            self.serviceResource = serviceResource
            self.subnetId = subnetId
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case address = "address"
            case addressAllocationId = "addressAllocationId"
            case addressOwnerId = "addressOwnerId"
            case addressRegion = "addressRegion"
            case addressType = "addressType"
            case associationStatus = "associationStatus"
            case instanceId = "instanceId"
            case ipamResourceDiscoveryId = "ipamResourceDiscoveryId"
            case networkBorderGroup = "networkBorderGroup"
            case networkInterfaceDescription = "networkInterfaceDescription"
            case networkInterfaceId = "networkInterfaceId"
            case publicIpv4PoolId = "publicIpv4PoolId"
            case sampleTime = "sampleTime"
            case securityGroups = "securityGroupSet"
            case service = "service"
            case serviceResource = "serviceResource"
            case subnetId = "subnetId"
            case tags = "tags"
            case vpcId = "vpcId"
        }
    }

    public struct IpamDiscoveredResourceCidr: AWSDecodableShape {
        public struct _ResourceTagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The resource discovery ID.
        public let ipamResourceDiscoveryId: String?
        /// The percentage of IP address space in use. To convert the decimal to a percentage, multiply the decimal by 100. Note the following:   For resources that are VPCs, this is the percentage of IP address space in the VPC that's taken up by subnet CIDRs.    For resources that are subnets, if the subnet has an IPv4 CIDR provisioned to it, this is the percentage of IPv4 address space in the subnet that's in use. If the subnet has an IPv6 CIDR provisioned to it, the percentage of IPv6 address space in use is not represented. The percentage of IPv6 address space in use cannot currently be calculated.    For resources that are public IPv4 pools, this is the percentage of IP address space in the pool that's been allocated to Elastic IP addresses (EIPs).
        public let ipUsage: Double?
        /// The resource CIDR.
        public let resourceCidr: String?
        /// The resource ID.
        public let resourceId: String?
        /// The resource owner ID.
        public let resourceOwnerId: String?
        /// The resource Region.
        public let resourceRegion: String?
        /// The resource tags.
        @OptionalCustomCoding<EC2ArrayCoder<_ResourceTagsEncoding, IpamResourceTag>>
        public var resourceTags: [IpamResourceTag]?
        /// The resource type.
        public let resourceType: IpamResourceType?
        /// The last successful resource discovery time.
        public let sampleTime: Date?
        /// The VPC ID.
        public let vpcId: String?

        public init(ipamResourceDiscoveryId: String? = nil, ipUsage: Double? = nil, resourceCidr: String? = nil, resourceId: String? = nil, resourceOwnerId: String? = nil, resourceRegion: String? = nil, resourceTags: [IpamResourceTag]? = nil, resourceType: IpamResourceType? = nil, sampleTime: Date? = nil, vpcId: String? = nil) {
            self.ipamResourceDiscoveryId = ipamResourceDiscoveryId
            self.ipUsage = ipUsage
            self.resourceCidr = resourceCidr
            self.resourceId = resourceId
            self.resourceOwnerId = resourceOwnerId
            self.resourceRegion = resourceRegion
            self.resourceTags = resourceTags
            self.resourceType = resourceType
            self.sampleTime = sampleTime
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case ipamResourceDiscoveryId = "ipamResourceDiscoveryId"
            case ipUsage = "ipUsage"
            case resourceCidr = "resourceCidr"
            case resourceId = "resourceId"
            case resourceOwnerId = "resourceOwnerId"
            case resourceRegion = "resourceRegion"
            case resourceTags = "resourceTagSet"
            case resourceType = "resourceType"
            case sampleTime = "sampleTime"
            case vpcId = "vpcId"
        }
    }

    public struct IpamDiscoveryFailureReason: AWSDecodableShape {
        /// The discovery failure code.    assume-role-failure - IPAM could not assume the Amazon Web Services IAM service-linked role. This could be because of any of the following:   SLR has not been created yet and IPAM is still creating it.   You have opted-out of the IPAM home Region.   Account you are using as your IPAM account has been suspended.      throttling-failure - IPAM account is already using the allotted transactions per second and IPAM is receiving a throttling error when assuming the Amazon Web Services IAM SLR.    unauthorized-failure - Amazon Web Services account making the request is not authorized. For more information, see AuthFailure in the Amazon Elastic Compute Cloud API Reference.
        public let code: IpamDiscoveryFailureCode?
        /// The discovery failure message.
        public let message: String?

        public init(code: IpamDiscoveryFailureCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct IpamOperatingRegion: AWSDecodableShape {
        /// The name of the operating Region.
        public let regionName: String?

        public init(regionName: String? = nil) {
            self.regionName = regionName
        }

        private enum CodingKeys: String, CodingKey {
            case regionName = "regionName"
        }
    }

    public struct IpamPool: AWSDecodableShape {
        public struct _AllocationResourceTagsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The address family of the pool.
        public let addressFamily: AddressFamily?
        /// The default netmask length for allocations added to this pool. If, for example, the CIDR assigned to this pool is 10.0.0.0/8 and  you enter 16 here, new allocations will default to 10.0.0.0/16.
        public let allocationDefaultNetmaskLength: Int?
        /// The maximum netmask length possible for CIDR allocations in this IPAM pool to be compliant. The maximum netmask length must be greater than the minimum netmask length. Possible netmask lengths for IPv4 addresses are 0 - 32. Possible netmask lengths for IPv6 addresses are  0 - 128.
        public let allocationMaxNetmaskLength: Int?
        /// The minimum netmask length required for CIDR allocations in this IPAM pool to be compliant. The minimum netmask length must be less than the maximum netmask length. Possible netmask lengths for IPv4 addresses are 0 - 32. Possible netmask lengths for IPv6 addresses are  0 - 128.
        public let allocationMinNetmaskLength: Int?
        /// Tags that are required for resources that use CIDRs from this IPAM pool. Resources that do not have these tags will not be allowed to allocate space from the pool. If the resources have their tags changed after they have allocated space or if the allocation tagging requirements are changed on the pool, the resource may be marked as noncompliant.
        @OptionalCustomCoding<EC2ArrayCoder<_AllocationResourceTagsEncoding, IpamResourceTag>>
        public var allocationResourceTags: [IpamResourceTag]?
        /// If selected, IPAM will continuously look for resources within the CIDR range of this pool  and automatically import them as allocations into your IPAM. The CIDRs that will be allocated for these resources must not already be allocated to other resources in order for the import to succeed. IPAM will import  a CIDR regardless of its compliance with the pool's allocation rules, so a resource might be imported and subsequently  marked as noncompliant. If IPAM discovers multiple CIDRs that overlap, IPAM will import the largest CIDR only. If IPAM  discovers multiple CIDRs with matching CIDRs, IPAM will randomly import one of them only.  A locale must be set on the pool for this feature to work.
        public let autoImport: Bool?
        /// Limits which service in Amazon Web Services that the pool can be used in. "ec2", for example, allows users to use space for Elastic IP addresses and VPCs.
        public let awsService: IpamPoolAwsService?
        /// The description of the IPAM pool.
        public let description: String?
        /// The ARN of the IPAM.
        public let ipamArn: String?
        /// The Amazon Resource Name (ARN) of the IPAM pool.
        public let ipamPoolArn: String?
        /// The ID of the IPAM pool.
        public let ipamPoolId: String?
        /// The Amazon Web Services Region of the IPAM pool.
        public let ipamRegion: String?
        /// The ARN of the scope of the IPAM pool.
        public let ipamScopeArn: String?
        /// In IPAM, a scope is the highest-level container within IPAM. An IPAM contains two default scopes. Each scope represents the IP space for a single network. The private scope is intended for all private IP address space. The public scope is intended for all public IP address space. Scopes enable you to reuse IP addresses across multiple unconnected networks without causing IP address overlap or conflict.
        public let ipamScopeType: IpamScopeType?
        /// The locale of the IPAM pool. In IPAM, the locale is the Amazon Web Services Region where you want to make an IPAM pool available for allocations. Only resources in the same Region as the locale of the pool can get IP address allocations from the pool. You can only allocate a CIDR for a VPC, for example, from an IPAM pool that shares a locale with the VPC’s Region. Note that once you choose a Locale for a pool, you cannot modify it. If you choose an Amazon Web Services Region for locale that has not been configured as an operating Region for the IPAM, you'll get an error.
        public let locale: String?
        /// The Amazon Web Services account ID of the owner of the IPAM pool.
        public let ownerId: String?
        /// The depth of pools in your IPAM pool. The pool depth quota is 10. For more information, see Quotas in IPAM in the Amazon VPC IPAM User Guide.
        public let poolDepth: Int?
        /// The IP address source for pools in the public scope. Only used for provisioning IP address CIDRs to pools in the public scope. Default is BYOIP. For more information, see Create IPv6 pools in the Amazon VPC IPAM User Guide.  By default, you can add only one Amazon-provided IPv6 CIDR block to a top-level IPv6 pool. For information on increasing the default limit, see  Quotas for your IPAM in the Amazon VPC IPAM User Guide.
        public let publicIpSource: IpamPoolPublicIpSource?
        /// Determines if a pool is publicly advertisable. This option is not available for pools with AddressFamily set to ipv4.
        public let publiclyAdvertisable: Bool?
        /// The ID of the source IPAM pool. You can use this option to create an IPAM pool within an existing source pool.
        public let sourceIpamPoolId: String?
        /// The resource used to provision CIDRs to a resource planning pool.
        public let sourceResource: IpamPoolSourceResource?
        /// The state of the IPAM pool.
        public let state: IpamPoolState?
        /// The state message.
        public let stateMessage: String?
        /// The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(addressFamily: AddressFamily? = nil, allocationDefaultNetmaskLength: Int? = nil, allocationMaxNetmaskLength: Int? = nil, allocationMinNetmaskLength: Int? = nil, allocationResourceTags: [IpamResourceTag]? = nil, autoImport: Bool? = nil, awsService: IpamPoolAwsService? = nil, description: String? = nil, ipamArn: String? = nil, ipamPoolArn: String? = nil, ipamPoolId: String? = nil, ipamRegion: String? = nil, ipamScopeArn: String? = nil, ipamScopeType: IpamScopeType? = nil, locale: String? = nil, ownerId: String? = nil, poolDepth: Int? = nil, publicIpSource: IpamPoolPublicIpSource? = nil, publiclyAdvertisable: Bool? = nil, sourceIpamPoolId: String? = nil, sourceResource: IpamPoolSourceResource? = nil, state: IpamPoolState? = nil, stateMessage: String? = nil, tags: [Tag]? = nil) {
            self.addressFamily = addressFamily
            self.allocationDefaultNetmaskLength = allocationDefaultNetmaskLength
            self.allocationMaxNetmaskLength = allocationMaxNetmaskLength
            self.allocationMinNetmaskLength = allocationMinNetmaskLength
            self.allocationResourceTags = allocationResourceTags
            self.autoImport = autoImport
            self.awsService = awsService
            self.description = description
            self.ipamArn = ipamArn
            self.ipamPoolArn = ipamPoolArn
            self.ipamPoolId = ipamPoolId
            self.ipamRegion = ipamRegion
            self.ipamScopeArn = ipamScopeArn
            self.ipamScopeType = ipamScopeType
            self.locale = locale
            self.ownerId = ownerId
            self.poolDepth = poolDepth
            self.publicIpSource = publicIpSource
            self.publiclyAdvertisable = publiclyAdvertisable
            self.sourceIpamPoolId = sourceIpamPoolId
            self.sourceResource = sourceResource
            self.state = state
            self.stateMessage = stateMessage
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case addressFamily = "addressFamily"
            case allocationDefaultNetmaskLength = "allocationDefaultNetmaskLength"
            case allocationMaxNetmaskLength = "allocationMaxNetmaskLength"
            case allocationMinNetmaskLength = "allocationMinNetmaskLength"
            case allocationResourceTags = "allocationResourceTagSet"
            case autoImport = "autoImport"
            case awsService = "awsService"
            case description = "description"
            case ipamArn = "ipamArn"
            case ipamPoolArn = "ipamPoolArn"
            case ipamPoolId = "ipamPoolId"
            case ipamRegion = "ipamRegion"
            case ipamScopeArn = "ipamScopeArn"
            case ipamScopeType = "ipamScopeType"
            case locale = "locale"
            case ownerId = "ownerId"
            case poolDepth = "poolDepth"
            case publicIpSource = "publicIpSource"
            case publiclyAdvertisable = "publiclyAdvertisable"
            case sourceIpamPoolId = "sourceIpamPoolId"
            case sourceResource = "sourceResource"
            case state = "state"
            case stateMessage = "stateMessage"
            case tags = "tagSet"
        }
    }

    public struct IpamPoolAllocation: AWSDecodableShape {
        /// The CIDR for the allocation. A CIDR is a representation of an IP address and its associated network mask (or netmask) and  refers to a range of IP addresses. An IPv4 CIDR example is 10.24.34.0/23. An IPv6 CIDR example is 2001:DB8::/32.
        public let cidr: String?
        /// A description of the pool allocation.
        public let description: String?
        /// The ID of an allocation.
        public let ipamPoolAllocationId: String?
        /// The ID of the resource.
        public let resourceId: String?
        /// The owner of the resource.
        public let resourceOwner: String?
        /// The Amazon Web Services Region of the resource.
        public let resourceRegion: String?
        /// The type of the resource.
        public let resourceType: IpamPoolAllocationResourceType?

        public init(cidr: String? = nil, description: String? = nil, ipamPoolAllocationId: String? = nil, resourceId: String? = nil, resourceOwner: String? = nil, resourceRegion: String? = nil, resourceType: IpamPoolAllocationResourceType? = nil) {
            self.cidr = cidr
            self.description = description
            self.ipamPoolAllocationId = ipamPoolAllocationId
            self.resourceId = resourceId
            self.resourceOwner = resourceOwner
            self.resourceRegion = resourceRegion
            self.resourceType = resourceType
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "cidr"
            case description = "description"
            case ipamPoolAllocationId = "ipamPoolAllocationId"
            case resourceId = "resourceId"
            case resourceOwner = "resourceOwner"
            case resourceRegion = "resourceRegion"
            case resourceType = "resourceType"
        }
    }

    public struct IpamPoolCidr: AWSDecodableShape {
        /// The CIDR provisioned to the IPAM pool. A CIDR is a representation of an IP address and its associated network mask (or netmask)  and refers to a range of IP addresses. An IPv4 CIDR example is 10.24.34.0/23. An IPv6 CIDR example is 2001:DB8::/32.
        public let cidr: String?
        /// Details related to why an IPAM pool CIDR failed to be provisioned.
        public let failureReason: IpamPoolCidrFailureReason?
        /// The IPAM pool CIDR ID.
        public let ipamPoolCidrId: String?
        /// The netmask length of the CIDR you'd like to provision to a pool. Can be used for provisioning Amazon-provided IPv6 CIDRs to top-level pools and for provisioning CIDRs to pools with source pools. Cannot be used to provision BYOIP CIDRs to top-level pools. "NetmaskLength" or "Cidr" is required.
        public let netmaskLength: Int?
        /// The state of the CIDR.
        public let state: IpamPoolCidrState?

        public init(cidr: String? = nil, failureReason: IpamPoolCidrFailureReason? = nil, ipamPoolCidrId: String? = nil, netmaskLength: Int? = nil, state: IpamPoolCidrState? = nil) {
            self.cidr = cidr
            self.failureReason = failureReason
            self.ipamPoolCidrId = ipamPoolCidrId
            self.netmaskLength = netmaskLength
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "cidr"
            case failureReason = "failureReason"
            case ipamPoolCidrId = "ipamPoolCidrId"
            case netmaskLength = "netmaskLength"
            case state = "state"
        }
    }

    public struct IpamPoolCidrFailureReason: AWSDecodableShape {
        /// An error code related to why an IPAM pool CIDR failed to be provisioned.
        public let code: IpamPoolCidrFailureCode?
        /// A message related to why an IPAM pool CIDR failed to be provisioned.
        public let message: String?

        public init(code: IpamPoolCidrFailureCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct IpamPoolSourceResource: AWSDecodableShape {
        /// The source resource ID.
        public let resourceId: String?
        /// The source resource owner.
        public let resourceOwner: String?
        /// The source resource Region.
        public let resourceRegion: String?
        /// The source resource type.
        public let resourceType: IpamPoolSourceResourceType?

        public init(resourceId: String? = nil, resourceOwner: String? = nil, resourceRegion: String? = nil, resourceType: IpamPoolSourceResourceType? = nil) {
            self.resourceId = resourceId
            self.resourceOwner = resourceOwner
            self.resourceRegion = resourceRegion
            self.resourceType = resourceType
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resourceId"
            case resourceOwner = "resourceOwner"
            case resourceRegion = "resourceRegion"
            case resourceType = "resourceType"
        }
    }

    public struct IpamPoolSourceResourceRequest: AWSEncodableShape {
        /// The source resource ID.
        public let resourceId: String?
        /// The source resource owner.
        public let resourceOwner: String?
        /// The source resource Region.
        public let resourceRegion: String?
        /// The source resource type.
        public let resourceType: IpamPoolSourceResourceType?

        public init(resourceId: String? = nil, resourceOwner: String? = nil, resourceRegion: String? = nil, resourceType: IpamPoolSourceResourceType? = nil) {
            self.resourceId = resourceId
            self.resourceOwner = resourceOwner
            self.resourceRegion = resourceRegion
            self.resourceType = resourceType
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case resourceOwner = "ResourceOwner"
            case resourceRegion = "ResourceRegion"
            case resourceType = "ResourceType"
        }
    }

    public struct IpamPublicAddressSecurityGroup: AWSDecodableShape {
        /// The security group's ID.
        public let groupId: String?
        /// The security group's name.
        public let groupName: String?

        public init(groupId: String? = nil, groupName: String? = nil) {
            self.groupId = groupId
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "groupId"
            case groupName = "groupName"
        }
    }

    public struct IpamPublicAddressTag: AWSDecodableShape {
        /// The tag's key.
        public let key: String?
        /// The tag's value.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct IpamPublicAddressTags: AWSDecodableShape {
        public struct _EipTagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Tags for an Elastic IP address.
        @OptionalCustomCoding<EC2ArrayCoder<_EipTagsEncoding, IpamPublicAddressTag>>
        public var eipTags: [IpamPublicAddressTag]?

        public init(eipTags: [IpamPublicAddressTag]? = nil) {
            self.eipTags = eipTags
        }

        private enum CodingKeys: String, CodingKey {
            case eipTags = "eipTagSet"
        }
    }

    public struct IpamResourceCidr: AWSDecodableShape {
        public struct _ResourceTagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The compliance status of the IPAM resource. For more information on compliance statuses, see Monitor CIDR usage by resource in the Amazon VPC IPAM User Guide.
        public let complianceStatus: IpamComplianceStatus?
        /// The IPAM ID for an IPAM resource.
        public let ipamId: String?
        /// The pool ID for an IPAM resource.
        public let ipamPoolId: String?
        /// The scope ID for an IPAM resource.
        public let ipamScopeId: String?
        /// The percentage of IP address space in use. To convert the decimal to a percentage, multiply the decimal by 100. Note the following:   For resources that are VPCs, this is the percentage of IP address space in the VPC that's taken up by subnet CIDRs.    For resources that are subnets, if the subnet has an IPv4 CIDR provisioned to it, this is the percentage of IPv4 address space in the subnet that's in use. If the subnet has an IPv6 CIDR provisioned to it, the percentage of IPv6 address space in use is not represented. The percentage of IPv6 address space in use cannot currently be calculated.    For resources that are public IPv4 pools, this is the percentage of IP address space in the pool that's been allocated to Elastic IP addresses (EIPs).
        public let ipUsage: Double?
        /// The management state of the resource. For more information about management states, see Monitor CIDR usage by resource in the Amazon VPC IPAM User Guide.
        public let managementState: IpamManagementState?
        /// The overlap status of an IPAM resource. The overlap status tells you if the CIDR for a resource overlaps with another CIDR in the scope. For more information on overlap statuses, see Monitor CIDR usage by resource in the Amazon VPC IPAM User Guide.
        public let overlapStatus: IpamOverlapStatus?
        /// The CIDR for an IPAM resource.
        public let resourceCidr: String?
        /// The ID of an IPAM resource.
        public let resourceId: String?
        /// The name of an IPAM resource.
        public let resourceName: String?
        /// The Amazon Web Services account number of the owner of an IPAM resource.
        public let resourceOwnerId: String?
        /// The Amazon Web Services Region for an IPAM resource.
        public let resourceRegion: String?
        /// The tags for an IPAM resource.
        @OptionalCustomCoding<EC2ArrayCoder<_ResourceTagsEncoding, IpamResourceTag>>
        public var resourceTags: [IpamResourceTag]?
        /// The type of IPAM resource.
        public let resourceType: IpamResourceType?
        /// The ID of a VPC.
        public let vpcId: String?

        public init(complianceStatus: IpamComplianceStatus? = nil, ipamId: String? = nil, ipamPoolId: String? = nil, ipamScopeId: String? = nil, ipUsage: Double? = nil, managementState: IpamManagementState? = nil, overlapStatus: IpamOverlapStatus? = nil, resourceCidr: String? = nil, resourceId: String? = nil, resourceName: String? = nil, resourceOwnerId: String? = nil, resourceRegion: String? = nil, resourceTags: [IpamResourceTag]? = nil, resourceType: IpamResourceType? = nil, vpcId: String? = nil) {
            self.complianceStatus = complianceStatus
            self.ipamId = ipamId
            self.ipamPoolId = ipamPoolId
            self.ipamScopeId = ipamScopeId
            self.ipUsage = ipUsage
            self.managementState = managementState
            self.overlapStatus = overlapStatus
            self.resourceCidr = resourceCidr
            self.resourceId = resourceId
            self.resourceName = resourceName
            self.resourceOwnerId = resourceOwnerId
            self.resourceRegion = resourceRegion
            self.resourceTags = resourceTags
            self.resourceType = resourceType
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case complianceStatus = "complianceStatus"
            case ipamId = "ipamId"
            case ipamPoolId = "ipamPoolId"
            case ipamScopeId = "ipamScopeId"
            case ipUsage = "ipUsage"
            case managementState = "managementState"
            case overlapStatus = "overlapStatus"
            case resourceCidr = "resourceCidr"
            case resourceId = "resourceId"
            case resourceName = "resourceName"
            case resourceOwnerId = "resourceOwnerId"
            case resourceRegion = "resourceRegion"
            case resourceTags = "resourceTagSet"
            case resourceType = "resourceType"
            case vpcId = "vpcId"
        }
    }

    public struct IpamResourceDiscovery: AWSDecodableShape {
        public struct _OperatingRegionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The resource discovery description.
        public let description: String?
        /// The resource discovery Amazon Resource Name (ARN).
        public let ipamResourceDiscoveryArn: String?
        /// The resource discovery ID.
        public let ipamResourceDiscoveryId: String?
        /// The resource discovery Region.
        public let ipamResourceDiscoveryRegion: String?
        /// Defines if the resource discovery is the default. The default resource discovery is the resource discovery automatically created when you create an IPAM.
        public let isDefault: Bool?
        /// The operating Regions for the resource discovery. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions.
        @OptionalCustomCoding<EC2ArrayCoder<_OperatingRegionsEncoding, IpamOperatingRegion>>
        public var operatingRegions: [IpamOperatingRegion]?
        /// The ID of the owner.
        public let ownerId: String?
        /// The lifecycle state of the resource discovery.    create-in-progress - Resource discovery is being created.    create-complete - Resource discovery creation is complete.    create-failed - Resource discovery creation has failed.    modify-in-progress - Resource discovery is being modified.    modify-complete - Resource discovery modification is complete.    modify-failed - Resource discovery modification has failed.    delete-in-progress - Resource discovery is being deleted.    delete-complete - Resource discovery deletion is complete.    delete-failed - Resource discovery deletion has failed.    isolate-in-progress - Amazon Web Services account that created the resource discovery has been removed and the resource discovery is being isolated.    isolate-complete - Resource discovery isolation is complete.    restore-in-progress - Amazon Web Services account that created the resource discovery and was isolated has been restored.
        public let state: IpamResourceDiscoveryState?
        /// A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(description: String? = nil, ipamResourceDiscoveryArn: String? = nil, ipamResourceDiscoveryId: String? = nil, ipamResourceDiscoveryRegion: String? = nil, isDefault: Bool? = nil, operatingRegions: [IpamOperatingRegion]? = nil, ownerId: String? = nil, state: IpamResourceDiscoveryState? = nil, tags: [Tag]? = nil) {
            self.description = description
            self.ipamResourceDiscoveryArn = ipamResourceDiscoveryArn
            self.ipamResourceDiscoveryId = ipamResourceDiscoveryId
            self.ipamResourceDiscoveryRegion = ipamResourceDiscoveryRegion
            self.isDefault = isDefault
            self.operatingRegions = operatingRegions
            self.ownerId = ownerId
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case ipamResourceDiscoveryArn = "ipamResourceDiscoveryArn"
            case ipamResourceDiscoveryId = "ipamResourceDiscoveryId"
            case ipamResourceDiscoveryRegion = "ipamResourceDiscoveryRegion"
            case isDefault = "isDefault"
            case operatingRegions = "operatingRegionSet"
            case ownerId = "ownerId"
            case state = "state"
            case tags = "tagSet"
        }
    }

    public struct IpamResourceDiscoveryAssociation: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IPAM ARN.
        public let ipamArn: String?
        /// The IPAM ID.
        public let ipamId: String?
        /// The IPAM home Region.
        public let ipamRegion: String?
        /// The resource discovery association Amazon Resource Name (ARN).
        public let ipamResourceDiscoveryAssociationArn: String?
        /// The resource discovery association ID.
        public let ipamResourceDiscoveryAssociationId: String?
        /// The resource discovery ID.
        public let ipamResourceDiscoveryId: String?
        /// Defines if the resource discovery is the default. When you create an IPAM, a default resource discovery is created for your IPAM and it's associated with your IPAM.
        public let isDefault: Bool?
        /// The Amazon Web Services account ID of the resource discovery owner.
        public let ownerId: String?
        /// The resource discovery status.    active - Connection or permissions required to read the results of the resource discovery are intact.    not-found - Connection or permissions required to read the results of the resource discovery are broken. This may happen if the owner of the resource discovery stopped sharing it or deleted the resource discovery. Verify the resource discovery still exists and the Amazon Web Services RAM resource share is still intact.
        public let resourceDiscoveryStatus: IpamAssociatedResourceDiscoveryStatus?
        /// The lifecycle state of the association when you associate or disassociate a resource discovery.    associate-in-progress - Resource discovery is being associated.    associate-complete - Resource discovery association is complete.    associate-failed - Resource discovery association has failed.    disassociate-in-progress - Resource discovery is being disassociated.    disassociate-complete - Resource discovery disassociation is complete.    disassociate-failed  - Resource discovery disassociation has failed.    isolate-in-progress - Amazon Web Services account that created the resource discovery association has been removed and the resource discovery associatation is being isolated.    isolate-complete - Resource discovery isolation is complete..    restore-in-progress - Resource discovery is being restored.
        public let state: IpamResourceDiscoveryAssociationState?
        /// A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(ipamArn: String? = nil, ipamId: String? = nil, ipamRegion: String? = nil, ipamResourceDiscoveryAssociationArn: String? = nil, ipamResourceDiscoveryAssociationId: String? = nil, ipamResourceDiscoveryId: String? = nil, isDefault: Bool? = nil, ownerId: String? = nil, resourceDiscoveryStatus: IpamAssociatedResourceDiscoveryStatus? = nil, state: IpamResourceDiscoveryAssociationState? = nil, tags: [Tag]? = nil) {
            self.ipamArn = ipamArn
            self.ipamId = ipamId
            self.ipamRegion = ipamRegion
            self.ipamResourceDiscoveryAssociationArn = ipamResourceDiscoveryAssociationArn
            self.ipamResourceDiscoveryAssociationId = ipamResourceDiscoveryAssociationId
            self.ipamResourceDiscoveryId = ipamResourceDiscoveryId
            self.isDefault = isDefault
            self.ownerId = ownerId
            self.resourceDiscoveryStatus = resourceDiscoveryStatus
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case ipamArn = "ipamArn"
            case ipamId = "ipamId"
            case ipamRegion = "ipamRegion"
            case ipamResourceDiscoveryAssociationArn = "ipamResourceDiscoveryAssociationArn"
            case ipamResourceDiscoveryAssociationId = "ipamResourceDiscoveryAssociationId"
            case ipamResourceDiscoveryId = "ipamResourceDiscoveryId"
            case isDefault = "isDefault"
            case ownerId = "ownerId"
            case resourceDiscoveryStatus = "resourceDiscoveryStatus"
            case state = "state"
            case tags = "tagSet"
        }
    }

    public struct IpamResourceTag: AWSDecodableShape {
        /// The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        public let key: String?
        /// The value of the tag.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct IpamScope: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The description of the scope.
        public let description: String?
        /// The ARN of the IPAM.
        public let ipamArn: String?
        /// The Amazon Web Services Region of the IPAM scope.
        public let ipamRegion: String?
        /// The Amazon Resource Name (ARN) of the scope.
        public let ipamScopeArn: String?
        /// The ID of the scope.
        public let ipamScopeId: String?
        /// The type of the scope.
        public let ipamScopeType: IpamScopeType?
        /// Defines if the scope is the default scope or not.
        public let isDefault: Bool?
        /// The Amazon Web Services account ID of the owner of the scope.
        public let ownerId: String?
        /// The number of pools in the scope.
        public let poolCount: Int?
        /// The state of the IPAM scope.
        public let state: IpamScopeState?
        /// The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(description: String? = nil, ipamArn: String? = nil, ipamRegion: String? = nil, ipamScopeArn: String? = nil, ipamScopeId: String? = nil, ipamScopeType: IpamScopeType? = nil, isDefault: Bool? = nil, ownerId: String? = nil, poolCount: Int? = nil, state: IpamScopeState? = nil, tags: [Tag]? = nil) {
            self.description = description
            self.ipamArn = ipamArn
            self.ipamRegion = ipamRegion
            self.ipamScopeArn = ipamScopeArn
            self.ipamScopeId = ipamScopeId
            self.ipamScopeType = ipamScopeType
            self.isDefault = isDefault
            self.ownerId = ownerId
            self.poolCount = poolCount
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case ipamArn = "ipamArn"
            case ipamRegion = "ipamRegion"
            case ipamScopeArn = "ipamScopeArn"
            case ipamScopeId = "ipamScopeId"
            case ipamScopeType = "ipamScopeType"
            case isDefault = "isDefault"
            case ownerId = "ownerId"
            case poolCount = "poolCount"
            case state = "state"
            case tags = "tagSet"
        }
    }

    public struct Ipv4PrefixSpecification: AWSDecodableShape {
        /// The IPv4 prefix. For information, see  Assigning prefixes to Amazon EC2 network interfaces in the Amazon Elastic Compute Cloud User Guide.
        public let ipv4Prefix: String?

        public init(ipv4Prefix: String? = nil) {
            self.ipv4Prefix = ipv4Prefix
        }

        private enum CodingKeys: String, CodingKey {
            case ipv4Prefix = "ipv4Prefix"
        }
    }

    public struct Ipv4PrefixSpecificationRequest: AWSEncodableShape & AWSDecodableShape {
        /// The IPv4 prefix. For information, see  Assigning prefixes to Amazon EC2 network interfaces in the Amazon Elastic Compute Cloud User Guide.
        public let ipv4Prefix: String?

        public init(ipv4Prefix: String? = nil) {
            self.ipv4Prefix = ipv4Prefix
        }

        private enum CodingKeys: String, CodingKey {
            case ipv4Prefix = "Ipv4Prefix"
        }
    }

    public struct Ipv4PrefixSpecificationResponse: AWSDecodableShape {
        /// The IPv4 delegated prefixes assigned to the network interface.
        public let ipv4Prefix: String?

        public init(ipv4Prefix: String? = nil) {
            self.ipv4Prefix = ipv4Prefix
        }

        private enum CodingKeys: String, CodingKey {
            case ipv4Prefix = "ipv4Prefix"
        }
    }

    public struct Ipv6CidrAssociation: AWSDecodableShape {
        /// The resource that's associated with the IPv6 CIDR block.
        public let associatedResource: String?
        /// The IPv6 CIDR block.
        public let ipv6Cidr: String?

        public init(associatedResource: String? = nil, ipv6Cidr: String? = nil) {
            self.associatedResource = associatedResource
            self.ipv6Cidr = ipv6Cidr
        }

        private enum CodingKeys: String, CodingKey {
            case associatedResource = "associatedResource"
            case ipv6Cidr = "ipv6Cidr"
        }
    }

    public struct Ipv6CidrBlock: AWSDecodableShape {
        /// The IPv6 CIDR block.
        public let ipv6CidrBlock: String?

        public init(ipv6CidrBlock: String? = nil) {
            self.ipv6CidrBlock = ipv6CidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrBlock = "ipv6CidrBlock"
        }
    }

    public struct Ipv6Pool: AWSDecodableShape {
        public struct _PoolCidrBlocksEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The description for the address pool.
        public let description: String?
        /// The CIDR blocks for the address pool.
        @OptionalCustomCoding<EC2ArrayCoder<_PoolCidrBlocksEncoding, PoolCidrBlock>>
        public var poolCidrBlocks: [PoolCidrBlock]?
        /// The ID of the address pool.
        public let poolId: String?
        /// Any tags for the address pool.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(description: String? = nil, poolCidrBlocks: [PoolCidrBlock]? = nil, poolId: String? = nil, tags: [Tag]? = nil) {
            self.description = description
            self.poolCidrBlocks = poolCidrBlocks
            self.poolId = poolId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case poolCidrBlocks = "poolCidrBlockSet"
            case poolId = "poolId"
            case tags = "tagSet"
        }
    }

    public struct Ipv6PrefixSpecification: AWSDecodableShape {
        /// The IPv6 prefix.
        public let ipv6Prefix: String?

        public init(ipv6Prefix: String? = nil) {
            self.ipv6Prefix = ipv6Prefix
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Prefix = "ipv6Prefix"
        }
    }

    public struct Ipv6PrefixSpecificationRequest: AWSEncodableShape & AWSDecodableShape {
        /// The IPv6 prefix.
        public let ipv6Prefix: String?

        public init(ipv6Prefix: String? = nil) {
            self.ipv6Prefix = ipv6Prefix
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Prefix = "Ipv6Prefix"
        }
    }

    public struct Ipv6PrefixSpecificationResponse: AWSDecodableShape {
        /// The IPv6 delegated prefixes assigned to the network interface.
        public let ipv6Prefix: String?

        public init(ipv6Prefix: String? = nil) {
            self.ipv6Prefix = ipv6Prefix
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Prefix = "ipv6Prefix"
        }
    }

    public struct Ipv6Range: AWSEncodableShape & AWSDecodableShape {
        /// The IPv6 address range. You can either specify a CIDR block or a source security group, not both. To specify a single IPv6 address, use the /128 prefix length.
        public let cidrIpv6: String?
        /// A description for the security group rule that references this IPv6 address range. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
        public let description: String?

        public init(cidrIpv6: String? = nil, description: String? = nil) {
            self.cidrIpv6 = cidrIpv6
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIpv6 = "cidrIpv6"
            case description = "description"
        }
    }

    public struct KeyPair: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        ///   For RSA key pairs, the key fingerprint is the SHA-1 digest of the DER encoded private key.   For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with OpenSSH 6.8.
        public let keyFingerprint: String?
        /// An unencrypted PEM encoded RSA or ED25519 private key.
        public let keyMaterial: String?
        /// The name of the key pair.
        public let keyName: String?
        /// The ID of the key pair.
        public let keyPairId: String?
        /// Any tags applied to the key pair.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(keyFingerprint: String? = nil, keyMaterial: String? = nil, keyName: String? = nil, keyPairId: String? = nil, tags: [Tag]? = nil) {
            self.keyFingerprint = keyFingerprint
            self.keyMaterial = keyMaterial
            self.keyName = keyName
            self.keyPairId = keyPairId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case keyFingerprint = "keyFingerprint"
            case keyMaterial = "keyMaterial"
            case keyName = "keyName"
            case keyPairId = "keyPairId"
            case tags = "tagSet"
        }
    }

    public struct KeyPairInfo: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// If you used Amazon EC2 to create the key pair, this is the date and time when the key was created, in ISO 8601 date-time format, in the UTC time zone. If you imported an existing key pair to Amazon EC2, this is the date and time the key was imported, in ISO 8601 date-time format, in the UTC time zone.
        public let createTime: Date?
        /// If you used CreateKeyPair to create the key pair:   For RSA key pairs, the key fingerprint is the SHA-1 digest of the DER encoded private key.   For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which  is the default for OpenSSH, starting with OpenSSH 6.8.   If you used ImportKeyPair to provide Amazon Web Services the public key:   For RSA key pairs, the key fingerprint is the MD5 public key fingerprint as specified in section 4 of RFC4716.   For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256 digest, which is the default for OpenSSH, starting with OpenSSH 6.8.
        public let keyFingerprint: String?
        /// The name of the key pair.
        public let keyName: String?
        /// The ID of the key pair.
        public let keyPairId: String?
        /// The type of key pair.
        public let keyType: KeyType?
        /// The public key material.
        public let publicKey: String?
        /// Any tags applied to the key pair.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(createTime: Date? = nil, keyFingerprint: String? = nil, keyName: String? = nil, keyPairId: String? = nil, keyType: KeyType? = nil, publicKey: String? = nil, tags: [Tag]? = nil) {
            self.createTime = createTime
            self.keyFingerprint = keyFingerprint
            self.keyName = keyName
            self.keyPairId = keyPairId
            self.keyType = keyType
            self.publicKey = publicKey
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case createTime = "createTime"
            case keyFingerprint = "keyFingerprint"
            case keyName = "keyName"
            case keyPairId = "keyPairId"
            case keyType = "keyType"
            case publicKey = "publicKey"
            case tags = "tagSet"
        }
    }

    public struct LastError: AWSDecodableShape {
        /// The error code for the VPC endpoint error.
        public let code: String?
        /// The error message for the VPC endpoint error.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct LaunchPermission: AWSEncodableShape & AWSDecodableShape {
        /// The name of the group.
        public let group: PermissionGroup?
        /// The Amazon Resource Name (ARN) of an organizational unit (OU).
        public let organizationalUnitArn: String?
        /// The Amazon Resource Name (ARN) of an organization.
        public let organizationArn: String?
        /// The Amazon Web Services account ID. Constraints: Up to 10 000 account IDs can be specified in a single request.
        public let userId: String?

        public init(group: PermissionGroup? = nil, organizationalUnitArn: String? = nil, organizationArn: String? = nil, userId: String? = nil) {
            self.group = group
            self.organizationalUnitArn = organizationalUnitArn
            self.organizationArn = organizationArn
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case group = "group"
            case organizationalUnitArn = "organizationalUnitArn"
            case organizationArn = "organizationArn"
            case userId = "userId"
        }
    }

    public struct LaunchPermissionModifications: AWSEncodableShape {
        public struct _AddEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Amazon Web Services account ID, organization ARN, or OU ARN to add to the list of launch permissions for the AMI.
        @OptionalCustomCoding<EC2ArrayCoder<_AddEncoding, LaunchPermission>>
        public var add: [LaunchPermission]?
        /// The Amazon Web Services account ID, organization ARN, or OU ARN to remove from the list of launch permissions for the AMI.
        @OptionalCustomCoding<EC2ArrayCoder<_RemoveEncoding, LaunchPermission>>
        public var remove: [LaunchPermission]?

        public init(add: [LaunchPermission]? = nil, remove: [LaunchPermission]? = nil) {
            self.add = add
            self.remove = remove
        }

        private enum CodingKeys: String, CodingKey {
            case add = "Add"
            case remove = "Remove"
        }
    }

    public struct LaunchSpecification: AWSDecodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _NetworkInterfacesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Deprecated.
        public let addressingType: String?
        /// The block device mapping entries.
        @OptionalCustomCoding<EC2ArrayCoder<_BlockDeviceMappingsEncoding, BlockDeviceMapping>>
        public var blockDeviceMappings: [BlockDeviceMapping]?
        /// Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: false
        public let ebsOptimized: Bool?
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification?
        /// The ID of the AMI.
        public let imageId: String?
        /// The instance type. Only one instance type can be specified.
        public let instanceType: InstanceType?
        /// The ID of the kernel.
        public let kernelId: String?
        /// The name of the key pair.
        public let keyName: String?
        public let monitoring: RunInstancesMonitoringEnabled?
        /// The network interfaces. If you specify a network interface, you must specify  subnet IDs and security group IDs using the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInterfacesEncoding, InstanceNetworkInterfaceSpecification>>
        public var networkInterfaces: [InstanceNetworkInterfaceSpecification]?
        /// The placement information for the instance.
        public let placement: SpotPlacement?
        /// The ID of the RAM disk.
        public let ramdiskId: String?
        /// The IDs of the security groups.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupsEncoding, GroupIdentifier>>
        public var securityGroups: [GroupIdentifier]?
        /// The ID of the subnet in which to launch the instance.
        public let subnetId: String?
        /// The base64-encoded user data that instances use when starting up. User data is limited to 16 KB.
        public let userData: String?

        public init(addressingType: String? = nil, blockDeviceMappings: [BlockDeviceMapping]? = nil, ebsOptimized: Bool? = nil, iamInstanceProfile: IamInstanceProfileSpecification? = nil, imageId: String? = nil, instanceType: InstanceType? = nil, kernelId: String? = nil, keyName: String? = nil, monitoring: RunInstancesMonitoringEnabled? = nil, networkInterfaces: [InstanceNetworkInterfaceSpecification]? = nil, placement: SpotPlacement? = nil, ramdiskId: String? = nil, securityGroups: [GroupIdentifier]? = nil, subnetId: String? = nil, userData: String? = nil) {
            self.addressingType = addressingType
            self.blockDeviceMappings = blockDeviceMappings
            self.ebsOptimized = ebsOptimized
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.ramdiskId = ramdiskId
            self.securityGroups = securityGroups
            self.subnetId = subnetId
            self.userData = userData
        }

        private enum CodingKeys: String, CodingKey {
            case addressingType = "addressingType"
            case blockDeviceMappings = "blockDeviceMapping"
            case ebsOptimized = "ebsOptimized"
            case iamInstanceProfile = "iamInstanceProfile"
            case imageId = "imageId"
            case instanceType = "instanceType"
            case kernelId = "kernelId"
            case keyName = "keyName"
            case monitoring = "monitoring"
            case networkInterfaces = "networkInterfaceSet"
            case placement = "placement"
            case ramdiskId = "ramdiskId"
            case securityGroups = "groupSet"
            case subnetId = "subnetId"
            case userData = "userData"
        }
    }

    public struct LaunchTemplate: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The principal that created the launch template.
        public let createdBy: String?
        /// The time launch template was created.
        public let createTime: Date?
        /// The version number of the default version of the launch template.
        public let defaultVersionNumber: Int64?
        /// The version number of the latest version of the launch template.
        public let latestVersionNumber: Int64?
        /// The ID of the launch template.
        public let launchTemplateId: String?
        /// The name of the launch template.
        public let launchTemplateName: String?
        /// The tags for the launch template.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(createdBy: String? = nil, createTime: Date? = nil, defaultVersionNumber: Int64? = nil, latestVersionNumber: Int64? = nil, launchTemplateId: String? = nil, launchTemplateName: String? = nil, tags: [Tag]? = nil) {
            self.createdBy = createdBy
            self.createTime = createTime
            self.defaultVersionNumber = defaultVersionNumber
            self.latestVersionNumber = latestVersionNumber
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case createdBy = "createdBy"
            case createTime = "createTime"
            case defaultVersionNumber = "defaultVersionNumber"
            case latestVersionNumber = "latestVersionNumber"
            case launchTemplateId = "launchTemplateId"
            case launchTemplateName = "launchTemplateName"
            case tags = "tagSet"
        }
    }

    public struct LaunchTemplateAndOverridesResponse: AWSDecodableShape {
        /// The launch template.
        public let launchTemplateSpecification: FleetLaunchTemplateSpecification?
        /// Any parameters that you specify override the same parameters in the launch template.
        public let overrides: FleetLaunchTemplateOverrides?

        public init(launchTemplateSpecification: FleetLaunchTemplateSpecification? = nil, overrides: FleetLaunchTemplateOverrides? = nil) {
            self.launchTemplateSpecification = launchTemplateSpecification
            self.overrides = overrides
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateSpecification = "launchTemplateSpecification"
            case overrides = "overrides"
        }
    }

    public struct LaunchTemplateBlockDeviceMapping: AWSDecodableShape {
        /// The device name.
        public let deviceName: String?
        /// Information about the block device for an EBS volume.
        public let ebs: LaunchTemplateEbsBlockDevice?
        /// To omit the device from the block device mapping, specify an empty string.
        public let noDevice: String?
        /// The virtual device name (ephemeralN).
        public let virtualName: String?

        public init(deviceName: String? = nil, ebs: LaunchTemplateEbsBlockDevice? = nil, noDevice: String? = nil, virtualName: String? = nil) {
            self.deviceName = deviceName
            self.ebs = ebs
            self.noDevice = noDevice
            self.virtualName = virtualName
        }

        private enum CodingKeys: String, CodingKey {
            case deviceName = "deviceName"
            case ebs = "ebs"
            case noDevice = "noDevice"
            case virtualName = "virtualName"
        }
    }

    public struct LaunchTemplateBlockDeviceMappingRequest: AWSEncodableShape {
        /// The device name (for example, /dev/sdh or xvdh).
        public let deviceName: String?
        /// Parameters used to automatically set up EBS volumes when the instance is launched.
        public let ebs: LaunchTemplateEbsBlockDeviceRequest?
        /// To omit the device from the block device mapping, specify an empty string.
        public let noDevice: String?
        /// The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for ephemeral0 and ephemeral1. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume.
        public let virtualName: String?

        public init(deviceName: String? = nil, ebs: LaunchTemplateEbsBlockDeviceRequest? = nil, noDevice: String? = nil, virtualName: String? = nil) {
            self.deviceName = deviceName
            self.ebs = ebs
            self.noDevice = noDevice
            self.virtualName = virtualName
        }

        private enum CodingKeys: String, CodingKey {
            case deviceName = "DeviceName"
            case ebs = "Ebs"
            case noDevice = "NoDevice"
            case virtualName = "VirtualName"
        }
    }

    public struct LaunchTemplateCapacityReservationSpecificationRequest: AWSEncodableShape {
        /// Indicates the instance's Capacity Reservation preferences. Possible preferences include:    open - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).    none - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.
        public let capacityReservationPreference: CapacityReservationPreference?
        /// Information about the target Capacity Reservation or Capacity Reservation group.
        public let capacityReservationTarget: CapacityReservationTarget?

        public init(capacityReservationPreference: CapacityReservationPreference? = nil, capacityReservationTarget: CapacityReservationTarget? = nil) {
            self.capacityReservationPreference = capacityReservationPreference
            self.capacityReservationTarget = capacityReservationTarget
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationPreference = "CapacityReservationPreference"
            case capacityReservationTarget = "CapacityReservationTarget"
        }
    }

    public struct LaunchTemplateCapacityReservationSpecificationResponse: AWSDecodableShape {
        /// Indicates the instance's Capacity Reservation preferences. Possible preferences include:    open - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).    none - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.
        public let capacityReservationPreference: CapacityReservationPreference?
        /// Information about the target Capacity Reservation or Capacity Reservation group.
        public let capacityReservationTarget: CapacityReservationTargetResponse?

        public init(capacityReservationPreference: CapacityReservationPreference? = nil, capacityReservationTarget: CapacityReservationTargetResponse? = nil) {
            self.capacityReservationPreference = capacityReservationPreference
            self.capacityReservationTarget = capacityReservationTarget
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationPreference = "capacityReservationPreference"
            case capacityReservationTarget = "capacityReservationTarget"
        }
    }

    public struct LaunchTemplateConfig: AWSEncodableShape & AWSDecodableShape {
        public struct _OverridesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The launch template to use. Make sure that the launch template does not contain the NetworkInterfaceId parameter because you can't specify a network interface ID in a Spot Fleet.
        public let launchTemplateSpecification: FleetLaunchTemplateSpecification?
        /// Any parameters that you specify override the same parameters in the launch template.
        @OptionalCustomCoding<EC2ArrayCoder<_OverridesEncoding, LaunchTemplateOverrides>>
        public var overrides: [LaunchTemplateOverrides]?

        public init(launchTemplateSpecification: FleetLaunchTemplateSpecification? = nil, overrides: [LaunchTemplateOverrides]? = nil) {
            self.launchTemplateSpecification = launchTemplateSpecification
            self.overrides = overrides
        }

        public func validate(name: String) throws {
            try self.launchTemplateSpecification?.validate(name: "\(name).launchTemplateSpecification")
            try self.overrides?.forEach {
                try $0.validate(name: "\(name).overrides[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateSpecification = "launchTemplateSpecification"
            case overrides = "overrides"
        }
    }

    public struct LaunchTemplateCpuOptions: AWSDecodableShape {
        /// Indicates whether the instance is enabled for AMD SEV-SNP. For more information, see  AMD SEV-SNP.
        public let amdSevSnp: AmdSevSnpSpecification?
        /// The number of CPU cores for the instance.
        public let coreCount: Int?
        /// The number of threads per CPU core.
        public let threadsPerCore: Int?

        public init(amdSevSnp: AmdSevSnpSpecification? = nil, coreCount: Int? = nil, threadsPerCore: Int? = nil) {
            self.amdSevSnp = amdSevSnp
            self.coreCount = coreCount
            self.threadsPerCore = threadsPerCore
        }

        private enum CodingKeys: String, CodingKey {
            case amdSevSnp = "amdSevSnp"
            case coreCount = "coreCount"
            case threadsPerCore = "threadsPerCore"
        }
    }

    public struct LaunchTemplateCpuOptionsRequest: AWSEncodableShape {
        /// Indicates whether to enable the instance for AMD SEV-SNP. AMD SEV-SNP is supported  with M6a, R6a, and C6a instance types only. For more information, see  AMD SEV-SNP.
        public let amdSevSnp: AmdSevSnpSpecification?
        /// The number of CPU cores for the instance.
        public let coreCount: Int?
        /// The number of threads per CPU core. To disable multithreading for the instance, specify a value of 1. Otherwise, specify the default value of 2.
        public let threadsPerCore: Int?

        public init(amdSevSnp: AmdSevSnpSpecification? = nil, coreCount: Int? = nil, threadsPerCore: Int? = nil) {
            self.amdSevSnp = amdSevSnp
            self.coreCount = coreCount
            self.threadsPerCore = threadsPerCore
        }

        private enum CodingKeys: String, CodingKey {
            case amdSevSnp = "AmdSevSnp"
            case coreCount = "CoreCount"
            case threadsPerCore = "ThreadsPerCore"
        }
    }

    public struct LaunchTemplateEbsBlockDevice: AWSDecodableShape {
        /// Indicates whether the EBS volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// Indicates whether the EBS volume is encrypted.
        public let encrypted: Bool?
        /// The number of I/O operations per second (IOPS) that the volume supports.
        public let iops: Int?
        /// The ARN of the Key Management Service (KMS) CMK used for encryption.
        public let kmsKeyId: String?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The throughput that the volume supports, in MiB/s.
        public let throughput: Int?
        /// The size of the volume, in GiB.
        public let volumeSize: Int?
        /// The volume type.
        public let volumeType: VolumeType?

        public init(deleteOnTermination: Bool? = nil, encrypted: Bool? = nil, iops: Int? = nil, kmsKeyId: String? = nil, snapshotId: String? = nil, throughput: Int? = nil, volumeSize: Int? = nil, volumeType: VolumeType? = nil) {
            self.deleteOnTermination = deleteOnTermination
            self.encrypted = encrypted
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.snapshotId = snapshotId
            self.throughput = throughput
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination = "deleteOnTermination"
            case encrypted = "encrypted"
            case iops = "iops"
            case kmsKeyId = "kmsKeyId"
            case snapshotId = "snapshotId"
            case throughput = "throughput"
            case volumeSize = "volumeSize"
            case volumeType = "volumeType"
        }
    }

    public struct LaunchTemplateEbsBlockDeviceRequest: AWSEncodableShape {
        /// Indicates whether the EBS volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// Indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. If you are creating a volume from a snapshot, you can't specify an encryption value.
        public let encrypted: Bool?
        /// The number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. The following are the supported values for each volume type:    gp3: 3,000 - 16,000 IOPS    io1: 100 - 64,000 IOPS    io2: 100 - 256,000 IOPS   For io2 volumes, you can achieve up to 256,000 IOPS on
        /// instances
        /// built on the Nitro System. On other instances, you can achieve performance up to 32,000 IOPS. This parameter is supported for io1, io2, and gp3 volumes only.
        public let iops: Int?
        /// The ARN of the symmetric Key Management Service (KMS) CMK used for encryption.
        public let kmsKeyId: String?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The throughput to provision for a gp3 volume, with a maximum of 1,000 MiB/s. Valid Range: Minimum value of 125. Maximum value of 1000.
        public let throughput: Int?
        /// The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. The following are the supported volumes sizes for each volume type:    gp2 and gp3: 1 - 16,384 GiB    io1: 4 - 16,384 GiB    io2: 4 - 65,536 GiB    st1 and sc1: 125 - 16,384 GiB    standard: 1 - 1024 GiB
        public let volumeSize: Int?
        /// The volume type. For more information, see Amazon EBS volume types in the Amazon EBS User Guide.
        public let volumeType: VolumeType?

        public init(deleteOnTermination: Bool? = nil, encrypted: Bool? = nil, iops: Int? = nil, kmsKeyId: String? = nil, snapshotId: String? = nil, throughput: Int? = nil, volumeSize: Int? = nil, volumeType: VolumeType? = nil) {
            self.deleteOnTermination = deleteOnTermination
            self.encrypted = encrypted
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.snapshotId = snapshotId
            self.throughput = throughput
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination = "DeleteOnTermination"
            case encrypted = "Encrypted"
            case iops = "Iops"
            case kmsKeyId = "KmsKeyId"
            case snapshotId = "SnapshotId"
            case throughput = "Throughput"
            case volumeSize = "VolumeSize"
            case volumeType = "VolumeType"
        }
    }

    public struct LaunchTemplateElasticInferenceAccelerator: AWSEncodableShape {
        ///  The number of elastic inference accelerators to attach to the instance.  Default: 1
        public let count: Int?
        ///  The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, and eia1.xlarge.
        public let type: String?

        public init(count: Int? = nil, type: String? = nil) {
            self.count = count
            self.type = type
        }

        public func validate(name: String) throws {
            try self.validate(self.count, name: "count", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case count = "Count"
            case type = "Type"
        }
    }

    public struct LaunchTemplateElasticInferenceAcceleratorResponse: AWSDecodableShape {
        ///  The number of elastic inference accelerators to attach to the instance.  Default: 1
        public let count: Int?
        ///  The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, and eia1.xlarge.
        public let type: String?

        public init(count: Int? = nil, type: String? = nil) {
            self.count = count
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case count = "count"
            case type = "type"
        }
    }

    public struct LaunchTemplateEnaSrdSpecification: AWSDecodableShape {
        /// Indicates whether ENA Express is enabled for the network interface.
        public let enaSrdEnabled: Bool?
        /// Configures ENA Express for UDP network traffic.
        public let enaSrdUdpSpecification: LaunchTemplateEnaSrdUdpSpecification?

        public init(enaSrdEnabled: Bool? = nil, enaSrdUdpSpecification: LaunchTemplateEnaSrdUdpSpecification? = nil) {
            self.enaSrdEnabled = enaSrdEnabled
            self.enaSrdUdpSpecification = enaSrdUdpSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case enaSrdEnabled = "enaSrdEnabled"
            case enaSrdUdpSpecification = "enaSrdUdpSpecification"
        }
    }

    public struct LaunchTemplateEnaSrdUdpSpecification: AWSDecodableShape {
        /// Indicates whether UDP traffic to and from the instance uses ENA Express. To specify this setting,
        /// 			you must first enable ENA Express.
        public let enaSrdUdpEnabled: Bool?

        public init(enaSrdUdpEnabled: Bool? = nil) {
            self.enaSrdUdpEnabled = enaSrdUdpEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case enaSrdUdpEnabled = "enaSrdUdpEnabled"
        }
    }

    public struct LaunchTemplateEnclaveOptions: AWSDecodableShape {
        /// If this parameter is set to true, the instance is enabled for Amazon Web Services Nitro Enclaves; otherwise, it is not enabled for Amazon Web Services Nitro Enclaves.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "enabled"
        }
    }

    public struct LaunchTemplateEnclaveOptionsRequest: AWSEncodableShape {
        /// To enable the instance for Amazon Web Services Nitro Enclaves, set this parameter to true.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public struct LaunchTemplateHibernationOptions: AWSDecodableShape {
        /// If this parameter is set to true, the instance is enabled for hibernation; otherwise, it is not enabled for hibernation.
        public let configured: Bool?

        public init(configured: Bool? = nil) {
            self.configured = configured
        }

        private enum CodingKeys: String, CodingKey {
            case configured = "configured"
        }
    }

    public struct LaunchTemplateHibernationOptionsRequest: AWSEncodableShape {
        /// If you set this parameter to true, the instance is enabled for hibernation. Default: false
        public let configured: Bool?

        public init(configured: Bool? = nil) {
            self.configured = configured
        }

        private enum CodingKeys: String, CodingKey {
            case configured = "Configured"
        }
    }

    public struct LaunchTemplateIamInstanceProfileSpecification: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the instance profile.
        public let arn: String?
        /// The name of the instance profile.
        public let name: String?

        public init(arn: String? = nil, name: String? = nil) {
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case name = "name"
        }
    }

    public struct LaunchTemplateIamInstanceProfileSpecificationRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the instance profile.
        public let arn: String?
        /// The name of the instance profile.
        public let name: String?

        public init(arn: String? = nil, name: String? = nil) {
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case name = "Name"
        }
    }

    public struct LaunchTemplateInstanceMaintenanceOptions: AWSDecodableShape {
        /// Disables the automatic recovery behavior of your instance or sets it to default.
        public let autoRecovery: LaunchTemplateAutoRecoveryState?

        public init(autoRecovery: LaunchTemplateAutoRecoveryState? = nil) {
            self.autoRecovery = autoRecovery
        }

        private enum CodingKeys: String, CodingKey {
            case autoRecovery = "autoRecovery"
        }
    }

    public struct LaunchTemplateInstanceMaintenanceOptionsRequest: AWSEncodableShape {
        /// Disables the automatic recovery behavior of your instance or sets it to default. For more information, see Simplified automatic recovery.
        public let autoRecovery: LaunchTemplateAutoRecoveryState?

        public init(autoRecovery: LaunchTemplateAutoRecoveryState? = nil) {
            self.autoRecovery = autoRecovery
        }

        private enum CodingKeys: String, CodingKey {
            case autoRecovery = "AutoRecovery"
        }
    }

    public struct LaunchTemplateInstanceMarketOptions: AWSDecodableShape {
        /// The market type.
        public let marketType: MarketType?
        /// The options for Spot Instances.
        public let spotOptions: LaunchTemplateSpotMarketOptions?

        public init(marketType: MarketType? = nil, spotOptions: LaunchTemplateSpotMarketOptions? = nil) {
            self.marketType = marketType
            self.spotOptions = spotOptions
        }

        private enum CodingKeys: String, CodingKey {
            case marketType = "marketType"
            case spotOptions = "spotOptions"
        }
    }

    public struct LaunchTemplateInstanceMarketOptionsRequest: AWSEncodableShape {
        /// The market type.
        public let marketType: MarketType?
        /// The options for Spot Instances.
        public let spotOptions: LaunchTemplateSpotMarketOptionsRequest?

        public init(marketType: MarketType? = nil, spotOptions: LaunchTemplateSpotMarketOptionsRequest? = nil) {
            self.marketType = marketType
            self.spotOptions = spotOptions
        }

        private enum CodingKeys: String, CodingKey {
            case marketType = "MarketType"
            case spotOptions = "SpotOptions"
        }
    }

    public struct LaunchTemplateInstanceMetadataOptions: AWSDecodableShape {
        /// Enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is enabled.  If you specify a value of disabled, you will not be able to access your instance metadata.
        public let httpEndpoint: LaunchTemplateInstanceMetadataEndpointState?
        /// Enables or disables the IPv6 endpoint for the instance metadata service. Default: disabled
        public let httpProtocolIpv6: LaunchTemplateInstanceMetadataProtocolIpv6?
        /// The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Default: 1 Possible values: Integers from 1 to 64
        public let httpPutResponseHopLimit: Int?
        /// Indicates whether IMDSv2 is required.    optional - IMDSv2 is optional. You can choose whether to send a  session token in your instance metadata retrieval requests. If you retrieve  IAM role credentials without a session token, you receive the IMDSv1 role  credentials. If you retrieve IAM role credentials using a valid session token,  you receive the IMDSv2 role credentials.    required - IMDSv2 is required. You must send a session token  in your instance metadata retrieval requests. With this option, retrieving the  IAM role credentials always returns IMDSv2 credentials; IMDSv1 credentials are  not available.
        public let httpTokens: LaunchTemplateHttpTokensState?
        /// Set to enabled to allow access to instance tags from the instance metadata. Set to disabled to turn off access to instance tags from the instance metadata. For more information, see Work with instance tags using the instance metadata. Default: disabled
        public let instanceMetadataTags: LaunchTemplateInstanceMetadataTagsState?
        /// The state of the metadata option changes.  pending - The metadata options are being updated and the instance is not ready to process metadata traffic with the new selection.  applied - The metadata options have been successfully applied on the instance.
        public let state: LaunchTemplateInstanceMetadataOptionsState?

        public init(httpEndpoint: LaunchTemplateInstanceMetadataEndpointState? = nil, httpProtocolIpv6: LaunchTemplateInstanceMetadataProtocolIpv6? = nil, httpPutResponseHopLimit: Int? = nil, httpTokens: LaunchTemplateHttpTokensState? = nil, instanceMetadataTags: LaunchTemplateInstanceMetadataTagsState? = nil, state: LaunchTemplateInstanceMetadataOptionsState? = nil) {
            self.httpEndpoint = httpEndpoint
            self.httpProtocolIpv6 = httpProtocolIpv6
            self.httpPutResponseHopLimit = httpPutResponseHopLimit
            self.httpTokens = httpTokens
            self.instanceMetadataTags = instanceMetadataTags
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case httpEndpoint = "httpEndpoint"
            case httpProtocolIpv6 = "httpProtocolIpv6"
            case httpPutResponseHopLimit = "httpPutResponseHopLimit"
            case httpTokens = "httpTokens"
            case instanceMetadataTags = "instanceMetadataTags"
            case state = "state"
        }
    }

    public struct LaunchTemplateInstanceMetadataOptionsRequest: AWSEncodableShape {
        /// Enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is enabled.  If you specify a value of disabled, you will not be able to access your instance metadata.
        public let httpEndpoint: LaunchTemplateInstanceMetadataEndpointState?
        /// Enables or disables the IPv6 endpoint for the instance metadata service. Default: disabled
        public let httpProtocolIpv6: LaunchTemplateInstanceMetadataProtocolIpv6?
        /// The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Default: 1  Possible values: Integers from 1 to 64
        public let httpPutResponseHopLimit: Int?
        /// Indicates whether IMDSv2 is required.    optional - IMDSv2 is optional. You can choose whether to send a  session token in your instance metadata retrieval requests. If you retrieve  IAM role credentials without a session token, you receive the IMDSv1 role  credentials. If you retrieve IAM role credentials using a valid session token,  you receive the IMDSv2 role credentials.    required - IMDSv2 is required. You must send a session token  in your instance metadata retrieval requests. With this option, retrieving the  IAM role credentials always returns IMDSv2 credentials; IMDSv1 credentials are  not available.   Default: If the value of ImdsSupport for the Amazon Machine Image (AMI)  for your instance is v2.0, the default is required.
        public let httpTokens: LaunchTemplateHttpTokensState?
        /// Set to enabled to allow access to instance tags from the instance metadata. Set to disabled to turn off access to instance tags from the instance metadata. For more information, see Work with instance tags using the instance metadata. Default: disabled
        public let instanceMetadataTags: LaunchTemplateInstanceMetadataTagsState?

        public init(httpEndpoint: LaunchTemplateInstanceMetadataEndpointState? = nil, httpProtocolIpv6: LaunchTemplateInstanceMetadataProtocolIpv6? = nil, httpPutResponseHopLimit: Int? = nil, httpTokens: LaunchTemplateHttpTokensState? = nil, instanceMetadataTags: LaunchTemplateInstanceMetadataTagsState? = nil) {
            self.httpEndpoint = httpEndpoint
            self.httpProtocolIpv6 = httpProtocolIpv6
            self.httpPutResponseHopLimit = httpPutResponseHopLimit
            self.httpTokens = httpTokens
            self.instanceMetadataTags = instanceMetadataTags
        }

        private enum CodingKeys: String, CodingKey {
            case httpEndpoint = "HttpEndpoint"
            case httpProtocolIpv6 = "HttpProtocolIpv6"
            case httpPutResponseHopLimit = "HttpPutResponseHopLimit"
            case httpTokens = "HttpTokens"
            case instanceMetadataTags = "InstanceMetadataTags"
        }
    }

    public struct LaunchTemplateInstanceNetworkInterfaceSpecification: AWSDecodableShape {
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "groupId" }
        public struct _Ipv4PrefixesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv6AddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv6PrefixesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PrivateIpAddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether to associate a Carrier IP address with eth0 for a new network interface. Use this option when you launch an instance in a Wavelength Zone and want to associate a Carrier IP address with the network interface. For more information about Carrier IP addresses, see Carrier IP addresses in the Wavelength Developer Guide.
        public let associateCarrierIpAddress: Bool?
        /// Indicates whether to associate a public IPv4 address with eth0 for a new network interface. Amazon Web Services charges for all public IPv4 addresses, including public IPv4 addresses
        /// associated with running instances and Elastic IP addresses. For more information, see the Public IPv4 Address tab on the Amazon VPC pricing page.
        public let associatePublicIpAddress: Bool?
        /// A security group connection tracking specification that enables you to set the timeout for connection tracking on an Elastic network interface. For more information, see Connection tracking timeouts in the Amazon Elastic Compute Cloud User Guide.
        public let connectionTrackingSpecification: ConnectionTrackingSpecification?
        /// Indicates whether the network interface is deleted when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// A description for the network interface.
        public let description: String?
        /// The device index for the network interface attachment.
        public let deviceIndex: Int?
        /// Contains the ENA Express settings for instances launched from your launch template.
        public let enaSrdSpecification: LaunchTemplateEnaSrdSpecification?
        /// The IDs of one or more security groups.
        @OptionalCustomCoding<EC2ArrayCoder<_GroupsEncoding, String>>
        public var groups: [String]?
        /// The type of network interface.
        public let interfaceType: String?
        /// The number of IPv4 prefixes that Amazon Web Services automatically assigned to the network interface.
        public let ipv4PrefixCount: Int?
        /// One or more IPv4 prefixes assigned to the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv4PrefixesEncoding, Ipv4PrefixSpecificationResponse>>
        public var ipv4Prefixes: [Ipv4PrefixSpecificationResponse]?
        /// The number of IPv6 addresses for the network interface.
        public let ipv6AddressCount: Int?
        /// The IPv6 addresses for the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv6AddressesEncoding, InstanceIpv6Address>>
        public var ipv6Addresses: [InstanceIpv6Address]?
        /// The number of IPv6 prefixes that Amazon Web Services automatically assigned to the network interface.
        public let ipv6PrefixCount: Int?
        /// One or more IPv6 prefixes assigned to the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv6PrefixesEncoding, Ipv6PrefixSpecificationResponse>>
        public var ipv6Prefixes: [Ipv6PrefixSpecificationResponse]?
        /// The index of the network card.
        public let networkCardIndex: Int?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The primary IPv6 address of the network interface. When you enable an IPv6 GUA address to be a primary IPv6, the first IPv6 GUA will be made the primary IPv6 address until the instance is terminated or the network interface is detached. For more information about primary IPv6 addresses, see RunInstances.
        public let primaryIpv6: Bool?
        /// The primary private IPv4 address of the network interface.
        public let privateIpAddress: String?
        /// One or more private IPv4 addresses.
        @OptionalCustomCoding<EC2ArrayCoder<_PrivateIpAddressesEncoding, PrivateIpAddressSpecification>>
        public var privateIpAddresses: [PrivateIpAddressSpecification]?
        /// The number of secondary private IPv4 addresses for the network interface.
        public let secondaryPrivateIpAddressCount: Int?
        /// The ID of the subnet for the network interface.
        public let subnetId: String?

        public init(associateCarrierIpAddress: Bool? = nil, associatePublicIpAddress: Bool? = nil, connectionTrackingSpecification: ConnectionTrackingSpecification? = nil, deleteOnTermination: Bool? = nil, description: String? = nil, deviceIndex: Int? = nil, enaSrdSpecification: LaunchTemplateEnaSrdSpecification? = nil, groups: [String]? = nil, interfaceType: String? = nil, ipv4PrefixCount: Int? = nil, ipv4Prefixes: [Ipv4PrefixSpecificationResponse]? = nil, ipv6AddressCount: Int? = nil, ipv6Addresses: [InstanceIpv6Address]? = nil, ipv6PrefixCount: Int? = nil, ipv6Prefixes: [Ipv6PrefixSpecificationResponse]? = nil, networkCardIndex: Int? = nil, networkInterfaceId: String? = nil, primaryIpv6: Bool? = nil, privateIpAddress: String? = nil, privateIpAddresses: [PrivateIpAddressSpecification]? = nil, secondaryPrivateIpAddressCount: Int? = nil, subnetId: String? = nil) {
            self.associateCarrierIpAddress = associateCarrierIpAddress
            self.associatePublicIpAddress = associatePublicIpAddress
            self.connectionTrackingSpecification = connectionTrackingSpecification
            self.deleteOnTermination = deleteOnTermination
            self.description = description
            self.deviceIndex = deviceIndex
            self.enaSrdSpecification = enaSrdSpecification
            self.groups = groups
            self.interfaceType = interfaceType
            self.ipv4PrefixCount = ipv4PrefixCount
            self.ipv4Prefixes = ipv4Prefixes
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.ipv6PrefixCount = ipv6PrefixCount
            self.ipv6Prefixes = ipv6Prefixes
            self.networkCardIndex = networkCardIndex
            self.networkInterfaceId = networkInterfaceId
            self.primaryIpv6 = primaryIpv6
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case associateCarrierIpAddress = "associateCarrierIpAddress"
            case associatePublicIpAddress = "associatePublicIpAddress"
            case connectionTrackingSpecification = "connectionTrackingSpecification"
            case deleteOnTermination = "deleteOnTermination"
            case description = "description"
            case deviceIndex = "deviceIndex"
            case enaSrdSpecification = "enaSrdSpecification"
            case groups = "groupSet"
            case interfaceType = "interfaceType"
            case ipv4PrefixCount = "ipv4PrefixCount"
            case ipv4Prefixes = "ipv4PrefixSet"
            case ipv6AddressCount = "ipv6AddressCount"
            case ipv6Addresses = "ipv6AddressesSet"
            case ipv6PrefixCount = "ipv6PrefixCount"
            case ipv6Prefixes = "ipv6PrefixSet"
            case networkCardIndex = "networkCardIndex"
            case networkInterfaceId = "networkInterfaceId"
            case primaryIpv6 = "primaryIpv6"
            case privateIpAddress = "privateIpAddress"
            case privateIpAddresses = "privateIpAddressesSet"
            case secondaryPrivateIpAddressCount = "secondaryPrivateIpAddressCount"
            case subnetId = "subnetId"
        }
    }

    public struct LaunchTemplateInstanceNetworkInterfaceSpecificationRequest: AWSEncodableShape {
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "SecurityGroupId" }
        public struct _Ipv4PrefixesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv6AddressesEncoding: ArrayCoderProperties { public static let member = "InstanceIpv6Address" }
        public struct _Ipv6PrefixesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PrivateIpAddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Associates a Carrier IP address with eth0 for a new network interface. Use this option when you launch an instance in a Wavelength Zone and want to associate a Carrier IP address with the network interface. For more information about Carrier IP addresses, see Carrier IP addresses in the Wavelength Developer Guide.
        public let associateCarrierIpAddress: Bool?
        /// Associates a public IPv4 address with eth0 for a new network interface. Amazon Web Services charges for all public IPv4 addresses, including public IPv4 addresses
        /// associated with running instances and Elastic IP addresses. For more information, see the Public IPv4 Address tab on the Amazon VPC pricing page.
        public let associatePublicIpAddress: Bool?
        /// A security group connection tracking specification that enables you to set the timeout for connection tracking on an Elastic network interface. For more information, see Connection tracking timeouts in the Amazon Elastic Compute Cloud User Guide.
        public let connectionTrackingSpecification: ConnectionTrackingSpecificationRequest?
        /// Indicates whether the network interface is deleted when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// A description for the network interface.
        public let description: String?
        /// The device index for the network interface attachment.
        public let deviceIndex: Int?
        /// Configure ENA Express settings for your launch template.
        public let enaSrdSpecification: EnaSrdSpecificationRequest?
        /// The IDs of one or more security groups.
        @OptionalCustomCoding<EC2ArrayCoder<_GroupsEncoding, String>>
        public var groups: [String]?
        /// The type of network interface. To create an Elastic Fabric Adapter (EFA), specify efa. For more information, see Elastic Fabric Adapter in the Amazon Elastic Compute Cloud User Guide. If you are not creating an EFA, specify interface or omit this parameter. Valid values: interface | efa
        public let interfaceType: String?
        /// The number of IPv4 prefixes to be automatically assigned to the network interface. You cannot use this option if you use the Ipv4Prefix option.
        public let ipv4PrefixCount: Int?
        /// One or more IPv4 prefixes to be assigned to the network interface. You cannot use this option if you use the Ipv4PrefixCount option.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv4PrefixesEncoding, Ipv4PrefixSpecificationRequest>>
        public var ipv4Prefixes: [Ipv4PrefixSpecificationRequest]?
        /// The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses.
        public let ipv6AddressCount: Int?
        /// One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. You can't use this option if you're specifying a number of IPv6 addresses.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv6AddressesEncoding, InstanceIpv6AddressRequest>>
        public var ipv6Addresses: [InstanceIpv6AddressRequest]?
        /// The number of IPv6 prefixes to be automatically assigned to the network interface. You cannot use this option if you use the Ipv6Prefix option.
        public let ipv6PrefixCount: Int?
        /// One or more IPv6 prefixes to be assigned to the network interface. You cannot use this option if you use the Ipv6PrefixCount option.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv6PrefixesEncoding, Ipv6PrefixSpecificationRequest>>
        public var ipv6Prefixes: [Ipv6PrefixSpecificationRequest]?
        /// The index of the network card. Some instance types support multiple network cards. The primary network interface must be assigned to network card index 0. The default is network card index 0.
        public let networkCardIndex: Int?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The primary IPv6 address of the network interface. When you enable an IPv6 GUA address to be a primary IPv6, the first IPv6 GUA will be made the primary IPv6 address until the instance is terminated or the network interface is detached. For more information about primary IPv6 addresses, see RunInstances.
        public let primaryIpv6: Bool?
        /// The primary private IPv4 address of the network interface.
        public let privateIpAddress: String?
        /// One or more private IPv4 addresses.
        @OptionalCustomCoding<EC2ArrayCoder<_PrivateIpAddressesEncoding, PrivateIpAddressSpecification>>
        public var privateIpAddresses: [PrivateIpAddressSpecification]?
        /// The number of secondary private IPv4 addresses to assign to a network interface.
        public let secondaryPrivateIpAddressCount: Int?
        /// The ID of the subnet for the network interface.
        public let subnetId: String?

        public init(associateCarrierIpAddress: Bool? = nil, associatePublicIpAddress: Bool? = nil, connectionTrackingSpecification: ConnectionTrackingSpecificationRequest? = nil, deleteOnTermination: Bool? = nil, description: String? = nil, deviceIndex: Int? = nil, enaSrdSpecification: EnaSrdSpecificationRequest? = nil, groups: [String]? = nil, interfaceType: String? = nil, ipv4PrefixCount: Int? = nil, ipv4Prefixes: [Ipv4PrefixSpecificationRequest]? = nil, ipv6AddressCount: Int? = nil, ipv6Addresses: [InstanceIpv6AddressRequest]? = nil, ipv6PrefixCount: Int? = nil, ipv6Prefixes: [Ipv6PrefixSpecificationRequest]? = nil, networkCardIndex: Int? = nil, networkInterfaceId: String? = nil, primaryIpv6: Bool? = nil, privateIpAddress: String? = nil, privateIpAddresses: [PrivateIpAddressSpecification]? = nil, secondaryPrivateIpAddressCount: Int? = nil, subnetId: String? = nil) {
            self.associateCarrierIpAddress = associateCarrierIpAddress
            self.associatePublicIpAddress = associatePublicIpAddress
            self.connectionTrackingSpecification = connectionTrackingSpecification
            self.deleteOnTermination = deleteOnTermination
            self.description = description
            self.deviceIndex = deviceIndex
            self.enaSrdSpecification = enaSrdSpecification
            self.groups = groups
            self.interfaceType = interfaceType
            self.ipv4PrefixCount = ipv4PrefixCount
            self.ipv4Prefixes = ipv4Prefixes
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.ipv6PrefixCount = ipv6PrefixCount
            self.ipv6Prefixes = ipv6Prefixes
            self.networkCardIndex = networkCardIndex
            self.networkInterfaceId = networkInterfaceId
            self.primaryIpv6 = primaryIpv6
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case associateCarrierIpAddress = "AssociateCarrierIpAddress"
            case associatePublicIpAddress = "AssociatePublicIpAddress"
            case connectionTrackingSpecification = "ConnectionTrackingSpecification"
            case deleteOnTermination = "DeleteOnTermination"
            case description = "Description"
            case deviceIndex = "DeviceIndex"
            case enaSrdSpecification = "EnaSrdSpecification"
            case groups = "SecurityGroupId"
            case interfaceType = "InterfaceType"
            case ipv4PrefixCount = "Ipv4PrefixCount"
            case ipv4Prefixes = "Ipv4Prefix"
            case ipv6AddressCount = "Ipv6AddressCount"
            case ipv6Addresses = "Ipv6Addresses"
            case ipv6PrefixCount = "Ipv6PrefixCount"
            case ipv6Prefixes = "Ipv6Prefix"
            case networkCardIndex = "NetworkCardIndex"
            case networkInterfaceId = "NetworkInterfaceId"
            case primaryIpv6 = "PrimaryIpv6"
            case privateIpAddress = "PrivateIpAddress"
            case privateIpAddresses = "PrivateIpAddresses"
            case secondaryPrivateIpAddressCount = "SecondaryPrivateIpAddressCount"
            case subnetId = "SubnetId"
        }
    }

    public struct LaunchTemplateLicenseConfiguration: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the license configuration.
        public let licenseConfigurationArn: String?

        public init(licenseConfigurationArn: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "licenseConfigurationArn"
        }
    }

    public struct LaunchTemplateLicenseConfigurationRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the license configuration.
        public let licenseConfigurationArn: String?

        public init(licenseConfigurationArn: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "LicenseConfigurationArn"
        }
    }

    public struct LaunchTemplateOverrides: AWSEncodableShape & AWSDecodableShape {
        /// The Availability Zone in which to launch the instances.
        public let availabilityZone: String?
        /// The instance requirements. When you specify instance requirements, Amazon EC2 will identify instance types with the provided requirements, and then use your On-Demand and Spot allocation strategies to launch instances from these instance types, in the same way as when you specify a list of instance types.  If you specify InstanceRequirements, you can't specify InstanceType.
        public let instanceRequirements: InstanceRequirements?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The priority for the launch template override. The highest priority is launched first. If OnDemandAllocationStrategy is set to prioritized, Spot Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. If the Spot AllocationStrategy is set to capacityOptimizedPrioritized, Spot Fleet uses priority on a best-effort basis to determine which launch template override to use in fulfilling Spot capacity, but optimizes for capacity first. Valid values are whole numbers starting at 0. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority. You can set the same priority for different launch template overrides.
        public let priority: Double?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance. We do not recommend using this parameter because it can lead to  increased interruptions. If you do not specify this parameter, you will pay the current Spot price.  If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify this parameter.
        public let spotPrice: String?
        /// The ID of the subnet in which to launch the instances.
        public let subnetId: String?
        /// The number of units provided by the specified instance type.  When specifying weights, the price used in the lowest-price and price-capacity-optimized allocation strategies is per unit hour (where the instance price is divided by the specified weight). However, if all the specified weights are above the requested TargetCapacity, resulting in only 1 instance being launched, the price used is per instance hour.
        public let weightedCapacity: Double?

        public init(availabilityZone: String? = nil, instanceRequirements: InstanceRequirements? = nil, instanceType: InstanceType? = nil, priority: Double? = nil, spotPrice: String? = nil, subnetId: String? = nil, weightedCapacity: Double? = nil) {
            self.availabilityZone = availabilityZone
            self.instanceRequirements = instanceRequirements
            self.instanceType = instanceType
            self.priority = priority
            self.spotPrice = spotPrice
            self.subnetId = subnetId
            self.weightedCapacity = weightedCapacity
        }

        public func validate(name: String) throws {
            try self.instanceRequirements?.validate(name: "\(name).instanceRequirements")
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case instanceRequirements = "instanceRequirements"
            case instanceType = "instanceType"
            case priority = "priority"
            case spotPrice = "spotPrice"
            case subnetId = "subnetId"
            case weightedCapacity = "weightedCapacity"
        }
    }

    public struct LaunchTemplatePlacement: AWSDecodableShape {
        /// The affinity setting for the instance on the Dedicated Host.
        public let affinity: String?
        /// The Availability Zone of the instance.
        public let availabilityZone: String?
        /// The Group ID of the placement group. You must specify the Placement Group Group ID to launch an instance in a shared placement group.
        public let groupId: String?
        /// The name of the placement group for the instance.
        public let groupName: String?
        /// The ID of the Dedicated Host for the instance.
        public let hostId: String?
        /// The ARN of the host resource group in which to launch the instances.
        public let hostResourceGroupArn: String?
        /// The number of the partition the instance should launch in. Valid only if the placement group strategy is set to partition.
        public let partitionNumber: Int?
        /// Reserved for future use.
        public let spreadDomain: String?
        /// The tenancy of the instance. An instance with a tenancy of dedicated runs on single-tenant hardware.
        public let tenancy: Tenancy?

        public init(affinity: String? = nil, availabilityZone: String? = nil, groupId: String? = nil, groupName: String? = nil, hostId: String? = nil, hostResourceGroupArn: String? = nil, partitionNumber: Int? = nil, spreadDomain: String? = nil, tenancy: Tenancy? = nil) {
            self.affinity = affinity
            self.availabilityZone = availabilityZone
            self.groupId = groupId
            self.groupName = groupName
            self.hostId = hostId
            self.hostResourceGroupArn = hostResourceGroupArn
            self.partitionNumber = partitionNumber
            self.spreadDomain = spreadDomain
            self.tenancy = tenancy
        }

        private enum CodingKeys: String, CodingKey {
            case affinity = "affinity"
            case availabilityZone = "availabilityZone"
            case groupId = "groupId"
            case groupName = "groupName"
            case hostId = "hostId"
            case hostResourceGroupArn = "hostResourceGroupArn"
            case partitionNumber = "partitionNumber"
            case spreadDomain = "spreadDomain"
            case tenancy = "tenancy"
        }
    }

    public struct LaunchTemplatePlacementRequest: AWSEncodableShape {
        /// The affinity setting for an instance on a Dedicated Host.
        public let affinity: String?
        /// The Availability Zone for the instance.
        public let availabilityZone: String?
        /// The Group Id of a placement group. You must specify the Placement Group Group Id to launch an instance in a shared placement group.
        public let groupId: String?
        /// The name of the placement group for the instance.
        public let groupName: String?
        /// The ID of the Dedicated Host for the instance.
        public let hostId: String?
        /// The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the Tenancy parameter or set it to host.
        public let hostResourceGroupArn: String?
        /// The number of the partition the instance should launch in. Valid only if the placement group strategy is set to partition.
        public let partitionNumber: Int?
        /// Reserved for future use.
        public let spreadDomain: String?
        /// The tenancy of the instance. An instance with a tenancy of dedicated runs on single-tenant hardware.
        public let tenancy: Tenancy?

        public init(affinity: String? = nil, availabilityZone: String? = nil, groupId: String? = nil, groupName: String? = nil, hostId: String? = nil, hostResourceGroupArn: String? = nil, partitionNumber: Int? = nil, spreadDomain: String? = nil, tenancy: Tenancy? = nil) {
            self.affinity = affinity
            self.availabilityZone = availabilityZone
            self.groupId = groupId
            self.groupName = groupName
            self.hostId = hostId
            self.hostResourceGroupArn = hostResourceGroupArn
            self.partitionNumber = partitionNumber
            self.spreadDomain = spreadDomain
            self.tenancy = tenancy
        }

        private enum CodingKeys: String, CodingKey {
            case affinity = "Affinity"
            case availabilityZone = "AvailabilityZone"
            case groupId = "GroupId"
            case groupName = "GroupName"
            case hostId = "HostId"
            case hostResourceGroupArn = "HostResourceGroupArn"
            case partitionNumber = "PartitionNumber"
            case spreadDomain = "SpreadDomain"
            case tenancy = "Tenancy"
        }
    }

    public struct LaunchTemplatePrivateDnsNameOptions: AWSDecodableShape {
        /// Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
        public let enableResourceNameDnsAAAARecord: Bool?
        /// Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
        public let enableResourceNameDnsARecord: Bool?
        /// The type of hostname to assign to an instance.
        public let hostnameType: HostnameType?

        public init(enableResourceNameDnsAAAARecord: Bool? = nil, enableResourceNameDnsARecord: Bool? = nil, hostnameType: HostnameType? = nil) {
            self.enableResourceNameDnsAAAARecord = enableResourceNameDnsAAAARecord
            self.enableResourceNameDnsARecord = enableResourceNameDnsARecord
            self.hostnameType = hostnameType
        }

        private enum CodingKeys: String, CodingKey {
            case enableResourceNameDnsAAAARecord = "enableResourceNameDnsAAAARecord"
            case enableResourceNameDnsARecord = "enableResourceNameDnsARecord"
            case hostnameType = "hostnameType"
        }
    }

    public struct LaunchTemplatePrivateDnsNameOptionsRequest: AWSEncodableShape {
        /// Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
        public let enableResourceNameDnsAAAARecord: Bool?
        /// Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
        public let enableResourceNameDnsARecord: Bool?
        /// The type of hostname for Amazon EC2 instances. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 native subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID.
        public let hostnameType: HostnameType?

        public init(enableResourceNameDnsAAAARecord: Bool? = nil, enableResourceNameDnsARecord: Bool? = nil, hostnameType: HostnameType? = nil) {
            self.enableResourceNameDnsAAAARecord = enableResourceNameDnsAAAARecord
            self.enableResourceNameDnsARecord = enableResourceNameDnsARecord
            self.hostnameType = hostnameType
        }

        private enum CodingKeys: String, CodingKey {
            case enableResourceNameDnsAAAARecord = "EnableResourceNameDnsAAAARecord"
            case enableResourceNameDnsARecord = "EnableResourceNameDnsARecord"
            case hostnameType = "HostnameType"
        }
    }

    public struct LaunchTemplateSpecification: AWSEncodableShape {
        /// The ID of the launch template. You must specify the LaunchTemplateId or the LaunchTemplateName, but not both.
        public let launchTemplateId: String?
        /// The name of the launch template. You must specify the LaunchTemplateName or the LaunchTemplateId, but not both.
        public let launchTemplateName: String?
        /// The launch template version number, $Latest, or $Default. If the value is $Latest, Amazon EC2 uses the latest version of the launch template. If the value is $Default, Amazon EC2 uses the default version of the launch template. Default: The default version of the launch template.
        public let version: String?

        public init(launchTemplateId: String? = nil, launchTemplateName: String? = nil, version: String? = nil) {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
            case version = "Version"
        }
    }

    public struct LaunchTemplateSpotMarketOptions: AWSDecodableShape {
        /// The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
        public let blockDurationMinutes: Int?
        /// The behavior when a Spot Instance is interrupted.
        public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
        /// The maximum hourly price you're willing to pay for the Spot Instances. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.  If you specify a maximum price, your Spot Instances will be interrupted more frequently than if you do not specify this parameter.
        public let maxPrice: String?
        /// The Spot Instance request type.
        public let spotInstanceType: SpotInstanceType?
        /// The end date of the request. For a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached.
        public let validUntil: Date?

        public init(blockDurationMinutes: Int? = nil, instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil, maxPrice: String? = nil, spotInstanceType: SpotInstanceType? = nil, validUntil: Date? = nil) {
            self.blockDurationMinutes = blockDurationMinutes
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.maxPrice = maxPrice
            self.spotInstanceType = spotInstanceType
            self.validUntil = validUntil
        }

        private enum CodingKeys: String, CodingKey {
            case blockDurationMinutes = "blockDurationMinutes"
            case instanceInterruptionBehavior = "instanceInterruptionBehavior"
            case maxPrice = "maxPrice"
            case spotInstanceType = "spotInstanceType"
            case validUntil = "validUntil"
        }
    }

    public struct LaunchTemplateSpotMarketOptionsRequest: AWSEncodableShape {
        /// Deprecated.
        public let blockDurationMinutes: Int?
        /// The behavior when a Spot Instance is interrupted. The default is terminate.
        public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
        /// The maximum hourly price you're willing to pay for the Spot Instances. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.  If you specify a maximum price, your Spot Instances will be interrupted more frequently than if you do not specify this parameter.
        public let maxPrice: String?
        /// The Spot Instance request type.
        public let spotInstanceType: SpotInstanceType?
        /// The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). Supported only for persistent requests.   For a persistent request, the request remains active until the ValidUntil date and time is reached. Otherwise, the request remains active until you cancel it.   For a one-time request, ValidUntil is not supported. The request remains active until all instances launch or you cancel the request.   Default: 7 days from the current date
        public let validUntil: Date?

        public init(blockDurationMinutes: Int? = nil, instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil, maxPrice: String? = nil, spotInstanceType: SpotInstanceType? = nil, validUntil: Date? = nil) {
            self.blockDurationMinutes = blockDurationMinutes
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.maxPrice = maxPrice
            self.spotInstanceType = spotInstanceType
            self.validUntil = validUntil
        }

        private enum CodingKeys: String, CodingKey {
            case blockDurationMinutes = "BlockDurationMinutes"
            case instanceInterruptionBehavior = "InstanceInterruptionBehavior"
            case maxPrice = "MaxPrice"
            case spotInstanceType = "SpotInstanceType"
            case validUntil = "ValidUntil"
        }
    }

    public struct LaunchTemplateTagSpecification: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The type of resource to tag.
        public let resourceType: ResourceType?
        /// The tags for the resource.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(resourceType: ResourceType? = nil, tags: [Tag]? = nil) {
            self.resourceType = resourceType
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "resourceType"
            case tags = "tagSet"
        }
    }

    public struct LaunchTemplateTagSpecificationRequest: AWSEncodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The type of resource to tag. Valid Values lists all resource types for Amazon EC2 that can be tagged. When you create a launch template, you can specify tags for the following resource types only: instance | volume | network-interface | spot-instances-request. If the instance does not include the resource type that you specify, the instance  launch fails. For example, not all instance types include a volume. To tag a resource after it has been created, see CreateTags.
        public let resourceType: ResourceType?
        /// The tags to apply to the resource.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(resourceType: ResourceType? = nil, tags: [Tag]? = nil) {
            self.resourceType = resourceType
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case tags = "Tag"
        }
    }

    public struct LaunchTemplateVersion: AWSDecodableShape {
        /// The principal that created the version.
        public let createdBy: String?
        /// The time the version was created.
        public let createTime: Date?
        /// Indicates whether the version is the default version.
        public let defaultVersion: Bool?
        /// Information about the launch template.
        public let launchTemplateData: ResponseLaunchTemplateData?
        /// The ID of the launch template.
        public let launchTemplateId: String?
        /// The name of the launch template.
        public let launchTemplateName: String?
        /// The description for the version.
        public let versionDescription: String?
        /// The version number.
        public let versionNumber: Int64?

        public init(createdBy: String? = nil, createTime: Date? = nil, defaultVersion: Bool? = nil, launchTemplateData: ResponseLaunchTemplateData? = nil, launchTemplateId: String? = nil, launchTemplateName: String? = nil, versionDescription: String? = nil, versionNumber: Int64? = nil) {
            self.createdBy = createdBy
            self.createTime = createTime
            self.defaultVersion = defaultVersion
            self.launchTemplateData = launchTemplateData
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.versionDescription = versionDescription
            self.versionNumber = versionNumber
        }

        private enum CodingKeys: String, CodingKey {
            case createdBy = "createdBy"
            case createTime = "createTime"
            case defaultVersion = "defaultVersion"
            case launchTemplateData = "launchTemplateData"
            case launchTemplateId = "launchTemplateId"
            case launchTemplateName = "launchTemplateName"
            case versionDescription = "versionDescription"
            case versionNumber = "versionNumber"
        }
    }

    public struct LaunchTemplatesMonitoring: AWSDecodableShape {
        /// Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "enabled"
        }
    }

    public struct LaunchTemplatesMonitoringRequest: AWSEncodableShape {
        /// Specify true to enable detailed monitoring. Otherwise, basic monitoring is enabled.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public struct LicenseConfiguration: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the license configuration.
        public let licenseConfigurationArn: String?

        public init(licenseConfigurationArn: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "licenseConfigurationArn"
        }
    }

    public struct LicenseConfigurationRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the license configuration.
        public let licenseConfigurationArn: String?

        public init(licenseConfigurationArn: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "LicenseConfigurationArn"
        }
    }

    public struct ListImagesInRecycleBinRequest: AWSEncodableShape {
        public struct _ImageIdsEncoding: ArrayCoderProperties { public static let member = "ImageId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the AMIs to list. Omit this parameter to list all of the AMIs that  are in the Recycle Bin. You can specify up to 20 IDs in a single request.
        @OptionalCustomCoding<EC2ArrayCoder<_ImageIdsEncoding, String>>
        public var imageIds: [String]?
        /// The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
        /// 	        For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, imageIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.imageIds = imageIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case imageIds = "ImageId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListImagesInRecycleBinResult: AWSDecodableShape {
        public struct _ImagesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the AMIs.
        @OptionalCustomCoding<EC2ArrayCoder<_ImagesEncoding, ImageRecycleBinInfo>>
        public var images: [ImageRecycleBinInfo]?
        /// The token to include in another request to get the next page of items. This value is null when there are no more items to return.
        public let nextToken: String?

        public init(images: [ImageRecycleBinInfo]? = nil, nextToken: String? = nil) {
            self.images = images
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case images = "imageSet"
            case nextToken = "nextToken"
        }
    }

    public struct ListSnapshotsInRecycleBinRequest: AWSEncodableShape {
        public struct _SnapshotIdsEncoding: ArrayCoderProperties { public static let member = "SnapshotId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of items to return for this request.
        /// 	To get the next page of items, make another request with the token returned in the output.
        /// 	For more information, see Pagination.
        public let maxResults: Int?
        /// The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
        public let nextToken: String?
        /// The IDs of the snapshots to list. Omit this parameter to list all of the  snapshots that are in the Recycle Bin.
        @OptionalCustomCoding<EC2ArrayCoder<_SnapshotIdsEncoding, String>>
        public var snapshotIds: [String]?

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil, snapshotIds: [String]? = nil) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.snapshotIds = snapshotIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case snapshotIds = "SnapshotId"
        }
    }

    public struct ListSnapshotsInRecycleBinResult: AWSDecodableShape {
        public struct _SnapshotsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to include in another request to get the next page of items.  This value is null when there are no more items to return.
        public let nextToken: String?
        /// Information about the snapshots.
        @OptionalCustomCoding<EC2ArrayCoder<_SnapshotsEncoding, SnapshotRecycleBinInfo>>
        public var snapshots: [SnapshotRecycleBinInfo]?

        public init(nextToken: String? = nil, snapshots: [SnapshotRecycleBinInfo]? = nil) {
            self.nextToken = nextToken
            self.snapshots = snapshots
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case snapshots = "snapshotSet"
        }
    }

    public struct LoadBalancersConfig: AWSEncodableShape & AWSDecodableShape {
        /// The Classic Load Balancers.
        public let classicLoadBalancersConfig: ClassicLoadBalancersConfig?
        /// The target groups.
        public let targetGroupsConfig: TargetGroupsConfig?

        public init(classicLoadBalancersConfig: ClassicLoadBalancersConfig? = nil, targetGroupsConfig: TargetGroupsConfig? = nil) {
            self.classicLoadBalancersConfig = classicLoadBalancersConfig
            self.targetGroupsConfig = targetGroupsConfig
        }

        public func validate(name: String) throws {
            try self.classicLoadBalancersConfig?.validate(name: "\(name).classicLoadBalancersConfig")
            try self.targetGroupsConfig?.validate(name: "\(name).targetGroupsConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case classicLoadBalancersConfig = "classicLoadBalancersConfig"
            case targetGroupsConfig = "targetGroupsConfig"
        }
    }

    public struct LoadPermission: AWSDecodableShape {
        /// The name of the group.
        public let group: PermissionGroup?
        /// The Amazon Web Services account ID.
        public let userId: String?

        public init(group: PermissionGroup? = nil, userId: String? = nil) {
            self.group = group
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case group = "group"
            case userId = "userId"
        }
    }

    public struct LoadPermissionModifications: AWSEncodableShape {
        public struct _AddEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The load permissions to add.
        @OptionalCustomCoding<EC2ArrayCoder<_AddEncoding, LoadPermissionRequest>>
        public var add: [LoadPermissionRequest]?
        /// The load permissions to remove.
        @OptionalCustomCoding<EC2ArrayCoder<_RemoveEncoding, LoadPermissionRequest>>
        public var remove: [LoadPermissionRequest]?

        public init(add: [LoadPermissionRequest]? = nil, remove: [LoadPermissionRequest]? = nil) {
            self.add = add
            self.remove = remove
        }

        private enum CodingKeys: String, CodingKey {
            case add = "Add"
            case remove = "Remove"
        }
    }

    public struct LoadPermissionRequest: AWSEncodableShape {
        /// The name of the group.
        public let group: PermissionGroup?
        /// The Amazon Web Services account ID.
        public let userId: String?

        public init(group: PermissionGroup? = nil, userId: String? = nil) {
            self.group = group
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case group = "Group"
            case userId = "UserId"
        }
    }

    public struct LocalGateway: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// The ID of the Amazon Web Services account that owns the local gateway.
        public let ownerId: String?
        /// The state of the local gateway.
        public let state: String?
        /// The tags assigned to the local gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(localGatewayId: String? = nil, outpostArn: String? = nil, ownerId: String? = nil, state: String? = nil, tags: [Tag]? = nil) {
            self.localGatewayId = localGatewayId
            self.outpostArn = outpostArn
            self.ownerId = ownerId
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayId = "localGatewayId"
            case outpostArn = "outpostArn"
            case ownerId = "ownerId"
            case state = "state"
            case tags = "tagSet"
        }
    }

    public struct LocalGatewayRoute: AWSDecodableShape {
        /// The ID of the customer-owned address pool.
        public let coipPoolId: String?
        /// The CIDR block used for destination matches.
        public let destinationCidrBlock: String?
        ///  The ID of the prefix list.
        public let destinationPrefixListId: String?
        /// The Amazon Resource Name (ARN) of the local gateway route table.
        public let localGatewayRouteTableArn: String?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?
        /// The ID of the virtual interface group.
        public let localGatewayVirtualInterfaceGroupId: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The ID of the Amazon Web Services account that owns the local gateway route.
        public let ownerId: String?
        /// The state of the route.
        public let state: LocalGatewayRouteState?
        /// The ID of the subnet.
        public let subnetId: String?
        /// The route type.
        public let type: LocalGatewayRouteType?

        public init(coipPoolId: String? = nil, destinationCidrBlock: String? = nil, destinationPrefixListId: String? = nil, localGatewayRouteTableArn: String? = nil, localGatewayRouteTableId: String? = nil, localGatewayVirtualInterfaceGroupId: String? = nil, networkInterfaceId: String? = nil, ownerId: String? = nil, state: LocalGatewayRouteState? = nil, subnetId: String? = nil, type: LocalGatewayRouteType? = nil) {
            self.coipPoolId = coipPoolId
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationPrefixListId = destinationPrefixListId
            self.localGatewayRouteTableArn = localGatewayRouteTableArn
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.localGatewayVirtualInterfaceGroupId = localGatewayVirtualInterfaceGroupId
            self.networkInterfaceId = networkInterfaceId
            self.ownerId = ownerId
            self.state = state
            self.subnetId = subnetId
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case coipPoolId = "coipPoolId"
            case destinationCidrBlock = "destinationCidrBlock"
            case destinationPrefixListId = "destinationPrefixListId"
            case localGatewayRouteTableArn = "localGatewayRouteTableArn"
            case localGatewayRouteTableId = "localGatewayRouteTableId"
            case localGatewayVirtualInterfaceGroupId = "localGatewayVirtualInterfaceGroupId"
            case networkInterfaceId = "networkInterfaceId"
            case ownerId = "ownerId"
            case state = "state"
            case subnetId = "subnetId"
            case type = "type"
        }
    }

    public struct LocalGatewayRouteTable: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// The Amazon Resource Name (ARN) of the local gateway route table.
        public let localGatewayRouteTableArn: String?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?
        /// The mode of the local gateway route table.
        public let mode: LocalGatewayRouteTableMode?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// The ID of the Amazon Web Services account that owns the local gateway route table.
        public let ownerId: String?
        /// The state of the local gateway route table.
        public let state: String?
        /// Information about the state change.
        public let stateReason: StateReason?
        /// The tags assigned to the local gateway route table.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(localGatewayId: String? = nil, localGatewayRouteTableArn: String? = nil, localGatewayRouteTableId: String? = nil, mode: LocalGatewayRouteTableMode? = nil, outpostArn: String? = nil, ownerId: String? = nil, state: String? = nil, stateReason: StateReason? = nil, tags: [Tag]? = nil) {
            self.localGatewayId = localGatewayId
            self.localGatewayRouteTableArn = localGatewayRouteTableArn
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.mode = mode
            self.outpostArn = outpostArn
            self.ownerId = ownerId
            self.state = state
            self.stateReason = stateReason
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayId = "localGatewayId"
            case localGatewayRouteTableArn = "localGatewayRouteTableArn"
            case localGatewayRouteTableId = "localGatewayRouteTableId"
            case mode = "mode"
            case outpostArn = "outpostArn"
            case ownerId = "ownerId"
            case state = "state"
            case stateReason = "stateReason"
            case tags = "tagSet"
        }
    }

    public struct LocalGatewayRouteTableVirtualInterfaceGroupAssociation: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// The Amazon Resource Name (ARN) of the local gateway route table for the virtual interface group.
        public let localGatewayRouteTableArn: String?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?
        /// The ID of the association.
        public let localGatewayRouteTableVirtualInterfaceGroupAssociationId: String?
        /// The ID of the virtual interface group.
        public let localGatewayVirtualInterfaceGroupId: String?
        /// The ID of the Amazon Web Services account that owns the local gateway virtual interface group association.
        public let ownerId: String?
        /// The state of the association.
        public let state: String?
        /// The tags assigned to the association.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(localGatewayId: String? = nil, localGatewayRouteTableArn: String? = nil, localGatewayRouteTableId: String? = nil, localGatewayRouteTableVirtualInterfaceGroupAssociationId: String? = nil, localGatewayVirtualInterfaceGroupId: String? = nil, ownerId: String? = nil, state: String? = nil, tags: [Tag]? = nil) {
            self.localGatewayId = localGatewayId
            self.localGatewayRouteTableArn = localGatewayRouteTableArn
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.localGatewayRouteTableVirtualInterfaceGroupAssociationId = localGatewayRouteTableVirtualInterfaceGroupAssociationId
            self.localGatewayVirtualInterfaceGroupId = localGatewayVirtualInterfaceGroupId
            self.ownerId = ownerId
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayId = "localGatewayId"
            case localGatewayRouteTableArn = "localGatewayRouteTableArn"
            case localGatewayRouteTableId = "localGatewayRouteTableId"
            case localGatewayRouteTableVirtualInterfaceGroupAssociationId = "localGatewayRouteTableVirtualInterfaceGroupAssociationId"
            case localGatewayVirtualInterfaceGroupId = "localGatewayVirtualInterfaceGroupId"
            case ownerId = "ownerId"
            case state = "state"
            case tags = "tagSet"
        }
    }

    public struct LocalGatewayRouteTableVpcAssociation: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// The Amazon Resource Name (ARN) of the local gateway route table for the association.
        public let localGatewayRouteTableArn: String?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?
        /// The ID of the association.
        public let localGatewayRouteTableVpcAssociationId: String?
        /// The ID of the Amazon Web Services account that owns the local gateway route table for the association.
        public let ownerId: String?
        /// The state of the association.
        public let state: String?
        /// The tags assigned to the association.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(localGatewayId: String? = nil, localGatewayRouteTableArn: String? = nil, localGatewayRouteTableId: String? = nil, localGatewayRouteTableVpcAssociationId: String? = nil, ownerId: String? = nil, state: String? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.localGatewayId = localGatewayId
            self.localGatewayRouteTableArn = localGatewayRouteTableArn
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.localGatewayRouteTableVpcAssociationId = localGatewayRouteTableVpcAssociationId
            self.ownerId = ownerId
            self.state = state
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayId = "localGatewayId"
            case localGatewayRouteTableArn = "localGatewayRouteTableArn"
            case localGatewayRouteTableId = "localGatewayRouteTableId"
            case localGatewayRouteTableVpcAssociationId = "localGatewayRouteTableVpcAssociationId"
            case ownerId = "ownerId"
            case state = "state"
            case tags = "tagSet"
            case vpcId = "vpcId"
        }
    }

    public struct LocalGatewayVirtualInterface: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The local address.
        public let localAddress: String?
        /// The Border Gateway Protocol (BGP) Autonomous System Number (ASN) of the local gateway.
        public let localBgpAsn: Int?
        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// The ID of the virtual interface.
        public let localGatewayVirtualInterfaceId: String?
        /// The ID of the Amazon Web Services account that owns the local gateway virtual interface.
        public let ownerId: String?
        /// The peer address.
        public let peerAddress: String?
        /// The peer BGP ASN.
        public let peerBgpAsn: Int?
        /// The tags assigned to the virtual interface.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VLAN.
        public let vlan: Int?

        public init(localAddress: String? = nil, localBgpAsn: Int? = nil, localGatewayId: String? = nil, localGatewayVirtualInterfaceId: String? = nil, ownerId: String? = nil, peerAddress: String? = nil, peerBgpAsn: Int? = nil, tags: [Tag]? = nil, vlan: Int? = nil) {
            self.localAddress = localAddress
            self.localBgpAsn = localBgpAsn
            self.localGatewayId = localGatewayId
            self.localGatewayVirtualInterfaceId = localGatewayVirtualInterfaceId
            self.ownerId = ownerId
            self.peerAddress = peerAddress
            self.peerBgpAsn = peerBgpAsn
            self.tags = tags
            self.vlan = vlan
        }

        private enum CodingKeys: String, CodingKey {
            case localAddress = "localAddress"
            case localBgpAsn = "localBgpAsn"
            case localGatewayId = "localGatewayId"
            case localGatewayVirtualInterfaceId = "localGatewayVirtualInterfaceId"
            case ownerId = "ownerId"
            case peerAddress = "peerAddress"
            case peerBgpAsn = "peerBgpAsn"
            case tags = "tagSet"
            case vlan = "vlan"
        }
    }

    public struct LocalGatewayVirtualInterfaceGroup: AWSDecodableShape {
        public struct _LocalGatewayVirtualInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// The ID of the virtual interface group.
        public let localGatewayVirtualInterfaceGroupId: String?
        /// The IDs of the virtual interfaces.
        @OptionalCustomCoding<EC2ArrayCoder<_LocalGatewayVirtualInterfaceIdsEncoding, String>>
        public var localGatewayVirtualInterfaceIds: [String]?
        /// The ID of the Amazon Web Services account that owns the local gateway virtual interface group.
        public let ownerId: String?
        /// The tags assigned to the virtual interface group.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(localGatewayId: String? = nil, localGatewayVirtualInterfaceGroupId: String? = nil, localGatewayVirtualInterfaceIds: [String]? = nil, ownerId: String? = nil, tags: [Tag]? = nil) {
            self.localGatewayId = localGatewayId
            self.localGatewayVirtualInterfaceGroupId = localGatewayVirtualInterfaceGroupId
            self.localGatewayVirtualInterfaceIds = localGatewayVirtualInterfaceIds
            self.ownerId = ownerId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayId = "localGatewayId"
            case localGatewayVirtualInterfaceGroupId = "localGatewayVirtualInterfaceGroupId"
            case localGatewayVirtualInterfaceIds = "localGatewayVirtualInterfaceIdSet"
            case ownerId = "ownerId"
            case tags = "tagSet"
        }
    }

    public struct LockSnapshotRequest: AWSEncodableShape {
        /// The cooling-off period during which you can unlock the snapshot or modify the lock settings after  locking the snapshot in compliance mode, in hours. After the cooling-off period expires, you can't  unlock or delete the snapshot, decrease the lock duration, or change the lock mode. You can increase  the lock duration after the cooling-off period expires. The cooling-off period is optional when locking a snapshot in compliance mode. If you are locking  the snapshot in governance mode, omit this parameter. To lock the snapshot in compliance mode immediately without a cooling-off period, omit this  parameter. If you are extending the lock duration for a snapshot that is locked in compliance mode after  the cooling-off period has expired, omit this parameter. If you specify a cooling-period in a such  a request, the request fails. Allowed values: Min 1, max 72.
        public let coolOffPeriod: Int?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The date and time at which the snapshot lock is to automatically expire, in the UTC time zone  (YYYY-MM-DDThh:mm:ss.sssZ). You must specify either this parameter or LockDuration, but  not both.
        public let expirationDate: Date?
        /// The period of time for which to lock the snapshot, in days. The snapshot lock will automatically  expire after this period lapses. You must specify either this parameter or ExpirationDate, but  not both. Allowed values: Min: 1, max 36500
        public let lockDuration: Int?
        /// The mode in which to lock the snapshot. Specify one of the following:    governance - Locks the snapshot in governance mode. Snapshots locked in governance  mode can't be deleted until one of the following conditions are met:   The lock duration expires.   The snapshot is unlocked by a user with the appropriate permissions.   Users with the appropriate IAM permissions can unlock the snapshot, increase or decrease the lock  duration, and change the lock mode to compliance at any time. If you lock a snapshot in governance mode, omit  CoolOffPeriod.    compliance - Locks the snapshot in compliance mode. Snapshots locked in compliance  mode can't be unlocked by any user. They can be deleted only after the lock duration expires. Users  can't decrease the lock duration or change the lock mode to governance. However, users  with appropriate IAM permissions can increase the lock duration at any time. If you lock a snapshot in compliance mode, you can optionally specify  CoolOffPeriod.
        public let lockMode: LockMode?
        /// The ID of the snapshot to lock.
        public let snapshotId: String?

        public init(coolOffPeriod: Int? = nil, dryRun: Bool? = nil, expirationDate: Date? = nil, lockDuration: Int? = nil, lockMode: LockMode? = nil, snapshotId: String? = nil) {
            self.coolOffPeriod = coolOffPeriod
            self.dryRun = dryRun
            self.expirationDate = expirationDate
            self.lockDuration = lockDuration
            self.lockMode = lockMode
            self.snapshotId = snapshotId
        }

        public func validate(name: String) throws {
            try self.validate(self.coolOffPeriod, name: "coolOffPeriod", parent: name, max: 72)
            try self.validate(self.coolOffPeriod, name: "coolOffPeriod", parent: name, min: 1)
            try self.validate(self.lockDuration, name: "lockDuration", parent: name, max: 36500)
            try self.validate(self.lockDuration, name: "lockDuration", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case coolOffPeriod = "CoolOffPeriod"
            case dryRun = "DryRun"
            case expirationDate = "ExpirationDate"
            case lockDuration = "LockDuration"
            case lockMode = "LockMode"
            case snapshotId = "SnapshotId"
        }
    }

    public struct LockSnapshotResult: AWSDecodableShape {
        /// The compliance mode cooling-off period, in hours.
        public let coolOffPeriod: Int?
        /// The date and time at which the compliance mode cooling-off period expires, in the UTC time zone  (YYYY-MM-DDThh:mm:ss.sssZ).
        public let coolOffPeriodExpiresOn: Date?
        /// The date and time at which the snapshot was locked, in the UTC time zone  (YYYY-MM-DDThh:mm:ss.sssZ).
        public let lockCreatedOn: Date?
        /// The period of time for which the snapshot is locked, in days.
        public let lockDuration: Int?
        /// The date and time at which the lock duration started, in the UTC time zone  (YYYY-MM-DDThh:mm:ss.sssZ).
        public let lockDurationStartTime: Date?
        /// The date and time at which the lock will expire, in the UTC time zone  (YYYY-MM-DDThh:mm:ss.sssZ).
        public let lockExpiresOn: Date?
        /// The state of the snapshot lock. Valid states include:    compliance-cooloff - The snapshot has been locked in  compliance mode but it is still within the cooling-off period. The snapshot can't be  deleted, but it can be unlocked and the lock settings can be modified by users with  appropriate permissions.    governance - The snapshot is locked in governance mode. The  snapshot can't be deleted, but it can be unlocked and the lock settings can be  modified by users with appropriate permissions.    compliance - The snapshot is locked in compliance mode and the  cooling-off period has expired. The snapshot can't be unlocked or deleted. The lock  duration can only be increased by users with appropriate permissions.    expired - The snapshot was locked in compliance or governance  mode but the lock duration has expired. The snapshot is not locked and can be deleted.
        public let lockState: LockState?
        /// The ID of the snapshot
        public let snapshotId: String?

        public init(coolOffPeriod: Int? = nil, coolOffPeriodExpiresOn: Date? = nil, lockCreatedOn: Date? = nil, lockDuration: Int? = nil, lockDurationStartTime: Date? = nil, lockExpiresOn: Date? = nil, lockState: LockState? = nil, snapshotId: String? = nil) {
            self.coolOffPeriod = coolOffPeriod
            self.coolOffPeriodExpiresOn = coolOffPeriodExpiresOn
            self.lockCreatedOn = lockCreatedOn
            self.lockDuration = lockDuration
            self.lockDurationStartTime = lockDurationStartTime
            self.lockExpiresOn = lockExpiresOn
            self.lockState = lockState
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case coolOffPeriod = "coolOffPeriod"
            case coolOffPeriodExpiresOn = "coolOffPeriodExpiresOn"
            case lockCreatedOn = "lockCreatedOn"
            case lockDuration = "lockDuration"
            case lockDurationStartTime = "lockDurationStartTime"
            case lockExpiresOn = "lockExpiresOn"
            case lockState = "lockState"
            case snapshotId = "snapshotId"
        }
    }

    public struct LockedSnapshotsInfo: AWSDecodableShape {
        /// The compliance mode cooling-off period, in hours.
        public let coolOffPeriod: Int?
        /// The date and time at which the compliance mode cooling-off period expires, in the UTC time zone  (YYYY-MM-DDThh:mm:ss.sssZ).
        public let coolOffPeriodExpiresOn: Date?
        /// The date and time at which the snapshot was locked, in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ).
        public let lockCreatedOn: Date?
        /// The period of time for which the snapshot is locked, in days.
        public let lockDuration: Int?
        /// The date and time at which the lock duration started, in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ). If you lock a snapshot that is in the pending state, the lock duration  starts only once the snapshot enters the completed state.
        public let lockDurationStartTime: Date?
        /// The date and time at which the lock will expire, in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ).
        public let lockExpiresOn: Date?
        /// The state of the snapshot lock. Valid states include:    compliance-cooloff - The snapshot has been locked in  compliance mode but it is still within the cooling-off period. The snapshot can't be  deleted, but it can be unlocked and the lock settings can be modified by users with  appropriate permissions.    governance - The snapshot is locked in governance mode. The  snapshot can't be deleted, but it can be unlocked and the lock settings can be  modified by users with appropriate permissions.    compliance - The snapshot is locked in compliance mode and the  cooling-off period has expired. The snapshot can't be unlocked or deleted. The lock  duration can only be increased by users with appropriate permissions.    expired - The snapshot was locked in compliance or governance  mode but the lock duration has expired. The snapshot is not locked and can be deleted.
        public let lockState: LockState?
        /// The account ID of the Amazon Web Services account that owns the snapshot.
        public let ownerId: String?
        /// The ID of the snapshot.
        public let snapshotId: String?

        public init(coolOffPeriod: Int? = nil, coolOffPeriodExpiresOn: Date? = nil, lockCreatedOn: Date? = nil, lockDuration: Int? = nil, lockDurationStartTime: Date? = nil, lockExpiresOn: Date? = nil, lockState: LockState? = nil, ownerId: String? = nil, snapshotId: String? = nil) {
            self.coolOffPeriod = coolOffPeriod
            self.coolOffPeriodExpiresOn = coolOffPeriodExpiresOn
            self.lockCreatedOn = lockCreatedOn
            self.lockDuration = lockDuration
            self.lockDurationStartTime = lockDurationStartTime
            self.lockExpiresOn = lockExpiresOn
            self.lockState = lockState
            self.ownerId = ownerId
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case coolOffPeriod = "coolOffPeriod"
            case coolOffPeriodExpiresOn = "coolOffPeriodExpiresOn"
            case lockCreatedOn = "lockCreatedOn"
            case lockDuration = "lockDuration"
            case lockDurationStartTime = "lockDurationStartTime"
            case lockExpiresOn = "lockExpiresOn"
            case lockState = "lockState"
            case ownerId = "ownerId"
            case snapshotId = "snapshotId"
        }
    }

    public struct MacHost: AWSDecodableShape {
        public struct _MacOSLatestSupportedVersionsEncoding: ArrayCoderProperties { public static let member = "item" }

        ///  The EC2 Mac Dedicated Host ID.
        public let hostId: String?
        ///  The latest macOS versions that the EC2 Mac Dedicated Host can launch without being upgraded.
        @OptionalCustomCoding<EC2ArrayCoder<_MacOSLatestSupportedVersionsEncoding, String>>
        public var macOSLatestSupportedVersions: [String]?

        public init(hostId: String? = nil, macOSLatestSupportedVersions: [String]? = nil) {
            self.hostId = hostId
            self.macOSLatestSupportedVersions = macOSLatestSupportedVersions
        }

        private enum CodingKeys: String, CodingKey {
            case hostId = "hostId"
            case macOSLatestSupportedVersions = "macOSLatestSupportedVersionSet"
        }
    }

    public struct MaintenanceDetails: AWSDecodableShape {
        /// Timestamp of last applied maintenance.
        public let lastMaintenanceApplied: Date?
        /// The timestamp after which Amazon Web Services will automatically apply maintenance.
        public let maintenanceAutoAppliedAfter: Date?
        /// Verify existence of a pending maintenance.
        public let pendingMaintenance: String?

        public init(lastMaintenanceApplied: Date? = nil, maintenanceAutoAppliedAfter: Date? = nil, pendingMaintenance: String? = nil) {
            self.lastMaintenanceApplied = lastMaintenanceApplied
            self.maintenanceAutoAppliedAfter = maintenanceAutoAppliedAfter
            self.pendingMaintenance = pendingMaintenance
        }

        private enum CodingKeys: String, CodingKey {
            case lastMaintenanceApplied = "lastMaintenanceApplied"
            case maintenanceAutoAppliedAfter = "maintenanceAutoAppliedAfter"
            case pendingMaintenance = "pendingMaintenance"
        }
    }

    public struct ManagedPrefixList: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IP address version.
        public let addressFamily: String?
        /// The maximum number of entries for the prefix list.
        public let maxEntries: Int?
        /// The ID of the owner of the prefix list.
        public let ownerId: String?
        /// The Amazon Resource Name (ARN) for the prefix list.
        public let prefixListArn: String?
        /// The ID of the prefix list.
        public let prefixListId: String?
        /// The name of the prefix list.
        public let prefixListName: String?
        /// The current state of the prefix list.
        public let state: PrefixListState?
        /// The state message.
        public let stateMessage: String?
        /// The tags for the prefix list.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The version of the prefix list.
        public let version: Int64?

        public init(addressFamily: String? = nil, maxEntries: Int? = nil, ownerId: String? = nil, prefixListArn: String? = nil, prefixListId: String? = nil, prefixListName: String? = nil, state: PrefixListState? = nil, stateMessage: String? = nil, tags: [Tag]? = nil, version: Int64? = nil) {
            self.addressFamily = addressFamily
            self.maxEntries = maxEntries
            self.ownerId = ownerId
            self.prefixListArn = prefixListArn
            self.prefixListId = prefixListId
            self.prefixListName = prefixListName
            self.state = state
            self.stateMessage = stateMessage
            self.tags = tags
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case addressFamily = "addressFamily"
            case maxEntries = "maxEntries"
            case ownerId = "ownerId"
            case prefixListArn = "prefixListArn"
            case prefixListId = "prefixListId"
            case prefixListName = "prefixListName"
            case state = "state"
            case stateMessage = "stateMessage"
            case tags = "tagSet"
            case version = "version"
        }
    }

    public struct MediaAcceleratorInfo: AWSDecodableShape {
        public struct _AcceleratorsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Describes the media accelerators for the instance type.
        @OptionalCustomCoding<EC2ArrayCoder<_AcceleratorsEncoding, MediaDeviceInfo>>
        public var accelerators: [MediaDeviceInfo]?
        /// The total size of the memory for the media accelerators for the instance type, in MiB.
        public let totalMediaMemoryInMiB: Int?

        public init(accelerators: [MediaDeviceInfo]? = nil, totalMediaMemoryInMiB: Int? = nil) {
            self.accelerators = accelerators
            self.totalMediaMemoryInMiB = totalMediaMemoryInMiB
        }

        private enum CodingKeys: String, CodingKey {
            case accelerators = "accelerators"
            case totalMediaMemoryInMiB = "totalMediaMemoryInMiB"
        }
    }

    public struct MediaDeviceInfo: AWSDecodableShape {
        /// The number of media accelerators for the instance type.
        public let count: Int?
        /// The manufacturer of the media accelerator.
        public let manufacturer: String?
        /// Describes the memory available to the media accelerator.
        public let memoryInfo: MediaDeviceMemoryInfo?
        /// The name of the media accelerator.
        public let name: String?

        public init(count: Int? = nil, manufacturer: String? = nil, memoryInfo: MediaDeviceMemoryInfo? = nil, name: String? = nil) {
            self.count = count
            self.manufacturer = manufacturer
            self.memoryInfo = memoryInfo
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case count = "count"
            case manufacturer = "manufacturer"
            case memoryInfo = "memoryInfo"
            case name = "name"
        }
    }

    public struct MediaDeviceMemoryInfo: AWSDecodableShape {
        /// The size of the memory available to each media accelerator, in MiB.
        public let sizeInMiB: Int?

        public init(sizeInMiB: Int? = nil) {
            self.sizeInMiB = sizeInMiB
        }

        private enum CodingKeys: String, CodingKey {
            case sizeInMiB = "sizeInMiB"
        }
    }

    public struct MemoryGiBPerVCpu: AWSEncodableShape & AWSDecodableShape {
        /// The maximum amount of memory per vCPU, in GiB. If this parameter is not specified, there is no maximum limit.
        public let max: Double?
        /// The minimum amount of memory per vCPU, in GiB. If this parameter is not specified, there is no minimum limit.
        public let min: Double?

        public init(max: Double? = nil, min: Double? = nil) {
            self.max = max
            self.min = min
        }

        private enum CodingKeys: String, CodingKey {
            case max = "max"
            case min = "min"
        }
    }

    public struct MemoryGiBPerVCpuRequest: AWSEncodableShape {
        /// The maximum amount of memory per vCPU, in GiB. To specify no maximum limit, omit this parameter.
        public let max: Double?
        /// The minimum amount of memory per vCPU, in GiB. To specify no minimum limit, omit this parameter.
        public let min: Double?

        public init(max: Double? = nil, min: Double? = nil) {
            self.max = max
            self.min = min
        }

        private enum CodingKeys: String, CodingKey {
            case max = "Max"
            case min = "Min"
        }
    }

    public struct MemoryInfo: AWSDecodableShape {
        /// The size of the memory, in MiB.
        public let sizeInMiB: Int64?

        public init(sizeInMiB: Int64? = nil) {
            self.sizeInMiB = sizeInMiB
        }

        private enum CodingKeys: String, CodingKey {
            case sizeInMiB = "sizeInMiB"
        }
    }

    public struct MemoryMiB: AWSEncodableShape & AWSDecodableShape {
        /// The maximum amount of memory, in MiB. If this parameter is not specified, there is no maximum limit.
        public let max: Int?
        /// The minimum amount of memory, in MiB. If this parameter is not specified, there is no minimum limit.
        public let min: Int?

        public init(max: Int? = nil, min: Int? = nil) {
            self.max = max
            self.min = min
        }

        private enum CodingKeys: String, CodingKey {
            case max = "max"
            case min = "min"
        }
    }

    public struct MemoryMiBRequest: AWSEncodableShape {
        /// The maximum amount of memory, in MiB. To specify no maximum limit, omit this parameter.
        public let max: Int?
        /// The minimum amount of memory, in MiB. To specify no minimum limit, specify 0.
        public let min: Int?

        public init(max: Int? = nil, min: Int? = nil) {
            self.max = max
            self.min = min
        }

        private enum CodingKeys: String, CodingKey {
            case max = "Max"
            case min = "Min"
        }
    }

    public struct MetricPoint: AWSDecodableShape {
        /// The end date for the metric point. The ending time must be formatted as yyyy-mm-ddThh:mm:ss.  For example, 2022-06-12T12:00:00.000Z.
        public let endDate: Date?
        /// The start date for the metric point. The starting date for the metric point. The starting time must be formatted as yyyy-mm-ddThh:mm:ss.  For example, 2022-06-10T12:00:00.000Z.
        public let startDate: Date?
        /// The status of the metric point.
        public let status: String?
        public let value: Float?

        public init(endDate: Date? = nil, startDate: Date? = nil, status: String? = nil, value: Float? = nil) {
            self.endDate = endDate
            self.startDate = startDate
            self.status = status
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case endDate = "endDate"
            case startDate = "startDate"
            case status = "status"
            case value = "value"
        }
    }

    public struct ModifyAddressAttributeRequest: AWSEncodableShape {
        /// [EC2-VPC] The allocation ID.
        public let allocationId: String?
        /// The domain name to modify for the IP address.
        public let domainName: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(allocationId: String? = nil, domainName: String? = nil, dryRun: Bool? = nil) {
            self.allocationId = allocationId
            self.domainName = domainName
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "AllocationId"
            case domainName = "DomainName"
            case dryRun = "DryRun"
        }
    }

    public struct ModifyAddressAttributeResult: AWSDecodableShape {
        /// Information about the Elastic IP address.
        public let address: AddressAttribute?

        public init(address: AddressAttribute? = nil) {
            self.address = address
        }

        private enum CodingKeys: String, CodingKey {
            case address = "address"
        }
    }

    public struct ModifyAvailabilityZoneGroupRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name of the Availability Zone group, Local Zone group, or Wavelength Zone group.
        public let groupName: String?
        /// Indicates whether you are opted in to the Local Zone group or Wavelength Zone group. The only valid value is opted-in. You must contact Amazon Web Services Support to opt out of a Local Zone or Wavelength Zone group.
        public let optInStatus: ModifyAvailabilityZoneOptInStatus?

        public init(dryRun: Bool? = nil, groupName: String? = nil, optInStatus: ModifyAvailabilityZoneOptInStatus? = nil) {
            self.dryRun = dryRun
            self.groupName = groupName
            self.optInStatus = optInStatus
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupName = "GroupName"
            case optInStatus = "OptInStatus"
        }
    }

    public struct ModifyAvailabilityZoneGroupResult: AWSDecodableShape {
        /// Is true if the request succeeds, and an error otherwise.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ModifyCapacityReservationFleetRequest: AWSEncodableShape {
        /// The ID of the Capacity Reservation Fleet to modify.
        public let capacityReservationFleetId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The date and time at which the Capacity Reservation Fleet expires. When the Capacity Reservation
        /// 			Fleet expires, its state changes to expired and all of the Capacity Reservations in the
        /// 			Fleet expire. The Capacity Reservation Fleet expires within an hour after the specified time. For example, if you
        /// 			specify 5/31/2019, 13:30:55, the Capacity Reservation Fleet is guaranteed
        /// 			to expire between 13:30:55 and 14:30:55 on 5/31/2019. You can't specify EndDate and
        /// 			RemoveEndDate in the same request.
        public let endDate: Date?
        /// Indicates whether to remove the end date from the Capacity Reservation Fleet. If you remove the
        /// 			end date, the Capacity Reservation Fleet does not expire and it remains active until you explicitly
        /// 			cancel it using the CancelCapacityReservationFleet action. You can't specify RemoveEndDate and
        /// 			EndDate in the same request.
        public let removeEndDate: Bool?
        /// The total number of capacity units to be reserved by the Capacity Reservation Fleet. This value,
        /// 			together with the instance type weights that you assign to each instance type used by the Fleet
        /// 			determine the number of instances for which the Fleet reserves capacity. Both values are based on
        /// 			units that make sense for your workload. For more information, see Total target capacity
        /// 			in the Amazon EC2 User Guide.
        public let totalTargetCapacity: Int?

        public init(capacityReservationFleetId: String? = nil, dryRun: Bool? = nil, endDate: Date? = nil, removeEndDate: Bool? = nil, totalTargetCapacity: Int? = nil) {
            self.capacityReservationFleetId = capacityReservationFleetId
            self.dryRun = dryRun
            self.endDate = endDate
            self.removeEndDate = removeEndDate
            self.totalTargetCapacity = totalTargetCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationFleetId = "CapacityReservationFleetId"
            case dryRun = "DryRun"
            case endDate = "EndDate"
            case removeEndDate = "RemoveEndDate"
            case totalTargetCapacity = "TotalTargetCapacity"
        }
    }

    public struct ModifyCapacityReservationFleetResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ModifyCapacityReservationRequest: AWSEncodableShape {
        /// Reserved. Capacity Reservations you have created are accepted by default.
        public let accept: Bool?
        /// Reserved for future use.
        public let additionalInfo: String?
        /// The ID of the Capacity Reservation.
        public let capacityReservationId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity
        /// 			is released and you can no longer launch instances into it. The Capacity Reservation's state changes to
        /// 				expired when it reaches its end date and time. The Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify
        /// 			5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019. You must provide an EndDate value if EndDateType is
        /// 				limited. Omit EndDate if EndDateType is
        /// 				unlimited.
        public let endDate: Date?
        /// Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end
        /// 			types:    unlimited - The Capacity Reservation remains active until you explicitly cancel it. Do not
        /// 					provide an EndDate value if EndDateType is
        /// 						unlimited.    limited - The Capacity Reservation expires automatically at a specified date and time. You must
        /// 					provide an EndDate value if EndDateType is
        /// 						limited.
        public let endDateType: EndDateType?
        /// The number of instances for which to reserve capacity. The number of instances can't be increased or
        /// 		    	decreased by more than 1000 in a single request.
        public let instanceCount: Int?

        public init(accept: Bool? = nil, additionalInfo: String? = nil, capacityReservationId: String? = nil, dryRun: Bool? = nil, endDate: Date? = nil, endDateType: EndDateType? = nil, instanceCount: Int? = nil) {
            self.accept = accept
            self.additionalInfo = additionalInfo
            self.capacityReservationId = capacityReservationId
            self.dryRun = dryRun
            self.endDate = endDate
            self.endDateType = endDateType
            self.instanceCount = instanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case accept = "Accept"
            case additionalInfo = "AdditionalInfo"
            case capacityReservationId = "CapacityReservationId"
            case dryRun = "DryRun"
            case endDate = "EndDate"
            case endDateType = "EndDateType"
            case instanceCount = "InstanceCount"
        }
    }

    public struct ModifyCapacityReservationResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ModifyClientVpnEndpointRequest: AWSEncodableShape {
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The options for managing connection authorization for new client connections.
        public let clientConnectOptions: ClientConnectOptions?
        /// Options for enabling a customizable text banner that will be displayed on
        /// 			Amazon Web Services provided clients when a VPN session is established.
        public let clientLoginBannerOptions: ClientLoginBannerOptions?
        /// The ID of the Client VPN endpoint to modify.
        public let clientVpnEndpointId: String?
        /// Information about the client connection logging options. If you enable client connection logging, data about client connections is sent to a
        /// 			Cloudwatch Logs log stream. The following information is logged:   Client connection requests   Client connection results (successful and unsuccessful)   Reasons for unsuccessful client connection requests   Client connection termination time
        public let connectionLogOptions: ConnectionLogOptions?
        /// A brief description of the Client VPN endpoint.
        public let description: String?
        /// Information about the DNS servers to be used by Client VPN connections. A Client VPN endpoint can have
        /// 			up to two DNS servers.
        public let dnsServers: DnsServersOptionsModifyStructure?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of one or more security groups to apply to the target network.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?
        /// Specify whether to enable the self-service portal for the Client VPN endpoint.
        public let selfServicePortal: SelfServicePortal?
        /// The ARN of the server certificate to be used. The server certificate must be provisioned in
        /// 			Certificate Manager (ACM).
        public let serverCertificateArn: String?
        /// The maximum VPN session duration time in hours. Valid values: 8 | 10 | 12 | 24  Default value: 24
        public let sessionTimeoutHours: Int?
        /// Indicates whether the VPN is split-tunnel. For information about split-tunnel VPN endpoints, see Split-tunnel Client VPN endpoint in the  	Client VPN Administrator Guide.
        public let splitTunnel: Bool?
        /// The ID of the VPC to associate with the Client VPN endpoint.
        public let vpcId: String?
        /// The port number to assign to the Client VPN endpoint for TCP and UDP traffic. Valid Values: 443 | 1194  Default Value: 443
        public let vpnPort: Int?

        public init(clientConnectOptions: ClientConnectOptions? = nil, clientLoginBannerOptions: ClientLoginBannerOptions? = nil, clientVpnEndpointId: String? = nil, connectionLogOptions: ConnectionLogOptions? = nil, description: String? = nil, dnsServers: DnsServersOptionsModifyStructure? = nil, dryRun: Bool? = nil, securityGroupIds: [String]? = nil, selfServicePortal: SelfServicePortal? = nil, serverCertificateArn: String? = nil, sessionTimeoutHours: Int? = nil, splitTunnel: Bool? = nil, vpcId: String? = nil, vpnPort: Int? = nil) {
            self.clientConnectOptions = clientConnectOptions
            self.clientLoginBannerOptions = clientLoginBannerOptions
            self.clientVpnEndpointId = clientVpnEndpointId
            self.connectionLogOptions = connectionLogOptions
            self.description = description
            self.dnsServers = dnsServers
            self.dryRun = dryRun
            self.securityGroupIds = securityGroupIds
            self.selfServicePortal = selfServicePortal
            self.serverCertificateArn = serverCertificateArn
            self.sessionTimeoutHours = sessionTimeoutHours
            self.splitTunnel = splitTunnel
            self.vpcId = vpcId
            self.vpnPort = vpnPort
        }

        private enum CodingKeys: String, CodingKey {
            case clientConnectOptions = "ClientConnectOptions"
            case clientLoginBannerOptions = "ClientLoginBannerOptions"
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case connectionLogOptions = "ConnectionLogOptions"
            case description = "Description"
            case dnsServers = "DnsServers"
            case dryRun = "DryRun"
            case securityGroupIds = "SecurityGroupId"
            case selfServicePortal = "SelfServicePortal"
            case serverCertificateArn = "ServerCertificateArn"
            case sessionTimeoutHours = "SessionTimeoutHours"
            case splitTunnel = "SplitTunnel"
            case vpcId = "VpcId"
            case vpnPort = "VpnPort"
        }
    }

    public struct ModifyClientVpnEndpointResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ModifyDefaultCreditSpecificationRequest: AWSEncodableShape {
        /// The credit option for CPU usage of the instance family. Valid Values: standard | unlimited
        public let cpuCredits: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The instance family.
        public let instanceFamily: UnlimitedSupportedInstanceFamily?

        public init(cpuCredits: String? = nil, dryRun: Bool? = nil, instanceFamily: UnlimitedSupportedInstanceFamily? = nil) {
            self.cpuCredits = cpuCredits
            self.dryRun = dryRun
            self.instanceFamily = instanceFamily
        }

        private enum CodingKeys: String, CodingKey {
            case cpuCredits = "CpuCredits"
            case dryRun = "DryRun"
            case instanceFamily = "InstanceFamily"
        }
    }

    public struct ModifyDefaultCreditSpecificationResult: AWSDecodableShape {
        /// The default credit option for CPU usage of the instance family.
        public let instanceFamilyCreditSpecification: InstanceFamilyCreditSpecification?

        public init(instanceFamilyCreditSpecification: InstanceFamilyCreditSpecification? = nil) {
            self.instanceFamilyCreditSpecification = instanceFamilyCreditSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case instanceFamilyCreditSpecification = "instanceFamilyCreditSpecification"
        }
    }

    public struct ModifyEbsDefaultKmsKeyIdRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The identifier of the Key Management Service (KMS) KMS key to use for Amazon EBS encryption. If this parameter is not specified, your KMS key for Amazon EBS is used. If KmsKeyId is specified, the encrypted state must be true. You can specify the KMS key using any of the following:   Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.   Key alias. For example, alias/ExampleAlias.   Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.   Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.   Amazon Web Services authenticates the KMS key asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid,  the action can appear to complete, but eventually fails. Amazon EBS does not support asymmetric KMS keys.
        public let kmsKeyId: String?

        public init(dryRun: Bool? = nil, kmsKeyId: String? = nil) {
            self.dryRun = dryRun
            self.kmsKeyId = kmsKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case kmsKeyId = "KmsKeyId"
        }
    }

    public struct ModifyEbsDefaultKmsKeyIdResult: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the default KMS key for encryption by default.
        public let kmsKeyId: String?

        public init(kmsKeyId: String? = nil) {
            self.kmsKeyId = kmsKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "kmsKeyId"
        }
    }

    public struct ModifyFleetRequest: AWSEncodableShape {
        public struct _LaunchTemplateConfigsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Reserved.
        public let context: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet. Supported only for fleets of type maintain.
        public let excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy?
        /// The ID of the EC2 Fleet.
        public let fleetId: String?
        /// The launch template and overrides.
        @OptionalCustomCoding<EC2ArrayCoder<_LaunchTemplateConfigsEncoding, FleetLaunchTemplateConfigRequest>>
        public var launchTemplateConfigs: [FleetLaunchTemplateConfigRequest]?
        /// The size of the EC2 Fleet.
        public let targetCapacitySpecification: TargetCapacitySpecificationRequest?

        public init(context: String? = nil, dryRun: Bool? = nil, excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy? = nil, fleetId: String? = nil, launchTemplateConfigs: [FleetLaunchTemplateConfigRequest]? = nil, targetCapacitySpecification: TargetCapacitySpecificationRequest? = nil) {
            self.context = context
            self.dryRun = dryRun
            self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
            self.fleetId = fleetId
            self.launchTemplateConfigs = launchTemplateConfigs
            self.targetCapacitySpecification = targetCapacitySpecification
        }

        public func validate(name: String) throws {
            try self.launchTemplateConfigs?.forEach {
                try $0.validate(name: "\(name).launchTemplateConfigs[]")
            }
            try self.validate(self.launchTemplateConfigs, name: "launchTemplateConfigs", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case context = "Context"
            case dryRun = "DryRun"
            case excessCapacityTerminationPolicy = "ExcessCapacityTerminationPolicy"
            case fleetId = "FleetId"
            case launchTemplateConfigs = "LaunchTemplateConfig"
            case targetCapacitySpecification = "TargetCapacitySpecification"
        }
    }

    public struct ModifyFleetResult: AWSDecodableShape {
        /// If the request succeeds, the response returns true. If the request fails, no response is returned, and instead an error message is returned.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ModifyFpgaImageAttributeRequest: AWSEncodableShape {
        public struct _ProductCodesEncoding: ArrayCoderProperties { public static let member = "ProductCode" }
        public struct _UserGroupsEncoding: ArrayCoderProperties { public static let member = "UserGroup" }
        public struct _UserIdsEncoding: ArrayCoderProperties { public static let member = "UserId" }

        /// The name of the attribute.
        public let attribute: FpgaImageAttributeName?
        /// A description for the AFI.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AFI.
        public let fpgaImageId: String?
        /// The load permission for the AFI.
        public let loadPermission: LoadPermissionModifications?
        /// A name for the AFI.
        public let name: String?
        /// The operation type.
        public let operationType: OperationType?
        /// The product codes. After you add a product code to an AFI, it can't be removed.
        /// 		    This parameter is valid only when modifying the productCodes attribute.
        @OptionalCustomCoding<EC2ArrayCoder<_ProductCodesEncoding, String>>
        public var productCodes: [String]?
        /// The user groups. This parameter is valid only when modifying the loadPermission attribute.
        @OptionalCustomCoding<EC2ArrayCoder<_UserGroupsEncoding, String>>
        public var userGroups: [String]?
        /// The Amazon Web Services account IDs. This parameter is valid only when modifying the loadPermission attribute.
        @OptionalCustomCoding<EC2ArrayCoder<_UserIdsEncoding, String>>
        public var userIds: [String]?

        public init(attribute: FpgaImageAttributeName? = nil, description: String? = nil, dryRun: Bool? = nil, fpgaImageId: String? = nil, loadPermission: LoadPermissionModifications? = nil, name: String? = nil, operationType: OperationType? = nil, productCodes: [String]? = nil, userGroups: [String]? = nil, userIds: [String]? = nil) {
            self.attribute = attribute
            self.description = description
            self.dryRun = dryRun
            self.fpgaImageId = fpgaImageId
            self.loadPermission = loadPermission
            self.name = name
            self.operationType = operationType
            self.productCodes = productCodes
            self.userGroups = userGroups
            self.userIds = userIds
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case description = "Description"
            case dryRun = "DryRun"
            case fpgaImageId = "FpgaImageId"
            case loadPermission = "LoadPermission"
            case name = "Name"
            case operationType = "OperationType"
            case productCodes = "ProductCode"
            case userGroups = "UserGroup"
            case userIds = "UserId"
        }
    }

    public struct ModifyFpgaImageAttributeResult: AWSDecodableShape {
        /// Information about the attribute.
        public let fpgaImageAttribute: FpgaImageAttribute?

        public init(fpgaImageAttribute: FpgaImageAttribute? = nil) {
            self.fpgaImageAttribute = fpgaImageAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case fpgaImageAttribute = "fpgaImageAttribute"
        }
    }

    public struct ModifyHostsRequest: AWSEncodableShape {
        public struct _HostIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Specify whether to enable or disable auto-placement.
        public let autoPlacement: AutoPlacement?
        /// The IDs of the Dedicated Hosts to modify.
        @OptionalCustomCoding<EC2ArrayCoder<_HostIdsEncoding, String>>
        public var hostIds: [String]?
        /// Indicates whether to enable or disable host maintenance for the Dedicated Host. For more information, see  Host maintenance in the Amazon EC2 User Guide.
        public let hostMaintenance: HostMaintenance?
        /// Indicates whether to enable or disable host recovery for the Dedicated Host. For more information, see  Host recovery in the Amazon EC2 User Guide.
        public let hostRecovery: HostRecovery?
        /// Specifies the instance family to be supported by the Dedicated Host. Specify this parameter to modify a Dedicated Host to support multiple instance types within its current instance family. If you want to modify a Dedicated Host to support a specific instance type only, omit this parameter and specify InstanceType instead. You cannot specify InstanceFamily and InstanceType in the same request.
        public let instanceFamily: String?
        /// Specifies the instance type to be supported by the Dedicated Host. Specify this parameter to modify a Dedicated Host to support only a specific instance type. If you want to modify a Dedicated Host to support multiple instance types in its current instance family, omit this parameter and specify InstanceFamily instead. You cannot specify InstanceType and InstanceFamily in the same request.
        public let instanceType: String?

        public init(autoPlacement: AutoPlacement? = nil, hostIds: [String]? = nil, hostMaintenance: HostMaintenance? = nil, hostRecovery: HostRecovery? = nil, instanceFamily: String? = nil, instanceType: String? = nil) {
            self.autoPlacement = autoPlacement
            self.hostIds = hostIds
            self.hostMaintenance = hostMaintenance
            self.hostRecovery = hostRecovery
            self.instanceFamily = instanceFamily
            self.instanceType = instanceType
        }

        private enum CodingKeys: String, CodingKey {
            case autoPlacement = "autoPlacement"
            case hostIds = "hostId"
            case hostMaintenance = "HostMaintenance"
            case hostRecovery = "HostRecovery"
            case instanceFamily = "InstanceFamily"
            case instanceType = "InstanceType"
        }
    }

    public struct ModifyHostsResult: AWSDecodableShape {
        public struct _SuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _UnsuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the Dedicated Hosts that were successfully modified.
        @OptionalCustomCoding<EC2ArrayCoder<_SuccessfulEncoding, String>>
        public var successful: [String]?
        /// The IDs of the Dedicated Hosts that could not be modified. Check whether the setting you requested can be used.
        @OptionalCustomCoding<EC2ArrayCoder<_UnsuccessfulEncoding, UnsuccessfulItem>>
        public var unsuccessful: [UnsuccessfulItem]?

        public init(successful: [String]? = nil, unsuccessful: [UnsuccessfulItem]? = nil) {
            self.successful = successful
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case successful = "successful"
            case unsuccessful = "unsuccessful"
        }
    }

    public struct ModifyIdFormatRequest: AWSEncodableShape {
        /// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | route-table | route-table-association | security-group | subnet | subnet-cidr-block-association | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway. Alternatively, use the all-current option to include all resource types that are currently within their opt-in period for longer IDs.
        public let resource: String?
        /// Indicate whether the resource should use longer IDs (17-character IDs).
        public let useLongIds: Bool?

        public init(resource: String? = nil, useLongIds: Bool? = nil) {
            self.resource = resource
            self.useLongIds = useLongIds
        }

        private enum CodingKeys: String, CodingKey {
            case resource = "Resource"
            case useLongIds = "UseLongIds"
        }
    }

    public struct ModifyIdentityIdFormatRequest: AWSEncodableShape {
        /// The ARN of the principal, which can be an IAM user, IAM role, or the root user. Specify all to modify the ID format for all IAM users, IAM roles, and the root user of the account.
        public let principalArn: String?
        /// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | route-table | route-table-association | security-group | subnet | subnet-cidr-block-association | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway. Alternatively, use the all-current option to include all resource types that are currently within their opt-in period for longer IDs.
        public let resource: String?
        /// Indicates whether the resource should use longer IDs (17-character IDs)
        public let useLongIds: Bool?

        public init(principalArn: String? = nil, resource: String? = nil, useLongIds: Bool? = nil) {
            self.principalArn = principalArn
            self.resource = resource
            self.useLongIds = useLongIds
        }

        private enum CodingKeys: String, CodingKey {
            case principalArn = "principalArn"
            case resource = "resource"
            case useLongIds = "useLongIds"
        }
    }

    public struct ModifyImageAttributeRequest: AWSEncodableShape {
        public struct _OrganizationalUnitArnsEncoding: ArrayCoderProperties { public static let member = "OrganizationalUnitArn" }
        public struct _OrganizationArnsEncoding: ArrayCoderProperties { public static let member = "OrganizationArn" }
        public struct _ProductCodesEncoding: ArrayCoderProperties { public static let member = "ProductCode" }
        public struct _UserGroupsEncoding: ArrayCoderProperties { public static let member = "UserGroup" }
        public struct _UserIdsEncoding: ArrayCoderProperties { public static let member = "UserId" }

        /// The name of the attribute to modify. Valid values: description | imdsSupport | launchPermission
        public let attribute: String?
        /// A new description for the AMI.
        public let description: AttributeValue?
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI.
        public let imageId: String?
        /// Set to v2.0 to indicate that IMDSv2 is specified in the AMI. Instances launched from this AMI will have HttpTokens automatically set to required so that, by default, the instance requires that IMDSv2 is used when requesting instance metadata. In addition, HttpPutResponseHopLimit is set to 2. For more information, see Configure the AMI in the Amazon EC2 User Guide.  Do not use this parameter unless your AMI software supports IMDSv2. After you set the value to v2.0,  you can't undo it. The only way to “reset” your AMI is to create a new AMI from the underlying snapshot.
        public let imdsSupport: AttributeValue?
        /// A new launch permission for the AMI.
        public let launchPermission: LaunchPermissionModifications?
        /// The operation type.  This parameter can be used only when the Attribute parameter is launchPermission.
        public let operationType: OperationType?
        /// The Amazon Resource Name (ARN) of an organizational unit (OU). This parameter can be used only when the Attribute parameter is launchPermission.
        @OptionalCustomCoding<EC2ArrayCoder<_OrganizationalUnitArnsEncoding, String>>
        public var organizationalUnitArns: [String]?
        /// The Amazon Resource Name (ARN) of an organization. This parameter can be used only when the Attribute parameter is launchPermission.
        @OptionalCustomCoding<EC2ArrayCoder<_OrganizationArnsEncoding, String>>
        public var organizationArns: [String]?
        /// Not supported.
        @OptionalCustomCoding<EC2ArrayCoder<_ProductCodesEncoding, String>>
        public var productCodes: [String]?
        /// The user groups.  This parameter can be used only when the Attribute parameter is launchPermission.
        @OptionalCustomCoding<EC2ArrayCoder<_UserGroupsEncoding, String>>
        public var userGroups: [String]?
        /// The Amazon Web Services account IDs.  This parameter can be used only when the Attribute parameter is launchPermission.
        @OptionalCustomCoding<EC2ArrayCoder<_UserIdsEncoding, String>>
        public var userIds: [String]?
        /// The value of the attribute being modified.  This parameter can be used only when the Attribute parameter is description or imdsSupport.
        public let value: String?

        public init(attribute: String? = nil, description: AttributeValue? = nil, dryRun: Bool? = nil, imageId: String? = nil, imdsSupport: AttributeValue? = nil, launchPermission: LaunchPermissionModifications? = nil, operationType: OperationType? = nil, organizationalUnitArns: [String]? = nil, organizationArns: [String]? = nil, productCodes: [String]? = nil, userGroups: [String]? = nil, userIds: [String]? = nil, value: String? = nil) {
            self.attribute = attribute
            self.description = description
            self.dryRun = dryRun
            self.imageId = imageId
            self.imdsSupport = imdsSupport
            self.launchPermission = launchPermission
            self.operationType = operationType
            self.organizationalUnitArns = organizationalUnitArns
            self.organizationArns = organizationArns
            self.productCodes = productCodes
            self.userGroups = userGroups
            self.userIds = userIds
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case description = "Description"
            case dryRun = "dryRun"
            case imageId = "ImageId"
            case imdsSupport = "ImdsSupport"
            case launchPermission = "LaunchPermission"
            case operationType = "OperationType"
            case organizationalUnitArns = "OrganizationalUnitArn"
            case organizationArns = "OrganizationArn"
            case productCodes = "ProductCode"
            case userGroups = "UserGroup"
            case userIds = "UserId"
            case value = "Value"
        }
    }

    public struct ModifyInstanceAttributeRequest: AWSEncodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "groupId" }

        /// The name of the attribute to modify.  You can modify the following attributes only: disableApiTermination | instanceType | kernel | ramdisk | instanceInitiatedShutdownBehavior | blockDeviceMapping | userData | sourceDestCheck | groupSet | ebsOptimized | sriovNetSupport | enaSupport | nvmeSupport | disableApiStop | enclaveOptions
        public let attribute: InstanceAttributeName?
        /// Modifies the DeleteOnTermination attribute for volumes that are currently attached. The volume must be owned by the caller. If no value is specified for DeleteOnTermination, the default is true and the volume is deleted when the instance is terminated. You can't modify the DeleteOnTermination  attribute for volumes that are attached to Fargate tasks. To add instance store volumes to an Amazon EBS-backed instance, you must add them when you launch the instance. For more information, see Update the block device mapping when launching an instance in the Amazon EC2 User Guide.
        @OptionalCustomCoding<EC2ArrayCoder<_BlockDeviceMappingsEncoding, InstanceBlockDeviceMappingSpecification>>
        public var blockDeviceMappings: [InstanceBlockDeviceMappingSpecification]?
        /// Indicates whether an instance is enabled for stop protection. For more information, see Stop Protection.
        public let disableApiStop: AttributeBooleanValue?
        /// If the value is true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. You cannot use this parameter for Spot Instances.
        public let disableApiTermination: AttributeBooleanValue?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specifies whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.
        public let ebsOptimized: AttributeBooleanValue?
        /// Set to true to enable enhanced networking with ENA for the instance. This option is supported only for HVM instances. Specifying this option with a PV instance can make it unreachable.
        public let enaSupport: AttributeBooleanValue?
        /// Replaces the security groups of the instance with the specified security groups. You must specify the ID of at least one security group, even if it's just the default security group for the VPC.
        @OptionalCustomCoding<EC2ArrayCoder<_GroupsEncoding, String>>
        public var groups: [String]?
        /// The ID of the instance.
        public let instanceId: String?
        /// Specifies whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
        public let instanceInitiatedShutdownBehavior: AttributeValue?
        /// Changes the instance type to the specified value. For more information, see Instance types in the Amazon EC2 User Guide. If the instance type is not valid, the error returned is InvalidInstanceAttributeValue.
        public let instanceType: AttributeValue?
        /// Changes the instance's kernel to the specified value. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB.
        public let kernel: AttributeValue?
        /// Changes the instance's RAM disk to the specified value. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB.
        public let ramdisk: AttributeValue?
        /// Enable or disable source/destination checks, which ensure that the instance is either the source or the destination of any traffic that it receives. If the value is true, source/destination checks are enabled; otherwise, they are disabled. The default value is true. You must disable source/destination checks if the instance runs services such as network address translation, routing, or firewalls.
        public let sourceDestCheck: AttributeBooleanValue?
        /// Set to simple to enable enhanced networking with the Intel 82599 Virtual Function interface for the instance. There is no way to disable enhanced networking with the Intel 82599 Virtual Function interface at this time. This option is supported only for HVM instances. Specifying this option with a PV instance can make it unreachable.
        public let sriovNetSupport: AttributeValue?
        /// Changes the instance's user data to the specified value. If you are using an Amazon Web Services SDK or command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text.
        public let userData: BlobAttributeValue?
        /// A new value for the attribute. Use only with the kernel, ramdisk, userData, disableApiTermination, or instanceInitiatedShutdownBehavior attribute.
        public let value: String?

        public init(attribute: InstanceAttributeName? = nil, blockDeviceMappings: [InstanceBlockDeviceMappingSpecification]? = nil, disableApiStop: AttributeBooleanValue? = nil, disableApiTermination: AttributeBooleanValue? = nil, dryRun: Bool? = nil, ebsOptimized: AttributeBooleanValue? = nil, enaSupport: AttributeBooleanValue? = nil, groups: [String]? = nil, instanceId: String? = nil, instanceInitiatedShutdownBehavior: AttributeValue? = nil, instanceType: AttributeValue? = nil, kernel: AttributeValue? = nil, ramdisk: AttributeValue? = nil, sourceDestCheck: AttributeBooleanValue? = nil, sriovNetSupport: AttributeValue? = nil, userData: BlobAttributeValue? = nil, value: String? = nil) {
            self.attribute = attribute
            self.blockDeviceMappings = blockDeviceMappings
            self.disableApiStop = disableApiStop
            self.disableApiTermination = disableApiTermination
            self.dryRun = dryRun
            self.ebsOptimized = ebsOptimized
            self.enaSupport = enaSupport
            self.groups = groups
            self.instanceId = instanceId
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.instanceType = instanceType
            self.kernel = kernel
            self.ramdisk = ramdisk
            self.sourceDestCheck = sourceDestCheck
            self.sriovNetSupport = sriovNetSupport
            self.userData = userData
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "attribute"
            case blockDeviceMappings = "blockDeviceMapping"
            case disableApiStop = "DisableApiStop"
            case disableApiTermination = "disableApiTermination"
            case dryRun = "dryRun"
            case ebsOptimized = "ebsOptimized"
            case enaSupport = "enaSupport"
            case groups = "GroupId"
            case instanceId = "instanceId"
            case instanceInitiatedShutdownBehavior = "instanceInitiatedShutdownBehavior"
            case instanceType = "instanceType"
            case kernel = "kernel"
            case ramdisk = "ramdisk"
            case sourceDestCheck = "SourceDestCheck"
            case sriovNetSupport = "sriovNetSupport"
            case userData = "userData"
            case value = "value"
        }
    }

    public struct ModifyInstanceCapacityReservationAttributesRequest: AWSEncodableShape {
        /// Information about the Capacity Reservation targeting option.
        public let capacityReservationSpecification: CapacityReservationSpecification?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance to be modified.
        public let instanceId: String?

        public init(capacityReservationSpecification: CapacityReservationSpecification? = nil, dryRun: Bool? = nil, instanceId: String? = nil) {
            self.capacityReservationSpecification = capacityReservationSpecification
            self.dryRun = dryRun
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationSpecification = "CapacityReservationSpecification"
            case dryRun = "DryRun"
            case instanceId = "InstanceId"
        }
    }

    public struct ModifyInstanceCapacityReservationAttributesResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ModifyInstanceCreditSpecificationRequest: AWSEncodableShape {
        public struct _InstanceCreditSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Information about the credit option for CPU usage.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceCreditSpecificationsEncoding, InstanceCreditSpecificationRequest>>
        public var instanceCreditSpecifications: [InstanceCreditSpecificationRequest]?

        public init(clientToken: String? = nil, dryRun: Bool? = nil, instanceCreditSpecifications: [InstanceCreditSpecificationRequest]? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.instanceCreditSpecifications = instanceCreditSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case instanceCreditSpecifications = "InstanceCreditSpecification"
        }
    }

    public struct ModifyInstanceCreditSpecificationResult: AWSDecodableShape {
        public struct _SuccessfulInstanceCreditSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _UnsuccessfulInstanceCreditSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the instances whose credit option for CPU usage was successfully modified.
        @OptionalCustomCoding<EC2ArrayCoder<_SuccessfulInstanceCreditSpecificationsEncoding, SuccessfulInstanceCreditSpecificationItem>>
        public var successfulInstanceCreditSpecifications: [SuccessfulInstanceCreditSpecificationItem]?
        /// Information about the instances whose credit option for CPU usage was not modified.
        @OptionalCustomCoding<EC2ArrayCoder<_UnsuccessfulInstanceCreditSpecificationsEncoding, UnsuccessfulInstanceCreditSpecificationItem>>
        public var unsuccessfulInstanceCreditSpecifications: [UnsuccessfulInstanceCreditSpecificationItem]?

        public init(successfulInstanceCreditSpecifications: [SuccessfulInstanceCreditSpecificationItem]? = nil, unsuccessfulInstanceCreditSpecifications: [UnsuccessfulInstanceCreditSpecificationItem]? = nil) {
            self.successfulInstanceCreditSpecifications = successfulInstanceCreditSpecifications
            self.unsuccessfulInstanceCreditSpecifications = unsuccessfulInstanceCreditSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case successfulInstanceCreditSpecifications = "successfulInstanceCreditSpecificationSet"
            case unsuccessfulInstanceCreditSpecifications = "unsuccessfulInstanceCreditSpecificationSet"
        }
    }

    public struct ModifyInstanceEventStartTimeRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the event whose date and time you are modifying.
        public let instanceEventId: String?
        /// The ID of the instance with the scheduled event.
        public let instanceId: String?
        /// The new date and time when the event will take place.
        public let notBefore: Date?

        public init(dryRun: Bool? = nil, instanceEventId: String? = nil, instanceId: String? = nil, notBefore: Date? = nil) {
            self.dryRun = dryRun
            self.instanceEventId = instanceEventId
            self.instanceId = instanceId
            self.notBefore = notBefore
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceEventId = "InstanceEventId"
            case instanceId = "InstanceId"
            case notBefore = "NotBefore"
        }
    }

    public struct ModifyInstanceEventStartTimeResult: AWSDecodableShape {
        /// Information about the event.
        public let event: InstanceStatusEvent?

        public init(event: InstanceStatusEvent? = nil) {
            self.event = event
        }

        private enum CodingKeys: String, CodingKey {
            case event = "event"
        }
    }

    public struct ModifyInstanceEventWindowRequest: AWSEncodableShape {
        /// The cron expression of the event window, for example, * 0-4,20-23 * * 1,5. Constraints:   Only hour and day of the week values are supported.   For day of the week values, you can specify either integers 0 through 6, or alternative single values SUN through SAT.   The minute, month, and year must be specified by *.   The hour value must be one or a multiple range, for example, 0-4 or 0-4,20-23.   Each hour range must be >= 2 hours, for example, 0-2 or 20-23.   The event window must be >= 4 hours. The combined total time ranges in the event window must be >= 4 hours.   For more information about cron expressions, see cron on the Wikipedia website.
        public let cronExpression: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the event window.
        public let instanceEventWindowId: String?
        /// The name of the event window.
        public let name: String?
        /// The time ranges of the event window.
        @OptionalCustomCoding<EC2StandardArrayCoder<InstanceEventWindowTimeRangeRequest>>
        public var timeRanges: [InstanceEventWindowTimeRangeRequest]?

        public init(cronExpression: String? = nil, dryRun: Bool? = nil, instanceEventWindowId: String? = nil, name: String? = nil, timeRanges: [InstanceEventWindowTimeRangeRequest]? = nil) {
            self.cronExpression = cronExpression
            self.dryRun = dryRun
            self.instanceEventWindowId = instanceEventWindowId
            self.name = name
            self.timeRanges = timeRanges
        }

        public func validate(name: String) throws {
            try self.timeRanges?.forEach {
                try $0.validate(name: "\(name).timeRanges[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case cronExpression = "CronExpression"
            case dryRun = "DryRun"
            case instanceEventWindowId = "InstanceEventWindowId"
            case name = "Name"
            case timeRanges = "TimeRange"
        }
    }

    public struct ModifyInstanceEventWindowResult: AWSDecodableShape {
        /// Information about the event window.
        public let instanceEventWindow: InstanceEventWindow?

        public init(instanceEventWindow: InstanceEventWindow? = nil) {
            self.instanceEventWindow = instanceEventWindow
        }

        private enum CodingKeys: String, CodingKey {
            case instanceEventWindow = "instanceEventWindow"
        }
    }

    public struct ModifyInstanceMaintenanceOptionsRequest: AWSEncodableShape {
        /// Disables the automatic recovery behavior of your instance or sets it to default.
        public let autoRecovery: InstanceAutoRecoveryState?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String?

        public init(autoRecovery: InstanceAutoRecoveryState? = nil, dryRun: Bool? = nil, instanceId: String? = nil) {
            self.autoRecovery = autoRecovery
            self.dryRun = dryRun
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case autoRecovery = "AutoRecovery"
            case dryRun = "DryRun"
            case instanceId = "InstanceId"
        }
    }

    public struct ModifyInstanceMaintenanceOptionsResult: AWSDecodableShape {
        /// Provides information on the current automatic recovery behavior of your instance.
        public let autoRecovery: InstanceAutoRecoveryState?
        /// The ID of the instance.
        public let instanceId: String?

        public init(autoRecovery: InstanceAutoRecoveryState? = nil, instanceId: String? = nil) {
            self.autoRecovery = autoRecovery
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case autoRecovery = "autoRecovery"
            case instanceId = "instanceId"
        }
    }

    public struct ModifyInstanceMetadataDefaultsRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Enables or disables the IMDS endpoint on an instance. When disabled, the instance metadata can't be accessed.
        public let httpEndpoint: DefaultInstanceMetadataEndpointState?
        /// The maximum number of hops that the metadata token can travel. Minimum: 1  Maximum: 64
        public let httpPutResponseHopLimit: Int?
        /// Indicates whether IMDSv2 is required.    optional – IMDSv2 is optional, which means that you can use either IMDSv2 or IMDSv1.    required – IMDSv2 is required, which means that IMDSv1 is disabled, and you must use IMDSv2.
        public let httpTokens: MetadataDefaultHttpTokensState?
        /// Enables or disables access to an instance's tags from the instance metadata. For more information, see Work with instance tags using the instance metadata in the Amazon EC2 User Guide.
        public let instanceMetadataTags: DefaultInstanceMetadataTagsState?

        public init(dryRun: Bool? = nil, httpEndpoint: DefaultInstanceMetadataEndpointState? = nil, httpPutResponseHopLimit: Int? = nil, httpTokens: MetadataDefaultHttpTokensState? = nil, instanceMetadataTags: DefaultInstanceMetadataTagsState? = nil) {
            self.dryRun = dryRun
            self.httpEndpoint = httpEndpoint
            self.httpPutResponseHopLimit = httpPutResponseHopLimit
            self.httpTokens = httpTokens
            self.instanceMetadataTags = instanceMetadataTags
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case httpEndpoint = "HttpEndpoint"
            case httpPutResponseHopLimit = "HttpPutResponseHopLimit"
            case httpTokens = "HttpTokens"
            case instanceMetadataTags = "InstanceMetadataTags"
        }
    }

    public struct ModifyInstanceMetadataDefaultsResult: AWSDecodableShape {
        /// If the request succeeds, the response returns true. If the request fails, no response is returned, and instead an error message is returned.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ModifyInstanceMetadataOptionsRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Enables or disables the HTTP metadata endpoint on your instances. If this parameter is not specified, the existing state is maintained. If you specify a value of disabled, you cannot access your instance metadata.
        public let httpEndpoint: InstanceMetadataEndpointState?
        /// Enables or disables the IPv6 endpoint for the instance metadata service.  Applies only if you enabled the HTTP metadata endpoint.
        public let httpProtocolIpv6: InstanceMetadataProtocolState?
        /// The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. If no parameter is specified, the existing state is maintained. Possible values: Integers from 1 to 64
        public let httpPutResponseHopLimit: Int?
        /// Indicates whether IMDSv2 is required.    optional - IMDSv2 is optional. You can choose whether to send a  session token in your instance metadata retrieval requests. If you retrieve  IAM role credentials without a session token, you receive the IMDSv1 role  credentials. If you retrieve IAM role credentials using a valid session token,  you receive the IMDSv2 role credentials.    required - IMDSv2 is required. You must send a session token  in your instance metadata retrieval requests. With this option, retrieving the  IAM role credentials always returns IMDSv2 credentials; IMDSv1 credentials are  not available.   Default:   If the value of ImdsSupport for the Amazon Machine Image (AMI) for your instance is v2.0 and the account level default is set to no-preference, the default is required.   If the value of ImdsSupport for the Amazon Machine Image (AMI) for your instance is v2.0, but the account level default is set to V1 or V2, the default is optional.   The default value can also be affected by other combinations of parameters. For more information, see Order of precedence for instance metadata options in the Amazon EC2 User Guide.
        public let httpTokens: HttpTokensState?
        /// The ID of the instance.
        public let instanceId: String?
        /// Set to enabled to allow access to instance tags from the instance metadata. Set to disabled to turn off access to instance tags from the instance metadata. For more information, see Work with instance tags using the instance metadata.
        public let instanceMetadataTags: InstanceMetadataTagsState?

        public init(dryRun: Bool? = nil, httpEndpoint: InstanceMetadataEndpointState? = nil, httpProtocolIpv6: InstanceMetadataProtocolState? = nil, httpPutResponseHopLimit: Int? = nil, httpTokens: HttpTokensState? = nil, instanceId: String? = nil, instanceMetadataTags: InstanceMetadataTagsState? = nil) {
            self.dryRun = dryRun
            self.httpEndpoint = httpEndpoint
            self.httpProtocolIpv6 = httpProtocolIpv6
            self.httpPutResponseHopLimit = httpPutResponseHopLimit
            self.httpTokens = httpTokens
            self.instanceId = instanceId
            self.instanceMetadataTags = instanceMetadataTags
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case httpEndpoint = "HttpEndpoint"
            case httpProtocolIpv6 = "HttpProtocolIpv6"
            case httpPutResponseHopLimit = "HttpPutResponseHopLimit"
            case httpTokens = "HttpTokens"
            case instanceId = "InstanceId"
            case instanceMetadataTags = "InstanceMetadataTags"
        }
    }

    public struct ModifyInstanceMetadataOptionsResult: AWSDecodableShape {
        /// The ID of the instance.
        public let instanceId: String?
        /// The metadata options for the instance.
        public let instanceMetadataOptions: InstanceMetadataOptionsResponse?

        public init(instanceId: String? = nil, instanceMetadataOptions: InstanceMetadataOptionsResponse? = nil) {
            self.instanceId = instanceId
            self.instanceMetadataOptions = instanceMetadataOptions
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case instanceMetadataOptions = "instanceMetadataOptions"
        }
    }

    public struct ModifyInstancePlacementRequest: AWSEncodableShape {
        /// The affinity setting for the instance. For more information, see Host affinity in the Amazon EC2 User Guide.
        public let affinity: Affinity?
        /// The Group Id of a placement group. You must specify the Placement Group Group Id to launch an instance in a shared placement group.
        public let groupId: String?
        /// The name of the placement group in which to place the instance. For spread placement groups, the instance must have a tenancy of default. For cluster and partition placement groups, the instance must have a tenancy of default or dedicated. To remove an instance from a placement group, specify an empty string ("").
        public let groupName: String?
        /// The ID of the Dedicated Host with which to associate the instance.
        public let hostId: String?
        /// The ARN of the host resource group in which to place the instance. The instance must have a tenancy of host to specify this parameter.
        public let hostResourceGroupArn: String?
        /// The ID of the instance that you are modifying.
        public let instanceId: String?
        /// The number of the partition in which to place the instance. Valid only if the placement group strategy is set to partition.
        public let partitionNumber: Int?
        /// The tenancy for the instance.  For T3 instances, you must launch the instance on a Dedicated Host to use a tenancy of host. You can't change the tenancy from host to dedicated or default. Attempting to make one of these unsupported tenancy changes results in an InvalidRequest error code.
        public let tenancy: HostTenancy?

        public init(affinity: Affinity? = nil, groupId: String? = nil, groupName: String? = nil, hostId: String? = nil, hostResourceGroupArn: String? = nil, instanceId: String? = nil, partitionNumber: Int? = nil, tenancy: HostTenancy? = nil) {
            self.affinity = affinity
            self.groupId = groupId
            self.groupName = groupName
            self.hostId = hostId
            self.hostResourceGroupArn = hostResourceGroupArn
            self.instanceId = instanceId
            self.partitionNumber = partitionNumber
            self.tenancy = tenancy
        }

        private enum CodingKeys: String, CodingKey {
            case affinity = "affinity"
            case groupId = "GroupId"
            case groupName = "GroupName"
            case hostId = "hostId"
            case hostResourceGroupArn = "HostResourceGroupArn"
            case instanceId = "instanceId"
            case partitionNumber = "PartitionNumber"
            case tenancy = "tenancy"
        }
    }

    public struct ModifyInstancePlacementResult: AWSDecodableShape {
        /// Is true if the request succeeds, and an error otherwise.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ModifyIpamPoolRequest: AWSEncodableShape {
        public struct _AddAllocationResourceTagsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveAllocationResourceTagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Add tag allocation rules to a pool. For more information about allocation rules, see Create a top-level pool in the Amazon VPC IPAM User Guide.
        @OptionalCustomCoding<EC2ArrayCoder<_AddAllocationResourceTagsEncoding, RequestIpamResourceTag>>
        public var addAllocationResourceTags: [RequestIpamResourceTag]?
        /// The default netmask length for allocations added to this pool. If, for example, the CIDR assigned to this pool is 10.0.0.0/8 and you enter 16 here, new allocations will default to 10.0.0.0/16.
        public let allocationDefaultNetmaskLength: Int?
        /// The maximum netmask length possible for CIDR allocations in this IPAM pool to be compliant. Possible  netmask lengths for IPv4 addresses are 0 - 32. Possible netmask lengths for IPv6 addresses are  0 - 128.The maximum netmask  length must be greater than the minimum netmask length.
        public let allocationMaxNetmaskLength: Int?
        /// The minimum netmask length required for CIDR allocations in this IPAM pool to be compliant. Possible  netmask lengths for IPv4 addresses are 0 - 32. Possible netmask lengths for IPv6 addresses are  0 - 128. The minimum netmask  length must be less than the maximum netmask length.
        public let allocationMinNetmaskLength: Int?
        /// If true, IPAM will continuously look for resources within the CIDR range of this pool  and automatically import them as allocations into your IPAM. The CIDRs that will be allocated for these resources must not already be allocated to other resources in order for the import to succeed. IPAM will import  a CIDR regardless of its compliance with the pool's allocation rules, so a resource might be imported and subsequently  marked as noncompliant. If IPAM discovers multiple CIDRs that overlap, IPAM will import the largest CIDR only. If IPAM  discovers multiple CIDRs with matching CIDRs, IPAM will randomly import one of them only.  A locale must be set on the pool for this feature to work.
        public let autoImport: Bool?
        /// Clear the default netmask length allocation rule for this pool.
        public let clearAllocationDefaultNetmaskLength: Bool?
        /// The description of the IPAM pool you want to modify.
        public let description: String?
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the IPAM pool you want to modify.
        public let ipamPoolId: String?
        /// Remove tag allocation rules from a pool.
        @OptionalCustomCoding<EC2ArrayCoder<_RemoveAllocationResourceTagsEncoding, RequestIpamResourceTag>>
        public var removeAllocationResourceTags: [RequestIpamResourceTag]?

        public init(addAllocationResourceTags: [RequestIpamResourceTag]? = nil, allocationDefaultNetmaskLength: Int? = nil, allocationMaxNetmaskLength: Int? = nil, allocationMinNetmaskLength: Int? = nil, autoImport: Bool? = nil, clearAllocationDefaultNetmaskLength: Bool? = nil, description: String? = nil, dryRun: Bool? = nil, ipamPoolId: String? = nil, removeAllocationResourceTags: [RequestIpamResourceTag]? = nil) {
            self.addAllocationResourceTags = addAllocationResourceTags
            self.allocationDefaultNetmaskLength = allocationDefaultNetmaskLength
            self.allocationMaxNetmaskLength = allocationMaxNetmaskLength
            self.allocationMinNetmaskLength = allocationMinNetmaskLength
            self.autoImport = autoImport
            self.clearAllocationDefaultNetmaskLength = clearAllocationDefaultNetmaskLength
            self.description = description
            self.dryRun = dryRun
            self.ipamPoolId = ipamPoolId
            self.removeAllocationResourceTags = removeAllocationResourceTags
        }

        public func validate(name: String) throws {
            try self.validate(self.allocationDefaultNetmaskLength, name: "allocationDefaultNetmaskLength", parent: name, max: 128)
            try self.validate(self.allocationDefaultNetmaskLength, name: "allocationDefaultNetmaskLength", parent: name, min: 0)
            try self.validate(self.allocationMaxNetmaskLength, name: "allocationMaxNetmaskLength", parent: name, max: 128)
            try self.validate(self.allocationMaxNetmaskLength, name: "allocationMaxNetmaskLength", parent: name, min: 0)
            try self.validate(self.allocationMinNetmaskLength, name: "allocationMinNetmaskLength", parent: name, max: 128)
            try self.validate(self.allocationMinNetmaskLength, name: "allocationMinNetmaskLength", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case addAllocationResourceTags = "AddAllocationResourceTag"
            case allocationDefaultNetmaskLength = "AllocationDefaultNetmaskLength"
            case allocationMaxNetmaskLength = "AllocationMaxNetmaskLength"
            case allocationMinNetmaskLength = "AllocationMinNetmaskLength"
            case autoImport = "AutoImport"
            case clearAllocationDefaultNetmaskLength = "ClearAllocationDefaultNetmaskLength"
            case description = "Description"
            case dryRun = "DryRun"
            case ipamPoolId = "IpamPoolId"
            case removeAllocationResourceTags = "RemoveAllocationResourceTag"
        }
    }

    public struct ModifyIpamPoolResult: AWSDecodableShape {
        /// The results of the modification.
        public let ipamPool: IpamPool?

        public init(ipamPool: IpamPool? = nil) {
            self.ipamPool = ipamPool
        }

        private enum CodingKeys: String, CodingKey {
            case ipamPool = "ipamPool"
        }
    }

    public struct ModifyIpamRequest: AWSEncodableShape {
        /// Choose the operating Regions for the IPAM. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions. For more information about operating Regions, see Create an IPAM in the Amazon VPC IPAM User Guide.
        @OptionalCustomCoding<EC2StandardArrayCoder<AddIpamOperatingRegion>>
        public var addOperatingRegions: [AddIpamOperatingRegion]?
        /// The description of the IPAM you want to modify.
        public let description: String?
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the IPAM you want to modify.
        public let ipamId: String?
        /// The operating Regions to remove.
        @OptionalCustomCoding<EC2StandardArrayCoder<RemoveIpamOperatingRegion>>
        public var removeOperatingRegions: [RemoveIpamOperatingRegion]?
        /// IPAM is offered in a Free Tier and an Advanced Tier. For more information about the features available in each tier and the costs associated with the tiers, see Amazon VPC pricing > IPAM tab.
        public let tier: IpamTier?

        public init(addOperatingRegions: [AddIpamOperatingRegion]? = nil, description: String? = nil, dryRun: Bool? = nil, ipamId: String? = nil, removeOperatingRegions: [RemoveIpamOperatingRegion]? = nil, tier: IpamTier? = nil) {
            self.addOperatingRegions = addOperatingRegions
            self.description = description
            self.dryRun = dryRun
            self.ipamId = ipamId
            self.removeOperatingRegions = removeOperatingRegions
            self.tier = tier
        }

        public func validate(name: String) throws {
            try self.validate(self.addOperatingRegions, name: "addOperatingRegions", parent: name, max: 50)
            try self.validate(self.removeOperatingRegions, name: "removeOperatingRegions", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case addOperatingRegions = "AddOperatingRegion"
            case description = "Description"
            case dryRun = "DryRun"
            case ipamId = "IpamId"
            case removeOperatingRegions = "RemoveOperatingRegion"
            case tier = "Tier"
        }
    }

    public struct ModifyIpamResourceCidrRequest: AWSEncodableShape {
        /// The ID of the current scope that the resource CIDR is in.
        public let currentIpamScopeId: String?
        /// The ID of the scope you want to transfer the resource CIDR to.
        public let destinationIpamScopeId: String?
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Determines if the resource is monitored by IPAM. If a resource is monitored, the resource is discovered by IPAM and you can view details about the resource’s CIDR.
        public let monitored: Bool?
        /// The CIDR of the resource you want to modify.
        public let resourceCidr: String?
        /// The ID of the resource you want to modify.
        public let resourceId: String?
        /// The Amazon Web Services Region of the resource you want to modify.
        public let resourceRegion: String?

        public init(currentIpamScopeId: String? = nil, destinationIpamScopeId: String? = nil, dryRun: Bool? = nil, monitored: Bool? = nil, resourceCidr: String? = nil, resourceId: String? = nil, resourceRegion: String? = nil) {
            self.currentIpamScopeId = currentIpamScopeId
            self.destinationIpamScopeId = destinationIpamScopeId
            self.dryRun = dryRun
            self.monitored = monitored
            self.resourceCidr = resourceCidr
            self.resourceId = resourceId
            self.resourceRegion = resourceRegion
        }

        private enum CodingKeys: String, CodingKey {
            case currentIpamScopeId = "CurrentIpamScopeId"
            case destinationIpamScopeId = "DestinationIpamScopeId"
            case dryRun = "DryRun"
            case monitored = "Monitored"
            case resourceCidr = "ResourceCidr"
            case resourceId = "ResourceId"
            case resourceRegion = "ResourceRegion"
        }
    }

    public struct ModifyIpamResourceCidrResult: AWSDecodableShape {
        /// The CIDR of the resource.
        public let ipamResourceCidr: IpamResourceCidr?

        public init(ipamResourceCidr: IpamResourceCidr? = nil) {
            self.ipamResourceCidr = ipamResourceCidr
        }

        private enum CodingKeys: String, CodingKey {
            case ipamResourceCidr = "ipamResourceCidr"
        }
    }

    public struct ModifyIpamResourceDiscoveryRequest: AWSEncodableShape {
        /// Add operating Regions to the resource discovery. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions.
        @OptionalCustomCoding<EC2StandardArrayCoder<AddIpamOperatingRegion>>
        public var addOperatingRegions: [AddIpamOperatingRegion]?
        /// A resource discovery description.
        public let description: String?
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A resource discovery ID.
        public let ipamResourceDiscoveryId: String?
        /// Remove operating Regions.
        @OptionalCustomCoding<EC2StandardArrayCoder<RemoveIpamOperatingRegion>>
        public var removeOperatingRegions: [RemoveIpamOperatingRegion]?

        public init(addOperatingRegions: [AddIpamOperatingRegion]? = nil, description: String? = nil, dryRun: Bool? = nil, ipamResourceDiscoveryId: String? = nil, removeOperatingRegions: [RemoveIpamOperatingRegion]? = nil) {
            self.addOperatingRegions = addOperatingRegions
            self.description = description
            self.dryRun = dryRun
            self.ipamResourceDiscoveryId = ipamResourceDiscoveryId
            self.removeOperatingRegions = removeOperatingRegions
        }

        public func validate(name: String) throws {
            try self.validate(self.addOperatingRegions, name: "addOperatingRegions", parent: name, max: 50)
            try self.validate(self.removeOperatingRegions, name: "removeOperatingRegions", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case addOperatingRegions = "AddOperatingRegion"
            case description = "Description"
            case dryRun = "DryRun"
            case ipamResourceDiscoveryId = "IpamResourceDiscoveryId"
            case removeOperatingRegions = "RemoveOperatingRegion"
        }
    }

    public struct ModifyIpamResourceDiscoveryResult: AWSDecodableShape {
        /// A resource discovery.
        public let ipamResourceDiscovery: IpamResourceDiscovery?

        public init(ipamResourceDiscovery: IpamResourceDiscovery? = nil) {
            self.ipamResourceDiscovery = ipamResourceDiscovery
        }

        private enum CodingKeys: String, CodingKey {
            case ipamResourceDiscovery = "ipamResourceDiscovery"
        }
    }

    public struct ModifyIpamResult: AWSDecodableShape {
        /// The results of the modification.
        public let ipam: Ipam?

        public init(ipam: Ipam? = nil) {
            self.ipam = ipam
        }

        private enum CodingKeys: String, CodingKey {
            case ipam = "ipam"
        }
    }

    public struct ModifyIpamScopeRequest: AWSEncodableShape {
        /// The description of the scope you want to modify.
        public let description: String?
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the scope you want to modify.
        public let ipamScopeId: String?

        public init(description: String? = nil, dryRun: Bool? = nil, ipamScopeId: String? = nil) {
            self.description = description
            self.dryRun = dryRun
            self.ipamScopeId = ipamScopeId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case dryRun = "DryRun"
            case ipamScopeId = "IpamScopeId"
        }
    }

    public struct ModifyIpamScopeResult: AWSDecodableShape {
        /// The results of the modification.
        public let ipamScope: IpamScope?

        public init(ipamScope: IpamScope? = nil) {
            self.ipamScope = ipamScope
        }

        private enum CodingKeys: String, CodingKey {
            case ipamScope = "ipamScope"
        }
    }

    public struct ModifyLaunchTemplateRequest: AWSEncodableShape {
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring idempotency. Constraint: Maximum 128 ASCII characters.
        public let clientToken: String?
        /// The version number of the launch template to set as the default version.
        public let defaultVersion: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the launch template. You must specify either the LaunchTemplateId or the LaunchTemplateName, but not both.
        public let launchTemplateId: String?
        /// The name of the launch template. You must specify either the LaunchTemplateName or the LaunchTemplateId, but not both.
        public let launchTemplateName: String?

        public init(clientToken: String? = nil, defaultVersion: String? = nil, dryRun: Bool? = nil, launchTemplateId: String? = nil, launchTemplateName: String? = nil) {
            self.clientToken = clientToken
            self.defaultVersion = defaultVersion
            self.dryRun = dryRun
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
        }

        public func validate(name: String) throws {
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, max: 128)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, min: 3)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, pattern: "^[a-zA-Z0-9\\(\\)\\.\\-/_]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case defaultVersion = "SetDefaultVersion"
            case dryRun = "DryRun"
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
        }
    }

    public struct ModifyLaunchTemplateResult: AWSDecodableShape {
        /// Information about the launch template.
        public let launchTemplate: LaunchTemplate?

        public init(launchTemplate: LaunchTemplate? = nil) {
            self.launchTemplate = launchTemplate
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplate = "launchTemplate"
        }
    }

    public struct ModifyLocalGatewayRouteRequest: AWSEncodableShape {
        /// The CIDR block used for destination matches. The value that you provide must match the CIDR of an existing route in the table.
        public let destinationCidrBlock: String?
        ///  The ID of the prefix list. Use a prefix list in place of DestinationCidrBlock. You  cannot use DestinationPrefixListId and DestinationCidrBlock in the same request.
        public let destinationPrefixListId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?
        ///  The ID of the virtual interface group.
        public let localGatewayVirtualInterfaceGroupId: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?

        public init(destinationCidrBlock: String? = nil, destinationPrefixListId: String? = nil, dryRun: Bool? = nil, localGatewayRouteTableId: String? = nil, localGatewayVirtualInterfaceGroupId: String? = nil, networkInterfaceId: String? = nil) {
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationPrefixListId = destinationPrefixListId
            self.dryRun = dryRun
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.localGatewayVirtualInterfaceGroupId = localGatewayVirtualInterfaceGroupId
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "DestinationCidrBlock"
            case destinationPrefixListId = "DestinationPrefixListId"
            case dryRun = "DryRun"
            case localGatewayRouteTableId = "LocalGatewayRouteTableId"
            case localGatewayVirtualInterfaceGroupId = "LocalGatewayVirtualInterfaceGroupId"
            case networkInterfaceId = "NetworkInterfaceId"
        }
    }

    public struct ModifyLocalGatewayRouteResult: AWSDecodableShape {
        /// Information about the local gateway route table.
        public let route: LocalGatewayRoute?

        public init(route: LocalGatewayRoute? = nil) {
            self.route = route
        }

        private enum CodingKeys: String, CodingKey {
            case route = "route"
        }
    }

    public struct ModifyManagedPrefixListRequest: AWSEncodableShape {
        /// One or more entries to add to the prefix list.
        @OptionalCustomCoding<EC2StandardArrayCoder<AddPrefixListEntry>>
        public var addEntries: [AddPrefixListEntry]?
        /// The current version of the prefix list.
        public let currentVersion: Int64?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of entries for the prefix list. You cannot modify the entries   of a prefix list and modify the size of a prefix list at the same time. If any of the resources that reference the prefix list cannot support the new maximum size, the modify operation fails. Check the state message for the IDs of  the first ten resources that do not support the new maximum size.
        public let maxEntries: Int?
        /// The ID of the prefix list.
        public let prefixListId: String?
        /// A name for the prefix list.
        public let prefixListName: String?
        /// One or more entries to remove from the prefix list.
        @OptionalCustomCoding<EC2StandardArrayCoder<RemovePrefixListEntry>>
        public var removeEntries: [RemovePrefixListEntry]?

        public init(addEntries: [AddPrefixListEntry]? = nil, currentVersion: Int64? = nil, dryRun: Bool? = nil, maxEntries: Int? = nil, prefixListId: String? = nil, prefixListName: String? = nil, removeEntries: [RemovePrefixListEntry]? = nil) {
            self.addEntries = addEntries
            self.currentVersion = currentVersion
            self.dryRun = dryRun
            self.maxEntries = maxEntries
            self.prefixListId = prefixListId
            self.prefixListName = prefixListName
            self.removeEntries = removeEntries
        }

        public func validate(name: String) throws {
            try self.validate(self.addEntries, name: "addEntries", parent: name, max: 100)
            try self.validate(self.removeEntries, name: "removeEntries", parent: name, max: 100)
        }

        private enum CodingKeys: String, CodingKey {
            case addEntries = "AddEntry"
            case currentVersion = "CurrentVersion"
            case dryRun = "DryRun"
            case maxEntries = "MaxEntries"
            case prefixListId = "PrefixListId"
            case prefixListName = "PrefixListName"
            case removeEntries = "RemoveEntry"
        }
    }

    public struct ModifyManagedPrefixListResult: AWSDecodableShape {
        /// Information about the prefix list.
        public let prefixList: ManagedPrefixList?

        public init(prefixList: ManagedPrefixList? = nil) {
            self.prefixList = prefixList
        }

        private enum CodingKeys: String, CodingKey {
            case prefixList = "prefixList"
        }
    }

    public struct ModifyNetworkInterfaceAttributeRequest: AWSEncodableShape {
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "SecurityGroupId" }

        /// Information about the interface attachment. If modifying the delete on
        /// 				termination attribute, you must specify the ID of the interface
        /// 			attachment.
        public let attachment: NetworkInterfaceAttachmentChanges?
        /// A connection tracking specification.
        public let connectionTrackingSpecification: ConnectionTrackingSpecificationRequest?
        /// A description for the network interface.
        public let description: AttributeValue?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// If you’re modifying a network interface in a dual-stack or IPv6-only subnet, you have the option to assign a primary IPv6 IP address. A primary IPv6 address is an IPv6 GUA address associated with an ENI that you have enabled to use a primary IPv6 address. Use this option if the instance that this ENI will be attached to relies on its IPv6 address not changing. Amazon Web Services will automatically assign an IPv6 address associated with the ENI attached to your instance to be the primary IPv6 address. Once you enable an IPv6 GUA address to be a primary IPv6, you cannot disable it. When you enable an IPv6 GUA address to be a primary IPv6, the first IPv6 GUA will be made the primary IPv6 address until the instance is terminated or the network interface is detached. If you have multiple IPv6 addresses associated with an ENI attached to your instance and you enable a primary IPv6 address, the first IPv6 GUA address associated with the ENI becomes the primary IPv6 address.
        public let enablePrimaryIpv6: Bool?
        /// Updates the ENA Express configuration for the network interface that’s attached to the
        /// 			instance.
        public let enaSrdSpecification: EnaSrdSpecification?
        /// Changes the security groups for the network interface. The new set of groups you specify replaces the current set. You must specify at least one group, even if it's just the default security group in the VPC. You must specify the ID of the security group, not the name.
        @OptionalCustomCoding<EC2ArrayCoder<_GroupsEncoding, String>>
        public var groups: [String]?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// Enable or disable source/destination checks, which ensure that the instance is either the source or the destination of any traffic that it receives. If the value is true, source/destination checks are enabled; otherwise, they are disabled. The default value is true.  You must disable source/destination checks if the instance runs services  such as network address translation, routing, or firewalls.
        public let sourceDestCheck: AttributeBooleanValue?

        public init(attachment: NetworkInterfaceAttachmentChanges? = nil, connectionTrackingSpecification: ConnectionTrackingSpecificationRequest? = nil, description: AttributeValue? = nil, dryRun: Bool? = nil, enablePrimaryIpv6: Bool? = nil, enaSrdSpecification: EnaSrdSpecification? = nil, groups: [String]? = nil, networkInterfaceId: String? = nil, sourceDestCheck: AttributeBooleanValue? = nil) {
            self.attachment = attachment
            self.connectionTrackingSpecification = connectionTrackingSpecification
            self.description = description
            self.dryRun = dryRun
            self.enablePrimaryIpv6 = enablePrimaryIpv6
            self.enaSrdSpecification = enaSrdSpecification
            self.groups = groups
            self.networkInterfaceId = networkInterfaceId
            self.sourceDestCheck = sourceDestCheck
        }

        private enum CodingKeys: String, CodingKey {
            case attachment = "attachment"
            case connectionTrackingSpecification = "ConnectionTrackingSpecification"
            case description = "description"
            case dryRun = "dryRun"
            case enablePrimaryIpv6 = "EnablePrimaryIpv6"
            case enaSrdSpecification = "EnaSrdSpecification"
            case groups = "SecurityGroupId"
            case networkInterfaceId = "networkInterfaceId"
            case sourceDestCheck = "sourceDestCheck"
        }
    }

    public struct ModifyPrivateDnsNameOptionsRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
        public let enableResourceNameDnsAAAARecord: Bool?
        /// Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
        public let enableResourceNameDnsARecord: Bool?
        /// The ID of the instance.
        public let instanceId: String?
        /// The type of hostname for EC2 instances. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID.
        public let privateDnsHostnameType: HostnameType?

        public init(dryRun: Bool? = nil, enableResourceNameDnsAAAARecord: Bool? = nil, enableResourceNameDnsARecord: Bool? = nil, instanceId: String? = nil, privateDnsHostnameType: HostnameType? = nil) {
            self.dryRun = dryRun
            self.enableResourceNameDnsAAAARecord = enableResourceNameDnsAAAARecord
            self.enableResourceNameDnsARecord = enableResourceNameDnsARecord
            self.instanceId = instanceId
            self.privateDnsHostnameType = privateDnsHostnameType
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case enableResourceNameDnsAAAARecord = "EnableResourceNameDnsAAAARecord"
            case enableResourceNameDnsARecord = "EnableResourceNameDnsARecord"
            case instanceId = "InstanceId"
            case privateDnsHostnameType = "PrivateDnsHostnameType"
        }
    }

    public struct ModifyPrivateDnsNameOptionsResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ModifyReservedInstancesRequest: AWSEncodableShape {
        public struct _ReservedInstancesIdsEncoding: ArrayCoderProperties { public static let member = "ReservedInstancesId" }
        public struct _TargetConfigurationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A unique, case-sensitive token you provide to ensure idempotency of your modification request. For more information, see  		Ensuring Idempotency.
        public let clientToken: String?
        /// The IDs of the Reserved Instances to modify.
        @OptionalCustomCoding<EC2ArrayCoder<_ReservedInstancesIdsEncoding, String>>
        public var reservedInstancesIds: [String]?
        /// The configuration settings for the Reserved Instances to modify.
        @OptionalCustomCoding<EC2ArrayCoder<_TargetConfigurationsEncoding, ReservedInstancesConfiguration>>
        public var targetConfigurations: [ReservedInstancesConfiguration]?

        public init(clientToken: String? = nil, reservedInstancesIds: [String]? = nil, targetConfigurations: [ReservedInstancesConfiguration]? = nil) {
            self.clientToken = clientToken
            self.reservedInstancesIds = reservedInstancesIds
            self.targetConfigurations = targetConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case reservedInstancesIds = "ReservedInstancesId"
            case targetConfigurations = "ReservedInstancesConfigurationSetItemType"
        }
    }

    public struct ModifyReservedInstancesResult: AWSDecodableShape {
        /// The ID for the modification.
        public let reservedInstancesModificationId: String?

        public init(reservedInstancesModificationId: String? = nil) {
            self.reservedInstancesModificationId = reservedInstancesModificationId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesModificationId = "reservedInstancesModificationId"
        }
    }

    public struct ModifySecurityGroupRulesRequest: AWSEncodableShape {
        public struct _SecurityGroupRulesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the security group.
        public let groupId: String?
        /// Information about the security group properties to update.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupRulesEncoding, SecurityGroupRuleUpdate>>
        public var securityGroupRules: [SecurityGroupRuleUpdate]?

        public init(dryRun: Bool? = nil, groupId: String? = nil, securityGroupRules: [SecurityGroupRuleUpdate]? = nil) {
            self.dryRun = dryRun
            self.groupId = groupId
            self.securityGroupRules = securityGroupRules
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupId = "GroupId"
            case securityGroupRules = "SecurityGroupRule"
        }
    }

    public struct ModifySecurityGroupRulesResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ModifySnapshotAttributeRequest: AWSEncodableShape {
        public struct _GroupNamesEncoding: ArrayCoderProperties { public static let member = "GroupName" }
        public struct _UserIdsEncoding: ArrayCoderProperties { public static let member = "UserId" }

        /// The snapshot attribute to modify. Only volume creation permissions can be modified.
        public let attribute: SnapshotAttributeName?
        /// A JSON representation of the snapshot attribute modification.
        public let createVolumePermission: CreateVolumePermissionModifications?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The group to modify for the snapshot.
        @OptionalCustomCoding<EC2ArrayCoder<_GroupNamesEncoding, String>>
        public var groupNames: [String]?
        /// The type of operation to perform to the attribute.
        public let operationType: OperationType?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The account ID to modify for the snapshot.
        @OptionalCustomCoding<EC2ArrayCoder<_UserIdsEncoding, String>>
        public var userIds: [String]?

        public init(attribute: SnapshotAttributeName? = nil, createVolumePermission: CreateVolumePermissionModifications? = nil, dryRun: Bool? = nil, groupNames: [String]? = nil, operationType: OperationType? = nil, snapshotId: String? = nil, userIds: [String]? = nil) {
            self.attribute = attribute
            self.createVolumePermission = createVolumePermission
            self.dryRun = dryRun
            self.groupNames = groupNames
            self.operationType = operationType
            self.snapshotId = snapshotId
            self.userIds = userIds
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case createVolumePermission = "CreateVolumePermission"
            case dryRun = "dryRun"
            case groupNames = "UserGroup"
            case operationType = "OperationType"
            case snapshotId = "SnapshotId"
            case userIds = "UserId"
        }
    }

    public struct ModifySnapshotTierRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The name of the storage tier. You must specify archive.
        public let storageTier: TargetStorageTier?

        public init(dryRun: Bool? = nil, snapshotId: String? = nil, storageTier: TargetStorageTier? = nil) {
            self.dryRun = dryRun
            self.snapshotId = snapshotId
            self.storageTier = storageTier
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case snapshotId = "SnapshotId"
            case storageTier = "StorageTier"
        }
    }

    public struct ModifySnapshotTierResult: AWSDecodableShape {
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The date and time when the archive process was started.
        public let tieringStartTime: Date?

        public init(snapshotId: String? = nil, tieringStartTime: Date? = nil) {
            self.snapshotId = snapshotId
            self.tieringStartTime = tieringStartTime
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "snapshotId"
            case tieringStartTime = "tieringStartTime"
        }
    }

    public struct ModifySpotFleetRequestRequest: AWSEncodableShape {
        public struct _LaunchTemplateConfigsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Reserved.
        public let context: String?
        /// Indicates whether running instances should be terminated if the target capacity of the Spot Fleet request is decreased below the current size of the Spot Fleet. Supported only for fleets of type maintain.
        public let excessCapacityTerminationPolicy: ExcessCapacityTerminationPolicy?
        /// The launch template and overrides. You can only use this parameter if you specified a launch template (LaunchTemplateConfigs) in your Spot Fleet request. If you specified LaunchSpecifications in your Spot Fleet request, then omit this parameter.
        @OptionalCustomCoding<EC2ArrayCoder<_LaunchTemplateConfigsEncoding, LaunchTemplateConfig>>
        public var launchTemplateConfigs: [LaunchTemplateConfig]?
        /// The number of On-Demand Instances in the fleet.
        public let onDemandTargetCapacity: Int?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String?
        /// The size of the fleet.
        public let targetCapacity: Int?

        public init(context: String? = nil, excessCapacityTerminationPolicy: ExcessCapacityTerminationPolicy? = nil, launchTemplateConfigs: [LaunchTemplateConfig]? = nil, onDemandTargetCapacity: Int? = nil, spotFleetRequestId: String? = nil, targetCapacity: Int? = nil) {
            self.context = context
            self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
            self.launchTemplateConfigs = launchTemplateConfigs
            self.onDemandTargetCapacity = onDemandTargetCapacity
            self.spotFleetRequestId = spotFleetRequestId
            self.targetCapacity = targetCapacity
        }

        public func validate(name: String) throws {
            try self.launchTemplateConfigs?.forEach {
                try $0.validate(name: "\(name).launchTemplateConfigs[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case context = "Context"
            case excessCapacityTerminationPolicy = "excessCapacityTerminationPolicy"
            case launchTemplateConfigs = "LaunchTemplateConfig"
            case onDemandTargetCapacity = "OnDemandTargetCapacity"
            case spotFleetRequestId = "spotFleetRequestId"
            case targetCapacity = "targetCapacity"
        }
    }

    public struct ModifySpotFleetRequestResponse: AWSDecodableShape {
        /// If the request succeeds, the response returns true. If the request fails, no response is returned, and instead an error message is returned.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ModifySubnetAttributeRequest: AWSEncodableShape {
        /// Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. This includes a network interface that's created when launching an instance into the subnet (the instance therefore receives an IPv6 address).  If you enable the IPv6 addressing feature for your subnet, your network interface or instance only receives an IPv6 address if it's created using version 2016-11-15 or later of the Amazon EC2 API.
        public let assignIpv6AddressOnCreation: AttributeBooleanValue?
        /// The customer-owned IPv4 address pool associated with the subnet. You must set this value when you specify true for MapCustomerOwnedIpOnLaunch.
        public let customerOwnedIpv4Pool: String?
        ///  Specify true to indicate that local network interfaces at the current  position should be disabled.
        public let disableLniAtDeviceIndex: AttributeBooleanValue?
        /// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet  should return synthetic IPv6 addresses for IPv4-only destinations.
        public let enableDns64: AttributeBooleanValue?
        ///  Indicates the device position for local network interfaces in this subnet. For example,  1 indicates local network interfaces in this subnet are the secondary  network interface (eth1). A local network interface cannot be the primary network interface (eth0).
        public let enableLniAtDeviceIndex: Int?
        /// Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
        public let enableResourceNameDnsAAAARecordOnLaunch: AttributeBooleanValue?
        /// Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
        public let enableResourceNameDnsARecordOnLaunch: AttributeBooleanValue?
        /// Specify true to indicate that network interfaces  attached to instances created in the specified subnet should be assigned a customer-owned IPv4 address. When this value is true, you must specify the customer-owned IP pool using CustomerOwnedIpv4Pool.
        public let mapCustomerOwnedIpOnLaunch: AttributeBooleanValue?
        /// Specify true to indicate that network interfaces attached to instances created in the specified subnet should be assigned a public IPv4 address. Amazon Web Services charges for all public IPv4 addresses, including public IPv4 addresses
        /// associated with running instances and Elastic IP addresses. For more information, see the Public IPv4 Address tab on the Amazon VPC pricing page.
        public let mapPublicIpOnLaunch: AttributeBooleanValue?
        /// The type of hostname to assign to instances in the subnet at launch. For IPv4-only and dual-stack (IPv4 and IPv6) subnets, an instance DNS name can be based on the instance IPv4 address (ip-name) or the instance ID (resource-name). For IPv6 only subnets, an instance DNS name must be based on the instance ID (resource-name).
        public let privateDnsHostnameTypeOnLaunch: HostnameType?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(assignIpv6AddressOnCreation: AttributeBooleanValue? = nil, customerOwnedIpv4Pool: String? = nil, disableLniAtDeviceIndex: AttributeBooleanValue? = nil, enableDns64: AttributeBooleanValue? = nil, enableLniAtDeviceIndex: Int? = nil, enableResourceNameDnsAAAARecordOnLaunch: AttributeBooleanValue? = nil, enableResourceNameDnsARecordOnLaunch: AttributeBooleanValue? = nil, mapCustomerOwnedIpOnLaunch: AttributeBooleanValue? = nil, mapPublicIpOnLaunch: AttributeBooleanValue? = nil, privateDnsHostnameTypeOnLaunch: HostnameType? = nil, subnetId: String? = nil) {
            self.assignIpv6AddressOnCreation = assignIpv6AddressOnCreation
            self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
            self.disableLniAtDeviceIndex = disableLniAtDeviceIndex
            self.enableDns64 = enableDns64
            self.enableLniAtDeviceIndex = enableLniAtDeviceIndex
            self.enableResourceNameDnsAAAARecordOnLaunch = enableResourceNameDnsAAAARecordOnLaunch
            self.enableResourceNameDnsARecordOnLaunch = enableResourceNameDnsARecordOnLaunch
            self.mapCustomerOwnedIpOnLaunch = mapCustomerOwnedIpOnLaunch
            self.mapPublicIpOnLaunch = mapPublicIpOnLaunch
            self.privateDnsHostnameTypeOnLaunch = privateDnsHostnameTypeOnLaunch
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case assignIpv6AddressOnCreation = "AssignIpv6AddressOnCreation"
            case customerOwnedIpv4Pool = "CustomerOwnedIpv4Pool"
            case disableLniAtDeviceIndex = "DisableLniAtDeviceIndex"
            case enableDns64 = "EnableDns64"
            case enableLniAtDeviceIndex = "EnableLniAtDeviceIndex"
            case enableResourceNameDnsAAAARecordOnLaunch = "EnableResourceNameDnsAAAARecordOnLaunch"
            case enableResourceNameDnsARecordOnLaunch = "EnableResourceNameDnsARecordOnLaunch"
            case mapCustomerOwnedIpOnLaunch = "MapCustomerOwnedIpOnLaunch"
            case mapPublicIpOnLaunch = "MapPublicIpOnLaunch"
            case privateDnsHostnameTypeOnLaunch = "PrivateDnsHostnameTypeOnLaunch"
            case subnetId = "subnetId"
        }
    }

    public struct ModifyTrafficMirrorFilterNetworkServicesRequest: AWSEncodableShape {
        public struct _AddNetworkServicesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveNetworkServicesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The network service, for example Amazon DNS, that you want to mirror.
        @OptionalCustomCoding<EC2ArrayCoder<_AddNetworkServicesEncoding, TrafficMirrorNetworkService>>
        public var addNetworkServices: [TrafficMirrorNetworkService]?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The network service, for example Amazon DNS, that you no longer want to mirror.
        @OptionalCustomCoding<EC2ArrayCoder<_RemoveNetworkServicesEncoding, TrafficMirrorNetworkService>>
        public var removeNetworkServices: [TrafficMirrorNetworkService]?
        /// The ID of the Traffic Mirror filter.
        public let trafficMirrorFilterId: String?

        public init(addNetworkServices: [TrafficMirrorNetworkService]? = nil, dryRun: Bool? = nil, removeNetworkServices: [TrafficMirrorNetworkService]? = nil, trafficMirrorFilterId: String? = nil) {
            self.addNetworkServices = addNetworkServices
            self.dryRun = dryRun
            self.removeNetworkServices = removeNetworkServices
            self.trafficMirrorFilterId = trafficMirrorFilterId
        }

        private enum CodingKeys: String, CodingKey {
            case addNetworkServices = "AddNetworkService"
            case dryRun = "DryRun"
            case removeNetworkServices = "RemoveNetworkService"
            case trafficMirrorFilterId = "TrafficMirrorFilterId"
        }
    }

    public struct ModifyTrafficMirrorFilterNetworkServicesResult: AWSDecodableShape {
        /// The Traffic Mirror filter that the network service is associated with.
        public let trafficMirrorFilter: TrafficMirrorFilter?

        public init(trafficMirrorFilter: TrafficMirrorFilter? = nil) {
            self.trafficMirrorFilter = trafficMirrorFilter
        }

        private enum CodingKeys: String, CodingKey {
            case trafficMirrorFilter = "trafficMirrorFilter"
        }
    }

    public struct ModifyTrafficMirrorFilterRuleRequest: AWSEncodableShape {
        /// The description to assign to the Traffic Mirror rule.
        public let description: String?
        /// The destination CIDR block to assign to the Traffic Mirror rule.
        public let destinationCidrBlock: String?
        /// The destination ports that are associated with the Traffic Mirror rule.
        public let destinationPortRange: TrafficMirrorPortRangeRequest?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The protocol, for example TCP, to assign to the Traffic Mirror rule.
        public let `protocol`: Int?
        /// The properties that you want to remove from the Traffic Mirror filter rule. When you remove a property from a Traffic Mirror filter rule, the property is set to the default.
        @OptionalCustomCoding<EC2StandardArrayCoder<TrafficMirrorFilterRuleField>>
        public var removeFields: [TrafficMirrorFilterRuleField]?
        /// The action to assign to the rule.
        public let ruleAction: TrafficMirrorRuleAction?
        /// The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
        public let ruleNumber: Int?
        /// The source CIDR block to assign to the Traffic Mirror rule.
        public let sourceCidrBlock: String?
        /// The port range to assign to the Traffic Mirror rule.
        public let sourcePortRange: TrafficMirrorPortRangeRequest?
        /// The type of traffic to assign to the rule.
        public let trafficDirection: TrafficDirection?
        /// The ID of the Traffic Mirror rule.
        public let trafficMirrorFilterRuleId: String?

        public init(description: String? = nil, destinationCidrBlock: String? = nil, destinationPortRange: TrafficMirrorPortRangeRequest? = nil, dryRun: Bool? = nil, protocol: Int? = nil, removeFields: [TrafficMirrorFilterRuleField]? = nil, ruleAction: TrafficMirrorRuleAction? = nil, ruleNumber: Int? = nil, sourceCidrBlock: String? = nil, sourcePortRange: TrafficMirrorPortRangeRequest? = nil, trafficDirection: TrafficDirection? = nil, trafficMirrorFilterRuleId: String? = nil) {
            self.description = description
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationPortRange = destinationPortRange
            self.dryRun = dryRun
            self.`protocol` = `protocol`
            self.removeFields = removeFields
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
            self.sourceCidrBlock = sourceCidrBlock
            self.sourcePortRange = sourcePortRange
            self.trafficDirection = trafficDirection
            self.trafficMirrorFilterRuleId = trafficMirrorFilterRuleId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case destinationCidrBlock = "DestinationCidrBlock"
            case destinationPortRange = "DestinationPortRange"
            case dryRun = "DryRun"
            case `protocol` = "Protocol"
            case removeFields = "RemoveField"
            case ruleAction = "RuleAction"
            case ruleNumber = "RuleNumber"
            case sourceCidrBlock = "SourceCidrBlock"
            case sourcePortRange = "SourcePortRange"
            case trafficDirection = "TrafficDirection"
            case trafficMirrorFilterRuleId = "TrafficMirrorFilterRuleId"
        }
    }

    public struct ModifyTrafficMirrorFilterRuleResult: AWSDecodableShape {
        /// Modifies a Traffic Mirror rule.
        public let trafficMirrorFilterRule: TrafficMirrorFilterRule?

        public init(trafficMirrorFilterRule: TrafficMirrorFilterRule? = nil) {
            self.trafficMirrorFilterRule = trafficMirrorFilterRule
        }

        private enum CodingKeys: String, CodingKey {
            case trafficMirrorFilterRule = "trafficMirrorFilterRule"
        }
    }

    public struct ModifyTrafficMirrorSessionRequest: AWSEncodableShape {
        /// The description to assign to the Traffic Mirror session.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The number of bytes in each packet to mirror. These are bytes after the VXLAN header. To mirror a subset, set this to the length (in bytes) to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. Do not specify this parameter when you want to mirror the entire packet. For sessions with Network Load Balancer (NLB) traffic mirror targets, the default PacketLength will be set to 8500. Valid values are 1-8500. Setting a PacketLength greater than 8500 will result in an error response.
        public let packetLength: Int?
        /// The properties that you want to remove from the Traffic Mirror session. When you remove a property from a Traffic Mirror session, the property is set to the default.
        @OptionalCustomCoding<EC2StandardArrayCoder<TrafficMirrorSessionField>>
        public var removeFields: [TrafficMirrorSessionField]?
        /// The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets. Valid values are 1-32766.
        public let sessionNumber: Int?
        /// The ID of the Traffic Mirror filter.
        public let trafficMirrorFilterId: String?
        /// The ID of the Traffic Mirror session.
        public let trafficMirrorSessionId: String?
        /// The Traffic Mirror target. The target must be in the same VPC as the source, or have a VPC peering connection with the source.
        public let trafficMirrorTargetId: String?
        /// The virtual network ID of the Traffic Mirror session.
        public let virtualNetworkId: Int?

        public init(description: String? = nil, dryRun: Bool? = nil, packetLength: Int? = nil, removeFields: [TrafficMirrorSessionField]? = nil, sessionNumber: Int? = nil, trafficMirrorFilterId: String? = nil, trafficMirrorSessionId: String? = nil, trafficMirrorTargetId: String? = nil, virtualNetworkId: Int? = nil) {
            self.description = description
            self.dryRun = dryRun
            self.packetLength = packetLength
            self.removeFields = removeFields
            self.sessionNumber = sessionNumber
            self.trafficMirrorFilterId = trafficMirrorFilterId
            self.trafficMirrorSessionId = trafficMirrorSessionId
            self.trafficMirrorTargetId = trafficMirrorTargetId
            self.virtualNetworkId = virtualNetworkId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case dryRun = "DryRun"
            case packetLength = "PacketLength"
            case removeFields = "RemoveField"
            case sessionNumber = "SessionNumber"
            case trafficMirrorFilterId = "TrafficMirrorFilterId"
            case trafficMirrorSessionId = "TrafficMirrorSessionId"
            case trafficMirrorTargetId = "TrafficMirrorTargetId"
            case virtualNetworkId = "VirtualNetworkId"
        }
    }

    public struct ModifyTrafficMirrorSessionResult: AWSDecodableShape {
        /// Information about the Traffic Mirror session.
        public let trafficMirrorSession: TrafficMirrorSession?

        public init(trafficMirrorSession: TrafficMirrorSession? = nil) {
            self.trafficMirrorSession = trafficMirrorSession
        }

        private enum CodingKeys: String, CodingKey {
            case trafficMirrorSession = "trafficMirrorSession"
        }
    }

    public struct ModifyTransitGatewayOptions: AWSEncodableShape {
        public struct _AddTransitGatewayCidrBlocksEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveTransitGatewayCidrBlocksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Adds IPv4 or IPv6 CIDR blocks for the transit gateway. Must be a size /24 CIDR block or larger for IPv4, or a size /64 CIDR block or larger for IPv6.
        @OptionalCustomCoding<EC2ArrayCoder<_AddTransitGatewayCidrBlocksEncoding, String>>
        public var addTransitGatewayCidrBlocks: [String]?
        /// A private Autonomous System Number (ASN) for the Amazon side of a BGP session.  The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs. The modify ASN operation is not allowed on a transit gateway with active BGP sessions. You must first delete all transit gateway attachments that have BGP configured prior to modifying the ASN on the transit gateway.
        public let amazonSideAsn: Int64?
        /// The ID of the default association route table.
        public let associationDefaultRouteTableId: String?
        /// Enable or disable automatic acceptance of attachment requests.
        public let autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue?
        /// Enable or disable automatic association with the default association route table.
        public let defaultRouteTableAssociation: DefaultRouteTableAssociationValue?
        /// Enable or disable automatic propagation of routes to the default propagation route table.
        public let defaultRouteTablePropagation: DefaultRouteTablePropagationValue?
        /// Enable or disable DNS support.
        public let dnsSupport: DnsSupportValue?
        /// The ID of the default propagation route table.
        public let propagationDefaultRouteTableId: String?
        /// Removes CIDR blocks for the transit gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_RemoveTransitGatewayCidrBlocksEncoding, String>>
        public var removeTransitGatewayCidrBlocks: [String]?
        ///  This parameter is in preview and may not be available for your account.  Enables you to reference a security group across VPCs attached to a transit gateway. Use this option to simplify security group management and control of instance-to-instance traffic across VPCs that are connected by transit gateway. You can also use this option to migrate from VPC peering (which was the only option that supported security group referencing) to transit gateways (which now also support security group referencing). This option is disabled by default and there are no additional costs to use this feature.
        public let securityGroupReferencingSupport: SecurityGroupReferencingSupportValue?
        /// Enable or disable Equal Cost Multipath Protocol support.
        public let vpnEcmpSupport: VpnEcmpSupportValue?

        public init(addTransitGatewayCidrBlocks: [String]? = nil, amazonSideAsn: Int64? = nil, associationDefaultRouteTableId: String? = nil, autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue? = nil, defaultRouteTableAssociation: DefaultRouteTableAssociationValue? = nil, defaultRouteTablePropagation: DefaultRouteTablePropagationValue? = nil, dnsSupport: DnsSupportValue? = nil, propagationDefaultRouteTableId: String? = nil, removeTransitGatewayCidrBlocks: [String]? = nil, securityGroupReferencingSupport: SecurityGroupReferencingSupportValue? = nil, vpnEcmpSupport: VpnEcmpSupportValue? = nil) {
            self.addTransitGatewayCidrBlocks = addTransitGatewayCidrBlocks
            self.amazonSideAsn = amazonSideAsn
            self.associationDefaultRouteTableId = associationDefaultRouteTableId
            self.autoAcceptSharedAttachments = autoAcceptSharedAttachments
            self.defaultRouteTableAssociation = defaultRouteTableAssociation
            self.defaultRouteTablePropagation = defaultRouteTablePropagation
            self.dnsSupport = dnsSupport
            self.propagationDefaultRouteTableId = propagationDefaultRouteTableId
            self.removeTransitGatewayCidrBlocks = removeTransitGatewayCidrBlocks
            self.securityGroupReferencingSupport = securityGroupReferencingSupport
            self.vpnEcmpSupport = vpnEcmpSupport
        }

        private enum CodingKeys: String, CodingKey {
            case addTransitGatewayCidrBlocks = "AddTransitGatewayCidrBlocks"
            case amazonSideAsn = "AmazonSideAsn"
            case associationDefaultRouteTableId = "AssociationDefaultRouteTableId"
            case autoAcceptSharedAttachments = "AutoAcceptSharedAttachments"
            case defaultRouteTableAssociation = "DefaultRouteTableAssociation"
            case defaultRouteTablePropagation = "DefaultRouteTablePropagation"
            case dnsSupport = "DnsSupport"
            case propagationDefaultRouteTableId = "PropagationDefaultRouteTableId"
            case removeTransitGatewayCidrBlocks = "RemoveTransitGatewayCidrBlocks"
            case securityGroupReferencingSupport = "SecurityGroupReferencingSupport"
            case vpnEcmpSupport = "VpnEcmpSupport"
        }
    }

    public struct ModifyTransitGatewayPrefixListReferenceRequest: AWSEncodableShape {
        /// Indicates whether to drop traffic that matches this route.
        public let blackhole: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the prefix list.
        public let prefixListId: String?
        /// The ID of the attachment to which traffic is routed.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(blackhole: Bool? = nil, dryRun: Bool? = nil, prefixListId: String? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableId: String? = nil) {
            self.blackhole = blackhole
            self.dryRun = dryRun
            self.prefixListId = prefixListId
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case blackhole = "Blackhole"
            case dryRun = "DryRun"
            case prefixListId = "PrefixListId"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct ModifyTransitGatewayPrefixListReferenceResult: AWSDecodableShape {
        /// Information about the prefix list reference.
        public let transitGatewayPrefixListReference: TransitGatewayPrefixListReference?

        public init(transitGatewayPrefixListReference: TransitGatewayPrefixListReference? = nil) {
            self.transitGatewayPrefixListReference = transitGatewayPrefixListReference
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayPrefixListReference = "transitGatewayPrefixListReference"
        }
    }

    public struct ModifyTransitGatewayRequest: AWSEncodableShape {
        /// The description for the transit gateway.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The options to modify.
        public let options: ModifyTransitGatewayOptions?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?

        public init(description: String? = nil, dryRun: Bool? = nil, options: ModifyTransitGatewayOptions? = nil, transitGatewayId: String? = nil) {
            self.description = description
            self.dryRun = dryRun
            self.options = options
            self.transitGatewayId = transitGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case dryRun = "DryRun"
            case options = "Options"
            case transitGatewayId = "TransitGatewayId"
        }
    }

    public struct ModifyTransitGatewayResult: AWSDecodableShape {
        /// Information about the transit gateway.
        public let transitGateway: TransitGateway?

        public init(transitGateway: TransitGateway? = nil) {
            self.transitGateway = transitGateway
        }

        private enum CodingKeys: String, CodingKey {
            case transitGateway = "transitGateway"
        }
    }

    public struct ModifyTransitGatewayVpcAttachmentRequest: AWSEncodableShape {
        public struct _AddSubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveSubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of one or more subnets to add. You can specify at most one subnet per Availability Zone.
        @OptionalCustomCoding<EC2ArrayCoder<_AddSubnetIdsEncoding, String>>
        public var addSubnetIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The new VPC attachment options.
        public let options: ModifyTransitGatewayVpcAttachmentRequestOptions?
        /// The IDs of one or more subnets to remove.
        @OptionalCustomCoding<EC2ArrayCoder<_RemoveSubnetIdsEncoding, String>>
        public var removeSubnetIds: [String]?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?

        public init(addSubnetIds: [String]? = nil, dryRun: Bool? = nil, options: ModifyTransitGatewayVpcAttachmentRequestOptions? = nil, removeSubnetIds: [String]? = nil, transitGatewayAttachmentId: String? = nil) {
            self.addSubnetIds = addSubnetIds
            self.dryRun = dryRun
            self.options = options
            self.removeSubnetIds = removeSubnetIds
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case addSubnetIds = "AddSubnetIds"
            case dryRun = "DryRun"
            case options = "Options"
            case removeSubnetIds = "RemoveSubnetIds"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct ModifyTransitGatewayVpcAttachmentRequestOptions: AWSEncodableShape {
        /// Enable or disable support for appliance mode. If enabled, a traffic flow between a source and destination uses the same Availability Zone for the VPC attachment for the lifetime of that flow. The default is disable.
        public let applianceModeSupport: ApplianceModeSupportValue?
        /// Enable or disable DNS support. The default is enable.
        public let dnsSupport: DnsSupportValue?
        /// Enable or disable IPv6 support. The default is enable.
        public let ipv6Support: Ipv6SupportValue?
        ///  This parameter is in preview and may not be available for your account.  Enables you to reference a security group across VPCs attached to a transit gateway. Use this option to simplify security group management and control of instance-to-instance traffic across VPCs that are connected by transit gateway. You can also use this option to migrate from VPC peering (which was the only option that supported security group referencing) to transit gateways (which now also support security group referencing). This option is disabled by default and there are no additional costs to use this feature.
        public let securityGroupReferencingSupport: SecurityGroupReferencingSupportValue?

        public init(applianceModeSupport: ApplianceModeSupportValue? = nil, dnsSupport: DnsSupportValue? = nil, ipv6Support: Ipv6SupportValue? = nil, securityGroupReferencingSupport: SecurityGroupReferencingSupportValue? = nil) {
            self.applianceModeSupport = applianceModeSupport
            self.dnsSupport = dnsSupport
            self.ipv6Support = ipv6Support
            self.securityGroupReferencingSupport = securityGroupReferencingSupport
        }

        private enum CodingKeys: String, CodingKey {
            case applianceModeSupport = "ApplianceModeSupport"
            case dnsSupport = "DnsSupport"
            case ipv6Support = "Ipv6Support"
            case securityGroupReferencingSupport = "SecurityGroupReferencingSupport"
        }
    }

    public struct ModifyTransitGatewayVpcAttachmentResult: AWSDecodableShape {
        /// Information about the modified attachment.
        public let transitGatewayVpcAttachment: TransitGatewayVpcAttachment?

        public init(transitGatewayVpcAttachment: TransitGatewayVpcAttachment? = nil) {
            self.transitGatewayVpcAttachment = transitGatewayVpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayVpcAttachment = "transitGatewayVpcAttachment"
        }
    }

    public struct ModifyVerifiedAccessEndpointEniOptions: AWSEncodableShape {
        /// The IP port number.
        public let port: Int?
        /// The IP protocol.
        public let `protocol`: VerifiedAccessEndpointProtocol?

        public init(port: Int? = nil, protocol: VerifiedAccessEndpointProtocol? = nil) {
            self.port = port
            self.`protocol` = `protocol`
        }

        public func validate(name: String) throws {
            try self.validate(self.port, name: "port", parent: name, max: 65535)
            try self.validate(self.port, name: "port", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case port = "Port"
            case `protocol` = "Protocol"
        }
    }

    public struct ModifyVerifiedAccessEndpointLoadBalancerOptions: AWSEncodableShape {
        public struct _SubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IP port number.
        public let port: Int?
        /// The IP protocol.
        public let `protocol`: VerifiedAccessEndpointProtocol?
        /// The IDs of the subnets.
        @OptionalCustomCoding<EC2ArrayCoder<_SubnetIdsEncoding, String>>
        public var subnetIds: [String]?

        public init(port: Int? = nil, protocol: VerifiedAccessEndpointProtocol? = nil, subnetIds: [String]? = nil) {
            self.port = port
            self.`protocol` = `protocol`
            self.subnetIds = subnetIds
        }

        public func validate(name: String) throws {
            try self.validate(self.port, name: "port", parent: name, max: 65535)
            try self.validate(self.port, name: "port", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case port = "Port"
            case `protocol` = "Protocol"
            case subnetIds = "SubnetId"
        }
    }

    public struct ModifyVerifiedAccessEndpointPolicyRequest: AWSEncodableShape {
        /// A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Verified Access policy document.
        public let policyDocument: String?
        /// The status of the Verified Access policy.
        public let policyEnabled: Bool?
        /// The options for server side encryption.
        public let sseSpecification: VerifiedAccessSseSpecificationRequest?
        /// The ID of the Verified Access endpoint.
        public let verifiedAccessEndpointId: String?

        public init(clientToken: String? = ModifyVerifiedAccessEndpointPolicyRequest.idempotencyToken(), dryRun: Bool? = nil, policyDocument: String? = nil, policyEnabled: Bool? = nil, sseSpecification: VerifiedAccessSseSpecificationRequest? = nil, verifiedAccessEndpointId: String? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.policyDocument = policyDocument
            self.policyEnabled = policyEnabled
            self.sseSpecification = sseSpecification
            self.verifiedAccessEndpointId = verifiedAccessEndpointId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case policyDocument = "PolicyDocument"
            case policyEnabled = "PolicyEnabled"
            case sseSpecification = "SseSpecification"
            case verifiedAccessEndpointId = "VerifiedAccessEndpointId"
        }
    }

    public struct ModifyVerifiedAccessEndpointPolicyResult: AWSDecodableShape {
        /// The Verified Access policy document.
        public let policyDocument: String?
        /// The status of the Verified Access policy.
        public let policyEnabled: Bool?
        /// The options in use for server side encryption.
        public let sseSpecification: VerifiedAccessSseSpecificationResponse?

        public init(policyDocument: String? = nil, policyEnabled: Bool? = nil, sseSpecification: VerifiedAccessSseSpecificationResponse? = nil) {
            self.policyDocument = policyDocument
            self.policyEnabled = policyEnabled
            self.sseSpecification = sseSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case policyDocument = "policyDocument"
            case policyEnabled = "policyEnabled"
            case sseSpecification = "sseSpecification"
        }
    }

    public struct ModifyVerifiedAccessEndpointRequest: AWSEncodableShape {
        /// A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// A description for the Verified Access endpoint.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The load balancer details if creating the Verified Access endpoint as load-balancertype.
        public let loadBalancerOptions: ModifyVerifiedAccessEndpointLoadBalancerOptions?
        /// The network interface options.
        public let networkInterfaceOptions: ModifyVerifiedAccessEndpointEniOptions?
        /// The ID of the Verified Access endpoint.
        public let verifiedAccessEndpointId: String?
        /// The ID of the Verified Access group.
        public let verifiedAccessGroupId: String?

        public init(clientToken: String? = ModifyVerifiedAccessEndpointRequest.idempotencyToken(), description: String? = nil, dryRun: Bool? = nil, loadBalancerOptions: ModifyVerifiedAccessEndpointLoadBalancerOptions? = nil, networkInterfaceOptions: ModifyVerifiedAccessEndpointEniOptions? = nil, verifiedAccessEndpointId: String? = nil, verifiedAccessGroupId: String? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.loadBalancerOptions = loadBalancerOptions
            self.networkInterfaceOptions = networkInterfaceOptions
            self.verifiedAccessEndpointId = verifiedAccessEndpointId
            self.verifiedAccessGroupId = verifiedAccessGroupId
        }

        public func validate(name: String) throws {
            try self.loadBalancerOptions?.validate(name: "\(name).loadBalancerOptions")
            try self.networkInterfaceOptions?.validate(name: "\(name).networkInterfaceOptions")
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "DryRun"
            case loadBalancerOptions = "LoadBalancerOptions"
            case networkInterfaceOptions = "NetworkInterfaceOptions"
            case verifiedAccessEndpointId = "VerifiedAccessEndpointId"
            case verifiedAccessGroupId = "VerifiedAccessGroupId"
        }
    }

    public struct ModifyVerifiedAccessEndpointResult: AWSDecodableShape {
        /// Details about the Verified Access endpoint.
        public let verifiedAccessEndpoint: VerifiedAccessEndpoint?

        public init(verifiedAccessEndpoint: VerifiedAccessEndpoint? = nil) {
            self.verifiedAccessEndpoint = verifiedAccessEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case verifiedAccessEndpoint = "verifiedAccessEndpoint"
        }
    }

    public struct ModifyVerifiedAccessGroupPolicyRequest: AWSEncodableShape {
        /// A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Verified Access policy document.
        public let policyDocument: String?
        /// The status of the Verified Access policy.
        public let policyEnabled: Bool?
        /// The options for server side encryption.
        public let sseSpecification: VerifiedAccessSseSpecificationRequest?
        /// The ID of the Verified Access group.
        public let verifiedAccessGroupId: String?

        public init(clientToken: String? = ModifyVerifiedAccessGroupPolicyRequest.idempotencyToken(), dryRun: Bool? = nil, policyDocument: String? = nil, policyEnabled: Bool? = nil, sseSpecification: VerifiedAccessSseSpecificationRequest? = nil, verifiedAccessGroupId: String? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.policyDocument = policyDocument
            self.policyEnabled = policyEnabled
            self.sseSpecification = sseSpecification
            self.verifiedAccessGroupId = verifiedAccessGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case policyDocument = "PolicyDocument"
            case policyEnabled = "PolicyEnabled"
            case sseSpecification = "SseSpecification"
            case verifiedAccessGroupId = "VerifiedAccessGroupId"
        }
    }

    public struct ModifyVerifiedAccessGroupPolicyResult: AWSDecodableShape {
        /// The Verified Access policy document.
        public let policyDocument: String?
        /// The status of the Verified Access policy.
        public let policyEnabled: Bool?
        /// The options in use for server side encryption.
        public let sseSpecification: VerifiedAccessSseSpecificationResponse?

        public init(policyDocument: String? = nil, policyEnabled: Bool? = nil, sseSpecification: VerifiedAccessSseSpecificationResponse? = nil) {
            self.policyDocument = policyDocument
            self.policyEnabled = policyEnabled
            self.sseSpecification = sseSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case policyDocument = "policyDocument"
            case policyEnabled = "policyEnabled"
            case sseSpecification = "sseSpecification"
        }
    }

    public struct ModifyVerifiedAccessGroupRequest: AWSEncodableShape {
        /// A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// A description for the Verified Access group.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Verified Access group.
        public let verifiedAccessGroupId: String?
        /// The ID of the Verified Access instance.
        public let verifiedAccessInstanceId: String?

        public init(clientToken: String? = ModifyVerifiedAccessGroupRequest.idempotencyToken(), description: String? = nil, dryRun: Bool? = nil, verifiedAccessGroupId: String? = nil, verifiedAccessInstanceId: String? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.verifiedAccessGroupId = verifiedAccessGroupId
            self.verifiedAccessInstanceId = verifiedAccessInstanceId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "DryRun"
            case verifiedAccessGroupId = "VerifiedAccessGroupId"
            case verifiedAccessInstanceId = "VerifiedAccessInstanceId"
        }
    }

    public struct ModifyVerifiedAccessGroupResult: AWSDecodableShape {
        /// Details about the Verified Access group.
        public let verifiedAccessGroup: VerifiedAccessGroup?

        public init(verifiedAccessGroup: VerifiedAccessGroup? = nil) {
            self.verifiedAccessGroup = verifiedAccessGroup
        }

        private enum CodingKeys: String, CodingKey {
            case verifiedAccessGroup = "verifiedAccessGroup"
        }
    }

    public struct ModifyVerifiedAccessInstanceLoggingConfigurationRequest: AWSEncodableShape {
        /// The configuration options for Verified Access instances.
        public let accessLogs: VerifiedAccessLogOptions?
        /// A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Verified Access instance.
        public let verifiedAccessInstanceId: String?

        public init(accessLogs: VerifiedAccessLogOptions? = nil, clientToken: String? = ModifyVerifiedAccessInstanceLoggingConfigurationRequest.idempotencyToken(), dryRun: Bool? = nil, verifiedAccessInstanceId: String? = nil) {
            self.accessLogs = accessLogs
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.verifiedAccessInstanceId = verifiedAccessInstanceId
        }

        private enum CodingKeys: String, CodingKey {
            case accessLogs = "AccessLogs"
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case verifiedAccessInstanceId = "VerifiedAccessInstanceId"
        }
    }

    public struct ModifyVerifiedAccessInstanceLoggingConfigurationResult: AWSDecodableShape {
        /// The logging configuration for the Verified Access instance.
        public let loggingConfiguration: VerifiedAccessInstanceLoggingConfiguration?

        public init(loggingConfiguration: VerifiedAccessInstanceLoggingConfiguration? = nil) {
            self.loggingConfiguration = loggingConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case loggingConfiguration = "loggingConfiguration"
        }
    }

    public struct ModifyVerifiedAccessInstanceRequest: AWSEncodableShape {
        /// A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// A description for the Verified Access instance.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Verified Access instance.
        public let verifiedAccessInstanceId: String?

        public init(clientToken: String? = ModifyVerifiedAccessInstanceRequest.idempotencyToken(), description: String? = nil, dryRun: Bool? = nil, verifiedAccessInstanceId: String? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.verifiedAccessInstanceId = verifiedAccessInstanceId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "DryRun"
            case verifiedAccessInstanceId = "VerifiedAccessInstanceId"
        }
    }

    public struct ModifyVerifiedAccessInstanceResult: AWSDecodableShape {
        /// Details about the Verified Access instance.
        public let verifiedAccessInstance: VerifiedAccessInstance?

        public init(verifiedAccessInstance: VerifiedAccessInstance? = nil) {
            self.verifiedAccessInstance = verifiedAccessInstance
        }

        private enum CodingKeys: String, CodingKey {
            case verifiedAccessInstance = "verifiedAccessInstance"
        }
    }

    public struct ModifyVerifiedAccessTrustProviderDeviceOptions: AWSEncodableShape {
        ///  The URL Amazon Web Services Verified Access will use to verify the authenticity of the device tokens.
        public let publicSigningKeyUrl: String?

        public init(publicSigningKeyUrl: String? = nil) {
            self.publicSigningKeyUrl = publicSigningKeyUrl
        }

        private enum CodingKeys: String, CodingKey {
            case publicSigningKeyUrl = "PublicSigningKeyUrl"
        }
    }

    public struct ModifyVerifiedAccessTrustProviderOidcOptions: AWSEncodableShape {
        /// The OIDC authorization endpoint.
        public let authorizationEndpoint: String?
        /// The client identifier.
        public let clientId: String?
        /// The client secret.
        public let clientSecret: String?
        /// The OIDC issuer.
        public let issuer: String?
        /// OpenID Connect (OIDC) scopes are used by an application during authentication to authorize access to a user's details. Each scope returns a specific set of user attributes.
        public let scope: String?
        /// The OIDC token endpoint.
        public let tokenEndpoint: String?
        /// The OIDC user info endpoint.
        public let userInfoEndpoint: String?

        public init(authorizationEndpoint: String? = nil, clientId: String? = nil, clientSecret: String? = nil, issuer: String? = nil, scope: String? = nil, tokenEndpoint: String? = nil, userInfoEndpoint: String? = nil) {
            self.authorizationEndpoint = authorizationEndpoint
            self.clientId = clientId
            self.clientSecret = clientSecret
            self.issuer = issuer
            self.scope = scope
            self.tokenEndpoint = tokenEndpoint
            self.userInfoEndpoint = userInfoEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case authorizationEndpoint = "AuthorizationEndpoint"
            case clientId = "ClientId"
            case clientSecret = "ClientSecret"
            case issuer = "Issuer"
            case scope = "Scope"
            case tokenEndpoint = "TokenEndpoint"
            case userInfoEndpoint = "UserInfoEndpoint"
        }
    }

    public struct ModifyVerifiedAccessTrustProviderRequest: AWSEncodableShape {
        /// A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// A description for the Verified Access trust provider.
        public let description: String?
        /// The options for a device-based trust provider. This parameter is required when the provider type is device.
        public let deviceOptions: ModifyVerifiedAccessTrustProviderDeviceOptions?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The options for an OpenID Connect-compatible user-identity trust provider.
        public let oidcOptions: ModifyVerifiedAccessTrustProviderOidcOptions?
        /// The options for server side encryption.
        public let sseSpecification: VerifiedAccessSseSpecificationRequest?
        /// The ID of the Verified Access trust provider.
        public let verifiedAccessTrustProviderId: String?

        public init(clientToken: String? = ModifyVerifiedAccessTrustProviderRequest.idempotencyToken(), description: String? = nil, deviceOptions: ModifyVerifiedAccessTrustProviderDeviceOptions? = nil, dryRun: Bool? = nil, oidcOptions: ModifyVerifiedAccessTrustProviderOidcOptions? = nil, sseSpecification: VerifiedAccessSseSpecificationRequest? = nil, verifiedAccessTrustProviderId: String? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.deviceOptions = deviceOptions
            self.dryRun = dryRun
            self.oidcOptions = oidcOptions
            self.sseSpecification = sseSpecification
            self.verifiedAccessTrustProviderId = verifiedAccessTrustProviderId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case deviceOptions = "DeviceOptions"
            case dryRun = "DryRun"
            case oidcOptions = "OidcOptions"
            case sseSpecification = "SseSpecification"
            case verifiedAccessTrustProviderId = "VerifiedAccessTrustProviderId"
        }
    }

    public struct ModifyVerifiedAccessTrustProviderResult: AWSDecodableShape {
        /// Details about the Verified Access trust provider.
        public let verifiedAccessTrustProvider: VerifiedAccessTrustProvider?

        public init(verifiedAccessTrustProvider: VerifiedAccessTrustProvider? = nil) {
            self.verifiedAccessTrustProvider = verifiedAccessTrustProvider
        }

        private enum CodingKeys: String, CodingKey {
            case verifiedAccessTrustProvider = "verifiedAccessTrustProvider"
        }
    }

    public struct ModifyVolumeAttributeRequest: AWSEncodableShape {
        /// Indicates whether the volume should be auto-enabled for I/O operations.
        public let autoEnableIO: AttributeBooleanValue?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the volume.
        public let volumeId: String?

        public init(autoEnableIO: AttributeBooleanValue? = nil, dryRun: Bool? = nil, volumeId: String? = nil) {
            self.autoEnableIO = autoEnableIO
            self.dryRun = dryRun
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case autoEnableIO = "AutoEnableIO"
            case dryRun = "dryRun"
            case volumeId = "VolumeId"
        }
    }

    public struct ModifyVolumeRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The target IOPS rate of the volume. This parameter is valid only for gp3, io1, and io2 volumes. The following are the supported values for each volume type:    gp3: 3,000 - 16,000 IOPS    io1: 100 - 64,000 IOPS    io2: 100 - 256,000 IOPS   For io2 volumes, you can achieve up to 256,000 IOPS on
        /// instances
        /// built on the Nitro System. On other instances, you can achieve performance up to 32,000 IOPS. Default: The existing value is retained if you keep the same volume type. If you change the volume type to io1, io2, or gp3, the default is 3,000.
        public let iops: Int?
        /// Specifies whether to enable Amazon EBS Multi-Attach. If you enable Multi-Attach, you can attach the
        /// 		volume to up to 16
        /// 			Nitro-based instances in the same Availability Zone. This parameter is
        /// 		supported with io1 and io2 volumes only. For more information, see
        ///
        /// 			Amazon EBS Multi-Attach in the Amazon EBS User Guide.
        public let multiAttachEnabled: Bool?
        /// The target size of the volume, in GiB. The target volume size must be greater than or equal to the existing size of the volume. The following are the supported volumes sizes for each volume type:    gp2 and gp3: 1 - 16,384 GiB    io1: 4 - 16,384 GiB    io2: 4 - 65,536 GiB    st1 and sc1: 125 - 16,384 GiB    standard: 1 - 1024 GiB   Default: The existing size is retained.
        public let size: Int?
        /// The target throughput of the volume, in MiB/s. This parameter is valid only for gp3 volumes.  The maximum value is 1,000. Default: The existing value is retained if the source and target volume type is gp3. Otherwise, the default value is 125. Valid Range: Minimum value of 125. Maximum value of 1000.
        public let throughput: Int?
        /// The ID of the volume.
        public let volumeId: String?
        /// The target EBS volume type of the volume. For more information, see Amazon EBS volume types in the Amazon EBS User Guide. Default: The existing type is retained.
        public let volumeType: VolumeType?

        public init(dryRun: Bool? = nil, iops: Int? = nil, multiAttachEnabled: Bool? = nil, size: Int? = nil, throughput: Int? = nil, volumeId: String? = nil, volumeType: VolumeType? = nil) {
            self.dryRun = dryRun
            self.iops = iops
            self.multiAttachEnabled = multiAttachEnabled
            self.size = size
            self.throughput = throughput
            self.volumeId = volumeId
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case iops = "Iops"
            case multiAttachEnabled = "MultiAttachEnabled"
            case size = "Size"
            case throughput = "Throughput"
            case volumeId = "VolumeId"
            case volumeType = "VolumeType"
        }
    }

    public struct ModifyVolumeResult: AWSDecodableShape {
        /// Information about the volume modification.
        public let volumeModification: VolumeModification?

        public init(volumeModification: VolumeModification? = nil) {
            self.volumeModification = volumeModification
        }

        private enum CodingKeys: String, CodingKey {
            case volumeModification = "volumeModification"
        }
    }

    public struct ModifyVpcAttributeRequest: AWSEncodableShape {
        /// Indicates whether the instances launched in the VPC get DNS hostnames. If enabled, instances in the VPC get DNS hostnames; otherwise, they do not. You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute. You can only enable DNS hostnames if you've enabled DNS support.
        public let enableDnsHostnames: AttributeBooleanValue?
        /// Indicates whether the DNS resolution is supported for the VPC. If enabled, queries to
        /// 			the Amazon provided DNS server at the 169.254.169.253 IP address, or the reserved IP
        /// 			address at the base of the VPC network range "plus two" succeed. If disabled, the Amazon
        /// 			provided DNS service in the VPC that resolves public DNS hostnames to IP addresses is
        /// 			not enabled. You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute.
        public let enableDnsSupport: AttributeBooleanValue?
        /// Indicates whether Network Address Usage metrics are enabled for your VPC.
        public let enableNetworkAddressUsageMetrics: AttributeBooleanValue?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(enableDnsHostnames: AttributeBooleanValue? = nil, enableDnsSupport: AttributeBooleanValue? = nil, enableNetworkAddressUsageMetrics: AttributeBooleanValue? = nil, vpcId: String? = nil) {
            self.enableDnsHostnames = enableDnsHostnames
            self.enableDnsSupport = enableDnsSupport
            self.enableNetworkAddressUsageMetrics = enableNetworkAddressUsageMetrics
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case enableDnsHostnames = "EnableDnsHostnames"
            case enableDnsSupport = "EnableDnsSupport"
            case enableNetworkAddressUsageMetrics = "EnableNetworkAddressUsageMetrics"
            case vpcId = "vpcId"
        }
    }

    public struct ModifyVpcEndpointConnectionNotificationRequest: AWSEncodableShape {
        public struct _ConnectionEventsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The events for the endpoint. Valid values are Accept, Connect, Delete, and Reject.
        @OptionalCustomCoding<EC2ArrayCoder<_ConnectionEventsEncoding, String>>
        public var connectionEvents: [String]?
        /// The ARN for the SNS topic for the notification.
        public let connectionNotificationArn: String?
        /// The ID of the notification.
        public let connectionNotificationId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(connectionEvents: [String]? = nil, connectionNotificationArn: String? = nil, connectionNotificationId: String? = nil, dryRun: Bool? = nil) {
            self.connectionEvents = connectionEvents
            self.connectionNotificationArn = connectionNotificationArn
            self.connectionNotificationId = connectionNotificationId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case connectionEvents = "ConnectionEvents"
            case connectionNotificationArn = "ConnectionNotificationArn"
            case connectionNotificationId = "ConnectionNotificationId"
            case dryRun = "DryRun"
        }
    }

    public struct ModifyVpcEndpointConnectionNotificationResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let returnValue: Bool?

        public init(returnValue: Bool? = nil) {
            self.returnValue = returnValue
        }

        private enum CodingKeys: String, CodingKey {
            case returnValue = "return"
        }
    }

    public struct ModifyVpcEndpointRequest: AWSEncodableShape {
        public struct _AddRouteTableIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _AddSecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _AddSubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveRouteTableIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveSecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveSubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SubnetConfigurationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// (Gateway endpoint) The IDs of the route tables to associate with the endpoint.
        @OptionalCustomCoding<EC2ArrayCoder<_AddRouteTableIdsEncoding, String>>
        public var addRouteTableIds: [String]?
        /// (Interface endpoint) The IDs of the security groups to associate with the endpoint network interfaces.
        @OptionalCustomCoding<EC2ArrayCoder<_AddSecurityGroupIdsEncoding, String>>
        public var addSecurityGroupIds: [String]?
        /// (Interface and Gateway Load Balancer endpoints) The IDs of the subnets in which to serve the endpoint.  For a Gateway Load Balancer endpoint, you can specify only one subnet.
        @OptionalCustomCoding<EC2ArrayCoder<_AddSubnetIdsEncoding, String>>
        public var addSubnetIds: [String]?
        /// The DNS options for the endpoint.
        public let dnsOptions: DnsOptionsSpecification?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IP address type for the endpoint.
        public let ipAddressType: IpAddressType?
        /// (Interface and gateway endpoints) A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format.
        public let policyDocument: String?
        /// (Interface endpoint) Indicates whether a private hosted zone is associated with the VPC.
        public let privateDnsEnabled: Bool?
        /// (Gateway endpoint) The IDs of the route tables to disassociate from the endpoint.
        @OptionalCustomCoding<EC2ArrayCoder<_RemoveRouteTableIdsEncoding, String>>
        public var removeRouteTableIds: [String]?
        /// (Interface endpoint) The IDs of the security groups to disassociate from the endpoint network interfaces.
        @OptionalCustomCoding<EC2ArrayCoder<_RemoveSecurityGroupIdsEncoding, String>>
        public var removeSecurityGroupIds: [String]?
        /// (Interface endpoint) The IDs of the subnets from which to remove the endpoint.
        @OptionalCustomCoding<EC2ArrayCoder<_RemoveSubnetIdsEncoding, String>>
        public var removeSubnetIds: [String]?
        /// (Gateway endpoint) Specify true to reset the policy document to the default policy. The default policy allows full access to the service.
        public let resetPolicy: Bool?
        /// The subnet configurations for the endpoint.
        @OptionalCustomCoding<EC2ArrayCoder<_SubnetConfigurationsEncoding, SubnetConfiguration>>
        public var subnetConfigurations: [SubnetConfiguration]?
        /// The ID of the endpoint.
        public let vpcEndpointId: String?

        public init(addRouteTableIds: [String]? = nil, addSecurityGroupIds: [String]? = nil, addSubnetIds: [String]? = nil, dnsOptions: DnsOptionsSpecification? = nil, dryRun: Bool? = nil, ipAddressType: IpAddressType? = nil, policyDocument: String? = nil, privateDnsEnabled: Bool? = nil, removeRouteTableIds: [String]? = nil, removeSecurityGroupIds: [String]? = nil, removeSubnetIds: [String]? = nil, resetPolicy: Bool? = nil, subnetConfigurations: [SubnetConfiguration]? = nil, vpcEndpointId: String? = nil) {
            self.addRouteTableIds = addRouteTableIds
            self.addSecurityGroupIds = addSecurityGroupIds
            self.addSubnetIds = addSubnetIds
            self.dnsOptions = dnsOptions
            self.dryRun = dryRun
            self.ipAddressType = ipAddressType
            self.policyDocument = policyDocument
            self.privateDnsEnabled = privateDnsEnabled
            self.removeRouteTableIds = removeRouteTableIds
            self.removeSecurityGroupIds = removeSecurityGroupIds
            self.removeSubnetIds = removeSubnetIds
            self.resetPolicy = resetPolicy
            self.subnetConfigurations = subnetConfigurations
            self.vpcEndpointId = vpcEndpointId
        }

        private enum CodingKeys: String, CodingKey {
            case addRouteTableIds = "AddRouteTableId"
            case addSecurityGroupIds = "AddSecurityGroupId"
            case addSubnetIds = "AddSubnetId"
            case dnsOptions = "DnsOptions"
            case dryRun = "DryRun"
            case ipAddressType = "IpAddressType"
            case policyDocument = "PolicyDocument"
            case privateDnsEnabled = "PrivateDnsEnabled"
            case removeRouteTableIds = "RemoveRouteTableId"
            case removeSecurityGroupIds = "RemoveSecurityGroupId"
            case removeSubnetIds = "RemoveSubnetId"
            case resetPolicy = "ResetPolicy"
            case subnetConfigurations = "SubnetConfiguration"
            case vpcEndpointId = "VpcEndpointId"
        }
    }

    public struct ModifyVpcEndpointResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ModifyVpcEndpointServiceConfigurationRequest: AWSEncodableShape {
        public struct _AddGatewayLoadBalancerArnsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _AddNetworkLoadBalancerArnsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _AddSupportedIpAddressTypesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveGatewayLoadBalancerArnsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveNetworkLoadBalancerArnsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveSupportedIpAddressTypesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether requests to create an endpoint to your service must be accepted.
        public let acceptanceRequired: Bool?
        /// The Amazon Resource Names (ARNs) of Gateway Load Balancers to add to your service configuration.
        @OptionalCustomCoding<EC2ArrayCoder<_AddGatewayLoadBalancerArnsEncoding, String>>
        public var addGatewayLoadBalancerArns: [String]?
        /// The Amazon Resource Names (ARNs) of Network Load Balancers to add to your service configuration.
        @OptionalCustomCoding<EC2ArrayCoder<_AddNetworkLoadBalancerArnsEncoding, String>>
        public var addNetworkLoadBalancerArns: [String]?
        /// The IP address types to add to your service configuration.
        @OptionalCustomCoding<EC2ArrayCoder<_AddSupportedIpAddressTypesEncoding, String>>
        public var addSupportedIpAddressTypes: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// (Interface endpoint configuration) The private DNS name to assign to the endpoint service.
        public let privateDnsName: String?
        /// The Amazon Resource Names (ARNs) of Gateway Load Balancers to remove from your service configuration.
        @OptionalCustomCoding<EC2ArrayCoder<_RemoveGatewayLoadBalancerArnsEncoding, String>>
        public var removeGatewayLoadBalancerArns: [String]?
        /// The Amazon Resource Names (ARNs) of Network Load Balancers to remove from your service configuration.
        @OptionalCustomCoding<EC2ArrayCoder<_RemoveNetworkLoadBalancerArnsEncoding, String>>
        public var removeNetworkLoadBalancerArns: [String]?
        /// (Interface endpoint configuration) Removes the private DNS name of the endpoint service.
        public let removePrivateDnsName: Bool?
        /// The IP address types to remove from your service configuration.
        @OptionalCustomCoding<EC2ArrayCoder<_RemoveSupportedIpAddressTypesEncoding, String>>
        public var removeSupportedIpAddressTypes: [String]?
        /// The ID of the service.
        public let serviceId: String?

        public init(acceptanceRequired: Bool? = nil, addGatewayLoadBalancerArns: [String]? = nil, addNetworkLoadBalancerArns: [String]? = nil, addSupportedIpAddressTypes: [String]? = nil, dryRun: Bool? = nil, privateDnsName: String? = nil, removeGatewayLoadBalancerArns: [String]? = nil, removeNetworkLoadBalancerArns: [String]? = nil, removePrivateDnsName: Bool? = nil, removeSupportedIpAddressTypes: [String]? = nil, serviceId: String? = nil) {
            self.acceptanceRequired = acceptanceRequired
            self.addGatewayLoadBalancerArns = addGatewayLoadBalancerArns
            self.addNetworkLoadBalancerArns = addNetworkLoadBalancerArns
            self.addSupportedIpAddressTypes = addSupportedIpAddressTypes
            self.dryRun = dryRun
            self.privateDnsName = privateDnsName
            self.removeGatewayLoadBalancerArns = removeGatewayLoadBalancerArns
            self.removeNetworkLoadBalancerArns = removeNetworkLoadBalancerArns
            self.removePrivateDnsName = removePrivateDnsName
            self.removeSupportedIpAddressTypes = removeSupportedIpAddressTypes
            self.serviceId = serviceId
        }

        private enum CodingKeys: String, CodingKey {
            case acceptanceRequired = "AcceptanceRequired"
            case addGatewayLoadBalancerArns = "AddGatewayLoadBalancerArn"
            case addNetworkLoadBalancerArns = "AddNetworkLoadBalancerArn"
            case addSupportedIpAddressTypes = "AddSupportedIpAddressType"
            case dryRun = "DryRun"
            case privateDnsName = "PrivateDnsName"
            case removeGatewayLoadBalancerArns = "RemoveGatewayLoadBalancerArn"
            case removeNetworkLoadBalancerArns = "RemoveNetworkLoadBalancerArn"
            case removePrivateDnsName = "RemovePrivateDnsName"
            case removeSupportedIpAddressTypes = "RemoveSupportedIpAddressType"
            case serviceId = "ServiceId"
        }
    }

    public struct ModifyVpcEndpointServiceConfigurationResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ModifyVpcEndpointServicePayerResponsibilityRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The entity that is responsible for the endpoint costs. The default is the endpoint owner. If you set the payer responsibility to the service owner, you cannot set it back to the endpoint owner.
        public let payerResponsibility: PayerResponsibility?
        /// The ID of the service.
        public let serviceId: String?

        public init(dryRun: Bool? = nil, payerResponsibility: PayerResponsibility? = nil, serviceId: String? = nil) {
            self.dryRun = dryRun
            self.payerResponsibility = payerResponsibility
            self.serviceId = serviceId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case payerResponsibility = "PayerResponsibility"
            case serviceId = "ServiceId"
        }
    }

    public struct ModifyVpcEndpointServicePayerResponsibilityResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let returnValue: Bool?

        public init(returnValue: Bool? = nil) {
            self.returnValue = returnValue
        }

        private enum CodingKeys: String, CodingKey {
            case returnValue = "return"
        }
    }

    public struct ModifyVpcEndpointServicePermissionsRequest: AWSEncodableShape {
        public struct _AddAllowedPrincipalsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveAllowedPrincipalsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Amazon Resource Names (ARN) of the principals.
        /// 	        Permissions are granted to the principals in this list.
        /// 	        To grant permissions to all principals, specify an asterisk (*).
        @OptionalCustomCoding<EC2ArrayCoder<_AddAllowedPrincipalsEncoding, String>>
        public var addAllowedPrincipals: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Amazon Resource Names (ARN) of the principals.
        /// 	        Permissions are revoked for principals in this list.
        @OptionalCustomCoding<EC2ArrayCoder<_RemoveAllowedPrincipalsEncoding, String>>
        public var removeAllowedPrincipals: [String]?
        /// The ID of the service.
        public let serviceId: String?

        public init(addAllowedPrincipals: [String]? = nil, dryRun: Bool? = nil, removeAllowedPrincipals: [String]? = nil, serviceId: String? = nil) {
            self.addAllowedPrincipals = addAllowedPrincipals
            self.dryRun = dryRun
            self.removeAllowedPrincipals = removeAllowedPrincipals
            self.serviceId = serviceId
        }

        private enum CodingKeys: String, CodingKey {
            case addAllowedPrincipals = "AddAllowedPrincipals"
            case dryRun = "DryRun"
            case removeAllowedPrincipals = "RemoveAllowedPrincipals"
            case serviceId = "ServiceId"
        }
    }

    public struct ModifyVpcEndpointServicePermissionsResult: AWSDecodableShape {
        public struct _AddedPrincipalsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the added principals.
        @OptionalCustomCoding<EC2ArrayCoder<_AddedPrincipalsEncoding, AddedPrincipal>>
        public var addedPrincipals: [AddedPrincipal]?
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let returnValue: Bool?

        public init(addedPrincipals: [AddedPrincipal]? = nil, returnValue: Bool? = nil) {
            self.addedPrincipals = addedPrincipals
            self.returnValue = returnValue
        }

        private enum CodingKeys: String, CodingKey {
            case addedPrincipals = "addedPrincipalSet"
            case returnValue = "return"
        }
    }

    public struct ModifyVpcPeeringConnectionOptionsRequest: AWSEncodableShape {
        /// The VPC peering connection options for the accepter VPC.
        public let accepterPeeringConnectionOptions: PeeringConnectionOptionsRequest?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The VPC peering connection options for the requester VPC.
        public let requesterPeeringConnectionOptions: PeeringConnectionOptionsRequest?
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String?

        public init(accepterPeeringConnectionOptions: PeeringConnectionOptionsRequest? = nil, dryRun: Bool? = nil, requesterPeeringConnectionOptions: PeeringConnectionOptionsRequest? = nil, vpcPeeringConnectionId: String? = nil) {
            self.accepterPeeringConnectionOptions = accepterPeeringConnectionOptions
            self.dryRun = dryRun
            self.requesterPeeringConnectionOptions = requesterPeeringConnectionOptions
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case accepterPeeringConnectionOptions = "AccepterPeeringConnectionOptions"
            case dryRun = "DryRun"
            case requesterPeeringConnectionOptions = "RequesterPeeringConnectionOptions"
            case vpcPeeringConnectionId = "VpcPeeringConnectionId"
        }
    }

    public struct ModifyVpcPeeringConnectionOptionsResult: AWSDecodableShape {
        /// Information about the VPC peering connection options for the accepter VPC.
        public let accepterPeeringConnectionOptions: PeeringConnectionOptions?
        /// Information about the VPC peering connection options for the requester VPC.
        public let requesterPeeringConnectionOptions: PeeringConnectionOptions?

        public init(accepterPeeringConnectionOptions: PeeringConnectionOptions? = nil, requesterPeeringConnectionOptions: PeeringConnectionOptions? = nil) {
            self.accepterPeeringConnectionOptions = accepterPeeringConnectionOptions
            self.requesterPeeringConnectionOptions = requesterPeeringConnectionOptions
        }

        private enum CodingKeys: String, CodingKey {
            case accepterPeeringConnectionOptions = "accepterPeeringConnectionOptions"
            case requesterPeeringConnectionOptions = "requesterPeeringConnectionOptions"
        }
    }

    public struct ModifyVpcTenancyRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The instance tenancy attribute for the VPC.
        public let instanceTenancy: VpcTenancy?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(dryRun: Bool? = nil, instanceTenancy: VpcTenancy? = nil, vpcId: String? = nil) {
            self.dryRun = dryRun
            self.instanceTenancy = instanceTenancy
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceTenancy = "InstanceTenancy"
            case vpcId = "VpcId"
        }
    }

    public struct ModifyVpcTenancyResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, returns an error.
        public let returnValue: Bool?

        public init(returnValue: Bool? = nil) {
            self.returnValue = returnValue
        }

        private enum CodingKeys: String, CodingKey {
            case returnValue = "return"
        }
    }

    public struct ModifyVpnConnectionOptionsRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection. Default: 0.0.0.0/0
        public let localIpv4NetworkCidr: String?
        /// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection. Default: ::/0
        public let localIpv6NetworkCidr: String?
        /// The IPv4 CIDR on the Amazon Web Services side of the VPN connection. Default: 0.0.0.0/0
        public let remoteIpv4NetworkCidr: String?
        /// The IPv6 CIDR on the Amazon Web Services side of the VPN connection. Default: ::/0
        public let remoteIpv6NetworkCidr: String?
        /// The ID of the Site-to-Site VPN connection.
        public let vpnConnectionId: String?

        public init(dryRun: Bool? = nil, localIpv4NetworkCidr: String? = nil, localIpv6NetworkCidr: String? = nil, remoteIpv4NetworkCidr: String? = nil, remoteIpv6NetworkCidr: String? = nil, vpnConnectionId: String? = nil) {
            self.dryRun = dryRun
            self.localIpv4NetworkCidr = localIpv4NetworkCidr
            self.localIpv6NetworkCidr = localIpv6NetworkCidr
            self.remoteIpv4NetworkCidr = remoteIpv4NetworkCidr
            self.remoteIpv6NetworkCidr = remoteIpv6NetworkCidr
            self.vpnConnectionId = vpnConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case localIpv4NetworkCidr = "LocalIpv4NetworkCidr"
            case localIpv6NetworkCidr = "LocalIpv6NetworkCidr"
            case remoteIpv4NetworkCidr = "RemoteIpv4NetworkCidr"
            case remoteIpv6NetworkCidr = "RemoteIpv6NetworkCidr"
            case vpnConnectionId = "VpnConnectionId"
        }
    }

    public struct ModifyVpnConnectionOptionsResult: AWSDecodableShape {
        /// Information about the VPN connection.
        public let vpnConnection: VpnConnection?

        public init(vpnConnection: VpnConnection? = nil) {
            self.vpnConnection = vpnConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnection = "vpnConnection"
        }
    }

    public struct ModifyVpnConnectionRequest: AWSEncodableShape {
        /// The ID of the customer gateway at your end of the VPN connection.
        public let customerGatewayId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?
        /// The ID of the VPN connection.
        public let vpnConnectionId: String?
        /// The ID of the virtual private gateway at the Amazon Web Services side of the VPN connection.
        public let vpnGatewayId: String?

        public init(customerGatewayId: String? = nil, dryRun: Bool? = nil, transitGatewayId: String? = nil, vpnConnectionId: String? = nil, vpnGatewayId: String? = nil) {
            self.customerGatewayId = customerGatewayId
            self.dryRun = dryRun
            self.transitGatewayId = transitGatewayId
            self.vpnConnectionId = vpnConnectionId
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case customerGatewayId = "CustomerGatewayId"
            case dryRun = "DryRun"
            case transitGatewayId = "TransitGatewayId"
            case vpnConnectionId = "VpnConnectionId"
            case vpnGatewayId = "VpnGatewayId"
        }
    }

    public struct ModifyVpnConnectionResult: AWSDecodableShape {
        /// Information about the VPN connection.
        public let vpnConnection: VpnConnection?

        public init(vpnConnection: VpnConnection? = nil) {
            self.vpnConnection = vpnConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnection = "vpnConnection"
        }
    }

    public struct ModifyVpnTunnelCertificateRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Amazon Web Services Site-to-Site VPN connection.
        public let vpnConnectionId: String?
        /// The external IP address of the VPN tunnel.
        public let vpnTunnelOutsideIpAddress: String?

        public init(dryRun: Bool? = nil, vpnConnectionId: String? = nil, vpnTunnelOutsideIpAddress: String? = nil) {
            self.dryRun = dryRun
            self.vpnConnectionId = vpnConnectionId
            self.vpnTunnelOutsideIpAddress = vpnTunnelOutsideIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case vpnConnectionId = "VpnConnectionId"
            case vpnTunnelOutsideIpAddress = "VpnTunnelOutsideIpAddress"
        }
    }

    public struct ModifyVpnTunnelCertificateResult: AWSDecodableShape {
        /// Information about the VPN connection.
        public let vpnConnection: VpnConnection?

        public init(vpnConnection: VpnConnection? = nil) {
            self.vpnConnection = vpnConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnection = "vpnConnection"
        }
    }

    public struct ModifyVpnTunnelOptionsRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Choose whether or not to trigger immediate tunnel replacement. This is only applicable when turning on or off EnableTunnelLifecycleControl. Valid values: True | False
        public let skipTunnelReplacement: Bool?
        /// The tunnel options to modify.
        public let tunnelOptions: ModifyVpnTunnelOptionsSpecification?
        /// The ID of the Amazon Web Services Site-to-Site VPN connection.
        public let vpnConnectionId: String?
        /// The external IP address of the VPN tunnel.
        public let vpnTunnelOutsideIpAddress: String?

        public init(dryRun: Bool? = nil, skipTunnelReplacement: Bool? = nil, tunnelOptions: ModifyVpnTunnelOptionsSpecification? = nil, vpnConnectionId: String? = nil, vpnTunnelOutsideIpAddress: String? = nil) {
            self.dryRun = dryRun
            self.skipTunnelReplacement = skipTunnelReplacement
            self.tunnelOptions = tunnelOptions
            self.vpnConnectionId = vpnConnectionId
            self.vpnTunnelOutsideIpAddress = vpnTunnelOutsideIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case skipTunnelReplacement = "SkipTunnelReplacement"
            case tunnelOptions = "TunnelOptions"
            case vpnConnectionId = "VpnConnectionId"
            case vpnTunnelOutsideIpAddress = "VpnTunnelOutsideIpAddress"
        }
    }

    public struct ModifyVpnTunnelOptionsResult: AWSDecodableShape {
        /// Information about the VPN connection.
        public let vpnConnection: VpnConnection?

        public init(vpnConnection: VpnConnection? = nil) {
            self.vpnConnection = vpnConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnection = "vpnConnection"
        }
    }

    public struct ModifyVpnTunnelOptionsSpecification: AWSEncodableShape {
        public struct _IKEVersionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase1DHGroupNumbersEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase1EncryptionAlgorithmsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase1IntegrityAlgorithmsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase2DHGroupNumbersEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase2EncryptionAlgorithmsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase2IntegrityAlgorithmsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The action to take after DPD timeout occurs. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid Values: clear | none | restart  Default: clear
        public let dpdTimeoutAction: String?
        /// The number of seconds after which a DPD timeout occurs. A DPD timeout of 40 seconds means that the VPN endpoint will consider the peer dead 30 seconds after the first failed keep-alive. Constraints: A value greater than or equal to 30. Default: 40
        public let dpdTimeoutSeconds: Int?
        /// Turn on or off tunnel endpoint lifecycle control feature.
        public let enableTunnelLifecycleControl: Bool?
        /// The IKE versions that are permitted for the VPN tunnel. Valid values: ikev1 | ikev2
        @OptionalCustomCoding<EC2ArrayCoder<_IKEVersionsEncoding, IKEVersionsRequestListValue>>
        public var ikeVersions: [IKEVersionsRequestListValue]?
        /// Options for logging VPN tunnel activity.
        public let logOptions: VpnTunnelLogOptionsSpecification?
        /// One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: 2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24
        @OptionalCustomCoding<EC2ArrayCoder<_Phase1DHGroupNumbersEncoding, Phase1DHGroupNumbersRequestListValue>>
        public var phase1DHGroupNumbers: [Phase1DHGroupNumbersRequestListValue]?
        /// One or more encryption algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16
        @OptionalCustomCoding<EC2ArrayCoder<_Phase1EncryptionAlgorithmsEncoding, Phase1EncryptionAlgorithmsRequestListValue>>
        public var phase1EncryptionAlgorithms: [Phase1EncryptionAlgorithmsRequestListValue]?
        /// One or more integrity algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: SHA1 | SHA2-256 | SHA2-384 | SHA2-512
        @OptionalCustomCoding<EC2ArrayCoder<_Phase1IntegrityAlgorithmsEncoding, Phase1IntegrityAlgorithmsRequestListValue>>
        public var phase1IntegrityAlgorithms: [Phase1IntegrityAlgorithmsRequestListValue]?
        /// The lifetime for phase 1 of the IKE negotiation, in seconds. Constraints: A value between 900 and 28,800. Default: 28800
        public let phase1LifetimeSeconds: Int?
        /// One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: 2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24
        @OptionalCustomCoding<EC2ArrayCoder<_Phase2DHGroupNumbersEncoding, Phase2DHGroupNumbersRequestListValue>>
        public var phase2DHGroupNumbers: [Phase2DHGroupNumbersRequestListValue]?
        /// One or more encryption algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16
        @OptionalCustomCoding<EC2ArrayCoder<_Phase2EncryptionAlgorithmsEncoding, Phase2EncryptionAlgorithmsRequestListValue>>
        public var phase2EncryptionAlgorithms: [Phase2EncryptionAlgorithmsRequestListValue]?
        /// One or more integrity algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: SHA1 | SHA2-256 | SHA2-384 | SHA2-512
        @OptionalCustomCoding<EC2ArrayCoder<_Phase2IntegrityAlgorithmsEncoding, Phase2IntegrityAlgorithmsRequestListValue>>
        public var phase2IntegrityAlgorithms: [Phase2IntegrityAlgorithmsRequestListValue]?
        /// The lifetime for phase 2 of the IKE negotiation, in seconds. Constraints: A value between 900 and 3,600. The value must be less than the value for Phase1LifetimeSeconds. Default: 3600
        public let phase2LifetimeSeconds: Int?
        /// The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and the customer gateway. Constraints: Allowed characters are alphanumeric characters, periods (.), and underscores (_). Must be between 8 and 64 characters in length and cannot start with zero (0).
        public let preSharedKey: String?
        /// The percentage of the rekey window (determined by RekeyMarginTimeSeconds) during which the rekey time is randomly selected. Constraints: A value between 0 and 100. Default: 100
        public let rekeyFuzzPercentage: Int?
        /// The margin time, in seconds, before the phase 2 lifetime expires, during which the Amazon Web Services side of the VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for RekeyFuzzPercentage. Constraints: A value between 60 and half of Phase2LifetimeSeconds. Default: 270
        public let rekeyMarginTimeSeconds: Int?
        /// The number of packets in an IKE replay window. Constraints: A value between 64 and 2048. Default: 1024
        public let replayWindowSize: Int?
        /// The action to take when the establishing the tunnel for the VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for Amazon Web Services to initiate the IKE negotiation. Valid Values: add | start  Default: add
        public let startupAction: String?
        /// The range of inside IPv4 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same virtual private gateway.  Constraints: A size /30 CIDR block from the 169.254.0.0/16 range. The following CIDR blocks are reserved and cannot be used:    169.254.0.0/30     169.254.1.0/30     169.254.2.0/30     169.254.3.0/30     169.254.4.0/30     169.254.5.0/30     169.254.169.252/30
        public let tunnelInsideCidr: String?
        /// The range of inside IPv6 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same transit gateway. Constraints: A size /126 CIDR block from the local fd00::/8 range.
        public let tunnelInsideIpv6Cidr: String?

        public init(dpdTimeoutAction: String? = nil, dpdTimeoutSeconds: Int? = nil, enableTunnelLifecycleControl: Bool? = nil, ikeVersions: [IKEVersionsRequestListValue]? = nil, logOptions: VpnTunnelLogOptionsSpecification? = nil, phase1DHGroupNumbers: [Phase1DHGroupNumbersRequestListValue]? = nil, phase1EncryptionAlgorithms: [Phase1EncryptionAlgorithmsRequestListValue]? = nil, phase1IntegrityAlgorithms: [Phase1IntegrityAlgorithmsRequestListValue]? = nil, phase1LifetimeSeconds: Int? = nil, phase2DHGroupNumbers: [Phase2DHGroupNumbersRequestListValue]? = nil, phase2EncryptionAlgorithms: [Phase2EncryptionAlgorithmsRequestListValue]? = nil, phase2IntegrityAlgorithms: [Phase2IntegrityAlgorithmsRequestListValue]? = nil, phase2LifetimeSeconds: Int? = nil, preSharedKey: String? = nil, rekeyFuzzPercentage: Int? = nil, rekeyMarginTimeSeconds: Int? = nil, replayWindowSize: Int? = nil, startupAction: String? = nil, tunnelInsideCidr: String? = nil, tunnelInsideIpv6Cidr: String? = nil) {
            self.dpdTimeoutAction = dpdTimeoutAction
            self.dpdTimeoutSeconds = dpdTimeoutSeconds
            self.enableTunnelLifecycleControl = enableTunnelLifecycleControl
            self.ikeVersions = ikeVersions
            self.logOptions = logOptions
            self.phase1DHGroupNumbers = phase1DHGroupNumbers
            self.phase1EncryptionAlgorithms = phase1EncryptionAlgorithms
            self.phase1IntegrityAlgorithms = phase1IntegrityAlgorithms
            self.phase1LifetimeSeconds = phase1LifetimeSeconds
            self.phase2DHGroupNumbers = phase2DHGroupNumbers
            self.phase2EncryptionAlgorithms = phase2EncryptionAlgorithms
            self.phase2IntegrityAlgorithms = phase2IntegrityAlgorithms
            self.phase2LifetimeSeconds = phase2LifetimeSeconds
            self.preSharedKey = preSharedKey
            self.rekeyFuzzPercentage = rekeyFuzzPercentage
            self.rekeyMarginTimeSeconds = rekeyMarginTimeSeconds
            self.replayWindowSize = replayWindowSize
            self.startupAction = startupAction
            self.tunnelInsideCidr = tunnelInsideCidr
            self.tunnelInsideIpv6Cidr = tunnelInsideIpv6Cidr
        }

        private enum CodingKeys: String, CodingKey {
            case dpdTimeoutAction = "DPDTimeoutAction"
            case dpdTimeoutSeconds = "DPDTimeoutSeconds"
            case enableTunnelLifecycleControl = "EnableTunnelLifecycleControl"
            case ikeVersions = "IKEVersion"
            case logOptions = "LogOptions"
            case phase1DHGroupNumbers = "Phase1DHGroupNumber"
            case phase1EncryptionAlgorithms = "Phase1EncryptionAlgorithm"
            case phase1IntegrityAlgorithms = "Phase1IntegrityAlgorithm"
            case phase1LifetimeSeconds = "Phase1LifetimeSeconds"
            case phase2DHGroupNumbers = "Phase2DHGroupNumber"
            case phase2EncryptionAlgorithms = "Phase2EncryptionAlgorithm"
            case phase2IntegrityAlgorithms = "Phase2IntegrityAlgorithm"
            case phase2LifetimeSeconds = "Phase2LifetimeSeconds"
            case preSharedKey = "PreSharedKey"
            case rekeyFuzzPercentage = "RekeyFuzzPercentage"
            case rekeyMarginTimeSeconds = "RekeyMarginTimeSeconds"
            case replayWindowSize = "ReplayWindowSize"
            case startupAction = "StartupAction"
            case tunnelInsideCidr = "TunnelInsideCidr"
            case tunnelInsideIpv6Cidr = "TunnelInsideIpv6Cidr"
        }
    }

    public struct MonitorInstancesRequest: AWSEncodableShape {
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "InstanceId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the instances.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]?

        public init(dryRun: Bool? = nil, instanceIds: [String]? = nil) {
            self.dryRun = dryRun
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceIds = "InstanceId"
        }
    }

    public struct MonitorInstancesResult: AWSDecodableShape {
        public struct _InstanceMonitoringsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The monitoring information.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceMonitoringsEncoding, InstanceMonitoring>>
        public var instanceMonitorings: [InstanceMonitoring]?

        public init(instanceMonitorings: [InstanceMonitoring]? = nil) {
            self.instanceMonitorings = instanceMonitorings
        }

        private enum CodingKeys: String, CodingKey {
            case instanceMonitorings = "instancesSet"
        }
    }

    public struct Monitoring: AWSDecodableShape {
        /// Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
        public let state: MonitoringState?

        public init(state: MonitoringState? = nil) {
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
        }
    }

    public struct MoveAddressToVpcRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Elastic IP address.
        public let publicIp: String?

        public init(dryRun: Bool? = nil, publicIp: String? = nil) {
            self.dryRun = dryRun
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case publicIp = "publicIp"
        }
    }

    public struct MoveAddressToVpcResult: AWSDecodableShape {
        /// The allocation ID for the Elastic IP address.
        public let allocationId: String?
        /// The status of the move of the IP address.
        public let status: Status?

        public init(allocationId: String? = nil, status: Status? = nil) {
            self.allocationId = allocationId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "allocationId"
            case status = "status"
        }
    }

    public struct MoveByoipCidrToIpamRequest: AWSEncodableShape {
        /// The BYOIP CIDR.
        public let cidr: String?
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IPAM pool ID.
        public let ipamPoolId: String?
        /// The Amazon Web Services account ID of the owner of the IPAM pool.
        public let ipamPoolOwner: String?

        public init(cidr: String? = nil, dryRun: Bool? = nil, ipamPoolId: String? = nil, ipamPoolOwner: String? = nil) {
            self.cidr = cidr
            self.dryRun = dryRun
            self.ipamPoolId = ipamPoolId
            self.ipamPoolOwner = ipamPoolOwner
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case dryRun = "DryRun"
            case ipamPoolId = "IpamPoolId"
            case ipamPoolOwner = "IpamPoolOwner"
        }
    }

    public struct MoveByoipCidrToIpamResult: AWSDecodableShape {
        /// The BYOIP CIDR.
        public let byoipCidr: ByoipCidr?

        public init(byoipCidr: ByoipCidr? = nil) {
            self.byoipCidr = byoipCidr
        }

        private enum CodingKeys: String, CodingKey {
            case byoipCidr = "byoipCidr"
        }
    }

    public struct MovingAddressStatus: AWSDecodableShape {
        /// The status of the Elastic IP address that's being moved or restored.
        public let moveStatus: MoveStatus?
        /// The Elastic IP address.
        public let publicIp: String?

        public init(moveStatus: MoveStatus? = nil, publicIp: String? = nil) {
            self.moveStatus = moveStatus
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case moveStatus = "moveStatus"
            case publicIp = "publicIp"
        }
    }

    public struct NatGateway: AWSDecodableShape {
        public struct _NatGatewayAddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether the NAT gateway supports public or private connectivity.
        public let connectivityType: ConnectivityType?
        /// The date and time the NAT gateway was created.
        public let createTime: Date?
        /// The date and time the NAT gateway was deleted, if applicable.
        public let deleteTime: Date?
        /// If the NAT gateway could not be created, specifies the error code for the failure. (InsufficientFreeAddressesInSubnet | Gateway.NotAttached | InvalidAllocationID.NotFound | Resource.AlreadyAssociated | InternalError | InvalidSubnetID.NotFound)
        public let failureCode: String?
        /// If the NAT gateway could not be created, specifies the error message for the failure, that corresponds to the error code.   For InsufficientFreeAddressesInSubnet: "Subnet has insufficient free addresses to create this NAT gateway"   For Gateway.NotAttached: "Network vpc-xxxxxxxx has no Internet gateway attached"   For InvalidAllocationID.NotFound: "Elastic IP address eipalloc-xxxxxxxx could not be associated with this NAT gateway"   For Resource.AlreadyAssociated: "Elastic IP address eipalloc-xxxxxxxx is already associated"   For InternalError: "Network interface eni-xxxxxxxx, created and used internally by this NAT gateway is in an invalid state. Please try again."   For InvalidSubnetID.NotFound: "The specified subnet subnet-xxxxxxxx does not exist or could not be found."
        public let failureMessage: String?
        /// Information about the IP addresses and network interface associated with the NAT gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_NatGatewayAddressesEncoding, NatGatewayAddress>>
        public var natGatewayAddresses: [NatGatewayAddress]?
        /// The ID of the NAT gateway.
        public let natGatewayId: String?
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through  the Support Center.
        public let provisionedBandwidth: ProvisionedBandwidth?
        /// The state of the NAT gateway.    pending: The NAT gateway is being created and is not ready to process traffic.    failed: The NAT gateway could not be created. Check the failureCode and failureMessage fields for the reason.    available: The NAT gateway is able to process traffic. This status remains until you delete the NAT gateway, and does not indicate the health of the NAT gateway.    deleting: The NAT gateway is in the process of being terminated and may still be processing traffic.    deleted: The NAT gateway has been terminated and is no longer processing traffic.
        public let state: NatGatewayState?
        /// The ID of the subnet in which the NAT gateway is located.
        public let subnetId: String?
        /// The tags for the NAT gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VPC in which the NAT gateway is located.
        public let vpcId: String?

        public init(connectivityType: ConnectivityType? = nil, createTime: Date? = nil, deleteTime: Date? = nil, failureCode: String? = nil, failureMessage: String? = nil, natGatewayAddresses: [NatGatewayAddress]? = nil, natGatewayId: String? = nil, provisionedBandwidth: ProvisionedBandwidth? = nil, state: NatGatewayState? = nil, subnetId: String? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.connectivityType = connectivityType
            self.createTime = createTime
            self.deleteTime = deleteTime
            self.failureCode = failureCode
            self.failureMessage = failureMessage
            self.natGatewayAddresses = natGatewayAddresses
            self.natGatewayId = natGatewayId
            self.provisionedBandwidth = provisionedBandwidth
            self.state = state
            self.subnetId = subnetId
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case connectivityType = "connectivityType"
            case createTime = "createTime"
            case deleteTime = "deleteTime"
            case failureCode = "failureCode"
            case failureMessage = "failureMessage"
            case natGatewayAddresses = "natGatewayAddressSet"
            case natGatewayId = "natGatewayId"
            case provisionedBandwidth = "provisionedBandwidth"
            case state = "state"
            case subnetId = "subnetId"
            case tags = "tagSet"
            case vpcId = "vpcId"
        }
    }

    public struct NatGatewayAddress: AWSDecodableShape {
        /// [Public NAT gateway only] The allocation ID of the Elastic IP address that's associated with the NAT gateway.
        public let allocationId: String?
        /// [Public NAT gateway only] The association ID of the Elastic IP address that's associated with the NAT gateway.
        public let associationId: String?
        /// The address failure message.
        public let failureMessage: String?
        /// Defines if the IP address is the primary address.
        public let isPrimary: Bool?
        /// The ID of the network interface associated with the NAT gateway.
        public let networkInterfaceId: String?
        /// The private IP address associated with the NAT gateway.
        public let privateIp: String?
        /// [Public NAT gateway only] The Elastic IP address associated with the NAT gateway.
        public let publicIp: String?
        /// The address status.
        public let status: NatGatewayAddressStatus?

        public init(allocationId: String? = nil, associationId: String? = nil, failureMessage: String? = nil, isPrimary: Bool? = nil, networkInterfaceId: String? = nil, privateIp: String? = nil, publicIp: String? = nil, status: NatGatewayAddressStatus? = nil) {
            self.allocationId = allocationId
            self.associationId = associationId
            self.failureMessage = failureMessage
            self.isPrimary = isPrimary
            self.networkInterfaceId = networkInterfaceId
            self.privateIp = privateIp
            self.publicIp = publicIp
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "allocationId"
            case associationId = "associationId"
            case failureMessage = "failureMessage"
            case isPrimary = "isPrimary"
            case networkInterfaceId = "networkInterfaceId"
            case privateIp = "privateIp"
            case publicIp = "publicIp"
            case status = "status"
        }
    }

    public struct NetworkAcl: AWSDecodableShape {
        public struct _AssociationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _EntriesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Any associations between the network ACL and one or more subnets
        @OptionalCustomCoding<EC2ArrayCoder<_AssociationsEncoding, NetworkAclAssociation>>
        public var associations: [NetworkAclAssociation]?
        /// The entries (rules) in the network ACL.
        @OptionalCustomCoding<EC2ArrayCoder<_EntriesEncoding, NetworkAclEntry>>
        public var entries: [NetworkAclEntry]?
        /// Indicates whether this is the default network ACL for the VPC.
        public let isDefault: Bool?
        /// The ID of the network ACL.
        public let networkAclId: String?
        /// The ID of the Amazon Web Services account that owns the network ACL.
        public let ownerId: String?
        /// Any tags assigned to the network ACL.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VPC for the network ACL.
        public let vpcId: String?

        public init(associations: [NetworkAclAssociation]? = nil, entries: [NetworkAclEntry]? = nil, isDefault: Bool? = nil, networkAclId: String? = nil, ownerId: String? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.associations = associations
            self.entries = entries
            self.isDefault = isDefault
            self.networkAclId = networkAclId
            self.ownerId = ownerId
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case associations = "associationSet"
            case entries = "entrySet"
            case isDefault = "default"
            case networkAclId = "networkAclId"
            case ownerId = "ownerId"
            case tags = "tagSet"
            case vpcId = "vpcId"
        }
    }

    public struct NetworkAclAssociation: AWSDecodableShape {
        /// The ID of the association between a network ACL and a subnet.
        public let networkAclAssociationId: String?
        /// The ID of the network ACL.
        public let networkAclId: String?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(networkAclAssociationId: String? = nil, networkAclId: String? = nil, subnetId: String? = nil) {
            self.networkAclAssociationId = networkAclAssociationId
            self.networkAclId = networkAclId
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case networkAclAssociationId = "networkAclAssociationId"
            case networkAclId = "networkAclId"
            case subnetId = "subnetId"
        }
    }

    public struct NetworkAclEntry: AWSDecodableShape {
        /// The IPv4 network range to allow or deny, in CIDR notation.
        public let cidrBlock: String?
        /// Indicates whether the rule is an egress rule (applied to traffic leaving the subnet).
        public let egress: Bool?
        /// ICMP protocol: The ICMP type and code.
        public let icmpTypeCode: IcmpTypeCode?
        /// The IPv6 network range to allow or deny, in CIDR notation.
        public let ipv6CidrBlock: String?
        /// TCP or UDP protocols: The range of ports the rule applies to.
        public let portRange: PortRange?
        /// The protocol number. A value of "-1" means all protocols.
        public let `protocol`: String?
        /// Indicates whether to allow or deny the traffic that matches the rule.
        public let ruleAction: RuleAction?
        /// The rule number for the entry. ACL entries are processed in ascending order by rule number.
        public let ruleNumber: Int?

        public init(cidrBlock: String? = nil, egress: Bool? = nil, icmpTypeCode: IcmpTypeCode? = nil, ipv6CidrBlock: String? = nil, portRange: PortRange? = nil, protocol: String? = nil, ruleAction: RuleAction? = nil, ruleNumber: Int? = nil) {
            self.cidrBlock = cidrBlock
            self.egress = egress
            self.icmpTypeCode = icmpTypeCode
            self.ipv6CidrBlock = ipv6CidrBlock
            self.portRange = portRange
            self.`protocol` = `protocol`
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlock = "cidrBlock"
            case egress = "egress"
            case icmpTypeCode = "icmpTypeCode"
            case ipv6CidrBlock = "ipv6CidrBlock"
            case portRange = "portRange"
            case `protocol` = "protocol"
            case ruleAction = "ruleAction"
            case ruleNumber = "ruleNumber"
        }
    }

    public struct NetworkBandwidthGbps: AWSEncodableShape & AWSDecodableShape {
        /// The maximum amount of network bandwidth, in Gbps. If this parameter is not specified, there is no maximum limit.
        public let max: Double?
        /// The minimum amount of network bandwidth, in Gbps. If this parameter is not specified, there is no minimum limit.
        public let min: Double?

        public init(max: Double? = nil, min: Double? = nil) {
            self.max = max
            self.min = min
        }

        private enum CodingKeys: String, CodingKey {
            case max = "max"
            case min = "min"
        }
    }

    public struct NetworkBandwidthGbpsRequest: AWSEncodableShape {
        /// The maximum amount of network bandwidth, in Gbps. To specify no maximum limit, omit this parameter.
        public let max: Double?
        /// The minimum amount of network bandwidth, in Gbps. To specify no minimum limit, omit this parameter.
        public let min: Double?

        public init(max: Double? = nil, min: Double? = nil) {
            self.max = max
            self.min = min
        }

        private enum CodingKeys: String, CodingKey {
            case max = "Max"
            case min = "Min"
        }
    }

    public struct NetworkCardInfo: AWSDecodableShape {
        /// The baseline network performance of the network card, in Gbps.
        public let baselineBandwidthInGbps: Double?
        /// The maximum number of network interfaces for the network card.
        public let maximumNetworkInterfaces: Int?
        /// The index of the network card.
        public let networkCardIndex: Int?
        /// The network performance of the network card.
        public let networkPerformance: String?
        /// The peak (burst) network performance of the network card, in Gbps.
        public let peakBandwidthInGbps: Double?

        public init(baselineBandwidthInGbps: Double? = nil, maximumNetworkInterfaces: Int? = nil, networkCardIndex: Int? = nil, networkPerformance: String? = nil, peakBandwidthInGbps: Double? = nil) {
            self.baselineBandwidthInGbps = baselineBandwidthInGbps
            self.maximumNetworkInterfaces = maximumNetworkInterfaces
            self.networkCardIndex = networkCardIndex
            self.networkPerformance = networkPerformance
            self.peakBandwidthInGbps = peakBandwidthInGbps
        }

        private enum CodingKeys: String, CodingKey {
            case baselineBandwidthInGbps = "baselineBandwidthInGbps"
            case maximumNetworkInterfaces = "maximumNetworkInterfaces"
            case networkCardIndex = "networkCardIndex"
            case networkPerformance = "networkPerformance"
            case peakBandwidthInGbps = "peakBandwidthInGbps"
        }
    }

    public struct NetworkInfo: AWSDecodableShape {
        public struct _NetworkCardsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The index of the default network card, starting at 0.
        public let defaultNetworkCardIndex: Int?
        /// Describes the Elastic Fabric Adapters for the instance type.
        public let efaInfo: EfaInfo?
        /// Indicates whether Elastic Fabric Adapter (EFA) is supported.
        public let efaSupported: Bool?
        /// Indicates whether the instance type supports ENA Express. ENA Express uses Amazon Web Services Scalable  Reliable Datagram (SRD) technology to increase the maximum bandwidth used per stream and  minimize tail latency of network traffic between EC2 instances.
        public let enaSrdSupported: Bool?
        /// Indicates whether Elastic Network Adapter (ENA) is supported.
        public let enaSupport: EnaSupport?
        /// Indicates whether the instance type automatically encrypts in-transit traffic between instances.
        public let encryptionInTransitSupported: Bool?
        /// The maximum number of IPv4 addresses per network interface.
        public let ipv4AddressesPerInterface: Int?
        /// The maximum number of IPv6 addresses per network interface.
        public let ipv6AddressesPerInterface: Int?
        /// Indicates whether IPv6 is supported.
        public let ipv6Supported: Bool?
        /// The maximum number of physical network cards that can be allocated to the instance.
        public let maximumNetworkCards: Int?
        /// The maximum number of network interfaces for the instance type.
        public let maximumNetworkInterfaces: Int?
        /// Describes the network cards for the instance type.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkCardsEncoding, NetworkCardInfo>>
        public var networkCards: [NetworkCardInfo]?
        /// The network performance.
        public let networkPerformance: String?

        public init(defaultNetworkCardIndex: Int? = nil, efaInfo: EfaInfo? = nil, efaSupported: Bool? = nil, enaSrdSupported: Bool? = nil, enaSupport: EnaSupport? = nil, encryptionInTransitSupported: Bool? = nil, ipv4AddressesPerInterface: Int? = nil, ipv6AddressesPerInterface: Int? = nil, ipv6Supported: Bool? = nil, maximumNetworkCards: Int? = nil, maximumNetworkInterfaces: Int? = nil, networkCards: [NetworkCardInfo]? = nil, networkPerformance: String? = nil) {
            self.defaultNetworkCardIndex = defaultNetworkCardIndex
            self.efaInfo = efaInfo
            self.efaSupported = efaSupported
            self.enaSrdSupported = enaSrdSupported
            self.enaSupport = enaSupport
            self.encryptionInTransitSupported = encryptionInTransitSupported
            self.ipv4AddressesPerInterface = ipv4AddressesPerInterface
            self.ipv6AddressesPerInterface = ipv6AddressesPerInterface
            self.ipv6Supported = ipv6Supported
            self.maximumNetworkCards = maximumNetworkCards
            self.maximumNetworkInterfaces = maximumNetworkInterfaces
            self.networkCards = networkCards
            self.networkPerformance = networkPerformance
        }

        private enum CodingKeys: String, CodingKey {
            case defaultNetworkCardIndex = "defaultNetworkCardIndex"
            case efaInfo = "efaInfo"
            case efaSupported = "efaSupported"
            case enaSrdSupported = "enaSrdSupported"
            case enaSupport = "enaSupport"
            case encryptionInTransitSupported = "encryptionInTransitSupported"
            case ipv4AddressesPerInterface = "ipv4AddressesPerInterface"
            case ipv6AddressesPerInterface = "ipv6AddressesPerInterface"
            case ipv6Supported = "ipv6Supported"
            case maximumNetworkCards = "maximumNetworkCards"
            case maximumNetworkInterfaces = "maximumNetworkInterfaces"
            case networkCards = "networkCards"
            case networkPerformance = "networkPerformance"
        }
    }

    public struct NetworkInsightsAccessScope: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The creation date.
        public let createdDate: Date?
        /// The Amazon Resource Name (ARN) of the Network Access Scope.
        public let networkInsightsAccessScopeArn: String?
        /// The ID of the Network Access Scope.
        public let networkInsightsAccessScopeId: String?
        /// The tags.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The last updated date.
        public let updatedDate: Date?

        public init(createdDate: Date? = nil, networkInsightsAccessScopeArn: String? = nil, networkInsightsAccessScopeId: String? = nil, tags: [Tag]? = nil, updatedDate: Date? = nil) {
            self.createdDate = createdDate
            self.networkInsightsAccessScopeArn = networkInsightsAccessScopeArn
            self.networkInsightsAccessScopeId = networkInsightsAccessScopeId
            self.tags = tags
            self.updatedDate = updatedDate
        }

        private enum CodingKeys: String, CodingKey {
            case createdDate = "createdDate"
            case networkInsightsAccessScopeArn = "networkInsightsAccessScopeArn"
            case networkInsightsAccessScopeId = "networkInsightsAccessScopeId"
            case tags = "tagSet"
            case updatedDate = "updatedDate"
        }
    }

    public struct NetworkInsightsAccessScopeAnalysis: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The number of network interfaces analyzed.
        public let analyzedEniCount: Int?
        /// The analysis end date.
        public let endDate: Date?
        /// Indicates whether there are findings.
        public let findingsFound: FindingsFound?
        /// The Amazon Resource Name (ARN) of the Network Access Scope analysis.
        public let networkInsightsAccessScopeAnalysisArn: String?
        /// The ID of the Network Access Scope analysis.
        public let networkInsightsAccessScopeAnalysisId: String?
        /// The ID of the Network Access Scope.
        public let networkInsightsAccessScopeId: String?
        /// The analysis start date.
        public let startDate: Date?
        /// The status.
        public let status: AnalysisStatus?
        /// The status message.
        public let statusMessage: String?
        /// The tags.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The warning message.
        public let warningMessage: String?

        public init(analyzedEniCount: Int? = nil, endDate: Date? = nil, findingsFound: FindingsFound? = nil, networkInsightsAccessScopeAnalysisArn: String? = nil, networkInsightsAccessScopeAnalysisId: String? = nil, networkInsightsAccessScopeId: String? = nil, startDate: Date? = nil, status: AnalysisStatus? = nil, statusMessage: String? = nil, tags: [Tag]? = nil, warningMessage: String? = nil) {
            self.analyzedEniCount = analyzedEniCount
            self.endDate = endDate
            self.findingsFound = findingsFound
            self.networkInsightsAccessScopeAnalysisArn = networkInsightsAccessScopeAnalysisArn
            self.networkInsightsAccessScopeAnalysisId = networkInsightsAccessScopeAnalysisId
            self.networkInsightsAccessScopeId = networkInsightsAccessScopeId
            self.startDate = startDate
            self.status = status
            self.statusMessage = statusMessage
            self.tags = tags
            self.warningMessage = warningMessage
        }

        private enum CodingKeys: String, CodingKey {
            case analyzedEniCount = "analyzedEniCount"
            case endDate = "endDate"
            case findingsFound = "findingsFound"
            case networkInsightsAccessScopeAnalysisArn = "networkInsightsAccessScopeAnalysisArn"
            case networkInsightsAccessScopeAnalysisId = "networkInsightsAccessScopeAnalysisId"
            case networkInsightsAccessScopeId = "networkInsightsAccessScopeId"
            case startDate = "startDate"
            case status = "status"
            case statusMessage = "statusMessage"
            case tags = "tagSet"
            case warningMessage = "warningMessage"
        }
    }

    public struct NetworkInsightsAccessScopeContent: AWSDecodableShape {
        public struct _ExcludePathsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _MatchPathsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The paths to exclude.
        @OptionalCustomCoding<EC2ArrayCoder<_ExcludePathsEncoding, AccessScopePath>>
        public var excludePaths: [AccessScopePath]?
        /// The paths to match.
        @OptionalCustomCoding<EC2ArrayCoder<_MatchPathsEncoding, AccessScopePath>>
        public var matchPaths: [AccessScopePath]?
        /// The ID of the Network Access Scope.
        public let networkInsightsAccessScopeId: String?

        public init(excludePaths: [AccessScopePath]? = nil, matchPaths: [AccessScopePath]? = nil, networkInsightsAccessScopeId: String? = nil) {
            self.excludePaths = excludePaths
            self.matchPaths = matchPaths
            self.networkInsightsAccessScopeId = networkInsightsAccessScopeId
        }

        private enum CodingKeys: String, CodingKey {
            case excludePaths = "excludePathSet"
            case matchPaths = "matchPathSet"
            case networkInsightsAccessScopeId = "networkInsightsAccessScopeId"
        }
    }

    public struct NetworkInsightsAnalysis: AWSDecodableShape {
        public struct _AdditionalAccountsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _AlternatePathHintsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ExplanationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _FilterInArnsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ForwardPathComponentsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ReturnPathComponentsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SuggestedAccountsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The member accounts that contain resources that the path can traverse.
        @OptionalCustomCoding<EC2ArrayCoder<_AdditionalAccountsEncoding, String>>
        public var additionalAccounts: [String]?
        /// Potential intermediate components.
        @OptionalCustomCoding<EC2ArrayCoder<_AlternatePathHintsEncoding, AlternatePathHint>>
        public var alternatePathHints: [AlternatePathHint]?
        /// The explanations. For more information, see Reachability Analyzer explanation codes.
        @OptionalCustomCoding<EC2ArrayCoder<_ExplanationsEncoding, Explanation>>
        public var explanations: [Explanation]?
        /// The Amazon Resource Names (ARN) of the resources that the path must traverse.
        @OptionalCustomCoding<EC2ArrayCoder<_FilterInArnsEncoding, String>>
        public var filterInArns: [String]?
        /// The components in the path from source to destination.
        @OptionalCustomCoding<EC2ArrayCoder<_ForwardPathComponentsEncoding, PathComponent>>
        public var forwardPathComponents: [PathComponent]?
        /// The Amazon Resource Name (ARN) of the network insights analysis.
        public let networkInsightsAnalysisArn: String?
        /// The ID of the network insights analysis.
        public let networkInsightsAnalysisId: String?
        /// The ID of the path.
        public let networkInsightsPathId: String?
        /// Indicates whether the destination is reachable from the source.
        public let networkPathFound: Bool?
        /// The components in the path from destination to source.
        @OptionalCustomCoding<EC2ArrayCoder<_ReturnPathComponentsEncoding, PathComponent>>
        public var returnPathComponents: [PathComponent]?
        /// The time the analysis started.
        public let startDate: Date?
        /// The status of the network insights analysis.
        public let status: AnalysisStatus?
        /// The status message, if the status is failed.
        public let statusMessage: String?
        /// Potential intermediate accounts.
        @OptionalCustomCoding<EC2ArrayCoder<_SuggestedAccountsEncoding, String>>
        public var suggestedAccounts: [String]?
        /// The tags.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The warning message.
        public let warningMessage: String?

        public init(additionalAccounts: [String]? = nil, alternatePathHints: [AlternatePathHint]? = nil, explanations: [Explanation]? = nil, filterInArns: [String]? = nil, forwardPathComponents: [PathComponent]? = nil, networkInsightsAnalysisArn: String? = nil, networkInsightsAnalysisId: String? = nil, networkInsightsPathId: String? = nil, networkPathFound: Bool? = nil, returnPathComponents: [PathComponent]? = nil, startDate: Date? = nil, status: AnalysisStatus? = nil, statusMessage: String? = nil, suggestedAccounts: [String]? = nil, tags: [Tag]? = nil, warningMessage: String? = nil) {
            self.additionalAccounts = additionalAccounts
            self.alternatePathHints = alternatePathHints
            self.explanations = explanations
            self.filterInArns = filterInArns
            self.forwardPathComponents = forwardPathComponents
            self.networkInsightsAnalysisArn = networkInsightsAnalysisArn
            self.networkInsightsAnalysisId = networkInsightsAnalysisId
            self.networkInsightsPathId = networkInsightsPathId
            self.networkPathFound = networkPathFound
            self.returnPathComponents = returnPathComponents
            self.startDate = startDate
            self.status = status
            self.statusMessage = statusMessage
            self.suggestedAccounts = suggestedAccounts
            self.tags = tags
            self.warningMessage = warningMessage
        }

        private enum CodingKeys: String, CodingKey {
            case additionalAccounts = "additionalAccountSet"
            case alternatePathHints = "alternatePathHintSet"
            case explanations = "explanationSet"
            case filterInArns = "filterInArnSet"
            case forwardPathComponents = "forwardPathComponentSet"
            case networkInsightsAnalysisArn = "networkInsightsAnalysisArn"
            case networkInsightsAnalysisId = "networkInsightsAnalysisId"
            case networkInsightsPathId = "networkInsightsPathId"
            case networkPathFound = "networkPathFound"
            case returnPathComponents = "returnPathComponentSet"
            case startDate = "startDate"
            case status = "status"
            case statusMessage = "statusMessage"
            case suggestedAccounts = "suggestedAccountSet"
            case tags = "tagSet"
            case warningMessage = "warningMessage"
        }
    }

    public struct NetworkInsightsPath: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The time stamp when the path was created.
        public let createdDate: Date?
        /// The ID of the destination.
        public let destination: String?
        /// The Amazon Resource Name (ARN) of the destination.
        public let destinationArn: String?
        /// The IP address of the destination.
        public let destinationIp: String?
        /// The destination port.
        public let destinationPort: Int?
        /// Scopes the analysis to network paths that match specific filters at the destination.
        public let filterAtDestination: PathFilter?
        /// Scopes the analysis to network paths that match specific filters at the source.
        public let filterAtSource: PathFilter?
        /// The Amazon Resource Name (ARN) of the path.
        public let networkInsightsPathArn: String?
        /// The ID of the path.
        public let networkInsightsPathId: String?
        /// The protocol.
        public let `protocol`: `Protocol`?
        /// The ID of the source.
        public let source: String?
        /// The Amazon Resource Name (ARN) of the source.
        public let sourceArn: String?
        /// The IP address of the source.
        public let sourceIp: String?
        /// The tags associated with the path.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(createdDate: Date? = nil, destination: String? = nil, destinationArn: String? = nil, destinationIp: String? = nil, destinationPort: Int? = nil, filterAtDestination: PathFilter? = nil, filterAtSource: PathFilter? = nil, networkInsightsPathArn: String? = nil, networkInsightsPathId: String? = nil, protocol: `Protocol`? = nil, source: String? = nil, sourceArn: String? = nil, sourceIp: String? = nil, tags: [Tag]? = nil) {
            self.createdDate = createdDate
            self.destination = destination
            self.destinationArn = destinationArn
            self.destinationIp = destinationIp
            self.destinationPort = destinationPort
            self.filterAtDestination = filterAtDestination
            self.filterAtSource = filterAtSource
            self.networkInsightsPathArn = networkInsightsPathArn
            self.networkInsightsPathId = networkInsightsPathId
            self.`protocol` = `protocol`
            self.source = source
            self.sourceArn = sourceArn
            self.sourceIp = sourceIp
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case createdDate = "createdDate"
            case destination = "destination"
            case destinationArn = "destinationArn"
            case destinationIp = "destinationIp"
            case destinationPort = "destinationPort"
            case filterAtDestination = "filterAtDestination"
            case filterAtSource = "filterAtSource"
            case networkInsightsPathArn = "networkInsightsPathArn"
            case networkInsightsPathId = "networkInsightsPathId"
            case `protocol` = "protocol"
            case source = "source"
            case sourceArn = "sourceArn"
            case sourceIp = "sourceIp"
            case tags = "tagSet"
        }
    }

    public struct NetworkInterface: AWSDecodableShape {
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv4PrefixesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv6AddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv6PrefixesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PrivateIpAddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The association information for an Elastic IP address (IPv4) associated with the network interface.
        public let association: NetworkInterfaceAssociation?
        /// The network interface attachment.
        public let attachment: NetworkInterfaceAttachment?
        /// The Availability Zone.
        public let availabilityZone: String?
        /// A security group connection tracking configuration that enables you to set the timeout for connection tracking on an Elastic network interface. For more information, see Connection tracking timeouts in the Amazon Elastic Compute Cloud User Guide.
        public let connectionTrackingConfiguration: ConnectionTrackingConfiguration?
        /// Indicates whether a network interface with an IPv6 address is unreachable from the  public internet. If the value is true, inbound traffic from the internet  is dropped and you cannot assign an elastic IP address to the network interface. The  network interface is reachable from peered VPCs and resources connected through a  transit gateway, including on-premises networks.
        public let denyAllIgwTraffic: Bool?
        /// A description.
        public let description: String?
        /// Any security groups for the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_GroupsEncoding, GroupIdentifier>>
        public var groups: [GroupIdentifier]?
        /// The type of network interface.
        public let interfaceType: NetworkInterfaceType?
        /// The IPv4 prefixes that are assigned to the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv4PrefixesEncoding, Ipv4PrefixSpecification>>
        public var ipv4Prefixes: [Ipv4PrefixSpecification]?
        /// The IPv6 globally unique address associated with the network interface.
        public let ipv6Address: String?
        /// The IPv6 addresses associated with the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv6AddressesEncoding, NetworkInterfaceIpv6Address>>
        public var ipv6Addresses: [NetworkInterfaceIpv6Address]?
        /// Indicates whether this is an IPv6 only network interface.
        public let ipv6Native: Bool?
        /// The IPv6 prefixes that are assigned to the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv6PrefixesEncoding, Ipv6PrefixSpecification>>
        public var ipv6Prefixes: [Ipv6PrefixSpecification]?
        /// The MAC address.
        public let macAddress: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// The Amazon Web Services account ID of the owner of the network interface.
        public let ownerId: String?
        /// The private DNS name.
        public let privateDnsName: String?
        /// The IPv4 address of the network interface within the subnet.
        public let privateIpAddress: String?
        /// The private IPv4 addresses associated with the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_PrivateIpAddressesEncoding, NetworkInterfacePrivateIpAddress>>
        public var privateIpAddresses: [NetworkInterfacePrivateIpAddress]?
        /// The alias or Amazon Web Services account ID of the principal or service that created the network interface.
        public let requesterId: String?
        /// Indicates whether the network interface is being managed by Amazon Web Services.
        public let requesterManaged: Bool?
        /// Indicates whether source/destination checking is enabled.
        public let sourceDestCheck: Bool?
        /// The status of the network interface.
        public let status: NetworkInterfaceStatus?
        /// The ID of the subnet.
        public let subnetId: String?
        /// Any tags assigned to the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSetEncoding, Tag>>
        public var tagSet: [Tag]?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(association: NetworkInterfaceAssociation? = nil, attachment: NetworkInterfaceAttachment? = nil, availabilityZone: String? = nil, connectionTrackingConfiguration: ConnectionTrackingConfiguration? = nil, denyAllIgwTraffic: Bool? = nil, description: String? = nil, groups: [GroupIdentifier]? = nil, interfaceType: NetworkInterfaceType? = nil, ipv4Prefixes: [Ipv4PrefixSpecification]? = nil, ipv6Address: String? = nil, ipv6Addresses: [NetworkInterfaceIpv6Address]? = nil, ipv6Native: Bool? = nil, ipv6Prefixes: [Ipv6PrefixSpecification]? = nil, macAddress: String? = nil, networkInterfaceId: String? = nil, outpostArn: String? = nil, ownerId: String? = nil, privateDnsName: String? = nil, privateIpAddress: String? = nil, privateIpAddresses: [NetworkInterfacePrivateIpAddress]? = nil, requesterId: String? = nil, requesterManaged: Bool? = nil, sourceDestCheck: Bool? = nil, status: NetworkInterfaceStatus? = nil, subnetId: String? = nil, tagSet: [Tag]? = nil, vpcId: String? = nil) {
            self.association = association
            self.attachment = attachment
            self.availabilityZone = availabilityZone
            self.connectionTrackingConfiguration = connectionTrackingConfiguration
            self.denyAllIgwTraffic = denyAllIgwTraffic
            self.description = description
            self.groups = groups
            self.interfaceType = interfaceType
            self.ipv4Prefixes = ipv4Prefixes
            self.ipv6Address = ipv6Address
            self.ipv6Addresses = ipv6Addresses
            self.ipv6Native = ipv6Native
            self.ipv6Prefixes = ipv6Prefixes
            self.macAddress = macAddress
            self.networkInterfaceId = networkInterfaceId
            self.outpostArn = outpostArn
            self.ownerId = ownerId
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.requesterId = requesterId
            self.requesterManaged = requesterManaged
            self.sourceDestCheck = sourceDestCheck
            self.status = status
            self.subnetId = subnetId
            self.tagSet = tagSet
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
            case attachment = "attachment"
            case availabilityZone = "availabilityZone"
            case connectionTrackingConfiguration = "connectionTrackingConfiguration"
            case denyAllIgwTraffic = "denyAllIgwTraffic"
            case description = "description"
            case groups = "groupSet"
            case interfaceType = "interfaceType"
            case ipv4Prefixes = "ipv4PrefixSet"
            case ipv6Address = "ipv6Address"
            case ipv6Addresses = "ipv6AddressesSet"
            case ipv6Native = "ipv6Native"
            case ipv6Prefixes = "ipv6PrefixSet"
            case macAddress = "macAddress"
            case networkInterfaceId = "networkInterfaceId"
            case outpostArn = "outpostArn"
            case ownerId = "ownerId"
            case privateDnsName = "privateDnsName"
            case privateIpAddress = "privateIpAddress"
            case privateIpAddresses = "privateIpAddressesSet"
            case requesterId = "requesterId"
            case requesterManaged = "requesterManaged"
            case sourceDestCheck = "sourceDestCheck"
            case status = "status"
            case subnetId = "subnetId"
            case tagSet = "tagSet"
            case vpcId = "vpcId"
        }
    }

    public struct NetworkInterfaceAssociation: AWSDecodableShape {
        /// The allocation ID.
        public let allocationId: String?
        /// The association ID.
        public let associationId: String?
        /// The carrier IP address associated with the network interface. This option is only available when the network interface is in a subnet which is associated with a Wavelength Zone.
        public let carrierIp: String?
        /// The customer-owned IP address associated with the network interface.
        public let customerOwnedIp: String?
        /// The ID of the Elastic IP address owner.
        public let ipOwnerId: String?
        /// The public DNS name.
        public let publicDnsName: String?
        /// The address of the Elastic IP address bound to the network interface.
        public let publicIp: String?

        public init(allocationId: String? = nil, associationId: String? = nil, carrierIp: String? = nil, customerOwnedIp: String? = nil, ipOwnerId: String? = nil, publicDnsName: String? = nil, publicIp: String? = nil) {
            self.allocationId = allocationId
            self.associationId = associationId
            self.carrierIp = carrierIp
            self.customerOwnedIp = customerOwnedIp
            self.ipOwnerId = ipOwnerId
            self.publicDnsName = publicDnsName
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "allocationId"
            case associationId = "associationId"
            case carrierIp = "carrierIp"
            case customerOwnedIp = "customerOwnedIp"
            case ipOwnerId = "ipOwnerId"
            case publicDnsName = "publicDnsName"
            case publicIp = "publicIp"
        }
    }

    public struct NetworkInterfaceAttachment: AWSDecodableShape {
        /// The ID of the network interface attachment.
        public let attachmentId: String?
        /// The timestamp indicating when the attachment initiated.
        public let attachTime: Date?
        /// Indicates whether the network interface is deleted when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// The device index of the network interface attachment on the instance.
        public let deviceIndex: Int?
        /// Configures ENA Express for the network interface that this action attaches to the instance.
        public let enaSrdSpecification: AttachmentEnaSrdSpecification?
        /// The ID of the instance.
        public let instanceId: String?
        /// The Amazon Web Services account ID of the owner of the instance.
        public let instanceOwnerId: String?
        /// The index of the network card.
        public let networkCardIndex: Int?
        /// The attachment state.
        public let status: AttachmentStatus?

        public init(attachmentId: String? = nil, attachTime: Date? = nil, deleteOnTermination: Bool? = nil, deviceIndex: Int? = nil, enaSrdSpecification: AttachmentEnaSrdSpecification? = nil, instanceId: String? = nil, instanceOwnerId: String? = nil, networkCardIndex: Int? = nil, status: AttachmentStatus? = nil) {
            self.attachmentId = attachmentId
            self.attachTime = attachTime
            self.deleteOnTermination = deleteOnTermination
            self.deviceIndex = deviceIndex
            self.enaSrdSpecification = enaSrdSpecification
            self.instanceId = instanceId
            self.instanceOwnerId = instanceOwnerId
            self.networkCardIndex = networkCardIndex
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentId = "attachmentId"
            case attachTime = "attachTime"
            case deleteOnTermination = "deleteOnTermination"
            case deviceIndex = "deviceIndex"
            case enaSrdSpecification = "enaSrdSpecification"
            case instanceId = "instanceId"
            case instanceOwnerId = "instanceOwnerId"
            case networkCardIndex = "networkCardIndex"
            case status = "status"
        }
    }

    public struct NetworkInterfaceAttachmentChanges: AWSEncodableShape {
        /// The ID of the network interface attachment.
        public let attachmentId: String?
        /// Indicates whether the network interface is deleted when the instance is terminated.
        public let deleteOnTermination: Bool?

        public init(attachmentId: String? = nil, deleteOnTermination: Bool? = nil) {
            self.attachmentId = attachmentId
            self.deleteOnTermination = deleteOnTermination
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentId = "attachmentId"
            case deleteOnTermination = "deleteOnTermination"
        }
    }

    public struct NetworkInterfaceCount: AWSEncodableShape & AWSDecodableShape {
        /// The maximum number of network interfaces. If this parameter is not specified, there is no maximum limit.
        public let max: Int?
        /// The minimum number of network interfaces. If this parameter is not specified, there is no minimum limit.
        public let min: Int?

        public init(max: Int? = nil, min: Int? = nil) {
            self.max = max
            self.min = min
        }

        private enum CodingKeys: String, CodingKey {
            case max = "max"
            case min = "min"
        }
    }

    public struct NetworkInterfaceCountRequest: AWSEncodableShape {
        /// The maximum number of network interfaces. To specify no maximum limit, omit this parameter.
        public let max: Int?
        /// The minimum number of network interfaces. To specify no minimum limit, omit this parameter.
        public let min: Int?

        public init(max: Int? = nil, min: Int? = nil) {
            self.max = max
            self.min = min
        }

        private enum CodingKeys: String, CodingKey {
            case max = "Max"
            case min = "Min"
        }
    }

    public struct NetworkInterfaceIpv6Address: AWSDecodableShape {
        /// The IPv6 address.
        public let ipv6Address: String?
        /// Determines if an IPv6 address associated with a network interface is the primary IPv6 address. When you enable an IPv6 GUA address to be a primary IPv6, the first IPv6 GUA will be made the primary IPv6 address until the instance is terminated or the network interface is detached. For more information, see ModifyNetworkInterfaceAttribute.
        public let isPrimaryIpv6: Bool?

        public init(ipv6Address: String? = nil, isPrimaryIpv6: Bool? = nil) {
            self.ipv6Address = ipv6Address
            self.isPrimaryIpv6 = isPrimaryIpv6
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Address = "ipv6Address"
            case isPrimaryIpv6 = "isPrimaryIpv6"
        }
    }

    public struct NetworkInterfacePermission: AWSDecodableShape {
        /// The Amazon Web Services account ID.
        public let awsAccountId: String?
        /// The Amazon Web Service.
        public let awsService: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The ID of the network interface permission.
        public let networkInterfacePermissionId: String?
        /// The type of permission.
        public let permission: InterfacePermissionType?
        /// Information about the state of the permission.
        public let permissionState: NetworkInterfacePermissionState?

        public init(awsAccountId: String? = nil, awsService: String? = nil, networkInterfaceId: String? = nil, networkInterfacePermissionId: String? = nil, permission: InterfacePermissionType? = nil, permissionState: NetworkInterfacePermissionState? = nil) {
            self.awsAccountId = awsAccountId
            self.awsService = awsService
            self.networkInterfaceId = networkInterfaceId
            self.networkInterfacePermissionId = networkInterfacePermissionId
            self.permission = permission
            self.permissionState = permissionState
        }

        private enum CodingKeys: String, CodingKey {
            case awsAccountId = "awsAccountId"
            case awsService = "awsService"
            case networkInterfaceId = "networkInterfaceId"
            case networkInterfacePermissionId = "networkInterfacePermissionId"
            case permission = "permission"
            case permissionState = "permissionState"
        }
    }

    public struct NetworkInterfacePermissionState: AWSDecodableShape {
        /// The state of the permission.
        public let state: NetworkInterfacePermissionStateCode?
        /// A status message, if applicable.
        public let statusMessage: String?

        public init(state: NetworkInterfacePermissionStateCode? = nil, statusMessage: String? = nil) {
            self.state = state
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case statusMessage = "statusMessage"
        }
    }

    public struct NetworkInterfacePrivateIpAddress: AWSDecodableShape {
        /// The association information for an Elastic IP address (IPv4) associated with the network interface.
        public let association: NetworkInterfaceAssociation?
        /// Indicates whether this IPv4 address is the primary private IPv4 address of the network interface.
        public let primary: Bool?
        /// The private DNS name.
        public let privateDnsName: String?
        /// The private IPv4 address.
        public let privateIpAddress: String?

        public init(association: NetworkInterfaceAssociation? = nil, primary: Bool? = nil, privateDnsName: String? = nil, privateIpAddress: String? = nil) {
            self.association = association
            self.primary = primary
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
            case primary = "primary"
            case privateDnsName = "privateDnsName"
            case privateIpAddress = "privateIpAddress"
        }
    }

    public struct NeuronDeviceCoreInfo: AWSDecodableShape {
        /// The number of cores available to the neuron accelerator.
        public let count: Int?
        /// The version of the neuron accelerator.
        public let version: Int?

        public init(count: Int? = nil, version: Int? = nil) {
            self.count = count
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case count = "count"
            case version = "version"
        }
    }

    public struct NeuronDeviceInfo: AWSDecodableShape {
        /// Describes the cores available to each neuron accelerator.
        public let coreInfo: NeuronDeviceCoreInfo?
        /// The number of neuron accelerators for the instance type.
        public let count: Int?
        /// Describes the memory available to each neuron accelerator.
        public let memoryInfo: NeuronDeviceMemoryInfo?
        /// The name of the neuron accelerator.
        public let name: String?

        public init(coreInfo: NeuronDeviceCoreInfo? = nil, count: Int? = nil, memoryInfo: NeuronDeviceMemoryInfo? = nil, name: String? = nil) {
            self.coreInfo = coreInfo
            self.count = count
            self.memoryInfo = memoryInfo
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case coreInfo = "coreInfo"
            case count = "count"
            case memoryInfo = "memoryInfo"
            case name = "name"
        }
    }

    public struct NeuronDeviceMemoryInfo: AWSDecodableShape {
        /// The size of the memory available to the neuron accelerator, in MiB.
        public let sizeInMiB: Int?

        public init(sizeInMiB: Int? = nil) {
            self.sizeInMiB = sizeInMiB
        }

        private enum CodingKeys: String, CodingKey {
            case sizeInMiB = "sizeInMiB"
        }
    }

    public struct NeuronInfo: AWSDecodableShape {
        public struct _NeuronDevicesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Describes the neuron accelerators for the instance type.
        @OptionalCustomCoding<EC2ArrayCoder<_NeuronDevicesEncoding, NeuronDeviceInfo>>
        public var neuronDevices: [NeuronDeviceInfo]?
        /// The total size of the memory for the neuron accelerators for the instance type, in MiB.
        public let totalNeuronDeviceMemoryInMiB: Int?

        public init(neuronDevices: [NeuronDeviceInfo]? = nil, totalNeuronDeviceMemoryInMiB: Int? = nil) {
            self.neuronDevices = neuronDevices
            self.totalNeuronDeviceMemoryInMiB = totalNeuronDeviceMemoryInMiB
        }

        private enum CodingKeys: String, CodingKey {
            case neuronDevices = "neuronDevices"
            case totalNeuronDeviceMemoryInMiB = "totalNeuronDeviceMemoryInMiB"
        }
    }

    public struct NewDhcpConfiguration: AWSEncodableShape {
        public struct _ValuesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The name of a DHCP option.
        public let key: String?
        /// The values for the DHCP option.
        @OptionalCustomCoding<EC2ArrayCoder<_ValuesEncoding, String>>
        public var values: [String]?

        public init(key: String? = nil, values: [String]? = nil) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case values = "Value"
        }
    }

    public struct NitroTpmInfo: AWSDecodableShape {
        public struct _SupportedVersionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates the supported NitroTPM versions.
        @OptionalCustomCoding<EC2ArrayCoder<_SupportedVersionsEncoding, String>>
        public var supportedVersions: [String]?

        public init(supportedVersions: [String]? = nil) {
            self.supportedVersions = supportedVersions
        }

        private enum CodingKeys: String, CodingKey {
            case supportedVersions = "supportedVersions"
        }
    }

    public struct OidcOptions: AWSDecodableShape {
        /// The OIDC authorization endpoint.
        public let authorizationEndpoint: String?
        /// The client identifier.
        public let clientId: String?
        /// The client secret.
        public let clientSecret: String?
        /// The OIDC issuer.
        public let issuer: String?
        /// The OpenID Connect (OIDC) scope specified.
        public let scope: String?
        /// The OIDC token endpoint.
        public let tokenEndpoint: String?
        /// The OIDC user info endpoint.
        public let userInfoEndpoint: String?

        public init(authorizationEndpoint: String? = nil, clientId: String? = nil, clientSecret: String? = nil, issuer: String? = nil, scope: String? = nil, tokenEndpoint: String? = nil, userInfoEndpoint: String? = nil) {
            self.authorizationEndpoint = authorizationEndpoint
            self.clientId = clientId
            self.clientSecret = clientSecret
            self.issuer = issuer
            self.scope = scope
            self.tokenEndpoint = tokenEndpoint
            self.userInfoEndpoint = userInfoEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case authorizationEndpoint = "authorizationEndpoint"
            case clientId = "clientId"
            case clientSecret = "clientSecret"
            case issuer = "issuer"
            case scope = "scope"
            case tokenEndpoint = "tokenEndpoint"
            case userInfoEndpoint = "userInfoEndpoint"
        }
    }

    public struct OnDemandOptions: AWSDecodableShape {
        /// The strategy that determines the order of the launch template overrides to use in fulfilling On-Demand capacity.  lowest-price - EC2 Fleet uses price to determine the order, launching the lowest price first.  prioritized - EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first. Default: lowest-price
        public let allocationStrategy: FleetOnDemandAllocationStrategy?
        /// The strategy for using unused Capacity Reservations for fulfilling On-Demand capacity. Supported only for fleets of type instant.
        public let capacityReservationOptions: CapacityReservationOptions?
        /// The maximum amount per hour for On-Demand Instances that you're willing to pay.  If your fleet includes T instances that are configured as unlimited, and if their average CPU usage exceeds the baseline utilization, you will incur a charge for surplus credits. The maxTotalPrice does not account for surplus credits, and, if you use surplus credits, your final cost might be higher than what you specified for maxTotalPrice. For more information, see Surplus credits can incur charges in the EC2 User Guide.
        public let maxTotalPrice: String?
        /// The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances. Supported only for fleets of type instant. At least one of the following must be specified: SingleAvailabilityZone | SingleInstanceType
        public let minTargetCapacity: Int?
        /// Indicates that the fleet launches all On-Demand Instances into a single Availability Zone. Supported only for fleets of type instant.
        public let singleAvailabilityZone: Bool?
        /// Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet. Supported only for fleets of type instant.
        public let singleInstanceType: Bool?

        public init(allocationStrategy: FleetOnDemandAllocationStrategy? = nil, capacityReservationOptions: CapacityReservationOptions? = nil, maxTotalPrice: String? = nil, minTargetCapacity: Int? = nil, singleAvailabilityZone: Bool? = nil, singleInstanceType: Bool? = nil) {
            self.allocationStrategy = allocationStrategy
            self.capacityReservationOptions = capacityReservationOptions
            self.maxTotalPrice = maxTotalPrice
            self.minTargetCapacity = minTargetCapacity
            self.singleAvailabilityZone = singleAvailabilityZone
            self.singleInstanceType = singleInstanceType
        }

        private enum CodingKeys: String, CodingKey {
            case allocationStrategy = "allocationStrategy"
            case capacityReservationOptions = "capacityReservationOptions"
            case maxTotalPrice = "maxTotalPrice"
            case minTargetCapacity = "minTargetCapacity"
            case singleAvailabilityZone = "singleAvailabilityZone"
            case singleInstanceType = "singleInstanceType"
        }
    }

    public struct OnDemandOptionsRequest: AWSEncodableShape {
        /// The strategy that determines the order of the launch template overrides to use in fulfilling On-Demand capacity.  lowest-price - EC2 Fleet uses price to determine the order, launching the lowest price first.  prioritized - EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first. Default: lowest-price
        public let allocationStrategy: FleetOnDemandAllocationStrategy?
        /// The strategy for using unused Capacity Reservations for fulfilling On-Demand capacity. Supported only for fleets of type instant.
        public let capacityReservationOptions: CapacityReservationOptionsRequest?
        /// The maximum amount per hour for On-Demand Instances that you're willing to pay.  If your fleet includes T instances that are configured as unlimited, and if their average CPU usage exceeds the baseline utilization, you will incur a charge for surplus credits. The MaxTotalPrice does not account for surplus credits, and, if you use surplus credits, your final cost might be higher than what you specified for MaxTotalPrice. For more information, see Surplus credits can incur charges in the EC2 User Guide.
        public let maxTotalPrice: String?
        /// The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances. Supported only for fleets of type instant. At least one of the following must be specified: SingleAvailabilityZone | SingleInstanceType
        public let minTargetCapacity: Int?
        /// Indicates that the fleet launches all On-Demand Instances into a single Availability Zone. Supported only for fleets of type instant.
        public let singleAvailabilityZone: Bool?
        /// Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet. Supported only for fleets of type instant.
        public let singleInstanceType: Bool?

        public init(allocationStrategy: FleetOnDemandAllocationStrategy? = nil, capacityReservationOptions: CapacityReservationOptionsRequest? = nil, maxTotalPrice: String? = nil, minTargetCapacity: Int? = nil, singleAvailabilityZone: Bool? = nil, singleInstanceType: Bool? = nil) {
            self.allocationStrategy = allocationStrategy
            self.capacityReservationOptions = capacityReservationOptions
            self.maxTotalPrice = maxTotalPrice
            self.minTargetCapacity = minTargetCapacity
            self.singleAvailabilityZone = singleAvailabilityZone
            self.singleInstanceType = singleInstanceType
        }

        private enum CodingKeys: String, CodingKey {
            case allocationStrategy = "AllocationStrategy"
            case capacityReservationOptions = "CapacityReservationOptions"
            case maxTotalPrice = "MaxTotalPrice"
            case minTargetCapacity = "MinTargetCapacity"
            case singleAvailabilityZone = "SingleAvailabilityZone"
            case singleInstanceType = "SingleInstanceType"
        }
    }

    public struct PacketHeaderStatement: AWSDecodableShape {
        public struct _DestinationAddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _DestinationPortsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _DestinationPrefixListsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ProtocolsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SourceAddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SourcePortsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SourcePrefixListsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The destination addresses.
        @OptionalCustomCoding<EC2ArrayCoder<_DestinationAddressesEncoding, String>>
        public var destinationAddresses: [String]?
        /// The destination ports.
        @OptionalCustomCoding<EC2ArrayCoder<_DestinationPortsEncoding, String>>
        public var destinationPorts: [String]?
        /// The destination prefix lists.
        @OptionalCustomCoding<EC2ArrayCoder<_DestinationPrefixListsEncoding, String>>
        public var destinationPrefixLists: [String]?
        /// The protocols.
        @OptionalCustomCoding<EC2ArrayCoder<_ProtocolsEncoding, `Protocol`>>
        public var protocols: [`Protocol`]?
        /// The source addresses.
        @OptionalCustomCoding<EC2ArrayCoder<_SourceAddressesEncoding, String>>
        public var sourceAddresses: [String]?
        /// The source ports.
        @OptionalCustomCoding<EC2ArrayCoder<_SourcePortsEncoding, String>>
        public var sourcePorts: [String]?
        /// The source prefix lists.
        @OptionalCustomCoding<EC2ArrayCoder<_SourcePrefixListsEncoding, String>>
        public var sourcePrefixLists: [String]?

        public init(destinationAddresses: [String]? = nil, destinationPorts: [String]? = nil, destinationPrefixLists: [String]? = nil, protocols: [`Protocol`]? = nil, sourceAddresses: [String]? = nil, sourcePorts: [String]? = nil, sourcePrefixLists: [String]? = nil) {
            self.destinationAddresses = destinationAddresses
            self.destinationPorts = destinationPorts
            self.destinationPrefixLists = destinationPrefixLists
            self.protocols = protocols
            self.sourceAddresses = sourceAddresses
            self.sourcePorts = sourcePorts
            self.sourcePrefixLists = sourcePrefixLists
        }

        private enum CodingKeys: String, CodingKey {
            case destinationAddresses = "destinationAddressSet"
            case destinationPorts = "destinationPortSet"
            case destinationPrefixLists = "destinationPrefixListSet"
            case protocols = "protocolSet"
            case sourceAddresses = "sourceAddressSet"
            case sourcePorts = "sourcePortSet"
            case sourcePrefixLists = "sourcePrefixListSet"
        }
    }

    public struct PacketHeaderStatementRequest: AWSEncodableShape {
        public struct _DestinationAddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _DestinationPortsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _DestinationPrefixListsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ProtocolsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SourceAddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SourcePortsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SourcePrefixListsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The destination addresses.
        @OptionalCustomCoding<EC2ArrayCoder<_DestinationAddressesEncoding, String>>
        public var destinationAddresses: [String]?
        /// The destination ports.
        @OptionalCustomCoding<EC2ArrayCoder<_DestinationPortsEncoding, String>>
        public var destinationPorts: [String]?
        /// The destination prefix lists.
        @OptionalCustomCoding<EC2ArrayCoder<_DestinationPrefixListsEncoding, String>>
        public var destinationPrefixLists: [String]?
        /// The protocols.
        @OptionalCustomCoding<EC2ArrayCoder<_ProtocolsEncoding, `Protocol`>>
        public var protocols: [`Protocol`]?
        /// The source addresses.
        @OptionalCustomCoding<EC2ArrayCoder<_SourceAddressesEncoding, String>>
        public var sourceAddresses: [String]?
        /// The source ports.
        @OptionalCustomCoding<EC2ArrayCoder<_SourcePortsEncoding, String>>
        public var sourcePorts: [String]?
        /// The source prefix lists.
        @OptionalCustomCoding<EC2ArrayCoder<_SourcePrefixListsEncoding, String>>
        public var sourcePrefixLists: [String]?

        public init(destinationAddresses: [String]? = nil, destinationPorts: [String]? = nil, destinationPrefixLists: [String]? = nil, protocols: [`Protocol`]? = nil, sourceAddresses: [String]? = nil, sourcePorts: [String]? = nil, sourcePrefixLists: [String]? = nil) {
            self.destinationAddresses = destinationAddresses
            self.destinationPorts = destinationPorts
            self.destinationPrefixLists = destinationPrefixLists
            self.protocols = protocols
            self.sourceAddresses = sourceAddresses
            self.sourcePorts = sourcePorts
            self.sourcePrefixLists = sourcePrefixLists
        }

        private enum CodingKeys: String, CodingKey {
            case destinationAddresses = "DestinationAddress"
            case destinationPorts = "DestinationPort"
            case destinationPrefixLists = "DestinationPrefixList"
            case protocols = "Protocol"
            case sourceAddresses = "SourceAddress"
            case sourcePorts = "SourcePort"
            case sourcePrefixLists = "SourcePrefixList"
        }
    }

    public struct PathComponent: AWSDecodableShape {
        public struct _AdditionalDetailsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ExplanationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The network ACL rule.
        public let aclRule: AnalysisAclRule?
        /// The additional details.
        @OptionalCustomCoding<EC2ArrayCoder<_AdditionalDetailsEncoding, AdditionalDetail>>
        public var additionalDetails: [AdditionalDetail]?
        /// The resource to which the path component is attached.
        public let attachedTo: AnalysisComponent?
        /// The component.
        public let component: AnalysisComponent?
        /// The destination VPC.
        public let destinationVpc: AnalysisComponent?
        /// The load balancer listener.
        public let elasticLoadBalancerListener: AnalysisComponent?
        /// The explanation codes.
        @OptionalCustomCoding<EC2ArrayCoder<_ExplanationsEncoding, Explanation>>
        public var explanations: [Explanation]?
        /// The Network Firewall stateful rule.
        public let firewallStatefulRule: FirewallStatefulRule?
        /// The Network Firewall stateless rule.
        public let firewallStatelessRule: FirewallStatelessRule?
        /// The inbound header.
        public let inboundHeader: AnalysisPacketHeader?
        /// The outbound header.
        public let outboundHeader: AnalysisPacketHeader?
        /// The route table route.
        public let routeTableRoute: AnalysisRouteTableRoute?
        /// The security group rule.
        public let securityGroupRule: AnalysisSecurityGroupRule?
        /// The sequence number.
        public let sequenceNumber: Int?
        /// The name of the VPC endpoint service.
        public let serviceName: String?
        /// The source VPC.
        public let sourceVpc: AnalysisComponent?
        /// The subnet.
        public let subnet: AnalysisComponent?
        /// The transit gateway.
        public let transitGateway: AnalysisComponent?
        /// The route in a transit gateway route table.
        public let transitGatewayRouteTableRoute: TransitGatewayRouteTableRoute?
        /// The component VPC.
        public let vpc: AnalysisComponent?

        public init(aclRule: AnalysisAclRule? = nil, additionalDetails: [AdditionalDetail]? = nil, attachedTo: AnalysisComponent? = nil, component: AnalysisComponent? = nil, destinationVpc: AnalysisComponent? = nil, elasticLoadBalancerListener: AnalysisComponent? = nil, explanations: [Explanation]? = nil, firewallStatefulRule: FirewallStatefulRule? = nil, firewallStatelessRule: FirewallStatelessRule? = nil, inboundHeader: AnalysisPacketHeader? = nil, outboundHeader: AnalysisPacketHeader? = nil, routeTableRoute: AnalysisRouteTableRoute? = nil, securityGroupRule: AnalysisSecurityGroupRule? = nil, sequenceNumber: Int? = nil, serviceName: String? = nil, sourceVpc: AnalysisComponent? = nil, subnet: AnalysisComponent? = nil, transitGateway: AnalysisComponent? = nil, transitGatewayRouteTableRoute: TransitGatewayRouteTableRoute? = nil, vpc: AnalysisComponent? = nil) {
            self.aclRule = aclRule
            self.additionalDetails = additionalDetails
            self.attachedTo = attachedTo
            self.component = component
            self.destinationVpc = destinationVpc
            self.elasticLoadBalancerListener = elasticLoadBalancerListener
            self.explanations = explanations
            self.firewallStatefulRule = firewallStatefulRule
            self.firewallStatelessRule = firewallStatelessRule
            self.inboundHeader = inboundHeader
            self.outboundHeader = outboundHeader
            self.routeTableRoute = routeTableRoute
            self.securityGroupRule = securityGroupRule
            self.sequenceNumber = sequenceNumber
            self.serviceName = serviceName
            self.sourceVpc = sourceVpc
            self.subnet = subnet
            self.transitGateway = transitGateway
            self.transitGatewayRouteTableRoute = transitGatewayRouteTableRoute
            self.vpc = vpc
        }

        private enum CodingKeys: String, CodingKey {
            case aclRule = "aclRule"
            case additionalDetails = "additionalDetailSet"
            case attachedTo = "attachedTo"
            case component = "component"
            case destinationVpc = "destinationVpc"
            case elasticLoadBalancerListener = "elasticLoadBalancerListener"
            case explanations = "explanationSet"
            case firewallStatefulRule = "firewallStatefulRule"
            case firewallStatelessRule = "firewallStatelessRule"
            case inboundHeader = "inboundHeader"
            case outboundHeader = "outboundHeader"
            case routeTableRoute = "routeTableRoute"
            case securityGroupRule = "securityGroupRule"
            case sequenceNumber = "sequenceNumber"
            case serviceName = "serviceName"
            case sourceVpc = "sourceVpc"
            case subnet = "subnet"
            case transitGateway = "transitGateway"
            case transitGatewayRouteTableRoute = "transitGatewayRouteTableRoute"
            case vpc = "vpc"
        }
    }

    public struct PathFilter: AWSDecodableShape {
        /// The destination IPv4 address.
        public let destinationAddress: String?
        /// The destination port range.
        public let destinationPortRange: FilterPortRange?
        /// The source IPv4 address.
        public let sourceAddress: String?
        /// The source port range.
        public let sourcePortRange: FilterPortRange?

        public init(destinationAddress: String? = nil, destinationPortRange: FilterPortRange? = nil, sourceAddress: String? = nil, sourcePortRange: FilterPortRange? = nil) {
            self.destinationAddress = destinationAddress
            self.destinationPortRange = destinationPortRange
            self.sourceAddress = sourceAddress
            self.sourcePortRange = sourcePortRange
        }

        private enum CodingKeys: String, CodingKey {
            case destinationAddress = "destinationAddress"
            case destinationPortRange = "destinationPortRange"
            case sourceAddress = "sourceAddress"
            case sourcePortRange = "sourcePortRange"
        }
    }

    public struct PathRequestFilter: AWSEncodableShape {
        /// The destination IPv4 address.
        public let destinationAddress: String?
        /// The destination port range.
        public let destinationPortRange: RequestFilterPortRange?
        /// The source IPv4 address.
        public let sourceAddress: String?
        /// The source port range.
        public let sourcePortRange: RequestFilterPortRange?

        public init(destinationAddress: String? = nil, destinationPortRange: RequestFilterPortRange? = nil, sourceAddress: String? = nil, sourcePortRange: RequestFilterPortRange? = nil) {
            self.destinationAddress = destinationAddress
            self.destinationPortRange = destinationPortRange
            self.sourceAddress = sourceAddress
            self.sourcePortRange = sourcePortRange
        }

        public func validate(name: String) throws {
            try self.validate(self.destinationAddress, name: "destinationAddress", parent: name, max: 15)
            try self.validate(self.destinationAddress, name: "destinationAddress", parent: name, pattern: "^([0-9]{1,3}.){3}[0-9]{1,3}$")
            try self.destinationPortRange?.validate(name: "\(name).destinationPortRange")
            try self.validate(self.sourceAddress, name: "sourceAddress", parent: name, max: 15)
            try self.validate(self.sourceAddress, name: "sourceAddress", parent: name, pattern: "^([0-9]{1,3}.){3}[0-9]{1,3}$")
            try self.sourcePortRange?.validate(name: "\(name).sourcePortRange")
        }

        private enum CodingKeys: String, CodingKey {
            case destinationAddress = "DestinationAddress"
            case destinationPortRange = "DestinationPortRange"
            case sourceAddress = "SourceAddress"
            case sourcePortRange = "SourcePortRange"
        }
    }

    public struct PathStatement: AWSDecodableShape {
        /// The packet header statement.
        public let packetHeaderStatement: PacketHeaderStatement?
        /// The resource statement.
        public let resourceStatement: ResourceStatement?

        public init(packetHeaderStatement: PacketHeaderStatement? = nil, resourceStatement: ResourceStatement? = nil) {
            self.packetHeaderStatement = packetHeaderStatement
            self.resourceStatement = resourceStatement
        }

        private enum CodingKeys: String, CodingKey {
            case packetHeaderStatement = "packetHeaderStatement"
            case resourceStatement = "resourceStatement"
        }
    }

    public struct PathStatementRequest: AWSEncodableShape {
        /// The packet header statement.
        public let packetHeaderStatement: PacketHeaderStatementRequest?
        /// The resource statement.
        public let resourceStatement: ResourceStatementRequest?

        public init(packetHeaderStatement: PacketHeaderStatementRequest? = nil, resourceStatement: ResourceStatementRequest? = nil) {
            self.packetHeaderStatement = packetHeaderStatement
            self.resourceStatement = resourceStatement
        }

        private enum CodingKeys: String, CodingKey {
            case packetHeaderStatement = "PacketHeaderStatement"
            case resourceStatement = "ResourceStatement"
        }
    }

    public struct PciId: AWSDecodableShape {
        /// The ID of the device.
        public let deviceId: String?
        /// The ID of the subsystem.
        public let subsystemId: String?
        /// The ID of the vendor for the subsystem.
        public let subsystemVendorId: String?
        /// The ID of the vendor.
        public let vendorId: String?

        public init(deviceId: String? = nil, subsystemId: String? = nil, subsystemVendorId: String? = nil, vendorId: String? = nil) {
            self.deviceId = deviceId
            self.subsystemId = subsystemId
            self.subsystemVendorId = subsystemVendorId
            self.vendorId = vendorId
        }

        private enum CodingKeys: String, CodingKey {
            case deviceId = "DeviceId"
            case subsystemId = "SubsystemId"
            case subsystemVendorId = "SubsystemVendorId"
            case vendorId = "VendorId"
        }
    }

    public struct PeeringAttachmentStatus: AWSDecodableShape {
        /// The status code.
        public let code: String?
        /// The status message, if applicable.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct PeeringConnectionOptions: AWSDecodableShape {
        /// If true, the public DNS hostnames of instances in the specified VPC resolve to private IP addresses when queried from instances in the peer VPC.
        public let allowDnsResolutionFromRemoteVpc: Bool?
        /// Deprecated.
        public let allowEgressFromLocalClassicLinkToRemoteVpc: Bool?
        /// Deprecated.
        public let allowEgressFromLocalVpcToRemoteClassicLink: Bool?

        public init(allowDnsResolutionFromRemoteVpc: Bool? = nil, allowEgressFromLocalClassicLinkToRemoteVpc: Bool? = nil, allowEgressFromLocalVpcToRemoteClassicLink: Bool? = nil) {
            self.allowDnsResolutionFromRemoteVpc = allowDnsResolutionFromRemoteVpc
            self.allowEgressFromLocalClassicLinkToRemoteVpc = allowEgressFromLocalClassicLinkToRemoteVpc
            self.allowEgressFromLocalVpcToRemoteClassicLink = allowEgressFromLocalVpcToRemoteClassicLink
        }

        private enum CodingKeys: String, CodingKey {
            case allowDnsResolutionFromRemoteVpc = "allowDnsResolutionFromRemoteVpc"
            case allowEgressFromLocalClassicLinkToRemoteVpc = "allowEgressFromLocalClassicLinkToRemoteVpc"
            case allowEgressFromLocalVpcToRemoteClassicLink = "allowEgressFromLocalVpcToRemoteClassicLink"
        }
    }

    public struct PeeringConnectionOptionsRequest: AWSEncodableShape {
        /// If true, enables a local VPC to resolve public DNS hostnames to private IP addresses  when queried from instances in the peer VPC.
        public let allowDnsResolutionFromRemoteVpc: Bool?
        /// Deprecated.
        public let allowEgressFromLocalClassicLinkToRemoteVpc: Bool?
        /// Deprecated.
        public let allowEgressFromLocalVpcToRemoteClassicLink: Bool?

        public init(allowDnsResolutionFromRemoteVpc: Bool? = nil, allowEgressFromLocalClassicLinkToRemoteVpc: Bool? = nil, allowEgressFromLocalVpcToRemoteClassicLink: Bool? = nil) {
            self.allowDnsResolutionFromRemoteVpc = allowDnsResolutionFromRemoteVpc
            self.allowEgressFromLocalClassicLinkToRemoteVpc = allowEgressFromLocalClassicLinkToRemoteVpc
            self.allowEgressFromLocalVpcToRemoteClassicLink = allowEgressFromLocalVpcToRemoteClassicLink
        }

        private enum CodingKeys: String, CodingKey {
            case allowDnsResolutionFromRemoteVpc = "AllowDnsResolutionFromRemoteVpc"
            case allowEgressFromLocalClassicLinkToRemoteVpc = "AllowEgressFromLocalClassicLinkToRemoteVpc"
            case allowEgressFromLocalVpcToRemoteClassicLink = "AllowEgressFromLocalVpcToRemoteClassicLink"
        }
    }

    public struct PeeringTgwInfo: AWSDecodableShape {
        /// The ID of the core network where the transit gateway peer is located.
        public let coreNetworkId: String?
        /// The ID of the Amazon Web Services account that owns the transit gateway.
        public let ownerId: String?
        /// The Region of the transit gateway.
        public let region: String?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?

        public init(coreNetworkId: String? = nil, ownerId: String? = nil, region: String? = nil, transitGatewayId: String? = nil) {
            self.coreNetworkId = coreNetworkId
            self.ownerId = ownerId
            self.region = region
            self.transitGatewayId = transitGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case coreNetworkId = "coreNetworkId"
            case ownerId = "ownerId"
            case region = "region"
            case transitGatewayId = "transitGatewayId"
        }
    }

    public struct Phase1DHGroupNumbersListValue: AWSDecodableShape {
        /// The Diffie-Hellmann group number.
        public let value: Int?

        public init(value: Int? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct Phase1DHGroupNumbersRequestListValue: AWSEncodableShape {
        /// The Diffie-Hellmann group number.
        public let value: Int?

        public init(value: Int? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct Phase1EncryptionAlgorithmsListValue: AWSDecodableShape {
        /// The value for the encryption algorithm.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct Phase1EncryptionAlgorithmsRequestListValue: AWSEncodableShape {
        /// The value for the encryption algorithm.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct Phase1IntegrityAlgorithmsListValue: AWSDecodableShape {
        /// The value for the integrity algorithm.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct Phase1IntegrityAlgorithmsRequestListValue: AWSEncodableShape {
        /// The value for the integrity algorithm.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct Phase2DHGroupNumbersListValue: AWSDecodableShape {
        /// The Diffie-Hellmann group number.
        public let value: Int?

        public init(value: Int? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct Phase2DHGroupNumbersRequestListValue: AWSEncodableShape {
        /// The Diffie-Hellmann group number.
        public let value: Int?

        public init(value: Int? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct Phase2EncryptionAlgorithmsListValue: AWSDecodableShape {
        /// The encryption algorithm.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct Phase2EncryptionAlgorithmsRequestListValue: AWSEncodableShape {
        /// The encryption algorithm.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct Phase2IntegrityAlgorithmsListValue: AWSDecodableShape {
        /// The integrity algorithm.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct Phase2IntegrityAlgorithmsRequestListValue: AWSEncodableShape {
        /// The integrity algorithm.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct Placement: AWSEncodableShape & AWSDecodableShape {
        /// The affinity setting for the instance on the Dedicated Host. This parameter is not supported for CreateFleet or ImportInstance.
        public let affinity: String?
        /// The Availability Zone of the instance. If not specified, an Availability Zone will be automatically chosen for you based on the load balancing criteria for the Region. This parameter is not supported for CreateFleet.
        public let availabilityZone: String?
        /// The ID of the placement group that the instance is in. If you specify GroupId, you can't specify GroupName.
        public let groupId: String?
        /// The name of the placement group that the instance is in. If you specify GroupName, you can't specify GroupId.
        public let groupName: String?
        /// The ID of the Dedicated Host on which the instance resides. This parameter is not supported for CreateFleet or ImportInstance.
        public let hostId: String?
        /// The ARN of the host resource group in which to launch the instances. If you specify this parameter, either omit the Tenancy parameter or set it to host. This parameter is not supported for CreateFleet.
        public let hostResourceGroupArn: String?
        /// The number of the partition that the instance is in. Valid only if the placement group strategy is set to partition. This parameter is not supported for CreateFleet.
        public let partitionNumber: Int?
        /// Reserved for future use.
        public let spreadDomain: String?
        /// The tenancy of the instance. An instance with a tenancy of dedicated runs on single-tenant hardware. This parameter is not supported for CreateFleet. The host tenancy is not supported for ImportInstance or for T3 instances that are configured for the unlimited CPU credit option.
        public let tenancy: Tenancy?

        public init(affinity: String? = nil, availabilityZone: String? = nil, groupId: String? = nil, groupName: String? = nil, hostId: String? = nil, hostResourceGroupArn: String? = nil, partitionNumber: Int? = nil, spreadDomain: String? = nil, tenancy: Tenancy? = nil) {
            self.affinity = affinity
            self.availabilityZone = availabilityZone
            self.groupId = groupId
            self.groupName = groupName
            self.hostId = hostId
            self.hostResourceGroupArn = hostResourceGroupArn
            self.partitionNumber = partitionNumber
            self.spreadDomain = spreadDomain
            self.tenancy = tenancy
        }

        private enum CodingKeys: String, CodingKey {
            case affinity = "affinity"
            case availabilityZone = "availabilityZone"
            case groupId = "groupId"
            case groupName = "groupName"
            case hostId = "hostId"
            case hostResourceGroupArn = "hostResourceGroupArn"
            case partitionNumber = "partitionNumber"
            case spreadDomain = "spreadDomain"
            case tenancy = "tenancy"
        }
    }

    public struct PlacementGroup: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Amazon Resource Name (ARN) of the placement group.
        public let groupArn: String?
        /// The ID of the placement group.
        public let groupId: String?
        /// The name of the placement group.
        public let groupName: String?
        /// The number of partitions. Valid only if strategy is set to partition.
        public let partitionCount: Int?
        /// The spread level for the placement group. Only Outpost placement groups can be spread across hosts.
        public let spreadLevel: SpreadLevel?
        /// The state of the placement group.
        public let state: PlacementGroupState?
        /// The placement strategy.
        public let strategy: PlacementStrategy?
        /// Any tags applied to the placement group.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(groupArn: String? = nil, groupId: String? = nil, groupName: String? = nil, partitionCount: Int? = nil, spreadLevel: SpreadLevel? = nil, state: PlacementGroupState? = nil, strategy: PlacementStrategy? = nil, tags: [Tag]? = nil) {
            self.groupArn = groupArn
            self.groupId = groupId
            self.groupName = groupName
            self.partitionCount = partitionCount
            self.spreadLevel = spreadLevel
            self.state = state
            self.strategy = strategy
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case groupArn = "groupArn"
            case groupId = "groupId"
            case groupName = "groupName"
            case partitionCount = "partitionCount"
            case spreadLevel = "spreadLevel"
            case state = "state"
            case strategy = "strategy"
            case tags = "tagSet"
        }
    }

    public struct PlacementGroupInfo: AWSDecodableShape {
        public struct _SupportedStrategiesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The supported placement group types.
        @OptionalCustomCoding<EC2ArrayCoder<_SupportedStrategiesEncoding, PlacementGroupStrategy>>
        public var supportedStrategies: [PlacementGroupStrategy]?

        public init(supportedStrategies: [PlacementGroupStrategy]? = nil) {
            self.supportedStrategies = supportedStrategies
        }

        private enum CodingKeys: String, CodingKey {
            case supportedStrategies = "supportedStrategies"
        }
    }

    public struct PlacementResponse: AWSDecodableShape {
        /// The name of the placement group that the instance is in.
        public let groupName: String?

        public init(groupName: String? = nil) {
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "groupName"
        }
    }

    public struct PoolCidrBlock: AWSDecodableShape {
        /// The CIDR block.
        public let cidr: String?

        public init(cidr: String? = nil) {
            self.cidr = cidr
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "poolCidrBlock"
        }
    }

    public struct PortRange: AWSEncodableShape & AWSDecodableShape {
        /// The first port in the range.
        public let from: Int?
        /// The last port in the range.
        public let to: Int?

        public init(from: Int? = nil, to: Int? = nil) {
            self.from = from
            self.to = to
        }

        private enum CodingKeys: String, CodingKey {
            case from = "from"
            case to = "to"
        }
    }

    public struct PrefixList: AWSDecodableShape {
        public struct _CidrsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IP address range of the Amazon Web Service.
        @OptionalCustomCoding<EC2ArrayCoder<_CidrsEncoding, String>>
        public var cidrs: [String]?
        /// The ID of the prefix.
        public let prefixListId: String?
        /// The name of the prefix.
        public let prefixListName: String?

        public init(cidrs: [String]? = nil, prefixListId: String? = nil, prefixListName: String? = nil) {
            self.cidrs = cidrs
            self.prefixListId = prefixListId
            self.prefixListName = prefixListName
        }

        private enum CodingKeys: String, CodingKey {
            case cidrs = "cidrSet"
            case prefixListId = "prefixListId"
            case prefixListName = "prefixListName"
        }
    }

    public struct PrefixListAssociation: AWSDecodableShape {
        /// The ID of the resource.
        public let resourceId: String?
        /// The owner of the resource.
        public let resourceOwner: String?

        public init(resourceId: String? = nil, resourceOwner: String? = nil) {
            self.resourceId = resourceId
            self.resourceOwner = resourceOwner
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resourceId"
            case resourceOwner = "resourceOwner"
        }
    }

    public struct PrefixListEntry: AWSDecodableShape {
        /// The CIDR block.
        public let cidr: String?
        /// The description.
        public let description: String?

        public init(cidr: String? = nil, description: String? = nil) {
            self.cidr = cidr
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "cidr"
            case description = "description"
        }
    }

    public struct PrefixListId: AWSEncodableShape & AWSDecodableShape {
        /// A description for the security group rule that references this prefix list ID. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
        public let description: String?
        /// The ID of the prefix.
        public let prefixListId: String?

        public init(description: String? = nil, prefixListId: String? = nil) {
            self.description = description
            self.prefixListId = prefixListId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case prefixListId = "prefixListId"
        }
    }

    public struct PriceSchedule: AWSDecodableShape {
        /// The current price schedule, as determined by the term remaining for the Reserved Instance in the listing. A specific price schedule is always in effect, but only one price schedule can be active at any time. Take, for example, a Reserved Instance listing that has five months remaining in its term. When you specify price schedules for five months and two months, this means that schedule 1, covering the first three months of the remaining term, will be active during months 5, 4, and 3. Then schedule 2, covering the last two months of the term, will be active for months 2 and 1.
        public let active: Bool?
        /// The currency for transacting the Reserved Instance resale.
        /// 				At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The fixed price for the term.
        public let price: Double?
        /// The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.
        public let term: Int64?

        public init(active: Bool? = nil, currencyCode: CurrencyCodeValues? = nil, price: Double? = nil, term: Int64? = nil) {
            self.active = active
            self.currencyCode = currencyCode
            self.price = price
            self.term = term
        }

        private enum CodingKeys: String, CodingKey {
            case active = "active"
            case currencyCode = "currencyCode"
            case price = "price"
            case term = "term"
        }
    }

    public struct PriceScheduleSpecification: AWSEncodableShape {
        /// The currency for transacting the Reserved Instance resale.
        /// 				At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The fixed price for the term.
        public let price: Double?
        /// The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.
        public let term: Int64?

        public init(currencyCode: CurrencyCodeValues? = nil, price: Double? = nil, term: Int64? = nil) {
            self.currencyCode = currencyCode
            self.price = price
            self.term = term
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode = "currencyCode"
            case price = "price"
            case term = "term"
        }
    }

    public struct PricingDetail: AWSDecodableShape {
        /// The number of reservations available for the price.
        public let count: Int?
        /// The price per instance.
        public let price: Double?

        public init(count: Int? = nil, price: Double? = nil) {
            self.count = count
            self.price = price
        }

        private enum CodingKeys: String, CodingKey {
            case count = "count"
            case price = "price"
        }
    }

    public struct PrincipalIdFormat: AWSDecodableShape {
        public struct _StatusesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// PrincipalIdFormatARN description
        public let arn: String?
        /// PrincipalIdFormatStatuses description
        @OptionalCustomCoding<EC2ArrayCoder<_StatusesEncoding, IdFormat>>
        public var statuses: [IdFormat]?

        public init(arn: String? = nil, statuses: [IdFormat]? = nil) {
            self.arn = arn
            self.statuses = statuses
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case statuses = "statusSet"
        }
    }

    public struct PrivateDnsDetails: AWSDecodableShape {
        /// The private DNS name assigned to the VPC endpoint service.
        public let privateDnsName: String?

        public init(privateDnsName: String? = nil) {
            self.privateDnsName = privateDnsName
        }

        private enum CodingKeys: String, CodingKey {
            case privateDnsName = "privateDnsName"
        }
    }

    public struct PrivateDnsNameConfiguration: AWSDecodableShape {
        /// The name of the record subdomain the service provider needs to create. The service provider adds the value text to the name.
        public let name: String?
        /// The verification state of the VPC endpoint service. >Consumers of the endpoint service can use the private name only when the state is verified.
        public let state: DnsNameState?
        /// The endpoint service verification type, for example TXT.
        public let type: String?
        /// The value the service provider adds to the private DNS name domain record before verification.
        public let value: String?

        public init(name: String? = nil, state: DnsNameState? = nil, type: String? = nil, value: String? = nil) {
            self.name = name
            self.state = state
            self.type = type
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case state = "state"
            case type = "type"
            case value = "value"
        }
    }

    public struct PrivateDnsNameOptionsOnLaunch: AWSDecodableShape {
        /// Indicates whether to respond to DNS queries for instance hostname with DNS AAAA records.
        public let enableResourceNameDnsAAAARecord: Bool?
        /// Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
        public let enableResourceNameDnsARecord: Bool?
        /// The type of hostname for EC2 instances. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID.
        public let hostnameType: HostnameType?

        public init(enableResourceNameDnsAAAARecord: Bool? = nil, enableResourceNameDnsARecord: Bool? = nil, hostnameType: HostnameType? = nil) {
            self.enableResourceNameDnsAAAARecord = enableResourceNameDnsAAAARecord
            self.enableResourceNameDnsARecord = enableResourceNameDnsARecord
            self.hostnameType = hostnameType
        }

        private enum CodingKeys: String, CodingKey {
            case enableResourceNameDnsAAAARecord = "enableResourceNameDnsAAAARecord"
            case enableResourceNameDnsARecord = "enableResourceNameDnsARecord"
            case hostnameType = "hostnameType"
        }
    }

    public struct PrivateDnsNameOptionsRequest: AWSEncodableShape {
        /// Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
        public let enableResourceNameDnsAAAARecord: Bool?
        /// Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
        public let enableResourceNameDnsARecord: Bool?
        /// The type of hostname for EC2 instances. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID.
        public let hostnameType: HostnameType?

        public init(enableResourceNameDnsAAAARecord: Bool? = nil, enableResourceNameDnsARecord: Bool? = nil, hostnameType: HostnameType? = nil) {
            self.enableResourceNameDnsAAAARecord = enableResourceNameDnsAAAARecord
            self.enableResourceNameDnsARecord = enableResourceNameDnsARecord
            self.hostnameType = hostnameType
        }

        private enum CodingKeys: String, CodingKey {
            case enableResourceNameDnsAAAARecord = "EnableResourceNameDnsAAAARecord"
            case enableResourceNameDnsARecord = "EnableResourceNameDnsARecord"
            case hostnameType = "HostnameType"
        }
    }

    public struct PrivateDnsNameOptionsResponse: AWSDecodableShape {
        /// Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
        public let enableResourceNameDnsAAAARecord: Bool?
        /// Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
        public let enableResourceNameDnsARecord: Bool?
        /// The type of hostname to assign to an instance.
        public let hostnameType: HostnameType?

        public init(enableResourceNameDnsAAAARecord: Bool? = nil, enableResourceNameDnsARecord: Bool? = nil, hostnameType: HostnameType? = nil) {
            self.enableResourceNameDnsAAAARecord = enableResourceNameDnsAAAARecord
            self.enableResourceNameDnsARecord = enableResourceNameDnsARecord
            self.hostnameType = hostnameType
        }

        private enum CodingKeys: String, CodingKey {
            case enableResourceNameDnsAAAARecord = "enableResourceNameDnsAAAARecord"
            case enableResourceNameDnsARecord = "enableResourceNameDnsARecord"
            case hostnameType = "hostnameType"
        }
    }

    public struct PrivateIpAddressSpecification: AWSEncodableShape & AWSDecodableShape {
        /// Indicates whether the private IPv4 address is the primary private IPv4 address. Only one IPv4 address can be designated as primary.
        public let primary: Bool?
        /// The private IPv4 address.
        public let privateIpAddress: String?

        public init(primary: Bool? = nil, privateIpAddress: String? = nil) {
            self.primary = primary
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case primary = "primary"
            case privateIpAddress = "privateIpAddress"
        }
    }

    public struct ProcessorInfo: AWSDecodableShape {
        public struct _SupportedArchitecturesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SupportedFeaturesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The manufacturer of the processor.
        public let manufacturer: String?
        /// The architectures supported by the instance type.
        @OptionalCustomCoding<EC2ArrayCoder<_SupportedArchitecturesEncoding, ArchitectureType>>
        public var supportedArchitectures: [ArchitectureType]?
        /// Indicates whether the instance type supports AMD SEV-SNP. If the request returns  amd-sev-snp, AMD SEV-SNP is supported. Otherwise, it is not supported.  For more information, see  AMD SEV-SNP.
        @OptionalCustomCoding<EC2ArrayCoder<_SupportedFeaturesEncoding, SupportedAdditionalProcessorFeature>>
        public var supportedFeatures: [SupportedAdditionalProcessorFeature]?
        /// The speed of the processor, in GHz.
        public let sustainedClockSpeedInGhz: Double?

        public init(manufacturer: String? = nil, supportedArchitectures: [ArchitectureType]? = nil, supportedFeatures: [SupportedAdditionalProcessorFeature]? = nil, sustainedClockSpeedInGhz: Double? = nil) {
            self.manufacturer = manufacturer
            self.supportedArchitectures = supportedArchitectures
            self.supportedFeatures = supportedFeatures
            self.sustainedClockSpeedInGhz = sustainedClockSpeedInGhz
        }

        private enum CodingKeys: String, CodingKey {
            case manufacturer = "manufacturer"
            case supportedArchitectures = "supportedArchitectures"
            case supportedFeatures = "supportedFeatures"
            case sustainedClockSpeedInGhz = "sustainedClockSpeedInGhz"
        }
    }

    public struct ProductCode: AWSDecodableShape {
        /// The product code.
        public let productCodeId: String?
        /// The type of product code.
        public let productCodeType: ProductCodeValues?

        public init(productCodeId: String? = nil, productCodeType: ProductCodeValues? = nil) {
            self.productCodeId = productCodeId
            self.productCodeType = productCodeType
        }

        private enum CodingKeys: String, CodingKey {
            case productCodeId = "productCode"
            case productCodeType = "type"
        }
    }

    public struct PropagatingVgw: AWSDecodableShape {
        /// The ID of the virtual private gateway.
        public let gatewayId: String?

        public init(gatewayId: String? = nil) {
            self.gatewayId = gatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayId = "gatewayId"
        }
    }

    public struct ProvisionByoipCidrRequest: AWSEncodableShape {
        public struct _PoolTagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The public IPv4 or IPv6 address range, in CIDR notation. The most specific IPv4 prefix that you can  specify is /24. The most specific IPv6 address range that you can bring is /48 for CIDRs that are publicly advertisable and /56 for CIDRs that are not publicly advertisable. The address range cannot overlap with another address range that you've  brought to this or another Region.
        public let cidr: String?
        /// A signed document that proves that you are authorized to bring the specified IP address  range to Amazon using BYOIP.
        public let cidrAuthorizationContext: CidrAuthorizationContext?
        /// A description for the address range and the address pool.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Reserved.
        public let multiRegion: Bool?
        /// If you have Local Zones enabled, you can choose a network border group for Local Zones when you provision and advertise a BYOIPv4 CIDR. Choose the network border group carefully as the EIP and the Amazon Web Services resource it is associated with must reside in the same network border group. You can provision BYOIP address ranges to and advertise them in the following Local Zone network border groups:   us-east-1-dfw-2   us-west-2-lax-1   us-west-2-phx-2    You cannot provision or advertise BYOIPv6 address ranges in Local Zones at this time.
        public let networkBorderGroup: String?
        /// The tags to apply to the address pool.
        @OptionalCustomCoding<EC2ArrayCoder<_PoolTagSpecificationsEncoding, TagSpecification>>
        public var poolTagSpecifications: [TagSpecification]?
        /// (IPv6 only) Indicate whether the address range will be publicly advertised to the internet. Default: true
        public let publiclyAdvertisable: Bool?

        public init(cidr: String? = nil, cidrAuthorizationContext: CidrAuthorizationContext? = nil, description: String? = nil, dryRun: Bool? = nil, multiRegion: Bool? = nil, networkBorderGroup: String? = nil, poolTagSpecifications: [TagSpecification]? = nil, publiclyAdvertisable: Bool? = nil) {
            self.cidr = cidr
            self.cidrAuthorizationContext = cidrAuthorizationContext
            self.description = description
            self.dryRun = dryRun
            self.multiRegion = multiRegion
            self.networkBorderGroup = networkBorderGroup
            self.poolTagSpecifications = poolTagSpecifications
            self.publiclyAdvertisable = publiclyAdvertisable
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case cidrAuthorizationContext = "CidrAuthorizationContext"
            case description = "Description"
            case dryRun = "DryRun"
            case multiRegion = "MultiRegion"
            case networkBorderGroup = "NetworkBorderGroup"
            case poolTagSpecifications = "PoolTagSpecification"
            case publiclyAdvertisable = "PubliclyAdvertisable"
        }
    }

    public struct ProvisionByoipCidrResult: AWSDecodableShape {
        /// Information about the address range.
        public let byoipCidr: ByoipCidr?

        public init(byoipCidr: ByoipCidr? = nil) {
            self.byoipCidr = byoipCidr
        }

        private enum CodingKeys: String, CodingKey {
            case byoipCidr = "byoipCidr"
        }
    }

    public struct ProvisionIpamByoasnRequest: AWSEncodableShape {
        /// A public 2-byte or 4-byte ASN.
        public let asn: String?
        /// An ASN authorization context.
        public let asnAuthorizationContext: AsnAuthorizationContext?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// An IPAM ID.
        public let ipamId: String?

        public init(asn: String? = nil, asnAuthorizationContext: AsnAuthorizationContext? = nil, dryRun: Bool? = nil, ipamId: String? = nil) {
            self.asn = asn
            self.asnAuthorizationContext = asnAuthorizationContext
            self.dryRun = dryRun
            self.ipamId = ipamId
        }

        private enum CodingKeys: String, CodingKey {
            case asn = "Asn"
            case asnAuthorizationContext = "AsnAuthorizationContext"
            case dryRun = "DryRun"
            case ipamId = "IpamId"
        }
    }

    public struct ProvisionIpamByoasnResult: AWSDecodableShape {
        /// An ASN and BYOIP CIDR association.
        public let byoasn: Byoasn?

        public init(byoasn: Byoasn? = nil) {
            self.byoasn = byoasn
        }

        private enum CodingKeys: String, CodingKey {
            case byoasn = "byoasn"
        }
    }

    public struct ProvisionIpamPoolCidrRequest: AWSEncodableShape {
        /// The CIDR you want to assign to the IPAM pool. Either "NetmaskLength" or "Cidr" is required. This value will be null if you specify "NetmaskLength" and will be filled in during the provisioning process.
        public let cidr: String?
        /// A signed document that proves that you are authorized to bring a specified IP address range to Amazon using BYOIP. This option applies to public pools only.
        public let cidrAuthorizationContext: IpamCidrAuthorizationContext?
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the IPAM pool to which you want to assign a CIDR.
        public let ipamPoolId: String?
        /// The netmask length of the CIDR you'd like to provision to a pool. Can be used for provisioning Amazon-provided IPv6 CIDRs to top-level pools and for provisioning CIDRs to pools with source pools. Cannot be used to provision BYOIP CIDRs to top-level pools. Either "NetmaskLength" or "Cidr" is required.
        public let netmaskLength: Int?

        public init(cidr: String? = nil, cidrAuthorizationContext: IpamCidrAuthorizationContext? = nil, clientToken: String? = ProvisionIpamPoolCidrRequest.idempotencyToken(), dryRun: Bool? = nil, ipamPoolId: String? = nil, netmaskLength: Int? = nil) {
            self.cidr = cidr
            self.cidrAuthorizationContext = cidrAuthorizationContext
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.ipamPoolId = ipamPoolId
            self.netmaskLength = netmaskLength
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case cidrAuthorizationContext = "CidrAuthorizationContext"
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case ipamPoolId = "IpamPoolId"
            case netmaskLength = "NetmaskLength"
        }
    }

    public struct ProvisionIpamPoolCidrResult: AWSDecodableShape {
        /// Information about the provisioned CIDR.
        public let ipamPoolCidr: IpamPoolCidr?

        public init(ipamPoolCidr: IpamPoolCidr? = nil) {
            self.ipamPoolCidr = ipamPoolCidr
        }

        private enum CodingKeys: String, CodingKey {
            case ipamPoolCidr = "ipamPoolCidr"
        }
    }

    public struct ProvisionPublicIpv4PoolCidrRequest: AWSEncodableShape {
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the IPAM pool you would like to use to allocate this CIDR.
        public let ipamPoolId: String?
        /// The netmask length of the CIDR you would like to allocate to the public IPv4 pool.
        public let netmaskLength: Int?
        /// The ID of the public IPv4 pool you would like to use for this CIDR.
        public let poolId: String?

        public init(dryRun: Bool? = nil, ipamPoolId: String? = nil, netmaskLength: Int? = nil, poolId: String? = nil) {
            self.dryRun = dryRun
            self.ipamPoolId = ipamPoolId
            self.netmaskLength = netmaskLength
            self.poolId = poolId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case ipamPoolId = "IpamPoolId"
            case netmaskLength = "NetmaskLength"
            case poolId = "PoolId"
        }
    }

    public struct ProvisionPublicIpv4PoolCidrResult: AWSDecodableShape {
        /// Information about the address range of the public IPv4 pool.
        public let poolAddressRange: PublicIpv4PoolRange?
        /// The ID of the pool that you want to provision the CIDR to.
        public let poolId: String?

        public init(poolAddressRange: PublicIpv4PoolRange? = nil, poolId: String? = nil) {
            self.poolAddressRange = poolAddressRange
            self.poolId = poolId
        }

        private enum CodingKeys: String, CodingKey {
            case poolAddressRange = "poolAddressRange"
            case poolId = "poolId"
        }
    }

    public struct ProvisionedBandwidth: AWSDecodableShape {
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let provisioned: String?
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let provisionTime: Date?
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let requested: String?
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let requestTime: Date?
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let status: String?

        public init(provisioned: String? = nil, provisionTime: Date? = nil, requested: String? = nil, requestTime: Date? = nil, status: String? = nil) {
            self.provisioned = provisioned
            self.provisionTime = provisionTime
            self.requested = requested
            self.requestTime = requestTime
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case provisioned = "provisioned"
            case provisionTime = "provisionTime"
            case requested = "requested"
            case requestTime = "requestTime"
            case status = "status"
        }
    }

    public struct PtrUpdateStatus: AWSDecodableShape {
        /// The reason for the PTR record update.
        public let reason: String?
        /// The status of the PTR record update.
        public let status: String?
        /// The value for the PTR record update.
        public let value: String?

        public init(reason: String? = nil, status: String? = nil, value: String? = nil) {
            self.reason = reason
            self.status = status
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case reason = "reason"
            case status = "status"
            case value = "value"
        }
    }

    public struct PublicIpv4Pool: AWSDecodableShape {
        public struct _PoolAddressRangesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description of the address pool.
        public let description: String?
        /// The name of the location from which the address pool is advertised.  A network border group is a unique set of Availability Zones or Local Zones  from where Amazon Web Services advertises public IP addresses.
        public let networkBorderGroup: String?
        /// The address ranges.
        @OptionalCustomCoding<EC2ArrayCoder<_PoolAddressRangesEncoding, PublicIpv4PoolRange>>
        public var poolAddressRanges: [PublicIpv4PoolRange]?
        /// The ID of the address pool.
        public let poolId: String?
        /// Any tags for the address pool.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The total number of addresses.
        public let totalAddressCount: Int?
        /// The total number of available addresses.
        public let totalAvailableAddressCount: Int?

        public init(description: String? = nil, networkBorderGroup: String? = nil, poolAddressRanges: [PublicIpv4PoolRange]? = nil, poolId: String? = nil, tags: [Tag]? = nil, totalAddressCount: Int? = nil, totalAvailableAddressCount: Int? = nil) {
            self.description = description
            self.networkBorderGroup = networkBorderGroup
            self.poolAddressRanges = poolAddressRanges
            self.poolId = poolId
            self.tags = tags
            self.totalAddressCount = totalAddressCount
            self.totalAvailableAddressCount = totalAvailableAddressCount
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case networkBorderGroup = "networkBorderGroup"
            case poolAddressRanges = "poolAddressRangeSet"
            case poolId = "poolId"
            case tags = "tagSet"
            case totalAddressCount = "totalAddressCount"
            case totalAvailableAddressCount = "totalAvailableAddressCount"
        }
    }

    public struct PublicIpv4PoolRange: AWSDecodableShape {
        /// The number of addresses in the range.
        public let addressCount: Int?
        /// The number of available addresses in the range.
        public let availableAddressCount: Int?
        /// The first IP address in the range.
        public let firstAddress: String?
        /// The last IP address in the range.
        public let lastAddress: String?

        public init(addressCount: Int? = nil, availableAddressCount: Int? = nil, firstAddress: String? = nil, lastAddress: String? = nil) {
            self.addressCount = addressCount
            self.availableAddressCount = availableAddressCount
            self.firstAddress = firstAddress
            self.lastAddress = lastAddress
        }

        private enum CodingKeys: String, CodingKey {
            case addressCount = "addressCount"
            case availableAddressCount = "availableAddressCount"
            case firstAddress = "firstAddress"
            case lastAddress = "lastAddress"
        }
    }

    public struct Purchase: AWSDecodableShape {
        public struct _HostIdSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The currency in which the UpfrontPrice and HourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The duration of the reservation's term in seconds.
        public let duration: Int?
        /// The IDs of the Dedicated Hosts associated with the reservation.
        @OptionalCustomCoding<EC2ArrayCoder<_HostIdSetEncoding, String>>
        public var hostIdSet: [String]?
        /// The ID of the reservation.
        public let hostReservationId: String?
        /// The hourly price of the reservation per hour.
        public let hourlyPrice: String?
        /// The instance family on the Dedicated Host that the reservation can be associated with.
        public let instanceFamily: String?
        /// The payment option for the reservation.
        public let paymentOption: PaymentOption?
        /// The upfront price of the reservation.
        public let upfrontPrice: String?

        public init(currencyCode: CurrencyCodeValues? = nil, duration: Int? = nil, hostIdSet: [String]? = nil, hostReservationId: String? = nil, hourlyPrice: String? = nil, instanceFamily: String? = nil, paymentOption: PaymentOption? = nil, upfrontPrice: String? = nil) {
            self.currencyCode = currencyCode
            self.duration = duration
            self.hostIdSet = hostIdSet
            self.hostReservationId = hostReservationId
            self.hourlyPrice = hourlyPrice
            self.instanceFamily = instanceFamily
            self.paymentOption = paymentOption
            self.upfrontPrice = upfrontPrice
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode = "currencyCode"
            case duration = "duration"
            case hostIdSet = "hostIdSet"
            case hostReservationId = "hostReservationId"
            case hourlyPrice = "hourlyPrice"
            case instanceFamily = "instanceFamily"
            case paymentOption = "paymentOption"
            case upfrontPrice = "upfrontPrice"
        }
    }

    public struct PurchaseCapacityBlockRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the Capacity Block offering.
        public let capacityBlockOfferingId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The type of operating system for which to reserve capacity.
        public let instancePlatform: CapacityReservationInstancePlatform?
        /// The tags to apply to the Capacity Block during launch.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(capacityBlockOfferingId: String? = nil, dryRun: Bool? = nil, instancePlatform: CapacityReservationInstancePlatform? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.capacityBlockOfferingId = capacityBlockOfferingId
            self.dryRun = dryRun
            self.instancePlatform = instancePlatform
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case capacityBlockOfferingId = "CapacityBlockOfferingId"
            case dryRun = "DryRun"
            case instancePlatform = "InstancePlatform"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct PurchaseCapacityBlockResult: AWSDecodableShape {
        /// The Capacity Reservation.
        public let capacityReservation: CapacityReservation?

        public init(capacityReservation: CapacityReservation? = nil) {
            self.capacityReservation = capacityReservation
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservation = "capacityReservation"
        }
    }

    public struct PurchaseHostReservationRequest: AWSEncodableShape {
        public struct _HostIdSetEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// The currency in which the totalUpfrontPrice, LimitPrice, and totalHourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The IDs of the Dedicated Hosts with which the reservation will be associated.
        @OptionalCustomCoding<EC2ArrayCoder<_HostIdSetEncoding, String>>
        public var hostIdSet: [String]?
        /// The specified limit is checked against the total upfront cost of the reservation (calculated as the offering's upfront cost multiplied by the host count). If the total upfront cost is greater than the specified price limit, the request fails. This is used to ensure that the purchase does not exceed the expected upfront cost of the purchase. At this time, the only supported currency is USD. For example, to indicate a limit price of USD 100, specify 100.00.
        public let limitPrice: String?
        /// The ID of the offering.
        public let offeringId: String?
        /// The tags to apply to the Dedicated Host Reservation during purchase.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = nil, currencyCode: CurrencyCodeValues? = nil, hostIdSet: [String]? = nil, limitPrice: String? = nil, offeringId: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.currencyCode = currencyCode
            self.hostIdSet = hostIdSet
            self.limitPrice = limitPrice
            self.offeringId = offeringId
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case currencyCode = "CurrencyCode"
            case hostIdSet = "HostIdSet"
            case limitPrice = "LimitPrice"
            case offeringId = "OfferingId"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct PurchaseHostReservationResult: AWSDecodableShape {
        public struct _PurchaseEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// The currency in which the totalUpfrontPrice and totalHourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// Describes the details of the purchase.
        @OptionalCustomCoding<EC2ArrayCoder<_PurchaseEncoding, Purchase>>
        public var purchase: [Purchase]?
        /// The total hourly price of the reservation calculated per hour.
        public let totalHourlyPrice: String?
        /// The total amount charged to your account when you purchase the reservation.
        public let totalUpfrontPrice: String?

        public init(clientToken: String? = nil, currencyCode: CurrencyCodeValues? = nil, purchase: [Purchase]? = nil, totalHourlyPrice: String? = nil, totalUpfrontPrice: String? = nil) {
            self.clientToken = clientToken
            self.currencyCode = currencyCode
            self.purchase = purchase
            self.totalHourlyPrice = totalHourlyPrice
            self.totalUpfrontPrice = totalUpfrontPrice
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case currencyCode = "currencyCode"
            case purchase = "purchase"
            case totalHourlyPrice = "totalHourlyPrice"
            case totalUpfrontPrice = "totalUpfrontPrice"
        }
    }

    public struct PurchaseRequest: AWSEncodableShape {
        /// The number of instances.
        public let instanceCount: Int?
        /// The purchase token.
        public let purchaseToken: String?

        public init(instanceCount: Int? = nil, purchaseToken: String? = nil) {
            self.instanceCount = instanceCount
            self.purchaseToken = purchaseToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceCount = "InstanceCount"
            case purchaseToken = "PurchaseToken"
        }
    }

    public struct PurchaseReservedInstancesOfferingRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The number of Reserved Instances to purchase.
        public let instanceCount: Int?
        /// Specified for Reserved Instance Marketplace offerings to limit the total order and ensure that the Reserved Instances are not purchased at unexpected prices.
        public let limitPrice: ReservedInstanceLimitPrice?
        /// The time at which to purchase the Reserved Instance, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let purchaseTime: Date?
        /// The ID of the Reserved Instance offering to purchase.
        public let reservedInstancesOfferingId: String?

        public init(dryRun: Bool? = nil, instanceCount: Int? = nil, limitPrice: ReservedInstanceLimitPrice? = nil, purchaseTime: Date? = nil, reservedInstancesOfferingId: String? = nil) {
            self.dryRun = dryRun
            self.instanceCount = instanceCount
            self.limitPrice = limitPrice
            self.purchaseTime = purchaseTime
            self.reservedInstancesOfferingId = reservedInstancesOfferingId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceCount = "InstanceCount"
            case limitPrice = "limitPrice"
            case purchaseTime = "PurchaseTime"
            case reservedInstancesOfferingId = "ReservedInstancesOfferingId"
        }
    }

    public struct PurchaseReservedInstancesOfferingResult: AWSDecodableShape {
        /// The IDs of the purchased Reserved Instances. If your purchase crosses into a discounted pricing tier, the final Reserved Instances IDs might change. For more information, see Crossing pricing tiers in the Amazon Elastic Compute Cloud User Guide.
        public let reservedInstancesId: String?

        public init(reservedInstancesId: String? = nil) {
            self.reservedInstancesId = reservedInstancesId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesId = "reservedInstancesId"
        }
    }

    public struct PurchaseScheduledInstancesRequest: AWSEncodableShape {
        public struct _PurchaseRequestsEncoding: ArrayCoderProperties { public static let member = "PurchaseRequest" }

        /// Unique, case-sensitive identifier that ensures the idempotency of the request.  For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The purchase requests.
        @OptionalCustomCoding<EC2ArrayCoder<_PurchaseRequestsEncoding, PurchaseRequest>>
        public var purchaseRequests: [PurchaseRequest]?

        public init(clientToken: String? = PurchaseScheduledInstancesRequest.idempotencyToken(), dryRun: Bool? = nil, purchaseRequests: [PurchaseRequest]? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.purchaseRequests = purchaseRequests
        }

        public func validate(name: String) throws {
            try self.validate(self.purchaseRequests, name: "purchaseRequests", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case purchaseRequests = "PurchaseRequest"
        }
    }

    public struct PurchaseScheduledInstancesResult: AWSDecodableShape {
        public struct _ScheduledInstanceSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Scheduled Instances.
        @OptionalCustomCoding<EC2ArrayCoder<_ScheduledInstanceSetEncoding, ScheduledInstance>>
        public var scheduledInstanceSet: [ScheduledInstance]?

        public init(scheduledInstanceSet: [ScheduledInstance]? = nil) {
            self.scheduledInstanceSet = scheduledInstanceSet
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledInstanceSet = "scheduledInstanceSet"
        }
    }

    public struct RebootInstancesRequest: AWSEncodableShape {
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "InstanceId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The instance IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]?

        public init(dryRun: Bool? = nil, instanceIds: [String]? = nil) {
            self.dryRun = dryRun
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceIds = "InstanceId"
        }
    }

    public struct RecurringCharge: AWSDecodableShape {
        /// The amount of the recurring charge.
        public let amount: Double?
        /// The frequency of the recurring charge.
        public let frequency: RecurringChargeFrequency?

        public init(amount: Double? = nil, frequency: RecurringChargeFrequency? = nil) {
            self.amount = amount
            self.frequency = frequency
        }

        private enum CodingKeys: String, CodingKey {
            case amount = "amount"
            case frequency = "frequency"
        }
    }

    public struct ReferencedSecurityGroup: AWSDecodableShape {
        /// The ID of the security group.
        public let groupId: String?
        /// The status of a VPC peering connection, if applicable.
        public let peeringStatus: String?
        /// The Amazon Web Services account ID.
        public let userId: String?
        /// The ID of the VPC.
        public let vpcId: String?
        /// The ID of the VPC peering connection (if applicable).
        public let vpcPeeringConnectionId: String?

        public init(groupId: String? = nil, peeringStatus: String? = nil, userId: String? = nil, vpcId: String? = nil, vpcPeeringConnectionId: String? = nil) {
            self.groupId = groupId
            self.peeringStatus = peeringStatus
            self.userId = userId
            self.vpcId = vpcId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "groupId"
            case peeringStatus = "peeringStatus"
            case userId = "userId"
            case vpcId = "vpcId"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct Region: AWSDecodableShape {
        /// The Region service endpoint.
        public let endpoint: String?
        /// The Region opt-in status. The possible values are opt-in-not-required, opted-in, and  not-opted-in.
        public let optInStatus: String?
        /// The name of the Region.
        public let regionName: String?

        public init(endpoint: String? = nil, optInStatus: String? = nil, regionName: String? = nil) {
            self.endpoint = endpoint
            self.optInStatus = optInStatus
            self.regionName = regionName
        }

        private enum CodingKeys: String, CodingKey {
            case endpoint = "regionEndpoint"
            case optInStatus = "optInStatus"
            case regionName = "regionName"
        }
    }

    public struct RegisterImageRequest: AWSEncodableShape {
        public struct _BillingProductsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "BlockDeviceMapping" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The architecture of the AMI. Default: For Amazon EBS-backed AMIs, i386. For instance store-backed AMIs, the architecture specified in the manifest file.
        public let architecture: ArchitectureValues?
        /// The billing product codes. Your account must be authorized to specify billing product codes. If your account is not authorized to specify billing product codes, you can publish AMIs that include billable software and list them on the Amazon Web Services Marketplace. You must first register as a seller on the Amazon Web Services Marketplace. For more information, see Getting started as a seller and AMI-based products in the Amazon Web Services Marketplace Seller Guide.
        @OptionalCustomCoding<EC2ArrayCoder<_BillingProductsEncoding, String>>
        public var billingProducts: [String]?
        /// The block device mapping entries. If you specify an Amazon EBS volume using the ID of an Amazon EBS snapshot, you can't specify the encryption state of the volume. If you create an AMI on an Outpost, then all backing snapshots must be on the same Outpost or in the Region of that Outpost. AMIs on an Outpost that include local snapshots can be used to launch instances on the same Outpost only. For more information, Amazon EBS local snapshots on Outposts in the Amazon EBS User Guide.
        @OptionalCustomCoding<EC2ArrayCoder<_BlockDeviceMappingsEncoding, BlockDeviceMapping>>
        public var blockDeviceMappings: [BlockDeviceMapping]?
        /// The boot mode of the AMI. A value of uefi-preferred indicates that the AMI supports both UEFI and Legacy BIOS.  The operating system contained in the AMI must be configured to support the specified boot mode.  For more information, see Boot modes in the Amazon EC2 User Guide.
        public let bootMode: BootModeValues?
        /// A description for your AMI.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Set to true to enable enhanced networking with ENA for the AMI and any instances that you launch from the AMI. This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.
        public let enaSupport: Bool?
        /// The full path to your AMI manifest in Amazon S3 storage. The specified bucket must have the  		aws-exec-read canned access control list (ACL) to ensure that it can be accessed  		by Amazon EC2. For more information, see Canned ACLs in the  		Amazon S3 Service Developer Guide.
        public let imageLocation: String?
        /// Set to v2.0 to indicate that IMDSv2 is specified in the AMI. Instances launched from this AMI will have HttpTokens automatically set to required so that, by default, the instance requires that IMDSv2 is used when requesting instance metadata. In addition, HttpPutResponseHopLimit is set to 2. For more information, see Configure the AMI in the Amazon EC2 User Guide.  If you set the value to v2.0, make sure that your AMI software can support IMDSv2.
        public let imdsSupport: ImdsSupportValues?
        /// The ID of the kernel.
        public let kernelId: String?
        /// A name for your AMI. Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)
        public let name: String?
        /// The ID of the RAM disk.
        public let ramdiskId: String?
        /// The device name of the root device volume (for example, /dev/sda1).
        public let rootDeviceName: String?
        /// Set to simple to enable enhanced networking with the Intel 82599 Virtual Function interface for the AMI and any instances that you launch from the AMI. There is no way to disable sriovNetSupport at this time. This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.
        public let sriovNetSupport: String?
        /// The tags to apply to the AMI. To tag the AMI, the value for ResourceType must be image. If you specify another value for ResourceType, the request fails. To tag an AMI after it has been registered, see CreateTags.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// Set to v2.0 to enable Trusted Platform Module (TPM) support. For more information, see NitroTPM in the Amazon EC2 User Guide.
        public let tpmSupport: TpmSupportValues?
        /// Base64 representation of the non-volatile UEFI variable store. To retrieve the UEFI data, use the GetInstanceUefiData command. You can inspect and modify the UEFI data by using the python-uefivars tool on GitHub. For more information, see UEFI Secure Boot in the Amazon EC2 User Guide.
        public let uefiData: String?
        /// The type of virtualization (hvm | paravirtual). Default: paravirtual
        public let virtualizationType: String?

        public init(architecture: ArchitectureValues? = nil, billingProducts: [String]? = nil, blockDeviceMappings: [BlockDeviceMapping]? = nil, bootMode: BootModeValues? = nil, description: String? = nil, dryRun: Bool? = nil, enaSupport: Bool? = nil, imageLocation: String? = nil, imdsSupport: ImdsSupportValues? = nil, kernelId: String? = nil, name: String? = nil, ramdiskId: String? = nil, rootDeviceName: String? = nil, sriovNetSupport: String? = nil, tagSpecifications: [TagSpecification]? = nil, tpmSupport: TpmSupportValues? = nil, uefiData: String? = nil, virtualizationType: String? = nil) {
            self.architecture = architecture
            self.billingProducts = billingProducts
            self.blockDeviceMappings = blockDeviceMappings
            self.bootMode = bootMode
            self.description = description
            self.dryRun = dryRun
            self.enaSupport = enaSupport
            self.imageLocation = imageLocation
            self.imdsSupport = imdsSupport
            self.kernelId = kernelId
            self.name = name
            self.ramdiskId = ramdiskId
            self.rootDeviceName = rootDeviceName
            self.sriovNetSupport = sriovNetSupport
            self.tagSpecifications = tagSpecifications
            self.tpmSupport = tpmSupport
            self.uefiData = uefiData
            self.virtualizationType = virtualizationType
        }

        public func validate(name: String) throws {
            try self.validate(self.uefiData, name: "uefiData", parent: name, max: 64000)
        }

        private enum CodingKeys: String, CodingKey {
            case architecture = "architecture"
            case billingProducts = "BillingProduct"
            case blockDeviceMappings = "BlockDeviceMapping"
            case bootMode = "BootMode"
            case description = "description"
            case dryRun = "dryRun"
            case enaSupport = "enaSupport"
            case imageLocation = "ImageLocation"
            case imdsSupport = "ImdsSupport"
            case kernelId = "kernelId"
            case name = "name"
            case ramdiskId = "ramdiskId"
            case rootDeviceName = "rootDeviceName"
            case sriovNetSupport = "sriovNetSupport"
            case tagSpecifications = "TagSpecification"
            case tpmSupport = "TpmSupport"
            case uefiData = "UefiData"
            case virtualizationType = "virtualizationType"
        }
    }

    public struct RegisterImageResult: AWSDecodableShape {
        /// The ID of the newly registered AMI.
        public let imageId: String?

        public init(imageId: String? = nil) {
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "imageId"
        }
    }

    public struct RegisterInstanceEventNotificationAttributesRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Information about the tag keys to register.
        public let instanceTagAttribute: RegisterInstanceTagAttributeRequest?

        public init(dryRun: Bool? = nil, instanceTagAttribute: RegisterInstanceTagAttributeRequest? = nil) {
            self.dryRun = dryRun
            self.instanceTagAttribute = instanceTagAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceTagAttribute = "InstanceTagAttribute"
        }
    }

    public struct RegisterInstanceEventNotificationAttributesResult: AWSDecodableShape {
        /// The resulting set of tag keys.
        public let instanceTagAttribute: InstanceTagNotificationAttribute?

        public init(instanceTagAttribute: InstanceTagNotificationAttribute? = nil) {
            self.instanceTagAttribute = instanceTagAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case instanceTagAttribute = "instanceTagAttribute"
        }
    }

    public struct RegisterInstanceTagAttributeRequest: AWSEncodableShape {
        public struct _InstanceTagKeysEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether to register all tag keys in the current Region. Specify true  	to register all tag keys.
        public let includeAllTagsOfInstance: Bool?
        /// The tag keys to register.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceTagKeysEncoding, String>>
        public var instanceTagKeys: [String]?

        public init(includeAllTagsOfInstance: Bool? = nil, instanceTagKeys: [String]? = nil) {
            self.includeAllTagsOfInstance = includeAllTagsOfInstance
            self.instanceTagKeys = instanceTagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case includeAllTagsOfInstance = "IncludeAllTagsOfInstance"
            case instanceTagKeys = "InstanceTagKey"
        }
    }

    public struct RegisterTransitGatewayMulticastGroupMembersRequest: AWSEncodableShape {
        public struct _NetworkInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IP address assigned to the  transit gateway multicast group.
        public let groupIpAddress: String?
        /// The group members' network interface IDs to register with the  transit gateway multicast group.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInterfaceIdsEncoding, String>>
        public var networkInterfaceIds: [String]?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, groupIpAddress: String? = nil, networkInterfaceIds: [String]? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.groupIpAddress = groupIpAddress
            self.networkInterfaceIds = networkInterfaceIds
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupIpAddress = "GroupIpAddress"
            case networkInterfaceIds = "NetworkInterfaceIds"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct RegisterTransitGatewayMulticastGroupMembersResult: AWSDecodableShape {
        /// Information about the registered  transit gateway multicast group members.
        public let registeredMulticastGroupMembers: TransitGatewayMulticastRegisteredGroupMembers?

        public init(registeredMulticastGroupMembers: TransitGatewayMulticastRegisteredGroupMembers? = nil) {
            self.registeredMulticastGroupMembers = registeredMulticastGroupMembers
        }

        private enum CodingKeys: String, CodingKey {
            case registeredMulticastGroupMembers = "registeredMulticastGroupMembers"
        }
    }

    public struct RegisterTransitGatewayMulticastGroupSourcesRequest: AWSEncodableShape {
        public struct _NetworkInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IP address assigned to the  transit gateway multicast group.
        public let groupIpAddress: String?
        /// The group sources' network interface IDs to register with the  transit gateway multicast group.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInterfaceIdsEncoding, String>>
        public var networkInterfaceIds: [String]?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, groupIpAddress: String? = nil, networkInterfaceIds: [String]? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.groupIpAddress = groupIpAddress
            self.networkInterfaceIds = networkInterfaceIds
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupIpAddress = "GroupIpAddress"
            case networkInterfaceIds = "NetworkInterfaceIds"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct RegisterTransitGatewayMulticastGroupSourcesResult: AWSDecodableShape {
        /// Information about the  transit gateway multicast group sources.
        public let registeredMulticastGroupSources: TransitGatewayMulticastRegisteredGroupSources?

        public init(registeredMulticastGroupSources: TransitGatewayMulticastRegisteredGroupSources? = nil) {
            self.registeredMulticastGroupSources = registeredMulticastGroupSources
        }

        private enum CodingKeys: String, CodingKey {
            case registeredMulticastGroupSources = "registeredMulticastGroupSources"
        }
    }

    public struct RejectTransitGatewayMulticastDomainAssociationsRequest: AWSEncodableShape {
        public struct _SubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the subnets to associate with the transit gateway multicast domain.
        @OptionalCustomCoding<EC2ArrayCoder<_SubnetIdsEncoding, String>>
        public var subnetIds: [String]?
        /// The ID of the transit gateway attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, subnetIds: [String]? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.subnetIds = subnetIds
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case subnetIds = "SubnetIds"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct RejectTransitGatewayMulticastDomainAssociationsResult: AWSDecodableShape {
        /// Information about the multicast domain associations.
        public let associations: TransitGatewayMulticastDomainAssociations?

        public init(associations: TransitGatewayMulticastDomainAssociations? = nil) {
            self.associations = associations
        }

        private enum CodingKeys: String, CodingKey {
            case associations = "associations"
        }
    }

    public struct RejectTransitGatewayPeeringAttachmentRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway peering attachment.
        public let transitGatewayAttachmentId: String?

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String? = nil) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct RejectTransitGatewayPeeringAttachmentResult: AWSDecodableShape {
        /// The transit gateway peering attachment.
        public let transitGatewayPeeringAttachment: TransitGatewayPeeringAttachment?

        public init(transitGatewayPeeringAttachment: TransitGatewayPeeringAttachment? = nil) {
            self.transitGatewayPeeringAttachment = transitGatewayPeeringAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayPeeringAttachment = "transitGatewayPeeringAttachment"
        }
    }

    public struct RejectTransitGatewayVpcAttachmentRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String? = nil) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct RejectTransitGatewayVpcAttachmentResult: AWSDecodableShape {
        /// Information about the attachment.
        public let transitGatewayVpcAttachment: TransitGatewayVpcAttachment?

        public init(transitGatewayVpcAttachment: TransitGatewayVpcAttachment? = nil) {
            self.transitGatewayVpcAttachment = transitGatewayVpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayVpcAttachment = "transitGatewayVpcAttachment"
        }
    }

    public struct RejectVpcEndpointConnectionsRequest: AWSEncodableShape {
        public struct _VpcEndpointIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the service.
        public let serviceId: String?
        /// The IDs of the VPC endpoints.
        @OptionalCustomCoding<EC2ArrayCoder<_VpcEndpointIdsEncoding, String>>
        public var vpcEndpointIds: [String]?

        public init(dryRun: Bool? = nil, serviceId: String? = nil, vpcEndpointIds: [String]? = nil) {
            self.dryRun = dryRun
            self.serviceId = serviceId
            self.vpcEndpointIds = vpcEndpointIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case serviceId = "ServiceId"
            case vpcEndpointIds = "VpcEndpointId"
        }
    }

    public struct RejectVpcEndpointConnectionsResult: AWSDecodableShape {
        public struct _UnsuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the endpoints that were not rejected, if applicable.
        @OptionalCustomCoding<EC2ArrayCoder<_UnsuccessfulEncoding, UnsuccessfulItem>>
        public var unsuccessful: [UnsuccessfulItem]?

        public init(unsuccessful: [UnsuccessfulItem]? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful = "unsuccessful"
        }
    }

    public struct RejectVpcPeeringConnectionRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String?

        public init(dryRun: Bool? = nil, vpcPeeringConnectionId: String? = nil) {
            self.dryRun = dryRun
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct RejectVpcPeeringConnectionResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ReleaseAddressRequest: AWSEncodableShape {
        /// The allocation ID. This parameter is required.
        public let allocationId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses. If you provide an incorrect network border group, you receive an InvalidAddress.NotFound error.
        public let networkBorderGroup: String?
        /// Deprecated.
        public let publicIp: String?

        public init(allocationId: String? = nil, dryRun: Bool? = nil, networkBorderGroup: String? = nil, publicIp: String? = nil) {
            self.allocationId = allocationId
            self.dryRun = dryRun
            self.networkBorderGroup = networkBorderGroup
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "AllocationId"
            case dryRun = "dryRun"
            case networkBorderGroup = "NetworkBorderGroup"
            case publicIp = "PublicIp"
        }
    }

    public struct ReleaseHostsRequest: AWSEncodableShape {
        public struct _HostIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the Dedicated Hosts to release.
        @OptionalCustomCoding<EC2ArrayCoder<_HostIdsEncoding, String>>
        public var hostIds: [String]?

        public init(hostIds: [String]? = nil) {
            self.hostIds = hostIds
        }

        private enum CodingKeys: String, CodingKey {
            case hostIds = "hostId"
        }
    }

    public struct ReleaseHostsResult: AWSDecodableShape {
        public struct _SuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _UnsuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the Dedicated Hosts that were successfully released.
        @OptionalCustomCoding<EC2ArrayCoder<_SuccessfulEncoding, String>>
        public var successful: [String]?
        /// The IDs of the Dedicated Hosts that could not be released, including an error message.
        @OptionalCustomCoding<EC2ArrayCoder<_UnsuccessfulEncoding, UnsuccessfulItem>>
        public var unsuccessful: [UnsuccessfulItem]?

        public init(successful: [String]? = nil, unsuccessful: [UnsuccessfulItem]? = nil) {
            self.successful = successful
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case successful = "successful"
            case unsuccessful = "unsuccessful"
        }
    }

    public struct ReleaseIpamPoolAllocationRequest: AWSEncodableShape {
        /// The CIDR of the allocation you want to release.
        public let cidr: String?
        /// A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the allocation.
        public let ipamPoolAllocationId: String?
        /// The ID of the IPAM pool which contains the allocation you want to release.
        public let ipamPoolId: String?

        public init(cidr: String? = nil, dryRun: Bool? = nil, ipamPoolAllocationId: String? = nil, ipamPoolId: String? = nil) {
            self.cidr = cidr
            self.dryRun = dryRun
            self.ipamPoolAllocationId = ipamPoolAllocationId
            self.ipamPoolId = ipamPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case dryRun = "DryRun"
            case ipamPoolAllocationId = "IpamPoolAllocationId"
            case ipamPoolId = "IpamPoolId"
        }
    }

    public struct ReleaseIpamPoolAllocationResult: AWSDecodableShape {
        /// Indicates if the release was successful.
        public let success: Bool?

        public init(success: Bool? = nil) {
            self.success = success
        }

        private enum CodingKeys: String, CodingKey {
            case success = "success"
        }
    }

    public struct RemoveIpamOperatingRegion: AWSEncodableShape {
        /// The name of the operating Region you want to remove.
        public let regionName: String?

        public init(regionName: String? = nil) {
            self.regionName = regionName
        }

        private enum CodingKeys: String, CodingKey {
            case regionName = "RegionName"
        }
    }

    public struct RemovePrefixListEntry: AWSEncodableShape {
        /// The CIDR block.
        public let cidr: String?

        public init(cidr: String? = nil) {
            self.cidr = cidr
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
        }
    }

    public struct ReplaceIamInstanceProfileAssociationRequest: AWSEncodableShape {
        /// The ID of the existing IAM instance profile association.
        public let associationId: String?
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification?

        public init(associationId: String? = nil, iamInstanceProfile: IamInstanceProfileSpecification? = nil) {
            self.associationId = associationId
            self.iamInstanceProfile = iamInstanceProfile
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "AssociationId"
            case iamInstanceProfile = "IamInstanceProfile"
        }
    }

    public struct ReplaceIamInstanceProfileAssociationResult: AWSDecodableShape {
        /// Information about the IAM instance profile association.
        public let iamInstanceProfileAssociation: IamInstanceProfileAssociation?

        public init(iamInstanceProfileAssociation: IamInstanceProfileAssociation? = nil) {
            self.iamInstanceProfileAssociation = iamInstanceProfileAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfileAssociation = "iamInstanceProfileAssociation"
        }
    }

    public struct ReplaceNetworkAclAssociationRequest: AWSEncodableShape {
        /// The ID of the current association between the original network ACL and the subnet.
        public let associationId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the new network ACL to associate with the subnet.
        public let networkAclId: String?

        public init(associationId: String? = nil, dryRun: Bool? = nil, networkAclId: String? = nil) {
            self.associationId = associationId
            self.dryRun = dryRun
            self.networkAclId = networkAclId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case dryRun = "dryRun"
            case networkAclId = "networkAclId"
        }
    }

    public struct ReplaceNetworkAclAssociationResult: AWSDecodableShape {
        /// The ID of the new association.
        public let newAssociationId: String?

        public init(newAssociationId: String? = nil) {
            self.newAssociationId = newAssociationId
        }

        private enum CodingKeys: String, CodingKey {
            case newAssociationId = "newAssociationId"
        }
    }

    public struct ReplaceNetworkAclEntryRequest: AWSEncodableShape {
        /// The IPv4 network range to allow or deny, in CIDR notation (for example 172.16.0.0/24).
        public let cidrBlock: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether to replace the egress rule. Default: If no value is specified, we replace the ingress rule.
        public let egress: Bool?
        /// ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol
        /// 		        1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.
        public let icmpTypeCode: IcmpTypeCode?
        /// The IPv6 network range to allow or deny, in CIDR notation (for example 2001:bd8:1234:1a00::/64).
        public let ipv6CidrBlock: String?
        /// The ID of the ACL.
        public let networkAclId: String?
        /// TCP or UDP protocols: The range of ports the rule applies to.
        /// 		        Required if specifying protocol 6 (TCP) or 17 (UDP).
        public let portRange: PortRange?
        /// The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is  allowed, regardless of any ports or ICMP types or codes that you specify. If you specify  protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and  codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6)  and specify an IPv6 CIDR block, you must specify an ICMP type and code.
        public let `protocol`: String?
        /// Indicates whether to allow or deny the traffic that matches the rule.
        public let ruleAction: RuleAction?
        /// The rule number of the entry to replace.
        public let ruleNumber: Int?

        public init(cidrBlock: String? = nil, dryRun: Bool? = nil, egress: Bool? = nil, icmpTypeCode: IcmpTypeCode? = nil, ipv6CidrBlock: String? = nil, networkAclId: String? = nil, portRange: PortRange? = nil, protocol: String? = nil, ruleAction: RuleAction? = nil, ruleNumber: Int? = nil) {
            self.cidrBlock = cidrBlock
            self.dryRun = dryRun
            self.egress = egress
            self.icmpTypeCode = icmpTypeCode
            self.ipv6CidrBlock = ipv6CidrBlock
            self.networkAclId = networkAclId
            self.portRange = portRange
            self.`protocol` = `protocol`
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlock = "cidrBlock"
            case dryRun = "dryRun"
            case egress = "egress"
            case icmpTypeCode = "Icmp"
            case ipv6CidrBlock = "ipv6CidrBlock"
            case networkAclId = "networkAclId"
            case portRange = "portRange"
            case `protocol` = "protocol"
            case ruleAction = "ruleAction"
            case ruleNumber = "ruleNumber"
        }
    }

    public struct ReplaceRootVolumeTask: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The time the task completed.
        public let completeTime: String?
        /// Indicates whether the original root volume is to be deleted after the root volume  replacement task completes.
        public let deleteReplacedRootVolume: Bool?
        /// The ID of the AMI used to create the replacement root volume.
        public let imageId: String?
        /// The ID of the instance for which the root volume replacement task was created.
        public let instanceId: String?
        /// The ID of the root volume replacement task.
        public let replaceRootVolumeTaskId: String?
        /// The ID of the snapshot used to create the replacement root volume.
        public let snapshotId: String?
        /// The time the task was started.
        public let startTime: String?
        /// The tags assigned to the task.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The state of the task. The task can be in one of the following states:    pending - the replacement volume is being created.    in-progress - the original volume is being detached and the  replacement volume is being attached.    succeeded - the replacement volume has been successfully attached  to the instance and the instance is available.    failing - the replacement task is in the process of failing.    failed - the replacement task has failed but the original root  volume is still attached.    failing-detached - the replacement task is in the process of failing.  The instance might have no root volume attached.    failed-detached - the replacement task has failed and the instance  has no root volume attached.
        public let taskState: ReplaceRootVolumeTaskState?

        public init(completeTime: String? = nil, deleteReplacedRootVolume: Bool? = nil, imageId: String? = nil, instanceId: String? = nil, replaceRootVolumeTaskId: String? = nil, snapshotId: String? = nil, startTime: String? = nil, tags: [Tag]? = nil, taskState: ReplaceRootVolumeTaskState? = nil) {
            self.completeTime = completeTime
            self.deleteReplacedRootVolume = deleteReplacedRootVolume
            self.imageId = imageId
            self.instanceId = instanceId
            self.replaceRootVolumeTaskId = replaceRootVolumeTaskId
            self.snapshotId = snapshotId
            self.startTime = startTime
            self.tags = tags
            self.taskState = taskState
        }

        private enum CodingKeys: String, CodingKey {
            case completeTime = "completeTime"
            case deleteReplacedRootVolume = "deleteReplacedRootVolume"
            case imageId = "imageId"
            case instanceId = "instanceId"
            case replaceRootVolumeTaskId = "replaceRootVolumeTaskId"
            case snapshotId = "snapshotId"
            case startTime = "startTime"
            case tags = "tagSet"
            case taskState = "taskState"
        }
    }

    public struct ReplaceRouteRequest: AWSEncodableShape {
        /// [IPv4 traffic only] The ID of a carrier gateway.
        public let carrierGatewayId: String?
        /// The Amazon Resource Name (ARN) of the core network.
        public let coreNetworkArn: String?
        /// The IPv4 CIDR address block used for the destination match. The value that you
        /// 			provide must match the CIDR of an existing route in the table.
        public let destinationCidrBlock: String?
        /// The IPv6 CIDR address block used for the destination match. The value that you
        /// 			provide must match the CIDR of an existing route in the table.
        public let destinationIpv6CidrBlock: String?
        /// The ID of the prefix list for the route.
        public let destinationPrefixListId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// [IPv6 traffic only] The ID of an egress-only internet gateway.
        public let egressOnlyInternetGatewayId: String?
        /// The ID of an internet gateway or virtual private gateway.
        public let gatewayId: String?
        /// The ID of a NAT instance in your VPC.
        public let instanceId: String?
        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// Specifies whether to reset the local route to its default target (local).
        public let localTarget: Bool?
        /// [IPv4 traffic only] The ID of a NAT gateway.
        public let natGatewayId: String?
        /// The ID of a network interface.
        public let networkInterfaceId: String?
        /// The ID of the route table.
        public let routeTableId: String?
        /// The ID of a transit gateway.
        public let transitGatewayId: String?
        /// The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
        public let vpcEndpointId: String?
        /// The ID of a VPC peering connection.
        public let vpcPeeringConnectionId: String?

        public init(carrierGatewayId: String? = nil, coreNetworkArn: String? = nil, destinationCidrBlock: String? = nil, destinationIpv6CidrBlock: String? = nil, destinationPrefixListId: String? = nil, dryRun: Bool? = nil, egressOnlyInternetGatewayId: String? = nil, gatewayId: String? = nil, instanceId: String? = nil, localGatewayId: String? = nil, localTarget: Bool? = nil, natGatewayId: String? = nil, networkInterfaceId: String? = nil, routeTableId: String? = nil, transitGatewayId: String? = nil, vpcEndpointId: String? = nil, vpcPeeringConnectionId: String? = nil) {
            self.carrierGatewayId = carrierGatewayId
            self.coreNetworkArn = coreNetworkArn
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
            self.destinationPrefixListId = destinationPrefixListId
            self.dryRun = dryRun
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
            self.gatewayId = gatewayId
            self.instanceId = instanceId
            self.localGatewayId = localGatewayId
            self.localTarget = localTarget
            self.natGatewayId = natGatewayId
            self.networkInterfaceId = networkInterfaceId
            self.routeTableId = routeTableId
            self.transitGatewayId = transitGatewayId
            self.vpcEndpointId = vpcEndpointId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGatewayId = "CarrierGatewayId"
            case coreNetworkArn = "CoreNetworkArn"
            case destinationCidrBlock = "destinationCidrBlock"
            case destinationIpv6CidrBlock = "destinationIpv6CidrBlock"
            case destinationPrefixListId = "DestinationPrefixListId"
            case dryRun = "dryRun"
            case egressOnlyInternetGatewayId = "egressOnlyInternetGatewayId"
            case gatewayId = "gatewayId"
            case instanceId = "instanceId"
            case localGatewayId = "LocalGatewayId"
            case localTarget = "LocalTarget"
            case natGatewayId = "natGatewayId"
            case networkInterfaceId = "networkInterfaceId"
            case routeTableId = "routeTableId"
            case transitGatewayId = "TransitGatewayId"
            case vpcEndpointId = "VpcEndpointId"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct ReplaceRouteTableAssociationRequest: AWSEncodableShape {
        /// The association ID.
        public let associationId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the new route table to associate with the subnet.
        public let routeTableId: String?

        public init(associationId: String? = nil, dryRun: Bool? = nil, routeTableId: String? = nil) {
            self.associationId = associationId
            self.dryRun = dryRun
            self.routeTableId = routeTableId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case dryRun = "dryRun"
            case routeTableId = "routeTableId"
        }
    }

    public struct ReplaceRouteTableAssociationResult: AWSDecodableShape {
        /// The state of the association.
        public let associationState: RouteTableAssociationState?
        /// The ID of the new association.
        public let newAssociationId: String?

        public init(associationState: RouteTableAssociationState? = nil, newAssociationId: String? = nil) {
            self.associationState = associationState
            self.newAssociationId = newAssociationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationState = "associationState"
            case newAssociationId = "newAssociationId"
        }
    }

    public struct ReplaceTransitGatewayRouteRequest: AWSEncodableShape {
        /// Indicates whether traffic matching this route is to be dropped.
        public let blackhole: Bool?
        /// The CIDR range used for the destination match. Routing decisions are based on the most specific match.
        public let destinationCidrBlock: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the route table.
        public let transitGatewayRouteTableId: String?

        public init(blackhole: Bool? = nil, destinationCidrBlock: String? = nil, dryRun: Bool? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableId: String? = nil) {
            self.blackhole = blackhole
            self.destinationCidrBlock = destinationCidrBlock
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case blackhole = "Blackhole"
            case destinationCidrBlock = "DestinationCidrBlock"
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct ReplaceTransitGatewayRouteResult: AWSDecodableShape {
        /// Information about the modified route.
        public let route: TransitGatewayRoute?

        public init(route: TransitGatewayRoute? = nil) {
            self.route = route
        }

        private enum CodingKeys: String, CodingKey {
            case route = "route"
        }
    }

    public struct ReplaceVpnTunnelRequest: AWSEncodableShape {
        /// Trigger pending tunnel endpoint maintenance.
        public let applyPendingMaintenance: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Site-to-Site VPN connection.
        public let vpnConnectionId: String?
        /// The external IP address of the VPN tunnel.
        public let vpnTunnelOutsideIpAddress: String?

        public init(applyPendingMaintenance: Bool? = nil, dryRun: Bool? = nil, vpnConnectionId: String? = nil, vpnTunnelOutsideIpAddress: String? = nil) {
            self.applyPendingMaintenance = applyPendingMaintenance
            self.dryRun = dryRun
            self.vpnConnectionId = vpnConnectionId
            self.vpnTunnelOutsideIpAddress = vpnTunnelOutsideIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case applyPendingMaintenance = "ApplyPendingMaintenance"
            case dryRun = "DryRun"
            case vpnConnectionId = "VpnConnectionId"
            case vpnTunnelOutsideIpAddress = "VpnTunnelOutsideIpAddress"
        }
    }

    public struct ReplaceVpnTunnelResult: AWSDecodableShape {
        /// Confirmation of replace tunnel operation.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ReportInstanceStatusRequest: AWSEncodableShape {
        public struct _InstancesEncoding: ArrayCoderProperties { public static let member = "InstanceId" }
        public struct _ReasonCodesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Descriptive text about the health state of your instance.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The time at which the reported instance health state ended.
        public let endTime: Date?
        /// The instances.
        @OptionalCustomCoding<EC2ArrayCoder<_InstancesEncoding, String>>
        public var instances: [String]?
        /// The reason codes that describe the health state of your instance.    instance-stuck-in-state: My instance is stuck in a state.    unresponsive: My instance is unresponsive.    not-accepting-credentials: My instance is not accepting my credentials.    password-not-available: A password is not available for my instance.    performance-network: My instance is experiencing performance problems that I believe are network related.    performance-instance-store: My instance is experiencing performance problems that I believe are related to the instance stores.    performance-ebs-volume: My instance is experiencing performance problems that I believe are related to an EBS volume.    performance-other: My instance is experiencing performance problems.    other: [explain using the description parameter]
        @OptionalCustomCoding<EC2ArrayCoder<_ReasonCodesEncoding, ReportInstanceReasonCodes>>
        public var reasonCodes: [ReportInstanceReasonCodes]?
        /// The time at which the reported instance health state began.
        public let startTime: Date?
        /// The status of all instances listed.
        public let status: ReportStatusType?

        public init(description: String? = nil, dryRun: Bool? = nil, endTime: Date? = nil, instances: [String]? = nil, reasonCodes: [ReportInstanceReasonCodes]? = nil, startTime: Date? = nil, status: ReportStatusType? = nil) {
            self.description = description
            self.dryRun = dryRun
            self.endTime = endTime
            self.instances = instances
            self.reasonCodes = reasonCodes
            self.startTime = startTime
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case dryRun = "dryRun"
            case endTime = "endTime"
            case instances = "instanceId"
            case reasonCodes = "reasonCode"
            case startTime = "startTime"
            case status = "status"
        }
    }

    public struct RequestFilterPortRange: AWSEncodableShape {
        /// The first port in the range.
        public let fromPort: Int?
        /// The last port in the range.
        public let toPort: Int?

        public init(fromPort: Int? = nil, toPort: Int? = nil) {
            self.fromPort = fromPort
            self.toPort = toPort
        }

        public func validate(name: String) throws {
            try self.validate(self.fromPort, name: "fromPort", parent: name, max: 65535)
            try self.validate(self.fromPort, name: "fromPort", parent: name, min: 0)
            try self.validate(self.toPort, name: "toPort", parent: name, max: 65535)
            try self.validate(self.toPort, name: "toPort", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case fromPort = "FromPort"
            case toPort = "ToPort"
        }
    }

    public struct RequestIpamResourceTag: AWSEncodableShape {
        /// The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        public let key: String?
        /// The value for the tag.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct RequestLaunchTemplateData: AWSEncodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "BlockDeviceMapping" }
        public struct _ElasticGpuSpecificationsEncoding: ArrayCoderProperties { public static let member = "ElasticGpuSpecification" }
        public struct _ElasticInferenceAcceleratorsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _LicenseSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _NetworkInterfacesEncoding: ArrayCoderProperties { public static let member = "InstanceNetworkInterfaceSpecification" }
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "SecurityGroupId" }
        public struct _SecurityGroupsEncoding: ArrayCoderProperties { public static let member = "SecurityGroup" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "LaunchTemplateTagSpecificationRequest" }

        /// The block device mapping.
        @OptionalCustomCoding<EC2ArrayCoder<_BlockDeviceMappingsEncoding, LaunchTemplateBlockDeviceMappingRequest>>
        public var blockDeviceMappings: [LaunchTemplateBlockDeviceMappingRequest]?
        /// The Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to open, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).
        public let capacityReservationSpecification: LaunchTemplateCapacityReservationSpecificationRequest?
        /// The CPU options for the instance. For more information, see Optimizing CPU Options in the Amazon Elastic Compute Cloud User Guide.
        public let cpuOptions: LaunchTemplateCpuOptionsRequest?
        /// The credit option for CPU usage of the instance. Valid only for T instances.
        public let creditSpecification: CreditSpecificationRequest?
        /// Indicates whether to enable the instance for stop protection. For more information, see Stop protection in the Amazon Elastic Compute Cloud User Guide.
        public let disableApiStop: Bool?
        /// If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use ModifyInstanceAttribute. Alternatively, if you set InstanceInitiatedShutdownBehavior to terminate, you can terminate the instance by running the shutdown command from the instance.
        public let disableApiTermination: Bool?
        /// Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.
        public let ebsOptimized: Bool?
        /// Deprecated.  Amazon Elastic Graphics reached end of life on January 8, 2024. For  workloads that require graphics acceleration, we recommend that you use Amazon EC2 G4ad,  G4dn, or G5 instances.
        @OptionalCustomCoding<EC2ArrayCoder<_ElasticGpuSpecificationsEncoding, ElasticGpuSpecification>>
        public var elasticGpuSpecifications: [ElasticGpuSpecification]?
        /// An elastic inference accelerator to associate with the instance. Elastic inference accelerators are a resource you can attach to your Amazon EC2 instances to accelerate your Deep Learning (DL) inference workloads. You cannot specify accelerators from different generations in the same request.  Starting April 15, 2023, Amazon Web Services will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service.
        @OptionalCustomCoding<EC2ArrayCoder<_ElasticInferenceAcceleratorsEncoding, LaunchTemplateElasticInferenceAccelerator>>
        public var elasticInferenceAccelerators: [LaunchTemplateElasticInferenceAccelerator]?
        /// Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves. For more information, see  What is Amazon Web Services Nitro Enclaves? in the Amazon Web Services Nitro Enclaves User Guide. You can't enable Amazon Web Services Nitro Enclaves and hibernation on the same instance.
        public let enclaveOptions: LaunchTemplateEnclaveOptionsRequest?
        /// Indicates whether an instance is enabled for hibernation. This parameter is valid only if the instance meets the hibernation prerequisites. For more information, see Hibernate your instance in the Amazon Elastic Compute Cloud User Guide.
        public let hibernationOptions: LaunchTemplateHibernationOptionsRequest?
        /// The name or Amazon Resource Name (ARN) of an IAM instance profile.
        public let iamInstanceProfile: LaunchTemplateIamInstanceProfileSpecificationRequest?
        /// The ID of the AMI. Alternatively, you can specify a Systems Manager parameter, which will resolve to an AMI ID on launch. Valid formats:    ami-17characters00000     resolve:ssm:parameter-name     resolve:ssm:parameter-name:version-number     resolve:ssm:parameter-name:label     resolve:ssm:public-parameter     Currently, EC2 Fleet and Spot Fleet do not support specifying a Systems Manager parameter.  If the launch template will be used by an EC2 Fleet or Spot Fleet, you must specify the AMI ID.  For more information, see Use a Systems Manager parameter instead of an AMI ID in the Amazon Elastic Compute Cloud User Guide.
        public let imageId: String?
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown). Default: stop
        public let instanceInitiatedShutdownBehavior: ShutdownBehavior?
        /// The market (purchasing) option for the instances.
        public let instanceMarketOptions: LaunchTemplateInstanceMarketOptionsRequest?
        /// The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with these attributes. You must specify VCpuCount and MemoryMiB. All other attributes are optional. Any unspecified optional attribute is set to its default. When you specify multiple attributes, you get instance types that satisfy all of the specified attributes. If you specify multiple values for an attribute, you get instance types that satisfy any of the specified values. To limit the list of instance types from which Amazon EC2 can identify matching instance types,  you can use one of the following parameters, but not both in the same request:    AllowedInstanceTypes - The instance types to include in the list. All  other instance types are ignored, even if they match your specified attributes.    ExcludedInstanceTypes - The instance types to exclude from the list,  even if they match your specified attributes.    If you specify InstanceRequirements, you can't specify InstanceType. Attribute-based instance type selection is only supported when using Auto Scaling groups, EC2 Fleet, and Spot Fleet to launch instances. If you plan to use the launch template in the launch instance wizard, or with the RunInstances API or AWS::EC2::Instance Amazon Web Services CloudFormation resource, you can't specify InstanceRequirements.  For more information, see Attribute-based instance type selection for EC2 Fleet, Attribute-based instance type selection for Spot Fleet, and Spot placement score in the Amazon EC2 User Guide.
        public let instanceRequirements: InstanceRequirementsRequest?
        /// The instance type. For more information, see Instance types in the Amazon Elastic Compute Cloud User Guide. If you specify InstanceType, you can't specify InstanceRequirements.
        public let instanceType: InstanceType?
        /// The ID of the kernel.  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see User provided kernels in the Amazon Elastic Compute Cloud User Guide.
        public let kernelId: String?
        /// The name of the key pair. You can create a key pair using CreateKeyPair or ImportKeyPair.  If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.
        public let keyName: String?
        /// The license configurations.
        @OptionalCustomCoding<EC2ArrayCoder<_LicenseSpecificationsEncoding, LaunchTemplateLicenseConfigurationRequest>>
        public var licenseSpecifications: [LaunchTemplateLicenseConfigurationRequest]?
        /// The maintenance options for the instance.
        public let maintenanceOptions: LaunchTemplateInstanceMaintenanceOptionsRequest?
        /// The metadata options for the instance. For more information, see Instance metadata and user data in the Amazon Elastic Compute Cloud User Guide.
        public let metadataOptions: LaunchTemplateInstanceMetadataOptionsRequest?
        /// The monitoring for the instance.
        public let monitoring: LaunchTemplatesMonitoringRequest?
        /// One or more network interfaces. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInterfacesEncoding, LaunchTemplateInstanceNetworkInterfaceSpecificationRequest>>
        public var networkInterfaces: [LaunchTemplateInstanceNetworkInterfaceSpecificationRequest]?
        /// The placement for the instance.
        public let placement: LaunchTemplatePlacementRequest?
        /// The options for the instance hostname. The default values are inherited from the subnet.
        public let privateDnsNameOptions: LaunchTemplatePrivateDnsNameOptionsRequest?
        /// The ID of the RAM disk.  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see User provided kernels in the Amazon Elastic Compute Cloud User Guide.
        public let ramDiskId: String?
        /// One or more security group IDs. You can create a security group using CreateSecurityGroup.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?
        /// One or more security group names. For a nondefault VPC, you must use security group IDs instead.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupsEncoding, String>>
        public var securityGroups: [String]?
        /// The tags to apply to the resources that are created during instance launch. These tags are not applied to the launch template.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, LaunchTemplateTagSpecificationRequest>>
        public var tagSpecifications: [LaunchTemplateTagSpecificationRequest]?
        /// The user data to make available to the instance. You must provide base64-encoded text. User data is limited to 16 KB. For more information, see Run commands on your Linux instance at launch (Linux) or Work with instance user data (Windows) in the Amazon Elastic Compute Cloud User Guide. If you are creating the launch template for use with Batch, the user data must be provided in the  MIME multi-part archive format. For more information, see Amazon EC2 user data in launch templates in the Batch User Guide.
        public let userData: String?

        public init(blockDeviceMappings: [LaunchTemplateBlockDeviceMappingRequest]? = nil, capacityReservationSpecification: LaunchTemplateCapacityReservationSpecificationRequest? = nil, cpuOptions: LaunchTemplateCpuOptionsRequest? = nil, creditSpecification: CreditSpecificationRequest? = nil, disableApiStop: Bool? = nil, disableApiTermination: Bool? = nil, ebsOptimized: Bool? = nil, elasticGpuSpecifications: [ElasticGpuSpecification]? = nil, elasticInferenceAccelerators: [LaunchTemplateElasticInferenceAccelerator]? = nil, enclaveOptions: LaunchTemplateEnclaveOptionsRequest? = nil, hibernationOptions: LaunchTemplateHibernationOptionsRequest? = nil, iamInstanceProfile: LaunchTemplateIamInstanceProfileSpecificationRequest? = nil, imageId: String? = nil, instanceInitiatedShutdownBehavior: ShutdownBehavior? = nil, instanceMarketOptions: LaunchTemplateInstanceMarketOptionsRequest? = nil, instanceRequirements: InstanceRequirementsRequest? = nil, instanceType: InstanceType? = nil, kernelId: String? = nil, keyName: String? = nil, licenseSpecifications: [LaunchTemplateLicenseConfigurationRequest]? = nil, maintenanceOptions: LaunchTemplateInstanceMaintenanceOptionsRequest? = nil, metadataOptions: LaunchTemplateInstanceMetadataOptionsRequest? = nil, monitoring: LaunchTemplatesMonitoringRequest? = nil, networkInterfaces: [LaunchTemplateInstanceNetworkInterfaceSpecificationRequest]? = nil, placement: LaunchTemplatePlacementRequest? = nil, privateDnsNameOptions: LaunchTemplatePrivateDnsNameOptionsRequest? = nil, ramDiskId: String? = nil, securityGroupIds: [String]? = nil, securityGroups: [String]? = nil, tagSpecifications: [LaunchTemplateTagSpecificationRequest]? = nil, userData: String? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.capacityReservationSpecification = capacityReservationSpecification
            self.cpuOptions = cpuOptions
            self.creditSpecification = creditSpecification
            self.disableApiStop = disableApiStop
            self.disableApiTermination = disableApiTermination
            self.ebsOptimized = ebsOptimized
            self.elasticGpuSpecifications = elasticGpuSpecifications
            self.elasticInferenceAccelerators = elasticInferenceAccelerators
            self.enclaveOptions = enclaveOptions
            self.hibernationOptions = hibernationOptions
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.instanceMarketOptions = instanceMarketOptions
            self.instanceRequirements = instanceRequirements
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.licenseSpecifications = licenseSpecifications
            self.maintenanceOptions = maintenanceOptions
            self.metadataOptions = metadataOptions
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.privateDnsNameOptions = privateDnsNameOptions
            self.ramDiskId = ramDiskId
            self.securityGroupIds = securityGroupIds
            self.securityGroups = securityGroups
            self.tagSpecifications = tagSpecifications
            self.userData = userData
        }

        public func validate(name: String) throws {
            try self.elasticInferenceAccelerators?.forEach {
                try $0.validate(name: "\(name).elasticInferenceAccelerators[]")
            }
            try self.instanceRequirements?.validate(name: "\(name).instanceRequirements")
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "BlockDeviceMapping"
            case capacityReservationSpecification = "CapacityReservationSpecification"
            case cpuOptions = "CpuOptions"
            case creditSpecification = "CreditSpecification"
            case disableApiStop = "DisableApiStop"
            case disableApiTermination = "DisableApiTermination"
            case ebsOptimized = "EbsOptimized"
            case elasticGpuSpecifications = "ElasticGpuSpecification"
            case elasticInferenceAccelerators = "ElasticInferenceAccelerator"
            case enclaveOptions = "EnclaveOptions"
            case hibernationOptions = "HibernationOptions"
            case iamInstanceProfile = "IamInstanceProfile"
            case imageId = "ImageId"
            case instanceInitiatedShutdownBehavior = "InstanceInitiatedShutdownBehavior"
            case instanceMarketOptions = "InstanceMarketOptions"
            case instanceRequirements = "InstanceRequirements"
            case instanceType = "InstanceType"
            case kernelId = "KernelId"
            case keyName = "KeyName"
            case licenseSpecifications = "LicenseSpecification"
            case maintenanceOptions = "MaintenanceOptions"
            case metadataOptions = "MetadataOptions"
            case monitoring = "Monitoring"
            case networkInterfaces = "NetworkInterface"
            case placement = "Placement"
            case privateDnsNameOptions = "PrivateDnsNameOptions"
            case ramDiskId = "RamDiskId"
            case securityGroupIds = "SecurityGroupId"
            case securityGroups = "SecurityGroup"
            case tagSpecifications = "TagSpecification"
            case userData = "UserData"
        }
    }

    public struct RequestSpotFleetRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The configuration for the Spot Fleet request.
        public let spotFleetRequestConfig: SpotFleetRequestConfigData?

        public init(dryRun: Bool? = nil, spotFleetRequestConfig: SpotFleetRequestConfigData? = nil) {
            self.dryRun = dryRun
            self.spotFleetRequestConfig = spotFleetRequestConfig
        }

        public func validate(name: String) throws {
            try self.spotFleetRequestConfig?.validate(name: "\(name).spotFleetRequestConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case spotFleetRequestConfig = "spotFleetRequestConfig"
        }
    }

    public struct RequestSpotFleetResponse: AWSDecodableShape {
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String?

        public init(spotFleetRequestId: String? = nil) {
            self.spotFleetRequestId = spotFleetRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case spotFleetRequestId = "spotFleetRequestId"
        }
    }

    public struct RequestSpotInstancesRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The user-specified name for a logical grouping of requests. When you specify an Availability Zone group in a Spot Instance request, all Spot Instances in the request are launched in the same Availability Zone. Instance proximity is maintained with this parameter, but the choice of Availability Zone is not. The group applies only to requests for Spot Instances of the same instance type. Any additional Spot Instance requests that are specified with the same Availability Zone group name are launched in that same Availability Zone, as long as at least one instance from the group is still active. If there is no active instance running in the Availability Zone group that you specify for a new Spot Instance request (all instances are terminated, the request is expired, or the maximum price you specified falls below current Spot price), then Amazon EC2 launches the instance in any Availability Zone where the constraint can be met. Consequently, the subsequent set of Spot Instances could be placed in a different zone from the original request, even if you specified the same Availability Zone group. Default: Instances are launched in any available Availability Zone.
        public let availabilityZoneGroup: String?
        /// Deprecated.
        public let blockDurationMinutes: Int?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency in the Amazon EC2 User Guide for Linux Instances.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of Spot Instances to launch. Default: 1
        public let instanceCount: Int?
        /// The behavior when a Spot Instance is interrupted. The default is terminate.
        public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
        /// The instance launch group. Launch groups are Spot Instances that launch together and terminate together. Default: Instances are launched and terminated individually
        public let launchGroup: String?
        /// The launch specification.
        public let launchSpecification: RequestSpotLaunchSpecification?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance. We do not recommend  using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.  If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify this parameter.
        public let spotPrice: String?
        /// The key-value pair for tagging the Spot Instance request on creation. The value for ResourceType must be spot-instances-request, otherwise the Spot Instance request fails. To tag the Spot Instance request after it has been created, see CreateTags.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The Spot Instance request type. Default: one-time
        public let type: SpotInstanceType?
        /// The start date of the request. If this is a one-time request, the request becomes active at this date and time and remains active until all instances launch, the request expires, or the request is canceled. If the request is persistent, the request becomes active at this date and time and remains active until it expires or is canceled. The specified start date and time cannot be equal to the current date and time. You must specify a start date and time that occurs after the current date and time.
        public let validFrom: Date?
        /// The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ).   For a persistent request, the request remains active until the ValidUntil date and time is reached. Otherwise, the request remains active until you cancel it.    For a one-time request, the request remains active until all instances launch, the request is canceled, or the ValidUntil date and time is reached. By default, the request is valid for 7 days from the date the request was created.
        public let validUntil: Date?

        public init(availabilityZoneGroup: String? = nil, blockDurationMinutes: Int? = nil, clientToken: String? = nil, dryRun: Bool? = nil, instanceCount: Int? = nil, instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil, launchGroup: String? = nil, launchSpecification: RequestSpotLaunchSpecification? = nil, spotPrice: String? = nil, tagSpecifications: [TagSpecification]? = nil, type: SpotInstanceType? = nil, validFrom: Date? = nil, validUntil: Date? = nil) {
            self.availabilityZoneGroup = availabilityZoneGroup
            self.blockDurationMinutes = blockDurationMinutes
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.instanceCount = instanceCount
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.launchGroup = launchGroup
            self.launchSpecification = launchSpecification
            self.spotPrice = spotPrice
            self.tagSpecifications = tagSpecifications
            self.type = type
            self.validFrom = validFrom
            self.validUntil = validUntil
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZoneGroup = "availabilityZoneGroup"
            case blockDurationMinutes = "blockDurationMinutes"
            case clientToken = "clientToken"
            case dryRun = "dryRun"
            case instanceCount = "instanceCount"
            case instanceInterruptionBehavior = "InstanceInterruptionBehavior"
            case launchGroup = "launchGroup"
            case launchSpecification = "LaunchSpecification"
            case spotPrice = "spotPrice"
            case tagSpecifications = "TagSpecification"
            case type = "type"
            case validFrom = "validFrom"
            case validUntil = "validUntil"
        }
    }

    public struct RequestSpotInstancesResult: AWSDecodableShape {
        public struct _SpotInstanceRequestsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Spot Instance requests.
        @OptionalCustomCoding<EC2ArrayCoder<_SpotInstanceRequestsEncoding, SpotInstanceRequest>>
        public var spotInstanceRequests: [SpotInstanceRequest]?

        public init(spotInstanceRequests: [SpotInstanceRequest]? = nil) {
            self.spotInstanceRequests = spotInstanceRequests
        }

        private enum CodingKeys: String, CodingKey {
            case spotInstanceRequests = "spotInstanceRequestSet"
        }
    }

    public struct RequestSpotLaunchSpecification: AWSEncodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _NetworkInterfacesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Deprecated.
        public let addressingType: String?
        /// The block device mapping entries. You can't specify both a snapshot ID and an encryption value.  This is because only blank volumes can be encrypted on creation. If a snapshot is the basis for a volume,  it is not blank and its encryption status is used for the volume encryption status.
        @OptionalCustomCoding<EC2ArrayCoder<_BlockDeviceMappingsEncoding, BlockDeviceMapping>>
        public var blockDeviceMappings: [BlockDeviceMapping]?
        /// Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: false
        public let ebsOptimized: Bool?
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification?
        /// The ID of the AMI.
        public let imageId: String?
        /// The instance type. Only one instance type can be specified.
        public let instanceType: InstanceType?
        /// The ID of the kernel.
        public let kernelId: String?
        /// The name of the key pair.
        public let keyName: String?
        /// Indicates whether basic or detailed monitoring is enabled for the instance. Default: Disabled
        public let monitoring: RunInstancesMonitoringEnabled?
        /// The network interfaces. If you specify a network interface, you must specify  subnet IDs and security group IDs using the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInterfacesEncoding, InstanceNetworkInterfaceSpecification>>
        public var networkInterfaces: [InstanceNetworkInterfaceSpecification]?
        /// The placement information for the instance.
        public let placement: SpotPlacement?
        /// The ID of the RAM disk.
        public let ramdiskId: String?
        /// The IDs of the security groups.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?
        /// Not supported.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupsEncoding, String>>
        public var securityGroups: [String]?
        /// The ID of the subnet in which to launch the instance.
        public let subnetId: String?
        /// The base64-encoded user data that instances use when starting up. User data is limited to 16 KB.
        public let userData: String?

        public init(addressingType: String? = nil, blockDeviceMappings: [BlockDeviceMapping]? = nil, ebsOptimized: Bool? = nil, iamInstanceProfile: IamInstanceProfileSpecification? = nil, imageId: String? = nil, instanceType: InstanceType? = nil, kernelId: String? = nil, keyName: String? = nil, monitoring: RunInstancesMonitoringEnabled? = nil, networkInterfaces: [InstanceNetworkInterfaceSpecification]? = nil, placement: SpotPlacement? = nil, ramdiskId: String? = nil, securityGroupIds: [String]? = nil, securityGroups: [String]? = nil, subnetId: String? = nil, userData: String? = nil) {
            self.addressingType = addressingType
            self.blockDeviceMappings = blockDeviceMappings
            self.ebsOptimized = ebsOptimized
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.ramdiskId = ramdiskId
            self.securityGroupIds = securityGroupIds
            self.securityGroups = securityGroups
            self.subnetId = subnetId
            self.userData = userData
        }

        private enum CodingKeys: String, CodingKey {
            case addressingType = "addressingType"
            case blockDeviceMappings = "blockDeviceMapping"
            case ebsOptimized = "ebsOptimized"
            case iamInstanceProfile = "iamInstanceProfile"
            case imageId = "imageId"
            case instanceType = "instanceType"
            case kernelId = "kernelId"
            case keyName = "keyName"
            case monitoring = "monitoring"
            case networkInterfaces = "NetworkInterface"
            case placement = "placement"
            case ramdiskId = "ramdiskId"
            case securityGroupIds = "SecurityGroupId"
            case securityGroups = "SecurityGroup"
            case subnetId = "subnetId"
            case userData = "userData"
        }
    }

    public struct Reservation: AWSDecodableShape {
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _InstancesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Not supported.
        @OptionalCustomCoding<EC2ArrayCoder<_GroupsEncoding, GroupIdentifier>>
        public var groups: [GroupIdentifier]?
        /// The instances.
        @OptionalCustomCoding<EC2ArrayCoder<_InstancesEncoding, Instance>>
        public var instances: [Instance]?
        /// The ID of the Amazon Web Services account that owns the reservation.
        public let ownerId: String?
        /// The ID of the requester that launched the instances on your behalf (for example, Amazon Web Services Management Console or Auto Scaling).
        public let requesterId: String?
        /// The ID of the reservation.
        public let reservationId: String?

        public init(groups: [GroupIdentifier]? = nil, instances: [Instance]? = nil, ownerId: String? = nil, requesterId: String? = nil, reservationId: String? = nil) {
            self.groups = groups
            self.instances = instances
            self.ownerId = ownerId
            self.requesterId = requesterId
            self.reservationId = reservationId
        }

        private enum CodingKeys: String, CodingKey {
            case groups = "groupSet"
            case instances = "instancesSet"
            case ownerId = "ownerId"
            case requesterId = "requesterId"
            case reservationId = "reservationId"
        }
    }

    public struct ReservationFleetInstanceSpecification: AWSEncodableShape {
        /// The Availability Zone in which the Capacity Reservation Fleet reserves the capacity. A Capacity
        /// 			Reservation Fleet can't span Availability Zones. All instance type specifications that you specify
        /// 			for the Fleet must use the same Availability Zone.
        public let availabilityZone: String?
        /// The ID of the Availability Zone in which the Capacity Reservation Fleet reserves the capacity. A
        /// 			Capacity Reservation Fleet can't span Availability Zones. All instance type specifications that you
        /// 			specify for the Fleet must use the same Availability Zone.
        public let availabilityZoneId: String?
        /// Indicates whether the Capacity Reservation Fleet supports EBS-optimized instances types. This
        /// 			optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack
        /// 			to provide optimal I/O performance. This optimization isn't available with all instance types. Additional
        /// 			usage charges apply when using EBS-optimized instance types.
        public let ebsOptimized: Bool?
        /// The type of operating system for which the Capacity Reservation Fleet reserves capacity.
        public let instancePlatform: CapacityReservationInstancePlatform?
        /// The instance type for which the Capacity Reservation Fleet reserves capacity.
        public let instanceType: InstanceType?
        /// The priority to assign to the instance type. This value is used to determine which of the instance types
        /// 			specified for the Fleet should be prioritized for use. A lower value indicates a high priority. For more
        /// 			information, see Instance type priority
        /// 			in the Amazon EC2 User Guide.
        public let priority: Int?
        /// The number of capacity units provided by the specified instance type. This value, together with the
        /// 			total target capacity that you specify for the Fleet determine the number of instances for which the
        /// 			Fleet reserves capacity. Both values are based on units that make sense for your workload. For more
        /// 			information, see Total target capacity
        /// 			in the Amazon EC2 User Guide.
        public let weight: Double?

        public init(availabilityZone: String? = nil, availabilityZoneId: String? = nil, ebsOptimized: Bool? = nil, instancePlatform: CapacityReservationInstancePlatform? = nil, instanceType: InstanceType? = nil, priority: Int? = nil, weight: Double? = nil) {
            self.availabilityZone = availabilityZone
            self.availabilityZoneId = availabilityZoneId
            self.ebsOptimized = ebsOptimized
            self.instancePlatform = instancePlatform
            self.instanceType = instanceType
            self.priority = priority
            self.weight = weight
        }

        public func validate(name: String) throws {
            try self.validate(self.priority, name: "priority", parent: name, min: 0)
            try self.validate(self.weight, name: "weight", parent: name, max: 99.999)
            try self.validate(self.weight, name: "weight", parent: name, min: 0.001)
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case availabilityZoneId = "AvailabilityZoneId"
            case ebsOptimized = "EbsOptimized"
            case instancePlatform = "InstancePlatform"
            case instanceType = "InstanceType"
            case priority = "Priority"
            case weight = "Weight"
        }
    }

    public struct ReservationValue: AWSDecodableShape {
        /// The hourly rate of the reservation.
        public let hourlyPrice: String?
        /// The balance of the total value (the sum of remainingUpfrontValue + hourlyPrice * number of hours remaining).
        public let remainingTotalValue: String?
        /// The remaining upfront cost of the reservation.
        public let remainingUpfrontValue: String?

        public init(hourlyPrice: String? = nil, remainingTotalValue: String? = nil, remainingUpfrontValue: String? = nil) {
            self.hourlyPrice = hourlyPrice
            self.remainingTotalValue = remainingTotalValue
            self.remainingUpfrontValue = remainingUpfrontValue
        }

        private enum CodingKeys: String, CodingKey {
            case hourlyPrice = "hourlyPrice"
            case remainingTotalValue = "remainingTotalValue"
            case remainingUpfrontValue = "remainingUpfrontValue"
        }
    }

    public struct ReservedInstanceLimitPrice: AWSEncodableShape {
        /// Used for Reserved Instance Marketplace offerings. Specifies the limit price on the total order (instanceCount * price).
        public let amount: Double?
        /// The currency in which the limitPrice amount is specified.
        /// 				At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?

        public init(amount: Double? = nil, currencyCode: CurrencyCodeValues? = nil) {
            self.amount = amount
            self.currencyCode = currencyCode
        }

        private enum CodingKeys: String, CodingKey {
            case amount = "amount"
            case currencyCode = "currencyCode"
        }
    }

    public struct ReservedInstanceReservationValue: AWSDecodableShape {
        /// The total value of the Convertible Reserved Instance that you are exchanging.
        public let reservationValue: ReservationValue?
        /// The ID of the Convertible Reserved Instance that you are exchanging.
        public let reservedInstanceId: String?

        public init(reservationValue: ReservationValue? = nil, reservedInstanceId: String? = nil) {
            self.reservationValue = reservationValue
            self.reservedInstanceId = reservedInstanceId
        }

        private enum CodingKeys: String, CodingKey {
            case reservationValue = "reservationValue"
            case reservedInstanceId = "reservedInstanceId"
        }
    }

    public struct ReservedInstances: AWSDecodableShape {
        public struct _RecurringChargesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Availability Zone in which the Reserved Instance can be used.
        public let availabilityZone: String?
        /// The currency of the Reserved Instance. It's specified using ISO 4217 standard currency codes.
        /// 				At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The duration of the Reserved Instance, in seconds.
        public let duration: Int64?
        /// The time when the Reserved Instance expires.
        public let end: Date?
        /// The purchase price of the Reserved Instance.
        public let fixedPrice: Float?
        /// The number of reservations purchased.
        public let instanceCount: Int?
        /// The tenancy of the instance.
        public let instanceTenancy: Tenancy?
        /// The instance type on which the Reserved Instance can be used.
        public let instanceType: InstanceType?
        /// The offering class of the Reserved Instance.
        public let offeringClass: OfferingClassType?
        /// The Reserved Instance offering type.
        public let offeringType: OfferingTypeValues?
        /// The Reserved Instance product platform description.
        public let productDescription: RIProductDescription?
        /// The recurring charge tag assigned to the resource.
        @OptionalCustomCoding<EC2ArrayCoder<_RecurringChargesEncoding, RecurringCharge>>
        public var recurringCharges: [RecurringCharge]?
        /// The ID of the Reserved Instance.
        public let reservedInstancesId: String?
        /// The scope of the Reserved Instance.
        public let scope: Scope?
        /// The date and time the Reserved Instance started.
        public let start: Date?
        /// The state of the Reserved Instance purchase.
        public let state: ReservedInstanceState?
        /// Any tags assigned to the resource.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The usage price of the Reserved Instance, per hour.
        public let usagePrice: Float?

        public init(availabilityZone: String? = nil, currencyCode: CurrencyCodeValues? = nil, duration: Int64? = nil, end: Date? = nil, fixedPrice: Float? = nil, instanceCount: Int? = nil, instanceTenancy: Tenancy? = nil, instanceType: InstanceType? = nil, offeringClass: OfferingClassType? = nil, offeringType: OfferingTypeValues? = nil, productDescription: RIProductDescription? = nil, recurringCharges: [RecurringCharge]? = nil, reservedInstancesId: String? = nil, scope: Scope? = nil, start: Date? = nil, state: ReservedInstanceState? = nil, tags: [Tag]? = nil, usagePrice: Float? = nil) {
            self.availabilityZone = availabilityZone
            self.currencyCode = currencyCode
            self.duration = duration
            self.end = end
            self.fixedPrice = fixedPrice
            self.instanceCount = instanceCount
            self.instanceTenancy = instanceTenancy
            self.instanceType = instanceType
            self.offeringClass = offeringClass
            self.offeringType = offeringType
            self.productDescription = productDescription
            self.recurringCharges = recurringCharges
            self.reservedInstancesId = reservedInstancesId
            self.scope = scope
            self.start = start
            self.state = state
            self.tags = tags
            self.usagePrice = usagePrice
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case currencyCode = "currencyCode"
            case duration = "duration"
            case end = "end"
            case fixedPrice = "fixedPrice"
            case instanceCount = "instanceCount"
            case instanceTenancy = "instanceTenancy"
            case instanceType = "instanceType"
            case offeringClass = "offeringClass"
            case offeringType = "offeringType"
            case productDescription = "productDescription"
            case recurringCharges = "recurringCharges"
            case reservedInstancesId = "reservedInstancesId"
            case scope = "scope"
            case start = "start"
            case state = "state"
            case tags = "tagSet"
            case usagePrice = "usagePrice"
        }
    }

    public struct ReservedInstancesConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The Availability Zone for the modified Reserved Instances.
        public let availabilityZone: String?
        /// The number of modified Reserved Instances.  This is a required field for a request.
        public let instanceCount: Int?
        /// The instance type for the modified Reserved Instances.
        public let instanceType: InstanceType?
        /// The network platform of the modified Reserved Instances.
        public let platform: String?
        /// Whether the Reserved Instance is applied to instances in a Region or instances in a specific Availability Zone.
        public let scope: Scope?

        public init(availabilityZone: String? = nil, instanceCount: Int? = nil, instanceType: InstanceType? = nil, platform: String? = nil, scope: Scope? = nil) {
            self.availabilityZone = availabilityZone
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.platform = platform
            self.scope = scope
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case instanceCount = "instanceCount"
            case instanceType = "instanceType"
            case platform = "platform"
            case scope = "scope"
        }
    }

    public struct ReservedInstancesId: AWSDecodableShape {
        /// The ID of the Reserved Instance.
        public let reservedInstancesId: String?

        public init(reservedInstancesId: String? = nil) {
            self.reservedInstancesId = reservedInstancesId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesId = "reservedInstancesId"
        }
    }

    public struct ReservedInstancesListing: AWSDecodableShape {
        public struct _InstanceCountsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PriceSchedulesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A unique, case-sensitive key supplied by the client to ensure that the request is
        /// 			idempotent. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// The time the listing was created.
        public let createDate: Date?
        /// The number of instances in this state.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceCountsEncoding, InstanceCount>>
        public var instanceCounts: [InstanceCount]?
        /// The price of the Reserved Instance listing.
        @OptionalCustomCoding<EC2ArrayCoder<_PriceSchedulesEncoding, PriceSchedule>>
        public var priceSchedules: [PriceSchedule]?
        /// The ID of the Reserved Instance.
        public let reservedInstancesId: String?
        /// The ID of the Reserved Instance listing.
        public let reservedInstancesListingId: String?
        /// The status of the Reserved Instance listing.
        public let status: ListingStatus?
        /// The reason for the current status of the Reserved Instance listing. The response can be blank.
        public let statusMessage: String?
        /// Any tags assigned to the resource.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The last modified timestamp of the listing.
        public let updateDate: Date?

        public init(clientToken: String? = nil, createDate: Date? = nil, instanceCounts: [InstanceCount]? = nil, priceSchedules: [PriceSchedule]? = nil, reservedInstancesId: String? = nil, reservedInstancesListingId: String? = nil, status: ListingStatus? = nil, statusMessage: String? = nil, tags: [Tag]? = nil, updateDate: Date? = nil) {
            self.clientToken = clientToken
            self.createDate = createDate
            self.instanceCounts = instanceCounts
            self.priceSchedules = priceSchedules
            self.reservedInstancesId = reservedInstancesId
            self.reservedInstancesListingId = reservedInstancesListingId
            self.status = status
            self.statusMessage = statusMessage
            self.tags = tags
            self.updateDate = updateDate
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case createDate = "createDate"
            case instanceCounts = "instanceCounts"
            case priceSchedules = "priceSchedules"
            case reservedInstancesId = "reservedInstancesId"
            case reservedInstancesListingId = "reservedInstancesListingId"
            case status = "status"
            case statusMessage = "statusMessage"
            case tags = "tagSet"
            case updateDate = "updateDate"
        }
    }

    public struct ReservedInstancesModification: AWSDecodableShape {
        public struct _ModificationResultsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ReservedInstancesIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A unique, case-sensitive key supplied by the client to ensure that the request is idempotent.
        /// 			For more information, see Ensuring
        /// 				Idempotency.
        public let clientToken: String?
        /// The time when the modification request was created.
        public let createDate: Date?
        /// The time for the modification to become effective.
        public let effectiveDate: Date?
        /// Contains target configurations along with their corresponding new Reserved Instance IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_ModificationResultsEncoding, ReservedInstancesModificationResult>>
        public var modificationResults: [ReservedInstancesModificationResult]?
        /// The IDs of one or more Reserved Instances.
        @OptionalCustomCoding<EC2ArrayCoder<_ReservedInstancesIdsEncoding, ReservedInstancesId>>
        public var reservedInstancesIds: [ReservedInstancesId]?
        /// A unique ID for the Reserved Instance modification.
        public let reservedInstancesModificationId: String?
        /// The status of the Reserved Instances modification request.
        public let status: String?
        /// The reason for the status.
        public let statusMessage: String?
        /// The time when the modification request was last updated.
        public let updateDate: Date?

        public init(clientToken: String? = nil, createDate: Date? = nil, effectiveDate: Date? = nil, modificationResults: [ReservedInstancesModificationResult]? = nil, reservedInstancesIds: [ReservedInstancesId]? = nil, reservedInstancesModificationId: String? = nil, status: String? = nil, statusMessage: String? = nil, updateDate: Date? = nil) {
            self.clientToken = clientToken
            self.createDate = createDate
            self.effectiveDate = effectiveDate
            self.modificationResults = modificationResults
            self.reservedInstancesIds = reservedInstancesIds
            self.reservedInstancesModificationId = reservedInstancesModificationId
            self.status = status
            self.statusMessage = statusMessage
            self.updateDate = updateDate
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case createDate = "createDate"
            case effectiveDate = "effectiveDate"
            case modificationResults = "modificationResultSet"
            case reservedInstancesIds = "reservedInstancesSet"
            case reservedInstancesModificationId = "reservedInstancesModificationId"
            case status = "status"
            case statusMessage = "statusMessage"
            case updateDate = "updateDate"
        }
    }

    public struct ReservedInstancesModificationResult: AWSDecodableShape {
        /// The ID for the Reserved Instances that were created as part of the modification request. This field is only available when the modification is fulfilled.
        public let reservedInstancesId: String?
        /// The target Reserved Instances configurations supplied as part of the modification request.
        public let targetConfiguration: ReservedInstancesConfiguration?

        public init(reservedInstancesId: String? = nil, targetConfiguration: ReservedInstancesConfiguration? = nil) {
            self.reservedInstancesId = reservedInstancesId
            self.targetConfiguration = targetConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesId = "reservedInstancesId"
            case targetConfiguration = "targetConfiguration"
        }
    }

    public struct ReservedInstancesOffering: AWSDecodableShape {
        public struct _PricingDetailsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RecurringChargesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Availability Zone in which the Reserved Instance can be used.
        public let availabilityZone: String?
        /// The currency of the Reserved Instance offering you are purchasing. It's
        /// 				specified using ISO 4217 standard currency codes. At this time,
        /// 				the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The duration of the Reserved Instance, in seconds.
        public let duration: Int64?
        /// The purchase price of the Reserved Instance.
        public let fixedPrice: Float?
        /// The tenancy of the instance.
        public let instanceTenancy: Tenancy?
        /// The instance type on which the Reserved Instance can be used.
        public let instanceType: InstanceType?
        /// Indicates whether the offering is available through the Reserved Instance Marketplace (resale) or Amazon Web Services.  If it's a Reserved Instance Marketplace offering, this is true.
        public let marketplace: Bool?
        /// If convertible it can be exchanged for Reserved Instances of the same or higher monetary value, with different configurations. If standard, it is not  possible to perform an exchange.
        public let offeringClass: OfferingClassType?
        /// The Reserved Instance offering type.
        public let offeringType: OfferingTypeValues?
        /// The pricing details of the Reserved Instance offering.
        @OptionalCustomCoding<EC2ArrayCoder<_PricingDetailsEncoding, PricingDetail>>
        public var pricingDetails: [PricingDetail]?
        /// The Reserved Instance product platform description.
        public let productDescription: RIProductDescription?
        /// The recurring charge tag assigned to the resource.
        @OptionalCustomCoding<EC2ArrayCoder<_RecurringChargesEncoding, RecurringCharge>>
        public var recurringCharges: [RecurringCharge]?
        /// The ID of the Reserved Instance offering. This is the offering ID used in GetReservedInstancesExchangeQuote  to confirm that an exchange can be made.
        public let reservedInstancesOfferingId: String?
        /// Whether the Reserved Instance is applied to instances in a Region or an Availability Zone.
        public let scope: Scope?
        /// The usage price of the Reserved Instance, per hour.
        public let usagePrice: Float?

        public init(availabilityZone: String? = nil, currencyCode: CurrencyCodeValues? = nil, duration: Int64? = nil, fixedPrice: Float? = nil, instanceTenancy: Tenancy? = nil, instanceType: InstanceType? = nil, marketplace: Bool? = nil, offeringClass: OfferingClassType? = nil, offeringType: OfferingTypeValues? = nil, pricingDetails: [PricingDetail]? = nil, productDescription: RIProductDescription? = nil, recurringCharges: [RecurringCharge]? = nil, reservedInstancesOfferingId: String? = nil, scope: Scope? = nil, usagePrice: Float? = nil) {
            self.availabilityZone = availabilityZone
            self.currencyCode = currencyCode
            self.duration = duration
            self.fixedPrice = fixedPrice
            self.instanceTenancy = instanceTenancy
            self.instanceType = instanceType
            self.marketplace = marketplace
            self.offeringClass = offeringClass
            self.offeringType = offeringType
            self.pricingDetails = pricingDetails
            self.productDescription = productDescription
            self.recurringCharges = recurringCharges
            self.reservedInstancesOfferingId = reservedInstancesOfferingId
            self.scope = scope
            self.usagePrice = usagePrice
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case currencyCode = "currencyCode"
            case duration = "duration"
            case fixedPrice = "fixedPrice"
            case instanceTenancy = "instanceTenancy"
            case instanceType = "instanceType"
            case marketplace = "marketplace"
            case offeringClass = "offeringClass"
            case offeringType = "offeringType"
            case pricingDetails = "pricingDetailsSet"
            case productDescription = "productDescription"
            case recurringCharges = "recurringCharges"
            case reservedInstancesOfferingId = "reservedInstancesOfferingId"
            case scope = "scope"
            case usagePrice = "usagePrice"
        }
    }

    public struct ResetAddressAttributeRequest: AWSEncodableShape {
        /// [EC2-VPC] The allocation ID.
        public let allocationId: String?
        /// The attribute of the IP address.
        public let attribute: AddressAttributeName?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(allocationId: String? = nil, attribute: AddressAttributeName? = nil, dryRun: Bool? = nil) {
            self.allocationId = allocationId
            self.attribute = attribute
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "AllocationId"
            case attribute = "Attribute"
            case dryRun = "DryRun"
        }
    }

    public struct ResetAddressAttributeResult: AWSDecodableShape {
        /// Information about the IP address.
        public let address: AddressAttribute?

        public init(address: AddressAttribute? = nil) {
            self.address = address
        }

        private enum CodingKeys: String, CodingKey {
            case address = "address"
        }
    }

    public struct ResetEbsDefaultKmsKeyIdRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct ResetEbsDefaultKmsKeyIdResult: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the default KMS key for EBS encryption by default.
        public let kmsKeyId: String?

        public init(kmsKeyId: String? = nil) {
            self.kmsKeyId = kmsKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "kmsKeyId"
        }
    }

    public struct ResetFpgaImageAttributeRequest: AWSEncodableShape {
        /// The attribute.
        public let attribute: ResetFpgaImageAttributeName?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AFI.
        public let fpgaImageId: String?

        public init(attribute: ResetFpgaImageAttributeName? = nil, dryRun: Bool? = nil, fpgaImageId: String? = nil) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.fpgaImageId = fpgaImageId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case dryRun = "DryRun"
            case fpgaImageId = "FpgaImageId"
        }
    }

    public struct ResetFpgaImageAttributeResult: AWSDecodableShape {
        /// Is true if the request succeeds, and an error otherwise.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ResetImageAttributeRequest: AWSEncodableShape {
        /// The attribute to reset (currently you can only reset the launch permission attribute).
        public let attribute: ResetImageAttributeName?
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI.
        public let imageId: String?

        public init(attribute: ResetImageAttributeName? = nil, dryRun: Bool? = nil, imageId: String? = nil) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case dryRun = "dryRun"
            case imageId = "ImageId"
        }
    }

    public struct ResetInstanceAttributeRequest: AWSEncodableShape {
        /// The attribute to reset.  You can only reset the following attributes: kernel | ramdisk | sourceDestCheck.
        public let attribute: InstanceAttributeName?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String?

        public init(attribute: InstanceAttributeName? = nil, dryRun: Bool? = nil, instanceId: String? = nil) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "attribute"
            case dryRun = "dryRun"
            case instanceId = "instanceId"
        }
    }

    public struct ResetNetworkInterfaceAttributeRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The source/destination checking attribute. Resets the value to true.
        public let sourceDestCheck: String?

        public init(dryRun: Bool? = nil, networkInterfaceId: String? = nil, sourceDestCheck: String? = nil) {
            self.dryRun = dryRun
            self.networkInterfaceId = networkInterfaceId
            self.sourceDestCheck = sourceDestCheck
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case networkInterfaceId = "networkInterfaceId"
            case sourceDestCheck = "sourceDestCheck"
        }
    }

    public struct ResetSnapshotAttributeRequest: AWSEncodableShape {
        /// The attribute to reset. Currently, only the attribute for permission to create volumes can be reset.
        public let attribute: SnapshotAttributeName?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the snapshot.
        public let snapshotId: String?

        public init(attribute: SnapshotAttributeName? = nil, dryRun: Bool? = nil, snapshotId: String? = nil) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case dryRun = "dryRun"
            case snapshotId = "SnapshotId"
        }
    }

    public struct ResourceStatement: AWSDecodableShape {
        public struct _ResourcesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ResourceTypesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The resources.
        @OptionalCustomCoding<EC2ArrayCoder<_ResourcesEncoding, String>>
        public var resources: [String]?
        /// The resource types.
        @OptionalCustomCoding<EC2ArrayCoder<_ResourceTypesEncoding, String>>
        public var resourceTypes: [String]?

        public init(resources: [String]? = nil, resourceTypes: [String]? = nil) {
            self.resources = resources
            self.resourceTypes = resourceTypes
        }

        private enum CodingKeys: String, CodingKey {
            case resources = "resourceSet"
            case resourceTypes = "resourceTypeSet"
        }
    }

    public struct ResourceStatementRequest: AWSEncodableShape {
        public struct _ResourcesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ResourceTypesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The resources.
        @OptionalCustomCoding<EC2ArrayCoder<_ResourcesEncoding, String>>
        public var resources: [String]?
        /// The resource types.
        @OptionalCustomCoding<EC2ArrayCoder<_ResourceTypesEncoding, String>>
        public var resourceTypes: [String]?

        public init(resources: [String]? = nil, resourceTypes: [String]? = nil) {
            self.resources = resources
            self.resourceTypes = resourceTypes
        }

        private enum CodingKeys: String, CodingKey {
            case resources = "Resource"
            case resourceTypes = "ResourceType"
        }
    }

    public struct ResponseError: AWSDecodableShape {
        /// The error code.
        public let code: LaunchTemplateErrorCode?
        /// The error message, if applicable.
        public let message: String?

        public init(code: LaunchTemplateErrorCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct ResponseLaunchTemplateData: AWSDecodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ElasticGpuSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ElasticInferenceAcceleratorsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _LicenseSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _NetworkInterfacesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The block device mappings.
        @OptionalCustomCoding<EC2ArrayCoder<_BlockDeviceMappingsEncoding, LaunchTemplateBlockDeviceMapping>>
        public var blockDeviceMappings: [LaunchTemplateBlockDeviceMapping]?
        /// Information about the Capacity Reservation targeting option.
        public let capacityReservationSpecification: LaunchTemplateCapacityReservationSpecificationResponse?
        /// The CPU options for the instance. For more information, see Optimizing CPU options in the Amazon Elastic Compute Cloud User Guide.
        public let cpuOptions: LaunchTemplateCpuOptions?
        /// The credit option for CPU usage of the instance.
        public let creditSpecification: CreditSpecification?
        /// Indicates whether the instance is enabled for stop protection. For more information, see Stop protection in the Amazon Elastic Compute Cloud User Guide.
        public let disableApiStop: Bool?
        /// If set to true, indicates that the instance cannot be terminated using the Amazon EC2 console, command line tool, or API.
        public let disableApiTermination: Bool?
        /// Indicates whether the instance is optimized for Amazon EBS I/O.
        public let ebsOptimized: Bool?
        /// Deprecated.  Amazon Elastic Graphics reached end of life on January 8, 2024. For  workloads that require graphics acceleration, we recommend that you use Amazon EC2 G4ad,  G4dn, or G5 instances.
        @OptionalCustomCoding<EC2ArrayCoder<_ElasticGpuSpecificationsEncoding, ElasticGpuSpecificationResponse>>
        public var elasticGpuSpecifications: [ElasticGpuSpecificationResponse]?
        /// An elastic inference accelerator to associate with the instance. Elastic inference accelerators are a resource you can attach to your Amazon EC2 instances to accelerate your Deep Learning (DL) inference workloads. You cannot specify accelerators from different generations in the same request.  Starting April 15, 2023, Amazon Web Services will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service.
        @OptionalCustomCoding<EC2ArrayCoder<_ElasticInferenceAcceleratorsEncoding, LaunchTemplateElasticInferenceAcceleratorResponse>>
        public var elasticInferenceAccelerators: [LaunchTemplateElasticInferenceAcceleratorResponse]?
        /// Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves.
        public let enclaveOptions: LaunchTemplateEnclaveOptions?
        /// Indicates whether an instance is configured for hibernation. For more information, see Hibernate your instance in the Amazon Elastic Compute Cloud User Guide.
        public let hibernationOptions: LaunchTemplateHibernationOptions?
        /// The IAM instance profile.
        public let iamInstanceProfile: LaunchTemplateIamInstanceProfileSpecification?
        /// The ID of the AMI or a Systems Manager parameter. The Systems Manager parameter will resolve to the ID of the AMI at instance launch. The value depends on what you specified in the request. The possible values are:   If an AMI ID was specified in the request, then this is the AMI ID.   If a Systems Manager parameter was specified in the request, and ResolveAlias was configured as true, then this is the AMI ID that the parameter is mapped to in the Parameter Store.   If a Systems Manager parameter was specified in the request, and ResolveAlias was configured as false, then this is the parameter value.   For more information, see Use a Systems  Manager parameter instead of an AMI ID in the Amazon Elastic Compute Cloud User Guide.
        public let imageId: String?
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
        public let instanceInitiatedShutdownBehavior: ShutdownBehavior?
        /// The market (purchasing) option for the instances.
        public let instanceMarketOptions: LaunchTemplateInstanceMarketOptions?
        /// The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with these attributes. If you specify InstanceRequirements, you can't specify InstanceTypes.
        public let instanceRequirements: InstanceRequirements?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The ID of the kernel, if applicable.
        public let kernelId: String?
        /// The name of the key pair.
        public let keyName: String?
        /// The license configurations.
        @OptionalCustomCoding<EC2ArrayCoder<_LicenseSpecificationsEncoding, LaunchTemplateLicenseConfiguration>>
        public var licenseSpecifications: [LaunchTemplateLicenseConfiguration]?
        /// The maintenance options for your instance.
        public let maintenanceOptions: LaunchTemplateInstanceMaintenanceOptions?
        /// The metadata options for the instance. For more information, see Instance metadata and user data in the Amazon Elastic Compute Cloud User Guide.
        public let metadataOptions: LaunchTemplateInstanceMetadataOptions?
        /// The monitoring for the instance.
        public let monitoring: LaunchTemplatesMonitoring?
        /// The network interfaces.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInterfacesEncoding, LaunchTemplateInstanceNetworkInterfaceSpecification>>
        public var networkInterfaces: [LaunchTemplateInstanceNetworkInterfaceSpecification]?
        /// The placement of the instance.
        public let placement: LaunchTemplatePlacement?
        /// The options for the instance hostname.
        public let privateDnsNameOptions: LaunchTemplatePrivateDnsNameOptions?
        /// The ID of the RAM disk, if applicable.
        public let ramDiskId: String?
        /// The security group IDs.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?
        /// The security group names.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupsEncoding, String>>
        public var securityGroups: [String]?
        /// The tags that are applied to the resources that are created during instance launch.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, LaunchTemplateTagSpecification>>
        public var tagSpecifications: [LaunchTemplateTagSpecification]?
        /// The user data for the instance.
        public let userData: String?

        public init(blockDeviceMappings: [LaunchTemplateBlockDeviceMapping]? = nil, capacityReservationSpecification: LaunchTemplateCapacityReservationSpecificationResponse? = nil, cpuOptions: LaunchTemplateCpuOptions? = nil, creditSpecification: CreditSpecification? = nil, disableApiStop: Bool? = nil, disableApiTermination: Bool? = nil, ebsOptimized: Bool? = nil, elasticGpuSpecifications: [ElasticGpuSpecificationResponse]? = nil, elasticInferenceAccelerators: [LaunchTemplateElasticInferenceAcceleratorResponse]? = nil, enclaveOptions: LaunchTemplateEnclaveOptions? = nil, hibernationOptions: LaunchTemplateHibernationOptions? = nil, iamInstanceProfile: LaunchTemplateIamInstanceProfileSpecification? = nil, imageId: String? = nil, instanceInitiatedShutdownBehavior: ShutdownBehavior? = nil, instanceMarketOptions: LaunchTemplateInstanceMarketOptions? = nil, instanceRequirements: InstanceRequirements? = nil, instanceType: InstanceType? = nil, kernelId: String? = nil, keyName: String? = nil, licenseSpecifications: [LaunchTemplateLicenseConfiguration]? = nil, maintenanceOptions: LaunchTemplateInstanceMaintenanceOptions? = nil, metadataOptions: LaunchTemplateInstanceMetadataOptions? = nil, monitoring: LaunchTemplatesMonitoring? = nil, networkInterfaces: [LaunchTemplateInstanceNetworkInterfaceSpecification]? = nil, placement: LaunchTemplatePlacement? = nil, privateDnsNameOptions: LaunchTemplatePrivateDnsNameOptions? = nil, ramDiskId: String? = nil, securityGroupIds: [String]? = nil, securityGroups: [String]? = nil, tagSpecifications: [LaunchTemplateTagSpecification]? = nil, userData: String? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.capacityReservationSpecification = capacityReservationSpecification
            self.cpuOptions = cpuOptions
            self.creditSpecification = creditSpecification
            self.disableApiStop = disableApiStop
            self.disableApiTermination = disableApiTermination
            self.ebsOptimized = ebsOptimized
            self.elasticGpuSpecifications = elasticGpuSpecifications
            self.elasticInferenceAccelerators = elasticInferenceAccelerators
            self.enclaveOptions = enclaveOptions
            self.hibernationOptions = hibernationOptions
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.instanceMarketOptions = instanceMarketOptions
            self.instanceRequirements = instanceRequirements
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.licenseSpecifications = licenseSpecifications
            self.maintenanceOptions = maintenanceOptions
            self.metadataOptions = metadataOptions
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.privateDnsNameOptions = privateDnsNameOptions
            self.ramDiskId = ramDiskId
            self.securityGroupIds = securityGroupIds
            self.securityGroups = securityGroups
            self.tagSpecifications = tagSpecifications
            self.userData = userData
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "blockDeviceMappingSet"
            case capacityReservationSpecification = "capacityReservationSpecification"
            case cpuOptions = "cpuOptions"
            case creditSpecification = "creditSpecification"
            case disableApiStop = "disableApiStop"
            case disableApiTermination = "disableApiTermination"
            case ebsOptimized = "ebsOptimized"
            case elasticGpuSpecifications = "elasticGpuSpecificationSet"
            case elasticInferenceAccelerators = "elasticInferenceAcceleratorSet"
            case enclaveOptions = "enclaveOptions"
            case hibernationOptions = "hibernationOptions"
            case iamInstanceProfile = "iamInstanceProfile"
            case imageId = "imageId"
            case instanceInitiatedShutdownBehavior = "instanceInitiatedShutdownBehavior"
            case instanceMarketOptions = "instanceMarketOptions"
            case instanceRequirements = "instanceRequirements"
            case instanceType = "instanceType"
            case kernelId = "kernelId"
            case keyName = "keyName"
            case licenseSpecifications = "licenseSet"
            case maintenanceOptions = "maintenanceOptions"
            case metadataOptions = "metadataOptions"
            case monitoring = "monitoring"
            case networkInterfaces = "networkInterfaceSet"
            case placement = "placement"
            case privateDnsNameOptions = "privateDnsNameOptions"
            case ramDiskId = "ramDiskId"
            case securityGroupIds = "securityGroupIdSet"
            case securityGroups = "securityGroupSet"
            case tagSpecifications = "tagSpecificationSet"
            case userData = "userData"
        }
    }

    public struct RestoreAddressToClassicRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Elastic IP address.
        public let publicIp: String?

        public init(dryRun: Bool? = nil, publicIp: String? = nil) {
            self.dryRun = dryRun
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case publicIp = "publicIp"
        }
    }

    public struct RestoreAddressToClassicResult: AWSDecodableShape {
        /// The Elastic IP address.
        public let publicIp: String?
        /// The move status for the IP address.
        public let status: Status?

        public init(publicIp: String? = nil, status: Status? = nil) {
            self.publicIp = publicIp
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case publicIp = "publicIp"
            case status = "status"
        }
    }

    public struct RestoreImageFromRecycleBinRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,
        /// 			and provides an error response. If you have the required permissions, the error response is
        /// 			DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI to restore.
        public let imageId: String?

        public init(dryRun: Bool? = nil, imageId: String? = nil) {
            self.dryRun = dryRun
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case imageId = "ImageId"
        }
    }

    public struct RestoreImageFromRecycleBinResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct RestoreManagedPrefixListVersionRequest: AWSEncodableShape {
        /// The current version number for the prefix list.
        public let currentVersion: Int64?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the prefix list.
        public let prefixListId: String?
        /// The version to restore.
        public let previousVersion: Int64?

        public init(currentVersion: Int64? = nil, dryRun: Bool? = nil, prefixListId: String? = nil, previousVersion: Int64? = nil) {
            self.currentVersion = currentVersion
            self.dryRun = dryRun
            self.prefixListId = prefixListId
            self.previousVersion = previousVersion
        }

        private enum CodingKeys: String, CodingKey {
            case currentVersion = "CurrentVersion"
            case dryRun = "DryRun"
            case prefixListId = "PrefixListId"
            case previousVersion = "PreviousVersion"
        }
    }

    public struct RestoreManagedPrefixListVersionResult: AWSDecodableShape {
        /// Information about the prefix list.
        public let prefixList: ManagedPrefixList?

        public init(prefixList: ManagedPrefixList? = nil) {
            self.prefixList = prefixList
        }

        private enum CodingKeys: String, CodingKey {
            case prefixList = "prefixList"
        }
    }

    public struct RestoreSnapshotFromRecycleBinRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the snapshot to restore.
        public let snapshotId: String?

        public init(dryRun: Bool? = nil, snapshotId: String? = nil) {
            self.dryRun = dryRun
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case snapshotId = "SnapshotId"
        }
    }

    public struct RestoreSnapshotFromRecycleBinResult: AWSDecodableShape {
        /// The description for the snapshot.
        public let description: String?
        /// Indicates whether the snapshot is encrypted.
        public let encrypted: Bool?
        /// The ARN of the Outpost on which the snapshot is stored. For more information, see Amazon EBS local snapshots on Outposts in the  Amazon EBS User Guide.
        public let outpostArn: String?
        /// The ID of the Amazon Web Services account that owns the EBS snapshot.
        public let ownerId: String?
        /// The progress of the snapshot, as a percentage.
        public let progress: String?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// Reserved for future use.
        public let sseType: SSEType?
        /// The time stamp when the snapshot was initiated.
        public let startTime: Date?
        /// The state of the snapshot.
        public let state: SnapshotState?
        /// The ID of the volume that was used to create the snapshot.
        public let volumeId: String?
        /// The size of the volume, in GiB.
        public let volumeSize: Int?

        public init(description: String? = nil, encrypted: Bool? = nil, outpostArn: String? = nil, ownerId: String? = nil, progress: String? = nil, snapshotId: String? = nil, sseType: SSEType? = nil, startTime: Date? = nil, state: SnapshotState? = nil, volumeId: String? = nil, volumeSize: Int? = nil) {
            self.description = description
            self.encrypted = encrypted
            self.outpostArn = outpostArn
            self.ownerId = ownerId
            self.progress = progress
            self.snapshotId = snapshotId
            self.sseType = sseType
            self.startTime = startTime
            self.state = state
            self.volumeId = volumeId
            self.volumeSize = volumeSize
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case encrypted = "encrypted"
            case outpostArn = "outpostArn"
            case ownerId = "ownerId"
            case progress = "progress"
            case snapshotId = "snapshotId"
            case sseType = "sseType"
            case startTime = "startTime"
            case state = "status"
            case volumeId = "volumeId"
            case volumeSize = "volumeSize"
        }
    }

    public struct RestoreSnapshotTierRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether to permanently restore an archived snapshot. To permanently restore  an archived snapshot, specify true and omit the  RestoreSnapshotTierRequest$TemporaryRestoreDays parameter.
        public let permanentRestore: Bool?
        /// The ID of the snapshot to restore.
        public let snapshotId: String?
        /// Specifies the number of days for which to temporarily restore an archived snapshot.  Required for temporary restores only. The snapshot will be automatically re-archived  after this period. To temporarily restore an archived snapshot, specify the number of days and omit  the PermanentRestore parameter or set it to  false.
        public let temporaryRestoreDays: Int?

        public init(dryRun: Bool? = nil, permanentRestore: Bool? = nil, snapshotId: String? = nil, temporaryRestoreDays: Int? = nil) {
            self.dryRun = dryRun
            self.permanentRestore = permanentRestore
            self.snapshotId = snapshotId
            self.temporaryRestoreDays = temporaryRestoreDays
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case permanentRestore = "PermanentRestore"
            case snapshotId = "SnapshotId"
            case temporaryRestoreDays = "TemporaryRestoreDays"
        }
    }

    public struct RestoreSnapshotTierResult: AWSDecodableShape {
        /// Indicates whether the snapshot is permanently restored. true indicates a permanent  restore. false indicates a temporary restore.
        public let isPermanentRestore: Bool?
        /// For temporary restores only. The number of days for which the archived snapshot  is temporarily restored.
        public let restoreDuration: Int?
        /// The date and time when the snapshot restore process started.
        public let restoreStartTime: Date?
        /// The ID of the snapshot.
        public let snapshotId: String?

        public init(isPermanentRestore: Bool? = nil, restoreDuration: Int? = nil, restoreStartTime: Date? = nil, snapshotId: String? = nil) {
            self.isPermanentRestore = isPermanentRestore
            self.restoreDuration = restoreDuration
            self.restoreStartTime = restoreStartTime
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case isPermanentRestore = "isPermanentRestore"
            case restoreDuration = "restoreDuration"
            case restoreStartTime = "restoreStartTime"
            case snapshotId = "snapshotId"
        }
    }

    public struct RevokeClientVpnIngressRequest: AWSEncodableShape {
        /// The ID of the Active Directory group for which to revoke access.
        public let accessGroupId: String?
        /// The ID of the Client VPN endpoint with which the authorization rule is associated.
        public let clientVpnEndpointId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether access should be revoked for all clients.
        public let revokeAllGroups: Bool?
        /// The IPv4 address range, in CIDR notation, of the network for which access is being removed.
        public let targetNetworkCidr: String?

        public init(accessGroupId: String? = nil, clientVpnEndpointId: String? = nil, dryRun: Bool? = nil, revokeAllGroups: Bool? = nil, targetNetworkCidr: String? = nil) {
            self.accessGroupId = accessGroupId
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
            self.revokeAllGroups = revokeAllGroups
            self.targetNetworkCidr = targetNetworkCidr
        }

        private enum CodingKeys: String, CodingKey {
            case accessGroupId = "AccessGroupId"
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
            case revokeAllGroups = "RevokeAllGroups"
            case targetNetworkCidr = "TargetNetworkCidr"
        }
    }

    public struct RevokeClientVpnIngressResult: AWSDecodableShape {
        /// The current state of the authorization rule.
        public let status: ClientVpnAuthorizationRuleStatus?

        public init(status: ClientVpnAuthorizationRuleStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
        }
    }

    public struct RevokeSecurityGroupEgressRequest: AWSEncodableShape {
        public struct _IpPermissionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupRuleIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Not supported. Use a set of IP permissions to specify the CIDR.
        public let cidrIp: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Not supported. Use a set of IP permissions to specify the port.
        public let fromPort: Int?
        /// The ID of the security group.
        public let groupId: String?
        /// The sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions.
        @OptionalCustomCoding<EC2ArrayCoder<_IpPermissionsEncoding, IpPermission>>
        public var ipPermissions: [IpPermission]?
        /// Not supported. Use a set of IP permissions to specify the protocol name or number.
        public let ipProtocol: String?
        /// The IDs of the security group rules.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupRuleIdsEncoding, String>>
        public var securityGroupRuleIds: [String]?
        /// Not supported. Use a set of IP permissions to specify a destination security group.
        public let sourceSecurityGroupName: String?
        /// Not supported. Use a set of IP permissions to specify a destination security group.
        public let sourceSecurityGroupOwnerId: String?
        /// Not supported. Use a set of IP permissions to specify the port.
        public let toPort: Int?

        public init(cidrIp: String? = nil, dryRun: Bool? = nil, fromPort: Int? = nil, groupId: String? = nil, ipPermissions: [IpPermission]? = nil, ipProtocol: String? = nil, securityGroupRuleIds: [String]? = nil, sourceSecurityGroupName: String? = nil, sourceSecurityGroupOwnerId: String? = nil, toPort: Int? = nil) {
            self.cidrIp = cidrIp
            self.dryRun = dryRun
            self.fromPort = fromPort
            self.groupId = groupId
            self.ipPermissions = ipPermissions
            self.ipProtocol = ipProtocol
            self.securityGroupRuleIds = securityGroupRuleIds
            self.sourceSecurityGroupName = sourceSecurityGroupName
            self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIp = "cidrIp"
            case dryRun = "dryRun"
            case fromPort = "fromPort"
            case groupId = "groupId"
            case ipPermissions = "ipPermissions"
            case ipProtocol = "ipProtocol"
            case securityGroupRuleIds = "SecurityGroupRuleId"
            case sourceSecurityGroupName = "sourceSecurityGroupName"
            case sourceSecurityGroupOwnerId = "sourceSecurityGroupOwnerId"
            case toPort = "toPort"
        }
    }

    public struct RevokeSecurityGroupEgressResult: AWSDecodableShape {
        public struct _UnknownIpPermissionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Returns true if the request succeeds; otherwise, returns an error.
        public let `return`: Bool?
        /// The outbound rules that were unknown to the service. In some cases, unknownIpPermissionSet might be in a different format from the request parameter.
        @OptionalCustomCoding<EC2ArrayCoder<_UnknownIpPermissionsEncoding, IpPermission>>
        public var unknownIpPermissions: [IpPermission]?

        public init(return: Bool? = nil, unknownIpPermissions: [IpPermission]? = nil) {
            self.`return` = `return`
            self.unknownIpPermissions = unknownIpPermissions
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
            case unknownIpPermissions = "unknownIpPermissionSet"
        }
    }

    public struct RevokeSecurityGroupIngressRequest: AWSEncodableShape {
        public struct _IpPermissionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupRuleIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The CIDR IP address range. You can't specify this parameter when specifying a source security group.
        public let cidrIp: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// If the protocol is TCP or UDP, this is the start of the port range. If the protocol is ICMP, this is the ICMP type or -1 (all ICMP types).
        public let fromPort: Int?
        /// The ID of the security group.
        public let groupId: String?
        /// [Default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
        public let groupName: String?
        /// The sets of IP permissions. You can't specify a source security group and a CIDR IP address range in the same set of permissions.
        @OptionalCustomCoding<EC2ArrayCoder<_IpPermissionsEncoding, IpPermission>>
        public var ipPermissions: [IpPermission]?
        /// The IP protocol name (tcp, udp, icmp) or number  (see Protocol Numbers).  Use -1 to specify all.
        public let ipProtocol: String?
        /// The IDs of the security group rules.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupRuleIdsEncoding, String>>
        public var securityGroupRuleIds: [String]?
        /// [Default VPC] The name of the source security group. You can't specify this parameter  in combination with the following parameters: the CIDR IP address range, the start of the port range,  the IP protocol, and the end of the port range. The source security group must be in the same VPC.  To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.
        public let sourceSecurityGroupName: String?
        /// Not supported.
        public let sourceSecurityGroupOwnerId: String?
        /// If the protocol is TCP or UDP, this is the end of the port range. If the protocol is ICMP, this is the ICMP code or -1 (all ICMP codes).
        public let toPort: Int?

        public init(cidrIp: String? = nil, dryRun: Bool? = nil, fromPort: Int? = nil, groupId: String? = nil, groupName: String? = nil, ipPermissions: [IpPermission]? = nil, ipProtocol: String? = nil, securityGroupRuleIds: [String]? = nil, sourceSecurityGroupName: String? = nil, sourceSecurityGroupOwnerId: String? = nil, toPort: Int? = nil) {
            self.cidrIp = cidrIp
            self.dryRun = dryRun
            self.fromPort = fromPort
            self.groupId = groupId
            self.groupName = groupName
            self.ipPermissions = ipPermissions
            self.ipProtocol = ipProtocol
            self.securityGroupRuleIds = securityGroupRuleIds
            self.sourceSecurityGroupName = sourceSecurityGroupName
            self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIp = "CidrIp"
            case dryRun = "dryRun"
            case fromPort = "FromPort"
            case groupId = "GroupId"
            case groupName = "GroupName"
            case ipPermissions = "IpPermissions"
            case ipProtocol = "IpProtocol"
            case securityGroupRuleIds = "SecurityGroupRuleId"
            case sourceSecurityGroupName = "SourceSecurityGroupName"
            case sourceSecurityGroupOwnerId = "SourceSecurityGroupOwnerId"
            case toPort = "ToPort"
        }
    }

    public struct RevokeSecurityGroupIngressResult: AWSDecodableShape {
        public struct _UnknownIpPermissionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Returns true if the request succeeds; otherwise, returns an error.
        public let `return`: Bool?
        /// The inbound rules that were unknown to the service. In some cases, unknownIpPermissionSet might be in a different format from the request parameter.
        @OptionalCustomCoding<EC2ArrayCoder<_UnknownIpPermissionsEncoding, IpPermission>>
        public var unknownIpPermissions: [IpPermission]?

        public init(return: Bool? = nil, unknownIpPermissions: [IpPermission]? = nil) {
            self.`return` = `return`
            self.unknownIpPermissions = unknownIpPermissions
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
            case unknownIpPermissions = "unknownIpPermissionSet"
        }
    }

    public struct Route: AWSDecodableShape {
        /// The ID of the carrier gateway.
        public let carrierGatewayId: String?
        /// The Amazon Resource Name (ARN) of the core network.
        public let coreNetworkArn: String?
        /// The IPv4 CIDR block used for the destination match.
        public let destinationCidrBlock: String?
        /// The IPv6 CIDR block used for the destination match.
        public let destinationIpv6CidrBlock: String?
        /// The prefix of the Amazon Web Service.
        public let destinationPrefixListId: String?
        /// The ID of the egress-only internet gateway.
        public let egressOnlyInternetGatewayId: String?
        /// The ID of a gateway attached to your VPC.
        public let gatewayId: String?
        /// The ID of a NAT instance in your VPC.
        public let instanceId: String?
        /// The ID of Amazon Web Services account that owns the instance.
        public let instanceOwnerId: String?
        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// The ID of a NAT gateway.
        public let natGatewayId: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// Describes how the route was created.    CreateRouteTable - The route was automatically created when the route table was created.    CreateRoute - The route was manually added to the route table.    EnableVgwRoutePropagation - The route was propagated by route propagation.
        public let origin: RouteOrigin?
        /// The state of the route. The blackhole state indicates that the
        /// 				route's target isn't available (for example, the specified gateway isn't attached to the
        /// 				VPC, or the specified NAT instance has been terminated).
        public let state: RouteState?
        /// The ID of a transit gateway.
        public let transitGatewayId: String?
        /// The ID of a VPC peering connection.
        public let vpcPeeringConnectionId: String?

        public init(carrierGatewayId: String? = nil, coreNetworkArn: String? = nil, destinationCidrBlock: String? = nil, destinationIpv6CidrBlock: String? = nil, destinationPrefixListId: String? = nil, egressOnlyInternetGatewayId: String? = nil, gatewayId: String? = nil, instanceId: String? = nil, instanceOwnerId: String? = nil, localGatewayId: String? = nil, natGatewayId: String? = nil, networkInterfaceId: String? = nil, origin: RouteOrigin? = nil, state: RouteState? = nil, transitGatewayId: String? = nil, vpcPeeringConnectionId: String? = nil) {
            self.carrierGatewayId = carrierGatewayId
            self.coreNetworkArn = coreNetworkArn
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
            self.destinationPrefixListId = destinationPrefixListId
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
            self.gatewayId = gatewayId
            self.instanceId = instanceId
            self.instanceOwnerId = instanceOwnerId
            self.localGatewayId = localGatewayId
            self.natGatewayId = natGatewayId
            self.networkInterfaceId = networkInterfaceId
            self.origin = origin
            self.state = state
            self.transitGatewayId = transitGatewayId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGatewayId = "carrierGatewayId"
            case coreNetworkArn = "coreNetworkArn"
            case destinationCidrBlock = "destinationCidrBlock"
            case destinationIpv6CidrBlock = "destinationIpv6CidrBlock"
            case destinationPrefixListId = "destinationPrefixListId"
            case egressOnlyInternetGatewayId = "egressOnlyInternetGatewayId"
            case gatewayId = "gatewayId"
            case instanceId = "instanceId"
            case instanceOwnerId = "instanceOwnerId"
            case localGatewayId = "localGatewayId"
            case natGatewayId = "natGatewayId"
            case networkInterfaceId = "networkInterfaceId"
            case origin = "origin"
            case state = "state"
            case transitGatewayId = "transitGatewayId"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct RouteTable: AWSDecodableShape {
        public struct _AssociationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PropagatingVgwsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RoutesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The associations between the route table and one or more subnets or a gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_AssociationsEncoding, RouteTableAssociation>>
        public var associations: [RouteTableAssociation]?
        /// The ID of the Amazon Web Services account that owns the route table.
        public let ownerId: String?
        /// Any virtual private gateway (VGW) propagating routes.
        @OptionalCustomCoding<EC2ArrayCoder<_PropagatingVgwsEncoding, PropagatingVgw>>
        public var propagatingVgws: [PropagatingVgw]?
        /// The routes in the route table.
        @OptionalCustomCoding<EC2ArrayCoder<_RoutesEncoding, Route>>
        public var routes: [Route]?
        /// The ID of the route table.
        public let routeTableId: String?
        /// Any tags assigned to the route table.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(associations: [RouteTableAssociation]? = nil, ownerId: String? = nil, propagatingVgws: [PropagatingVgw]? = nil, routes: [Route]? = nil, routeTableId: String? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.associations = associations
            self.ownerId = ownerId
            self.propagatingVgws = propagatingVgws
            self.routes = routes
            self.routeTableId = routeTableId
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case associations = "associationSet"
            case ownerId = "ownerId"
            case propagatingVgws = "propagatingVgwSet"
            case routes = "routeSet"
            case routeTableId = "routeTableId"
            case tags = "tagSet"
            case vpcId = "vpcId"
        }
    }

    public struct RouteTableAssociation: AWSDecodableShape {
        /// The state of the association.
        public let associationState: RouteTableAssociationState?
        /// The ID of the internet gateway or virtual private gateway.
        public let gatewayId: String?
        /// Indicates whether this is the main route table.
        public let main: Bool?
        /// The ID of the association.
        public let routeTableAssociationId: String?
        /// The ID of the route table.
        public let routeTableId: String?
        /// The ID of the subnet. A subnet ID is not returned for an implicit association.
        public let subnetId: String?

        public init(associationState: RouteTableAssociationState? = nil, gatewayId: String? = nil, main: Bool? = nil, routeTableAssociationId: String? = nil, routeTableId: String? = nil, subnetId: String? = nil) {
            self.associationState = associationState
            self.gatewayId = gatewayId
            self.main = main
            self.routeTableAssociationId = routeTableAssociationId
            self.routeTableId = routeTableId
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case associationState = "associationState"
            case gatewayId = "gatewayId"
            case main = "main"
            case routeTableAssociationId = "routeTableAssociationId"
            case routeTableId = "routeTableId"
            case subnetId = "subnetId"
        }
    }

    public struct RouteTableAssociationState: AWSDecodableShape {
        /// The state of the association.
        public let state: RouteTableAssociationStateCode?
        /// The status message, if applicable.
        public let statusMessage: String?

        public init(state: RouteTableAssociationStateCode? = nil, statusMessage: String? = nil) {
            self.state = state
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case statusMessage = "statusMessage"
        }
    }

    public struct RuleGroupRuleOptionsPair: AWSDecodableShape {
        public struct _RuleOptionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ARN of the rule group.
        public let ruleGroupArn: String?
        /// The rule options.
        @OptionalCustomCoding<EC2ArrayCoder<_RuleOptionsEncoding, RuleOption>>
        public var ruleOptions: [RuleOption]?

        public init(ruleGroupArn: String? = nil, ruleOptions: [RuleOption]? = nil) {
            self.ruleGroupArn = ruleGroupArn
            self.ruleOptions = ruleOptions
        }

        private enum CodingKeys: String, CodingKey {
            case ruleGroupArn = "ruleGroupArn"
            case ruleOptions = "ruleOptionSet"
        }
    }

    public struct RuleGroupTypePair: AWSDecodableShape {
        /// The ARN of the rule group.
        public let ruleGroupArn: String?
        /// The rule group type. The possible values are Domain List and Suricata.
        public let ruleGroupType: String?

        public init(ruleGroupArn: String? = nil, ruleGroupType: String? = nil) {
            self.ruleGroupArn = ruleGroupArn
            self.ruleGroupType = ruleGroupType
        }

        private enum CodingKeys: String, CodingKey {
            case ruleGroupArn = "ruleGroupArn"
            case ruleGroupType = "ruleGroupType"
        }
    }

    public struct RuleOption: AWSDecodableShape {
        public struct _SettingsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Suricata keyword.
        public let keyword: String?
        /// The settings for the keyword.
        @OptionalCustomCoding<EC2ArrayCoder<_SettingsEncoding, String>>
        public var settings: [String]?

        public init(keyword: String? = nil, settings: [String]? = nil) {
            self.keyword = keyword
            self.settings = settings
        }

        private enum CodingKeys: String, CodingKey {
            case keyword = "keyword"
            case settings = "settingSet"
        }
    }

    public struct RunInstancesMonitoringEnabled: AWSEncodableShape & AWSDecodableShape {
        /// Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "enabled"
        }
    }

    public struct RunInstancesRequest: AWSEncodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "BlockDeviceMapping" }
        public struct _ElasticGpuSpecificationEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ElasticInferenceAcceleratorsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv6AddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _LicenseSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _NetworkInterfacesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "SecurityGroupId" }
        public struct _SecurityGroupsEncoding: ArrayCoderProperties { public static let member = "SecurityGroup" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Reserved.
        public let additionalInfo: String?
        /// The block device mapping, which defines the EBS volumes and instance store volumes to attach to the instance at launch. For more information, see Block device mappings in the Amazon EC2 User Guide.
        @OptionalCustomCoding<EC2ArrayCoder<_BlockDeviceMappingsEncoding, BlockDeviceMapping>>
        public var blockDeviceMappings: [BlockDeviceMapping]?
        /// Information about the Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to open, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).
        public let capacityReservationSpecification: CapacityReservationSpecification?
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, a randomly generated token is used for the request to ensure idempotency. For more information, see Ensuring Idempotency. Constraints: Maximum 64 ASCII characters
        public let clientToken: String?
        /// The CPU options for the instance. For more information, see Optimize CPU options in the Amazon EC2 User Guide.
        public let cpuOptions: CpuOptionsRequest?
        /// The credit option for CPU usage of the burstable performance instance. Valid values are standard and unlimited. To change this attribute after launch, use  ModifyInstanceCreditSpecification. For more information, see Burstable performance instances in the Amazon EC2 User Guide. Default: standard (T2 instances) or unlimited (T3/T3a/T4g instances) For T3 instances with host tenancy, only standard is supported.
        public let creditSpecification: CreditSpecificationRequest?
        /// Indicates whether an instance is enabled for stop protection. For more information, see Stop protection.
        public let disableApiStop: Bool?
        /// If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use ModifyInstanceAttribute. Alternatively, if you set InstanceInitiatedShutdownBehavior to terminate, you can terminate the instance by running the shutdown command from the instance. Default: false
        public let disableApiTermination: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance. Default: false
        public let ebsOptimized: Bool?
        /// Deprecated.  Amazon Elastic Graphics reached end of life on January 8, 2024. For  workloads that require graphics acceleration, we recommend that you use Amazon EC2 G4ad,  G4dn, or G5 instances.
        @OptionalCustomCoding<EC2ArrayCoder<_ElasticGpuSpecificationEncoding, ElasticGpuSpecification>>
        public var elasticGpuSpecification: [ElasticGpuSpecification]?
        /// An elastic inference accelerator to associate with the instance. Elastic inference accelerators are a resource you can attach to your Amazon EC2 instances to accelerate your Deep Learning (DL) inference workloads. You cannot specify accelerators from different generations in the same request.  Starting April 15, 2023, Amazon Web Services will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service.
        @OptionalCustomCoding<EC2ArrayCoder<_ElasticInferenceAcceleratorsEncoding, ElasticInferenceAccelerator>>
        public var elasticInferenceAccelerators: [ElasticInferenceAccelerator]?
        /// If you’re launching an instance into a dual-stack or IPv6-only subnet, you can enable assigning a primary IPv6 address. A primary IPv6 address is an IPv6 GUA address associated with an ENI that you have enabled to use a primary IPv6 address. Use this option if an instance relies on its IPv6 address not changing. When you launch the instance, Amazon Web Services will automatically assign an IPv6 address associated with the ENI attached to your instance to be the primary IPv6 address. Once you enable an IPv6 GUA address to be a primary IPv6, you cannot disable it. When you enable an IPv6 GUA address to be a primary IPv6, the first IPv6 GUA will be made the primary IPv6 address until the instance is terminated or the network interface is detached. If you have multiple IPv6 addresses associated with an ENI attached to your instance and you enable a primary IPv6 address, the first IPv6 GUA address associated with the ENI becomes the primary IPv6 address.
        public let enablePrimaryIpv6: Bool?
        /// Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves. For more information, see What is Amazon Web Services Nitro Enclaves? in the Amazon Web Services Nitro Enclaves User Guide. You can't enable Amazon Web Services Nitro Enclaves and hibernation on the same instance.
        public let enclaveOptions: EnclaveOptionsRequest?
        /// Indicates whether an instance is enabled for hibernation. This parameter is valid only if the instance meets the hibernation prerequisites. For more information, see Hibernate your instance in the Amazon EC2 User Guide. You can't enable hibernation and Amazon Web Services Nitro Enclaves on the same instance.
        public let hibernationOptions: HibernationOptionsRequest?
        /// The name or Amazon Resource Name (ARN) of an IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification?
        /// The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.
        public let imageId: String?
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown). Default: stop
        public let instanceInitiatedShutdownBehavior: ShutdownBehavior?
        /// The market (purchasing) option for the instances. For RunInstances, persistent Spot Instance requests are only supported when InstanceInterruptionBehavior is set to either hibernate or stop.
        public let instanceMarketOptions: InstanceMarketOptionsRequest?
        /// The instance type. For more information, see Instance types in the Amazon EC2 User Guide.
        public let instanceType: InstanceType?
        /// The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch. You cannot specify this option and the network interfaces option in the same request.
        public let ipv6AddressCount: Int?
        /// The IPv6 addresses from the range of the subnet to associate with the primary network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch. You cannot specify this option and the network interfaces option in the same request.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv6AddressesEncoding, InstanceIpv6Address>>
        public var ipv6Addresses: [InstanceIpv6Address]?
        /// The ID of the kernel.  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB in the Amazon EC2 User Guide.
        public let kernelId: String?
        /// The name of the key pair. You can create a key pair using CreateKeyPair or ImportKeyPair.  If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.
        public let keyName: String?
        /// The launch template to use to launch the instances. Any parameters that you specify in RunInstances override the same parameters in the launch template. You can specify either the name or ID of a launch template, but not both.
        public let launchTemplate: LaunchTemplateSpecification?
        /// The license configurations.
        @OptionalCustomCoding<EC2ArrayCoder<_LicenseSpecificationsEncoding, LicenseConfigurationRequest>>
        public var licenseSpecifications: [LicenseConfigurationRequest]?
        /// The maintenance and recovery options for the instance.
        public let maintenanceOptions: InstanceMaintenanceOptionsRequest?
        /// The maximum number of instances to launch. If you specify more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible number of instances above MinCount. Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see How many instances can I run in Amazon EC2 in the Amazon EC2 FAQ.
        public let maxCount: Int?
        /// The metadata options for the instance. For more information, see Instance metadata and user data.
        public let metadataOptions: InstanceMetadataOptionsRequest?
        /// The minimum number of instances to launch. If you specify a minimum that is more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches no instances. Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see How many instances can I run in Amazon EC2 in the Amazon EC2 General FAQ.
        public let minCount: Int?
        /// Specifies whether detailed monitoring is enabled for the instance.
        public let monitoring: RunInstancesMonitoringEnabled?
        /// The network interfaces to associate with the instance. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInterfacesEncoding, InstanceNetworkInterfaceSpecification>>
        public var networkInterfaces: [InstanceNetworkInterfaceSpecification]?
        /// The placement for the instance.
        public let placement: Placement?
        /// The options for the instance hostname.  The default values are inherited from the subnet. Applies only if creating a network interface, not attaching an existing one.
        public let privateDnsNameOptions: PrivateDnsNameOptionsRequest?
        /// The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet. Only one private IP address can be designated as primary. You can't specify this option if you've specified the option to designate a private IP address as the primary IP address in a network interface specification. You cannot specify this option if you're launching more than one instance in the request. You cannot specify this option and the network interfaces option in the same request.
        public let privateIpAddress: String?
        /// The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, go to the Amazon Web Services Resource Center and search for the kernel ID.  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB in the Amazon EC2 User Guide.
        public let ramdiskId: String?
        /// The IDs of the security groups. You can create a security group using CreateSecurityGroup. If you specify a network interface, you must specify any security groups as part of the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?
        /// [Default VPC] The names of the security groups. If you specify a network interface, you must specify any security groups as part of the network interface. Default: Amazon EC2 uses the default security group.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupsEncoding, String>>
        public var securityGroups: [String]?
        /// The ID of the subnet to launch the instance into. If you specify a network interface, you must specify any subnets as part of the network interface.
        public let subnetId: String?
        /// The tags to apply to the resources that are created during instance launch. You can specify tags for the following resources only:   Instances   Volumes   Spot Instance requests   Network interfaces   To tag a resource after it has been created, see CreateTags.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The user data script to make available to the instance. For more information, see Run commands on your Linux instance at launch and Run commands on your Windows instance at launch. If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB.
        public let userData: String?

        public init(additionalInfo: String? = nil, blockDeviceMappings: [BlockDeviceMapping]? = nil, capacityReservationSpecification: CapacityReservationSpecification? = nil, clientToken: String? = RunInstancesRequest.idempotencyToken(), cpuOptions: CpuOptionsRequest? = nil, creditSpecification: CreditSpecificationRequest? = nil, disableApiStop: Bool? = nil, disableApiTermination: Bool? = nil, dryRun: Bool? = nil, ebsOptimized: Bool? = nil, elasticGpuSpecification: [ElasticGpuSpecification]? = nil, elasticInferenceAccelerators: [ElasticInferenceAccelerator]? = nil, enablePrimaryIpv6: Bool? = nil, enclaveOptions: EnclaveOptionsRequest? = nil, hibernationOptions: HibernationOptionsRequest? = nil, iamInstanceProfile: IamInstanceProfileSpecification? = nil, imageId: String? = nil, instanceInitiatedShutdownBehavior: ShutdownBehavior? = nil, instanceMarketOptions: InstanceMarketOptionsRequest? = nil, instanceType: InstanceType? = nil, ipv6AddressCount: Int? = nil, ipv6Addresses: [InstanceIpv6Address]? = nil, kernelId: String? = nil, keyName: String? = nil, launchTemplate: LaunchTemplateSpecification? = nil, licenseSpecifications: [LicenseConfigurationRequest]? = nil, maintenanceOptions: InstanceMaintenanceOptionsRequest? = nil, maxCount: Int? = nil, metadataOptions: InstanceMetadataOptionsRequest? = nil, minCount: Int? = nil, monitoring: RunInstancesMonitoringEnabled? = nil, networkInterfaces: [InstanceNetworkInterfaceSpecification]? = nil, placement: Placement? = nil, privateDnsNameOptions: PrivateDnsNameOptionsRequest? = nil, privateIpAddress: String? = nil, ramdiskId: String? = nil, securityGroupIds: [String]? = nil, securityGroups: [String]? = nil, subnetId: String? = nil, tagSpecifications: [TagSpecification]? = nil, userData: String? = nil) {
            self.additionalInfo = additionalInfo
            self.blockDeviceMappings = blockDeviceMappings
            self.capacityReservationSpecification = capacityReservationSpecification
            self.clientToken = clientToken
            self.cpuOptions = cpuOptions
            self.creditSpecification = creditSpecification
            self.disableApiStop = disableApiStop
            self.disableApiTermination = disableApiTermination
            self.dryRun = dryRun
            self.ebsOptimized = ebsOptimized
            self.elasticGpuSpecification = elasticGpuSpecification
            self.elasticInferenceAccelerators = elasticInferenceAccelerators
            self.enablePrimaryIpv6 = enablePrimaryIpv6
            self.enclaveOptions = enclaveOptions
            self.hibernationOptions = hibernationOptions
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.instanceMarketOptions = instanceMarketOptions
            self.instanceType = instanceType
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.kernelId = kernelId
            self.keyName = keyName
            self.launchTemplate = launchTemplate
            self.licenseSpecifications = licenseSpecifications
            self.maintenanceOptions = maintenanceOptions
            self.maxCount = maxCount
            self.metadataOptions = metadataOptions
            self.minCount = minCount
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.privateDnsNameOptions = privateDnsNameOptions
            self.privateIpAddress = privateIpAddress
            self.ramdiskId = ramdiskId
            self.securityGroupIds = securityGroupIds
            self.securityGroups = securityGroups
            self.subnetId = subnetId
            self.tagSpecifications = tagSpecifications
            self.userData = userData
        }

        public func validate(name: String) throws {
            try self.elasticInferenceAccelerators?.forEach {
                try $0.validate(name: "\(name).elasticInferenceAccelerators[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case additionalInfo = "additionalInfo"
            case blockDeviceMappings = "BlockDeviceMapping"
            case capacityReservationSpecification = "CapacityReservationSpecification"
            case clientToken = "clientToken"
            case cpuOptions = "CpuOptions"
            case creditSpecification = "CreditSpecification"
            case disableApiStop = "DisableApiStop"
            case disableApiTermination = "disableApiTermination"
            case dryRun = "dryRun"
            case ebsOptimized = "ebsOptimized"
            case elasticGpuSpecification = "ElasticGpuSpecification"
            case elasticInferenceAccelerators = "ElasticInferenceAccelerator"
            case enablePrimaryIpv6 = "EnablePrimaryIpv6"
            case enclaveOptions = "EnclaveOptions"
            case hibernationOptions = "HibernationOptions"
            case iamInstanceProfile = "iamInstanceProfile"
            case imageId = "ImageId"
            case instanceInitiatedShutdownBehavior = "instanceInitiatedShutdownBehavior"
            case instanceMarketOptions = "InstanceMarketOptions"
            case instanceType = "InstanceType"
            case ipv6AddressCount = "Ipv6AddressCount"
            case ipv6Addresses = "Ipv6Address"
            case kernelId = "KernelId"
            case keyName = "KeyName"
            case launchTemplate = "LaunchTemplate"
            case licenseSpecifications = "LicenseSpecification"
            case maintenanceOptions = "MaintenanceOptions"
            case maxCount = "MaxCount"
            case metadataOptions = "MetadataOptions"
            case minCount = "MinCount"
            case monitoring = "Monitoring"
            case networkInterfaces = "networkInterface"
            case placement = "Placement"
            case privateDnsNameOptions = "PrivateDnsNameOptions"
            case privateIpAddress = "privateIpAddress"
            case ramdiskId = "RamdiskId"
            case securityGroupIds = "SecurityGroupId"
            case securityGroups = "SecurityGroup"
            case subnetId = "SubnetId"
            case tagSpecifications = "TagSpecification"
            case userData = "UserData"
        }
    }

    public struct RunScheduledInstancesRequest: AWSEncodableShape {
        /// Unique, case-sensitive identifier that ensures the idempotency of the request.  For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The number of instances. Default: 1
        public let instanceCount: Int?
        /// The launch specification. You must match the instance type, Availability Zone,  network, and platform of the schedule that you purchased.
        public let launchSpecification: ScheduledInstancesLaunchSpecification?
        /// The Scheduled Instance ID.
        public let scheduledInstanceId: String?

        public init(clientToken: String? = RunScheduledInstancesRequest.idempotencyToken(), dryRun: Bool? = nil, instanceCount: Int? = nil, launchSpecification: ScheduledInstancesLaunchSpecification? = nil, scheduledInstanceId: String? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.instanceCount = instanceCount
            self.launchSpecification = launchSpecification
            self.scheduledInstanceId = scheduledInstanceId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case instanceCount = "InstanceCount"
            case launchSpecification = "LaunchSpecification"
            case scheduledInstanceId = "ScheduledInstanceId"
        }
    }

    public struct RunScheduledInstancesResult: AWSDecodableShape {
        public struct _InstanceIdSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the newly launched instances.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceIdSetEncoding, String>>
        public var instanceIdSet: [String]?

        public init(instanceIdSet: [String]? = nil) {
            self.instanceIdSet = instanceIdSet
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIdSet = "instanceIdSet"
        }
    }

    public struct S3ObjectTag: AWSEncodableShape {
        /// The key of the tag. Constraints: Tag keys are case-sensitive and can be up to 128 Unicode characters in length. May not begin with aws:.
        public let key: String?
        /// The value of the tag. Constraints: Tag values are case-sensitive and can be up to 256 Unicode characters in length.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct S3Storage: AWSEncodableShape & AWSDecodableShape {
        /// The access key ID of the owner of the bucket. Before you specify a value for your access key ID, review and follow the guidance in Best Practices for Amazon Web Services accounts in the Account ManagementReference Guide.
        public let awsAccessKeyId: String?
        /// The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.
        public let bucket: String?
        /// The beginning of the file name of the AMI.
        public let prefix: String?
        /// An Amazon S3 upload policy that gives Amazon EC2 permission to upload items into Amazon S3 on your behalf.
        public let uploadPolicy: AWSBase64Data?
        /// The signature of the JSON document.
        public let uploadPolicySignature: String?

        public init(awsAccessKeyId: String? = nil, bucket: String? = nil, prefix: String? = nil, uploadPolicy: AWSBase64Data? = nil, uploadPolicySignature: String? = nil) {
            self.awsAccessKeyId = awsAccessKeyId
            self.bucket = bucket
            self.prefix = prefix
            self.uploadPolicy = uploadPolicy
            self.uploadPolicySignature = uploadPolicySignature
        }

        private enum CodingKeys: String, CodingKey {
            case awsAccessKeyId = "AWSAccessKeyId"
            case bucket = "bucket"
            case prefix = "prefix"
            case uploadPolicy = "uploadPolicy"
            case uploadPolicySignature = "uploadPolicySignature"
        }
    }

    public struct ScheduledInstance: AWSDecodableShape {
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The date when the Scheduled Instance was purchased.
        public let createDate: Date?
        /// The hourly price for a single instance.
        public let hourlyPrice: String?
        /// The number of instances.
        public let instanceCount: Int?
        /// The instance type.
        public let instanceType: String?
        /// The network platform.
        public let networkPlatform: String?
        /// The time for the next schedule to start.
        public let nextSlotStartTime: Date?
        /// The platform (Linux/UNIX or Windows).
        public let platform: String?
        /// The time that the previous schedule ended or will end.
        public let previousSlotEndTime: Date?
        /// The schedule recurrence.
        public let recurrence: ScheduledInstanceRecurrence?
        /// The Scheduled Instance ID.
        public let scheduledInstanceId: String?
        /// The number of hours in the schedule.
        public let slotDurationInHours: Int?
        /// The end date for the Scheduled Instance.
        public let termEndDate: Date?
        /// The start date for the Scheduled Instance.
        public let termStartDate: Date?
        /// The total number of hours for a single instance for the entire term.
        public let totalScheduledInstanceHours: Int?

        public init(availabilityZone: String? = nil, createDate: Date? = nil, hourlyPrice: String? = nil, instanceCount: Int? = nil, instanceType: String? = nil, networkPlatform: String? = nil, nextSlotStartTime: Date? = nil, platform: String? = nil, previousSlotEndTime: Date? = nil, recurrence: ScheduledInstanceRecurrence? = nil, scheduledInstanceId: String? = nil, slotDurationInHours: Int? = nil, termEndDate: Date? = nil, termStartDate: Date? = nil, totalScheduledInstanceHours: Int? = nil) {
            self.availabilityZone = availabilityZone
            self.createDate = createDate
            self.hourlyPrice = hourlyPrice
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.networkPlatform = networkPlatform
            self.nextSlotStartTime = nextSlotStartTime
            self.platform = platform
            self.previousSlotEndTime = previousSlotEndTime
            self.recurrence = recurrence
            self.scheduledInstanceId = scheduledInstanceId
            self.slotDurationInHours = slotDurationInHours
            self.termEndDate = termEndDate
            self.termStartDate = termStartDate
            self.totalScheduledInstanceHours = totalScheduledInstanceHours
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case createDate = "createDate"
            case hourlyPrice = "hourlyPrice"
            case instanceCount = "instanceCount"
            case instanceType = "instanceType"
            case networkPlatform = "networkPlatform"
            case nextSlotStartTime = "nextSlotStartTime"
            case platform = "platform"
            case previousSlotEndTime = "previousSlotEndTime"
            case recurrence = "recurrence"
            case scheduledInstanceId = "scheduledInstanceId"
            case slotDurationInHours = "slotDurationInHours"
            case termEndDate = "termEndDate"
            case termStartDate = "termStartDate"
            case totalScheduledInstanceHours = "totalScheduledInstanceHours"
        }
    }

    public struct ScheduledInstanceAvailability: AWSDecodableShape {
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The number of available instances.
        public let availableInstanceCount: Int?
        /// The time period for the first schedule to start.
        public let firstSlotStartTime: Date?
        /// The hourly price for a single instance.
        public let hourlyPrice: String?
        /// The instance type. You can specify one of the C3, C4, M4, or R3 instance types.
        public let instanceType: String?
        /// The maximum term. The only possible value is 365 days.
        public let maxTermDurationInDays: Int?
        /// The minimum term. The only possible value is 365 days.
        public let minTermDurationInDays: Int?
        /// The network platform.
        public let networkPlatform: String?
        /// The platform (Linux/UNIX or Windows).
        public let platform: String?
        /// The purchase token. This token expires in two hours.
        public let purchaseToken: String?
        /// The schedule recurrence.
        public let recurrence: ScheduledInstanceRecurrence?
        /// The number of hours in the schedule.
        public let slotDurationInHours: Int?
        /// The total number of hours for a single instance for the entire term.
        public let totalScheduledInstanceHours: Int?

        public init(availabilityZone: String? = nil, availableInstanceCount: Int? = nil, firstSlotStartTime: Date? = nil, hourlyPrice: String? = nil, instanceType: String? = nil, maxTermDurationInDays: Int? = nil, minTermDurationInDays: Int? = nil, networkPlatform: String? = nil, platform: String? = nil, purchaseToken: String? = nil, recurrence: ScheduledInstanceRecurrence? = nil, slotDurationInHours: Int? = nil, totalScheduledInstanceHours: Int? = nil) {
            self.availabilityZone = availabilityZone
            self.availableInstanceCount = availableInstanceCount
            self.firstSlotStartTime = firstSlotStartTime
            self.hourlyPrice = hourlyPrice
            self.instanceType = instanceType
            self.maxTermDurationInDays = maxTermDurationInDays
            self.minTermDurationInDays = minTermDurationInDays
            self.networkPlatform = networkPlatform
            self.platform = platform
            self.purchaseToken = purchaseToken
            self.recurrence = recurrence
            self.slotDurationInHours = slotDurationInHours
            self.totalScheduledInstanceHours = totalScheduledInstanceHours
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case availableInstanceCount = "availableInstanceCount"
            case firstSlotStartTime = "firstSlotStartTime"
            case hourlyPrice = "hourlyPrice"
            case instanceType = "instanceType"
            case maxTermDurationInDays = "maxTermDurationInDays"
            case minTermDurationInDays = "minTermDurationInDays"
            case networkPlatform = "networkPlatform"
            case platform = "platform"
            case purchaseToken = "purchaseToken"
            case recurrence = "recurrence"
            case slotDurationInHours = "slotDurationInHours"
            case totalScheduledInstanceHours = "totalScheduledInstanceHours"
        }
    }

    public struct ScheduledInstanceRecurrence: AWSDecodableShape {
        public struct _OccurrenceDaySetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The frequency (Daily, Weekly, or Monthly).
        public let frequency: String?
        /// The interval quantity. The interval unit depends on the value of frequency. For example, every 2 weeks or every 2 months.
        public let interval: Int?
        /// The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday).
        @OptionalCustomCoding<EC2ArrayCoder<_OccurrenceDaySetEncoding, Int>>
        public var occurrenceDaySet: [Int]?
        /// Indicates whether the occurrence is relative to the end of the specified week or month.
        public let occurrenceRelativeToEnd: Bool?
        /// The unit for occurrenceDaySet (DayOfWeek or DayOfMonth).
        public let occurrenceUnit: String?

        public init(frequency: String? = nil, interval: Int? = nil, occurrenceDaySet: [Int]? = nil, occurrenceRelativeToEnd: Bool? = nil, occurrenceUnit: String? = nil) {
            self.frequency = frequency
            self.interval = interval
            self.occurrenceDaySet = occurrenceDaySet
            self.occurrenceRelativeToEnd = occurrenceRelativeToEnd
            self.occurrenceUnit = occurrenceUnit
        }

        private enum CodingKeys: String, CodingKey {
            case frequency = "frequency"
            case interval = "interval"
            case occurrenceDaySet = "occurrenceDaySet"
            case occurrenceRelativeToEnd = "occurrenceRelativeToEnd"
            case occurrenceUnit = "occurrenceUnit"
        }
    }

    public struct ScheduledInstanceRecurrenceRequest: AWSEncodableShape {
        public struct _OccurrenceDaysEncoding: ArrayCoderProperties { public static let member = "OccurenceDay" }

        /// The frequency (Daily, Weekly, or Monthly).
        public let frequency: String?
        /// The interval quantity. The interval unit depends on the value of Frequency. For example, every 2  weeks or every 2 months.
        public let interval: Int?
        /// The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday). You can't specify this value with a daily schedule. If the occurrence is relative to the end of the month, you can specify only a single day.
        @OptionalCustomCoding<EC2ArrayCoder<_OccurrenceDaysEncoding, Int>>
        public var occurrenceDays: [Int]?
        /// Indicates whether the occurrence is relative to the end of the specified week or month. You can't specify this value with a daily schedule.
        public let occurrenceRelativeToEnd: Bool?
        /// The unit for OccurrenceDays (DayOfWeek or DayOfMonth). This value is required for a monthly schedule. You can't specify DayOfWeek with a weekly schedule. You can't specify this value with a daily schedule.
        public let occurrenceUnit: String?

        public init(frequency: String? = nil, interval: Int? = nil, occurrenceDays: [Int]? = nil, occurrenceRelativeToEnd: Bool? = nil, occurrenceUnit: String? = nil) {
            self.frequency = frequency
            self.interval = interval
            self.occurrenceDays = occurrenceDays
            self.occurrenceRelativeToEnd = occurrenceRelativeToEnd
            self.occurrenceUnit = occurrenceUnit
        }

        private enum CodingKeys: String, CodingKey {
            case frequency = "Frequency"
            case interval = "Interval"
            case occurrenceDays = "OccurrenceDay"
            case occurrenceRelativeToEnd = "OccurrenceRelativeToEnd"
            case occurrenceUnit = "OccurrenceUnit"
        }
    }

    public struct ScheduledInstancesBlockDeviceMapping: AWSEncodableShape {
        /// The device name (for example, /dev/sdh or xvdh).
        public let deviceName: String?
        /// Parameters used to set up EBS volumes automatically when the instance is launched.
        public let ebs: ScheduledInstancesEbs?
        /// To omit the device from the block device mapping, specify an empty string.
        public let noDevice: String?
        /// The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with two available instance store volumes can specify mappings for ephemeral0 and ephemeral1. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume. Constraints: For M3 instances, you must specify instance store volumes in the block device  mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes  specified in the block device mapping for the AMI.
        public let virtualName: String?

        public init(deviceName: String? = nil, ebs: ScheduledInstancesEbs? = nil, noDevice: String? = nil, virtualName: String? = nil) {
            self.deviceName = deviceName
            self.ebs = ebs
            self.noDevice = noDevice
            self.virtualName = virtualName
        }

        private enum CodingKeys: String, CodingKey {
            case deviceName = "DeviceName"
            case ebs = "Ebs"
            case noDevice = "NoDevice"
            case virtualName = "VirtualName"
        }
    }

    public struct ScheduledInstancesEbs: AWSEncodableShape {
        /// Indicates whether the volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// Indicates whether the volume is encrypted. You can attached encrypted volumes only to instances that  support them.
        public let encrypted: Bool?
        /// The number of I/O operations per second (IOPS) to provision for a gp3, io1, or io2  	   volume.
        public let iops: Int?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The size of the volume, in GiB. Default: If you're creating the volume from a snapshot and don't specify a volume size, the default  is the snapshot size.
        public let volumeSize: Int?
        /// The volume type. Default: gp2
        public let volumeType: String?

        public init(deleteOnTermination: Bool? = nil, encrypted: Bool? = nil, iops: Int? = nil, snapshotId: String? = nil, volumeSize: Int? = nil, volumeType: String? = nil) {
            self.deleteOnTermination = deleteOnTermination
            self.encrypted = encrypted
            self.iops = iops
            self.snapshotId = snapshotId
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination = "DeleteOnTermination"
            case encrypted = "Encrypted"
            case iops = "Iops"
            case snapshotId = "SnapshotId"
            case volumeSize = "VolumeSize"
            case volumeType = "VolumeType"
        }
    }

    public struct ScheduledInstancesIamInstanceProfile: AWSEncodableShape {
        /// The Amazon Resource Name (ARN).
        public let arn: String?
        /// The name.
        public let name: String?

        public init(arn: String? = nil, name: String? = nil) {
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case name = "Name"
        }
    }

    public struct ScheduledInstancesIpv6Address: AWSEncodableShape {
        /// The IPv6 address.
        public let ipv6Address: String?

        public init(ipv6Address: String? = nil) {
            self.ipv6Address = ipv6Address
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Address = "Ipv6Address"
        }
    }

    public struct ScheduledInstancesLaunchSpecification: AWSEncodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "BlockDeviceMapping" }
        public struct _NetworkInterfacesEncoding: ArrayCoderProperties { public static let member = "NetworkInterface" }
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "SecurityGroupId" }

        /// The block device mapping entries.
        @OptionalCustomCoding<EC2ArrayCoder<_BlockDeviceMappingsEncoding, ScheduledInstancesBlockDeviceMapping>>
        public var blockDeviceMappings: [ScheduledInstancesBlockDeviceMapping]?
        /// Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance. Default: false
        public let ebsOptimized: Bool?
        /// The IAM instance profile.
        public let iamInstanceProfile: ScheduledInstancesIamInstanceProfile?
        /// The ID of the Amazon Machine Image (AMI).
        public let imageId: String?
        /// The instance type.
        public let instanceType: String?
        /// The ID of the kernel.
        public let kernelId: String?
        /// The name of the key pair.
        public let keyName: String?
        /// Enable or disable monitoring for the instances.
        public let monitoring: ScheduledInstancesMonitoring?
        /// The network interfaces.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInterfacesEncoding, ScheduledInstancesNetworkInterface>>
        public var networkInterfaces: [ScheduledInstancesNetworkInterface]?
        /// The placement information.
        public let placement: ScheduledInstancesPlacement?
        /// The ID of the RAM disk.
        public let ramdiskId: String?
        /// The IDs of the security groups.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?
        /// The ID of the subnet in which to launch the instances.
        public let subnetId: String?
        /// The base64-encoded MIME user data.
        public let userData: String?

        public init(blockDeviceMappings: [ScheduledInstancesBlockDeviceMapping]? = nil, ebsOptimized: Bool? = nil, iamInstanceProfile: ScheduledInstancesIamInstanceProfile? = nil, imageId: String? = nil, instanceType: String? = nil, kernelId: String? = nil, keyName: String? = nil, monitoring: ScheduledInstancesMonitoring? = nil, networkInterfaces: [ScheduledInstancesNetworkInterface]? = nil, placement: ScheduledInstancesPlacement? = nil, ramdiskId: String? = nil, securityGroupIds: [String]? = nil, subnetId: String? = nil, userData: String? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.ebsOptimized = ebsOptimized
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.ramdiskId = ramdiskId
            self.securityGroupIds = securityGroupIds
            self.subnetId = subnetId
            self.userData = userData
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "BlockDeviceMapping"
            case ebsOptimized = "EbsOptimized"
            case iamInstanceProfile = "IamInstanceProfile"
            case imageId = "ImageId"
            case instanceType = "InstanceType"
            case kernelId = "KernelId"
            case keyName = "KeyName"
            case monitoring = "Monitoring"
            case networkInterfaces = "NetworkInterface"
            case placement = "Placement"
            case ramdiskId = "RamdiskId"
            case securityGroupIds = "SecurityGroupId"
            case subnetId = "SubnetId"
            case userData = "UserData"
        }
    }

    public struct ScheduledInstancesMonitoring: AWSEncodableShape {
        /// Indicates whether monitoring is enabled.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public struct ScheduledInstancesNetworkInterface: AWSEncodableShape {
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "SecurityGroupId" }
        public struct _Ipv6AddressesEncoding: ArrayCoderProperties { public static let member = "Ipv6Address" }
        public struct _PrivateIpAddressConfigsEncoding: ArrayCoderProperties { public static let member = "PrivateIpAddressConfigSet" }

        /// Indicates whether to assign a public IPv4 address to instances launched in a VPC. The public IPv4 address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is true. Amazon Web Services charges for all public IPv4 addresses, including public IPv4 addresses
        /// associated with running instances and Elastic IP addresses. For more information, see the Public IPv4 Address tab on the Amazon VPC pricing page.
        public let associatePublicIpAddress: Bool?
        /// Indicates whether to delete the interface when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// The description.
        public let description: String?
        /// The index of the device for the network interface attachment.
        public let deviceIndex: Int?
        /// The IDs of the security groups.
        @OptionalCustomCoding<EC2ArrayCoder<_GroupsEncoding, String>>
        public var groups: [String]?
        /// The number of IPv6 addresses to assign to the network interface. The IPv6 addresses are automatically selected from the subnet range.
        public let ipv6AddressCount: Int?
        /// The specific IPv6 addresses from the subnet range.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv6AddressesEncoding, ScheduledInstancesIpv6Address>>
        public var ipv6Addresses: [ScheduledInstancesIpv6Address]?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The IPv4 address of the network interface within the subnet.
        public let privateIpAddress: String?
        /// The private IPv4 addresses.
        @OptionalCustomCoding<EC2ArrayCoder<_PrivateIpAddressConfigsEncoding, ScheduledInstancesPrivateIpAddressConfig>>
        public var privateIpAddressConfigs: [ScheduledInstancesPrivateIpAddressConfig]?
        /// The number of secondary private IPv4 addresses.
        public let secondaryPrivateIpAddressCount: Int?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(associatePublicIpAddress: Bool? = nil, deleteOnTermination: Bool? = nil, description: String? = nil, deviceIndex: Int? = nil, groups: [String]? = nil, ipv6AddressCount: Int? = nil, ipv6Addresses: [ScheduledInstancesIpv6Address]? = nil, networkInterfaceId: String? = nil, privateIpAddress: String? = nil, privateIpAddressConfigs: [ScheduledInstancesPrivateIpAddressConfig]? = nil, secondaryPrivateIpAddressCount: Int? = nil, subnetId: String? = nil) {
            self.associatePublicIpAddress = associatePublicIpAddress
            self.deleteOnTermination = deleteOnTermination
            self.description = description
            self.deviceIndex = deviceIndex
            self.groups = groups
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddress = privateIpAddress
            self.privateIpAddressConfigs = privateIpAddressConfigs
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case associatePublicIpAddress = "AssociatePublicIpAddress"
            case deleteOnTermination = "DeleteOnTermination"
            case description = "Description"
            case deviceIndex = "DeviceIndex"
            case groups = "Group"
            case ipv6AddressCount = "Ipv6AddressCount"
            case ipv6Addresses = "Ipv6Address"
            case networkInterfaceId = "NetworkInterfaceId"
            case privateIpAddress = "PrivateIpAddress"
            case privateIpAddressConfigs = "PrivateIpAddressConfig"
            case secondaryPrivateIpAddressCount = "SecondaryPrivateIpAddressCount"
            case subnetId = "SubnetId"
        }
    }

    public struct ScheduledInstancesPlacement: AWSEncodableShape {
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The name of the placement group.
        public let groupName: String?

        public init(availabilityZone: String? = nil, groupName: String? = nil) {
            self.availabilityZone = availabilityZone
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case groupName = "GroupName"
        }
    }

    public struct ScheduledInstancesPrivateIpAddressConfig: AWSEncodableShape {
        /// Indicates whether this is a primary IPv4 address. Otherwise, this is a secondary IPv4 address.
        public let primary: Bool?
        /// The IPv4 address.
        public let privateIpAddress: String?

        public init(primary: Bool? = nil, privateIpAddress: String? = nil) {
            self.primary = primary
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case primary = "Primary"
            case privateIpAddress = "PrivateIpAddress"
        }
    }

    public struct SearchLocalGatewayRoutesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    prefix-list-id - The ID of the prefix list.    route-search.exact-match - The exact match of the specified filter.    route-search.longest-prefix-match - The longest prefix that matches the route.    route-search.subnet-of-match - The routes with a subnet that match the specified CIDR filter.    route-search.supernet-of-match - The routes with a CIDR that encompass the CIDR filter.  For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match  as 10.0.1.0/30, then the result returns 10.0.1.0/29.    state - The state of the route.    type - The route type.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, localGatewayRouteTableId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case localGatewayRouteTableId = "LocalGatewayRouteTableId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct SearchLocalGatewayRoutesResult: AWSDecodableShape {
        public struct _RoutesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the routes.
        @OptionalCustomCoding<EC2ArrayCoder<_RoutesEncoding, LocalGatewayRoute>>
        public var routes: [LocalGatewayRoute]?

        public init(nextToken: String? = nil, routes: [LocalGatewayRoute]? = nil) {
            self.nextToken = nextToken
            self.routes = routes
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case routes = "routeSet"
        }
    }

    public struct SearchTransitGatewayMulticastGroupsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    group-ip-address - The IP address of the  transit gateway multicast group.    is-group-member - The resource is a group member. Valid values are true | false.    is-group-source - The resource is a group source. Valid values are true | false.    member-type - The member type. Valid values are igmp | static.    resource-id - The ID of the resource.    resource-type - The type of resource. Valid values are vpc | vpn | direct-connect-gateway | tgw-peering.    source-type - The source type. Valid values are igmp | static.    subnet-id - The ID of the subnet.    transit-gateway-attachment-id - The id of the transit gateway attachment.
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call.
        /// 	To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct SearchTransitGatewayMulticastGroupsResult: AWSDecodableShape {
        public struct _MulticastGroupsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the  transit gateway multicast group.
        @OptionalCustomCoding<EC2ArrayCoder<_MulticastGroupsEncoding, TransitGatewayMulticastGroup>>
        public var multicastGroups: [TransitGatewayMulticastGroup]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(multicastGroups: [TransitGatewayMulticastGroup]? = nil, nextToken: String? = nil) {
            self.multicastGroups = multicastGroups
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case multicastGroups = "multicastGroups"
            case nextToken = "nextToken"
        }
    }

    public struct SearchTransitGatewayRoutesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    attachment.transit-gateway-attachment-id- The id of the transit gateway attachment.    attachment.resource-id - The resource id of the transit gateway attachment.    attachment.resource-type - The attachment resource type. Valid values are vpc | vpn | direct-connect-gateway | peering | connect.    prefix-list-id - The ID of the prefix list.    route-search.exact-match - The exact match of the specified filter.    route-search.longest-prefix-match - The longest prefix that matches the route.    route-search.subnet-of-match - The routes with a subnet that match the specified CIDR filter.    route-search.supernet-of-match - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.    state - The state of the route (active | blackhole).    type - The type of route (propagated | static).
        @OptionalCustomCoding<EC2ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of routes to return.
        public let maxResults: Int?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, transitGatewayRouteTableId: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct SearchTransitGatewayRoutesResult: AWSDecodableShape {
        public struct _RoutesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether there are additional routes available.
        public let additionalRoutesAvailable: Bool?
        /// Information about the routes.
        @OptionalCustomCoding<EC2ArrayCoder<_RoutesEncoding, TransitGatewayRoute>>
        public var routes: [TransitGatewayRoute]?

        public init(additionalRoutesAvailable: Bool? = nil, routes: [TransitGatewayRoute]? = nil) {
            self.additionalRoutesAvailable = additionalRoutesAvailable
            self.routes = routes
        }

        private enum CodingKeys: String, CodingKey {
            case additionalRoutesAvailable = "additionalRoutesAvailable"
            case routes = "routeSet"
        }
    }

    public struct SecurityGroup: AWSDecodableShape {
        public struct _IpPermissionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _IpPermissionsEgressEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description of the security group.
        public let description: String?
        /// The ID of the security group.
        public let groupId: String?
        /// The name of the security group.
        public let groupName: String?
        /// The inbound rules associated with the security group.
        @OptionalCustomCoding<EC2ArrayCoder<_IpPermissionsEncoding, IpPermission>>
        public var ipPermissions: [IpPermission]?
        /// The outbound rules associated with the security group.
        @OptionalCustomCoding<EC2ArrayCoder<_IpPermissionsEgressEncoding, IpPermission>>
        public var ipPermissionsEgress: [IpPermission]?
        /// The Amazon Web Services account ID of the owner of the security group.
        public let ownerId: String?
        /// Any tags assigned to the security group.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VPC for the security group.
        public let vpcId: String?

        public init(description: String? = nil, groupId: String? = nil, groupName: String? = nil, ipPermissions: [IpPermission]? = nil, ipPermissionsEgress: [IpPermission]? = nil, ownerId: String? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.description = description
            self.groupId = groupId
            self.groupName = groupName
            self.ipPermissions = ipPermissions
            self.ipPermissionsEgress = ipPermissionsEgress
            self.ownerId = ownerId
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "groupDescription"
            case groupId = "groupId"
            case groupName = "groupName"
            case ipPermissions = "ipPermissions"
            case ipPermissionsEgress = "ipPermissionsEgress"
            case ownerId = "ownerId"
            case tags = "tagSet"
            case vpcId = "vpcId"
        }
    }

    public struct SecurityGroupForVpc: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The security group's description.
        public let description: String?
        /// The security group ID.
        public let groupId: String?
        /// The security group name.
        public let groupName: String?
        /// The security group owner ID.
        public let ownerId: String?
        /// The VPC ID in which the security group was created.
        public let primaryVpcId: String?
        /// The security group tags.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(description: String? = nil, groupId: String? = nil, groupName: String? = nil, ownerId: String? = nil, primaryVpcId: String? = nil, tags: [Tag]? = nil) {
            self.description = description
            self.groupId = groupId
            self.groupName = groupName
            self.ownerId = ownerId
            self.primaryVpcId = primaryVpcId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case groupId = "groupId"
            case groupName = "groupName"
            case ownerId = "ownerId"
            case primaryVpcId = "primaryVpcId"
            case tags = "tagSet"
        }
    }

    public struct SecurityGroupIdentifier: AWSDecodableShape {
        /// The ID of the security group.
        public let groupId: String?
        /// The name of the security group.
        public let groupName: String?

        public init(groupId: String? = nil, groupName: String? = nil) {
            self.groupId = groupId
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "groupId"
            case groupName = "groupName"
        }
    }

    public struct SecurityGroupReference: AWSDecodableShape {
        /// The ID of your security group.
        public let groupId: String?
        /// The ID of the VPC with the referencing security group.
        public let referencingVpcId: String?
        ///  This parameter is in preview and may not be available for your account.  The ID of the transit gateway (if applicable).
        public let transitGatewayId: String?
        /// The ID of the VPC peering connection (if applicable). For more information about security group referencing for peering connections, see Update your security groups to reference peer security groups in the VPC Peering Guide.
        public let vpcPeeringConnectionId: String?

        public init(groupId: String? = nil, referencingVpcId: String? = nil, transitGatewayId: String? = nil, vpcPeeringConnectionId: String? = nil) {
            self.groupId = groupId
            self.referencingVpcId = referencingVpcId
            self.transitGatewayId = transitGatewayId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "groupId"
            case referencingVpcId = "referencingVpcId"
            case transitGatewayId = "transitGatewayId"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct SecurityGroupRule: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IPv4 CIDR range.
        public let cidrIpv4: String?
        /// The IPv6 CIDR range.
        public let cidrIpv6: String?
        /// The security group rule description.
        public let description: String?
        /// If the protocol is TCP or UDP, this is the start of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP type or -1 (all ICMP types).
        public let fromPort: Int?
        /// The ID of the security group.
        public let groupId: String?
        /// The ID of the Amazon Web Services account that owns the security group.
        public let groupOwnerId: String?
        /// The IP protocol name (tcp, udp, icmp, icmpv6) or number (see Protocol Numbers).  Use -1 to specify all protocols.
        public let ipProtocol: String?
        /// Indicates whether the security group rule is an outbound rule.
        public let isEgress: Bool?
        /// The ID of the prefix list.
        public let prefixListId: String?
        /// Describes the security group that is referenced in the rule.
        public let referencedGroupInfo: ReferencedSecurityGroup?
        /// The ID of the security group rule.
        public let securityGroupRuleId: String?
        /// The tags applied to the security group rule.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// If the protocol is TCP or UDP, this is the end of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP code or -1 (all ICMP codes).  If the start port is -1 (all ICMP types), then the end port must be -1 (all ICMP codes).
        public let toPort: Int?

        public init(cidrIpv4: String? = nil, cidrIpv6: String? = nil, description: String? = nil, fromPort: Int? = nil, groupId: String? = nil, groupOwnerId: String? = nil, ipProtocol: String? = nil, isEgress: Bool? = nil, prefixListId: String? = nil, referencedGroupInfo: ReferencedSecurityGroup? = nil, securityGroupRuleId: String? = nil, tags: [Tag]? = nil, toPort: Int? = nil) {
            self.cidrIpv4 = cidrIpv4
            self.cidrIpv6 = cidrIpv6
            self.description = description
            self.fromPort = fromPort
            self.groupId = groupId
            self.groupOwnerId = groupOwnerId
            self.ipProtocol = ipProtocol
            self.isEgress = isEgress
            self.prefixListId = prefixListId
            self.referencedGroupInfo = referencedGroupInfo
            self.securityGroupRuleId = securityGroupRuleId
            self.tags = tags
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIpv4 = "cidrIpv4"
            case cidrIpv6 = "cidrIpv6"
            case description = "description"
            case fromPort = "fromPort"
            case groupId = "groupId"
            case groupOwnerId = "groupOwnerId"
            case ipProtocol = "ipProtocol"
            case isEgress = "isEgress"
            case prefixListId = "prefixListId"
            case referencedGroupInfo = "referencedGroupInfo"
            case securityGroupRuleId = "securityGroupRuleId"
            case tags = "tagSet"
            case toPort = "toPort"
        }
    }

    public struct SecurityGroupRuleDescription: AWSEncodableShape {
        /// The description of the security group rule.
        public let description: String?
        /// The ID of the security group rule.
        public let securityGroupRuleId: String?

        public init(description: String? = nil, securityGroupRuleId: String? = nil) {
            self.description = description
            self.securityGroupRuleId = securityGroupRuleId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case securityGroupRuleId = "SecurityGroupRuleId"
        }
    }

    public struct SecurityGroupRuleRequest: AWSEncodableShape {
        /// The IPv4 CIDR range. To specify a single IPv4 address, use the /32 prefix length.
        public let cidrIpv4: String?
        /// The IPv6 CIDR range. To specify a single IPv6 address, use the /128 prefix length.
        public let cidrIpv6: String?
        /// The description of the security group rule.
        public let description: String?
        /// If the protocol is TCP or UDP, this is the start of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP type or -1 (all ICMP types).
        public let fromPort: Int?
        /// The IP protocol name (tcp, udp, icmp, icmpv6) or number (see Protocol Numbers).  Use -1 to specify all protocols.
        public let ipProtocol: String?
        /// The ID of the prefix list.
        public let prefixListId: String?
        /// The ID of the security group that is referenced in the security group rule.
        public let referencedGroupId: String?
        /// If the protocol is TCP or UDP, this is the end of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP code or -1 (all ICMP codes).  If the start port is -1 (all ICMP types), then the end port must be -1 (all ICMP codes).
        public let toPort: Int?

        public init(cidrIpv4: String? = nil, cidrIpv6: String? = nil, description: String? = nil, fromPort: Int? = nil, ipProtocol: String? = nil, prefixListId: String? = nil, referencedGroupId: String? = nil, toPort: Int? = nil) {
            self.cidrIpv4 = cidrIpv4
            self.cidrIpv6 = cidrIpv6
            self.description = description
            self.fromPort = fromPort
            self.ipProtocol = ipProtocol
            self.prefixListId = prefixListId
            self.referencedGroupId = referencedGroupId
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIpv4 = "CidrIpv4"
            case cidrIpv6 = "CidrIpv6"
            case description = "Description"
            case fromPort = "FromPort"
            case ipProtocol = "IpProtocol"
            case prefixListId = "PrefixListId"
            case referencedGroupId = "ReferencedGroupId"
            case toPort = "ToPort"
        }
    }

    public struct SecurityGroupRuleUpdate: AWSEncodableShape {
        /// Information about the security group rule.
        public let securityGroupRule: SecurityGroupRuleRequest?
        /// The ID of the security group rule.
        public let securityGroupRuleId: String?

        public init(securityGroupRule: SecurityGroupRuleRequest? = nil, securityGroupRuleId: String? = nil) {
            self.securityGroupRule = securityGroupRule
            self.securityGroupRuleId = securityGroupRuleId
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupRule = "SecurityGroupRule"
            case securityGroupRuleId = "SecurityGroupRuleId"
        }
    }

    public struct SendDiagnosticInterruptRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String?

        public init(dryRun: Bool? = nil, instanceId: String? = nil) {
            self.dryRun = dryRun
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceId = "InstanceId"
        }
    }

    public struct ServiceConfiguration: AWSDecodableShape {
        public struct _AvailabilityZonesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _BaseEndpointDnsNamesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _GatewayLoadBalancerArnsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _NetworkLoadBalancerArnsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ServiceTypeEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SupportedIpAddressTypesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether requests from other Amazon Web Services accounts to create an endpoint to the service must first be accepted.
        public let acceptanceRequired: Bool?
        /// The Availability Zones in which the service is available.
        @OptionalCustomCoding<EC2ArrayCoder<_AvailabilityZonesEncoding, String>>
        public var availabilityZones: [String]?
        /// The DNS names for the service.
        @OptionalCustomCoding<EC2ArrayCoder<_BaseEndpointDnsNamesEncoding, String>>
        public var baseEndpointDnsNames: [String]?
        /// The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the service.
        @OptionalCustomCoding<EC2ArrayCoder<_GatewayLoadBalancerArnsEncoding, String>>
        public var gatewayLoadBalancerArns: [String]?
        /// Indicates whether the service manages its VPC endpoints. Management of the service VPC endpoints using the VPC endpoint API is restricted.
        public let managesVpcEndpoints: Bool?
        /// The Amazon Resource Names (ARNs) of the Network Load Balancers for the service.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkLoadBalancerArnsEncoding, String>>
        public var networkLoadBalancerArns: [String]?
        /// The payer responsibility.
        public let payerResponsibility: PayerResponsibility?
        /// The private DNS name for the service.
        public let privateDnsName: String?
        /// Information about the endpoint service private DNS name configuration.
        public let privateDnsNameConfiguration: PrivateDnsNameConfiguration?
        /// The ID of the service.
        public let serviceId: String?
        /// The name of the service.
        public let serviceName: String?
        /// The service state.
        public let serviceState: ServiceState?
        /// The type of service.
        @OptionalCustomCoding<EC2ArrayCoder<_ServiceTypeEncoding, ServiceTypeDetail>>
        public var serviceType: [ServiceTypeDetail]?
        /// The supported IP address types.
        @OptionalCustomCoding<EC2ArrayCoder<_SupportedIpAddressTypesEncoding, ServiceConnectivityType>>
        public var supportedIpAddressTypes: [ServiceConnectivityType]?
        /// The tags assigned to the service.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(acceptanceRequired: Bool? = nil, availabilityZones: [String]? = nil, baseEndpointDnsNames: [String]? = nil, gatewayLoadBalancerArns: [String]? = nil, managesVpcEndpoints: Bool? = nil, networkLoadBalancerArns: [String]? = nil, payerResponsibility: PayerResponsibility? = nil, privateDnsName: String? = nil, privateDnsNameConfiguration: PrivateDnsNameConfiguration? = nil, serviceId: String? = nil, serviceName: String? = nil, serviceState: ServiceState? = nil, serviceType: [ServiceTypeDetail]? = nil, supportedIpAddressTypes: [ServiceConnectivityType]? = nil, tags: [Tag]? = nil) {
            self.acceptanceRequired = acceptanceRequired
            self.availabilityZones = availabilityZones
            self.baseEndpointDnsNames = baseEndpointDnsNames
            self.gatewayLoadBalancerArns = gatewayLoadBalancerArns
            self.managesVpcEndpoints = managesVpcEndpoints
            self.networkLoadBalancerArns = networkLoadBalancerArns
            self.payerResponsibility = payerResponsibility
            self.privateDnsName = privateDnsName
            self.privateDnsNameConfiguration = privateDnsNameConfiguration
            self.serviceId = serviceId
            self.serviceName = serviceName
            self.serviceState = serviceState
            self.serviceType = serviceType
            self.supportedIpAddressTypes = supportedIpAddressTypes
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case acceptanceRequired = "acceptanceRequired"
            case availabilityZones = "availabilityZoneSet"
            case baseEndpointDnsNames = "baseEndpointDnsNameSet"
            case gatewayLoadBalancerArns = "gatewayLoadBalancerArnSet"
            case managesVpcEndpoints = "managesVpcEndpoints"
            case networkLoadBalancerArns = "networkLoadBalancerArnSet"
            case payerResponsibility = "payerResponsibility"
            case privateDnsName = "privateDnsName"
            case privateDnsNameConfiguration = "privateDnsNameConfiguration"
            case serviceId = "serviceId"
            case serviceName = "serviceName"
            case serviceState = "serviceState"
            case serviceType = "serviceType"
            case supportedIpAddressTypes = "supportedIpAddressTypeSet"
            case tags = "tagSet"
        }
    }

    public struct ServiceDetail: AWSDecodableShape {
        public struct _AvailabilityZonesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _BaseEndpointDnsNamesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PrivateDnsNamesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ServiceTypeEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SupportedIpAddressTypesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether VPC endpoint connection requests to the service must be accepted by the service owner.
        public let acceptanceRequired: Bool?
        /// The Availability Zones in which the service is available.
        @OptionalCustomCoding<EC2ArrayCoder<_AvailabilityZonesEncoding, String>>
        public var availabilityZones: [String]?
        /// The DNS names for the service.
        @OptionalCustomCoding<EC2ArrayCoder<_BaseEndpointDnsNamesEncoding, String>>
        public var baseEndpointDnsNames: [String]?
        /// Indicates whether the service manages its VPC endpoints. Management of the service VPC endpoints using the VPC endpoint API is restricted.
        public let managesVpcEndpoints: Bool?
        /// The Amazon Web Services account ID of the service owner.
        public let owner: String?
        /// The payer responsibility.
        public let payerResponsibility: PayerResponsibility?
        /// The private DNS name for the service.
        public let privateDnsName: String?
        /// The private DNS names assigned to the VPC endpoint service.
        @OptionalCustomCoding<EC2ArrayCoder<_PrivateDnsNamesEncoding, PrivateDnsDetails>>
        public var privateDnsNames: [PrivateDnsDetails]?
        /// The verification state of the VPC endpoint service. Consumers of the endpoint service cannot use the private name when the state is not verified.
        public let privateDnsNameVerificationState: DnsNameState?
        /// The ID of the endpoint service.
        public let serviceId: String?
        /// The name of the service.
        public let serviceName: String?
        /// The type of service.
        @OptionalCustomCoding<EC2ArrayCoder<_ServiceTypeEncoding, ServiceTypeDetail>>
        public var serviceType: [ServiceTypeDetail]?
        /// The supported IP address types.
        @OptionalCustomCoding<EC2ArrayCoder<_SupportedIpAddressTypesEncoding, ServiceConnectivityType>>
        public var supportedIpAddressTypes: [ServiceConnectivityType]?
        /// The tags assigned to the service.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// Indicates whether the service supports endpoint policies.
        public let vpcEndpointPolicySupported: Bool?

        public init(acceptanceRequired: Bool? = nil, availabilityZones: [String]? = nil, baseEndpointDnsNames: [String]? = nil, managesVpcEndpoints: Bool? = nil, owner: String? = nil, payerResponsibility: PayerResponsibility? = nil, privateDnsName: String? = nil, privateDnsNames: [PrivateDnsDetails]? = nil, privateDnsNameVerificationState: DnsNameState? = nil, serviceId: String? = nil, serviceName: String? = nil, serviceType: [ServiceTypeDetail]? = nil, supportedIpAddressTypes: [ServiceConnectivityType]? = nil, tags: [Tag]? = nil, vpcEndpointPolicySupported: Bool? = nil) {
            self.acceptanceRequired = acceptanceRequired
            self.availabilityZones = availabilityZones
            self.baseEndpointDnsNames = baseEndpointDnsNames
            self.managesVpcEndpoints = managesVpcEndpoints
            self.owner = owner
            self.payerResponsibility = payerResponsibility
            self.privateDnsName = privateDnsName
            self.privateDnsNames = privateDnsNames
            self.privateDnsNameVerificationState = privateDnsNameVerificationState
            self.serviceId = serviceId
            self.serviceName = serviceName
            self.serviceType = serviceType
            self.supportedIpAddressTypes = supportedIpAddressTypes
            self.tags = tags
            self.vpcEndpointPolicySupported = vpcEndpointPolicySupported
        }

        private enum CodingKeys: String, CodingKey {
            case acceptanceRequired = "acceptanceRequired"
            case availabilityZones = "availabilityZoneSet"
            case baseEndpointDnsNames = "baseEndpointDnsNameSet"
            case managesVpcEndpoints = "managesVpcEndpoints"
            case owner = "owner"
            case payerResponsibility = "payerResponsibility"
            case privateDnsName = "privateDnsName"
            case privateDnsNames = "privateDnsNameSet"
            case privateDnsNameVerificationState = "privateDnsNameVerificationState"
            case serviceId = "serviceId"
            case serviceName = "serviceName"
            case serviceType = "serviceType"
            case supportedIpAddressTypes = "supportedIpAddressTypeSet"
            case tags = "tagSet"
            case vpcEndpointPolicySupported = "vpcEndpointPolicySupported"
        }
    }

    public struct ServiceTypeDetail: AWSDecodableShape {
        /// The type of service.
        public let serviceType: ServiceType?

        public init(serviceType: ServiceType? = nil) {
            self.serviceType = serviceType
        }

        private enum CodingKeys: String, CodingKey {
            case serviceType = "serviceType"
        }
    }

    public struct SlotDateTimeRangeRequest: AWSEncodableShape {
        /// The earliest date and time, in UTC, for the Scheduled Instance to start.
        public let earliestTime: Date?
        /// The latest date and time, in UTC, for the Scheduled Instance to start. This value must be later than or equal to the earliest date and at most three months in the future.
        public let latestTime: Date?

        public init(earliestTime: Date? = nil, latestTime: Date? = nil) {
            self.earliestTime = earliestTime
            self.latestTime = latestTime
        }

        private enum CodingKeys: String, CodingKey {
            case earliestTime = "EarliestTime"
            case latestTime = "LatestTime"
        }
    }

    public struct SlotStartTimeRangeRequest: AWSEncodableShape {
        /// The earliest date and time, in UTC, for the Scheduled Instance to start.
        public let earliestTime: Date?
        /// The latest date and time, in UTC, for the Scheduled Instance to start.
        public let latestTime: Date?

        public init(earliestTime: Date? = nil, latestTime: Date? = nil) {
            self.earliestTime = earliestTime
            self.latestTime = latestTime
        }

        private enum CodingKeys: String, CodingKey {
            case earliestTime = "EarliestTime"
            case latestTime = "LatestTime"
        }
    }

    public struct Snapshot: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The data encryption key identifier for the snapshot. This value is a unique identifier that corresponds to the data encryption key that was used to encrypt the original volume or snapshot copy. Because data encryption keys are inherited by volumes created from snapshots, and vice versa, if snapshots share the same data encryption key identifier, then they belong to the same volume/snapshot lineage. This parameter is only returned by DescribeSnapshots.
        public let dataEncryptionKeyId: String?
        /// The description for the snapshot.
        public let description: String?
        /// Indicates whether the snapshot is encrypted.
        public let encrypted: Bool?
        /// The Amazon Resource Name (ARN) of the Key Management Service (KMS) KMS key that was used to protect the volume encryption key for the parent volume.
        public let kmsKeyId: String?
        /// The ARN of the Outpost on which the snapshot is stored. For more information, see Amazon EBS local snapshots on Outposts in the  		Amazon EBS User Guide.
        public let outpostArn: String?
        /// The Amazon Web Services owner alias, from an Amazon-maintained list (amazon). This is not   the user-configured Amazon Web Services account alias set using the IAM console.
        public let ownerAlias: String?
        /// The ID of the Amazon Web Services account that owns the EBS snapshot.
        public let ownerId: String?
        /// The progress of the snapshot, as a percentage.
        public let progress: String?
        /// Only for archived snapshots that are temporarily restored. Indicates the date and  time when a temporarily restored snapshot will be automatically re-archived.
        public let restoreExpiryTime: Date?
        /// The ID of the snapshot. Each snapshot receives a unique identifier when it is created.
        public let snapshotId: String?
        /// Reserved for future use.
        public let sseType: SSEType?
        /// The time stamp when the snapshot was initiated.
        public let startTime: Date?
        /// The snapshot state.
        public let state: SnapshotState?
        /// Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy operation fails (for example, if the proper Key Management Service (KMS) permissions are not obtained) this field displays error state details to help you diagnose why the error occurred. This parameter is only returned by DescribeSnapshots.
        public let stateMessage: String?
        /// The storage tier in which the snapshot is stored. standard indicates  that the snapshot is stored in the standard snapshot storage tier and that it is ready  for use. archive indicates that the snapshot is currently archived and that  it must be restored before it can be used.
        public let storageTier: StorageTier?
        /// Any tags assigned to the snapshot.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the volume that was used to create the snapshot. Snapshots created by the CopySnapshot action have an arbitrary volume ID that should not be used for any purpose.
        public let volumeId: String?
        /// The size of the volume, in GiB.
        public let volumeSize: Int?

        public init(dataEncryptionKeyId: String? = nil, description: String? = nil, encrypted: Bool? = nil, kmsKeyId: String? = nil, outpostArn: String? = nil, ownerAlias: String? = nil, ownerId: String? = nil, progress: String? = nil, restoreExpiryTime: Date? = nil, snapshotId: String? = nil, sseType: SSEType? = nil, startTime: Date? = nil, state: SnapshotState? = nil, stateMessage: String? = nil, storageTier: StorageTier? = nil, tags: [Tag]? = nil, volumeId: String? = nil, volumeSize: Int? = nil) {
            self.dataEncryptionKeyId = dataEncryptionKeyId
            self.description = description
            self.encrypted = encrypted
            self.kmsKeyId = kmsKeyId
            self.outpostArn = outpostArn
            self.ownerAlias = ownerAlias
            self.ownerId = ownerId
            self.progress = progress
            self.restoreExpiryTime = restoreExpiryTime
            self.snapshotId = snapshotId
            self.sseType = sseType
            self.startTime = startTime
            self.state = state
            self.stateMessage = stateMessage
            self.storageTier = storageTier
            self.tags = tags
            self.volumeId = volumeId
            self.volumeSize = volumeSize
        }

        private enum CodingKeys: String, CodingKey {
            case dataEncryptionKeyId = "dataEncryptionKeyId"
            case description = "description"
            case encrypted = "encrypted"
            case kmsKeyId = "kmsKeyId"
            case outpostArn = "outpostArn"
            case ownerAlias = "ownerAlias"
            case ownerId = "ownerId"
            case progress = "progress"
            case restoreExpiryTime = "restoreExpiryTime"
            case snapshotId = "snapshotId"
            case sseType = "sseType"
            case startTime = "startTime"
            case state = "status"
            case stateMessage = "statusMessage"
            case storageTier = "storageTier"
            case tags = "tagSet"
            case volumeId = "volumeId"
            case volumeSize = "volumeSize"
        }
    }

    public struct SnapshotDetail: AWSDecodableShape {
        /// A description for the snapshot.
        public let description: String?
        /// The block device mapping for the snapshot.
        public let deviceName: String?
        /// The size of the disk in the snapshot, in GiB.
        public let diskImageSize: Double?
        /// The format of the disk image from which the snapshot is created.
        public let format: String?
        /// The percentage of progress for the task.
        public let progress: String?
        /// The snapshot ID of the disk being imported.
        public let snapshotId: String?
        /// A brief status of the snapshot creation.
        public let status: String?
        /// A detailed status message for the snapshot creation.
        public let statusMessage: String?
        /// The URL used to access the disk image.
        public let url: String?
        /// The Amazon S3 bucket for the disk image.
        public let userBucket: UserBucketDetails?

        public init(description: String? = nil, deviceName: String? = nil, diskImageSize: Double? = nil, format: String? = nil, progress: String? = nil, snapshotId: String? = nil, status: String? = nil, statusMessage: String? = nil, url: String? = nil, userBucket: UserBucketDetails? = nil) {
            self.description = description
            self.deviceName = deviceName
            self.diskImageSize = diskImageSize
            self.format = format
            self.progress = progress
            self.snapshotId = snapshotId
            self.status = status
            self.statusMessage = statusMessage
            self.url = url
            self.userBucket = userBucket
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case deviceName = "deviceName"
            case diskImageSize = "diskImageSize"
            case format = "format"
            case progress = "progress"
            case snapshotId = "snapshotId"
            case status = "status"
            case statusMessage = "statusMessage"
            case url = "url"
            case userBucket = "userBucket"
        }
    }

    public struct SnapshotDiskContainer: AWSEncodableShape {
        /// The description of the disk image being imported.
        public let description: String?
        /// The format of the disk image being imported. Valid values: VHD | VMDK | RAW
        public let format: String?
        /// The URL to the Amazon S3-based disk image being imported. It can either be a https URL (https://..) or an Amazon S3 URL (s3://..).
        public let url: String?
        /// The Amazon S3 bucket for the disk image.
        public let userBucket: UserBucket?

        public init(description: String? = nil, format: String? = nil, url: String? = nil, userBucket: UserBucket? = nil) {
            self.description = description
            self.format = format
            self.url = url
            self.userBucket = userBucket
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case format = "Format"
            case url = "Url"
            case userBucket = "UserBucket"
        }
    }

    public struct SnapshotInfo: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Description specified by the CreateSnapshotRequest that has been applied to all  snapshots.
        public let description: String?
        /// Indicates whether the snapshot is encrypted.
        public let encrypted: Bool?
        /// The ARN of the Outpost on which the snapshot is stored. For more information, see Amazon EBS local snapshots on Outposts in the  		Amazon EBS User Guide.
        public let outpostArn: String?
        /// Account id used when creating this snapshot.
        public let ownerId: String?
        /// Progress this snapshot has made towards completing.
        public let progress: String?
        /// Snapshot id that can be used to describe this snapshot.
        public let snapshotId: String?
        /// Reserved for future use.
        public let sseType: SSEType?
        /// Time this snapshot was started. This is the same for all snapshots initiated by the same request.
        public let startTime: Date?
        /// Current state of the snapshot.
        public let state: SnapshotState?
        /// Tags associated with this snapshot.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// Source volume from which this snapshot was created.
        public let volumeId: String?
        /// Size of the volume from which this snapshot was created.
        public let volumeSize: Int?

        public init(description: String? = nil, encrypted: Bool? = nil, outpostArn: String? = nil, ownerId: String? = nil, progress: String? = nil, snapshotId: String? = nil, sseType: SSEType? = nil, startTime: Date? = nil, state: SnapshotState? = nil, tags: [Tag]? = nil, volumeId: String? = nil, volumeSize: Int? = nil) {
            self.description = description
            self.encrypted = encrypted
            self.outpostArn = outpostArn
            self.ownerId = ownerId
            self.progress = progress
            self.snapshotId = snapshotId
            self.sseType = sseType
            self.startTime = startTime
            self.state = state
            self.tags = tags
            self.volumeId = volumeId
            self.volumeSize = volumeSize
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case encrypted = "encrypted"
            case outpostArn = "outpostArn"
            case ownerId = "ownerId"
            case progress = "progress"
            case snapshotId = "snapshotId"
            case sseType = "sseType"
            case startTime = "startTime"
            case state = "state"
            case tags = "tagSet"
            case volumeId = "volumeId"
            case volumeSize = "volumeSize"
        }
    }

    public struct SnapshotRecycleBinInfo: AWSDecodableShape {
        /// The description for the snapshot.
        public let description: String?
        /// The date and time when the snaphsot entered the Recycle Bin.
        public let recycleBinEnterTime: Date?
        /// The date and time when the snapshot is to be permanently deleted from the Recycle Bin.
        public let recycleBinExitTime: Date?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The ID of the volume from which the snapshot was created.
        public let volumeId: String?

        public init(description: String? = nil, recycleBinEnterTime: Date? = nil, recycleBinExitTime: Date? = nil, snapshotId: String? = nil, volumeId: String? = nil) {
            self.description = description
            self.recycleBinEnterTime = recycleBinEnterTime
            self.recycleBinExitTime = recycleBinExitTime
            self.snapshotId = snapshotId
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case recycleBinEnterTime = "recycleBinEnterTime"
            case recycleBinExitTime = "recycleBinExitTime"
            case snapshotId = "snapshotId"
            case volumeId = "volumeId"
        }
    }

    public struct SnapshotTaskDetail: AWSDecodableShape {
        /// The description of the snapshot.
        public let description: String?
        /// The size of the disk in the snapshot, in GiB.
        public let diskImageSize: Double?
        /// Indicates whether the snapshot is encrypted.
        public let encrypted: Bool?
        /// The format of the disk image from which the snapshot is created.
        public let format: String?
        /// The identifier for the KMS key that was used to create the encrypted snapshot.
        public let kmsKeyId: String?
        /// The percentage of completion for the import snapshot task.
        public let progress: String?
        /// The snapshot ID of the disk being imported.
        public let snapshotId: String?
        /// A brief status for the import snapshot task.
        public let status: String?
        /// A detailed status message for the import snapshot task.
        public let statusMessage: String?
        /// The URL of the disk image from which the snapshot is created.
        public let url: String?
        /// The Amazon S3 bucket for the disk image.
        public let userBucket: UserBucketDetails?

        public init(description: String? = nil, diskImageSize: Double? = nil, encrypted: Bool? = nil, format: String? = nil, kmsKeyId: String? = nil, progress: String? = nil, snapshotId: String? = nil, status: String? = nil, statusMessage: String? = nil, url: String? = nil, userBucket: UserBucketDetails? = nil) {
            self.description = description
            self.diskImageSize = diskImageSize
            self.encrypted = encrypted
            self.format = format
            self.kmsKeyId = kmsKeyId
            self.progress = progress
            self.snapshotId = snapshotId
            self.status = status
            self.statusMessage = statusMessage
            self.url = url
            self.userBucket = userBucket
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case diskImageSize = "diskImageSize"
            case encrypted = "encrypted"
            case format = "format"
            case kmsKeyId = "kmsKeyId"
            case progress = "progress"
            case snapshotId = "snapshotId"
            case status = "status"
            case statusMessage = "statusMessage"
            case url = "url"
            case userBucket = "userBucket"
        }
    }

    public struct SnapshotTierStatus: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The date and time when the last archive process was completed.
        public let archivalCompleteTime: Date?
        /// The status of the last archive or restore process.
        public let lastTieringOperationStatus: TieringOperationStatus?
        /// A message describing the status of the last archive or restore process.
        public let lastTieringOperationStatusDetail: String?
        /// The progress of the last archive or restore process, as a percentage.
        public let lastTieringProgress: Int?
        /// The date and time when the last archive or restore process was started.
        public let lastTieringStartTime: Date?
        /// The ID of the Amazon Web Services account that owns the snapshot.
        public let ownerId: String?
        /// Only for archived snapshots that are temporarily restored. Indicates the date and  time when a temporarily restored snapshot will be automatically re-archived.
        public let restoreExpiryTime: Date?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The state of the snapshot.
        public let status: SnapshotState?
        /// The storage tier in which the snapshot is stored. standard indicates  that the snapshot is stored in the standard snapshot storage tier and that it is ready  for use. archive indicates that the snapshot is currently archived and that  it must be restored before it can be used.
        public let storageTier: StorageTier?
        /// The tags that are assigned to the snapshot.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the volume from which the snapshot was created.
        public let volumeId: String?

        public init(archivalCompleteTime: Date? = nil, lastTieringOperationStatus: TieringOperationStatus? = nil, lastTieringOperationStatusDetail: String? = nil, lastTieringProgress: Int? = nil, lastTieringStartTime: Date? = nil, ownerId: String? = nil, restoreExpiryTime: Date? = nil, snapshotId: String? = nil, status: SnapshotState? = nil, storageTier: StorageTier? = nil, tags: [Tag]? = nil, volumeId: String? = nil) {
            self.archivalCompleteTime = archivalCompleteTime
            self.lastTieringOperationStatus = lastTieringOperationStatus
            self.lastTieringOperationStatusDetail = lastTieringOperationStatusDetail
            self.lastTieringProgress = lastTieringProgress
            self.lastTieringStartTime = lastTieringStartTime
            self.ownerId = ownerId
            self.restoreExpiryTime = restoreExpiryTime
            self.snapshotId = snapshotId
            self.status = status
            self.storageTier = storageTier
            self.tags = tags
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case archivalCompleteTime = "archivalCompleteTime"
            case lastTieringOperationStatus = "lastTieringOperationStatus"
            case lastTieringOperationStatusDetail = "lastTieringOperationStatusDetail"
            case lastTieringProgress = "lastTieringProgress"
            case lastTieringStartTime = "lastTieringStartTime"
            case ownerId = "ownerId"
            case restoreExpiryTime = "restoreExpiryTime"
            case snapshotId = "snapshotId"
            case status = "status"
            case storageTier = "storageTier"
            case tags = "tagSet"
            case volumeId = "volumeId"
        }
    }

    public struct SpotCapacityRebalance: AWSEncodableShape & AWSDecodableShape {
        /// The replacement strategy to use. Only available for fleets of type maintain.  launch - Spot Fleet launches a new replacement Spot Instance when a rebalance notification is emitted for an existing Spot Instance in the fleet. Spot Fleet does not terminate the instances that receive a rebalance notification. You can terminate the old instances, or you can leave them running. You are charged for all instances while they are running.   launch-before-terminate - Spot Fleet launches a new replacement Spot Instance when a rebalance notification is emitted for an existing Spot Instance in the fleet, and then, after a delay that you specify (in TerminationDelay), terminates the instances that received a rebalance notification.
        public let replacementStrategy: ReplacementStrategy?
        /// The amount of time (in seconds) that Amazon EC2 waits before terminating the old Spot Instance after launching a new replacement Spot Instance. Required when ReplacementStrategy is set to launch-before-terminate. Not valid when ReplacementStrategy is set to launch. Valid values: Minimum value of 120 seconds. Maximum value of 7200 seconds.
        public let terminationDelay: Int?

        public init(replacementStrategy: ReplacementStrategy? = nil, terminationDelay: Int? = nil) {
            self.replacementStrategy = replacementStrategy
            self.terminationDelay = terminationDelay
        }

        private enum CodingKeys: String, CodingKey {
            case replacementStrategy = "replacementStrategy"
            case terminationDelay = "terminationDelay"
        }
    }

    public struct SpotDatafeedSubscription: AWSDecodableShape {
        /// The name of the Amazon S3 bucket where the Spot Instance data feed is located.
        public let bucket: String?
        /// The fault codes for the Spot Instance request, if any.
        public let fault: SpotInstanceStateFault?
        /// The Amazon Web Services account ID of the account.
        public let ownerId: String?
        /// The prefix for the data feed files.
        public let prefix: String?
        /// The state of the Spot Instance data feed subscription.
        public let state: DatafeedSubscriptionState?

        public init(bucket: String? = nil, fault: SpotInstanceStateFault? = nil, ownerId: String? = nil, prefix: String? = nil, state: DatafeedSubscriptionState? = nil) {
            self.bucket = bucket
            self.fault = fault
            self.ownerId = ownerId
            self.prefix = prefix
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "bucket"
            case fault = "fault"
            case ownerId = "ownerId"
            case prefix = "prefix"
            case state = "state"
        }
    }

    public struct SpotFleetLaunchSpecification: AWSEncodableShape & AWSDecodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _NetworkInterfacesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Deprecated.
        public let addressingType: String?
        /// One or more block devices that are mapped to the Spot Instances. You can't specify both a snapshot ID and an encryption value. This is because only blank volumes can be encrypted on creation. If a snapshot is the basis for a volume, it is not blank and its encryption status is used for the volume encryption status.
        @OptionalCustomCoding<EC2ArrayCoder<_BlockDeviceMappingsEncoding, BlockDeviceMapping>>
        public var blockDeviceMappings: [BlockDeviceMapping]?
        /// Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: false
        public let ebsOptimized: Bool?
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification?
        /// The ID of the AMI.
        public let imageId: String?
        /// The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with those attributes.  If you specify InstanceRequirements, you can't specify InstanceType.
        public let instanceRequirements: InstanceRequirements?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The ID of the kernel.
        public let kernelId: String?
        /// The name of the key pair.
        public let keyName: String?
        /// Enable or disable monitoring for the instances.
        public let monitoring: SpotFleetMonitoring?
        /// One or more network interfaces. If you specify a network interface, you must specify  subnet IDs and security group IDs using the network interface.   SpotFleetLaunchSpecification currently does not support Elastic Fabric Adapter (EFA). To specify an EFA, you must use LaunchTemplateConfig.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInterfacesEncoding, InstanceNetworkInterfaceSpecification>>
        public var networkInterfaces: [InstanceNetworkInterfaceSpecification]?
        /// The placement information.
        public let placement: SpotPlacement?
        /// The ID of the RAM disk. Some kernels require additional drivers at launch. Check the kernel  requirements for information about whether you need to specify a RAM disk. To find kernel  requirements, refer to the Amazon Web Services Resource Center and search for the kernel ID.
        public let ramdiskId: String?
        /// The security groups.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupsEncoding, GroupIdentifier>>
        public var securityGroups: [GroupIdentifier]?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance. We do not recommend using this parameter because it can lead to  increased interruptions. If you do not specify this parameter, you will pay the current Spot price.  If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify this parameter.
        public let spotPrice: String?
        /// The IDs of the subnets in which to launch the instances. To specify multiple subnets, separate them using commas; for example, "subnet-1234abcdeexample1, subnet-0987cdef6example2".
        public let subnetId: String?
        /// The tags to apply during creation.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, SpotFleetTagSpecification>>
        public var tagSpecifications: [SpotFleetTagSpecification]?
        /// The base64-encoded user data that instances use when starting up. User data is limited to 16 KB.
        public let userData: String?
        /// The number of units provided by the specified instance type. These are the same units that you chose to set the target capacity in terms of instances, or a performance characteristic such as vCPUs, memory, or I/O. If the target capacity divided by this value is not a whole number, Amazon EC2 rounds the number of instances to the next whole number. If this value is not specified, the default is 1.
        public let weightedCapacity: Double?

        public init(addressingType: String? = nil, blockDeviceMappings: [BlockDeviceMapping]? = nil, ebsOptimized: Bool? = nil, iamInstanceProfile: IamInstanceProfileSpecification? = nil, imageId: String? = nil, instanceRequirements: InstanceRequirements? = nil, instanceType: InstanceType? = nil, kernelId: String? = nil, keyName: String? = nil, monitoring: SpotFleetMonitoring? = nil, networkInterfaces: [InstanceNetworkInterfaceSpecification]? = nil, placement: SpotPlacement? = nil, ramdiskId: String? = nil, securityGroups: [GroupIdentifier]? = nil, spotPrice: String? = nil, subnetId: String? = nil, tagSpecifications: [SpotFleetTagSpecification]? = nil, userData: String? = nil, weightedCapacity: Double? = nil) {
            self.addressingType = addressingType
            self.blockDeviceMappings = blockDeviceMappings
            self.ebsOptimized = ebsOptimized
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceRequirements = instanceRequirements
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.ramdiskId = ramdiskId
            self.securityGroups = securityGroups
            self.spotPrice = spotPrice
            self.subnetId = subnetId
            self.tagSpecifications = tagSpecifications
            self.userData = userData
            self.weightedCapacity = weightedCapacity
        }

        public func validate(name: String) throws {
            try self.instanceRequirements?.validate(name: "\(name).instanceRequirements")
        }

        private enum CodingKeys: String, CodingKey {
            case addressingType = "addressingType"
            case blockDeviceMappings = "blockDeviceMapping"
            case ebsOptimized = "ebsOptimized"
            case iamInstanceProfile = "iamInstanceProfile"
            case imageId = "imageId"
            case instanceRequirements = "instanceRequirements"
            case instanceType = "instanceType"
            case kernelId = "kernelId"
            case keyName = "keyName"
            case monitoring = "monitoring"
            case networkInterfaces = "networkInterfaceSet"
            case placement = "placement"
            case ramdiskId = "ramdiskId"
            case securityGroups = "groupSet"
            case spotPrice = "spotPrice"
            case subnetId = "subnetId"
            case tagSpecifications = "tagSpecificationSet"
            case userData = "userData"
            case weightedCapacity = "weightedCapacity"
        }
    }

    public struct SpotFleetMonitoring: AWSEncodableShape & AWSDecodableShape {
        /// Enables monitoring for the instance. Default: false
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "enabled"
        }
    }

    public struct SpotFleetRequestConfig: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The progress of the Spot Fleet request.  If there is an error, the status is error. After all requests are placed, the status is pending_fulfillment. If the size of the fleet is equal to or greater than its target capacity, the status is fulfilled. If the size of the fleet is decreased, the status is pending_termination while Spot Instances are terminating.
        public let activityStatus: ActivityStatus?
        /// The creation date and time of the request.
        public let createTime: Date?
        /// The configuration of the Spot Fleet request.
        public let spotFleetRequestConfig: SpotFleetRequestConfigData?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String?
        /// The state of the Spot Fleet request.
        public let spotFleetRequestState: BatchState?
        /// The tags for a Spot Fleet resource.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(activityStatus: ActivityStatus? = nil, createTime: Date? = nil, spotFleetRequestConfig: SpotFleetRequestConfigData? = nil, spotFleetRequestId: String? = nil, spotFleetRequestState: BatchState? = nil, tags: [Tag]? = nil) {
            self.activityStatus = activityStatus
            self.createTime = createTime
            self.spotFleetRequestConfig = spotFleetRequestConfig
            self.spotFleetRequestId = spotFleetRequestId
            self.spotFleetRequestState = spotFleetRequestState
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case activityStatus = "activityStatus"
            case createTime = "createTime"
            case spotFleetRequestConfig = "spotFleetRequestConfig"
            case spotFleetRequestId = "spotFleetRequestId"
            case spotFleetRequestState = "spotFleetRequestState"
            case tags = "tagSet"
        }
    }

    public struct SpotFleetRequestConfigData: AWSEncodableShape & AWSDecodableShape {
        public struct _LaunchSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _LaunchTemplateConfigsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The strategy that determines how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the Spot Fleet launch configuration. For more information, see Allocation strategies for Spot Instances in the Amazon EC2 User Guide.  priceCapacityOptimized (recommended)  Spot Fleet identifies the pools with   the highest capacity availability for the number of instances that are launching. This means  that we will request Spot Instances from the pools that we believe have the lowest chance of interruption  in the near term. Spot Fleet then requests Spot Instances from the lowest priced of these pools.  capacityOptimized  Spot Fleet identifies the pools with   the highest capacity availability for the number of instances that are launching. This means  that we will request Spot Instances from the pools that we believe have the lowest chance of interruption  in the near term. To give certain instance types a higher chance of launching first, use capacityOptimizedPrioritized. Set a priority for each instance type by using the Priority parameter for LaunchTemplateOverrides. You can assign the same priority to different LaunchTemplateOverrides. EC2 implements the priorities on a best-effort basis, but optimizes for capacity first. capacityOptimizedPrioritized is supported only if your Spot Fleet uses a launch template. Note that if the OnDemandAllocationStrategy is set to prioritized, the same priority is applied when fulfilling On-Demand capacity.  diversified  Spot Fleet requests instances from all of the Spot Instance pools that you specify.  lowestPrice  Spot Fleet requests instances from the lowest priced Spot Instance pool that has available capacity. If the lowest priced pool doesn't have available capacity, the Spot Instances come from the next lowest priced pool that has available capacity. If a pool runs out of capacity before fulfilling your desired capacity, Spot Fleet will continue to fulfill your request by drawing from the next lowest priced pool. To ensure that your desired capacity is met, you might receive Spot Instances from several pools. Because this strategy only considers instance  price and not capacity availability, it might lead to high interruption rates.   Default: lowestPrice
        public let allocationStrategy: AllocationStrategy?
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of your listings. This helps to avoid duplicate listings. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Reserved.
        public let context: String?
        /// Indicates whether running instances should be terminated if you decrease the target capacity of the Spot Fleet request below the current size of the Spot Fleet. Supported only for fleets of type maintain.
        public let excessCapacityTerminationPolicy: ExcessCapacityTerminationPolicy?
        /// The number of units fulfilled by this request compared to the set target capacity. You cannot set this value.
        public let fulfilledCapacity: Double?
        /// The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that grants the Spot Fleet the permission to request, launch, terminate, and tag instances on your behalf. For more information, see Spot Fleet prerequisites in the Amazon EC2 User Guide. Spot Fleet can terminate Spot Instances on your behalf when you cancel its Spot Fleet request using CancelSpotFleetRequests or when the Spot Fleet request expires, if you set TerminateInstancesWithExpiration.
        public let iamFleetRole: String?
        /// The behavior when a Spot Instance is interrupted. The default is terminate.
        public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
        /// The number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot AllocationStrategy is set to lowest-price. Spot Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify. Note that Spot Fleet attempts to draw Spot Instances from the number of pools that you specify on a best effort basis. If a pool runs out of Spot capacity before fulfilling your target capacity, Spot Fleet will continue to fulfill your request by drawing from the next cheapest pool. To ensure that your target capacity is met, you might receive Spot Instances from more than the number of pools that you specified. Similarly, if most of the pools have no Spot capacity, you might receive your full target capacity from fewer than the number of pools that you specified.
        public let instancePoolsToUseCount: Int?
        /// The launch specifications for the Spot Fleet request. If you specify LaunchSpecifications, you can't specify LaunchTemplateConfigs. If you include On-Demand capacity in your request, you must use LaunchTemplateConfigs.  If an AMI specified in a launch specification is deregistered or disabled, no new instances can be launched from the AMI. For fleets of type maintain, the target capacity will not be maintained.
        @OptionalCustomCoding<EC2ArrayCoder<_LaunchSpecificationsEncoding, SpotFleetLaunchSpecification>>
        public var launchSpecifications: [SpotFleetLaunchSpecification]?
        /// The launch template and overrides. If you specify LaunchTemplateConfigs, you can't specify LaunchSpecifications. If you include On-Demand capacity in your request, you must use LaunchTemplateConfigs.
        @OptionalCustomCoding<EC2ArrayCoder<_LaunchTemplateConfigsEncoding, LaunchTemplateConfig>>
        public var launchTemplateConfigs: [LaunchTemplateConfig]?
        /// One or more Classic Load Balancers and target groups to attach to the Spot Fleet request. Spot Fleet registers the running Spot Instances with the specified Classic Load Balancers and target groups. With Network Load Balancers, Spot Fleet cannot register instances that have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1.
        public let loadBalancersConfig: LoadBalancersConfig?
        /// The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify lowestPrice, Spot Fleet uses price to determine the order, launching the lowest price first. If you specify prioritized, Spot Fleet uses the priority that you assign to each Spot Fleet launch template override, launching the highest priority first. If you do not specify a value, Spot Fleet defaults to lowestPrice.
        public let onDemandAllocationStrategy: OnDemandAllocationStrategy?
        /// The number of On-Demand units fulfilled by this request compared to the set target On-Demand capacity.
        public let onDemandFulfilledCapacity: Double?
        /// The maximum amount per hour for On-Demand Instances that you're willing to pay. You can use the onDemandMaxTotalPrice parameter, the spotMaxTotalPrice parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, Spot Fleet will launch instances until it reaches the maximum amount you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity.  If your fleet includes T instances that are configured as unlimited, and if their average CPU usage exceeds the baseline utilization, you will incur a charge for surplus credits. The onDemandMaxTotalPrice does not account for surplus credits, and, if you use surplus credits, your final cost might be higher than what you specified for onDemandMaxTotalPrice. For more information, see Surplus credits can incur charges in the EC2 User Guide.
        public let onDemandMaxTotalPrice: String?
        /// The number of On-Demand units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is maintain, you can specify a target capacity of 0 and add capacity later.
        public let onDemandTargetCapacity: Int?
        /// Indicates whether Spot Fleet should replace unhealthy instances.
        public let replaceUnhealthyInstances: Bool?
        /// The strategies for managing your Spot Instances that are at an elevated risk of being interrupted.
        public let spotMaintenanceStrategies: SpotMaintenanceStrategies?
        /// The maximum amount per hour for Spot Instances that you're willing to pay. You can use the spotMaxTotalPrice parameter, the onDemandMaxTotalPrice parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, Spot Fleet will launch instances until it reaches the maximum amount you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity.  If your fleet includes T instances that are configured as unlimited, and if their average CPU usage exceeds the baseline utilization, you will incur a charge for surplus credits. The spotMaxTotalPrice does not account for surplus credits, and, if you use surplus credits, your final cost might be higher than what you specified for spotMaxTotalPrice. For more information, see Surplus credits can incur charges in the EC2 User Guide.
        public let spotMaxTotalPrice: String?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance. We do not recommend  using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.  If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify this parameter.
        public let spotPrice: String?
        /// The key-value pair for tagging the Spot Fleet request on creation. The value for ResourceType must be spot-fleet-request, otherwise the Spot Fleet request fails. To tag instances at launch, specify the tags in the launch template (valid only if you use LaunchTemplateConfigs) or in the  SpotFleetTagSpecification (valid only if you use LaunchSpecifications). For information about tagging after launch, see Tag your resources.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The number of units to request for the Spot Fleet. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is maintain, you can specify a target capacity of 0 and add capacity later.
        public let targetCapacity: Int?
        /// The unit for the target capacity. You can specify this parameter only when  using attribute-based instance type selection. Default: units (the number of instances)
        public let targetCapacityUnitType: TargetCapacityUnitType?
        /// Indicates whether running Spot Instances are terminated when the Spot Fleet request expires.
        public let terminateInstancesWithExpiration: Bool?
        /// The type of request. Indicates whether the Spot Fleet only requests the target capacity or also attempts to maintain it. When this value is request, the Spot Fleet only places the required requests. It does not attempt to replenish Spot Instances if capacity is diminished, nor does it submit requests in alternative Spot pools if capacity is not available. When this value is maintain, the Spot Fleet maintains the target capacity. The Spot Fleet places the required requests to meet capacity and automatically replenishes any interrupted instances. Default: maintain. instant is listed but is not used by Spot Fleet.
        public let type: FleetType?
        /// The start date and time of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). By default, Amazon EC2 starts fulfilling the request immediately.
        public let validFrom: Date?
        /// The end date and time of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). After the end date and time, no new Spot Instance requests are placed or able to fulfill the request. If no value is specified, the Spot Fleet request remains until you cancel it.
        public let validUntil: Date?

        public init(allocationStrategy: AllocationStrategy? = nil, clientToken: String? = nil, context: String? = nil, excessCapacityTerminationPolicy: ExcessCapacityTerminationPolicy? = nil, fulfilledCapacity: Double? = nil, iamFleetRole: String? = nil, instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil, instancePoolsToUseCount: Int? = nil, launchSpecifications: [SpotFleetLaunchSpecification]? = nil, launchTemplateConfigs: [LaunchTemplateConfig]? = nil, loadBalancersConfig: LoadBalancersConfig? = nil, onDemandAllocationStrategy: OnDemandAllocationStrategy? = nil, onDemandFulfilledCapacity: Double? = nil, onDemandMaxTotalPrice: String? = nil, onDemandTargetCapacity: Int? = nil, replaceUnhealthyInstances: Bool? = nil, spotMaintenanceStrategies: SpotMaintenanceStrategies? = nil, spotMaxTotalPrice: String? = nil, spotPrice: String? = nil, tagSpecifications: [TagSpecification]? = nil, targetCapacity: Int? = nil, targetCapacityUnitType: TargetCapacityUnitType? = nil, terminateInstancesWithExpiration: Bool? = nil, type: FleetType? = nil, validFrom: Date? = nil, validUntil: Date? = nil) {
            self.allocationStrategy = allocationStrategy
            self.clientToken = clientToken
            self.context = context
            self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
            self.fulfilledCapacity = fulfilledCapacity
            self.iamFleetRole = iamFleetRole
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.instancePoolsToUseCount = instancePoolsToUseCount
            self.launchSpecifications = launchSpecifications
            self.launchTemplateConfigs = launchTemplateConfigs
            self.loadBalancersConfig = loadBalancersConfig
            self.onDemandAllocationStrategy = onDemandAllocationStrategy
            self.onDemandFulfilledCapacity = onDemandFulfilledCapacity
            self.onDemandMaxTotalPrice = onDemandMaxTotalPrice
            self.onDemandTargetCapacity = onDemandTargetCapacity
            self.replaceUnhealthyInstances = replaceUnhealthyInstances
            self.spotMaintenanceStrategies = spotMaintenanceStrategies
            self.spotMaxTotalPrice = spotMaxTotalPrice
            self.spotPrice = spotPrice
            self.tagSpecifications = tagSpecifications
            self.targetCapacity = targetCapacity
            self.targetCapacityUnitType = targetCapacityUnitType
            self.terminateInstancesWithExpiration = terminateInstancesWithExpiration
            self.type = type
            self.validFrom = validFrom
            self.validUntil = validUntil
        }

        public func validate(name: String) throws {
            try self.launchSpecifications?.forEach {
                try $0.validate(name: "\(name).launchSpecifications[]")
            }
            try self.launchTemplateConfigs?.forEach {
                try $0.validate(name: "\(name).launchTemplateConfigs[]")
            }
            try self.loadBalancersConfig?.validate(name: "\(name).loadBalancersConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case allocationStrategy = "allocationStrategy"
            case clientToken = "clientToken"
            case context = "context"
            case excessCapacityTerminationPolicy = "excessCapacityTerminationPolicy"
            case fulfilledCapacity = "fulfilledCapacity"
            case iamFleetRole = "iamFleetRole"
            case instanceInterruptionBehavior = "instanceInterruptionBehavior"
            case instancePoolsToUseCount = "instancePoolsToUseCount"
            case launchSpecifications = "launchSpecifications"
            case launchTemplateConfigs = "launchTemplateConfigs"
            case loadBalancersConfig = "loadBalancersConfig"
            case onDemandAllocationStrategy = "onDemandAllocationStrategy"
            case onDemandFulfilledCapacity = "onDemandFulfilledCapacity"
            case onDemandMaxTotalPrice = "onDemandMaxTotalPrice"
            case onDemandTargetCapacity = "onDemandTargetCapacity"
            case replaceUnhealthyInstances = "replaceUnhealthyInstances"
            case spotMaintenanceStrategies = "spotMaintenanceStrategies"
            case spotMaxTotalPrice = "spotMaxTotalPrice"
            case spotPrice = "spotPrice"
            case tagSpecifications = "TagSpecification"
            case targetCapacity = "targetCapacity"
            case targetCapacityUnitType = "targetCapacityUnitType"
            case terminateInstancesWithExpiration = "terminateInstancesWithExpiration"
            case type = "type"
            case validFrom = "validFrom"
            case validUntil = "validUntil"
        }
    }

    public struct SpotFleetTagSpecification: AWSEncodableShape & AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The type of resource. Currently, the only resource type that is supported is instance. To tag the Spot Fleet request on creation, use the TagSpecifications parameter in  SpotFleetRequestConfigData .
        public let resourceType: ResourceType?
        /// The tags.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(resourceType: ResourceType? = nil, tags: [Tag]? = nil) {
            self.resourceType = resourceType
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "resourceType"
            case tags = "tag"
        }
    }

    public struct SpotInstanceRequest: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Deprecated.
        public let actualBlockHourlyPrice: String?
        /// The Availability Zone group. If you specify the same Availability Zone group for all Spot Instance requests, all Spot Instances are launched in the same Availability Zone.
        public let availabilityZoneGroup: String?
        /// Deprecated.
        public let blockDurationMinutes: Int?
        /// The date and time when the Spot Instance request was created, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let createTime: Date?
        /// The fault codes for the Spot Instance request, if any.
        public let fault: SpotInstanceStateFault?
        /// The instance ID, if an instance has been launched to fulfill the Spot Instance request.
        public let instanceId: String?
        /// The behavior when a Spot Instance is interrupted.
        public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
        /// The Availability Zone in which the request is launched.
        public let launchedAvailabilityZone: String?
        /// The instance launch group. Launch groups are Spot Instances that launch together and terminate together.
        public let launchGroup: String?
        /// Additional information for launching instances.
        public let launchSpecification: LaunchSpecification?
        /// The product description associated with the Spot Instance.
        public let productDescription: RIProductDescription?
        /// The ID of the Spot Instance request.
        public let spotInstanceRequestId: String?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance. We do not recommend  using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.  If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify this parameter.
        public let spotPrice: String?
        /// The state of the Spot Instance request. Spot request status information helps track your Spot Instance requests. For more information, see Spot request status in the Amazon EC2 User Guide for Linux Instances.
        public let state: SpotInstanceState?
        /// The status code and status message describing the Spot Instance request.
        public let status: SpotInstanceStatus?
        /// Any tags assigned to the resource.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The Spot Instance request type.
        public let type: SpotInstanceType?
        /// The start date of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The request becomes active at this date and time.
        public let validFrom: Date?
        /// The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ).   For a persistent request, the request remains active until the validUntil date and time is reached. Otherwise, the request remains active until you cancel it.    For a one-time request, the request remains active until all instances launch, the request is canceled, or the validUntil date and time is reached. By default, the request is valid for 7 days from the date the request was created.
        public let validUntil: Date?

        public init(actualBlockHourlyPrice: String? = nil, availabilityZoneGroup: String? = nil, blockDurationMinutes: Int? = nil, createTime: Date? = nil, fault: SpotInstanceStateFault? = nil, instanceId: String? = nil, instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil, launchedAvailabilityZone: String? = nil, launchGroup: String? = nil, launchSpecification: LaunchSpecification? = nil, productDescription: RIProductDescription? = nil, spotInstanceRequestId: String? = nil, spotPrice: String? = nil, state: SpotInstanceState? = nil, status: SpotInstanceStatus? = nil, tags: [Tag]? = nil, type: SpotInstanceType? = nil, validFrom: Date? = nil, validUntil: Date? = nil) {
            self.actualBlockHourlyPrice = actualBlockHourlyPrice
            self.availabilityZoneGroup = availabilityZoneGroup
            self.blockDurationMinutes = blockDurationMinutes
            self.createTime = createTime
            self.fault = fault
            self.instanceId = instanceId
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.launchedAvailabilityZone = launchedAvailabilityZone
            self.launchGroup = launchGroup
            self.launchSpecification = launchSpecification
            self.productDescription = productDescription
            self.spotInstanceRequestId = spotInstanceRequestId
            self.spotPrice = spotPrice
            self.state = state
            self.status = status
            self.tags = tags
            self.type = type
            self.validFrom = validFrom
            self.validUntil = validUntil
        }

        private enum CodingKeys: String, CodingKey {
            case actualBlockHourlyPrice = "actualBlockHourlyPrice"
            case availabilityZoneGroup = "availabilityZoneGroup"
            case blockDurationMinutes = "blockDurationMinutes"
            case createTime = "createTime"
            case fault = "fault"
            case instanceId = "instanceId"
            case instanceInterruptionBehavior = "instanceInterruptionBehavior"
            case launchedAvailabilityZone = "launchedAvailabilityZone"
            case launchGroup = "launchGroup"
            case launchSpecification = "launchSpecification"
            case productDescription = "productDescription"
            case spotInstanceRequestId = "spotInstanceRequestId"
            case spotPrice = "spotPrice"
            case state = "state"
            case status = "status"
            case tags = "tagSet"
            case type = "type"
            case validFrom = "validFrom"
            case validUntil = "validUntil"
        }
    }

    public struct SpotInstanceStateFault: AWSDecodableShape {
        /// The reason code for the Spot Instance state change.
        public let code: String?
        /// The message for the Spot Instance state change.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct SpotInstanceStatus: AWSDecodableShape {
        /// The status code. For a list of status codes, see Spot request status codes in the Amazon EC2 User Guide for Linux Instances.
        public let code: String?
        /// The description for the status code.
        public let message: String?
        /// The date and time of the most recent status update, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let updateTime: Date?

        public init(code: String? = nil, message: String? = nil, updateTime: Date? = nil) {
            self.code = code
            self.message = message
            self.updateTime = updateTime
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
            case updateTime = "updateTime"
        }
    }

    public struct SpotMaintenanceStrategies: AWSEncodableShape & AWSDecodableShape {
        /// The Spot Instance replacement strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an elevated risk of being interrupted. For more information, see Capacity rebalancing in the Amazon EC2 User Guide for Linux Instances.
        public let capacityRebalance: SpotCapacityRebalance?

        public init(capacityRebalance: SpotCapacityRebalance? = nil) {
            self.capacityRebalance = capacityRebalance
        }

        private enum CodingKeys: String, CodingKey {
            case capacityRebalance = "capacityRebalance"
        }
    }

    public struct SpotMarketOptions: AWSEncodableShape {
        /// Deprecated.
        public let blockDurationMinutes: Int?
        /// The behavior when a Spot Instance is interrupted. If Configured (for  HibernationOptions ) is set to true, the InstanceInterruptionBehavior parameter is automatically set to hibernate. If you set it to stop or terminate, you'll get an error. If Configured (for  HibernationOptions ) is set to false or null, the InstanceInterruptionBehavior parameter is automatically set to terminate. You can also set it to stop or hibernate. For more information, see Interruption behavior in the Amazon EC2 User Guide.
        public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
        /// The maximum hourly price that you're willing to pay for a Spot Instance. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.  If you specify a maximum price, your Spot Instances will be interrupted more frequently than if you do not specify this parameter.
        public let maxPrice: String?
        /// The Spot Instance request type. For RunInstances, persistent Spot Instance requests are only supported when the instance interruption behavior is either hibernate or stop.
        public let spotInstanceType: SpotInstanceType?
        /// The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). Supported only for persistent requests.   For a persistent request, the request remains active until the ValidUntil date and time is reached. Otherwise, the request remains active until you cancel it.   For a one-time request, ValidUntil is not supported. The request remains active until all instances launch or you cancel the request.
        public let validUntil: Date?

        public init(blockDurationMinutes: Int? = nil, instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil, maxPrice: String? = nil, spotInstanceType: SpotInstanceType? = nil, validUntil: Date? = nil) {
            self.blockDurationMinutes = blockDurationMinutes
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.maxPrice = maxPrice
            self.spotInstanceType = spotInstanceType
            self.validUntil = validUntil
        }

        private enum CodingKeys: String, CodingKey {
            case blockDurationMinutes = "BlockDurationMinutes"
            case instanceInterruptionBehavior = "InstanceInterruptionBehavior"
            case maxPrice = "MaxPrice"
            case spotInstanceType = "SpotInstanceType"
            case validUntil = "ValidUntil"
        }
    }

    public struct SpotOptions: AWSDecodableShape {
        /// The strategy that determines how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the EC2 Fleet launch configuration. For more information, see Allocation strategies for Spot Instances in the Amazon EC2 User Guide.  price-capacity-optimized (recommended)  EC2 Fleet identifies the pools with   the highest capacity availability for the number of instances that are launching. This means  that we will request Spot Instances from the pools that we believe have the lowest chance of interruption  in the near term. EC2 Fleet then requests Spot Instances from the lowest priced of these pools.  capacity-optimized  EC2 Fleet identifies the pools with   the highest capacity availability for the number of instances that are launching. This means  that we will request Spot Instances from the pools that we believe have the lowest chance of interruption  in the near term. To give certain instance types a higher chance of launching first, use capacity-optimized-prioritized. Set a priority for each instance type by using the Priority parameter for LaunchTemplateOverrides. You can assign the same priority to different LaunchTemplateOverrides. EC2 implements the priorities on a best-effort basis, but optimizes for capacity first. capacity-optimized-prioritized is supported only if your EC2 Fleet uses a launch template. Note that if the On-Demand AllocationStrategy is set to prioritized, the same priority is applied when fulfilling On-Demand capacity.  diversified  EC2 Fleet requests instances from all of the Spot Instance pools that you specify.  lowest-price  EC2 Fleet requests instances from the lowest priced Spot Instance pool that has available capacity. If the lowest priced pool doesn't have available capacity, the Spot Instances come from the next lowest priced pool that has available capacity. If a pool runs out of capacity before fulfilling your desired capacity, EC2 Fleet will continue to fulfill your request by drawing from the next lowest priced pool. To ensure that your desired capacity is met, you might receive Spot Instances from several pools. Because this strategy only considers instance  price and not capacity availability, it might lead to high interruption rates.   Default: lowest-price
        public let allocationStrategy: SpotAllocationStrategy?
        /// The behavior when a Spot Instance is interrupted. Default: terminate
        public let instanceInterruptionBehavior: SpotInstanceInterruptionBehavior?
        /// The number of Spot pools across which to allocate your target Spot capacity. Supported only when AllocationStrategy is set to lowest-price. EC2 Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify. Note that EC2 Fleet attempts to draw Spot Instances from the number of pools that you specify on a best effort basis. If a pool runs out of Spot capacity before fulfilling your target capacity, EC2 Fleet will continue to fulfill your request by drawing from the next cheapest pool. To ensure that your target capacity is met, you might receive Spot Instances from more than the number of pools that you specified. Similarly, if most of the pools have no Spot capacity, you might receive your full target capacity from fewer than the number of pools that you specified.
        public let instancePoolsToUseCount: Int?
        /// The strategies for managing your workloads on your Spot Instances that will be interrupted. Currently only the capacity rebalance strategy is available.
        public let maintenanceStrategies: FleetSpotMaintenanceStrategies?
        /// The maximum amount per hour for Spot Instances that you're willing to pay. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.  If you specify a maximum price, your Spot Instances will be interrupted more frequently than if you do not specify this parameter.   If your fleet includes T instances that are configured as unlimited, and if their average CPU usage exceeds the baseline utilization, you will incur a charge for surplus credits. The maxTotalPrice does not account for surplus credits, and, if you use surplus credits, your final cost might be higher than what you specified for maxTotalPrice. For more information, see Surplus credits can incur charges in the EC2 User Guide.
        public let maxTotalPrice: String?
        /// The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances. Supported only for fleets of type instant. At least one of the following must be specified: SingleAvailabilityZone | SingleInstanceType
        public let minTargetCapacity: Int?
        /// Indicates that the fleet launches all Spot Instances into a single Availability Zone. Supported only for fleets of type instant.
        public let singleAvailabilityZone: Bool?
        /// Indicates that the fleet uses a single instance type to launch all Spot Instances in the fleet. Supported only for fleets of type instant.
        public let singleInstanceType: Bool?

        public init(allocationStrategy: SpotAllocationStrategy? = nil, instanceInterruptionBehavior: SpotInstanceInterruptionBehavior? = nil, instancePoolsToUseCount: Int? = nil, maintenanceStrategies: FleetSpotMaintenanceStrategies? = nil, maxTotalPrice: String? = nil, minTargetCapacity: Int? = nil, singleAvailabilityZone: Bool? = nil, singleInstanceType: Bool? = nil) {
            self.allocationStrategy = allocationStrategy
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.instancePoolsToUseCount = instancePoolsToUseCount
            self.maintenanceStrategies = maintenanceStrategies
            self.maxTotalPrice = maxTotalPrice
            self.minTargetCapacity = minTargetCapacity
            self.singleAvailabilityZone = singleAvailabilityZone
            self.singleInstanceType = singleInstanceType
        }

        private enum CodingKeys: String, CodingKey {
            case allocationStrategy = "allocationStrategy"
            case instanceInterruptionBehavior = "instanceInterruptionBehavior"
            case instancePoolsToUseCount = "instancePoolsToUseCount"
            case maintenanceStrategies = "maintenanceStrategies"
            case maxTotalPrice = "maxTotalPrice"
            case minTargetCapacity = "minTargetCapacity"
            case singleAvailabilityZone = "singleAvailabilityZone"
            case singleInstanceType = "singleInstanceType"
        }
    }

    public struct SpotOptionsRequest: AWSEncodableShape {
        /// The strategy that determines how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the EC2 Fleet launch configuration. For more information, see Allocation strategies for Spot Instances in the Amazon EC2 User Guide.  price-capacity-optimized (recommended)  EC2 Fleet identifies the pools with   the highest capacity availability for the number of instances that are launching. This means  that we will request Spot Instances from the pools that we believe have the lowest chance of interruption  in the near term. EC2 Fleet then requests Spot Instances from the lowest priced of these pools.  capacity-optimized  EC2 Fleet identifies the pools with   the highest capacity availability for the number of instances that are launching. This means  that we will request Spot Instances from the pools that we believe have the lowest chance of interruption  in the near term. To give certain instance types a higher chance of launching first, use capacity-optimized-prioritized. Set a priority for each instance type by using the Priority parameter for LaunchTemplateOverrides. You can assign the same priority to different LaunchTemplateOverrides. EC2 implements the priorities on a best-effort basis, but optimizes for capacity first. capacity-optimized-prioritized is supported only if your EC2 Fleet uses a launch template. Note that if the On-Demand AllocationStrategy is set to prioritized, the same priority is applied when fulfilling On-Demand capacity.  diversified  EC2 Fleet requests instances from all of the Spot Instance pools that you specify.  lowest-price  EC2 Fleet requests instances from the lowest priced Spot Instance pool that has available capacity. If the lowest priced pool doesn't have available capacity, the Spot Instances come from the next lowest priced pool that has available capacity. If a pool runs out of capacity before fulfilling your desired capacity, EC2 Fleet will continue to fulfill your request by drawing from the next lowest priced pool. To ensure that your desired capacity is met, you might receive Spot Instances from several pools. Because this strategy only considers instance  price and not capacity availability, it might lead to high interruption rates.   Default: lowest-price
        public let allocationStrategy: SpotAllocationStrategy?
        /// The behavior when a Spot Instance is interrupted. Default: terminate
        public let instanceInterruptionBehavior: SpotInstanceInterruptionBehavior?
        /// The number of Spot pools across which to allocate your target Spot capacity. Supported only when Spot AllocationStrategy is set to lowest-price. EC2 Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify. Note that EC2 Fleet attempts to draw Spot Instances from the number of pools that you specify on a best effort basis. If a pool runs out of Spot capacity before fulfilling your target capacity, EC2 Fleet will continue to fulfill your request by drawing from the next cheapest pool. To ensure that your target capacity is met, you might receive Spot Instances from more than the number of pools that you specified. Similarly, if most of the pools have no Spot capacity, you might receive your full target capacity from fewer than the number of pools that you specified.
        public let instancePoolsToUseCount: Int?
        /// The strategies for managing your Spot Instances that are at an elevated risk of being interrupted.
        public let maintenanceStrategies: FleetSpotMaintenanceStrategiesRequest?
        /// The maximum amount per hour for Spot Instances that you're willing to pay. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.  If you specify a maximum price, your Spot Instances will be interrupted more frequently than if you do not specify this parameter.   If your fleet includes T instances that are configured as unlimited, and if their average CPU usage exceeds the baseline utilization, you will incur a charge for surplus credits. The MaxTotalPrice does not account for surplus credits, and, if you use surplus credits, your final cost might be higher than what you specified for MaxTotalPrice. For more information, see Surplus credits can incur charges in the EC2 User Guide.
        public let maxTotalPrice: String?
        /// The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances. Supported only for fleets of type instant. At least one of the following must be specified: SingleAvailabilityZone | SingleInstanceType
        public let minTargetCapacity: Int?
        /// Indicates that the fleet launches all Spot Instances into a single Availability Zone. Supported only for fleets of type instant.
        public let singleAvailabilityZone: Bool?
        /// Indicates that the fleet uses a single instance type to launch all Spot Instances in the fleet. Supported only for fleets of type instant.
        public let singleInstanceType: Bool?

        public init(allocationStrategy: SpotAllocationStrategy? = nil, instanceInterruptionBehavior: SpotInstanceInterruptionBehavior? = nil, instancePoolsToUseCount: Int? = nil, maintenanceStrategies: FleetSpotMaintenanceStrategiesRequest? = nil, maxTotalPrice: String? = nil, minTargetCapacity: Int? = nil, singleAvailabilityZone: Bool? = nil, singleInstanceType: Bool? = nil) {
            self.allocationStrategy = allocationStrategy
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.instancePoolsToUseCount = instancePoolsToUseCount
            self.maintenanceStrategies = maintenanceStrategies
            self.maxTotalPrice = maxTotalPrice
            self.minTargetCapacity = minTargetCapacity
            self.singleAvailabilityZone = singleAvailabilityZone
            self.singleInstanceType = singleInstanceType
        }

        private enum CodingKeys: String, CodingKey {
            case allocationStrategy = "AllocationStrategy"
            case instanceInterruptionBehavior = "InstanceInterruptionBehavior"
            case instancePoolsToUseCount = "InstancePoolsToUseCount"
            case maintenanceStrategies = "MaintenanceStrategies"
            case maxTotalPrice = "MaxTotalPrice"
            case minTargetCapacity = "MinTargetCapacity"
            case singleAvailabilityZone = "SingleAvailabilityZone"
            case singleInstanceType = "SingleInstanceType"
        }
    }

    public struct SpotPlacement: AWSEncodableShape & AWSDecodableShape {
        /// The Availability Zone. [Spot Fleet only] To specify multiple Availability Zones, separate them using commas; for example, "us-west-2a, us-west-2b".
        public let availabilityZone: String?
        /// The name of the placement group.
        public let groupName: String?
        /// The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware. The host tenancy is not supported for Spot Instances.
        public let tenancy: Tenancy?

        public init(availabilityZone: String? = nil, groupName: String? = nil, tenancy: Tenancy? = nil) {
            self.availabilityZone = availabilityZone
            self.groupName = groupName
            self.tenancy = tenancy
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case groupName = "groupName"
            case tenancy = "tenancy"
        }
    }

    public struct SpotPlacementScore: AWSDecodableShape {
        /// The Availability Zone.
        public let availabilityZoneId: String?
        /// The Region.
        public let region: String?
        /// The placement score, on a scale from 1 to 10. A score of 10 indicates that your Spot request is highly likely to succeed in this Region or Availability Zone. A score of 1 indicates that your Spot request is not likely to succeed.
        public let score: Int?

        public init(availabilityZoneId: String? = nil, region: String? = nil, score: Int? = nil) {
            self.availabilityZoneId = availabilityZoneId
            self.region = region
            self.score = score
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZoneId = "availabilityZoneId"
            case region = "region"
            case score = "score"
        }
    }

    public struct SpotPrice: AWSDecodableShape {
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The instance type.
        public let instanceType: InstanceType?
        /// A general description of the AMI.
        public let productDescription: RIProductDescription?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance. We do not recommend  using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.  If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify this parameter.
        public let spotPrice: String?
        /// The date and time the request was created, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let timestamp: Date?

        public init(availabilityZone: String? = nil, instanceType: InstanceType? = nil, productDescription: RIProductDescription? = nil, spotPrice: String? = nil, timestamp: Date? = nil) {
            self.availabilityZone = availabilityZone
            self.instanceType = instanceType
            self.productDescription = productDescription
            self.spotPrice = spotPrice
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case instanceType = "instanceType"
            case productDescription = "productDescription"
            case spotPrice = "spotPrice"
            case timestamp = "timestamp"
        }
    }

    public struct StaleIpPermission: AWSDecodableShape {
        public struct _IpRangesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PrefixListIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _UserIdGroupPairsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// If the protocol is TCP or UDP, this is the start of the port range.  If the protocol is ICMP or ICMPv6, this is the ICMP type or -1 (all ICMP types).
        public let fromPort: Int?
        /// The IP protocol name (tcp, udp, icmp, icmpv6) or number (see Protocol Numbers).
        public let ipProtocol: String?
        /// The IP ranges. Not applicable for stale security group rules.
        @OptionalCustomCoding<EC2ArrayCoder<_IpRangesEncoding, String>>
        public var ipRanges: [String]?
        /// The prefix list IDs. Not applicable for stale security group rules.
        @OptionalCustomCoding<EC2ArrayCoder<_PrefixListIdsEncoding, String>>
        public var prefixListIds: [String]?
        /// If the protocol is TCP or UDP, this is the end of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP code or -1 (all ICMP codes).
        public let toPort: Int?
        /// The security group pairs. Returns the ID of the referenced security group and VPC, and the ID and status of the VPC peering connection.
        @OptionalCustomCoding<EC2ArrayCoder<_UserIdGroupPairsEncoding, UserIdGroupPair>>
        public var userIdGroupPairs: [UserIdGroupPair]?

        public init(fromPort: Int? = nil, ipProtocol: String? = nil, ipRanges: [String]? = nil, prefixListIds: [String]? = nil, toPort: Int? = nil, userIdGroupPairs: [UserIdGroupPair]? = nil) {
            self.fromPort = fromPort
            self.ipProtocol = ipProtocol
            self.ipRanges = ipRanges
            self.prefixListIds = prefixListIds
            self.toPort = toPort
            self.userIdGroupPairs = userIdGroupPairs
        }

        private enum CodingKeys: String, CodingKey {
            case fromPort = "fromPort"
            case ipProtocol = "ipProtocol"
            case ipRanges = "ipRanges"
            case prefixListIds = "prefixListIds"
            case toPort = "toPort"
            case userIdGroupPairs = "groups"
        }
    }

    public struct StaleSecurityGroup: AWSDecodableShape {
        public struct _StaleIpPermissionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _StaleIpPermissionsEgressEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The description of the security group.
        public let description: String?
        /// The ID of the security group.
        public let groupId: String?
        /// The name of the security group.
        public let groupName: String?
        /// Information about the stale inbound rules in the security group.
        @OptionalCustomCoding<EC2ArrayCoder<_StaleIpPermissionsEncoding, StaleIpPermission>>
        public var staleIpPermissions: [StaleIpPermission]?
        /// Information about the stale outbound rules in the security group.
        @OptionalCustomCoding<EC2ArrayCoder<_StaleIpPermissionsEgressEncoding, StaleIpPermission>>
        public var staleIpPermissionsEgress: [StaleIpPermission]?
        /// The ID of the VPC for the security group.
        public let vpcId: String?

        public init(description: String? = nil, groupId: String? = nil, groupName: String? = nil, staleIpPermissions: [StaleIpPermission]? = nil, staleIpPermissionsEgress: [StaleIpPermission]? = nil, vpcId: String? = nil) {
            self.description = description
            self.groupId = groupId
            self.groupName = groupName
            self.staleIpPermissions = staleIpPermissions
            self.staleIpPermissionsEgress = staleIpPermissionsEgress
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case groupId = "groupId"
            case groupName = "groupName"
            case staleIpPermissions = "staleIpPermissions"
            case staleIpPermissionsEgress = "staleIpPermissionsEgress"
            case vpcId = "vpcId"
        }
    }

    public struct StartInstancesRequest: AWSEncodableShape {
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "InstanceId" }

        /// Reserved.
        public let additionalInfo: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the instances.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]?

        public init(additionalInfo: String? = nil, dryRun: Bool? = nil, instanceIds: [String]? = nil) {
            self.additionalInfo = additionalInfo
            self.dryRun = dryRun
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case additionalInfo = "additionalInfo"
            case dryRun = "dryRun"
            case instanceIds = "InstanceId"
        }
    }

    public struct StartInstancesResult: AWSDecodableShape {
        public struct _StartingInstancesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the started instances.
        @OptionalCustomCoding<EC2ArrayCoder<_StartingInstancesEncoding, InstanceStateChange>>
        public var startingInstances: [InstanceStateChange]?

        public init(startingInstances: [InstanceStateChange]? = nil) {
            self.startingInstances = startingInstances
        }

        private enum CodingKeys: String, CodingKey {
            case startingInstances = "instancesSet"
        }
    }

    public struct StartNetworkInsightsAccessScopeAnalysisRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information,  see How to ensure idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Network Access Scope.
        public let networkInsightsAccessScopeId: String?
        /// The tags to apply.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = nil, dryRun: Bool? = nil, networkInsightsAccessScopeId: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.networkInsightsAccessScopeId = networkInsightsAccessScopeId
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case networkInsightsAccessScopeId = "NetworkInsightsAccessScopeId"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct StartNetworkInsightsAccessScopeAnalysisResult: AWSDecodableShape {
        /// The Network Access Scope analysis.
        public let networkInsightsAccessScopeAnalysis: NetworkInsightsAccessScopeAnalysis?

        public init(networkInsightsAccessScopeAnalysis: NetworkInsightsAccessScopeAnalysis? = nil) {
            self.networkInsightsAccessScopeAnalysis = networkInsightsAccessScopeAnalysis
        }

        private enum CodingKeys: String, CodingKey {
            case networkInsightsAccessScopeAnalysis = "networkInsightsAccessScopeAnalysis"
        }
    }

    public struct StartNetworkInsightsAnalysisRequest: AWSEncodableShape {
        public struct _AdditionalAccountsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _FilterInArnsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The member accounts that contain resources that the path can traverse.
        @OptionalCustomCoding<EC2ArrayCoder<_AdditionalAccountsEncoding, String>>
        public var additionalAccounts: [String]?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information,  see How to ensure idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Amazon Resource Names (ARN) of the resources that the path must traverse.
        @OptionalCustomCoding<EC2ArrayCoder<_FilterInArnsEncoding, String>>
        public var filterInArns: [String]?
        /// The ID of the path.
        public let networkInsightsPathId: String?
        /// The tags to apply.
        @OptionalCustomCoding<EC2ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(additionalAccounts: [String]? = nil, clientToken: String? = nil, dryRun: Bool? = nil, filterInArns: [String]? = nil, networkInsightsPathId: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.additionalAccounts = additionalAccounts
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.filterInArns = filterInArns
            self.networkInsightsPathId = networkInsightsPathId
            self.tagSpecifications = tagSpecifications
        }

        public func validate(name: String) throws {
            try self.filterInArns?.forEach {
                try validate($0, name: "filterInArns[]", parent: name, max: 1283)
                try validate($0, name: "filterInArns[]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case additionalAccounts = "AdditionalAccount"
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case filterInArns = "FilterInArn"
            case networkInsightsPathId = "NetworkInsightsPathId"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct StartNetworkInsightsAnalysisResult: AWSDecodableShape {
        /// Information about the network insights analysis.
        public let networkInsightsAnalysis: NetworkInsightsAnalysis?

        public init(networkInsightsAnalysis: NetworkInsightsAnalysis? = nil) {
            self.networkInsightsAnalysis = networkInsightsAnalysis
        }

        private enum CodingKeys: String, CodingKey {
            case networkInsightsAnalysis = "networkInsightsAnalysis"
        }
    }

    public struct StartVpcEndpointServicePrivateDnsVerificationRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the endpoint service.
        public let serviceId: String?

        public init(dryRun: Bool? = nil, serviceId: String? = nil) {
            self.dryRun = dryRun
            self.serviceId = serviceId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case serviceId = "ServiceId"
        }
    }

    public struct StartVpcEndpointServicePrivateDnsVerificationResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let returnValue: Bool?

        public init(returnValue: Bool? = nil) {
            self.returnValue = returnValue
        }

        private enum CodingKeys: String, CodingKey {
            case returnValue = "return"
        }
    }

    public struct StateReason: AWSDecodableShape {
        /// The reason code for the state change.
        public let code: String?
        /// The message for the state change.    Server.InsufficientInstanceCapacity: There was insufficient capacity available to satisfy the launch request.    Server.InternalError: An internal error caused the instance to terminate during launch.    Server.ScheduledStop: The instance was stopped due to a scheduled retirement.    Server.SpotInstanceShutdown: The instance was stopped because the number of Spot requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an increase in the Spot price.    Server.SpotInstanceTermination: The instance was terminated because the number of Spot requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an increase in the Spot price.    Client.InstanceInitiatedShutdown: The instance was shut down from the operating system of the instance.    Client.InstanceTerminated: The instance was terminated or rebooted during AMI creation.    Client.InternalError: A client error caused the instance to terminate during launch.    Client.InvalidSnapshot.NotFound: The specified snapshot was not found.    Client.UserInitiatedHibernate: Hibernation was initiated on the instance.    Client.UserInitiatedShutdown: The instance was shut down using the Amazon EC2 API.    Client.VolumeLimitExceeded: The limit on the number of EBS volumes or total storage was exceeded. Decrease usage or request an increase in your account limits.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct StopInstancesRequest: AWSEncodableShape {
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "InstanceId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Forces the instances to stop. The instances do not have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures. This option is not recommended for Windows instances. Default: false
        public let force: Bool?
        /// Hibernates the instance if the instance was enabled for hibernation at launch. If the instance cannot hibernate successfully, a normal shutdown occurs. For more information, see Hibernate your instance in the Amazon EC2 User Guide. Default: false
        public let hibernate: Bool?
        /// The IDs of the instances.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]?

        public init(dryRun: Bool? = nil, force: Bool? = nil, hibernate: Bool? = nil, instanceIds: [String]? = nil) {
            self.dryRun = dryRun
            self.force = force
            self.hibernate = hibernate
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case force = "force"
            case hibernate = "Hibernate"
            case instanceIds = "InstanceId"
        }
    }

    public struct StopInstancesResult: AWSDecodableShape {
        public struct _StoppingInstancesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the stopped instances.
        @OptionalCustomCoding<EC2ArrayCoder<_StoppingInstancesEncoding, InstanceStateChange>>
        public var stoppingInstances: [InstanceStateChange]?

        public init(stoppingInstances: [InstanceStateChange]? = nil) {
            self.stoppingInstances = stoppingInstances
        }

        private enum CodingKeys: String, CodingKey {
            case stoppingInstances = "instancesSet"
        }
    }

    public struct Storage: AWSEncodableShape & AWSDecodableShape {
        /// An Amazon S3 storage location.
        public let s3: S3Storage?

        public init(s3: S3Storage? = nil) {
            self.s3 = s3
        }

        private enum CodingKeys: String, CodingKey {
            case s3 = "S3"
        }
    }

    public struct StorageLocation: AWSEncodableShape {
        /// The name of the S3 bucket.
        public let bucket: String?
        /// The key.
        public let key: String?

        public init(bucket: String? = nil, key: String? = nil) {
            self.bucket = bucket
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case key = "Key"
        }
    }

    public struct StoreImageTaskResult: AWSDecodableShape {
        /// The ID of the AMI that is being stored.
        public let amiId: String?
        /// The name of the Amazon S3 bucket that contains the stored AMI object.
        public let bucket: String?
        /// The progress of the task as a percentage.
        public let progressPercentage: Int?
        /// The name of the stored AMI object in the bucket.
        public let s3objectKey: String?
        /// If the tasks fails, the reason for the failure is returned. If the task succeeds, null is returned.
        public let storeTaskFailureReason: String?
        /// The state of the store task (InProgress, Completed, or Failed).
        public let storeTaskState: String?
        /// The time the task started.
        public let taskStartTime: Date?

        public init(amiId: String? = nil, bucket: String? = nil, progressPercentage: Int? = nil, s3objectKey: String? = nil, storeTaskFailureReason: String? = nil, storeTaskState: String? = nil, taskStartTime: Date? = nil) {
            self.amiId = amiId
            self.bucket = bucket
            self.progressPercentage = progressPercentage
            self.s3objectKey = s3objectKey
            self.storeTaskFailureReason = storeTaskFailureReason
            self.storeTaskState = storeTaskState
            self.taskStartTime = taskStartTime
        }

        private enum CodingKeys: String, CodingKey {
            case amiId = "amiId"
            case bucket = "bucket"
            case progressPercentage = "progressPercentage"
            case s3objectKey = "s3objectKey"
            case storeTaskFailureReason = "storeTaskFailureReason"
            case storeTaskState = "storeTaskState"
            case taskStartTime = "taskStartTime"
        }
    }

    public struct Subnet: AWSDecodableShape {
        public struct _Ipv6CidrBlockAssociationSetEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether a network interface created in this subnet (including a network interface created by RunInstances) receives an IPv6 address.
        public let assignIpv6AddressOnCreation: Bool?
        /// The Availability Zone of the subnet.
        public let availabilityZone: String?
        /// The AZ ID of the subnet.
        public let availabilityZoneId: String?
        /// The number of unused private IPv4 addresses in the subnet. The IPv4 addresses for any
        /// 			stopped instances are considered unavailable.
        public let availableIpAddressCount: Int?
        /// The IPv4 CIDR block assigned to the subnet.
        public let cidrBlock: String?
        /// The customer-owned IPv4 address pool associated with the subnet.
        public let customerOwnedIpv4Pool: String?
        /// Indicates whether this is the default subnet for the Availability Zone.
        public let defaultForAz: Bool?
        /// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet  should return synthetic IPv6 addresses for IPv4-only destinations.
        public let enableDns64: Bool?
        ///  Indicates the device position for local network interfaces in this subnet. For example,  1 indicates local network interfaces in this subnet are the secondary  network interface (eth1).
        public let enableLniAtDeviceIndex: Int?
        /// Information about the IPv6 CIDR blocks associated with the subnet.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv6CidrBlockAssociationSetEncoding, SubnetIpv6CidrBlockAssociation>>
        public var ipv6CidrBlockAssociationSet: [SubnetIpv6CidrBlockAssociation]?
        /// Indicates whether this is an IPv6 only subnet.
        public let ipv6Native: Bool?
        /// Indicates whether a network interface created in this subnet (including a network interface created by RunInstances) receives a customer-owned IPv4 address.
        public let mapCustomerOwnedIpOnLaunch: Bool?
        /// Indicates whether instances launched in this subnet receive a public IPv4 address. Amazon Web Services charges for all public IPv4 addresses, including public IPv4 addresses
        /// associated with running instances and Elastic IP addresses. For more information, see the Public IPv4 Address tab on the Amazon VPC pricing page.
        public let mapPublicIpOnLaunch: Bool?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// The ID of the Amazon Web Services account that owns the subnet.
        public let ownerId: String?
        /// The type of hostnames to assign to instances in the subnet at launch. An instance hostname is based on the IPv4 address or ID of the instance.
        public let privateDnsNameOptionsOnLaunch: PrivateDnsNameOptionsOnLaunch?
        /// The current state of the subnet.
        public let state: SubnetState?
        /// The Amazon Resource Name (ARN) of the subnet.
        public let subnetArn: String?
        /// The ID of the subnet.
        public let subnetId: String?
        /// Any tags assigned to the subnet.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VPC the subnet is in.
        public let vpcId: String?

        public init(assignIpv6AddressOnCreation: Bool? = nil, availabilityZone: String? = nil, availabilityZoneId: String? = nil, availableIpAddressCount: Int? = nil, cidrBlock: String? = nil, customerOwnedIpv4Pool: String? = nil, defaultForAz: Bool? = nil, enableDns64: Bool? = nil, enableLniAtDeviceIndex: Int? = nil, ipv6CidrBlockAssociationSet: [SubnetIpv6CidrBlockAssociation]? = nil, ipv6Native: Bool? = nil, mapCustomerOwnedIpOnLaunch: Bool? = nil, mapPublicIpOnLaunch: Bool? = nil, outpostArn: String? = nil, ownerId: String? = nil, privateDnsNameOptionsOnLaunch: PrivateDnsNameOptionsOnLaunch? = nil, state: SubnetState? = nil, subnetArn: String? = nil, subnetId: String? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.assignIpv6AddressOnCreation = assignIpv6AddressOnCreation
            self.availabilityZone = availabilityZone
            self.availabilityZoneId = availabilityZoneId
            self.availableIpAddressCount = availableIpAddressCount
            self.cidrBlock = cidrBlock
            self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
            self.defaultForAz = defaultForAz
            self.enableDns64 = enableDns64
            self.enableLniAtDeviceIndex = enableLniAtDeviceIndex
            self.ipv6CidrBlockAssociationSet = ipv6CidrBlockAssociationSet
            self.ipv6Native = ipv6Native
            self.mapCustomerOwnedIpOnLaunch = mapCustomerOwnedIpOnLaunch
            self.mapPublicIpOnLaunch = mapPublicIpOnLaunch
            self.outpostArn = outpostArn
            self.ownerId = ownerId
            self.privateDnsNameOptionsOnLaunch = privateDnsNameOptionsOnLaunch
            self.state = state
            self.subnetArn = subnetArn
            self.subnetId = subnetId
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case assignIpv6AddressOnCreation = "assignIpv6AddressOnCreation"
            case availabilityZone = "availabilityZone"
            case availabilityZoneId = "availabilityZoneId"
            case availableIpAddressCount = "availableIpAddressCount"
            case cidrBlock = "cidrBlock"
            case customerOwnedIpv4Pool = "customerOwnedIpv4Pool"
            case defaultForAz = "defaultForAz"
            case enableDns64 = "enableDns64"
            case enableLniAtDeviceIndex = "enableLniAtDeviceIndex"
            case ipv6CidrBlockAssociationSet = "ipv6CidrBlockAssociationSet"
            case ipv6Native = "ipv6Native"
            case mapCustomerOwnedIpOnLaunch = "mapCustomerOwnedIpOnLaunch"
            case mapPublicIpOnLaunch = "mapPublicIpOnLaunch"
            case outpostArn = "outpostArn"
            case ownerId = "ownerId"
            case privateDnsNameOptionsOnLaunch = "privateDnsNameOptionsOnLaunch"
            case state = "state"
            case subnetArn = "subnetArn"
            case subnetId = "subnetId"
            case tags = "tagSet"
            case vpcId = "vpcId"
        }
    }

    public struct SubnetAssociation: AWSDecodableShape {
        /// The state of the subnet association.
        public let state: TransitGatewayMulitcastDomainAssociationState?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(state: TransitGatewayMulitcastDomainAssociationState? = nil, subnetId: String? = nil) {
            self.state = state
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case subnetId = "subnetId"
        }
    }

    public struct SubnetCidrBlockState: AWSDecodableShape {
        /// The state of a CIDR block.
        public let state: SubnetCidrBlockStateCode?
        /// A message about the status of the CIDR block, if applicable.
        public let statusMessage: String?

        public init(state: SubnetCidrBlockStateCode? = nil, statusMessage: String? = nil) {
            self.state = state
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case statusMessage = "statusMessage"
        }
    }

    public struct SubnetCidrReservation: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The CIDR that has been reserved.
        public let cidr: String?
        /// The description assigned to the subnet CIDR reservation.
        public let description: String?
        /// The ID of the account that owns the subnet CIDR reservation.
        public let ownerId: String?
        /// The type of reservation.
        public let reservationType: SubnetCidrReservationType?
        /// The ID of the subnet CIDR reservation.
        public let subnetCidrReservationId: String?
        /// The ID of the subnet.
        public let subnetId: String?
        /// The tags assigned to the subnet CIDR reservation.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(cidr: String? = nil, description: String? = nil, ownerId: String? = nil, reservationType: SubnetCidrReservationType? = nil, subnetCidrReservationId: String? = nil, subnetId: String? = nil, tags: [Tag]? = nil) {
            self.cidr = cidr
            self.description = description
            self.ownerId = ownerId
            self.reservationType = reservationType
            self.subnetCidrReservationId = subnetCidrReservationId
            self.subnetId = subnetId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "cidr"
            case description = "description"
            case ownerId = "ownerId"
            case reservationType = "reservationType"
            case subnetCidrReservationId = "subnetCidrReservationId"
            case subnetId = "subnetId"
            case tags = "tagSet"
        }
    }

    public struct SubnetConfiguration: AWSEncodableShape {
        /// The IPv4 address to assign to the endpoint network interface in the subnet. You must provide  an IPv4 address if the VPC endpoint supports IPv4. If you specify an IPv4 address when modifying a VPC endpoint, we replace the existing  endpoint network interface with a new endpoint network interface with this IP address.  This process temporarily disconnects the subnet and the VPC endpoint.
        public let ipv4: String?
        /// The IPv6 address to assign to the endpoint network interface in the subnet. You must provide  an IPv6 address if the VPC endpoint supports IPv6. If you specify an IPv6 address when modifying a VPC endpoint, we replace the existing  endpoint network interface with a new endpoint network interface with this IP address.  This process temporarily disconnects the subnet and the VPC endpoint.
        public let ipv6: String?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(ipv4: String? = nil, ipv6: String? = nil, subnetId: String? = nil) {
            self.ipv4 = ipv4
            self.ipv6 = ipv6
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv4 = "Ipv4"
            case ipv6 = "Ipv6"
            case subnetId = "SubnetId"
        }
    }

    public struct SubnetIpv6CidrBlockAssociation: AWSDecodableShape {
        /// The ID of the association.
        public let associationId: String?
        /// The IPv6 CIDR block.
        public let ipv6CidrBlock: String?
        /// The state of the CIDR block.
        public let ipv6CidrBlockState: SubnetCidrBlockState?

        public init(associationId: String? = nil, ipv6CidrBlock: String? = nil, ipv6CidrBlockState: SubnetCidrBlockState? = nil) {
            self.associationId = associationId
            self.ipv6CidrBlock = ipv6CidrBlock
            self.ipv6CidrBlockState = ipv6CidrBlockState
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case ipv6CidrBlock = "ipv6CidrBlock"
            case ipv6CidrBlockState = "ipv6CidrBlockState"
        }
    }

    public struct Subscription: AWSDecodableShape {
        /// The Region or Availability Zone that's the target for the subscription. For example, eu-west-1.
        public let destination: String?
        /// The metric used for the subscription.
        public let metric: MetricType?
        /// The data aggregation time for the subscription.
        public let period: PeriodType?
        /// The Region or Availability Zone that's the source for the subscription. For example, us-east-1.
        public let source: String?
        /// The statistic used for the subscription.
        public let statistic: StatisticType?

        public init(destination: String? = nil, metric: MetricType? = nil, period: PeriodType? = nil, source: String? = nil, statistic: StatisticType? = nil) {
            self.destination = destination
            self.metric = metric
            self.period = period
            self.source = source
            self.statistic = statistic
        }

        private enum CodingKeys: String, CodingKey {
            case destination = "destination"
            case metric = "metric"
            case period = "period"
            case source = "source"
            case statistic = "statistic"
        }
    }

    public struct SuccessfulInstanceCreditSpecificationItem: AWSDecodableShape {
        /// The ID of the instance.
        public let instanceId: String?

        public init(instanceId: String? = nil) {
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
        }
    }

    public struct SuccessfulQueuedPurchaseDeletion: AWSDecodableShape {
        /// The ID of the Reserved Instance.
        public let reservedInstancesId: String?

        public init(reservedInstancesId: String? = nil) {
            self.reservedInstancesId = reservedInstancesId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesId = "reservedInstancesId"
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        /// The key of the tag. Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode characters.  May not begin with aws:.
        public let key: String?
        /// The value of the tag. Constraints: Tag values are case-sensitive and accept a maximum of 256 Unicode characters.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct TagDescription: AWSDecodableShape {
        /// The tag key.
        public let key: String?
        /// The ID of the resource.
        public let resourceId: String?
        /// The resource type.
        public let resourceType: ResourceType?
        /// The tag value.
        public let value: String?

        public init(key: String? = nil, resourceId: String? = nil, resourceType: ResourceType? = nil, value: String? = nil) {
            self.key = key
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case resourceId = "resourceId"
            case resourceType = "resourceType"
            case value = "value"
        }
    }

    public struct TagSpecification: AWSEncodableShape & AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The type of resource to tag on creation.
        public let resourceType: ResourceType?
        /// The tags to apply to the resource.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(resourceType: ResourceType? = nil, tags: [Tag]? = nil) {
            self.resourceType = resourceType
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "resourceType"
            case tags = "Tag"
        }
    }

    public struct TargetCapacitySpecification: AWSDecodableShape {
        /// The default target capacity type.
        public let defaultTargetCapacityType: DefaultTargetCapacityType?
        /// The number of On-Demand units to request. If you specify a target capacity for Spot units, you cannot specify a target capacity for On-Demand units.
        public let onDemandTargetCapacity: Int?
        /// The maximum number of Spot units to launch. If you specify a target capacity for On-Demand units, you cannot specify a target capacity for Spot units.
        public let spotTargetCapacity: Int?
        /// The unit for the target capacity.
        public let targetCapacityUnitType: TargetCapacityUnitType?
        /// The number of units to request, filled the default target capacity type.
        public let totalTargetCapacity: Int?

        public init(defaultTargetCapacityType: DefaultTargetCapacityType? = nil, onDemandTargetCapacity: Int? = nil, spotTargetCapacity: Int? = nil, targetCapacityUnitType: TargetCapacityUnitType? = nil, totalTargetCapacity: Int? = nil) {
            self.defaultTargetCapacityType = defaultTargetCapacityType
            self.onDemandTargetCapacity = onDemandTargetCapacity
            self.spotTargetCapacity = spotTargetCapacity
            self.targetCapacityUnitType = targetCapacityUnitType
            self.totalTargetCapacity = totalTargetCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case defaultTargetCapacityType = "defaultTargetCapacityType"
            case onDemandTargetCapacity = "onDemandTargetCapacity"
            case spotTargetCapacity = "spotTargetCapacity"
            case targetCapacityUnitType = "targetCapacityUnitType"
            case totalTargetCapacity = "totalTargetCapacity"
        }
    }

    public struct TargetCapacitySpecificationRequest: AWSEncodableShape {
        /// The default target capacity type.
        public let defaultTargetCapacityType: DefaultTargetCapacityType?
        /// The number of On-Demand units to request.
        public let onDemandTargetCapacity: Int?
        /// The number of Spot units to request.
        public let spotTargetCapacity: Int?
        /// The unit for the target capacity. You can specify this parameter only when using attributed-based instance type selection. Default: units (the number of instances)
        public let targetCapacityUnitType: TargetCapacityUnitType?
        /// The number of units to request, filled using the default target capacity type.
        public let totalTargetCapacity: Int?

        public init(defaultTargetCapacityType: DefaultTargetCapacityType? = nil, onDemandTargetCapacity: Int? = nil, spotTargetCapacity: Int? = nil, targetCapacityUnitType: TargetCapacityUnitType? = nil, totalTargetCapacity: Int? = nil) {
            self.defaultTargetCapacityType = defaultTargetCapacityType
            self.onDemandTargetCapacity = onDemandTargetCapacity
            self.spotTargetCapacity = spotTargetCapacity
            self.targetCapacityUnitType = targetCapacityUnitType
            self.totalTargetCapacity = totalTargetCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case defaultTargetCapacityType = "DefaultTargetCapacityType"
            case onDemandTargetCapacity = "OnDemandTargetCapacity"
            case spotTargetCapacity = "SpotTargetCapacity"
            case targetCapacityUnitType = "TargetCapacityUnitType"
            case totalTargetCapacity = "TotalTargetCapacity"
        }
    }

    public struct TargetConfiguration: AWSDecodableShape {
        /// The number of instances the Convertible Reserved Instance offering can be applied to. This parameter is  reserved and cannot be specified in a request
        public let instanceCount: Int?
        /// The ID of the Convertible Reserved Instance offering.
        public let offeringId: String?

        public init(instanceCount: Int? = nil, offeringId: String? = nil) {
            self.instanceCount = instanceCount
            self.offeringId = offeringId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceCount = "instanceCount"
            case offeringId = "offeringId"
        }
    }

    public struct TargetConfigurationRequest: AWSEncodableShape {
        /// The number of instances the Convertible Reserved Instance offering can be applied to. This parameter is reserved and cannot  be specified in a request
        public let instanceCount: Int?
        /// The Convertible Reserved Instance offering ID.
        public let offeringId: String?

        public init(instanceCount: Int? = nil, offeringId: String? = nil) {
            self.instanceCount = instanceCount
            self.offeringId = offeringId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceCount = "InstanceCount"
            case offeringId = "OfferingId"
        }
    }

    public struct TargetGroup: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the target group.
        public let arn: String?

        public init(arn: String? = nil) {
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
        }
    }

    public struct TargetGroupsConfig: AWSEncodableShape & AWSDecodableShape {
        public struct _TargetGroupsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// One or more target groups.
        @OptionalCustomCoding<EC2ArrayCoder<_TargetGroupsEncoding, TargetGroup>>
        public var targetGroups: [TargetGroup]?

        public init(targetGroups: [TargetGroup]? = nil) {
            self.targetGroups = targetGroups
        }

        public func validate(name: String) throws {
            try self.validate(self.targetGroups, name: "targetGroups", parent: name, max: 5)
            try self.validate(self.targetGroups, name: "targetGroups", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroups = "targetGroups"
        }
    }

    public struct TargetNetwork: AWSDecodableShape {
        public struct _SecurityGroupsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the association.
        public let associationId: String?
        /// The ID of the Client VPN endpoint with which the target network is associated.
        public let clientVpnEndpointId: String?
        /// The IDs of the security groups applied to the target network association.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupsEncoding, String>>
        public var securityGroups: [String]?
        /// The current state of the target network association.
        public let status: AssociationStatus?
        /// The ID of the subnet specified as the target network.
        public let targetNetworkId: String?
        /// The ID of the VPC in which the target network (subnet) is located.
        public let vpcId: String?

        public init(associationId: String? = nil, clientVpnEndpointId: String? = nil, securityGroups: [String]? = nil, status: AssociationStatus? = nil, targetNetworkId: String? = nil, vpcId: String? = nil) {
            self.associationId = associationId
            self.clientVpnEndpointId = clientVpnEndpointId
            self.securityGroups = securityGroups
            self.status = status
            self.targetNetworkId = targetNetworkId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case clientVpnEndpointId = "clientVpnEndpointId"
            case securityGroups = "securityGroups"
            case status = "status"
            case targetNetworkId = "targetNetworkId"
            case vpcId = "vpcId"
        }
    }

    public struct TargetReservationValue: AWSDecodableShape {
        /// The total value of the Convertible Reserved Instances that make up the exchange. This is the sum of the list value, remaining upfront price, and additional upfront cost of the exchange.
        public let reservationValue: ReservationValue?
        /// The configuration of the Convertible Reserved Instances that make up the exchange.
        public let targetConfiguration: TargetConfiguration?

        public init(reservationValue: ReservationValue? = nil, targetConfiguration: TargetConfiguration? = nil) {
            self.reservationValue = reservationValue
            self.targetConfiguration = targetConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case reservationValue = "reservationValue"
            case targetConfiguration = "targetConfiguration"
        }
    }

    public struct TerminateClientVpnConnectionsRequest: AWSEncodableShape {
        /// The ID of the Client VPN endpoint to which the client is connected.
        public let clientVpnEndpointId: String?
        /// The ID of the client connection to be terminated.
        public let connectionId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name of the user who initiated the connection. Use this option to terminate all active connections for
        /// 			the specified user. This option can only be used if the user has established up to five connections.
        public let username: String?

        public init(clientVpnEndpointId: String? = nil, connectionId: String? = nil, dryRun: Bool? = nil, username: String? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.connectionId = connectionId
            self.dryRun = dryRun
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case connectionId = "ConnectionId"
            case dryRun = "DryRun"
            case username = "Username"
        }
    }

    public struct TerminateClientVpnConnectionsResult: AWSDecodableShape {
        public struct _ConnectionStatusesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String?
        /// The current state of the client connections.
        @OptionalCustomCoding<EC2ArrayCoder<_ConnectionStatusesEncoding, TerminateConnectionStatus>>
        public var connectionStatuses: [TerminateConnectionStatus]?
        /// The user who established the terminated client connections.
        public let username: String?

        public init(clientVpnEndpointId: String? = nil, connectionStatuses: [TerminateConnectionStatus]? = nil, username: String? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.connectionStatuses = connectionStatuses
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "clientVpnEndpointId"
            case connectionStatuses = "connectionStatuses"
            case username = "username"
        }
    }

    public struct TerminateConnectionStatus: AWSDecodableShape {
        /// The ID of the client connection.
        public let connectionId: String?
        /// A message about the status of the client connection, if applicable.
        public let currentStatus: ClientVpnConnectionStatus?
        /// The state of the client connection.
        public let previousStatus: ClientVpnConnectionStatus?

        public init(connectionId: String? = nil, currentStatus: ClientVpnConnectionStatus? = nil, previousStatus: ClientVpnConnectionStatus? = nil) {
            self.connectionId = connectionId
            self.currentStatus = currentStatus
            self.previousStatus = previousStatus
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId = "connectionId"
            case currentStatus = "currentStatus"
            case previousStatus = "previousStatus"
        }
    }

    public struct TerminateInstancesRequest: AWSEncodableShape {
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "InstanceId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the instances. Constraints: Up to 1000 instance IDs. We recommend breaking up this request into smaller batches.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]?

        public init(dryRun: Bool? = nil, instanceIds: [String]? = nil) {
            self.dryRun = dryRun
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceIds = "InstanceId"
        }
    }

    public struct TerminateInstancesResult: AWSDecodableShape {
        public struct _TerminatingInstancesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the terminated instances.
        @OptionalCustomCoding<EC2ArrayCoder<_TerminatingInstancesEncoding, InstanceStateChange>>
        public var terminatingInstances: [InstanceStateChange]?

        public init(terminatingInstances: [InstanceStateChange]? = nil) {
            self.terminatingInstances = terminatingInstances
        }

        private enum CodingKeys: String, CodingKey {
            case terminatingInstances = "instancesSet"
        }
    }

    public struct ThroughResourcesStatement: AWSDecodableShape {
        /// The resource statement.
        public let resourceStatement: ResourceStatement?

        public init(resourceStatement: ResourceStatement? = nil) {
            self.resourceStatement = resourceStatement
        }

        private enum CodingKeys: String, CodingKey {
            case resourceStatement = "resourceStatement"
        }
    }

    public struct ThroughResourcesStatementRequest: AWSEncodableShape {
        /// The resource statement.
        public let resourceStatement: ResourceStatementRequest?

        public init(resourceStatement: ResourceStatementRequest? = nil) {
            self.resourceStatement = resourceStatement
        }

        private enum CodingKeys: String, CodingKey {
            case resourceStatement = "ResourceStatement"
        }
    }

    public struct TotalLocalStorageGB: AWSEncodableShape & AWSDecodableShape {
        /// The maximum amount of total local storage, in GB. If this parameter is not specified, there is no maximum limit.
        public let max: Double?
        /// The minimum amount of total local storage, in GB. If this parameter is not specified, there is no minimum limit.
        public let min: Double?

        public init(max: Double? = nil, min: Double? = nil) {
            self.max = max
            self.min = min
        }

        private enum CodingKeys: String, CodingKey {
            case max = "max"
            case min = "min"
        }
    }

    public struct TotalLocalStorageGBRequest: AWSEncodableShape {
        /// The maximum amount of total local storage, in GB. To specify no maximum limit, omit this parameter.
        public let max: Double?
        /// The minimum amount of total local storage, in GB. To specify no minimum limit, omit this parameter.
        public let min: Double?

        public init(max: Double? = nil, min: Double? = nil) {
            self.max = max
            self.min = min
        }

        private enum CodingKeys: String, CodingKey {
            case max = "Max"
            case min = "Min"
        }
    }

    public struct TrafficMirrorFilter: AWSDecodableShape {
        public struct _EgressFilterRulesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _IngressFilterRulesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _NetworkServicesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The description of the Traffic Mirror filter.
        public let description: String?
        /// Information about the egress rules that are associated with the Traffic Mirror filter.
        @OptionalCustomCoding<EC2ArrayCoder<_EgressFilterRulesEncoding, TrafficMirrorFilterRule>>
        public var egressFilterRules: [TrafficMirrorFilterRule]?
        /// Information about the ingress rules that are associated with the Traffic Mirror filter.
        @OptionalCustomCoding<EC2ArrayCoder<_IngressFilterRulesEncoding, TrafficMirrorFilterRule>>
        public var ingressFilterRules: [TrafficMirrorFilterRule]?
        /// The network service traffic that is associated with the Traffic Mirror filter.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkServicesEncoding, TrafficMirrorNetworkService>>
        public var networkServices: [TrafficMirrorNetworkService]?
        /// The tags assigned to the Traffic Mirror filter.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the Traffic Mirror filter.
        public let trafficMirrorFilterId: String?

        public init(description: String? = nil, egressFilterRules: [TrafficMirrorFilterRule]? = nil, ingressFilterRules: [TrafficMirrorFilterRule]? = nil, networkServices: [TrafficMirrorNetworkService]? = nil, tags: [Tag]? = nil, trafficMirrorFilterId: String? = nil) {
            self.description = description
            self.egressFilterRules = egressFilterRules
            self.ingressFilterRules = ingressFilterRules
            self.networkServices = networkServices
            self.tags = tags
            self.trafficMirrorFilterId = trafficMirrorFilterId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case egressFilterRules = "egressFilterRuleSet"
            case ingressFilterRules = "ingressFilterRuleSet"
            case networkServices = "networkServiceSet"
            case tags = "tagSet"
            case trafficMirrorFilterId = "trafficMirrorFilterId"
        }
    }

    public struct TrafficMirrorFilterRule: AWSDecodableShape {
        /// The description of the Traffic Mirror rule.
        public let description: String?
        /// The destination CIDR block assigned to the Traffic Mirror rule.
        public let destinationCidrBlock: String?
        /// The destination port range assigned to the Traffic Mirror rule.
        public let destinationPortRange: TrafficMirrorPortRange?
        /// The protocol assigned to the Traffic Mirror rule.
        public let `protocol`: Int?
        /// The action assigned to the Traffic Mirror rule.
        public let ruleAction: TrafficMirrorRuleAction?
        /// The rule number of the Traffic Mirror rule.
        public let ruleNumber: Int?
        /// The source CIDR block assigned to the Traffic Mirror rule.
        public let sourceCidrBlock: String?
        /// The source port range assigned to the Traffic Mirror rule.
        public let sourcePortRange: TrafficMirrorPortRange?
        /// The traffic direction assigned to the Traffic Mirror rule.
        public let trafficDirection: TrafficDirection?
        /// The ID of the Traffic Mirror filter that the rule is associated with.
        public let trafficMirrorFilterId: String?
        /// The ID of the Traffic Mirror rule.
        public let trafficMirrorFilterRuleId: String?

        public init(description: String? = nil, destinationCidrBlock: String? = nil, destinationPortRange: TrafficMirrorPortRange? = nil, protocol: Int? = nil, ruleAction: TrafficMirrorRuleAction? = nil, ruleNumber: Int? = nil, sourceCidrBlock: String? = nil, sourcePortRange: TrafficMirrorPortRange? = nil, trafficDirection: TrafficDirection? = nil, trafficMirrorFilterId: String? = nil, trafficMirrorFilterRuleId: String? = nil) {
            self.description = description
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationPortRange = destinationPortRange
            self.`protocol` = `protocol`
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
            self.sourceCidrBlock = sourceCidrBlock
            self.sourcePortRange = sourcePortRange
            self.trafficDirection = trafficDirection
            self.trafficMirrorFilterId = trafficMirrorFilterId
            self.trafficMirrorFilterRuleId = trafficMirrorFilterRuleId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case destinationCidrBlock = "destinationCidrBlock"
            case destinationPortRange = "destinationPortRange"
            case `protocol` = "protocol"
            case ruleAction = "ruleAction"
            case ruleNumber = "ruleNumber"
            case sourceCidrBlock = "sourceCidrBlock"
            case sourcePortRange = "sourcePortRange"
            case trafficDirection = "trafficDirection"
            case trafficMirrorFilterId = "trafficMirrorFilterId"
            case trafficMirrorFilterRuleId = "trafficMirrorFilterRuleId"
        }
    }

    public struct TrafficMirrorPortRange: AWSDecodableShape {
        /// The start of the Traffic Mirror port range. This applies to the TCP and UDP protocols.
        public let fromPort: Int?
        /// The end of the Traffic Mirror port range. This applies to the TCP and UDP protocols.
        public let toPort: Int?

        public init(fromPort: Int? = nil, toPort: Int? = nil) {
            self.fromPort = fromPort
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case fromPort = "fromPort"
            case toPort = "toPort"
        }
    }

    public struct TrafficMirrorPortRangeRequest: AWSEncodableShape {
        /// The first port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
        public let fromPort: Int?
        /// The last port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
        public let toPort: Int?

        public init(fromPort: Int? = nil, toPort: Int? = nil) {
            self.fromPort = fromPort
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case fromPort = "FromPort"
            case toPort = "ToPort"
        }
    }

    public struct TrafficMirrorSession: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The description of the Traffic Mirror session.
        public let description: String?
        /// The ID of the Traffic Mirror session's network interface.
        public let networkInterfaceId: String?
        /// The ID of the account that owns the Traffic Mirror session.
        public let ownerId: String?
        /// The number of bytes in each packet to mirror. These are the bytes after the VXLAN header. To mirror a subset, set this to the length (in bytes) to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. Do not specify this parameter when you want to mirror the entire packet
        public let packetLength: Int?
        /// The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets. Valid values are 1-32766.
        public let sessionNumber: Int?
        /// The tags assigned to the Traffic Mirror session.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the Traffic Mirror filter.
        public let trafficMirrorFilterId: String?
        /// The ID for the Traffic Mirror session.
        public let trafficMirrorSessionId: String?
        /// The ID of the Traffic Mirror target.
        public let trafficMirrorTargetId: String?
        /// The virtual network ID associated with the Traffic Mirror session.
        public let virtualNetworkId: Int?

        public init(description: String? = nil, networkInterfaceId: String? = nil, ownerId: String? = nil, packetLength: Int? = nil, sessionNumber: Int? = nil, tags: [Tag]? = nil, trafficMirrorFilterId: String? = nil, trafficMirrorSessionId: String? = nil, trafficMirrorTargetId: String? = nil, virtualNetworkId: Int? = nil) {
            self.description = description
            self.networkInterfaceId = networkInterfaceId
            self.ownerId = ownerId
            self.packetLength = packetLength
            self.sessionNumber = sessionNumber
            self.tags = tags
            self.trafficMirrorFilterId = trafficMirrorFilterId
            self.trafficMirrorSessionId = trafficMirrorSessionId
            self.trafficMirrorTargetId = trafficMirrorTargetId
            self.virtualNetworkId = virtualNetworkId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case networkInterfaceId = "networkInterfaceId"
            case ownerId = "ownerId"
            case packetLength = "packetLength"
            case sessionNumber = "sessionNumber"
            case tags = "tagSet"
            case trafficMirrorFilterId = "trafficMirrorFilterId"
            case trafficMirrorSessionId = "trafficMirrorSessionId"
            case trafficMirrorTargetId = "trafficMirrorTargetId"
            case virtualNetworkId = "virtualNetworkId"
        }
    }

    public struct TrafficMirrorTarget: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Traffic Mirror target.
        public let description: String?
        /// The ID of the Gateway Load Balancer endpoint.
        public let gatewayLoadBalancerEndpointId: String?
        /// The network interface ID that is attached to the target.
        public let networkInterfaceId: String?
        /// The Amazon Resource Name (ARN) of the Network Load Balancer.
        public let networkLoadBalancerArn: String?
        /// The ID of the account that owns the Traffic Mirror target.
        public let ownerId: String?
        /// The tags assigned to the Traffic Mirror target.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the Traffic Mirror target.
        public let trafficMirrorTargetId: String?
        /// The type of Traffic Mirror target.
        public let type: TrafficMirrorTargetType?

        public init(description: String? = nil, gatewayLoadBalancerEndpointId: String? = nil, networkInterfaceId: String? = nil, networkLoadBalancerArn: String? = nil, ownerId: String? = nil, tags: [Tag]? = nil, trafficMirrorTargetId: String? = nil, type: TrafficMirrorTargetType? = nil) {
            self.description = description
            self.gatewayLoadBalancerEndpointId = gatewayLoadBalancerEndpointId
            self.networkInterfaceId = networkInterfaceId
            self.networkLoadBalancerArn = networkLoadBalancerArn
            self.ownerId = ownerId
            self.tags = tags
            self.trafficMirrorTargetId = trafficMirrorTargetId
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case gatewayLoadBalancerEndpointId = "gatewayLoadBalancerEndpointId"
            case networkInterfaceId = "networkInterfaceId"
            case networkLoadBalancerArn = "networkLoadBalancerArn"
            case ownerId = "ownerId"
            case tags = "tagSet"
            case trafficMirrorTargetId = "trafficMirrorTargetId"
            case type = "type"
        }
    }

    public struct TransitGateway: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The creation time.
        public let creationTime: Date?
        /// The description of the transit gateway.
        public let description: String?
        /// The transit gateway options.
        public let options: TransitGatewayOptions?
        /// The ID of the Amazon Web Services account that owns the transit gateway.
        public let ownerId: String?
        /// The state of the transit gateway.
        public let state: TransitGatewayState?
        /// The tags for the transit gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The Amazon Resource Name (ARN) of the transit gateway.
        public let transitGatewayArn: String?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?

        public init(creationTime: Date? = nil, description: String? = nil, options: TransitGatewayOptions? = nil, ownerId: String? = nil, state: TransitGatewayState? = nil, tags: [Tag]? = nil, transitGatewayArn: String? = nil, transitGatewayId: String? = nil) {
            self.creationTime = creationTime
            self.description = description
            self.options = options
            self.ownerId = ownerId
            self.state = state
            self.tags = tags
            self.transitGatewayArn = transitGatewayArn
            self.transitGatewayId = transitGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case description = "description"
            case options = "options"
            case ownerId = "ownerId"
            case state = "state"
            case tags = "tagSet"
            case transitGatewayArn = "transitGatewayArn"
            case transitGatewayId = "transitGatewayId"
        }
    }

    public struct TransitGatewayAssociation: AWSDecodableShape {
        /// The ID of the resource.
        public let resourceId: String?
        /// The resource type. Note that the tgw-peering resource type has been deprecated.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The state of the association.
        public let state: TransitGatewayAssociationState?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(resourceId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, state: TransitGatewayAssociationState? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableId: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.state = state
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resourceId"
            case resourceType = "resourceType"
            case state = "state"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
            case transitGatewayRouteTableId = "transitGatewayRouteTableId"
        }
    }

    public struct TransitGatewayAttachment: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The association.
        public let association: TransitGatewayAttachmentAssociation?
        /// The creation time.
        public let creationTime: Date?
        /// The ID of the resource.
        public let resourceId: String?
        /// The ID of the Amazon Web Services account that owns the resource.
        public let resourceOwnerId: String?
        /// The resource type. Note that the tgw-peering resource type has been deprecated.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The attachment state. Note that the initiating state has been deprecated.
        public let state: TransitGatewayAttachmentState?
        /// The tags for the attachment.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?
        /// The ID of the Amazon Web Services account that owns the transit gateway.
        public let transitGatewayOwnerId: String?

        public init(association: TransitGatewayAttachmentAssociation? = nil, creationTime: Date? = nil, resourceId: String? = nil, resourceOwnerId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, state: TransitGatewayAttachmentState? = nil, tags: [Tag]? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayId: String? = nil, transitGatewayOwnerId: String? = nil) {
            self.association = association
            self.creationTime = creationTime
            self.resourceId = resourceId
            self.resourceOwnerId = resourceOwnerId
            self.resourceType = resourceType
            self.state = state
            self.tags = tags
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayId = transitGatewayId
            self.transitGatewayOwnerId = transitGatewayOwnerId
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
            case creationTime = "creationTime"
            case resourceId = "resourceId"
            case resourceOwnerId = "resourceOwnerId"
            case resourceType = "resourceType"
            case state = "state"
            case tags = "tagSet"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
            case transitGatewayId = "transitGatewayId"
            case transitGatewayOwnerId = "transitGatewayOwnerId"
        }
    }

    public struct TransitGatewayAttachmentAssociation: AWSDecodableShape {
        /// The state of the association.
        public let state: TransitGatewayAssociationState?
        /// The ID of the route table for the transit gateway.
        public let transitGatewayRouteTableId: String?

        public init(state: TransitGatewayAssociationState? = nil, transitGatewayRouteTableId: String? = nil) {
            self.state = state
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case transitGatewayRouteTableId = "transitGatewayRouteTableId"
        }
    }

    public struct TransitGatewayAttachmentBgpConfiguration: AWSDecodableShape {
        /// The BGP status.
        public let bgpStatus: BgpStatus?
        /// The interior BGP peer IP address for the appliance.
        public let peerAddress: String?
        /// The peer Autonomous System Number (ASN).
        public let peerAsn: Int64?
        /// The interior BGP peer IP address for the transit gateway.
        public let transitGatewayAddress: String?
        /// The transit gateway Autonomous System Number (ASN).
        public let transitGatewayAsn: Int64?

        public init(bgpStatus: BgpStatus? = nil, peerAddress: String? = nil, peerAsn: Int64? = nil, transitGatewayAddress: String? = nil, transitGatewayAsn: Int64? = nil) {
            self.bgpStatus = bgpStatus
            self.peerAddress = peerAddress
            self.peerAsn = peerAsn
            self.transitGatewayAddress = transitGatewayAddress
            self.transitGatewayAsn = transitGatewayAsn
        }

        private enum CodingKeys: String, CodingKey {
            case bgpStatus = "bgpStatus"
            case peerAddress = "peerAddress"
            case peerAsn = "peerAsn"
            case transitGatewayAddress = "transitGatewayAddress"
            case transitGatewayAsn = "transitGatewayAsn"
        }
    }

    public struct TransitGatewayAttachmentPropagation: AWSDecodableShape {
        /// The state of the propagation route table.
        public let state: TransitGatewayPropagationState?
        /// The ID of the propagation route table.
        public let transitGatewayRouteTableId: String?

        public init(state: TransitGatewayPropagationState? = nil, transitGatewayRouteTableId: String? = nil) {
            self.state = state
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case transitGatewayRouteTableId = "transitGatewayRouteTableId"
        }
    }

    public struct TransitGatewayConnect: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The creation time.
        public let creationTime: Date?
        /// The Connect attachment options.
        public let options: TransitGatewayConnectOptions?
        /// The state of the attachment.
        public let state: TransitGatewayAttachmentState?
        /// The tags for the attachment.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the Connect attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?
        /// The ID of the attachment from which the Connect attachment was created.
        public let transportTransitGatewayAttachmentId: String?

        public init(creationTime: Date? = nil, options: TransitGatewayConnectOptions? = nil, state: TransitGatewayAttachmentState? = nil, tags: [Tag]? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayId: String? = nil, transportTransitGatewayAttachmentId: String? = nil) {
            self.creationTime = creationTime
            self.options = options
            self.state = state
            self.tags = tags
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayId = transitGatewayId
            self.transportTransitGatewayAttachmentId = transportTransitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case options = "options"
            case state = "state"
            case tags = "tagSet"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
            case transitGatewayId = "transitGatewayId"
            case transportTransitGatewayAttachmentId = "transportTransitGatewayAttachmentId"
        }
    }

    public struct TransitGatewayConnectOptions: AWSDecodableShape {
        /// The tunnel protocol.
        public let `protocol`: ProtocolValue?

        public init(protocol: ProtocolValue? = nil) {
            self.`protocol` = `protocol`
        }

        private enum CodingKeys: String, CodingKey {
            case `protocol` = "protocol"
        }
    }

    public struct TransitGatewayConnectPeer: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Connect peer details.
        public let connectPeerConfiguration: TransitGatewayConnectPeerConfiguration?
        /// The creation time.
        public let creationTime: Date?
        /// The state of the Connect peer.
        public let state: TransitGatewayConnectPeerState?
        /// The tags for the Connect peer.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the Connect attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the Connect peer.
        public let transitGatewayConnectPeerId: String?

        public init(connectPeerConfiguration: TransitGatewayConnectPeerConfiguration? = nil, creationTime: Date? = nil, state: TransitGatewayConnectPeerState? = nil, tags: [Tag]? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayConnectPeerId: String? = nil) {
            self.connectPeerConfiguration = connectPeerConfiguration
            self.creationTime = creationTime
            self.state = state
            self.tags = tags
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayConnectPeerId = transitGatewayConnectPeerId
        }

        private enum CodingKeys: String, CodingKey {
            case connectPeerConfiguration = "connectPeerConfiguration"
            case creationTime = "creationTime"
            case state = "state"
            case tags = "tagSet"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
            case transitGatewayConnectPeerId = "transitGatewayConnectPeerId"
        }
    }

    public struct TransitGatewayConnectPeerConfiguration: AWSDecodableShape {
        public struct _BgpConfigurationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _InsideCidrBlocksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The BGP configuration details.
        @OptionalCustomCoding<EC2ArrayCoder<_BgpConfigurationsEncoding, TransitGatewayAttachmentBgpConfiguration>>
        public var bgpConfigurations: [TransitGatewayAttachmentBgpConfiguration]?
        /// The range of interior BGP peer IP addresses.
        @OptionalCustomCoding<EC2ArrayCoder<_InsideCidrBlocksEncoding, String>>
        public var insideCidrBlocks: [String]?
        /// The Connect peer IP address on the appliance side of the tunnel.
        public let peerAddress: String?
        /// The tunnel protocol.
        public let `protocol`: ProtocolValue?
        /// The Connect peer IP address on the transit gateway side of the tunnel.
        public let transitGatewayAddress: String?

        public init(bgpConfigurations: [TransitGatewayAttachmentBgpConfiguration]? = nil, insideCidrBlocks: [String]? = nil, peerAddress: String? = nil, protocol: ProtocolValue? = nil, transitGatewayAddress: String? = nil) {
            self.bgpConfigurations = bgpConfigurations
            self.insideCidrBlocks = insideCidrBlocks
            self.peerAddress = peerAddress
            self.`protocol` = `protocol`
            self.transitGatewayAddress = transitGatewayAddress
        }

        private enum CodingKeys: String, CodingKey {
            case bgpConfigurations = "bgpConfigurations"
            case insideCidrBlocks = "insideCidrBlocks"
            case peerAddress = "peerAddress"
            case `protocol` = "protocol"
            case transitGatewayAddress = "transitGatewayAddress"
        }
    }

    public struct TransitGatewayConnectRequestBgpOptions: AWSEncodableShape {
        /// The peer Autonomous System Number (ASN).
        public let peerAsn: Int64?

        public init(peerAsn: Int64? = nil) {
            self.peerAsn = peerAsn
        }

        private enum CodingKeys: String, CodingKey {
            case peerAsn = "PeerAsn"
        }
    }

    public struct TransitGatewayMulticastDeregisteredGroupMembers: AWSDecodableShape {
        public struct _DeregisteredNetworkInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The network interface IDs of the deregistered members.
        @OptionalCustomCoding<EC2ArrayCoder<_DeregisteredNetworkInterfaceIdsEncoding, String>>
        public var deregisteredNetworkInterfaceIds: [String]?
        /// The IP address assigned to the  transit gateway multicast group.
        public let groupIpAddress: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(deregisteredNetworkInterfaceIds: [String]? = nil, groupIpAddress: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.deregisteredNetworkInterfaceIds = deregisteredNetworkInterfaceIds
            self.groupIpAddress = groupIpAddress
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case deregisteredNetworkInterfaceIds = "deregisteredNetworkInterfaceIds"
            case groupIpAddress = "groupIpAddress"
            case transitGatewayMulticastDomainId = "transitGatewayMulticastDomainId"
        }
    }

    public struct TransitGatewayMulticastDeregisteredGroupSources: AWSDecodableShape {
        public struct _DeregisteredNetworkInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The network interface IDs of the non-registered members.
        @OptionalCustomCoding<EC2ArrayCoder<_DeregisteredNetworkInterfaceIdsEncoding, String>>
        public var deregisteredNetworkInterfaceIds: [String]?
        /// The IP address assigned to the  transit gateway multicast group.
        public let groupIpAddress: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(deregisteredNetworkInterfaceIds: [String]? = nil, groupIpAddress: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.deregisteredNetworkInterfaceIds = deregisteredNetworkInterfaceIds
            self.groupIpAddress = groupIpAddress
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case deregisteredNetworkInterfaceIds = "deregisteredNetworkInterfaceIds"
            case groupIpAddress = "groupIpAddress"
            case transitGatewayMulticastDomainId = "transitGatewayMulticastDomainId"
        }
    }

    public struct TransitGatewayMulticastDomain: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The time the transit gateway multicast domain was created.
        public let creationTime: Date?
        /// The options for the transit gateway multicast domain.
        public let options: TransitGatewayMulticastDomainOptions?
        ///  The ID of the Amazon Web Services account that owns the transit gateway multicast domain.
        public let ownerId: String?
        /// The state of the transit gateway multicast domain.
        public let state: TransitGatewayMulticastDomainState?
        /// The tags for the transit gateway multicast domain.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?
        /// The Amazon Resource Name (ARN) of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainArn: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(creationTime: Date? = nil, options: TransitGatewayMulticastDomainOptions? = nil, ownerId: String? = nil, state: TransitGatewayMulticastDomainState? = nil, tags: [Tag]? = nil, transitGatewayId: String? = nil, transitGatewayMulticastDomainArn: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.creationTime = creationTime
            self.options = options
            self.ownerId = ownerId
            self.state = state
            self.tags = tags
            self.transitGatewayId = transitGatewayId
            self.transitGatewayMulticastDomainArn = transitGatewayMulticastDomainArn
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case options = "options"
            case ownerId = "ownerId"
            case state = "state"
            case tags = "tagSet"
            case transitGatewayId = "transitGatewayId"
            case transitGatewayMulticastDomainArn = "transitGatewayMulticastDomainArn"
            case transitGatewayMulticastDomainId = "transitGatewayMulticastDomainId"
        }
    }

    public struct TransitGatewayMulticastDomainAssociation: AWSDecodableShape {
        /// The ID of the resource.
        public let resourceId: String?
        ///  The ID of the Amazon Web Services account that owns the transit gateway multicast domain association resource.
        public let resourceOwnerId: String?
        /// The type of resource, for example a VPC attachment.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The subnet associated with the transit gateway multicast domain.
        public let subnet: SubnetAssociation?
        /// The ID of the transit gateway attachment.
        public let transitGatewayAttachmentId: String?

        public init(resourceId: String? = nil, resourceOwnerId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, subnet: SubnetAssociation? = nil, transitGatewayAttachmentId: String? = nil) {
            self.resourceId = resourceId
            self.resourceOwnerId = resourceOwnerId
            self.resourceType = resourceType
            self.subnet = subnet
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resourceId"
            case resourceOwnerId = "resourceOwnerId"
            case resourceType = "resourceType"
            case subnet = "subnet"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
        }
    }

    public struct TransitGatewayMulticastDomainAssociations: AWSDecodableShape {
        public struct _SubnetsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the resource.
        public let resourceId: String?
        ///  The ID of the Amazon Web Services account that owns the resource.
        public let resourceOwnerId: String?
        /// The type of resource, for example a VPC attachment.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The subnets associated with the multicast domain.
        @OptionalCustomCoding<EC2ArrayCoder<_SubnetsEncoding, SubnetAssociation>>
        public var subnets: [SubnetAssociation]?
        /// The ID of the transit gateway attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(resourceId: String? = nil, resourceOwnerId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, subnets: [SubnetAssociation]? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.resourceId = resourceId
            self.resourceOwnerId = resourceOwnerId
            self.resourceType = resourceType
            self.subnets = subnets
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resourceId"
            case resourceOwnerId = "resourceOwnerId"
            case resourceType = "resourceType"
            case subnets = "subnets"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
            case transitGatewayMulticastDomainId = "transitGatewayMulticastDomainId"
        }
    }

    public struct TransitGatewayMulticastDomainOptions: AWSDecodableShape {
        /// Indicates whether to automatically cross-account subnet associations that are associated with the transit gateway multicast domain.
        public let autoAcceptSharedAssociations: AutoAcceptSharedAssociationsValue?
        /// Indicates whether Internet Group Management Protocol (IGMP) version 2 is turned on for the transit gateway multicast domain.
        public let igmpv2Support: Igmpv2SupportValue?
        /// Indicates whether support for statically configuring transit gateway multicast group sources is turned on.
        public let staticSourcesSupport: StaticSourcesSupportValue?

        public init(autoAcceptSharedAssociations: AutoAcceptSharedAssociationsValue? = nil, igmpv2Support: Igmpv2SupportValue? = nil, staticSourcesSupport: StaticSourcesSupportValue? = nil) {
            self.autoAcceptSharedAssociations = autoAcceptSharedAssociations
            self.igmpv2Support = igmpv2Support
            self.staticSourcesSupport = staticSourcesSupport
        }

        private enum CodingKeys: String, CodingKey {
            case autoAcceptSharedAssociations = "autoAcceptSharedAssociations"
            case igmpv2Support = "igmpv2Support"
            case staticSourcesSupport = "staticSourcesSupport"
        }
    }

    public struct TransitGatewayMulticastGroup: AWSDecodableShape {
        /// The IP address assigned to the  transit gateway multicast group.
        public let groupIpAddress: String?
        /// Indicates that the resource is a  transit gateway multicast group member.
        public let groupMember: Bool?
        /// Indicates that the resource is a  transit gateway multicast group member.
        public let groupSource: Bool?
        /// The member type (for example, static).
        public let memberType: MembershipType?
        /// The ID of the transit gateway attachment.
        public let networkInterfaceId: String?
        /// The ID of the resource.
        public let resourceId: String?
        ///  The ID of the Amazon Web Services account that owns the transit gateway multicast domain group resource.
        public let resourceOwnerId: String?
        /// The type of resource, for example a VPC attachment.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The source type.
        public let sourceType: MembershipType?
        /// The ID of the subnet.
        public let subnetId: String?
        /// The ID of the transit gateway attachment.
        public let transitGatewayAttachmentId: String?

        public init(groupIpAddress: String? = nil, groupMember: Bool? = nil, groupSource: Bool? = nil, memberType: MembershipType? = nil, networkInterfaceId: String? = nil, resourceId: String? = nil, resourceOwnerId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, sourceType: MembershipType? = nil, subnetId: String? = nil, transitGatewayAttachmentId: String? = nil) {
            self.groupIpAddress = groupIpAddress
            self.groupMember = groupMember
            self.groupSource = groupSource
            self.memberType = memberType
            self.networkInterfaceId = networkInterfaceId
            self.resourceId = resourceId
            self.resourceOwnerId = resourceOwnerId
            self.resourceType = resourceType
            self.sourceType = sourceType
            self.subnetId = subnetId
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case groupIpAddress = "groupIpAddress"
            case groupMember = "groupMember"
            case groupSource = "groupSource"
            case memberType = "memberType"
            case networkInterfaceId = "networkInterfaceId"
            case resourceId = "resourceId"
            case resourceOwnerId = "resourceOwnerId"
            case resourceType = "resourceType"
            case sourceType = "sourceType"
            case subnetId = "subnetId"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
        }
    }

    public struct TransitGatewayMulticastRegisteredGroupMembers: AWSDecodableShape {
        public struct _RegisteredNetworkInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IP address assigned to the  transit gateway multicast group.
        public let groupIpAddress: String?
        /// The ID of the registered network interfaces.
        @OptionalCustomCoding<EC2ArrayCoder<_RegisteredNetworkInterfaceIdsEncoding, String>>
        public var registeredNetworkInterfaceIds: [String]?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(groupIpAddress: String? = nil, registeredNetworkInterfaceIds: [String]? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.groupIpAddress = groupIpAddress
            self.registeredNetworkInterfaceIds = registeredNetworkInterfaceIds
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case groupIpAddress = "groupIpAddress"
            case registeredNetworkInterfaceIds = "registeredNetworkInterfaceIds"
            case transitGatewayMulticastDomainId = "transitGatewayMulticastDomainId"
        }
    }

    public struct TransitGatewayMulticastRegisteredGroupSources: AWSDecodableShape {
        public struct _RegisteredNetworkInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IP address assigned to the  transit gateway multicast group.
        public let groupIpAddress: String?
        /// The IDs of the network interfaces members registered with the  transit gateway multicast group.
        @OptionalCustomCoding<EC2ArrayCoder<_RegisteredNetworkInterfaceIdsEncoding, String>>
        public var registeredNetworkInterfaceIds: [String]?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(groupIpAddress: String? = nil, registeredNetworkInterfaceIds: [String]? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.groupIpAddress = groupIpAddress
            self.registeredNetworkInterfaceIds = registeredNetworkInterfaceIds
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case groupIpAddress = "groupIpAddress"
            case registeredNetworkInterfaceIds = "registeredNetworkInterfaceIds"
            case transitGatewayMulticastDomainId = "transitGatewayMulticastDomainId"
        }
    }

    public struct TransitGatewayOptions: AWSDecodableShape {
        public struct _TransitGatewayCidrBlocksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A private Autonomous System Number (ASN) for the Amazon side of a BGP session.  The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs.
        public let amazonSideAsn: Int64?
        /// The ID of the default association route table.
        public let associationDefaultRouteTableId: String?
        /// Indicates whether attachment requests are automatically accepted.
        public let autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue?
        /// Indicates whether resource attachments are automatically associated with the default association route table.
        public let defaultRouteTableAssociation: DefaultRouteTableAssociationValue?
        /// Indicates whether resource attachments automatically propagate routes to the default propagation route table.
        public let defaultRouteTablePropagation: DefaultRouteTablePropagationValue?
        /// Indicates whether DNS support is enabled.
        public let dnsSupport: DnsSupportValue?
        /// Indicates whether multicast is enabled on the transit gateway
        public let multicastSupport: MulticastSupportValue?
        /// The ID of the default propagation route table.
        public let propagationDefaultRouteTableId: String?
        ///  This parameter is in preview and may not be available for your account.  Enables you to reference a security group across VPCs attached to a transit gateway. Use this option to simplify security group management and control of instance-to-instance traffic across VPCs that are connected by transit gateway. You can also use this option to migrate from VPC peering (which was the only option that supported security group referencing) to transit gateways (which now also support security group referencing). This option is disabled by default and there are no additional costs to use this feature.
        public let securityGroupReferencingSupport: SecurityGroupReferencingSupportValue?
        /// The transit gateway CIDR blocks.
        @OptionalCustomCoding<EC2ArrayCoder<_TransitGatewayCidrBlocksEncoding, String>>
        public var transitGatewayCidrBlocks: [String]?
        /// Indicates whether Equal Cost Multipath Protocol support is enabled.
        public let vpnEcmpSupport: VpnEcmpSupportValue?

        public init(amazonSideAsn: Int64? = nil, associationDefaultRouteTableId: String? = nil, autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue? = nil, defaultRouteTableAssociation: DefaultRouteTableAssociationValue? = nil, defaultRouteTablePropagation: DefaultRouteTablePropagationValue? = nil, dnsSupport: DnsSupportValue? = nil, multicastSupport: MulticastSupportValue? = nil, propagationDefaultRouteTableId: String? = nil, securityGroupReferencingSupport: SecurityGroupReferencingSupportValue? = nil, transitGatewayCidrBlocks: [String]? = nil, vpnEcmpSupport: VpnEcmpSupportValue? = nil) {
            self.amazonSideAsn = amazonSideAsn
            self.associationDefaultRouteTableId = associationDefaultRouteTableId
            self.autoAcceptSharedAttachments = autoAcceptSharedAttachments
            self.defaultRouteTableAssociation = defaultRouteTableAssociation
            self.defaultRouteTablePropagation = defaultRouteTablePropagation
            self.dnsSupport = dnsSupport
            self.multicastSupport = multicastSupport
            self.propagationDefaultRouteTableId = propagationDefaultRouteTableId
            self.securityGroupReferencingSupport = securityGroupReferencingSupport
            self.transitGatewayCidrBlocks = transitGatewayCidrBlocks
            self.vpnEcmpSupport = vpnEcmpSupport
        }

        private enum CodingKeys: String, CodingKey {
            case amazonSideAsn = "amazonSideAsn"
            case associationDefaultRouteTableId = "associationDefaultRouteTableId"
            case autoAcceptSharedAttachments = "autoAcceptSharedAttachments"
            case defaultRouteTableAssociation = "defaultRouteTableAssociation"
            case defaultRouteTablePropagation = "defaultRouteTablePropagation"
            case dnsSupport = "dnsSupport"
            case multicastSupport = "multicastSupport"
            case propagationDefaultRouteTableId = "propagationDefaultRouteTableId"
            case securityGroupReferencingSupport = "securityGroupReferencingSupport"
            case transitGatewayCidrBlocks = "transitGatewayCidrBlocks"
            case vpnEcmpSupport = "vpnEcmpSupport"
        }
    }

    public struct TransitGatewayPeeringAttachment: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the accepter transit gateway.
        public let accepterTgwInfo: PeeringTgwInfo?
        /// The ID of the accepter transit gateway attachment.
        public let accepterTransitGatewayAttachmentId: String?
        /// The time the transit gateway peering attachment was created.
        public let creationTime: Date?
        /// Details about the transit gateway peering attachment.
        public let options: TransitGatewayPeeringAttachmentOptions?
        /// Information about the requester transit gateway.
        public let requesterTgwInfo: PeeringTgwInfo?
        /// The state of the transit gateway peering attachment. Note that the initiating state has been deprecated.
        public let state: TransitGatewayAttachmentState?
        /// The status of the transit gateway peering attachment.
        public let status: PeeringAttachmentStatus?
        /// The tags for the transit gateway peering attachment.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the transit gateway peering attachment.
        public let transitGatewayAttachmentId: String?

        public init(accepterTgwInfo: PeeringTgwInfo? = nil, accepterTransitGatewayAttachmentId: String? = nil, creationTime: Date? = nil, options: TransitGatewayPeeringAttachmentOptions? = nil, requesterTgwInfo: PeeringTgwInfo? = nil, state: TransitGatewayAttachmentState? = nil, status: PeeringAttachmentStatus? = nil, tags: [Tag]? = nil, transitGatewayAttachmentId: String? = nil) {
            self.accepterTgwInfo = accepterTgwInfo
            self.accepterTransitGatewayAttachmentId = accepterTransitGatewayAttachmentId
            self.creationTime = creationTime
            self.options = options
            self.requesterTgwInfo = requesterTgwInfo
            self.state = state
            self.status = status
            self.tags = tags
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case accepterTgwInfo = "accepterTgwInfo"
            case accepterTransitGatewayAttachmentId = "accepterTransitGatewayAttachmentId"
            case creationTime = "creationTime"
            case options = "options"
            case requesterTgwInfo = "requesterTgwInfo"
            case state = "state"
            case status = "status"
            case tags = "tagSet"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
        }
    }

    public struct TransitGatewayPeeringAttachmentOptions: AWSDecodableShape {
        /// Describes whether dynamic routing is enabled or disabled for the transit gateway peering attachment.
        public let dynamicRouting: DynamicRoutingValue?

        public init(dynamicRouting: DynamicRoutingValue? = nil) {
            self.dynamicRouting = dynamicRouting
        }

        private enum CodingKeys: String, CodingKey {
            case dynamicRouting = "dynamicRouting"
        }
    }

    public struct TransitGatewayPolicyRule: AWSDecodableShape {
        /// The destination CIDR block for the transit gateway policy rule.
        public let destinationCidrBlock: String?
        /// The port range for the transit gateway policy rule. Currently this is set to * (all).
        public let destinationPortRange: String?
        /// The meta data tags used for the transit gateway policy rule.
        public let metaData: TransitGatewayPolicyRuleMetaData?
        /// The protocol used by the transit gateway policy rule.
        public let `protocol`: String?
        /// The source CIDR block for the transit gateway policy rule.
        public let sourceCidrBlock: String?
        /// The port range for the transit gateway policy rule. Currently this is set to * (all).
        public let sourcePortRange: String?

        public init(destinationCidrBlock: String? = nil, destinationPortRange: String? = nil, metaData: TransitGatewayPolicyRuleMetaData? = nil, protocol: String? = nil, sourceCidrBlock: String? = nil, sourcePortRange: String? = nil) {
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationPortRange = destinationPortRange
            self.metaData = metaData
            self.`protocol` = `protocol`
            self.sourceCidrBlock = sourceCidrBlock
            self.sourcePortRange = sourcePortRange
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "destinationCidrBlock"
            case destinationPortRange = "destinationPortRange"
            case metaData = "metaData"
            case `protocol` = "protocol"
            case sourceCidrBlock = "sourceCidrBlock"
            case sourcePortRange = "sourcePortRange"
        }
    }

    public struct TransitGatewayPolicyRuleMetaData: AWSDecodableShape {
        /// The key name for the transit gateway policy rule meta data tag.
        public let metaDataKey: String?
        /// The value of the key for the transit gateway policy rule meta data tag.
        public let metaDataValue: String?

        public init(metaDataKey: String? = nil, metaDataValue: String? = nil) {
            self.metaDataKey = metaDataKey
            self.metaDataValue = metaDataValue
        }

        private enum CodingKeys: String, CodingKey {
            case metaDataKey = "metaDataKey"
            case metaDataValue = "metaDataValue"
        }
    }

    public struct TransitGatewayPolicyTable: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The timestamp when the transit gateway policy table was created.
        public let creationTime: Date?
        /// The state of the transit gateway policy table
        public let state: TransitGatewayPolicyTableState?
        /// he key-value pairs associated with the transit gateway policy table.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?
        /// The ID of the transit gateway policy table.
        public let transitGatewayPolicyTableId: String?

        public init(creationTime: Date? = nil, state: TransitGatewayPolicyTableState? = nil, tags: [Tag]? = nil, transitGatewayId: String? = nil, transitGatewayPolicyTableId: String? = nil) {
            self.creationTime = creationTime
            self.state = state
            self.tags = tags
            self.transitGatewayId = transitGatewayId
            self.transitGatewayPolicyTableId = transitGatewayPolicyTableId
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case state = "state"
            case tags = "tagSet"
            case transitGatewayId = "transitGatewayId"
            case transitGatewayPolicyTableId = "transitGatewayPolicyTableId"
        }
    }

    public struct TransitGatewayPolicyTableAssociation: AWSDecodableShape {
        /// The resource ID of the transit gateway attachment.
        public let resourceId: String?
        /// The resource type for the transit gateway policy table association.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The state of the transit gateway policy table association.
        public let state: TransitGatewayAssociationState?
        /// The ID of the transit gateway attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway policy table.
        public let transitGatewayPolicyTableId: String?

        public init(resourceId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, state: TransitGatewayAssociationState? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayPolicyTableId: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.state = state
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayPolicyTableId = transitGatewayPolicyTableId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resourceId"
            case resourceType = "resourceType"
            case state = "state"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
            case transitGatewayPolicyTableId = "transitGatewayPolicyTableId"
        }
    }

    public struct TransitGatewayPolicyTableEntry: AWSDecodableShape {
        /// The policy rule associated with the transit gateway policy table.
        public let policyRule: TransitGatewayPolicyRule?
        /// The rule number for the transit gateway policy table entry.
        public let policyRuleNumber: String?
        /// The ID of the target route table.
        public let targetRouteTableId: String?

        public init(policyRule: TransitGatewayPolicyRule? = nil, policyRuleNumber: String? = nil, targetRouteTableId: String? = nil) {
            self.policyRule = policyRule
            self.policyRuleNumber = policyRuleNumber
            self.targetRouteTableId = targetRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case policyRule = "policyRule"
            case policyRuleNumber = "policyRuleNumber"
            case targetRouteTableId = "targetRouteTableId"
        }
    }

    public struct TransitGatewayPrefixListAttachment: AWSDecodableShape {
        /// The ID of the resource.
        public let resourceId: String?
        /// The resource type. Note that the tgw-peering resource type has been deprecated.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?

        public init(resourceId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, transitGatewayAttachmentId: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resourceId"
            case resourceType = "resourceType"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
        }
    }

    public struct TransitGatewayPrefixListReference: AWSDecodableShape {
        /// Indicates whether traffic that matches this route is dropped.
        public let blackhole: Bool?
        /// The ID of the prefix list.
        public let prefixListId: String?
        /// The ID of the prefix list owner.
        public let prefixListOwnerId: String?
        /// The state of the prefix list reference.
        public let state: TransitGatewayPrefixListReferenceState?
        /// Information about the transit gateway attachment.
        public let transitGatewayAttachment: TransitGatewayPrefixListAttachment?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(blackhole: Bool? = nil, prefixListId: String? = nil, prefixListOwnerId: String? = nil, state: TransitGatewayPrefixListReferenceState? = nil, transitGatewayAttachment: TransitGatewayPrefixListAttachment? = nil, transitGatewayRouteTableId: String? = nil) {
            self.blackhole = blackhole
            self.prefixListId = prefixListId
            self.prefixListOwnerId = prefixListOwnerId
            self.state = state
            self.transitGatewayAttachment = transitGatewayAttachment
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case blackhole = "blackhole"
            case prefixListId = "prefixListId"
            case prefixListOwnerId = "prefixListOwnerId"
            case state = "state"
            case transitGatewayAttachment = "transitGatewayAttachment"
            case transitGatewayRouteTableId = "transitGatewayRouteTableId"
        }
    }

    public struct TransitGatewayPropagation: AWSDecodableShape {
        /// The ID of the resource.
        public let resourceId: String?
        /// The resource type. Note that the tgw-peering resource type has been deprecated.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The state.
        public let state: TransitGatewayPropagationState?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway route table announcement.
        public let transitGatewayRouteTableAnnouncementId: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(resourceId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, state: TransitGatewayPropagationState? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableAnnouncementId: String? = nil, transitGatewayRouteTableId: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.state = state
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableAnnouncementId = transitGatewayRouteTableAnnouncementId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resourceId"
            case resourceType = "resourceType"
            case state = "state"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
            case transitGatewayRouteTableAnnouncementId = "transitGatewayRouteTableAnnouncementId"
            case transitGatewayRouteTableId = "transitGatewayRouteTableId"
        }
    }

    public struct TransitGatewayRequestOptions: AWSEncodableShape {
        public struct _TransitGatewayCidrBlocksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A private Autonomous System Number (ASN) for the Amazon side of a BGP session.  The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs. The default is 64512.
        public let amazonSideAsn: Int64?
        /// Enable or disable automatic acceptance of attachment requests. Disabled by default.
        public let autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue?
        /// Enable or disable automatic association with the default association route table. Enabled by default.
        public let defaultRouteTableAssociation: DefaultRouteTableAssociationValue?
        /// Enable or disable automatic propagation of routes to the default propagation route table. Enabled by default.
        public let defaultRouteTablePropagation: DefaultRouteTablePropagationValue?
        /// Enable or disable DNS support. Enabled by default.
        public let dnsSupport: DnsSupportValue?
        /// Indicates whether multicast is enabled on the transit gateway
        public let multicastSupport: MulticastSupportValue?
        ///  This parameter is in preview and may not be available for your account.  Enables you to reference a security group across VPCs attached to a transit gateway. Use this option to simplify security group management and control of instance-to-instance traffic across VPCs that are connected by transit gateway. You can also use this option to migrate from VPC peering (which was the only option that supported security group referencing) to transit gateways (which now also support security group referencing). This option is disabled by default and there are no additional costs to use this feature.
        public let securityGroupReferencingSupport: SecurityGroupReferencingSupportValue?
        /// One or more IPv4 or IPv6 CIDR blocks for the transit gateway. Must be a size /24 CIDR block or larger for IPv4, or a size /64 CIDR block or larger for IPv6.
        @OptionalCustomCoding<EC2ArrayCoder<_TransitGatewayCidrBlocksEncoding, String>>
        public var transitGatewayCidrBlocks: [String]?
        /// Enable or disable Equal Cost Multipath Protocol support. Enabled by default.
        public let vpnEcmpSupport: VpnEcmpSupportValue?

        public init(amazonSideAsn: Int64? = nil, autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue? = nil, defaultRouteTableAssociation: DefaultRouteTableAssociationValue? = nil, defaultRouteTablePropagation: DefaultRouteTablePropagationValue? = nil, dnsSupport: DnsSupportValue? = nil, multicastSupport: MulticastSupportValue? = nil, securityGroupReferencingSupport: SecurityGroupReferencingSupportValue? = nil, transitGatewayCidrBlocks: [String]? = nil, vpnEcmpSupport: VpnEcmpSupportValue? = nil) {
            self.amazonSideAsn = amazonSideAsn
            self.autoAcceptSharedAttachments = autoAcceptSharedAttachments
            self.defaultRouteTableAssociation = defaultRouteTableAssociation
            self.defaultRouteTablePropagation = defaultRouteTablePropagation
            self.dnsSupport = dnsSupport
            self.multicastSupport = multicastSupport
            self.securityGroupReferencingSupport = securityGroupReferencingSupport
            self.transitGatewayCidrBlocks = transitGatewayCidrBlocks
            self.vpnEcmpSupport = vpnEcmpSupport
        }

        private enum CodingKeys: String, CodingKey {
            case amazonSideAsn = "AmazonSideAsn"
            case autoAcceptSharedAttachments = "AutoAcceptSharedAttachments"
            case defaultRouteTableAssociation = "DefaultRouteTableAssociation"
            case defaultRouteTablePropagation = "DefaultRouteTablePropagation"
            case dnsSupport = "DnsSupport"
            case multicastSupport = "MulticastSupport"
            case securityGroupReferencingSupport = "SecurityGroupReferencingSupport"
            case transitGatewayCidrBlocks = "TransitGatewayCidrBlocks"
            case vpnEcmpSupport = "VpnEcmpSupport"
        }
    }

    public struct TransitGatewayRoute: AWSDecodableShape {
        public struct _TransitGatewayAttachmentsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The CIDR block used for destination matches.
        public let destinationCidrBlock: String?
        /// The ID of the prefix list used for destination matches.
        public let prefixListId: String?
        /// The state of the route.
        public let state: TransitGatewayRouteState?
        /// The attachments.
        @OptionalCustomCoding<EC2ArrayCoder<_TransitGatewayAttachmentsEncoding, TransitGatewayRouteAttachment>>
        public var transitGatewayAttachments: [TransitGatewayRouteAttachment]?
        /// The ID of the transit gateway route table announcement.
        public let transitGatewayRouteTableAnnouncementId: String?
        /// The route type.
        public let type: TransitGatewayRouteType?

        public init(destinationCidrBlock: String? = nil, prefixListId: String? = nil, state: TransitGatewayRouteState? = nil, transitGatewayAttachments: [TransitGatewayRouteAttachment]? = nil, transitGatewayRouteTableAnnouncementId: String? = nil, type: TransitGatewayRouteType? = nil) {
            self.destinationCidrBlock = destinationCidrBlock
            self.prefixListId = prefixListId
            self.state = state
            self.transitGatewayAttachments = transitGatewayAttachments
            self.transitGatewayRouteTableAnnouncementId = transitGatewayRouteTableAnnouncementId
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "destinationCidrBlock"
            case prefixListId = "prefixListId"
            case state = "state"
            case transitGatewayAttachments = "transitGatewayAttachments"
            case transitGatewayRouteTableAnnouncementId = "transitGatewayRouteTableAnnouncementId"
            case type = "type"
        }
    }

    public struct TransitGatewayRouteAttachment: AWSDecodableShape {
        /// The ID of the resource.
        public let resourceId: String?
        /// The resource type. Note that the tgw-peering resource type has been deprecated.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?

        public init(resourceId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, transitGatewayAttachmentId: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resourceId"
            case resourceType = "resourceType"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
        }
    }

    public struct TransitGatewayRouteTable: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The creation time.
        public let creationTime: Date?
        /// Indicates whether this is the default association route table for the transit gateway.
        public let defaultAssociationRouteTable: Bool?
        /// Indicates whether this is the default propagation route table for the transit gateway.
        public let defaultPropagationRouteTable: Bool?
        /// The state of the transit gateway route table.
        public let state: TransitGatewayRouteTableState?
        /// Any tags assigned to the route table.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(creationTime: Date? = nil, defaultAssociationRouteTable: Bool? = nil, defaultPropagationRouteTable: Bool? = nil, state: TransitGatewayRouteTableState? = nil, tags: [Tag]? = nil, transitGatewayId: String? = nil, transitGatewayRouteTableId: String? = nil) {
            self.creationTime = creationTime
            self.defaultAssociationRouteTable = defaultAssociationRouteTable
            self.defaultPropagationRouteTable = defaultPropagationRouteTable
            self.state = state
            self.tags = tags
            self.transitGatewayId = transitGatewayId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case defaultAssociationRouteTable = "defaultAssociationRouteTable"
            case defaultPropagationRouteTable = "defaultPropagationRouteTable"
            case state = "state"
            case tags = "tagSet"
            case transitGatewayId = "transitGatewayId"
            case transitGatewayRouteTableId = "transitGatewayRouteTableId"
        }
    }

    public struct TransitGatewayRouteTableAnnouncement: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The direction for the route table announcement.
        public let announcementDirection: TransitGatewayRouteTableAnnouncementDirection?
        /// The ID of the core network for the transit gateway route table announcement.
        public let coreNetworkId: String?
        /// The timestamp when the transit gateway route table announcement was created.
        public let creationTime: Date?
        /// The ID of the core network ID for the peer.
        public let peerCoreNetworkId: String?
        /// The ID of the peering attachment.
        public let peeringAttachmentId: String?
        /// The ID of the peer transit gateway.
        public let peerTransitGatewayId: String?
        /// The state of the transit gateway announcement.
        public let state: TransitGatewayRouteTableAnnouncementState?
        /// The key-value pairs associated with the route table announcement.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?
        /// The ID of the transit gateway route table announcement.
        public let transitGatewayRouteTableAnnouncementId: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(announcementDirection: TransitGatewayRouteTableAnnouncementDirection? = nil, coreNetworkId: String? = nil, creationTime: Date? = nil, peerCoreNetworkId: String? = nil, peeringAttachmentId: String? = nil, peerTransitGatewayId: String? = nil, state: TransitGatewayRouteTableAnnouncementState? = nil, tags: [Tag]? = nil, transitGatewayId: String? = nil, transitGatewayRouteTableAnnouncementId: String? = nil, transitGatewayRouteTableId: String? = nil) {
            self.announcementDirection = announcementDirection
            self.coreNetworkId = coreNetworkId
            self.creationTime = creationTime
            self.peerCoreNetworkId = peerCoreNetworkId
            self.peeringAttachmentId = peeringAttachmentId
            self.peerTransitGatewayId = peerTransitGatewayId
            self.state = state
            self.tags = tags
            self.transitGatewayId = transitGatewayId
            self.transitGatewayRouteTableAnnouncementId = transitGatewayRouteTableAnnouncementId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case announcementDirection = "announcementDirection"
            case coreNetworkId = "coreNetworkId"
            case creationTime = "creationTime"
            case peerCoreNetworkId = "peerCoreNetworkId"
            case peeringAttachmentId = "peeringAttachmentId"
            case peerTransitGatewayId = "peerTransitGatewayId"
            case state = "state"
            case tags = "tagSet"
            case transitGatewayId = "transitGatewayId"
            case transitGatewayRouteTableAnnouncementId = "transitGatewayRouteTableAnnouncementId"
            case transitGatewayRouteTableId = "transitGatewayRouteTableId"
        }
    }

    public struct TransitGatewayRouteTableAssociation: AWSDecodableShape {
        /// The ID of the resource.
        public let resourceId: String?
        /// The resource type. Note that the tgw-peering resource type has been deprecated.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The state of the association.
        public let state: TransitGatewayAssociationState?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?

        public init(resourceId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, state: TransitGatewayAssociationState? = nil, transitGatewayAttachmentId: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.state = state
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resourceId"
            case resourceType = "resourceType"
            case state = "state"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
        }
    }

    public struct TransitGatewayRouteTablePropagation: AWSDecodableShape {
        /// The ID of the resource.
        public let resourceId: String?
        /// The type of resource. Note that the tgw-peering resource type has been deprecated.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The state of the resource.
        public let state: TransitGatewayPropagationState?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway route table announcement.
        public let transitGatewayRouteTableAnnouncementId: String?

        public init(resourceId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, state: TransitGatewayPropagationState? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableAnnouncementId: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.state = state
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableAnnouncementId = transitGatewayRouteTableAnnouncementId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resourceId"
            case resourceType = "resourceType"
            case state = "state"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
            case transitGatewayRouteTableAnnouncementId = "transitGatewayRouteTableAnnouncementId"
        }
    }

    public struct TransitGatewayRouteTableRoute: AWSDecodableShape {
        /// The ID of the route attachment.
        public let attachmentId: String?
        /// The CIDR block used for destination matches.
        public let destinationCidr: String?
        /// The ID of the prefix list.
        public let prefixListId: String?
        /// The ID of the resource for the route attachment.
        public let resourceId: String?
        /// The resource type for the route attachment.
        public let resourceType: String?
        /// The route origin. The following are the possible values:   static   propagated
        public let routeOrigin: String?
        /// The state of the route.
        public let state: String?

        public init(attachmentId: String? = nil, destinationCidr: String? = nil, prefixListId: String? = nil, resourceId: String? = nil, resourceType: String? = nil, routeOrigin: String? = nil, state: String? = nil) {
            self.attachmentId = attachmentId
            self.destinationCidr = destinationCidr
            self.prefixListId = prefixListId
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.routeOrigin = routeOrigin
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentId = "attachmentId"
            case destinationCidr = "destinationCidr"
            case prefixListId = "prefixListId"
            case resourceId = "resourceId"
            case resourceType = "resourceType"
            case routeOrigin = "routeOrigin"
            case state = "state"
        }
    }

    public struct TransitGatewayVpcAttachment: AWSDecodableShape {
        public struct _SubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The creation time.
        public let creationTime: Date?
        /// The VPC attachment options.
        public let options: TransitGatewayVpcAttachmentOptions?
        /// The state of the VPC attachment. Note that the initiating state has been deprecated.
        public let state: TransitGatewayAttachmentState?
        /// The IDs of the subnets.
        @OptionalCustomCoding<EC2ArrayCoder<_SubnetIdsEncoding, String>>
        public var subnetIds: [String]?
        /// The tags for the VPC attachment.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?
        /// The ID of the VPC.
        public let vpcId: String?
        /// The ID of the Amazon Web Services account that owns the VPC.
        public let vpcOwnerId: String?

        public init(creationTime: Date? = nil, options: TransitGatewayVpcAttachmentOptions? = nil, state: TransitGatewayAttachmentState? = nil, subnetIds: [String]? = nil, tags: [Tag]? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayId: String? = nil, vpcId: String? = nil, vpcOwnerId: String? = nil) {
            self.creationTime = creationTime
            self.options = options
            self.state = state
            self.subnetIds = subnetIds
            self.tags = tags
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayId = transitGatewayId
            self.vpcId = vpcId
            self.vpcOwnerId = vpcOwnerId
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case options = "options"
            case state = "state"
            case subnetIds = "subnetIds"
            case tags = "tagSet"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
            case transitGatewayId = "transitGatewayId"
            case vpcId = "vpcId"
            case vpcOwnerId = "vpcOwnerId"
        }
    }

    public struct TransitGatewayVpcAttachmentOptions: AWSDecodableShape {
        /// Indicates whether appliance mode support is enabled.
        public let applianceModeSupport: ApplianceModeSupportValue?
        /// Indicates whether DNS support is enabled.
        public let dnsSupport: DnsSupportValue?
        /// Indicates whether IPv6 support is disabled.
        public let ipv6Support: Ipv6SupportValue?
        ///  This parameter is in preview and may not be available for your account.  Enables you to reference a security group across VPCs attached to a transit gateway. Use this option to simplify security group management and control of instance-to-instance traffic across VPCs that are connected by transit gateway. You can also use this option to migrate from VPC peering (which was the only option that supported security group referencing) to transit gateways (which now also support security group referencing). This option is disabled by default and there are no additional costs to use this feature.
        public let securityGroupReferencingSupport: SecurityGroupReferencingSupportValue?

        public init(applianceModeSupport: ApplianceModeSupportValue? = nil, dnsSupport: DnsSupportValue? = nil, ipv6Support: Ipv6SupportValue? = nil, securityGroupReferencingSupport: SecurityGroupReferencingSupportValue? = nil) {
            self.applianceModeSupport = applianceModeSupport
            self.dnsSupport = dnsSupport
            self.ipv6Support = ipv6Support
            self.securityGroupReferencingSupport = securityGroupReferencingSupport
        }

        private enum CodingKeys: String, CodingKey {
            case applianceModeSupport = "applianceModeSupport"
            case dnsSupport = "dnsSupport"
            case ipv6Support = "ipv6Support"
            case securityGroupReferencingSupport = "securityGroupReferencingSupport"
        }
    }

    public struct TrunkInterfaceAssociation: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the association.
        public let associationId: String?
        /// The ID of the branch network interface.
        public let branchInterfaceId: String?
        /// The application key when you use the GRE protocol.
        public let greKey: Int?
        /// The interface protocol. Valid values are VLAN and GRE.
        public let interfaceProtocol: InterfaceProtocolType?
        /// The tags for the trunk interface association.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the trunk network interface.
        public let trunkInterfaceId: String?
        /// The ID of the VLAN when you use the VLAN protocol.
        public let vlanId: Int?

        public init(associationId: String? = nil, branchInterfaceId: String? = nil, greKey: Int? = nil, interfaceProtocol: InterfaceProtocolType? = nil, tags: [Tag]? = nil, trunkInterfaceId: String? = nil, vlanId: Int? = nil) {
            self.associationId = associationId
            self.branchInterfaceId = branchInterfaceId
            self.greKey = greKey
            self.interfaceProtocol = interfaceProtocol
            self.tags = tags
            self.trunkInterfaceId = trunkInterfaceId
            self.vlanId = vlanId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case branchInterfaceId = "branchInterfaceId"
            case greKey = "greKey"
            case interfaceProtocol = "interfaceProtocol"
            case tags = "tagSet"
            case trunkInterfaceId = "trunkInterfaceId"
            case vlanId = "vlanId"
        }
    }

    public struct TunnelOption: AWSDecodableShape {
        public struct _IkeVersionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase1DHGroupNumbersEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase1EncryptionAlgorithmsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase1IntegrityAlgorithmsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase2DHGroupNumbersEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase2EncryptionAlgorithmsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase2IntegrityAlgorithmsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The action to take after a DPD timeout occurs.
        public let dpdTimeoutAction: String?
        /// The number of seconds after which a DPD timeout occurs.
        public let dpdTimeoutSeconds: Int?
        /// Status of tunnel endpoint lifecycle control feature.
        public let enableTunnelLifecycleControl: Bool?
        /// The IKE versions that are permitted for the VPN tunnel.
        @OptionalCustomCoding<EC2ArrayCoder<_IkeVersionsEncoding, IKEVersionsListValue>>
        public var ikeVersions: [IKEVersionsListValue]?
        /// Options for logging VPN tunnel activity.
        public let logOptions: VpnTunnelLogOptions?
        /// The external IP address of the VPN tunnel.
        public let outsideIpAddress: String?
        /// The permitted Diffie-Hellman group numbers for the VPN tunnel for phase 1 IKE negotiations.
        @OptionalCustomCoding<EC2ArrayCoder<_Phase1DHGroupNumbersEncoding, Phase1DHGroupNumbersListValue>>
        public var phase1DHGroupNumbers: [Phase1DHGroupNumbersListValue]?
        /// The permitted encryption algorithms for the VPN tunnel for phase 1 IKE negotiations.
        @OptionalCustomCoding<EC2ArrayCoder<_Phase1EncryptionAlgorithmsEncoding, Phase1EncryptionAlgorithmsListValue>>
        public var phase1EncryptionAlgorithms: [Phase1EncryptionAlgorithmsListValue]?
        /// The permitted integrity algorithms for the VPN tunnel for phase 1 IKE negotiations.
        @OptionalCustomCoding<EC2ArrayCoder<_Phase1IntegrityAlgorithmsEncoding, Phase1IntegrityAlgorithmsListValue>>
        public var phase1IntegrityAlgorithms: [Phase1IntegrityAlgorithmsListValue]?
        /// The lifetime for phase 1 of the IKE negotiation, in seconds.
        public let phase1LifetimeSeconds: Int?
        /// The permitted Diffie-Hellman group numbers for the VPN tunnel for phase 2 IKE negotiations.
        @OptionalCustomCoding<EC2ArrayCoder<_Phase2DHGroupNumbersEncoding, Phase2DHGroupNumbersListValue>>
        public var phase2DHGroupNumbers: [Phase2DHGroupNumbersListValue]?
        /// The permitted encryption algorithms for the VPN tunnel for phase 2 IKE negotiations.
        @OptionalCustomCoding<EC2ArrayCoder<_Phase2EncryptionAlgorithmsEncoding, Phase2EncryptionAlgorithmsListValue>>
        public var phase2EncryptionAlgorithms: [Phase2EncryptionAlgorithmsListValue]?
        /// The permitted integrity algorithms for the VPN tunnel for phase 2 IKE negotiations.
        @OptionalCustomCoding<EC2ArrayCoder<_Phase2IntegrityAlgorithmsEncoding, Phase2IntegrityAlgorithmsListValue>>
        public var phase2IntegrityAlgorithms: [Phase2IntegrityAlgorithmsListValue]?
        /// The lifetime for phase 2 of the IKE negotiation, in seconds.
        public let phase2LifetimeSeconds: Int?
        /// The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and the customer gateway.
        public let preSharedKey: String?
        /// The percentage of the rekey window determined by RekeyMarginTimeSeconds during which the rekey time is randomly selected.
        public let rekeyFuzzPercentage: Int?
        /// The margin time, in seconds, before the phase 2 lifetime expires, during which the Amazon Web Services side of the VPN connection performs an IKE rekey.
        public let rekeyMarginTimeSeconds: Int?
        /// The number of packets in an IKE replay window.
        public let replayWindowSize: Int?
        /// The action to take when the establishing the VPN tunnels for a VPN connection.
        public let startupAction: String?
        /// The range of inside IPv4 addresses for the tunnel.
        public let tunnelInsideCidr: String?
        /// The range of inside IPv6 addresses for the tunnel.
        public let tunnelInsideIpv6Cidr: String?

        public init(dpdTimeoutAction: String? = nil, dpdTimeoutSeconds: Int? = nil, enableTunnelLifecycleControl: Bool? = nil, ikeVersions: [IKEVersionsListValue]? = nil, logOptions: VpnTunnelLogOptions? = nil, outsideIpAddress: String? = nil, phase1DHGroupNumbers: [Phase1DHGroupNumbersListValue]? = nil, phase1EncryptionAlgorithms: [Phase1EncryptionAlgorithmsListValue]? = nil, phase1IntegrityAlgorithms: [Phase1IntegrityAlgorithmsListValue]? = nil, phase1LifetimeSeconds: Int? = nil, phase2DHGroupNumbers: [Phase2DHGroupNumbersListValue]? = nil, phase2EncryptionAlgorithms: [Phase2EncryptionAlgorithmsListValue]? = nil, phase2IntegrityAlgorithms: [Phase2IntegrityAlgorithmsListValue]? = nil, phase2LifetimeSeconds: Int? = nil, preSharedKey: String? = nil, rekeyFuzzPercentage: Int? = nil, rekeyMarginTimeSeconds: Int? = nil, replayWindowSize: Int? = nil, startupAction: String? = nil, tunnelInsideCidr: String? = nil, tunnelInsideIpv6Cidr: String? = nil) {
            self.dpdTimeoutAction = dpdTimeoutAction
            self.dpdTimeoutSeconds = dpdTimeoutSeconds
            self.enableTunnelLifecycleControl = enableTunnelLifecycleControl
            self.ikeVersions = ikeVersions
            self.logOptions = logOptions
            self.outsideIpAddress = outsideIpAddress
            self.phase1DHGroupNumbers = phase1DHGroupNumbers
            self.phase1EncryptionAlgorithms = phase1EncryptionAlgorithms
            self.phase1IntegrityAlgorithms = phase1IntegrityAlgorithms
            self.phase1LifetimeSeconds = phase1LifetimeSeconds
            self.phase2DHGroupNumbers = phase2DHGroupNumbers
            self.phase2EncryptionAlgorithms = phase2EncryptionAlgorithms
            self.phase2IntegrityAlgorithms = phase2IntegrityAlgorithms
            self.phase2LifetimeSeconds = phase2LifetimeSeconds
            self.preSharedKey = preSharedKey
            self.rekeyFuzzPercentage = rekeyFuzzPercentage
            self.rekeyMarginTimeSeconds = rekeyMarginTimeSeconds
            self.replayWindowSize = replayWindowSize
            self.startupAction = startupAction
            self.tunnelInsideCidr = tunnelInsideCidr
            self.tunnelInsideIpv6Cidr = tunnelInsideIpv6Cidr
        }

        private enum CodingKeys: String, CodingKey {
            case dpdTimeoutAction = "dpdTimeoutAction"
            case dpdTimeoutSeconds = "dpdTimeoutSeconds"
            case enableTunnelLifecycleControl = "enableTunnelLifecycleControl"
            case ikeVersions = "ikeVersionSet"
            case logOptions = "logOptions"
            case outsideIpAddress = "outsideIpAddress"
            case phase1DHGroupNumbers = "phase1DHGroupNumberSet"
            case phase1EncryptionAlgorithms = "phase1EncryptionAlgorithmSet"
            case phase1IntegrityAlgorithms = "phase1IntegrityAlgorithmSet"
            case phase1LifetimeSeconds = "phase1LifetimeSeconds"
            case phase2DHGroupNumbers = "phase2DHGroupNumberSet"
            case phase2EncryptionAlgorithms = "phase2EncryptionAlgorithmSet"
            case phase2IntegrityAlgorithms = "phase2IntegrityAlgorithmSet"
            case phase2LifetimeSeconds = "phase2LifetimeSeconds"
            case preSharedKey = "preSharedKey"
            case rekeyFuzzPercentage = "rekeyFuzzPercentage"
            case rekeyMarginTimeSeconds = "rekeyMarginTimeSeconds"
            case replayWindowSize = "replayWindowSize"
            case startupAction = "startupAction"
            case tunnelInsideCidr = "tunnelInsideCidr"
            case tunnelInsideIpv6Cidr = "tunnelInsideIpv6Cidr"
        }
    }

    public struct UnassignIpv6AddressesRequest: AWSEncodableShape {
        public struct _Ipv6AddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv6PrefixesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IPv6 addresses to unassign from the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv6AddressesEncoding, String>>
        public var ipv6Addresses: [String]?
        /// The IPv6 prefixes to unassign from the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv6PrefixesEncoding, String>>
        public var ipv6Prefixes: [String]?
        /// The ID of the network interface.
        public let networkInterfaceId: String?

        public init(ipv6Addresses: [String]? = nil, ipv6Prefixes: [String]? = nil, networkInterfaceId: String? = nil) {
            self.ipv6Addresses = ipv6Addresses
            self.ipv6Prefixes = ipv6Prefixes
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Addresses = "ipv6Addresses"
            case ipv6Prefixes = "Ipv6Prefix"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct UnassignIpv6AddressesResult: AWSDecodableShape {
        public struct _UnassignedIpv6AddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _UnassignedIpv6PrefixesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The IPv6 addresses that have been unassigned from the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_UnassignedIpv6AddressesEncoding, String>>
        public var unassignedIpv6Addresses: [String]?
        /// The IPv4 prefixes that have been unassigned from  the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_UnassignedIpv6PrefixesEncoding, String>>
        public var unassignedIpv6Prefixes: [String]?

        public init(networkInterfaceId: String? = nil, unassignedIpv6Addresses: [String]? = nil, unassignedIpv6Prefixes: [String]? = nil) {
            self.networkInterfaceId = networkInterfaceId
            self.unassignedIpv6Addresses = unassignedIpv6Addresses
            self.unassignedIpv6Prefixes = unassignedIpv6Prefixes
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaceId = "networkInterfaceId"
            case unassignedIpv6Addresses = "unassignedIpv6Addresses"
            case unassignedIpv6Prefixes = "unassignedIpv6PrefixSet"
        }
    }

    public struct UnassignPrivateIpAddressesRequest: AWSEncodableShape {
        public struct _Ipv4PrefixesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PrivateIpAddressesEncoding: ArrayCoderProperties { public static let member = "PrivateIpAddress" }

        /// The IPv4 prefixes to unassign from  the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv4PrefixesEncoding, String>>
        public var ipv4Prefixes: [String]?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The secondary private IP addresses to unassign from the network interface. You can specify this  	option multiple times to unassign more than one IP address.
        @OptionalCustomCoding<EC2ArrayCoder<_PrivateIpAddressesEncoding, String>>
        public var privateIpAddresses: [String]?

        public init(ipv4Prefixes: [String]? = nil, networkInterfaceId: String? = nil, privateIpAddresses: [String]? = nil) {
            self.ipv4Prefixes = ipv4Prefixes
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddresses = privateIpAddresses
        }

        private enum CodingKeys: String, CodingKey {
            case ipv4Prefixes = "Ipv4Prefix"
            case networkInterfaceId = "networkInterfaceId"
            case privateIpAddresses = "privateIpAddress"
        }
    }

    public struct UnassignPrivateNatGatewayAddressRequest: AWSEncodableShape {
        public struct _PrivateIpAddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum amount of time to wait (in seconds) before forcibly releasing the IP addresses if connections are still in progress. Default value is 350 seconds.
        public let maxDrainDurationSeconds: Int?
        /// The ID of the NAT gateway.
        public let natGatewayId: String?
        /// The private IPv4 addresses you want to unassign.
        @OptionalCustomCoding<EC2ArrayCoder<_PrivateIpAddressesEncoding, String>>
        public var privateIpAddresses: [String]?

        public init(dryRun: Bool? = nil, maxDrainDurationSeconds: Int? = nil, natGatewayId: String? = nil, privateIpAddresses: [String]? = nil) {
            self.dryRun = dryRun
            self.maxDrainDurationSeconds = maxDrainDurationSeconds
            self.natGatewayId = natGatewayId
            self.privateIpAddresses = privateIpAddresses
        }

        public func validate(name: String) throws {
            try self.validate(self.maxDrainDurationSeconds, name: "maxDrainDurationSeconds", parent: name, max: 4000)
            try self.validate(self.maxDrainDurationSeconds, name: "maxDrainDurationSeconds", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case maxDrainDurationSeconds = "MaxDrainDurationSeconds"
            case natGatewayId = "NatGatewayId"
            case privateIpAddresses = "PrivateIpAddress"
        }
    }

    public struct UnassignPrivateNatGatewayAddressResult: AWSDecodableShape {
        public struct _NatGatewayAddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the NAT gateway IP addresses.
        @OptionalCustomCoding<EC2ArrayCoder<_NatGatewayAddressesEncoding, NatGatewayAddress>>
        public var natGatewayAddresses: [NatGatewayAddress]?
        /// The ID of the NAT gateway.
        public let natGatewayId: String?

        public init(natGatewayAddresses: [NatGatewayAddress]? = nil, natGatewayId: String? = nil) {
            self.natGatewayAddresses = natGatewayAddresses
            self.natGatewayId = natGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case natGatewayAddresses = "natGatewayAddressSet"
            case natGatewayId = "natGatewayId"
        }
    }

    public struct UnlockSnapshotRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the snapshot to unlock.
        public let snapshotId: String?

        public init(dryRun: Bool? = nil, snapshotId: String? = nil) {
            self.dryRun = dryRun
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case snapshotId = "SnapshotId"
        }
    }

    public struct UnlockSnapshotResult: AWSDecodableShape {
        /// The ID of the snapshot.
        public let snapshotId: String?

        public init(snapshotId: String? = nil) {
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "snapshotId"
        }
    }

    public struct UnmonitorInstancesRequest: AWSEncodableShape {
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "InstanceId" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the instances.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]?

        public init(dryRun: Bool? = nil, instanceIds: [String]? = nil) {
            self.dryRun = dryRun
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceIds = "InstanceId"
        }
    }

    public struct UnmonitorInstancesResult: AWSDecodableShape {
        public struct _InstanceMonitoringsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The monitoring information.
        @OptionalCustomCoding<EC2ArrayCoder<_InstanceMonitoringsEncoding, InstanceMonitoring>>
        public var instanceMonitorings: [InstanceMonitoring]?

        public init(instanceMonitorings: [InstanceMonitoring]? = nil) {
            self.instanceMonitorings = instanceMonitorings
        }

        private enum CodingKeys: String, CodingKey {
            case instanceMonitorings = "instancesSet"
        }
    }

    public struct UnsuccessfulInstanceCreditSpecificationItem: AWSDecodableShape {
        /// The applicable error for the burstable performance instance whose credit option for CPU usage was not modified.
        public let error: UnsuccessfulInstanceCreditSpecificationItemError?
        /// The ID of the instance.
        public let instanceId: String?

        public init(error: UnsuccessfulInstanceCreditSpecificationItemError? = nil, instanceId: String? = nil) {
            self.error = error
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case error = "error"
            case instanceId = "instanceId"
        }
    }

    public struct UnsuccessfulInstanceCreditSpecificationItemError: AWSDecodableShape {
        /// The error code.
        public let code: UnsuccessfulInstanceCreditSpecificationErrorCode?
        /// The applicable error message.
        public let message: String?

        public init(code: UnsuccessfulInstanceCreditSpecificationErrorCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct UnsuccessfulItem: AWSDecodableShape {
        /// Information about the error.
        public let error: UnsuccessfulItemError?
        /// The ID of the resource.
        public let resourceId: String?

        public init(error: UnsuccessfulItemError? = nil, resourceId: String? = nil) {
            self.error = error
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case error = "error"
            case resourceId = "resourceId"
        }
    }

    public struct UnsuccessfulItemError: AWSDecodableShape {
        /// The error code.
        public let code: String?
        /// The error message accompanying the error code.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct UpdateSecurityGroupRuleDescriptionsEgressRequest: AWSEncodableShape {
        public struct _IpPermissionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupRuleDescriptionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the security group. You must specify either the security group ID or the
        /// 			security group name in the request. For security groups in a nondefault VPC, you must
        /// 			specify the security group ID.
        public let groupId: String?
        /// [Default VPC] The name of the security group. You must specify either the security group
        /// 			ID or the security group name.
        public let groupName: String?
        /// The IP permissions for the security group rule. You must specify either the IP permissions
        /// 		    or the description.
        @OptionalCustomCoding<EC2ArrayCoder<_IpPermissionsEncoding, IpPermission>>
        public var ipPermissions: [IpPermission]?
        /// The description for the egress security group rules. You must specify either the description or the IP permissions.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupRuleDescriptionsEncoding, SecurityGroupRuleDescription>>
        public var securityGroupRuleDescriptions: [SecurityGroupRuleDescription]?

        public init(dryRun: Bool? = nil, groupId: String? = nil, groupName: String? = nil, ipPermissions: [IpPermission]? = nil, securityGroupRuleDescriptions: [SecurityGroupRuleDescription]? = nil) {
            self.dryRun = dryRun
            self.groupId = groupId
            self.groupName = groupName
            self.ipPermissions = ipPermissions
            self.securityGroupRuleDescriptions = securityGroupRuleDescriptions
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupId = "GroupId"
            case groupName = "GroupName"
            case ipPermissions = "IpPermissions"
            case securityGroupRuleDescriptions = "SecurityGroupRuleDescription"
        }
    }

    public struct UpdateSecurityGroupRuleDescriptionsEgressResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct UpdateSecurityGroupRuleDescriptionsIngressRequest: AWSEncodableShape {
        public struct _IpPermissionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupRuleDescriptionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the security group. You must specify either the security group ID or the
        /// 			security group name in the request. For security groups in a nondefault VPC, you must
        /// 			specify the security group ID.
        public let groupId: String?
        /// [Default VPC] The name of the security group. You must specify either the security group ID or the security group name. For security groups in a nondefault VPC, you must specify the security group ID.
        public let groupName: String?
        /// The IP permissions for the security group rule. You must specify either IP permissions
        /// 		    or a description.
        @OptionalCustomCoding<EC2ArrayCoder<_IpPermissionsEncoding, IpPermission>>
        public var ipPermissions: [IpPermission]?
        /// The description for the ingress security group rules. You must specify either a description or IP permissions.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupRuleDescriptionsEncoding, SecurityGroupRuleDescription>>
        public var securityGroupRuleDescriptions: [SecurityGroupRuleDescription]?

        public init(dryRun: Bool? = nil, groupId: String? = nil, groupName: String? = nil, ipPermissions: [IpPermission]? = nil, securityGroupRuleDescriptions: [SecurityGroupRuleDescription]? = nil) {
            self.dryRun = dryRun
            self.groupId = groupId
            self.groupName = groupName
            self.ipPermissions = ipPermissions
            self.securityGroupRuleDescriptions = securityGroupRuleDescriptions
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupId = "GroupId"
            case groupName = "GroupName"
            case ipPermissions = "IpPermissions"
            case securityGroupRuleDescriptions = "SecurityGroupRuleDescription"
        }
    }

    public struct UpdateSecurityGroupRuleDescriptionsIngressResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct UserBucket: AWSEncodableShape {
        /// The name of the Amazon S3 bucket where the disk image is located.
        public let s3Bucket: String?
        /// The file name of the disk image.
        public let s3Key: String?

        public init(s3Bucket: String? = nil, s3Key: String? = nil) {
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket = "S3Bucket"
            case s3Key = "S3Key"
        }
    }

    public struct UserBucketDetails: AWSDecodableShape {
        /// The Amazon S3 bucket from which the disk image was created.
        public let s3Bucket: String?
        /// The file name of the disk image.
        public let s3Key: String?

        public init(s3Bucket: String? = nil, s3Key: String? = nil) {
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket = "s3Bucket"
            case s3Key = "s3Key"
        }
    }

    public struct UserData: AWSEncodableShape {
        /// The user data. If you are using an Amazon Web Services SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.
        public let data: String?

        public init(data: String? = nil) {
            self.data = data
        }

        private enum CodingKeys: String, CodingKey {
            case data = "data"
        }
    }

    public struct UserIdGroupPair: AWSEncodableShape & AWSDecodableShape {
        /// A description for the security group rule that references this user ID group
        /// 			pair. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
        public let description: String?
        /// The ID of the security group.
        public let groupId: String?
        /// [Default VPC] The name of the security group. For a security group in a nondefault VPC,  use the security group ID.  For a referenced security group in another VPC, this value is not returned if the referenced security group is deleted.
        public let groupName: String?
        /// The status of a VPC peering connection, if applicable.
        public let peeringStatus: String?
        /// The ID of an Amazon Web Services account. For a referenced security group in another VPC, the account ID of the referenced security group is returned in the response. If the referenced security group is deleted, this value is not returned.
        public let userId: String?
        /// The ID of the VPC for the referenced security group, if applicable.
        public let vpcId: String?
        /// The ID of the VPC peering connection, if applicable.
        public let vpcPeeringConnectionId: String?

        public init(description: String? = nil, groupId: String? = nil, groupName: String? = nil, peeringStatus: String? = nil, userId: String? = nil, vpcId: String? = nil, vpcPeeringConnectionId: String? = nil) {
            self.description = description
            self.groupId = groupId
            self.groupName = groupName
            self.peeringStatus = peeringStatus
            self.userId = userId
            self.vpcId = vpcId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case groupId = "groupId"
            case groupName = "groupName"
            case peeringStatus = "peeringStatus"
            case userId = "userId"
            case vpcId = "vpcId"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct VCpuCountRange: AWSEncodableShape & AWSDecodableShape {
        /// The maximum number of vCPUs. If this parameter is not specified, there is no maximum limit.
        public let max: Int?
        /// The minimum number of vCPUs. If the value is 0, there is no minimum limit.
        public let min: Int?

        public init(max: Int? = nil, min: Int? = nil) {
            self.max = max
            self.min = min
        }

        private enum CodingKeys: String, CodingKey {
            case max = "max"
            case min = "min"
        }
    }

    public struct VCpuCountRangeRequest: AWSEncodableShape {
        /// The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
        public let max: Int?
        /// The minimum number of vCPUs. To specify no minimum limit, specify 0.
        public let min: Int?

        public init(max: Int? = nil, min: Int? = nil) {
            self.max = max
            self.min = min
        }

        private enum CodingKeys: String, CodingKey {
            case max = "Max"
            case min = "Min"
        }
    }

    public struct VCpuInfo: AWSDecodableShape {
        public struct _ValidCoresEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ValidThreadsPerCoreEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The default number of cores for the instance type.
        public let defaultCores: Int?
        /// The default number of threads per core for the instance type.
        public let defaultThreadsPerCore: Int?
        /// The default number of vCPUs for the instance type.
        public let defaultVCpus: Int?
        /// The valid number of cores that can be configured for the instance type.
        @OptionalCustomCoding<EC2ArrayCoder<_ValidCoresEncoding, Int>>
        public var validCores: [Int]?
        /// The valid number of threads per core that can be configured for the instance type.
        @OptionalCustomCoding<EC2ArrayCoder<_ValidThreadsPerCoreEncoding, Int>>
        public var validThreadsPerCore: [Int]?

        public init(defaultCores: Int? = nil, defaultThreadsPerCore: Int? = nil, defaultVCpus: Int? = nil, validCores: [Int]? = nil, validThreadsPerCore: [Int]? = nil) {
            self.defaultCores = defaultCores
            self.defaultThreadsPerCore = defaultThreadsPerCore
            self.defaultVCpus = defaultVCpus
            self.validCores = validCores
            self.validThreadsPerCore = validThreadsPerCore
        }

        private enum CodingKeys: String, CodingKey {
            case defaultCores = "defaultCores"
            case defaultThreadsPerCore = "defaultThreadsPerCore"
            case defaultVCpus = "defaultVCpus"
            case validCores = "validCores"
            case validThreadsPerCore = "validThreadsPerCore"
        }
    }

    public struct ValidationError: AWSDecodableShape {
        /// The error code that indicates why the parameter or parameter combination is not valid. For more information about error codes, see Error codes.
        public let code: String?
        /// The error message that describes why the parameter or parameter combination is not valid. For more information about error messages, see Error codes.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct ValidationWarning: AWSDecodableShape {
        public struct _ErrorsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The error codes and error messages.
        @OptionalCustomCoding<EC2ArrayCoder<_ErrorsEncoding, ValidationError>>
        public var errors: [ValidationError]?

        public init(errors: [ValidationError]? = nil) {
            self.errors = errors
        }

        private enum CodingKeys: String, CodingKey {
            case errors = "errorSet"
        }
    }

    public struct VerifiedAccessEndpoint: AWSDecodableShape {
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The DNS name for users to reach your application.
        public let applicationDomain: String?
        /// The type of attachment used to provide connectivity between the Amazon Web Services Verified Access endpoint and the application.
        public let attachmentType: VerifiedAccessEndpointAttachmentType?
        /// The creation time.
        public let creationTime: String?
        /// The deletion time.
        public let deletionTime: String?
        /// A description for the Amazon Web Services Verified Access endpoint.
        public let description: String?
        /// Returned if endpoint has a device trust provider attached.
        public let deviceValidationDomain: String?
        /// The ARN of a public TLS/SSL certificate imported into or created with ACM.
        public let domainCertificateArn: String?
        /// A DNS name that is generated for the endpoint.
        public let endpointDomain: String?
        /// The type of Amazon Web Services Verified Access endpoint. Incoming application requests will be sent to an IP address, load balancer or a network interface depending on the endpoint type specified.
        public let endpointType: VerifiedAccessEndpointType?
        /// The last updated time.
        public let lastUpdatedTime: String?
        /// The load balancer details if creating the Amazon Web Services Verified Access endpoint as load-balancertype.
        public let loadBalancerOptions: VerifiedAccessEndpointLoadBalancerOptions?
        /// The options for network-interface type endpoint.
        public let networkInterfaceOptions: VerifiedAccessEndpointEniOptions?
        /// The IDs of the security groups for the endpoint.
        @OptionalCustomCoding<EC2ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?
        /// The options in use for server side encryption.
        public let sseSpecification: VerifiedAccessSseSpecificationResponse?
        /// The endpoint status.
        public let status: VerifiedAccessEndpointStatus?
        /// The tags.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the Amazon Web Services Verified Access endpoint.
        public let verifiedAccessEndpointId: String?
        /// The ID of the Amazon Web Services Verified Access group.
        public let verifiedAccessGroupId: String?
        /// The ID of the Amazon Web Services Verified Access instance.
        public let verifiedAccessInstanceId: String?

        public init(applicationDomain: String? = nil, attachmentType: VerifiedAccessEndpointAttachmentType? = nil, creationTime: String? = nil, deletionTime: String? = nil, description: String? = nil, deviceValidationDomain: String? = nil, domainCertificateArn: String? = nil, endpointDomain: String? = nil, endpointType: VerifiedAccessEndpointType? = nil, lastUpdatedTime: String? = nil, loadBalancerOptions: VerifiedAccessEndpointLoadBalancerOptions? = nil, networkInterfaceOptions: VerifiedAccessEndpointEniOptions? = nil, securityGroupIds: [String]? = nil, sseSpecification: VerifiedAccessSseSpecificationResponse? = nil, status: VerifiedAccessEndpointStatus? = nil, tags: [Tag]? = nil, verifiedAccessEndpointId: String? = nil, verifiedAccessGroupId: String? = nil, verifiedAccessInstanceId: String? = nil) {
            self.applicationDomain = applicationDomain
            self.attachmentType = attachmentType
            self.creationTime = creationTime
            self.deletionTime = deletionTime
            self.description = description
            self.deviceValidationDomain = deviceValidationDomain
            self.domainCertificateArn = domainCertificateArn
            self.endpointDomain = endpointDomain
            self.endpointType = endpointType
            self.lastUpdatedTime = lastUpdatedTime
            self.loadBalancerOptions = loadBalancerOptions
            self.networkInterfaceOptions = networkInterfaceOptions
            self.securityGroupIds = securityGroupIds
            self.sseSpecification = sseSpecification
            self.status = status
            self.tags = tags
            self.verifiedAccessEndpointId = verifiedAccessEndpointId
            self.verifiedAccessGroupId = verifiedAccessGroupId
            self.verifiedAccessInstanceId = verifiedAccessInstanceId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationDomain = "applicationDomain"
            case attachmentType = "attachmentType"
            case creationTime = "creationTime"
            case deletionTime = "deletionTime"
            case description = "description"
            case deviceValidationDomain = "deviceValidationDomain"
            case domainCertificateArn = "domainCertificateArn"
            case endpointDomain = "endpointDomain"
            case endpointType = "endpointType"
            case lastUpdatedTime = "lastUpdatedTime"
            case loadBalancerOptions = "loadBalancerOptions"
            case networkInterfaceOptions = "networkInterfaceOptions"
            case securityGroupIds = "securityGroupIdSet"
            case sseSpecification = "sseSpecification"
            case status = "status"
            case tags = "tagSet"
            case verifiedAccessEndpointId = "verifiedAccessEndpointId"
            case verifiedAccessGroupId = "verifiedAccessGroupId"
            case verifiedAccessInstanceId = "verifiedAccessInstanceId"
        }
    }

    public struct VerifiedAccessEndpointEniOptions: AWSDecodableShape {
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The IP port number.
        public let port: Int?
        /// The IP protocol.
        public let `protocol`: VerifiedAccessEndpointProtocol?

        public init(networkInterfaceId: String? = nil, port: Int? = nil, protocol: VerifiedAccessEndpointProtocol? = nil) {
            self.networkInterfaceId = networkInterfaceId
            self.port = port
            self.`protocol` = `protocol`
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaceId = "networkInterfaceId"
            case port = "port"
            case `protocol` = "protocol"
        }
    }

    public struct VerifiedAccessEndpointLoadBalancerOptions: AWSDecodableShape {
        public struct _SubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ARN of the load balancer.
        public let loadBalancerArn: String?
        /// The IP port number.
        public let port: Int?
        /// The IP protocol.
        public let `protocol`: VerifiedAccessEndpointProtocol?
        /// The IDs of the subnets.
        @OptionalCustomCoding<EC2ArrayCoder<_SubnetIdsEncoding, String>>
        public var subnetIds: [String]?

        public init(loadBalancerArn: String? = nil, port: Int? = nil, protocol: VerifiedAccessEndpointProtocol? = nil, subnetIds: [String]? = nil) {
            self.loadBalancerArn = loadBalancerArn
            self.port = port
            self.`protocol` = `protocol`
            self.subnetIds = subnetIds
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerArn = "loadBalancerArn"
            case port = "port"
            case `protocol` = "protocol"
            case subnetIds = "subnetIdSet"
        }
    }

    public struct VerifiedAccessEndpointStatus: AWSDecodableShape {
        /// The status code of the Verified Access endpoint.
        public let code: VerifiedAccessEndpointStatusCode?
        /// The status message of the Verified Access endpoint.
        public let message: String?

        public init(code: VerifiedAccessEndpointStatusCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct VerifiedAccessGroup: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The creation time.
        public let creationTime: String?
        /// The deletion time.
        public let deletionTime: String?
        /// A description for the Amazon Web Services Verified Access group.
        public let description: String?
        /// The last updated time.
        public let lastUpdatedTime: String?
        /// The Amazon Web Services account number that owns the group.
        public let owner: String?
        /// The options in use for server side encryption.
        public let sseSpecification: VerifiedAccessSseSpecificationResponse?
        /// The tags.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ARN of the Verified Access group.
        public let verifiedAccessGroupArn: String?
        /// The ID of the Verified Access group.
        public let verifiedAccessGroupId: String?
        /// The ID of the Amazon Web Services Verified Access instance.
        public let verifiedAccessInstanceId: String?

        public init(creationTime: String? = nil, deletionTime: String? = nil, description: String? = nil, lastUpdatedTime: String? = nil, owner: String? = nil, sseSpecification: VerifiedAccessSseSpecificationResponse? = nil, tags: [Tag]? = nil, verifiedAccessGroupArn: String? = nil, verifiedAccessGroupId: String? = nil, verifiedAccessInstanceId: String? = nil) {
            self.creationTime = creationTime
            self.deletionTime = deletionTime
            self.description = description
            self.lastUpdatedTime = lastUpdatedTime
            self.owner = owner
            self.sseSpecification = sseSpecification
            self.tags = tags
            self.verifiedAccessGroupArn = verifiedAccessGroupArn
            self.verifiedAccessGroupId = verifiedAccessGroupId
            self.verifiedAccessInstanceId = verifiedAccessInstanceId
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case deletionTime = "deletionTime"
            case description = "description"
            case lastUpdatedTime = "lastUpdatedTime"
            case owner = "owner"
            case sseSpecification = "sseSpecification"
            case tags = "tagSet"
            case verifiedAccessGroupArn = "verifiedAccessGroupArn"
            case verifiedAccessGroupId = "verifiedAccessGroupId"
            case verifiedAccessInstanceId = "verifiedAccessInstanceId"
        }
    }

    public struct VerifiedAccessInstance: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _VerifiedAccessTrustProvidersEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The creation time.
        public let creationTime: String?
        /// A description for the Amazon Web Services Verified Access instance.
        public let description: String?
        /// Indicates whether support for Federal Information Processing Standards (FIPS) is enabled on the instance.
        public let fipsEnabled: Bool?
        /// The last updated time.
        public let lastUpdatedTime: String?
        /// The tags.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the Amazon Web Services Verified Access instance.
        public let verifiedAccessInstanceId: String?
        /// The IDs of the Amazon Web Services Verified Access trust providers.
        @OptionalCustomCoding<EC2ArrayCoder<_VerifiedAccessTrustProvidersEncoding, VerifiedAccessTrustProviderCondensed>>
        public var verifiedAccessTrustProviders: [VerifiedAccessTrustProviderCondensed]?

        public init(creationTime: String? = nil, description: String? = nil, fipsEnabled: Bool? = nil, lastUpdatedTime: String? = nil, tags: [Tag]? = nil, verifiedAccessInstanceId: String? = nil, verifiedAccessTrustProviders: [VerifiedAccessTrustProviderCondensed]? = nil) {
            self.creationTime = creationTime
            self.description = description
            self.fipsEnabled = fipsEnabled
            self.lastUpdatedTime = lastUpdatedTime
            self.tags = tags
            self.verifiedAccessInstanceId = verifiedAccessInstanceId
            self.verifiedAccessTrustProviders = verifiedAccessTrustProviders
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case description = "description"
            case fipsEnabled = "fipsEnabled"
            case lastUpdatedTime = "lastUpdatedTime"
            case tags = "tagSet"
            case verifiedAccessInstanceId = "verifiedAccessInstanceId"
            case verifiedAccessTrustProviders = "verifiedAccessTrustProviderSet"
        }
    }

    public struct VerifiedAccessInstanceLoggingConfiguration: AWSDecodableShape {
        /// Details about the logging options.
        public let accessLogs: VerifiedAccessLogs?
        /// The ID of the Amazon Web Services Verified Access instance.
        public let verifiedAccessInstanceId: String?

        public init(accessLogs: VerifiedAccessLogs? = nil, verifiedAccessInstanceId: String? = nil) {
            self.accessLogs = accessLogs
            self.verifiedAccessInstanceId = verifiedAccessInstanceId
        }

        private enum CodingKeys: String, CodingKey {
            case accessLogs = "accessLogs"
            case verifiedAccessInstanceId = "verifiedAccessInstanceId"
        }
    }

    public struct VerifiedAccessLogCloudWatchLogsDestination: AWSDecodableShape {
        /// The delivery status for access logs.
        public let deliveryStatus: VerifiedAccessLogDeliveryStatus?
        /// Indicates whether logging is enabled.
        public let enabled: Bool?
        /// The ID of the CloudWatch Logs log group.
        public let logGroup: String?

        public init(deliveryStatus: VerifiedAccessLogDeliveryStatus? = nil, enabled: Bool? = nil, logGroup: String? = nil) {
            self.deliveryStatus = deliveryStatus
            self.enabled = enabled
            self.logGroup = logGroup
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryStatus = "deliveryStatus"
            case enabled = "enabled"
            case logGroup = "logGroup"
        }
    }

    public struct VerifiedAccessLogCloudWatchLogsDestinationOptions: AWSEncodableShape {
        /// Indicates whether logging is enabled.
        public let enabled: Bool?
        /// The ID of the CloudWatch Logs log group.
        public let logGroup: String?

        public init(enabled: Bool? = nil, logGroup: String? = nil) {
            self.enabled = enabled
            self.logGroup = logGroup
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case logGroup = "LogGroup"
        }
    }

    public struct VerifiedAccessLogDeliveryStatus: AWSDecodableShape {
        /// The status code.
        public let code: VerifiedAccessLogDeliveryStatusCode?
        /// The status message.
        public let message: String?

        public init(code: VerifiedAccessLogDeliveryStatusCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct VerifiedAccessLogKinesisDataFirehoseDestination: AWSDecodableShape {
        /// The delivery status.
        public let deliveryStatus: VerifiedAccessLogDeliveryStatus?
        /// The ID of the delivery stream.
        public let deliveryStream: String?
        /// Indicates whether logging is enabled.
        public let enabled: Bool?

        public init(deliveryStatus: VerifiedAccessLogDeliveryStatus? = nil, deliveryStream: String? = nil, enabled: Bool? = nil) {
            self.deliveryStatus = deliveryStatus
            self.deliveryStream = deliveryStream
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryStatus = "deliveryStatus"
            case deliveryStream = "deliveryStream"
            case enabled = "enabled"
        }
    }

    public struct VerifiedAccessLogKinesisDataFirehoseDestinationOptions: AWSEncodableShape {
        /// The ID of the delivery stream.
        public let deliveryStream: String?
        /// Indicates whether logging is enabled.
        public let enabled: Bool?

        public init(deliveryStream: String? = nil, enabled: Bool? = nil) {
            self.deliveryStream = deliveryStream
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryStream = "DeliveryStream"
            case enabled = "Enabled"
        }
    }

    public struct VerifiedAccessLogOptions: AWSEncodableShape {
        /// Sends Verified Access logs to CloudWatch Logs.
        public let cloudWatchLogs: VerifiedAccessLogCloudWatchLogsDestinationOptions?
        /// Indicates whether to include trust data sent by trust providers in the logs.
        public let includeTrustContext: Bool?
        /// Sends Verified Access logs to Kinesis.
        public let kinesisDataFirehose: VerifiedAccessLogKinesisDataFirehoseDestinationOptions?
        /// The logging version. Valid values: ocsf-0.1 | ocsf-1.0.0-rc.2
        public let logVersion: String?
        /// Sends Verified Access logs to Amazon S3.
        public let s3: VerifiedAccessLogS3DestinationOptions?

        public init(cloudWatchLogs: VerifiedAccessLogCloudWatchLogsDestinationOptions? = nil, includeTrustContext: Bool? = nil, kinesisDataFirehose: VerifiedAccessLogKinesisDataFirehoseDestinationOptions? = nil, logVersion: String? = nil, s3: VerifiedAccessLogS3DestinationOptions? = nil) {
            self.cloudWatchLogs = cloudWatchLogs
            self.includeTrustContext = includeTrustContext
            self.kinesisDataFirehose = kinesisDataFirehose
            self.logVersion = logVersion
            self.s3 = s3
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLogs = "CloudWatchLogs"
            case includeTrustContext = "IncludeTrustContext"
            case kinesisDataFirehose = "KinesisDataFirehose"
            case logVersion = "LogVersion"
            case s3 = "S3"
        }
    }

    public struct VerifiedAccessLogS3Destination: AWSDecodableShape {
        /// The bucket name.
        public let bucketName: String?
        /// The Amazon Web Services account number that owns the bucket.
        public let bucketOwner: String?
        /// The delivery status.
        public let deliveryStatus: VerifiedAccessLogDeliveryStatus?
        /// Indicates whether logging is enabled.
        public let enabled: Bool?
        /// The bucket prefix.
        public let prefix: String?

        public init(bucketName: String? = nil, bucketOwner: String? = nil, deliveryStatus: VerifiedAccessLogDeliveryStatus? = nil, enabled: Bool? = nil, prefix: String? = nil) {
            self.bucketName = bucketName
            self.bucketOwner = bucketOwner
            self.deliveryStatus = deliveryStatus
            self.enabled = enabled
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case bucketName = "bucketName"
            case bucketOwner = "bucketOwner"
            case deliveryStatus = "deliveryStatus"
            case enabled = "enabled"
            case prefix = "prefix"
        }
    }

    public struct VerifiedAccessLogS3DestinationOptions: AWSEncodableShape {
        /// The bucket name.
        public let bucketName: String?
        /// The ID of the Amazon Web Services account that owns the Amazon S3 bucket.
        public let bucketOwner: String?
        /// Indicates whether logging is enabled.
        public let enabled: Bool?
        /// The bucket prefix.
        public let prefix: String?

        public init(bucketName: String? = nil, bucketOwner: String? = nil, enabled: Bool? = nil, prefix: String? = nil) {
            self.bucketName = bucketName
            self.bucketOwner = bucketOwner
            self.enabled = enabled
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case bucketName = "BucketName"
            case bucketOwner = "BucketOwner"
            case enabled = "Enabled"
            case prefix = "Prefix"
        }
    }

    public struct VerifiedAccessLogs: AWSDecodableShape {
        /// CloudWatch Logs logging destination.
        public let cloudWatchLogs: VerifiedAccessLogCloudWatchLogsDestination?
        /// Indicates whether trust data is included in the logs.
        public let includeTrustContext: Bool?
        /// Kinesis logging destination.
        public let kinesisDataFirehose: VerifiedAccessLogKinesisDataFirehoseDestination?
        /// The log version.
        public let logVersion: String?
        /// Amazon S3 logging options.
        public let s3: VerifiedAccessLogS3Destination?

        public init(cloudWatchLogs: VerifiedAccessLogCloudWatchLogsDestination? = nil, includeTrustContext: Bool? = nil, kinesisDataFirehose: VerifiedAccessLogKinesisDataFirehoseDestination? = nil, logVersion: String? = nil, s3: VerifiedAccessLogS3Destination? = nil) {
            self.cloudWatchLogs = cloudWatchLogs
            self.includeTrustContext = includeTrustContext
            self.kinesisDataFirehose = kinesisDataFirehose
            self.logVersion = logVersion
            self.s3 = s3
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLogs = "cloudWatchLogs"
            case includeTrustContext = "includeTrustContext"
            case kinesisDataFirehose = "kinesisDataFirehose"
            case logVersion = "logVersion"
            case s3 = "s3"
        }
    }

    public struct VerifiedAccessSseSpecificationRequest: AWSEncodableShape {
        ///  Enable or disable the use of customer managed KMS keys for server side encryption.  Valid values: True | False
        public let customerManagedKeyEnabled: Bool?
        ///  The ARN of the KMS key.
        public let kmsKeyArn: String?

        public init(customerManagedKeyEnabled: Bool? = nil, kmsKeyArn: String? = nil) {
            self.customerManagedKeyEnabled = customerManagedKeyEnabled
            self.kmsKeyArn = kmsKeyArn
        }

        private enum CodingKeys: String, CodingKey {
            case customerManagedKeyEnabled = "CustomerManagedKeyEnabled"
            case kmsKeyArn = "KmsKeyArn"
        }
    }

    public struct VerifiedAccessSseSpecificationResponse: AWSDecodableShape {
        /// Indicates whether customer managed KMS keys are in use for server side encryption. Valid values: True | False
        public let customerManagedKeyEnabled: Bool?
        /// The ARN of the KMS key.
        public let kmsKeyArn: String?

        public init(customerManagedKeyEnabled: Bool? = nil, kmsKeyArn: String? = nil) {
            self.customerManagedKeyEnabled = customerManagedKeyEnabled
            self.kmsKeyArn = kmsKeyArn
        }

        private enum CodingKeys: String, CodingKey {
            case customerManagedKeyEnabled = "customerManagedKeyEnabled"
            case kmsKeyArn = "kmsKeyArn"
        }
    }

    public struct VerifiedAccessTrustProvider: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The creation time.
        public let creationTime: String?
        /// A description for the Amazon Web Services Verified Access trust provider.
        public let description: String?
        /// The options for device-identity trust provider.
        public let deviceOptions: DeviceOptions?
        /// The type of device-based trust provider.
        public let deviceTrustProviderType: DeviceTrustProviderType?
        /// The last updated time.
        public let lastUpdatedTime: String?
        /// The options for an OpenID Connect-compatible user-identity trust provider.
        public let oidcOptions: OidcOptions?
        /// The identifier to be used when working with policy rules.
        public let policyReferenceName: String?
        /// The options in use for server side encryption.
        public let sseSpecification: VerifiedAccessSseSpecificationResponse?
        /// The tags.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The type of Verified Access trust provider.
        public let trustProviderType: TrustProviderType?
        /// The type of user-based trust provider.
        public let userTrustProviderType: UserTrustProviderType?
        /// The ID of the Amazon Web Services Verified Access trust provider.
        public let verifiedAccessTrustProviderId: String?

        public init(creationTime: String? = nil, description: String? = nil, deviceOptions: DeviceOptions? = nil, deviceTrustProviderType: DeviceTrustProviderType? = nil, lastUpdatedTime: String? = nil, oidcOptions: OidcOptions? = nil, policyReferenceName: String? = nil, sseSpecification: VerifiedAccessSseSpecificationResponse? = nil, tags: [Tag]? = nil, trustProviderType: TrustProviderType? = nil, userTrustProviderType: UserTrustProviderType? = nil, verifiedAccessTrustProviderId: String? = nil) {
            self.creationTime = creationTime
            self.description = description
            self.deviceOptions = deviceOptions
            self.deviceTrustProviderType = deviceTrustProviderType
            self.lastUpdatedTime = lastUpdatedTime
            self.oidcOptions = oidcOptions
            self.policyReferenceName = policyReferenceName
            self.sseSpecification = sseSpecification
            self.tags = tags
            self.trustProviderType = trustProviderType
            self.userTrustProviderType = userTrustProviderType
            self.verifiedAccessTrustProviderId = verifiedAccessTrustProviderId
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case description = "description"
            case deviceOptions = "deviceOptions"
            case deviceTrustProviderType = "deviceTrustProviderType"
            case lastUpdatedTime = "lastUpdatedTime"
            case oidcOptions = "oidcOptions"
            case policyReferenceName = "policyReferenceName"
            case sseSpecification = "sseSpecification"
            case tags = "tagSet"
            case trustProviderType = "trustProviderType"
            case userTrustProviderType = "userTrustProviderType"
            case verifiedAccessTrustProviderId = "verifiedAccessTrustProviderId"
        }
    }

    public struct VerifiedAccessTrustProviderCondensed: AWSDecodableShape {
        /// The description of trust provider.
        public let description: String?
        /// The type of device-based trust provider.
        public let deviceTrustProviderType: DeviceTrustProviderType?
        /// The type of trust provider (user- or device-based).
        public let trustProviderType: TrustProviderType?
        /// The type of user-based trust provider.
        public let userTrustProviderType: UserTrustProviderType?
        /// The ID of the trust provider.
        public let verifiedAccessTrustProviderId: String?

        public init(description: String? = nil, deviceTrustProviderType: DeviceTrustProviderType? = nil, trustProviderType: TrustProviderType? = nil, userTrustProviderType: UserTrustProviderType? = nil, verifiedAccessTrustProviderId: String? = nil) {
            self.description = description
            self.deviceTrustProviderType = deviceTrustProviderType
            self.trustProviderType = trustProviderType
            self.userTrustProviderType = userTrustProviderType
            self.verifiedAccessTrustProviderId = verifiedAccessTrustProviderId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case deviceTrustProviderType = "deviceTrustProviderType"
            case trustProviderType = "trustProviderType"
            case userTrustProviderType = "userTrustProviderType"
            case verifiedAccessTrustProviderId = "verifiedAccessTrustProviderId"
        }
    }

    public struct VgwTelemetry: AWSDecodableShape {
        /// The number of accepted routes.
        public let acceptedRouteCount: Int?
        /// The Amazon Resource Name (ARN) of the VPN tunnel endpoint certificate.
        public let certificateArn: String?
        /// The date and time of the last change in status. This field is updated when changes in IKE (Phase 1), IPSec (Phase 2), or BGP status are detected.
        public let lastStatusChange: Date?
        /// The Internet-routable IP address of the virtual private gateway's outside interface.
        public let outsideIpAddress: String?
        /// The status of the VPN tunnel.
        public let status: TelemetryStatus?
        /// If an error occurs, a description of the error.
        public let statusMessage: String?

        public init(acceptedRouteCount: Int? = nil, certificateArn: String? = nil, lastStatusChange: Date? = nil, outsideIpAddress: String? = nil, status: TelemetryStatus? = nil, statusMessage: String? = nil) {
            self.acceptedRouteCount = acceptedRouteCount
            self.certificateArn = certificateArn
            self.lastStatusChange = lastStatusChange
            self.outsideIpAddress = outsideIpAddress
            self.status = status
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case acceptedRouteCount = "acceptedRouteCount"
            case certificateArn = "certificateArn"
            case lastStatusChange = "lastStatusChange"
            case outsideIpAddress = "outsideIpAddress"
            case status = "status"
            case statusMessage = "statusMessage"
        }
    }

    public struct Volume: AWSDecodableShape {
        public struct _AttachmentsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the volume attachments.
        @OptionalCustomCoding<EC2ArrayCoder<_AttachmentsEncoding, VolumeAttachment>>
        public var attachments: [VolumeAttachment]?
        /// The Availability Zone for the volume.
        public let availabilityZone: String?
        /// The time stamp when volume creation was initiated.
        public let createTime: Date?
        /// Indicates whether the volume is encrypted.
        public let encrypted: Bool?
        /// Indicates whether the volume was created using fast snapshot restore.
        public let fastRestored: Bool?
        /// The number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents  the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline  performance of the volume and the rate at which the volume accumulates I/O credits for bursting.
        public let iops: Int?
        /// The Amazon Resource Name (ARN) of the Key Management Service (KMS) KMS key that was used to protect the volume encryption key for the volume.
        public let kmsKeyId: String?
        /// Indicates whether Amazon EBS Multi-Attach is enabled.
        public let multiAttachEnabled: Bool?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// The size of the volume, in GiBs.
        public let size: Int?
        /// The snapshot from which the volume was created, if applicable.
        public let snapshotId: String?
        /// Reserved for future use.
        public let sseType: SSEType?
        /// The volume state.
        public let state: VolumeState?
        /// Any tags assigned to the volume.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The throughput that the volume supports, in MiB/s.
        public let throughput: Int?
        /// The ID of the volume.
        public let volumeId: String?
        /// The volume type.
        public let volumeType: VolumeType?

        public init(attachments: [VolumeAttachment]? = nil, availabilityZone: String? = nil, createTime: Date? = nil, encrypted: Bool? = nil, fastRestored: Bool? = nil, iops: Int? = nil, kmsKeyId: String? = nil, multiAttachEnabled: Bool? = nil, outpostArn: String? = nil, size: Int? = nil, snapshotId: String? = nil, sseType: SSEType? = nil, state: VolumeState? = nil, tags: [Tag]? = nil, throughput: Int? = nil, volumeId: String? = nil, volumeType: VolumeType? = nil) {
            self.attachments = attachments
            self.availabilityZone = availabilityZone
            self.createTime = createTime
            self.encrypted = encrypted
            self.fastRestored = fastRestored
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.multiAttachEnabled = multiAttachEnabled
            self.outpostArn = outpostArn
            self.size = size
            self.snapshotId = snapshotId
            self.sseType = sseType
            self.state = state
            self.tags = tags
            self.throughput = throughput
            self.volumeId = volumeId
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case attachments = "attachmentSet"
            case availabilityZone = "availabilityZone"
            case createTime = "createTime"
            case encrypted = "encrypted"
            case fastRestored = "fastRestored"
            case iops = "iops"
            case kmsKeyId = "kmsKeyId"
            case multiAttachEnabled = "multiAttachEnabled"
            case outpostArn = "outpostArn"
            case size = "size"
            case snapshotId = "snapshotId"
            case sseType = "sseType"
            case state = "status"
            case tags = "tagSet"
            case throughput = "throughput"
            case volumeId = "volumeId"
            case volumeType = "volumeType"
        }
    }

    public struct VolumeAttachment: AWSDecodableShape {
        /// The ARN of the Amazon ECS or Fargate task  to which the volume is attached.
        public let associatedResource: String?
        /// The time stamp when the attachment initiated.
        public let attachTime: Date?
        /// Indicates whether the EBS volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// The device name. If the volume is attached to a Fargate task, this parameter  returns null.
        public let device: String?
        /// The ID of the instance. If the volume is attached to a Fargate task, this parameter  returns null.
        public let instanceId: String?
        /// The service principal of Amazon Web Services service that owns the underlying  instance to which the volume is attached. This parameter is returned only for volumes that are attached to  Fargate tasks.
        public let instanceOwningService: String?
        /// The attachment state of the volume.
        public let state: VolumeAttachmentState?
        /// The ID of the volume.
        public let volumeId: String?

        public init(associatedResource: String? = nil, attachTime: Date? = nil, deleteOnTermination: Bool? = nil, device: String? = nil, instanceId: String? = nil, instanceOwningService: String? = nil, state: VolumeAttachmentState? = nil, volumeId: String? = nil) {
            self.associatedResource = associatedResource
            self.attachTime = attachTime
            self.deleteOnTermination = deleteOnTermination
            self.device = device
            self.instanceId = instanceId
            self.instanceOwningService = instanceOwningService
            self.state = state
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case associatedResource = "associatedResource"
            case attachTime = "attachTime"
            case deleteOnTermination = "deleteOnTermination"
            case device = "device"
            case instanceId = "instanceId"
            case instanceOwningService = "instanceOwningService"
            case state = "status"
            case volumeId = "volumeId"
        }
    }

    public struct VolumeDetail: AWSEncodableShape {
        /// The size of the volume, in GiB.
        public let size: Int64?

        public init(size: Int64? = nil) {
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case size = "size"
        }
    }

    public struct VolumeModification: AWSDecodableShape {
        /// The modification completion or failure time.
        public let endTime: Date?
        /// The current modification state. The modification state is null for unmodified volumes.
        public let modificationState: VolumeModificationState?
        /// The original IOPS rate of the volume.
        public let originalIops: Int?
        /// The original setting for Amazon EBS Multi-Attach.
        public let originalMultiAttachEnabled: Bool?
        /// The original size of the volume, in GiB.
        public let originalSize: Int?
        /// The original throughput of the volume, in MiB/s.
        public let originalThroughput: Int?
        /// The original EBS volume type of the volume.
        public let originalVolumeType: VolumeType?
        /// The modification progress, from 0 to 100 percent complete.
        public let progress: Int64?
        /// The modification start time.
        public let startTime: Date?
        /// A status message about the modification progress or failure.
        public let statusMessage: String?
        /// The target IOPS rate of the volume.
        public let targetIops: Int?
        /// The target setting for Amazon EBS Multi-Attach.
        public let targetMultiAttachEnabled: Bool?
        /// The target size of the volume, in GiB.
        public let targetSize: Int?
        /// The target throughput of the volume, in MiB/s.
        public let targetThroughput: Int?
        /// The target EBS volume type of the volume.
        public let targetVolumeType: VolumeType?
        /// The ID of the volume.
        public let volumeId: String?

        public init(endTime: Date? = nil, modificationState: VolumeModificationState? = nil, originalIops: Int? = nil, originalMultiAttachEnabled: Bool? = nil, originalSize: Int? = nil, originalThroughput: Int? = nil, originalVolumeType: VolumeType? = nil, progress: Int64? = nil, startTime: Date? = nil, statusMessage: String? = nil, targetIops: Int? = nil, targetMultiAttachEnabled: Bool? = nil, targetSize: Int? = nil, targetThroughput: Int? = nil, targetVolumeType: VolumeType? = nil, volumeId: String? = nil) {
            self.endTime = endTime
            self.modificationState = modificationState
            self.originalIops = originalIops
            self.originalMultiAttachEnabled = originalMultiAttachEnabled
            self.originalSize = originalSize
            self.originalThroughput = originalThroughput
            self.originalVolumeType = originalVolumeType
            self.progress = progress
            self.startTime = startTime
            self.statusMessage = statusMessage
            self.targetIops = targetIops
            self.targetMultiAttachEnabled = targetMultiAttachEnabled
            self.targetSize = targetSize
            self.targetThroughput = targetThroughput
            self.targetVolumeType = targetVolumeType
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "endTime"
            case modificationState = "modificationState"
            case originalIops = "originalIops"
            case originalMultiAttachEnabled = "originalMultiAttachEnabled"
            case originalSize = "originalSize"
            case originalThroughput = "originalThroughput"
            case originalVolumeType = "originalVolumeType"
            case progress = "progress"
            case startTime = "startTime"
            case statusMessage = "statusMessage"
            case targetIops = "targetIops"
            case targetMultiAttachEnabled = "targetMultiAttachEnabled"
            case targetSize = "targetSize"
            case targetThroughput = "targetThroughput"
            case targetVolumeType = "targetVolumeType"
            case volumeId = "volumeId"
        }
    }

    public struct VolumeStatusAction: AWSDecodableShape {
        /// The code identifying the operation, for example, enable-volume-io.
        public let code: String?
        /// A description of the operation.
        public let description: String?
        /// The ID of the event associated with this operation.
        public let eventId: String?
        /// The event type associated with this operation.
        public let eventType: String?

        public init(code: String? = nil, description: String? = nil, eventId: String? = nil, eventType: String? = nil) {
            self.code = code
            self.description = description
            self.eventId = eventId
            self.eventType = eventType
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case description = "description"
            case eventId = "eventId"
            case eventType = "eventType"
        }
    }

    public struct VolumeStatusAttachmentStatus: AWSDecodableShape {
        /// The ID of the attached instance.
        public let instanceId: String?
        /// The maximum IOPS supported by the attached instance.
        public let ioPerformance: String?

        public init(instanceId: String? = nil, ioPerformance: String? = nil) {
            self.instanceId = instanceId
            self.ioPerformance = ioPerformance
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case ioPerformance = "ioPerformance"
        }
    }

    public struct VolumeStatusDetails: AWSDecodableShape {
        /// The name of the volume status.
        public let name: VolumeStatusName?
        /// The intended status of the volume status.
        public let status: String?

        public init(name: VolumeStatusName? = nil, status: String? = nil) {
            self.name = name
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case status = "status"
        }
    }

    public struct VolumeStatusEvent: AWSDecodableShape {
        /// A description of the event.
        public let description: String?
        /// The ID of this event.
        public let eventId: String?
        /// The type of this event.
        public let eventType: String?
        /// The ID of the instance associated with the event.
        public let instanceId: String?
        /// The latest end time of the event.
        public let notAfter: Date?
        /// The earliest start time of the event.
        public let notBefore: Date?

        public init(description: String? = nil, eventId: String? = nil, eventType: String? = nil, instanceId: String? = nil, notAfter: Date? = nil, notBefore: Date? = nil) {
            self.description = description
            self.eventId = eventId
            self.eventType = eventType
            self.instanceId = instanceId
            self.notAfter = notAfter
            self.notBefore = notBefore
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case eventId = "eventId"
            case eventType = "eventType"
            case instanceId = "instanceId"
            case notAfter = "notAfter"
            case notBefore = "notBefore"
        }
    }

    public struct VolumeStatusInfo: AWSDecodableShape {
        public struct _DetailsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The details of the volume status.
        @OptionalCustomCoding<EC2ArrayCoder<_DetailsEncoding, VolumeStatusDetails>>
        public var details: [VolumeStatusDetails]?
        /// The status of the volume.
        public let status: VolumeStatusInfoStatus?

        public init(details: [VolumeStatusDetails]? = nil, status: VolumeStatusInfoStatus? = nil) {
            self.details = details
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case details = "details"
            case status = "status"
        }
    }

    public struct VolumeStatusItem: AWSDecodableShape {
        public struct _ActionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _AttachmentStatusesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _EventsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The details of the operation.
        @OptionalCustomCoding<EC2ArrayCoder<_ActionsEncoding, VolumeStatusAction>>
        public var actions: [VolumeStatusAction]?
        /// Information about the instances to which the volume is attached.
        @OptionalCustomCoding<EC2ArrayCoder<_AttachmentStatusesEncoding, VolumeStatusAttachmentStatus>>
        public var attachmentStatuses: [VolumeStatusAttachmentStatus]?
        /// The Availability Zone of the volume.
        public let availabilityZone: String?
        /// A list of events associated with the volume.
        @OptionalCustomCoding<EC2ArrayCoder<_EventsEncoding, VolumeStatusEvent>>
        public var events: [VolumeStatusEvent]?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// The volume ID.
        public let volumeId: String?
        /// The volume status.
        public let volumeStatus: VolumeStatusInfo?

        public init(actions: [VolumeStatusAction]? = nil, attachmentStatuses: [VolumeStatusAttachmentStatus]? = nil, availabilityZone: String? = nil, events: [VolumeStatusEvent]? = nil, outpostArn: String? = nil, volumeId: String? = nil, volumeStatus: VolumeStatusInfo? = nil) {
            self.actions = actions
            self.attachmentStatuses = attachmentStatuses
            self.availabilityZone = availabilityZone
            self.events = events
            self.outpostArn = outpostArn
            self.volumeId = volumeId
            self.volumeStatus = volumeStatus
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "actionsSet"
            case attachmentStatuses = "attachmentStatuses"
            case availabilityZone = "availabilityZone"
            case events = "eventsSet"
            case outpostArn = "outpostArn"
            case volumeId = "volumeId"
            case volumeStatus = "volumeStatus"
        }
    }

    public struct Vpc: AWSDecodableShape {
        public struct _CidrBlockAssociationSetEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv6CidrBlockAssociationSetEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The primary IPv4 CIDR block for the VPC.
        public let cidrBlock: String?
        /// Information about the IPv4 CIDR blocks associated with the VPC.
        @OptionalCustomCoding<EC2ArrayCoder<_CidrBlockAssociationSetEncoding, VpcCidrBlockAssociation>>
        public var cidrBlockAssociationSet: [VpcCidrBlockAssociation]?
        /// The ID of the set of DHCP options you've associated with the VPC.
        public let dhcpOptionsId: String?
        /// The allowed tenancy of instances launched into the VPC.
        public let instanceTenancy: Tenancy?
        /// Information about the IPv6 CIDR blocks associated with the VPC.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv6CidrBlockAssociationSetEncoding, VpcIpv6CidrBlockAssociation>>
        public var ipv6CidrBlockAssociationSet: [VpcIpv6CidrBlockAssociation]?
        /// Indicates whether the VPC is the default VPC.
        public let isDefault: Bool?
        /// The ID of the Amazon Web Services account that owns the VPC.
        public let ownerId: String?
        /// The current state of the VPC.
        public let state: VpcState?
        /// Any tags assigned to the VPC.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(cidrBlock: String? = nil, cidrBlockAssociationSet: [VpcCidrBlockAssociation]? = nil, dhcpOptionsId: String? = nil, instanceTenancy: Tenancy? = nil, ipv6CidrBlockAssociationSet: [VpcIpv6CidrBlockAssociation]? = nil, isDefault: Bool? = nil, ownerId: String? = nil, state: VpcState? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.cidrBlock = cidrBlock
            self.cidrBlockAssociationSet = cidrBlockAssociationSet
            self.dhcpOptionsId = dhcpOptionsId
            self.instanceTenancy = instanceTenancy
            self.ipv6CidrBlockAssociationSet = ipv6CidrBlockAssociationSet
            self.isDefault = isDefault
            self.ownerId = ownerId
            self.state = state
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlock = "cidrBlock"
            case cidrBlockAssociationSet = "cidrBlockAssociationSet"
            case dhcpOptionsId = "dhcpOptionsId"
            case instanceTenancy = "instanceTenancy"
            case ipv6CidrBlockAssociationSet = "ipv6CidrBlockAssociationSet"
            case isDefault = "isDefault"
            case ownerId = "ownerId"
            case state = "state"
            case tags = "tagSet"
            case vpcId = "vpcId"
        }
    }

    public struct VpcAttachment: AWSDecodableShape {
        /// The current state of the attachment.
        public let state: AttachmentStatus?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(state: AttachmentStatus? = nil, vpcId: String? = nil) {
            self.state = state
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case vpcId = "vpcId"
        }
    }

    public struct VpcCidrBlockAssociation: AWSDecodableShape {
        /// The association ID for the IPv4 CIDR block.
        public let associationId: String?
        /// The IPv4 CIDR block.
        public let cidrBlock: String?
        /// Information about the state of the CIDR block.
        public let cidrBlockState: VpcCidrBlockState?

        public init(associationId: String? = nil, cidrBlock: String? = nil, cidrBlockState: VpcCidrBlockState? = nil) {
            self.associationId = associationId
            self.cidrBlock = cidrBlock
            self.cidrBlockState = cidrBlockState
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case cidrBlock = "cidrBlock"
            case cidrBlockState = "cidrBlockState"
        }
    }

    public struct VpcCidrBlockState: AWSDecodableShape {
        /// The state of the CIDR block.
        public let state: VpcCidrBlockStateCode?
        /// A message about the status of the CIDR block, if applicable.
        public let statusMessage: String?

        public init(state: VpcCidrBlockStateCode? = nil, statusMessage: String? = nil) {
            self.state = state
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case statusMessage = "statusMessage"
        }
    }

    public struct VpcClassicLink: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether the VPC is enabled for ClassicLink.
        public let classicLinkEnabled: Bool?
        /// Any tags assigned to the VPC.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(classicLinkEnabled: Bool? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.classicLinkEnabled = classicLinkEnabled
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case classicLinkEnabled = "classicLinkEnabled"
            case tags = "tagSet"
            case vpcId = "vpcId"
        }
    }

    public struct VpcEndpoint: AWSDecodableShape {
        public struct _DnsEntriesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _NetworkInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RouteTableIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The date and time that the endpoint was created.
        public let creationTimestamp: Date?
        /// (Interface endpoint) The DNS entries for the endpoint.
        @OptionalCustomCoding<EC2ArrayCoder<_DnsEntriesEncoding, DnsEntry>>
        public var dnsEntries: [DnsEntry]?
        /// The DNS options for the endpoint.
        public let dnsOptions: DnsOptions?
        /// (Interface endpoint) Information about the security groups that are associated with the network interface.
        @OptionalCustomCoding<EC2ArrayCoder<_GroupsEncoding, SecurityGroupIdentifier>>
        public var groups: [SecurityGroupIdentifier]?
        /// The IP address type for the endpoint.
        public let ipAddressType: IpAddressType?
        /// The last error that occurred for endpoint.
        public let lastError: LastError?
        /// (Interface endpoint) The network interfaces for the endpoint.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkInterfaceIdsEncoding, String>>
        public var networkInterfaceIds: [String]?
        /// The ID of the Amazon Web Services account that owns the endpoint.
        public let ownerId: String?
        /// The policy document associated with the endpoint, if applicable.
        public let policyDocument: String?
        /// (Interface endpoint) Indicates whether the VPC is associated with a private hosted zone.
        public let privateDnsEnabled: Bool?
        /// Indicates whether the endpoint is being managed by its service.
        public let requesterManaged: Bool?
        /// (Gateway endpoint) The IDs of the route tables associated with the endpoint.
        @OptionalCustomCoding<EC2ArrayCoder<_RouteTableIdsEncoding, String>>
        public var routeTableIds: [String]?
        /// The name of the service to which the endpoint is associated.
        public let serviceName: String?
        /// The state of the endpoint.
        public let state: State?
        /// (Interface endpoint) The subnets for the endpoint.
        @OptionalCustomCoding<EC2ArrayCoder<_SubnetIdsEncoding, String>>
        public var subnetIds: [String]?
        /// The tags assigned to the endpoint.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the endpoint.
        public let vpcEndpointId: String?
        /// The type of endpoint.
        public let vpcEndpointType: VpcEndpointType?
        /// The ID of the VPC to which the endpoint is associated.
        public let vpcId: String?

        public init(creationTimestamp: Date? = nil, dnsEntries: [DnsEntry]? = nil, dnsOptions: DnsOptions? = nil, groups: [SecurityGroupIdentifier]? = nil, ipAddressType: IpAddressType? = nil, lastError: LastError? = nil, networkInterfaceIds: [String]? = nil, ownerId: String? = nil, policyDocument: String? = nil, privateDnsEnabled: Bool? = nil, requesterManaged: Bool? = nil, routeTableIds: [String]? = nil, serviceName: String? = nil, state: State? = nil, subnetIds: [String]? = nil, tags: [Tag]? = nil, vpcEndpointId: String? = nil, vpcEndpointType: VpcEndpointType? = nil, vpcId: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.dnsEntries = dnsEntries
            self.dnsOptions = dnsOptions
            self.groups = groups
            self.ipAddressType = ipAddressType
            self.lastError = lastError
            self.networkInterfaceIds = networkInterfaceIds
            self.ownerId = ownerId
            self.policyDocument = policyDocument
            self.privateDnsEnabled = privateDnsEnabled
            self.requesterManaged = requesterManaged
            self.routeTableIds = routeTableIds
            self.serviceName = serviceName
            self.state = state
            self.subnetIds = subnetIds
            self.tags = tags
            self.vpcEndpointId = vpcEndpointId
            self.vpcEndpointType = vpcEndpointType
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "creationTimestamp"
            case dnsEntries = "dnsEntrySet"
            case dnsOptions = "dnsOptions"
            case groups = "groupSet"
            case ipAddressType = "ipAddressType"
            case lastError = "lastError"
            case networkInterfaceIds = "networkInterfaceIdSet"
            case ownerId = "ownerId"
            case policyDocument = "policyDocument"
            case privateDnsEnabled = "privateDnsEnabled"
            case requesterManaged = "requesterManaged"
            case routeTableIds = "routeTableIdSet"
            case serviceName = "serviceName"
            case state = "state"
            case subnetIds = "subnetIdSet"
            case tags = "tagSet"
            case vpcEndpointId = "vpcEndpointId"
            case vpcEndpointType = "vpcEndpointType"
            case vpcId = "vpcId"
        }
    }

    public struct VpcEndpointConnection: AWSDecodableShape {
        public struct _DnsEntriesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _GatewayLoadBalancerArnsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _NetworkLoadBalancerArnsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The date and time that the VPC endpoint was created.
        public let creationTimestamp: Date?
        /// The DNS entries for the VPC endpoint.
        @OptionalCustomCoding<EC2ArrayCoder<_DnsEntriesEncoding, DnsEntry>>
        public var dnsEntries: [DnsEntry]?
        /// The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the service.
        @OptionalCustomCoding<EC2ArrayCoder<_GatewayLoadBalancerArnsEncoding, String>>
        public var gatewayLoadBalancerArns: [String]?
        /// The IP address type for the endpoint.
        public let ipAddressType: IpAddressType?
        /// The Amazon Resource Names (ARNs) of the network load balancers for the service.
        @OptionalCustomCoding<EC2ArrayCoder<_NetworkLoadBalancerArnsEncoding, String>>
        public var networkLoadBalancerArns: [String]?
        /// The ID of the service to which the endpoint is connected.
        public let serviceId: String?
        /// The tags.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VPC endpoint connection.
        public let vpcEndpointConnectionId: String?
        /// The ID of the VPC endpoint.
        public let vpcEndpointId: String?
        /// The ID of the Amazon Web Services account that owns the VPC endpoint.
        public let vpcEndpointOwner: String?
        /// The state of the VPC endpoint.
        public let vpcEndpointState: State?

        public init(creationTimestamp: Date? = nil, dnsEntries: [DnsEntry]? = nil, gatewayLoadBalancerArns: [String]? = nil, ipAddressType: IpAddressType? = nil, networkLoadBalancerArns: [String]? = nil, serviceId: String? = nil, tags: [Tag]? = nil, vpcEndpointConnectionId: String? = nil, vpcEndpointId: String? = nil, vpcEndpointOwner: String? = nil, vpcEndpointState: State? = nil) {
            self.creationTimestamp = creationTimestamp
            self.dnsEntries = dnsEntries
            self.gatewayLoadBalancerArns = gatewayLoadBalancerArns
            self.ipAddressType = ipAddressType
            self.networkLoadBalancerArns = networkLoadBalancerArns
            self.serviceId = serviceId
            self.tags = tags
            self.vpcEndpointConnectionId = vpcEndpointConnectionId
            self.vpcEndpointId = vpcEndpointId
            self.vpcEndpointOwner = vpcEndpointOwner
            self.vpcEndpointState = vpcEndpointState
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "creationTimestamp"
            case dnsEntries = "dnsEntrySet"
            case gatewayLoadBalancerArns = "gatewayLoadBalancerArnSet"
            case ipAddressType = "ipAddressType"
            case networkLoadBalancerArns = "networkLoadBalancerArnSet"
            case serviceId = "serviceId"
            case tags = "tagSet"
            case vpcEndpointConnectionId = "vpcEndpointConnectionId"
            case vpcEndpointId = "vpcEndpointId"
            case vpcEndpointOwner = "vpcEndpointOwner"
            case vpcEndpointState = "vpcEndpointState"
        }
    }

    public struct VpcIpv6CidrBlockAssociation: AWSDecodableShape {
        /// The association ID for the IPv6 CIDR block.
        public let associationId: String?
        /// The IPv6 CIDR block.
        public let ipv6CidrBlock: String?
        /// Information about the state of the CIDR block.
        public let ipv6CidrBlockState: VpcCidrBlockState?
        /// The ID of the IPv6 address pool from which the IPv6 CIDR block is allocated.
        public let ipv6Pool: String?
        /// The name of the unique set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses, for example, us-east-1-wl1-bos-wlz-1.
        public let networkBorderGroup: String?

        public init(associationId: String? = nil, ipv6CidrBlock: String? = nil, ipv6CidrBlockState: VpcCidrBlockState? = nil, ipv6Pool: String? = nil, networkBorderGroup: String? = nil) {
            self.associationId = associationId
            self.ipv6CidrBlock = ipv6CidrBlock
            self.ipv6CidrBlockState = ipv6CidrBlockState
            self.ipv6Pool = ipv6Pool
            self.networkBorderGroup = networkBorderGroup
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case ipv6CidrBlock = "ipv6CidrBlock"
            case ipv6CidrBlockState = "ipv6CidrBlockState"
            case ipv6Pool = "ipv6Pool"
            case networkBorderGroup = "networkBorderGroup"
        }
    }

    public struct VpcPeeringConnection: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the accepter VPC. CIDR block information is only returned when describing an active VPC peering connection.
        public let accepterVpcInfo: VpcPeeringConnectionVpcInfo?
        /// The time that an unaccepted VPC peering connection will expire.
        public let expirationTime: Date?
        /// Information about the requester VPC. CIDR block information is only returned when describing an active VPC peering connection.
        public let requesterVpcInfo: VpcPeeringConnectionVpcInfo?
        /// The status of the VPC peering connection.
        public let status: VpcPeeringConnectionStateReason?
        /// Any tags assigned to the resource.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String?

        public init(accepterVpcInfo: VpcPeeringConnectionVpcInfo? = nil, expirationTime: Date? = nil, requesterVpcInfo: VpcPeeringConnectionVpcInfo? = nil, status: VpcPeeringConnectionStateReason? = nil, tags: [Tag]? = nil, vpcPeeringConnectionId: String? = nil) {
            self.accepterVpcInfo = accepterVpcInfo
            self.expirationTime = expirationTime
            self.requesterVpcInfo = requesterVpcInfo
            self.status = status
            self.tags = tags
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case accepterVpcInfo = "accepterVpcInfo"
            case expirationTime = "expirationTime"
            case requesterVpcInfo = "requesterVpcInfo"
            case status = "status"
            case tags = "tagSet"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct VpcPeeringConnectionOptionsDescription: AWSDecodableShape {
        /// Indicates whether a local VPC can resolve public DNS hostnames to private IP addresses  when queried from instances in a peer VPC.
        public let allowDnsResolutionFromRemoteVpc: Bool?
        /// Deprecated.
        public let allowEgressFromLocalClassicLinkToRemoteVpc: Bool?
        /// Deprecated.
        public let allowEgressFromLocalVpcToRemoteClassicLink: Bool?

        public init(allowDnsResolutionFromRemoteVpc: Bool? = nil, allowEgressFromLocalClassicLinkToRemoteVpc: Bool? = nil, allowEgressFromLocalVpcToRemoteClassicLink: Bool? = nil) {
            self.allowDnsResolutionFromRemoteVpc = allowDnsResolutionFromRemoteVpc
            self.allowEgressFromLocalClassicLinkToRemoteVpc = allowEgressFromLocalClassicLinkToRemoteVpc
            self.allowEgressFromLocalVpcToRemoteClassicLink = allowEgressFromLocalVpcToRemoteClassicLink
        }

        private enum CodingKeys: String, CodingKey {
            case allowDnsResolutionFromRemoteVpc = "allowDnsResolutionFromRemoteVpc"
            case allowEgressFromLocalClassicLinkToRemoteVpc = "allowEgressFromLocalClassicLinkToRemoteVpc"
            case allowEgressFromLocalVpcToRemoteClassicLink = "allowEgressFromLocalVpcToRemoteClassicLink"
        }
    }

    public struct VpcPeeringConnectionStateReason: AWSDecodableShape {
        /// The status of the VPC peering connection.
        public let code: VpcPeeringConnectionStateReasonCode?
        /// A message that provides more information about the status, if applicable.
        public let message: String?

        public init(code: VpcPeeringConnectionStateReasonCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct VpcPeeringConnectionVpcInfo: AWSDecodableShape {
        public struct _CidrBlockSetEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv6CidrBlockSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IPv4 CIDR block for the VPC.
        public let cidrBlock: String?
        /// Information about the IPv4 CIDR blocks for the VPC.
        @OptionalCustomCoding<EC2ArrayCoder<_CidrBlockSetEncoding, CidrBlock>>
        public var cidrBlockSet: [CidrBlock]?
        /// The IPv6 CIDR block for the VPC.
        @OptionalCustomCoding<EC2ArrayCoder<_Ipv6CidrBlockSetEncoding, Ipv6CidrBlock>>
        public var ipv6CidrBlockSet: [Ipv6CidrBlock]?
        /// The ID of the Amazon Web Services account that owns the VPC.
        public let ownerId: String?
        /// Information about the VPC peering connection options for the accepter or requester VPC.
        public let peeringOptions: VpcPeeringConnectionOptionsDescription?
        /// The Region in which the VPC is located.
        public let region: String?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(cidrBlock: String? = nil, cidrBlockSet: [CidrBlock]? = nil, ipv6CidrBlockSet: [Ipv6CidrBlock]? = nil, ownerId: String? = nil, peeringOptions: VpcPeeringConnectionOptionsDescription? = nil, region: String? = nil, vpcId: String? = nil) {
            self.cidrBlock = cidrBlock
            self.cidrBlockSet = cidrBlockSet
            self.ipv6CidrBlockSet = ipv6CidrBlockSet
            self.ownerId = ownerId
            self.peeringOptions = peeringOptions
            self.region = region
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlock = "cidrBlock"
            case cidrBlockSet = "cidrBlockSet"
            case ipv6CidrBlockSet = "ipv6CidrBlockSet"
            case ownerId = "ownerId"
            case peeringOptions = "peeringOptions"
            case region = "region"
            case vpcId = "vpcId"
        }
    }

    public struct VpnConnection: AWSDecodableShape {
        public struct _RoutesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _VgwTelemetryEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The category of the VPN connection. A value of VPN indicates an Amazon Web Services VPN connection. A value of VPN-Classic indicates an Amazon Web Services Classic VPN connection.
        public let category: String?
        /// The ARN of the core network.
        public let coreNetworkArn: String?
        /// The ARN of the core network attachment.
        public let coreNetworkAttachmentArn: String?
        /// The configuration information for the VPN connection's customer gateway (in the native XML format). This element is always present in the CreateVpnConnection response; however, it's present in the DescribeVpnConnections response only if the VPN connection is in the pending or available state.
        public let customerGatewayConfiguration: String?
        /// The ID of the customer gateway at your end of the VPN connection.
        public let customerGatewayId: String?
        /// The current state of the gateway association.
        public let gatewayAssociationState: GatewayAssociationState?
        /// The VPN connection options.
        public let options: VpnConnectionOptions?
        /// The static routes associated with the VPN connection.
        @OptionalCustomCoding<EC2ArrayCoder<_RoutesEncoding, VpnStaticRoute>>
        public var routes: [VpnStaticRoute]?
        /// The current state of the VPN connection.
        public let state: VpnState?
        /// Any tags assigned to the VPN connection.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the transit gateway associated with the VPN connection.
        public let transitGatewayId: String?
        /// The type of VPN connection.
        public let type: GatewayType?
        /// Information about the VPN tunnel.
        @OptionalCustomCoding<EC2ArrayCoder<_VgwTelemetryEncoding, VgwTelemetry>>
        public var vgwTelemetry: [VgwTelemetry]?
        /// The ID of the VPN connection.
        public let vpnConnectionId: String?
        /// The ID of the virtual private gateway at the Amazon Web Services side of the VPN connection.
        public let vpnGatewayId: String?

        public init(category: String? = nil, coreNetworkArn: String? = nil, coreNetworkAttachmentArn: String? = nil, customerGatewayConfiguration: String? = nil, customerGatewayId: String? = nil, gatewayAssociationState: GatewayAssociationState? = nil, options: VpnConnectionOptions? = nil, routes: [VpnStaticRoute]? = nil, state: VpnState? = nil, tags: [Tag]? = nil, transitGatewayId: String? = nil, type: GatewayType? = nil, vgwTelemetry: [VgwTelemetry]? = nil, vpnConnectionId: String? = nil, vpnGatewayId: String? = nil) {
            self.category = category
            self.coreNetworkArn = coreNetworkArn
            self.coreNetworkAttachmentArn = coreNetworkAttachmentArn
            self.customerGatewayConfiguration = customerGatewayConfiguration
            self.customerGatewayId = customerGatewayId
            self.gatewayAssociationState = gatewayAssociationState
            self.options = options
            self.routes = routes
            self.state = state
            self.tags = tags
            self.transitGatewayId = transitGatewayId
            self.type = type
            self.vgwTelemetry = vgwTelemetry
            self.vpnConnectionId = vpnConnectionId
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case category = "category"
            case coreNetworkArn = "coreNetworkArn"
            case coreNetworkAttachmentArn = "coreNetworkAttachmentArn"
            case customerGatewayConfiguration = "customerGatewayConfiguration"
            case customerGatewayId = "customerGatewayId"
            case gatewayAssociationState = "gatewayAssociationState"
            case options = "options"
            case routes = "routes"
            case state = "state"
            case tags = "tagSet"
            case transitGatewayId = "transitGatewayId"
            case type = "type"
            case vgwTelemetry = "vgwTelemetry"
            case vpnConnectionId = "vpnConnectionId"
            case vpnGatewayId = "vpnGatewayId"
        }
    }

    public struct VpnConnectionDeviceType: AWSDecodableShape {
        /// Customer gateway device platform.
        public let platform: String?
        /// Customer gateway device software version.
        public let software: String?
        /// Customer gateway device vendor.
        public let vendor: String?
        /// Customer gateway device identifier.
        public let vpnConnectionDeviceTypeId: String?

        public init(platform: String? = nil, software: String? = nil, vendor: String? = nil, vpnConnectionDeviceTypeId: String? = nil) {
            self.platform = platform
            self.software = software
            self.vendor = vendor
            self.vpnConnectionDeviceTypeId = vpnConnectionDeviceTypeId
        }

        private enum CodingKeys: String, CodingKey {
            case platform = "platform"
            case software = "software"
            case vendor = "vendor"
            case vpnConnectionDeviceTypeId = "vpnConnectionDeviceTypeId"
        }
    }

    public struct VpnConnectionOptions: AWSDecodableShape {
        public struct _TunnelOptionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether acceleration is enabled for the VPN connection.
        public let enableAcceleration: Bool?
        /// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
        public let localIpv4NetworkCidr: String?
        /// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
        public let localIpv6NetworkCidr: String?
        /// The type of IPv4 address assigned to the outside interface of the customer gateway. Valid values: PrivateIpv4 | PublicIpv4  Default: PublicIpv4
        public let outsideIpAddressType: String?
        /// The IPv4 CIDR on the Amazon Web Services side of the VPN connection.
        public let remoteIpv4NetworkCidr: String?
        /// The IPv6 CIDR on the Amazon Web Services side of the VPN connection.
        public let remoteIpv6NetworkCidr: String?
        /// Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support BGP.
        public let staticRoutesOnly: Bool?
        /// The transit gateway attachment ID in use for the VPN tunnel.
        public let transportTransitGatewayAttachmentId: String?
        /// Indicates whether the VPN tunnels process IPv4 or IPv6 traffic.
        public let tunnelInsideIpVersion: TunnelInsideIpVersion?
        /// Indicates the VPN tunnel options.
        @OptionalCustomCoding<EC2ArrayCoder<_TunnelOptionsEncoding, TunnelOption>>
        public var tunnelOptions: [TunnelOption]?

        public init(enableAcceleration: Bool? = nil, localIpv4NetworkCidr: String? = nil, localIpv6NetworkCidr: String? = nil, outsideIpAddressType: String? = nil, remoteIpv4NetworkCidr: String? = nil, remoteIpv6NetworkCidr: String? = nil, staticRoutesOnly: Bool? = nil, transportTransitGatewayAttachmentId: String? = nil, tunnelInsideIpVersion: TunnelInsideIpVersion? = nil, tunnelOptions: [TunnelOption]? = nil) {
            self.enableAcceleration = enableAcceleration
            self.localIpv4NetworkCidr = localIpv4NetworkCidr
            self.localIpv6NetworkCidr = localIpv6NetworkCidr
            self.outsideIpAddressType = outsideIpAddressType
            self.remoteIpv4NetworkCidr = remoteIpv4NetworkCidr
            self.remoteIpv6NetworkCidr = remoteIpv6NetworkCidr
            self.staticRoutesOnly = staticRoutesOnly
            self.transportTransitGatewayAttachmentId = transportTransitGatewayAttachmentId
            self.tunnelInsideIpVersion = tunnelInsideIpVersion
            self.tunnelOptions = tunnelOptions
        }

        private enum CodingKeys: String, CodingKey {
            case enableAcceleration = "enableAcceleration"
            case localIpv4NetworkCidr = "localIpv4NetworkCidr"
            case localIpv6NetworkCidr = "localIpv6NetworkCidr"
            case outsideIpAddressType = "outsideIpAddressType"
            case remoteIpv4NetworkCidr = "remoteIpv4NetworkCidr"
            case remoteIpv6NetworkCidr = "remoteIpv6NetworkCidr"
            case staticRoutesOnly = "staticRoutesOnly"
            case transportTransitGatewayAttachmentId = "transportTransitGatewayAttachmentId"
            case tunnelInsideIpVersion = "tunnelInsideIpVersion"
            case tunnelOptions = "tunnelOptionSet"
        }
    }

    public struct VpnConnectionOptionsSpecification: AWSEncodableShape {
        /// Indicate whether to enable acceleration for the VPN connection. Default: false
        public let enableAcceleration: Bool?
        /// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection. Default: 0.0.0.0/0
        public let localIpv4NetworkCidr: String?
        /// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection. Default: ::/0
        public let localIpv6NetworkCidr: String?
        /// The type of IPv4 address assigned to the outside interface of the customer gateway device. Valid values: PrivateIpv4 | PublicIpv4  Default: PublicIpv4
        public let outsideIpAddressType: String?
        /// The IPv4 CIDR on the Amazon Web Services side of the VPN connection. Default: 0.0.0.0/0
        public let remoteIpv4NetworkCidr: String?
        /// The IPv6 CIDR on the Amazon Web Services side of the VPN connection. Default: ::/0
        public let remoteIpv6NetworkCidr: String?
        /// Indicate whether the VPN connection uses static routes only. If you are creating a VPN connection for a device that does not support BGP, you must specify true. Use CreateVpnConnectionRoute to create a static route. Default: false
        public let staticRoutesOnly: Bool?
        /// The transit gateway attachment ID to use for the VPN tunnel. Required if OutsideIpAddressType is set to PrivateIpv4.
        public let transportTransitGatewayAttachmentId: String?
        /// Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Default: ipv4
        public let tunnelInsideIpVersion: TunnelInsideIpVersion?
        /// The tunnel options for the VPN connection.
        @OptionalCustomCoding<EC2StandardArrayCoder<VpnTunnelOptionsSpecification>>
        public var tunnelOptions: [VpnTunnelOptionsSpecification]?

        public init(enableAcceleration: Bool? = nil, localIpv4NetworkCidr: String? = nil, localIpv6NetworkCidr: String? = nil, outsideIpAddressType: String? = nil, remoteIpv4NetworkCidr: String? = nil, remoteIpv6NetworkCidr: String? = nil, staticRoutesOnly: Bool? = nil, transportTransitGatewayAttachmentId: String? = nil, tunnelInsideIpVersion: TunnelInsideIpVersion? = nil, tunnelOptions: [VpnTunnelOptionsSpecification]? = nil) {
            self.enableAcceleration = enableAcceleration
            self.localIpv4NetworkCidr = localIpv4NetworkCidr
            self.localIpv6NetworkCidr = localIpv6NetworkCidr
            self.outsideIpAddressType = outsideIpAddressType
            self.remoteIpv4NetworkCidr = remoteIpv4NetworkCidr
            self.remoteIpv6NetworkCidr = remoteIpv6NetworkCidr
            self.staticRoutesOnly = staticRoutesOnly
            self.transportTransitGatewayAttachmentId = transportTransitGatewayAttachmentId
            self.tunnelInsideIpVersion = tunnelInsideIpVersion
            self.tunnelOptions = tunnelOptions
        }

        private enum CodingKeys: String, CodingKey {
            case enableAcceleration = "EnableAcceleration"
            case localIpv4NetworkCidr = "LocalIpv4NetworkCidr"
            case localIpv6NetworkCidr = "LocalIpv6NetworkCidr"
            case outsideIpAddressType = "OutsideIpAddressType"
            case remoteIpv4NetworkCidr = "RemoteIpv4NetworkCidr"
            case remoteIpv6NetworkCidr = "RemoteIpv6NetworkCidr"
            case staticRoutesOnly = "staticRoutesOnly"
            case transportTransitGatewayAttachmentId = "TransportTransitGatewayAttachmentId"
            case tunnelInsideIpVersion = "TunnelInsideIpVersion"
            case tunnelOptions = "TunnelOptions"
        }
    }

    public struct VpnGateway: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _VpcAttachmentsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The private Autonomous System Number (ASN) for the Amazon side of a BGP session.
        public let amazonSideAsn: Int64?
        /// The Availability Zone where the virtual private gateway was created, if applicable. This field may be empty or not returned.
        public let availabilityZone: String?
        /// The current state of the virtual private gateway.
        public let state: VpnState?
        /// Any tags assigned to the virtual private gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The type of VPN connection the virtual private gateway supports.
        public let type: GatewayType?
        /// Any VPCs attached to the virtual private gateway.
        @OptionalCustomCoding<EC2ArrayCoder<_VpcAttachmentsEncoding, VpcAttachment>>
        public var vpcAttachments: [VpcAttachment]?
        /// The ID of the virtual private gateway.
        public let vpnGatewayId: String?

        public init(amazonSideAsn: Int64? = nil, availabilityZone: String? = nil, state: VpnState? = nil, tags: [Tag]? = nil, type: GatewayType? = nil, vpcAttachments: [VpcAttachment]? = nil, vpnGatewayId: String? = nil) {
            self.amazonSideAsn = amazonSideAsn
            self.availabilityZone = availabilityZone
            self.state = state
            self.tags = tags
            self.type = type
            self.vpcAttachments = vpcAttachments
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case amazonSideAsn = "amazonSideAsn"
            case availabilityZone = "availabilityZone"
            case state = "state"
            case tags = "tagSet"
            case type = "type"
            case vpcAttachments = "attachments"
            case vpnGatewayId = "vpnGatewayId"
        }
    }

    public struct VpnStaticRoute: AWSDecodableShape {
        /// The CIDR block associated with the local subnet of the customer data center.
        public let destinationCidrBlock: String?
        /// Indicates how the routes were provided.
        public let source: VpnStaticRouteSource?
        /// The current state of the static route.
        public let state: VpnState?

        public init(destinationCidrBlock: String? = nil, source: VpnStaticRouteSource? = nil, state: VpnState? = nil) {
            self.destinationCidrBlock = destinationCidrBlock
            self.source = source
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "destinationCidrBlock"
            case source = "source"
            case state = "state"
        }
    }

    public struct VpnTunnelLogOptions: AWSDecodableShape {
        /// Options for sending VPN tunnel logs to CloudWatch.
        public let cloudWatchLogOptions: CloudWatchLogOptions?

        public init(cloudWatchLogOptions: CloudWatchLogOptions? = nil) {
            self.cloudWatchLogOptions = cloudWatchLogOptions
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLogOptions = "cloudWatchLogOptions"
        }
    }

    public struct VpnTunnelLogOptionsSpecification: AWSEncodableShape {
        /// Options for sending VPN tunnel logs to CloudWatch.
        public let cloudWatchLogOptions: CloudWatchLogOptionsSpecification?

        public init(cloudWatchLogOptions: CloudWatchLogOptionsSpecification? = nil) {
            self.cloudWatchLogOptions = cloudWatchLogOptions
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLogOptions = "CloudWatchLogOptions"
        }
    }

    public struct VpnTunnelOptionsSpecification: AWSEncodableShape {
        public struct _IKEVersionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase1DHGroupNumbersEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase1EncryptionAlgorithmsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase1IntegrityAlgorithmsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase2DHGroupNumbersEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase2EncryptionAlgorithmsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase2IntegrityAlgorithmsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The action to take after DPD timeout occurs. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid Values: clear | none | restart  Default: clear
        public let dpdTimeoutAction: String?
        /// The number of seconds after which a DPD timeout occurs. Constraints: A value greater than or equal to 30. Default: 30
        public let dpdTimeoutSeconds: Int?
        /// Turn on or off tunnel endpoint lifecycle control feature.
        public let enableTunnelLifecycleControl: Bool?
        /// The IKE versions that are permitted for the VPN tunnel. Valid values: ikev1 | ikev2
        @OptionalCustomCoding<EC2ArrayCoder<_IKEVersionsEncoding, IKEVersionsRequestListValue>>
        public var ikeVersions: [IKEVersionsRequestListValue]?
        /// Options for logging VPN tunnel activity.
        public let logOptions: VpnTunnelLogOptionsSpecification?
        /// One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: 2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24
        @OptionalCustomCoding<EC2ArrayCoder<_Phase1DHGroupNumbersEncoding, Phase1DHGroupNumbersRequestListValue>>
        public var phase1DHGroupNumbers: [Phase1DHGroupNumbersRequestListValue]?
        /// One or more encryption algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16
        @OptionalCustomCoding<EC2ArrayCoder<_Phase1EncryptionAlgorithmsEncoding, Phase1EncryptionAlgorithmsRequestListValue>>
        public var phase1EncryptionAlgorithms: [Phase1EncryptionAlgorithmsRequestListValue]?
        /// One or more integrity algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: SHA1 | SHA2-256 | SHA2-384 | SHA2-512
        @OptionalCustomCoding<EC2ArrayCoder<_Phase1IntegrityAlgorithmsEncoding, Phase1IntegrityAlgorithmsRequestListValue>>
        public var phase1IntegrityAlgorithms: [Phase1IntegrityAlgorithmsRequestListValue]?
        /// The lifetime for phase 1 of the IKE negotiation, in seconds. Constraints: A value between 900 and 28,800. Default: 28800
        public let phase1LifetimeSeconds: Int?
        /// One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: 2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24
        @OptionalCustomCoding<EC2ArrayCoder<_Phase2DHGroupNumbersEncoding, Phase2DHGroupNumbersRequestListValue>>
        public var phase2DHGroupNumbers: [Phase2DHGroupNumbersRequestListValue]?
        /// One or more encryption algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16
        @OptionalCustomCoding<EC2ArrayCoder<_Phase2EncryptionAlgorithmsEncoding, Phase2EncryptionAlgorithmsRequestListValue>>
        public var phase2EncryptionAlgorithms: [Phase2EncryptionAlgorithmsRequestListValue]?
        /// One or more integrity algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: SHA1 | SHA2-256 | SHA2-384 | SHA2-512
        @OptionalCustomCoding<EC2ArrayCoder<_Phase2IntegrityAlgorithmsEncoding, Phase2IntegrityAlgorithmsRequestListValue>>
        public var phase2IntegrityAlgorithms: [Phase2IntegrityAlgorithmsRequestListValue]?
        /// The lifetime for phase 2 of the IKE negotiation, in seconds. Constraints: A value between 900 and 3,600. The value must be less than the value for Phase1LifetimeSeconds. Default: 3600
        public let phase2LifetimeSeconds: Int?
        /// The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and customer gateway. Constraints: Allowed characters are alphanumeric characters, periods (.), and underscores (_). Must be between 8 and 64 characters in length and cannot start with zero (0).
        public let preSharedKey: String?
        /// The percentage of the rekey window (determined by RekeyMarginTimeSeconds) during which the rekey time is randomly selected. Constraints: A value between 0 and 100. Default: 100
        public let rekeyFuzzPercentage: Int?
        /// The margin time, in seconds, before the phase 2 lifetime expires, during which the Amazon Web Services side of the VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for RekeyFuzzPercentage. Constraints: A value between 60 and half of Phase2LifetimeSeconds. Default: 270
        public let rekeyMarginTimeSeconds: Int?
        /// The number of packets in an IKE replay window. Constraints: A value between 64 and 2048. Default: 1024
        public let replayWindowSize: Int?
        /// The action to take when the establishing the tunnel for the VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for Amazon Web Services to initiate the IKE negotiation. Valid Values: add | start  Default: add
        public let startupAction: String?
        /// The range of inside IPv4 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same virtual private gateway.  Constraints: A size /30 CIDR block from the 169.254.0.0/16 range. The following CIDR blocks are reserved and cannot be used:    169.254.0.0/30     169.254.1.0/30     169.254.2.0/30     169.254.3.0/30     169.254.4.0/30     169.254.5.0/30     169.254.169.252/30
        public let tunnelInsideCidr: String?
        /// The range of inside IPv6 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same transit gateway. Constraints: A size /126 CIDR block from the local fd00::/8 range.
        public let tunnelInsideIpv6Cidr: String?

        public init(dpdTimeoutAction: String? = nil, dpdTimeoutSeconds: Int? = nil, enableTunnelLifecycleControl: Bool? = nil, ikeVersions: [IKEVersionsRequestListValue]? = nil, logOptions: VpnTunnelLogOptionsSpecification? = nil, phase1DHGroupNumbers: [Phase1DHGroupNumbersRequestListValue]? = nil, phase1EncryptionAlgorithms: [Phase1EncryptionAlgorithmsRequestListValue]? = nil, phase1IntegrityAlgorithms: [Phase1IntegrityAlgorithmsRequestListValue]? = nil, phase1LifetimeSeconds: Int? = nil, phase2DHGroupNumbers: [Phase2DHGroupNumbersRequestListValue]? = nil, phase2EncryptionAlgorithms: [Phase2EncryptionAlgorithmsRequestListValue]? = nil, phase2IntegrityAlgorithms: [Phase2IntegrityAlgorithmsRequestListValue]? = nil, phase2LifetimeSeconds: Int? = nil, preSharedKey: String? = nil, rekeyFuzzPercentage: Int? = nil, rekeyMarginTimeSeconds: Int? = nil, replayWindowSize: Int? = nil, startupAction: String? = nil, tunnelInsideCidr: String? = nil, tunnelInsideIpv6Cidr: String? = nil) {
            self.dpdTimeoutAction = dpdTimeoutAction
            self.dpdTimeoutSeconds = dpdTimeoutSeconds
            self.enableTunnelLifecycleControl = enableTunnelLifecycleControl
            self.ikeVersions = ikeVersions
            self.logOptions = logOptions
            self.phase1DHGroupNumbers = phase1DHGroupNumbers
            self.phase1EncryptionAlgorithms = phase1EncryptionAlgorithms
            self.phase1IntegrityAlgorithms = phase1IntegrityAlgorithms
            self.phase1LifetimeSeconds = phase1LifetimeSeconds
            self.phase2DHGroupNumbers = phase2DHGroupNumbers
            self.phase2EncryptionAlgorithms = phase2EncryptionAlgorithms
            self.phase2IntegrityAlgorithms = phase2IntegrityAlgorithms
            self.phase2LifetimeSeconds = phase2LifetimeSeconds
            self.preSharedKey = preSharedKey
            self.rekeyFuzzPercentage = rekeyFuzzPercentage
            self.rekeyMarginTimeSeconds = rekeyMarginTimeSeconds
            self.replayWindowSize = replayWindowSize
            self.startupAction = startupAction
            self.tunnelInsideCidr = tunnelInsideCidr
            self.tunnelInsideIpv6Cidr = tunnelInsideIpv6Cidr
        }

        private enum CodingKeys: String, CodingKey {
            case dpdTimeoutAction = "DPDTimeoutAction"
            case dpdTimeoutSeconds = "DPDTimeoutSeconds"
            case enableTunnelLifecycleControl = "EnableTunnelLifecycleControl"
            case ikeVersions = "IKEVersion"
            case logOptions = "LogOptions"
            case phase1DHGroupNumbers = "Phase1DHGroupNumber"
            case phase1EncryptionAlgorithms = "Phase1EncryptionAlgorithm"
            case phase1IntegrityAlgorithms = "Phase1IntegrityAlgorithm"
            case phase1LifetimeSeconds = "Phase1LifetimeSeconds"
            case phase2DHGroupNumbers = "Phase2DHGroupNumber"
            case phase2EncryptionAlgorithms = "Phase2EncryptionAlgorithm"
            case phase2IntegrityAlgorithms = "Phase2IntegrityAlgorithm"
            case phase2LifetimeSeconds = "Phase2LifetimeSeconds"
            case preSharedKey = "PreSharedKey"
            case rekeyFuzzPercentage = "RekeyFuzzPercentage"
            case rekeyMarginTimeSeconds = "RekeyMarginTimeSeconds"
            case replayWindowSize = "ReplayWindowSize"
            case startupAction = "StartupAction"
            case tunnelInsideCidr = "TunnelInsideCidr"
            case tunnelInsideIpv6Cidr = "TunnelInsideIpv6Cidr"
        }
    }

    public struct WithdrawByoipCidrRequest: AWSEncodableShape {
        /// The address range, in CIDR notation.
        public let cidr: String?
        /// Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(cidr: String? = nil, dryRun: Bool? = nil) {
            self.cidr = cidr
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case dryRun = "DryRun"
        }
    }

    public struct WithdrawByoipCidrResult: AWSDecodableShape {
        /// Information about the address pool.
        public let byoipCidr: ByoipCidr?

        public init(byoipCidr: ByoipCidr? = nil) {
            self.byoipCidr = byoipCidr
        }

        private enum CodingKeys: String, CodingKey {
            case byoipCidr = "byoipCidr"
        }
    }
}
