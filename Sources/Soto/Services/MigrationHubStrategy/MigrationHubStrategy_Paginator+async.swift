//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if compiler(>=5.5) && canImport(_Concurrency)

import SotoCore

// MARK: Paginators

@available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
extension MigrationHubStrategy {
    ///   Retrieves detailed information about a specified server.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func getServerDetailsPaginator(
        _ input: GetServerDetailsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<GetServerDetailsRequest, GetServerDetailsResponse> {
        return .init(
            input: input,
            command: getServerDetails,
            inputKey: \GetServerDetailsRequest.nextToken,
            outputKey: \GetServerDetailsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///   Retrieves a list of all the application components (processes).
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listApplicationComponentsPaginator(
        _ input: ListApplicationComponentsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListApplicationComponentsRequest, ListApplicationComponentsResponse> {
        return .init(
            input: input,
            command: listApplicationComponents,
            inputKey: \ListApplicationComponentsRequest.nextToken,
            outputKey: \ListApplicationComponentsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///   Retrieves a list of all the installed collectors.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listCollectorsPaginator(
        _ input: ListCollectorsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListCollectorsRequest, ListCollectorsResponse> {
        return .init(
            input: input,
            command: listCollectors,
            inputKey: \ListCollectorsRequest.nextToken,
            outputKey: \ListCollectorsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///   Retrieves a list of all the imports performed.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listImportFileTaskPaginator(
        _ input: ListImportFileTaskRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListImportFileTaskRequest, ListImportFileTaskResponse> {
        return .init(
            input: input,
            command: listImportFileTask,
            inputKey: \ListImportFileTaskRequest.nextToken,
            outputKey: \ListImportFileTaskResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///   Returns a list of all the servers.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listServersPaginator(
        _ input: ListServersRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListServersRequest, ListServersResponse> {
        return .init(
            input: input,
            command: listServers,
            inputKey: \ListServersRequest.nextToken,
            outputKey: \ListServersResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }
}

#endif // compiler(>=5.5) && canImport(_Concurrency)
