//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS MigrationHubStrategy service.
///
/// Migration Hub Strategy Recommendations This API reference provides descriptions, syntax, and other details about each of the actions and data types for Migration Hub Strategy Recommendations (Strategy Recommendations). The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using. For more information, see AWS SDKs.
public struct MigrationHubStrategy: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the MigrationHubStrategy client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "MigrationHubStrategy",
            serviceIdentifier: "migrationhub-strategy",
            serviceProtocol: .restjson,
            apiVersion: "2020-02-19",
            endpoint: endpoint,
            errorType: MigrationHubStrategyErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    ///  Retrieves details about an application component.
    @Sendable
    public func getApplicationComponentDetails(_ input: GetApplicationComponentDetailsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetApplicationComponentDetailsResponse {
        return try await self.client.execute(
            operation: "GetApplicationComponentDetails", 
            path: "/get-applicationcomponent-details/{applicationComponentId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Retrieves a list of all the recommended strategies and tools for an application component running on a server.
    @Sendable
    public func getApplicationComponentStrategies(_ input: GetApplicationComponentStrategiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetApplicationComponentStrategiesResponse {
        return try await self.client.execute(
            operation: "GetApplicationComponentStrategies", 
            path: "/get-applicationcomponent-strategies/{applicationComponentId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Retrieves the status of an on-going assessment.
    @Sendable
    public func getAssessment(_ input: GetAssessmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAssessmentResponse {
        return try await self.client.execute(
            operation: "GetAssessment", 
            path: "/get-assessment/{id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Retrieves the details about a specific import task.
    @Sendable
    public func getImportFileTask(_ input: GetImportFileTaskRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetImportFileTaskResponse {
        return try await self.client.execute(
            operation: "GetImportFileTask", 
            path: "/get-import-file-task/{id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieve the latest ID of a specific assessment task.
    @Sendable
    public func getLatestAssessmentId(_ input: GetLatestAssessmentIdRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLatestAssessmentIdResponse {
        return try await self.client.execute(
            operation: "GetLatestAssessmentId", 
            path: "/get-latest-assessment-id", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Retrieves your migration and modernization preferences.
    @Sendable
    public func getPortfolioPreferences(_ input: GetPortfolioPreferencesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPortfolioPreferencesResponse {
        return try await self.client.execute(
            operation: "GetPortfolioPreferences", 
            path: "/get-portfolio-preferences", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Retrieves overall summary including the number of servers to rehost and the overall number of anti-patterns.
    @Sendable
    public func getPortfolioSummary(_ input: GetPortfolioSummaryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPortfolioSummaryResponse {
        return try await self.client.execute(
            operation: "GetPortfolioSummary", 
            path: "/get-portfolio-summary", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Retrieves detailed information about the specified recommendation report.
    @Sendable
    public func getRecommendationReportDetails(_ input: GetRecommendationReportDetailsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRecommendationReportDetailsResponse {
        return try await self.client.execute(
            operation: "GetRecommendationReportDetails", 
            path: "/get-recommendation-report-details/{id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Retrieves detailed information about a specified server.
    @Sendable
    public func getServerDetails(_ input: GetServerDetailsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetServerDetailsResponse {
        return try await self.client.execute(
            operation: "GetServerDetails", 
            path: "/get-server-details/{serverId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Retrieves recommended strategies and tools for the specified server.
    @Sendable
    public func getServerStrategies(_ input: GetServerStrategiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetServerStrategiesResponse {
        return try await self.client.execute(
            operation: "GetServerStrategies", 
            path: "/get-server-strategies/{serverId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Retrieves a list of all the application components (processes).
    @Sendable
    public func listApplicationComponents(_ input: ListApplicationComponentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListApplicationComponentsResponse {
        return try await self.client.execute(
            operation: "ListApplicationComponents", 
            path: "/list-applicationcomponents", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Retrieves a list of all the installed collectors.
    @Sendable
    public func listCollectors(_ input: ListCollectorsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCollectorsResponse {
        return try await self.client.execute(
            operation: "ListCollectors", 
            path: "/list-collectors", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Retrieves a list of all the imports performed.
    @Sendable
    public func listImportFileTask(_ input: ListImportFileTaskRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListImportFileTaskResponse {
        return try await self.client.execute(
            operation: "ListImportFileTask", 
            path: "/list-import-file-task", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns a list of all the servers.
    @Sendable
    public func listServers(_ input: ListServersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListServersResponse {
        return try await self.client.execute(
            operation: "ListServers", 
            path: "/list-servers", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Saves the specified migration and modernization preferences.
    @Sendable
    public func putPortfolioPreferences(_ input: PutPortfolioPreferencesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutPortfolioPreferencesResponse {
        return try await self.client.execute(
            operation: "PutPortfolioPreferences", 
            path: "/put-portfolio-preferences", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Starts the assessment of an on-premises environment.
    @Sendable
    public func startAssessment(_ input: StartAssessmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartAssessmentResponse {
        return try await self.client.execute(
            operation: "StartAssessment", 
            path: "/start-assessment", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Starts a file import.
    @Sendable
    public func startImportFileTask(_ input: StartImportFileTaskRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartImportFileTaskResponse {
        return try await self.client.execute(
            operation: "StartImportFileTask", 
            path: "/start-import-file-task", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Starts generating a recommendation report.
    @Sendable
    public func startRecommendationReportGeneration(_ input: StartRecommendationReportGenerationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartRecommendationReportGenerationResponse {
        return try await self.client.execute(
            operation: "StartRecommendationReportGeneration", 
            path: "/start-recommendation-report-generation", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Stops the assessment of an on-premises environment.
    @Sendable
    public func stopAssessment(_ input: StopAssessmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopAssessmentResponse {
        return try await self.client.execute(
            operation: "StopAssessment", 
            path: "/stop-assessment", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Updates the configuration of an application component.
    @Sendable
    public func updateApplicationComponentConfig(_ input: UpdateApplicationComponentConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateApplicationComponentConfigResponse {
        return try await self.client.execute(
            operation: "UpdateApplicationComponentConfig", 
            path: "/update-applicationcomponent-config/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Updates the configuration of the specified server.
    @Sendable
    public func updateServerConfig(_ input: UpdateServerConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateServerConfigResponse {
        return try await self.client.execute(
            operation: "UpdateServerConfig", 
            path: "/update-server-config/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension MigrationHubStrategy {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: MigrationHubStrategy, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension MigrationHubStrategy {
    ///  Retrieves detailed information about a specified server.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getServerDetailsPaginator(
        _ input: GetServerDetailsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetServerDetailsRequest, GetServerDetailsResponse> {
        return .init(
            input: input,
            command: self.getServerDetails,
            inputKey: \GetServerDetailsRequest.nextToken,
            outputKey: \GetServerDetailsResponse.nextToken,
            logger: logger
        )
    }

    ///  Retrieves a list of all the application components (processes).
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listApplicationComponentsPaginator(
        _ input: ListApplicationComponentsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListApplicationComponentsRequest, ListApplicationComponentsResponse> {
        return .init(
            input: input,
            command: self.listApplicationComponents,
            inputKey: \ListApplicationComponentsRequest.nextToken,
            outputKey: \ListApplicationComponentsResponse.nextToken,
            logger: logger
        )
    }

    ///  Retrieves a list of all the installed collectors.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listCollectorsPaginator(
        _ input: ListCollectorsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCollectorsRequest, ListCollectorsResponse> {
        return .init(
            input: input,
            command: self.listCollectors,
            inputKey: \ListCollectorsRequest.nextToken,
            outputKey: \ListCollectorsResponse.nextToken,
            logger: logger
        )
    }

    ///  Retrieves a list of all the imports performed.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listImportFileTaskPaginator(
        _ input: ListImportFileTaskRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListImportFileTaskRequest, ListImportFileTaskResponse> {
        return .init(
            input: input,
            command: self.listImportFileTask,
            inputKey: \ListImportFileTaskRequest.nextToken,
            outputKey: \ListImportFileTaskResponse.nextToken,
            logger: logger
        )
    }

    ///  Returns a list of all the servers.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listServersPaginator(
        _ input: ListServersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListServersRequest, ListServersResponse> {
        return .init(
            input: input,
            command: self.listServers,
            inputKey: \ListServersRequest.nextToken,
            outputKey: \ListServersResponse.nextToken,
            logger: logger
        )
    }
}

extension MigrationHubStrategy.GetServerDetailsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MigrationHubStrategy.GetServerDetailsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            serverId: self.serverId
        )
    }
}

extension MigrationHubStrategy.ListApplicationComponentsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MigrationHubStrategy.ListApplicationComponentsRequest {
        return .init(
            applicationComponentCriteria: self.applicationComponentCriteria,
            filterValue: self.filterValue,
            groupIdFilter: self.groupIdFilter,
            maxResults: self.maxResults,
            nextToken: token,
            sort: self.sort
        )
    }
}

extension MigrationHubStrategy.ListCollectorsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MigrationHubStrategy.ListCollectorsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension MigrationHubStrategy.ListImportFileTaskRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MigrationHubStrategy.ListImportFileTaskRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension MigrationHubStrategy.ListServersRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MigrationHubStrategy.ListServersRequest {
        return .init(
            filterValue: self.filterValue,
            groupIdFilter: self.groupIdFilter,
            maxResults: self.maxResults,
            nextToken: token,
            serverCriteria: self.serverCriteria,
            sort: self.sort
        )
    }
}
