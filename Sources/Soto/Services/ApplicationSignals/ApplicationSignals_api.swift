//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS ApplicationSignals service.
///
/// Use CloudWatch Application Signals for comprehensive observability of your cloud-based applications.  It enables real-time service health dashboards and helps you track long-term performance trends against your business goals.  The application-centric view provides you with unified visibility across your applications, services, and  dependencies, so you can proactively monitor and efficiently triage any issues that may arise,  ensuring optimal customer experience. Application Signals provides the following benefits:   Automatically collect metrics and traces from your applications, and display key metrics such as call volume, availability, latency, faults, and errors.    Create and monitor service level objectives (SLOs).    See a map of your application topology that Application Signals automatically discovers, that gives you a visual representation of your applications, dependencies, and their connectivity.   Application Signals works with CloudWatch RUM, CloudWatch Synthetics canaries, and Amazon Web Services Service Catalog AppRegistry, to display your client pages, Synthetics canaries,  and application names within dashboards and maps.
public struct ApplicationSignals: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the ApplicationSignals client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "ApplicationSignals",
            serviceIdentifier: "application-signals",
            serviceProtocol: .restjson,
            apiVersion: "2024-04-15",
            endpoint: endpoint,
            errorType: ApplicationSignalsErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Use this operation to retrieve one or more service level objective (SLO) budget reports. An error budget is the amount of time or requests in an unhealthy state that your service can  accumulate during an interval before your overall SLO budget health is breached and the SLO is considered to be unmet. For example, an SLO with a threshold of 99.95% and a monthly interval translates to an error budget of 21.9 minutes of  downtime in a 30-day month. Budget reports include a health indicator, the attainment value, and  remaining budget. For more information about SLO error budgets, see   SLO concepts.
    @Sendable
    public func batchGetServiceLevelObjectiveBudgetReport(_ input: BatchGetServiceLevelObjectiveBudgetReportInput, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchGetServiceLevelObjectiveBudgetReportOutput {
        return try await self.client.execute(
            operation: "BatchGetServiceLevelObjectiveBudgetReport", 
            path: "/budget-report", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a service level objective (SLO), which can help you ensure that your critical business operations are  meeting customer expectations. Use SLOs to set and track specific target levels for the reliability and availability of your applications and services. SLOs use service level indicators (SLIs) to  calculate whether the application is performing at the level that you want. Create an SLO to set a target for a service or operationâ€™s availability or latency. CloudWatch measures this target frequently you can find whether it has been breached.  The target performance quality that is defined for an SLO is the attainment goal. You can set SLO targets for your applications that are discovered by Application Signals, using critical metrics such as latency and availability.  You can also set SLOs against any CloudWatch metric or math expression that produces a time series. When you create an SLO, you specify whether it is a period-based SLO or a request-based SLO. Each type of SLO has a different way of evaluating  your application's performance against its attainment goal.   A period-based SLO uses defined periods of time within  a specified total time interval. For each period of time, Application Signals determines whether the  application met its goal. The attainment rate is calculated as the number of good periods/number of total periods. For example, for a period-based SLO, meeting an attainment goal of 99.9% means that within your interval, your application must meet its performance goal during at least 99.9% of the  time periods.   A request-based SLO doesn't use pre-defined periods of time. Instead,  the SLO measures number of good requests/number of total requests during the interval. At any time, you can find the ratio of  good requests to total requests for the interval up to the time stamp that you specify, and measure that ratio against the goal set in your SLO.   After you have created an SLO, you can retrieve error budget reports for it.  An error budget is the amount of time or amount of requests that your application can be non-compliant with the SLO's goal, and still have your application meet the goal.   For a period-based SLO, the error budget starts at a number defined by the highest number of periods that can fail to meet the threshold,  while still meeting the overall goal. The remaining error budget decreases with every failed period that is recorded. The error budget within one interval can never increase. For example, an SLO with a threshold that 99.95% of requests must be completed under 2000ms every month  translates to an error budget of 21.9 minutes of downtime per month.   For a request-based SLO, the remaining error budget is dynamic and can increase or decrease, depending on  the ratio of good requests to total requests.   For more information about SLOs, see  Service level objectives (SLOs).  When you perform a CreateServiceLevelObjective operation, Application Signals creates the AWSServiceRoleForCloudWatchApplicationSignals service-linked role,  if it doesn't already exist in your account. This service- linked role has the following permissions:    xray:GetServiceGraph     logs:StartQuery     logs:GetQueryResults     cloudwatch:GetMetricData     cloudwatch:ListMetrics     tag:GetResources     autoscaling:DescribeAutoScalingGroups
    @Sendable
    public func createServiceLevelObjective(_ input: CreateServiceLevelObjectiveInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateServiceLevelObjectiveOutput {
        return try await self.client.execute(
            operation: "CreateServiceLevelObjective", 
            path: "/slo", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified service level objective.
    @Sendable
    public func deleteServiceLevelObjective(_ input: DeleteServiceLevelObjectiveInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteServiceLevelObjectiveOutput {
        return try await self.client.execute(
            operation: "DeleteServiceLevelObjective", 
            path: "/slo/{Id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a service discovered by Application Signals.
    @Sendable
    public func getService(_ input: GetServiceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetServiceOutput {
        return try await self.client.execute(
            operation: "GetService", 
            path: "/service", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about one SLO created in the account.
    @Sendable
    public func getServiceLevelObjective(_ input: GetServiceLevelObjectiveInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetServiceLevelObjectiveOutput {
        return try await self.client.execute(
            operation: "GetServiceLevelObjective", 
            path: "/slo/{Id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of service dependencies of the service that you specify. A dependency is an infrastructure  component that an operation of this service connects with. Dependencies can include Amazon Web Services  services, Amazon Web Services resources, and third-party services.
    @Sendable
    public func listServiceDependencies(_ input: ListServiceDependenciesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListServiceDependenciesOutput {
        return try await self.client.execute(
            operation: "ListServiceDependencies", 
            path: "/service-dependencies", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the list of dependents that invoked the specified service during the provided time range. Dependents include  other services, CloudWatch Synthetics canaries, and clients that are instrumented with CloudWatch RUM app monitors.
    @Sendable
    public func listServiceDependents(_ input: ListServiceDependentsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListServiceDependentsOutput {
        return try await self.client.execute(
            operation: "ListServiceDependents", 
            path: "/service-dependents", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of SLOs created in this account.
    @Sendable
    public func listServiceLevelObjectives(_ input: ListServiceLevelObjectivesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListServiceLevelObjectivesOutput {
        return try await self.client.execute(
            operation: "ListServiceLevelObjectives", 
            path: "/slos", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of the operations of this service that have been discovered by Application Signals. Only the operations that were invoked during the specified time range are returned.
    @Sendable
    public func listServiceOperations(_ input: ListServiceOperationsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListServiceOperationsOutput {
        return try await self.client.execute(
            operation: "ListServiceOperations", 
            path: "/service-operations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of services that have been discovered by Application Signals.  A service represents a minimum logical and transactional unit that completes a business function. Services are discovered through Application Signals instrumentation.
    @Sendable
    public func listServices(_ input: ListServicesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListServicesOutput {
        return try await self.client.execute(
            operation: "ListServices", 
            path: "/services", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Displays the tags associated with a CloudWatch resource. Tags can be assigned to service level objectives.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Enables this Amazon Web Services account to be able to use CloudWatch Application Signals  by creating the AWSServiceRoleForCloudWatchApplicationSignals service-linked role. This service- linked role has the following permissions:    xray:GetServiceGraph     logs:StartQuery     logs:GetQueryResults     cloudwatch:GetMetricData     cloudwatch:ListMetrics     tag:GetResources     autoscaling:DescribeAutoScalingGroups    After completing this step, you still need to instrument your Java and Python applications to send data  to Application Signals. For more information, see   Enabling Application Signals.
    @Sendable
    public func startDiscovery(_ input: StartDiscoveryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StartDiscoveryOutput {
        return try await self.client.execute(
            operation: "StartDiscovery", 
            path: "/start-discovery", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Assigns one or more tags (key-value pairs) to the specified CloudWatch resource, such as a service level objective. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters. You can use the TagResource action with an alarm that already has tags. If you specify a new tag key for the alarm,  this tag is appended to the list of tags associated with the alarm. If you specify a tag key that is already associated with the alarm, the new tag value that you specify replaces the previous value for that tag. You can associate as many as 50 tags with a CloudWatch resource.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tag-resource", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes one or more tags from the specified resource.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/untag-resource", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an existing service level objective (SLO). If you omit parameters, the previous values of those parameters are retained.  You cannot change from a period-based SLO to a request-based SLO,  or change from a request-based SLO to a period-based SLO.
    @Sendable
    public func updateServiceLevelObjective(_ input: UpdateServiceLevelObjectiveInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateServiceLevelObjectiveOutput {
        return try await self.client.execute(
            operation: "UpdateServiceLevelObjective", 
            path: "/slo/{Id}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension ApplicationSignals {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: ApplicationSignals, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension ApplicationSignals {
    /// Returns a list of service dependencies of the service that you specify. A dependency is an infrastructure  component that an operation of this service connects with. Dependencies can include Amazon Web Services  services, Amazon Web Services resources, and third-party services.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listServiceDependenciesPaginator(
        _ input: ListServiceDependenciesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListServiceDependenciesInput, ListServiceDependenciesOutput> {
        return .init(
            input: input,
            command: self.listServiceDependencies,
            inputKey: \ListServiceDependenciesInput.nextToken,
            outputKey: \ListServiceDependenciesOutput.nextToken,
            logger: logger
        )
    }

    /// Returns the list of dependents that invoked the specified service during the provided time range. Dependents include  other services, CloudWatch Synthetics canaries, and clients that are instrumented with CloudWatch RUM app monitors.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listServiceDependentsPaginator(
        _ input: ListServiceDependentsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListServiceDependentsInput, ListServiceDependentsOutput> {
        return .init(
            input: input,
            command: self.listServiceDependents,
            inputKey: \ListServiceDependentsInput.nextToken,
            outputKey: \ListServiceDependentsOutput.nextToken,
            logger: logger
        )
    }

    /// Returns a list of SLOs created in this account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listServiceLevelObjectivesPaginator(
        _ input: ListServiceLevelObjectivesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListServiceLevelObjectivesInput, ListServiceLevelObjectivesOutput> {
        return .init(
            input: input,
            command: self.listServiceLevelObjectives,
            inputKey: \ListServiceLevelObjectivesInput.nextToken,
            outputKey: \ListServiceLevelObjectivesOutput.nextToken,
            logger: logger
        )
    }

    /// Returns a list of the operations of this service that have been discovered by Application Signals. Only the operations that were invoked during the specified time range are returned.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listServiceOperationsPaginator(
        _ input: ListServiceOperationsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListServiceOperationsInput, ListServiceOperationsOutput> {
        return .init(
            input: input,
            command: self.listServiceOperations,
            inputKey: \ListServiceOperationsInput.nextToken,
            outputKey: \ListServiceOperationsOutput.nextToken,
            logger: logger
        )
    }

    /// Returns a list of services that have been discovered by Application Signals.  A service represents a minimum logical and transactional unit that completes a business function. Services are discovered through Application Signals instrumentation.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listServicesPaginator(
        _ input: ListServicesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListServicesInput, ListServicesOutput> {
        return .init(
            input: input,
            command: self.listServices,
            inputKey: \ListServicesInput.nextToken,
            outputKey: \ListServicesOutput.nextToken,
            logger: logger
        )
    }
}

extension ApplicationSignals.ListServiceDependenciesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ApplicationSignals.ListServiceDependenciesInput {
        return .init(
            endTime: self.endTime,
            keyAttributes: self.keyAttributes,
            maxResults: self.maxResults,
            nextToken: token,
            startTime: self.startTime
        )
    }
}

extension ApplicationSignals.ListServiceDependentsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ApplicationSignals.ListServiceDependentsInput {
        return .init(
            endTime: self.endTime,
            keyAttributes: self.keyAttributes,
            maxResults: self.maxResults,
            nextToken: token,
            startTime: self.startTime
        )
    }
}

extension ApplicationSignals.ListServiceLevelObjectivesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ApplicationSignals.ListServiceLevelObjectivesInput {
        return .init(
            keyAttributes: self.keyAttributes,
            maxResults: self.maxResults,
            nextToken: token,
            operationName: self.operationName
        )
    }
}

extension ApplicationSignals.ListServiceOperationsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ApplicationSignals.ListServiceOperationsInput {
        return .init(
            endTime: self.endTime,
            keyAttributes: self.keyAttributes,
            maxResults: self.maxResults,
            nextToken: token,
            startTime: self.startTime
        )
    }
}

extension ApplicationSignals.ListServicesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ApplicationSignals.ListServicesInput {
        return .init(
            endTime: self.endTime,
            maxResults: self.maxResults,
            nextToken: token,
            startTime: self.startTime
        )
    }
}
