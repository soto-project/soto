//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

import Foundation
import SotoCore

extension FinspaceData {
    // MARK: Enums

    public enum ChangeType: String, CustomStringConvertible, Codable {
        case append = "APPEND"
        case modify = "MODIFY"
        case replace = "REPLACE"
        public var description: String { return self.rawValue }
    }

    public enum ChangesetStatus: String, CustomStringConvertible, Codable {
        case failed = "FAILED"
        case pending = "PENDING"
        case running = "RUNNING"
        case stopRequested = "STOP_REQUESTED"
        case success = "SUCCESS"
        public var description: String { return self.rawValue }
    }

    public enum ErrorCategory: String, CustomStringConvertible, Codable {
        case aUserRecoverableErrorHasOccurred = "A_user_recoverable_error_has_occurred"
        case anInternalErrorHasOccurred = "An_internal_error_has_occurred"
        case cancelled = "Cancelled"
        case missingRequiredPermissionToPerformThisRequest = "Missing_required_permission_to_perform_this_request"
        case oneOrMoreInputsToThisRequestWereNotFound = "One_or_more_inputs_to_this_request_were_not_found"
        case serviceLimitsHaveBeenExceeded = "Service_limits_have_been_exceeded"
        case theInputsToThisRequestAreInvalid = "The_inputs_to_this_request_are_invalid"
        case theSystemTemporarilyLacksSufficientResourcesToProcessTheRequest = "The_system_temporarily_lacks_sufficient_resources_to_process_the_request"
        public var description: String { return self.rawValue }
    }

    public enum FormatType: String, CustomStringConvertible, Codable {
        case csv = "CSV"
        case json = "JSON"
        case parquet = "PARQUET"
        case xml = "XML"
        public var description: String { return self.rawValue }
    }

    public enum SourceType: String, CustomStringConvertible, Codable {
        case s3 = "S3"
        public var description: String { return self.rawValue }
    }

    public enum LocationType: String, CustomStringConvertible, Codable {
        case ingestion = "INGESTION"
        case sagemaker = "SAGEMAKER"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct ChangesetInfo: AWSDecodableShape {
        /// The ARN identifier of the changeset.
        public let changesetArn: String?
        /// Tags associated with the changeset.
        public let changesetLabels: [String: String]?
        /// Change type indicates how a changeset is applied to a dataset.    REPLACE - Changeset is considered as a replacement to all prior loaded changesets.    APPEND - Changeset is considered as an addition to the end of all prior loaded changesets.    MODIFY - Changeset is considered as a replacement to a specific prior ingested changeset.
        public let changeType: ChangeType?
        /// The timestamp at which the changeset was created in FinSpace.
        public let createTimestamp: Date?
        /// The unique identifier for the FinSpace dataset in which the changeset is created.
        public let datasetId: String?
        /// The structure with error messages.
        public let errorInfo: ErrorInfo?
        /// Structure of the source file(s).
        public let formatParams: [String: String]?
        /// Format type of the input files loaded into the changeset.
        public let formatType: FormatType?
        /// Unique identifier for a changeset.
        public let id: String?
        /// Source path from which the files to create the changeset are sourced.
        public let sourceParams: [String: String]?
        /// Type of the data source from which the files to create the changeset are sourced.    S3 - Amazon S3.
        public let sourceType: SourceType?
        /// The status of changeset creation operation.
        public let status: ChangesetStatus?
        /// Unique identifier of the changeset that is updated a changeset.
        public let updatedByChangesetId: String?
        /// Unique identifier of the changeset that is updated.
        public let updatesChangesetId: String?

        public init(changesetArn: String? = nil, changesetLabels: [String: String]? = nil, changeType: ChangeType? = nil, createTimestamp: Date? = nil, datasetId: String? = nil, errorInfo: ErrorInfo? = nil, formatParams: [String: String]? = nil, formatType: FormatType? = nil, id: String? = nil, sourceParams: [String: String]? = nil, sourceType: SourceType? = nil, status: ChangesetStatus? = nil, updatedByChangesetId: String? = nil, updatesChangesetId: String? = nil) {
            self.changesetArn = changesetArn
            self.changesetLabels = changesetLabels
            self.changeType = changeType
            self.createTimestamp = createTimestamp
            self.datasetId = datasetId
            self.errorInfo = errorInfo
            self.formatParams = formatParams
            self.formatType = formatType
            self.id = id
            self.sourceParams = sourceParams
            self.sourceType = sourceType
            self.status = status
            self.updatedByChangesetId = updatedByChangesetId
            self.updatesChangesetId = updatesChangesetId
        }

        private enum CodingKeys: String, CodingKey {
            case changesetArn
            case changesetLabels
            case changeType
            case createTimestamp
            case datasetId
            case errorInfo
            case formatParams
            case formatType
            case id
            case sourceParams
            case sourceType
            case status
            case updatedByChangesetId
            case updatesChangesetId
        }
    }

    public struct CreateChangesetRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "datasetId", location: .uri("datasetId"))
        ]

        /// Option to indicate how a changeset will be applied to a dataset.    REPLACE - Changeset will be considered as a replacement to all prior loaded changesets.    APPEND - Changeset will be considered as an addition to the end of all prior loaded changesets.
        public let changeType: ChangeType
        /// The unique identifier for the FinSpace dataset in which the changeset will be created.
        public let datasetId: String
        /// Options that define the structure of the source file(s).
        public let formatParams: [String: String]?
        /// Format type of the input files being loaded into the changeset.
        public let formatType: FormatType?
        /// Source path from which the files to create the changeset will be sourced.
        public let sourceParams: [String: String]
        /// Type of the data source from which the files to create the changeset will be sourced.    S3 - Amazon S3.
        public let sourceType: SourceType
        /// Metadata tags to apply to this changeset.
        public let tags: [String: String]?

        public init(changeType: ChangeType, datasetId: String, formatParams: [String: String]? = nil, formatType: FormatType? = nil, sourceParams: [String: String], sourceType: SourceType, tags: [String: String]? = nil) {
            self.changeType = changeType
            self.datasetId = datasetId
            self.formatParams = formatParams
            self.formatType = formatType
            self.sourceParams = sourceParams
            self.sourceType = sourceType
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.datasetId, name: "datasetId", parent: name, max: 26)
            try self.validate(self.datasetId, name: "datasetId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case changeType
            case formatParams
            case formatType
            case sourceParams
            case sourceType
            case tags
        }
    }

    public struct CreateChangesetResponse: AWSDecodableShape {
        /// Returns the changeset details.
        public let changeset: ChangesetInfo?

        public init(changeset: ChangesetInfo? = nil) {
            self.changeset = changeset
        }

        private enum CodingKeys: String, CodingKey {
            case changeset
        }
    }

    public struct Credentials: AWSDecodableShape {
        /// The access key identifier.
        public let accessKeyId: String?
        /// The access key.
        public let secretAccessKey: String?
        /// The session token.
        public let sessionToken: String?

        public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, sessionToken: String? = nil) {
            self.accessKeyId = accessKeyId
            self.secretAccessKey = secretAccessKey
            self.sessionToken = sessionToken
        }

        private enum CodingKeys: String, CodingKey {
            case accessKeyId
            case secretAccessKey
            case sessionToken
        }
    }

    public struct ErrorInfo: AWSDecodableShape {
        /// The category of the error.    VALIDATION -The inputs to this request are invalid.    SERVICE_QUOTA_EXCEEDED - Service quotas have been exceeded. Please contact AWS support to increase quotas.    ACCESS_DENIED - Missing required permission to perform this request.    RESOURCE_NOT_FOUND - One or more inputs to this request were not found.    THROTTLING - The system temporarily lacks sufficient resources to process the request.    INTERNAL_SERVICE_EXCEPTION - An internal service error has occurred.    CANCELLED - A user recoverable error has occurred.
        public let errorCategory: ErrorCategory?
        /// The text of the error message.
        public let errorMessage: String?

        public init(errorCategory: ErrorCategory? = nil, errorMessage: String? = nil) {
            self.errorCategory = errorCategory
            self.errorMessage = errorMessage
        }

        private enum CodingKeys: String, CodingKey {
            case errorCategory
            case errorMessage
        }
    }

    public struct GetProgrammaticAccessCredentialsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "durationInMinutes", location: .querystring("durationInMinutes")),
            AWSMemberEncoding(label: "environmentId", location: .querystring("environmentId"))
        ]

        /// The time duration in which the credentials remain valid.
        public let durationInMinutes: Int64?
        /// The habanero environment identifier.
        public let environmentId: String

        public init(durationInMinutes: Int64? = nil, environmentId: String) {
            self.durationInMinutes = durationInMinutes
            self.environmentId = environmentId
        }

        public func validate(name: String) throws {
            try self.validate(self.durationInMinutes, name: "durationInMinutes", parent: name, max: 720)
            try self.validate(self.durationInMinutes, name: "durationInMinutes", parent: name, min: 60)
            try self.validate(self.environmentId, name: "environmentId", parent: name, max: 26)
            try self.validate(self.environmentId, name: "environmentId", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetProgrammaticAccessCredentialsResponse: AWSDecodableShape {
        /// Returns the programmatic credentials.
        public let credentials: Credentials?
        /// Returns the duration in which the credentials will remain valid.
        public let durationInMinutes: Int64?

        public init(credentials: Credentials? = nil, durationInMinutes: Int64? = nil) {
            self.credentials = credentials
            self.durationInMinutes = durationInMinutes
        }

        private enum CodingKeys: String, CodingKey {
            case credentials
            case durationInMinutes
        }
    }

    public struct GetWorkingLocationRequest: AWSEncodableShape {
        /// Specify the type of the working location.    SAGEMAKER - Use the Amazon S3 location as a temporary location to store data content when working with FinSpace Notebooks that run on SageMaker studio.    INGESTION - Use the Amazon S3 location as a staging location to copy your data content and then use the location with the changeset creation operation.
        public let locationType: LocationType?

        public init(locationType: LocationType? = nil) {
            self.locationType = locationType
        }

        private enum CodingKeys: String, CodingKey {
            case locationType
        }
    }

    public struct GetWorkingLocationResponse: AWSDecodableShape {
        /// Returns the Amazon S3 bucket name for the working location.
        public let s3Bucket: String?
        /// Returns the Amazon S3 Path for the working location.
        public let s3Path: String?
        /// Returns the Amazon S3 URI for the working location.
        public let s3Uri: String?

        public init(s3Bucket: String? = nil, s3Path: String? = nil, s3Uri: String? = nil) {
            self.s3Bucket = s3Bucket
            self.s3Path = s3Path
            self.s3Uri = s3Uri
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket
            case s3Path
            case s3Uri
        }
    }
}
