//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS QBusiness service.
///
///  Amazon Q is in preview release and is subject to change.  This is the Amazon Q (for business use) API Reference. Amazon Q is a fully managed, generative-AI powered enterprise chat assistant that you can deploy within your organization. Amazon Q enhances employee productivity by supporting key tasks such as question-answering, knowledge discovery, writing email messages, summarizing text, drafting document outlines, and brainstorming ideas. Users ask questions of Amazon Q and get answers that are presented in a conversational manner. For an introduction to the service, see the  Amazon Q (for business use) Developer Guide . For an overview of the Amazon Q APIs, see Overview of Amazon Q API operations. For information about the IAM access control permissions you need to use this API, see IAM roles for Amazon Q in the Amazon Q (for business use) Developer Guide. You can use the following AWS SDKs to access Amazon Q APIs:    AWS SDK for C++     AWS SDK for Go     AWS SDK for Java     AWS SDK for JavaScript     AWS SDK for .NET     AWS SDK for Python (Boto3)     AWS SDK for Ruby    The following resources provide additional information about using the Amazon Q API:     Setting up for Amazon Q       Amazon Q CLI Reference       Amazon Web Services General Reference
public struct QBusiness: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the QBusiness client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "QBusiness",
            serviceIdentifier: "qbusiness",
            serviceProtocol: .restjson,
            apiVersion: "2023-11-27",
            endpoint: endpoint,
            serviceEndpoints: Self.serviceEndpoints,
            variantEndpoints: Self.variantEndpoints,
            errorType: QBusinessErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }


    /// custom endpoints for regions
    static var serviceEndpoints: [String: String] {[
        "af-south-1": "qbusiness.af-south-1.api.aws",
        "ap-east-1": "qbusiness.ap-east-1.api.aws",
        "ap-northeast-1": "qbusiness.ap-northeast-1.api.aws",
        "ap-northeast-2": "qbusiness.ap-northeast-2.api.aws",
        "ap-northeast-3": "qbusiness.ap-northeast-3.api.aws",
        "ap-south-1": "qbusiness.ap-south-1.api.aws",
        "ap-south-2": "qbusiness.ap-south-2.api.aws",
        "ap-southeast-1": "qbusiness.ap-southeast-1.api.aws",
        "ap-southeast-2": "qbusiness.ap-southeast-2.api.aws",
        "ap-southeast-3": "qbusiness.ap-southeast-3.api.aws",
        "ap-southeast-4": "qbusiness.ap-southeast-4.api.aws",
        "ca-central-1": "qbusiness.ca-central-1.api.aws",
        "ca-west-1": "qbusiness.ca-west-1.api.aws",
        "cn-north-1": "qbusiness.cn-north-1.api.amazonwebservices.com.cn",
        "cn-northwest-1": "qbusiness.cn-northwest-1.api.amazonwebservices.com.cn",
        "eu-central-1": "qbusiness.eu-central-1.api.aws",
        "eu-central-2": "qbusiness.eu-central-2.api.aws",
        "eu-north-1": "qbusiness.eu-north-1.api.aws",
        "eu-south-1": "qbusiness.eu-south-1.api.aws",
        "eu-south-2": "qbusiness.eu-south-2.api.aws",
        "eu-west-1": "qbusiness.eu-west-1.api.aws",
        "eu-west-2": "qbusiness.eu-west-2.api.aws",
        "eu-west-3": "qbusiness.eu-west-3.api.aws",
        "il-central-1": "qbusiness.il-central-1.api.aws",
        "me-central-1": "qbusiness.me-central-1.api.aws",
        "me-south-1": "qbusiness.me-south-1.api.aws",
        "sa-east-1": "qbusiness.sa-east-1.api.aws",
        "us-east-1": "qbusiness.us-east-1.api.aws",
        "us-east-2": "qbusiness.us-east-2.api.aws",
        "us-gov-east-1": "qbusiness.us-gov-east-1.api.aws",
        "us-gov-west-1": "qbusiness.us-gov-west-1.api.aws",
        "us-west-1": "qbusiness.us-west-1.api.aws",
        "us-west-2": "qbusiness.us-west-2.api.aws"
    ]}


    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "af-south-1": "qbusiness-fips.af-south-1.api.aws",
            "ap-east-1": "qbusiness-fips.ap-east-1.api.aws",
            "ap-northeast-1": "qbusiness-fips.ap-northeast-1.api.aws",
            "ap-northeast-2": "qbusiness-fips.ap-northeast-2.api.aws",
            "ap-northeast-3": "qbusiness-fips.ap-northeast-3.api.aws",
            "ap-south-1": "qbusiness-fips.ap-south-1.api.aws",
            "ap-south-2": "qbusiness-fips.ap-south-2.api.aws",
            "ap-southeast-1": "qbusiness-fips.ap-southeast-1.api.aws",
            "ap-southeast-2": "qbusiness-fips.ap-southeast-2.api.aws",
            "ap-southeast-3": "qbusiness-fips.ap-southeast-3.api.aws",
            "ap-southeast-4": "qbusiness-fips.ap-southeast-4.api.aws",
            "ca-central-1": "qbusiness-fips.ca-central-1.api.aws",
            "ca-west-1": "qbusiness-fips.ca-west-1.api.aws",
            "cn-north-1": "qbusiness-fips.cn-north-1.api.amazonwebservices.com.cn",
            "cn-northwest-1": "qbusiness-fips.cn-northwest-1.api.amazonwebservices.com.cn",
            "eu-central-1": "qbusiness-fips.eu-central-1.api.aws",
            "eu-central-2": "qbusiness-fips.eu-central-2.api.aws",
            "eu-north-1": "qbusiness-fips.eu-north-1.api.aws",
            "eu-south-1": "qbusiness-fips.eu-south-1.api.aws",
            "eu-south-2": "qbusiness-fips.eu-south-2.api.aws",
            "eu-west-1": "qbusiness-fips.eu-west-1.api.aws",
            "eu-west-2": "qbusiness-fips.eu-west-2.api.aws",
            "eu-west-3": "qbusiness-fips.eu-west-3.api.aws",
            "il-central-1": "qbusiness-fips.il-central-1.api.aws",
            "me-central-1": "qbusiness-fips.me-central-1.api.aws",
            "me-south-1": "qbusiness-fips.me-south-1.api.aws",
            "sa-east-1": "qbusiness-fips.sa-east-1.api.aws",
            "us-east-1": "qbusiness-fips.us-east-1.api.aws",
            "us-east-2": "qbusiness-fips.us-east-2.api.aws",
            "us-gov-east-1": "qbusiness-fips.us-gov-east-1.api.aws",
            "us-gov-west-1": "qbusiness-fips.us-gov-west-1.api.aws",
            "us-west-1": "qbusiness-fips.us-west-1.api.aws",
            "us-west-2": "qbusiness-fips.us-west-2.api.aws"
        ])
    ]}

    // MARK: API Calls

    /// Asynchronously deletes one or more documents added using the BatchPutDocument API from an Amazon Q index. You can see the progress of the deletion, and any error messages related to the process, by using CloudWatch.
    @Sendable
    public func batchDeleteDocument(_ input: BatchDeleteDocumentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchDeleteDocumentResponse {
        return try await self.client.execute(
            operation: "BatchDeleteDocument", 
            path: "/applications/{applicationId}/indices/{indexId}/documents/delete", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds one or more documents to an Amazon Q index. You use this API to:   ingest your structured and unstructured documents and documents stored in an Amazon S3 bucket into an Amazon Q index.   add custom attributes to documents in an Amazon Q index.   attach an access control list to the documents added to an Amazon Q index.   You can see the progress of the deletion, and any error messages related to the process, by using CloudWatch.
    @Sendable
    public func batchPutDocument(_ input: BatchPutDocumentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchPutDocumentResponse {
        return try await self.client.execute(
            operation: "BatchPutDocument", 
            path: "/applications/{applicationId}/indices/{indexId}/documents", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts or continues a non-streaming Amazon Q conversation.
    @Sendable
    public func chatSync(_ input: ChatSyncInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ChatSyncOutput {
        return try await self.client.execute(
            operation: "ChatSync", 
            path: "/applications/{applicationId}/conversations?sync", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Amazon Q application.
    @Sendable
    public func createApplication(_ input: CreateApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateApplicationResponse {
        return try await self.client.execute(
            operation: "CreateApplication", 
            path: "/applications", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a data source connector for an Amazon Q application.  CreateDataSource is a synchronous operation. The operation returns 200 if the data source was successfully created. Otherwise, an exception is raised.
    @Sendable
    public func createDataSource(_ input: CreateDataSourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDataSourceResponse {
        return try await self.client.execute(
            operation: "CreateDataSource", 
            path: "/applications/{applicationId}/indices/{indexId}/datasources", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Amazon Q index. To determine if index creation has completed, check the Status field returned from a call to DescribeIndex. The Status field is set to ACTIVE when the index is ready to use. Once the index is active, you can index your documents using the  BatchPutDocument API or the  CreateDataSource API.
    @Sendable
    public func createIndex(_ input: CreateIndexRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateIndexResponse {
        return try await self.client.execute(
            operation: "CreateIndex", 
            path: "/applications/{applicationId}/indices", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Amazon Q plugin.
    @Sendable
    public func createPlugin(_ input: CreatePluginRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreatePluginResponse {
        return try await self.client.execute(
            operation: "CreatePlugin", 
            path: "/applications/{applicationId}/plugins", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds a retriever to your Amazon Q application.
    @Sendable
    public func createRetriever(_ input: CreateRetrieverRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateRetrieverResponse {
        return try await self.client.execute(
            operation: "CreateRetriever", 
            path: "/applications/{applicationId}/retrievers", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a universally unique identifier (UUID) mapped to a list of local user ids within an application.
    @Sendable
    public func createUser(_ input: CreateUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateUserResponse {
        return try await self.client.execute(
            operation: "CreateUser", 
            path: "/applications/{applicationId}/users", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Amazon Q web experience.
    @Sendable
    public func createWebExperience(_ input: CreateWebExperienceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateWebExperienceResponse {
        return try await self.client.execute(
            operation: "CreateWebExperience", 
            path: "/applications/{applicationId}/experiences", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Amazon Q application.
    @Sendable
    public func deleteApplication(_ input: DeleteApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteApplicationResponse {
        return try await self.client.execute(
            operation: "DeleteApplication", 
            path: "/applications/{applicationId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes chat controls configured for an existing Amazon Q application.
    @Sendable
    public func deleteChatControlsConfiguration(_ input: DeleteChatControlsConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteChatControlsConfigurationResponse {
        return try await self.client.execute(
            operation: "DeleteChatControlsConfiguration", 
            path: "/applications/{applicationId}/chatcontrols", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Amazon Q web experience conversation.
    @Sendable
    public func deleteConversation(_ input: DeleteConversationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteConversationResponse {
        return try await self.client.execute(
            operation: "DeleteConversation", 
            path: "/applications/{applicationId}/conversations/{conversationId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Amazon Q data source connector. While the data source is being deleted, the Status field returned by a call to the DescribeDataSource API is set to DELETING.
    @Sendable
    public func deleteDataSource(_ input: DeleteDataSourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDataSourceResponse {
        return try await self.client.execute(
            operation: "DeleteDataSource", 
            path: "/applications/{applicationId}/indices/{indexId}/datasources/{dataSourceId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a group so that all users and sub groups that belong to the group can no longer access documents only available to that group. For example, after deleting the group "Summer Interns", all interns who belonged to that group no longer see intern-only documents in their chat results.  If you want to delete, update, or replace users or sub groups of a group, you need to use the PutGroup operation. For example, if a user in the group "Engineering" leaves the engineering team and another user takes their place, you provide an updated list of users or sub groups that belong to the "Engineering" group when calling PutGroup.
    @Sendable
    public func deleteGroup(_ input: DeleteGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteGroupResponse {
        return try await self.client.execute(
            operation: "DeleteGroup", 
            path: "/applications/{applicationId}/indices/{indexId}/groups/{groupName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Amazon Q index.
    @Sendable
    public func deleteIndex(_ input: DeleteIndexRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteIndexResponse {
        return try await self.client.execute(
            operation: "DeleteIndex", 
            path: "/applications/{applicationId}/indices/{indexId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Amazon Q plugin.
    @Sendable
    public func deletePlugin(_ input: DeletePluginRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeletePluginResponse {
        return try await self.client.execute(
            operation: "DeletePlugin", 
            path: "/applications/{applicationId}/plugins/{pluginId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the retriever used by an Amazon Q application.
    @Sendable
    public func deleteRetriever(_ input: DeleteRetrieverRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteRetrieverResponse {
        return try await self.client.execute(
            operation: "DeleteRetriever", 
            path: "/applications/{applicationId}/retrievers/{retrieverId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a user by email id.
    @Sendable
    public func deleteUser(_ input: DeleteUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteUserResponse {
        return try await self.client.execute(
            operation: "DeleteUser", 
            path: "/applications/{applicationId}/users/{userId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Amazon Q web experience.
    @Sendable
    public func deleteWebExperience(_ input: DeleteWebExperienceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteWebExperienceResponse {
        return try await self.client.execute(
            operation: "DeleteWebExperience", 
            path: "/applications/{applicationId}/experiences/{webExperienceId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about an existing Amazon Q application.
    @Sendable
    public func getApplication(_ input: GetApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetApplicationResponse {
        return try await self.client.execute(
            operation: "GetApplication", 
            path: "/applications/{applicationId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about an chat controls configured for an existing Amazon Q application.
    @Sendable
    public func getChatControlsConfiguration(_ input: GetChatControlsConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetChatControlsConfigurationResponse {
        return try await self.client.execute(
            operation: "GetChatControlsConfiguration", 
            path: "/applications/{applicationId}/chatcontrols", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about an existing Amazon Q data source connector.
    @Sendable
    public func getDataSource(_ input: GetDataSourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDataSourceResponse {
        return try await self.client.execute(
            operation: "GetDataSource", 
            path: "/applications/{applicationId}/indices/{indexId}/datasources/{dataSourceId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes a group by group name.
    @Sendable
    public func getGroup(_ input: GetGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetGroupResponse {
        return try await self.client.execute(
            operation: "GetGroup", 
            path: "/applications/{applicationId}/indices/{indexId}/groups/{groupName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about an existing Amazon Q index.
    @Sendable
    public func getIndex(_ input: GetIndexRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIndexResponse {
        return try await self.client.execute(
            operation: "GetIndex", 
            path: "/applications/{applicationId}/indices/{indexId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about an existing Amazon Q plugin.
    @Sendable
    public func getPlugin(_ input: GetPluginRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPluginResponse {
        return try await self.client.execute(
            operation: "GetPlugin", 
            path: "/applications/{applicationId}/plugins/{pluginId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about an existing retriever used by an Amazon Q application.
    @Sendable
    public func getRetriever(_ input: GetRetrieverRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRetrieverResponse {
        return try await self.client.execute(
            operation: "GetRetriever", 
            path: "/applications/{applicationId}/retrievers/{retrieverId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the universally unique identifier (UUID) associated with a local user in a data source.
    @Sendable
    public func getUser(_ input: GetUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetUserResponse {
        return try await self.client.execute(
            operation: "GetUser", 
            path: "/applications/{applicationId}/users/{userId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about an existing Amazon Q web experience.
    @Sendable
    public func getWebExperience(_ input: GetWebExperienceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetWebExperienceResponse {
        return try await self.client.execute(
            operation: "GetWebExperience", 
            path: "/applications/{applicationId}/experiences/{webExperienceId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists Amazon Q applications.
    @Sendable
    public func listApplications(_ input: ListApplicationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListApplicationsResponse {
        return try await self.client.execute(
            operation: "ListApplications", 
            path: "/applications", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists one or more Amazon Q conversations.
    @Sendable
    public func listConversations(_ input: ListConversationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListConversationsResponse {
        return try await self.client.execute(
            operation: "ListConversations", 
            path: "/applications/{applicationId}/conversations", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get information about an Amazon Q data source connector synchronization.
    @Sendable
    public func listDataSourceSyncJobs(_ input: ListDataSourceSyncJobsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDataSourceSyncJobsResponse {
        return try await self.client.execute(
            operation: "ListDataSourceSyncJobs", 
            path: "/applications/{applicationId}/indices/{indexId}/datasources/{dataSourceId}/syncjobs", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the Amazon Q data source connectors that you have created.
    @Sendable
    public func listDataSources(_ input: ListDataSourcesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDataSourcesResponse {
        return try await self.client.execute(
            operation: "ListDataSources", 
            path: "/applications/{applicationId}/indices/{indexId}/datasources", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// A list of documents attached to an index.
    @Sendable
    public func listDocuments(_ input: ListDocumentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDocumentsResponse {
        return try await self.client.execute(
            operation: "ListDocuments", 
            path: "/applications/{applicationId}/index/{indexId}/documents", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Provides a list of groups that are mapped to users.
    @Sendable
    public func listGroups(_ input: ListGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListGroupsResponse {
        return try await self.client.execute(
            operation: "ListGroups", 
            path: "/applications/{applicationId}/indices/{indexId}/groups", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the Amazon Q indices you have created.
    @Sendable
    public func listIndices(_ input: ListIndicesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListIndicesResponse {
        return try await self.client.execute(
            operation: "ListIndices", 
            path: "/applications/{applicationId}/indices", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of messages associated with an Amazon Q web experience.
    @Sendable
    public func listMessages(_ input: ListMessagesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMessagesResponse {
        return try await self.client.execute(
            operation: "ListMessages", 
            path: "/applications/{applicationId}/conversations/{conversationId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists configured Amazon Q plugins.
    @Sendable
    public func listPlugins(_ input: ListPluginsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPluginsResponse {
        return try await self.client.execute(
            operation: "ListPlugins", 
            path: "/applications/{applicationId}/plugins", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the retriever used by an Amazon Q application.
    @Sendable
    public func listRetrievers(_ input: ListRetrieversRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListRetrieversResponse {
        return try await self.client.execute(
            operation: "ListRetrievers", 
            path: "/applications/{applicationId}/retrievers", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of tags associated with a specified resource. Amazon Q applications and data sources can have tags associated with them.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/v1/tags/{resourceARN}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists one or more Amazon Q Web Experiences.
    @Sendable
    public func listWebExperiences(_ input: ListWebExperiencesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListWebExperiencesResponse {
        return try await self.client.execute(
            operation: "ListWebExperiences", 
            path: "/applications/{applicationId}/experiences", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Enables your end user to to provide feedback on their Amazon Q generated chat responses.
    @Sendable
    public func putFeedback(_ input: PutFeedbackRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "PutFeedback", 
            path: "/applications/{applicationId}/conversations/{conversationId}/messages/{messageId}/feedback", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create, or updates, a mapping of users—who have access to a document—to groups. You can also map sub groups to groups. For example, the group "Company Intellectual Property Teams" includes sub groups "Research" and "Engineering". These sub groups include their own list of users or people who work in these teams. Only users who work in research and engineering, and therefore belong in the intellectual property group, can see top-secret company documents in their Amazon Q chat results.
    @Sendable
    public func putGroup(_ input: PutGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutGroupResponse {
        return try await self.client.execute(
            operation: "PutGroup", 
            path: "/applications/{applicationId}/indices/{indexId}/groups", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts a data source connector synchronization job. If a synchronization job is already in progress, Amazon Q returns a ConflictException.
    @Sendable
    public func startDataSourceSyncJob(_ input: StartDataSourceSyncJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartDataSourceSyncJobResponse {
        return try await self.client.execute(
            operation: "StartDataSourceSyncJob", 
            path: "/applications/{applicationId}/indices/{indexId}/datasources/{dataSourceId}/startsync", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stops an Amazon Q data source connector synchronization job already in progress.
    @Sendable
    public func stopDataSourceSyncJob(_ input: StopDataSourceSyncJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopDataSourceSyncJobResponse {
        return try await self.client.execute(
            operation: "StopDataSourceSyncJob", 
            path: "/applications/{applicationId}/indices/{indexId}/datasources/{dataSourceId}/stopsync", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds the specified tag to the specified Amazon Q application or data source resource. If the tag already exists, the existing value is replaced with the new value.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/v1/tags/{resourceARN}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes a tag from an Amazon Q application or a data source.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/v1/tags/{resourceARN}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an existing Amazon Q application.
    @Sendable
    public func updateApplication(_ input: UpdateApplicationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateApplicationResponse {
        return try await self.client.execute(
            operation: "UpdateApplication", 
            path: "/applications/{applicationId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an set of chat controls configured for an existing Amazon Q application.
    @Sendable
    public func updateChatControlsConfiguration(_ input: UpdateChatControlsConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateChatControlsConfigurationResponse {
        return try await self.client.execute(
            operation: "UpdateChatControlsConfiguration", 
            path: "/applications/{applicationId}/chatcontrols", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an existing Amazon Q data source connector.
    @Sendable
    public func updateDataSource(_ input: UpdateDataSourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDataSourceResponse {
        return try await self.client.execute(
            operation: "UpdateDataSource", 
            path: "/applications/{applicationId}/indices/{indexId}/datasources/{dataSourceId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an Amazon Q index.
    @Sendable
    public func updateIndex(_ input: UpdateIndexRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateIndexResponse {
        return try await self.client.execute(
            operation: "UpdateIndex", 
            path: "/applications/{applicationId}/indices/{indexId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an Amazon Q plugin.
    @Sendable
    public func updatePlugin(_ input: UpdatePluginRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdatePluginResponse {
        return try await self.client.execute(
            operation: "UpdatePlugin", 
            path: "/applications/{applicationId}/plugins/{pluginId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the retriever used for your Amazon Q application.
    @Sendable
    public func updateRetriever(_ input: UpdateRetrieverRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateRetrieverResponse {
        return try await self.client.execute(
            operation: "UpdateRetriever", 
            path: "/applications/{applicationId}/retrievers/{retrieverId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a information associated with a user id.
    @Sendable
    public func updateUser(_ input: UpdateUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateUserResponse {
        return try await self.client.execute(
            operation: "UpdateUser", 
            path: "/applications/{applicationId}/users/{userId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an Amazon Q web experience.
    @Sendable
    public func updateWebExperience(_ input: UpdateWebExperienceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateWebExperienceResponse {
        return try await self.client.execute(
            operation: "UpdateWebExperience", 
            path: "/applications/{applicationId}/experiences/{webExperienceId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension QBusiness {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: QBusiness, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension QBusiness {
    /// Gets information about an chat controls configured for an existing Amazon Q application.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getChatControlsConfigurationPaginator(
        _ input: GetChatControlsConfigurationRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetChatControlsConfigurationRequest, GetChatControlsConfigurationResponse> {
        return .init(
            input: input,
            command: self.getChatControlsConfiguration,
            inputKey: \GetChatControlsConfigurationRequest.nextToken,
            outputKey: \GetChatControlsConfigurationResponse.nextToken,
            logger: logger
        )
    }

    /// Lists Amazon Q applications.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listApplicationsPaginator(
        _ input: ListApplicationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListApplicationsRequest, ListApplicationsResponse> {
        return .init(
            input: input,
            command: self.listApplications,
            inputKey: \ListApplicationsRequest.nextToken,
            outputKey: \ListApplicationsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists one or more Amazon Q conversations.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listConversationsPaginator(
        _ input: ListConversationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListConversationsRequest, ListConversationsResponse> {
        return .init(
            input: input,
            command: self.listConversations,
            inputKey: \ListConversationsRequest.nextToken,
            outputKey: \ListConversationsResponse.nextToken,
            logger: logger
        )
    }

    /// Get information about an Amazon Q data source connector synchronization.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDataSourceSyncJobsPaginator(
        _ input: ListDataSourceSyncJobsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDataSourceSyncJobsRequest, ListDataSourceSyncJobsResponse> {
        return .init(
            input: input,
            command: self.listDataSourceSyncJobs,
            inputKey: \ListDataSourceSyncJobsRequest.nextToken,
            outputKey: \ListDataSourceSyncJobsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the Amazon Q data source connectors that you have created.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDataSourcesPaginator(
        _ input: ListDataSourcesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDataSourcesRequest, ListDataSourcesResponse> {
        return .init(
            input: input,
            command: self.listDataSources,
            inputKey: \ListDataSourcesRequest.nextToken,
            outputKey: \ListDataSourcesResponse.nextToken,
            logger: logger
        )
    }

    /// A list of documents attached to an index.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDocumentsPaginator(
        _ input: ListDocumentsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDocumentsRequest, ListDocumentsResponse> {
        return .init(
            input: input,
            command: self.listDocuments,
            inputKey: \ListDocumentsRequest.nextToken,
            outputKey: \ListDocumentsResponse.nextToken,
            logger: logger
        )
    }

    /// Provides a list of groups that are mapped to users.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listGroupsPaginator(
        _ input: ListGroupsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListGroupsRequest, ListGroupsResponse> {
        return .init(
            input: input,
            command: self.listGroups,
            inputKey: \ListGroupsRequest.nextToken,
            outputKey: \ListGroupsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the Amazon Q indices you have created.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listIndicesPaginator(
        _ input: ListIndicesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListIndicesRequest, ListIndicesResponse> {
        return .init(
            input: input,
            command: self.listIndices,
            inputKey: \ListIndicesRequest.nextToken,
            outputKey: \ListIndicesResponse.nextToken,
            logger: logger
        )
    }

    /// Gets a list of messages associated with an Amazon Q web experience.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listMessagesPaginator(
        _ input: ListMessagesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListMessagesRequest, ListMessagesResponse> {
        return .init(
            input: input,
            command: self.listMessages,
            inputKey: \ListMessagesRequest.nextToken,
            outputKey: \ListMessagesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists configured Amazon Q plugins.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPluginsPaginator(
        _ input: ListPluginsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPluginsRequest, ListPluginsResponse> {
        return .init(
            input: input,
            command: self.listPlugins,
            inputKey: \ListPluginsRequest.nextToken,
            outputKey: \ListPluginsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the retriever used by an Amazon Q application.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listRetrieversPaginator(
        _ input: ListRetrieversRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListRetrieversRequest, ListRetrieversResponse> {
        return .init(
            input: input,
            command: self.listRetrievers,
            inputKey: \ListRetrieversRequest.nextToken,
            outputKey: \ListRetrieversResponse.nextToken,
            logger: logger
        )
    }

    /// Lists one or more Amazon Q Web Experiences.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listWebExperiencesPaginator(
        _ input: ListWebExperiencesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListWebExperiencesRequest, ListWebExperiencesResponse> {
        return .init(
            input: input,
            command: self.listWebExperiences,
            inputKey: \ListWebExperiencesRequest.nextToken,
            outputKey: \ListWebExperiencesResponse.nextToken,
            logger: logger
        )
    }
}

extension QBusiness.GetChatControlsConfigurationRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> QBusiness.GetChatControlsConfigurationRequest {
        return .init(
            applicationId: self.applicationId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension QBusiness.ListApplicationsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> QBusiness.ListApplicationsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension QBusiness.ListConversationsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> QBusiness.ListConversationsRequest {
        return .init(
            applicationId: self.applicationId,
            maxResults: self.maxResults,
            nextToken: token,
            userId: self.userId
        )
    }
}

extension QBusiness.ListDataSourceSyncJobsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> QBusiness.ListDataSourceSyncJobsRequest {
        return .init(
            applicationId: self.applicationId,
            dataSourceId: self.dataSourceId,
            endTime: self.endTime,
            indexId: self.indexId,
            maxResults: self.maxResults,
            nextToken: token,
            startTime: self.startTime,
            statusFilter: self.statusFilter
        )
    }
}

extension QBusiness.ListDataSourcesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> QBusiness.ListDataSourcesRequest {
        return .init(
            applicationId: self.applicationId,
            indexId: self.indexId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension QBusiness.ListDocumentsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> QBusiness.ListDocumentsRequest {
        return .init(
            applicationId: self.applicationId,
            dataSourceIds: self.dataSourceIds,
            indexId: self.indexId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension QBusiness.ListGroupsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> QBusiness.ListGroupsRequest {
        return .init(
            applicationId: self.applicationId,
            dataSourceId: self.dataSourceId,
            indexId: self.indexId,
            maxResults: self.maxResults,
            nextToken: token,
            updatedEarlierThan: self.updatedEarlierThan
        )
    }
}

extension QBusiness.ListIndicesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> QBusiness.ListIndicesRequest {
        return .init(
            applicationId: self.applicationId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension QBusiness.ListMessagesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> QBusiness.ListMessagesRequest {
        return .init(
            applicationId: self.applicationId,
            conversationId: self.conversationId,
            maxResults: self.maxResults,
            nextToken: token,
            userId: self.userId
        )
    }
}

extension QBusiness.ListPluginsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> QBusiness.ListPluginsRequest {
        return .init(
            applicationId: self.applicationId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension QBusiness.ListRetrieversRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> QBusiness.ListRetrieversRequest {
        return .init(
            applicationId: self.applicationId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension QBusiness.ListWebExperiencesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> QBusiness.ListWebExperiencesRequest {
        return .init(
            applicationId: self.applicationId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
