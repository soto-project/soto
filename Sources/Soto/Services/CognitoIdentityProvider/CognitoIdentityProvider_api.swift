//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS CognitoIdentityProvider service.
///
/// With the Amazon Cognito user pools API, you can configure user pools and authenticate users. To authenticate users from third-party identity providers (IdPs) in this API, you can link IdP users to native user profiles. Learn more about the authentication and authorization of federated users at Adding user pool sign-in through a third party and in the User pool federation endpoints and hosted UI reference. This API reference provides detailed information about API operations and object types in Amazon Cognito. Along with resource management operations, the Amazon Cognito user pools API includes classes of operations and authorization models for client-side and server-side authentication of users. You can interact with operations in the Amazon Cognito user pools API as any of the following subjects.   An administrator who wants to configure user pools, app clients, users, groups, or other user pool functions.   A server-side app, like a web application, that wants to use its Amazon Web Services privileges to manage, authenticate, or authorize a user.   A client-side app, like a mobile app, that wants to make unauthenticated requests to manage, authenticate, or authorize a user.   For more information, see Using the Amazon Cognito user pools API and user pool endpoints in the Amazon Cognito Developer Guide. With your Amazon Web Services SDK, you can build the logic to support operational flows in every use case for this API. You can also make direct REST API requests to Amazon Cognito user pools service endpoints. The following links can get you started with the CognitoIdentityProvider client in other supported Amazon Web Services SDKs.    Amazon Web Services Command Line Interface     Amazon Web Services SDK for .NET     Amazon Web Services SDK for C++     Amazon Web Services SDK for Go     Amazon Web Services SDK for Java V2     Amazon Web Services SDK for JavaScript     Amazon Web Services SDK for PHP V3     Amazon Web Services SDK for Python     Amazon Web Services SDK for Ruby V3     Amazon Web Services SDK for Kotlin    To get started with an Amazon Web Services SDK, see Tools to Build on Amazon Web Services. For example actions and scenarios, see Code examples for Amazon Cognito Identity Provider using Amazon Web Services SDKs.
public struct CognitoIdentityProvider: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the CognitoIdentityProvider client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "AWSCognitoIdentityProviderService",
            serviceName: "CognitoIdentityProvider",
            serviceIdentifier: "cognito-idp",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2016-04-18",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: CognitoIdentityProviderErrorType.self,
            xmlNamespace: "http://cognito-idp.amazonaws.com/doc/2016-04-18/",
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.dualstack]: .init(endpoints: [
            "af-south-1": "cognito-idp.af-south-1.amazonaws.com",
            "ap-east-1": "cognito-idp.ap-east-1.amazonaws.com",
            "ap-northeast-1": "cognito-idp.ap-northeast-1.amazonaws.com",
            "ap-northeast-2": "cognito-idp.ap-northeast-2.amazonaws.com",
            "ap-northeast-3": "cognito-idp.ap-northeast-3.amazonaws.com",
            "ap-south-1": "cognito-idp.ap-south-1.amazonaws.com",
            "ap-south-2": "cognito-idp.ap-south-2.amazonaws.com",
            "ap-southeast-1": "cognito-idp.ap-southeast-1.amazonaws.com",
            "ap-southeast-2": "cognito-idp.ap-southeast-2.amazonaws.com",
            "ap-southeast-3": "cognito-idp.ap-southeast-3.amazonaws.com",
            "ap-southeast-4": "cognito-idp.ap-southeast-4.amazonaws.com",
            "ca-central-1": "cognito-idp.ca-central-1.amazonaws.com",
            "ca-west-1": "cognito-idp.ca-west-1.amazonaws.com",
            "eu-central-1": "cognito-idp.eu-central-1.amazonaws.com",
            "eu-central-2": "cognito-idp.eu-central-2.amazonaws.com",
            "eu-north-1": "cognito-idp.eu-north-1.amazonaws.com",
            "eu-south-1": "cognito-idp.eu-south-1.amazonaws.com",
            "eu-south-2": "cognito-idp.eu-south-2.amazonaws.com",
            "eu-west-1": "cognito-idp.eu-west-1.amazonaws.com",
            "eu-west-2": "cognito-idp.eu-west-2.amazonaws.com",
            "eu-west-3": "cognito-idp.eu-west-3.amazonaws.com",
            "il-central-1": "cognito-idp.il-central-1.amazonaws.com",
            "me-central-1": "cognito-idp.me-central-1.amazonaws.com",
            "me-south-1": "cognito-idp.me-south-1.amazonaws.com",
            "sa-east-1": "cognito-idp.sa-east-1.amazonaws.com",
            "us-east-1": "cognito-idp.us-east-1.amazonaws.com",
            "us-east-2": "cognito-idp.us-east-2.amazonaws.com",
            "us-gov-west-1": "cognito-idp.us-gov-west-1.amazonaws.com",
            "us-west-1": "cognito-idp.us-west-1.amazonaws.com",
            "us-west-2": "cognito-idp.us-west-2.amazonaws.com"
        ]),
        [.dualstack, .fips]: .init(endpoints: [
            "us-east-1": "cognito-idp-fips.us-east-1.amazonaws.com",
            "us-east-2": "cognito-idp-fips.us-east-2.amazonaws.com",
            "us-gov-west-1": "cognito-idp-fips.us-gov-west-1.amazonaws.com",
            "us-west-1": "cognito-idp-fips.us-west-1.amazonaws.com",
            "us-west-2": "cognito-idp-fips.us-west-2.amazonaws.com"
        ]),
        [.fips]: .init(endpoints: [
            "us-east-1": "cognito-idp-fips.us-east-1.amazonaws.com",
            "us-east-2": "cognito-idp-fips.us-east-2.amazonaws.com",
            "us-gov-west-1": "cognito-idp-fips.us-gov-west-1.amazonaws.com",
            "us-west-1": "cognito-idp-fips.us-west-1.amazonaws.com",
            "us-west-2": "cognito-idp-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Adds additional user attributes to the user pool schema. Custom attributes can be mutable or immutable and have a custom: or dev: prefix. For more information, see Custom attributes. You can also create custom attributes in the Schema parameter of CreateUserPool and UpdateUserPool. You can't delete custom attributes after you create them.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func addCustomAttributes(_ input: AddCustomAttributesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AddCustomAttributesResponse {
        try await self.client.execute(
            operation: "AddCustomAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds additional user attributes to the user pool schema. Custom attributes can be mutable or immutable and have a custom: or dev: prefix. For more information, see Custom attributes. You can also create custom attributes in the Schema parameter of CreateUserPool and UpdateUserPool. You can't delete custom attributes after you create them.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - customAttributes: An array of custom attribute names and other properties. Sets the following characteristics:  AttributeDataType  The expected data type. Can be a string, a number, a date and time, or a boolean.  Mutable  If true, you can grant app clients write access to the attribute value. If false, the attribute value can only be set up on sign-up or administrator creation of users.  Name  The attribute name. For an attribute like custom:myAttribute, enter myAttribute for this field.  Required  When true, users who sign up or are created must set a value for the attribute.  NumberAttributeConstraints  The minimum and maximum length of accepted values for a Number-type attribute.  StringAttributeConstraints  The minimum and maximum length of accepted values for a String-type attribute.  DeveloperOnlyAttribute  This legacy option creates an attribute with a dev: prefix. You can only set the value of a developer-only attribute with administrative IAM credentials.
    ///   - userPoolId: The ID of the user pool where you want to add custom attributes.
    ///   - logger: Logger use during operation
    @inlinable
    public func addCustomAttributes(
        customAttributes: [SchemaAttributeType],
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AddCustomAttributesResponse {
        let input = AddCustomAttributesRequest(
            customAttributes: customAttributes, 
            userPoolId: userPoolId
        )
        return try await self.addCustomAttributes(input, logger: logger)
    }

    /// Adds a user to a group. A user who is in a group can present a preferred-role claim to an identity pool, and populates a cognito:groups claim to their access and identity tokens.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminAddUserToGroup(_ input: AdminAddUserToGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "AdminAddUserToGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds a user to a group. A user who is in a group can present a preferred-role claim to an identity pool, and populates a cognito:groups claim to their access and identity tokens.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - groupName: The name of the group that you want to add your user to.
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - userPoolId: The ID of the user pool that contains the group that you want to add the user to.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminAddUserToGroup(
        groupName: String,
        username: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = AdminAddUserToGroupRequest(
            groupName: groupName, 
            username: username, 
            userPoolId: userPoolId
        )
        return try await self.adminAddUserToGroup(input, logger: logger)
    }

    /// Confirms user sign-up as an administrator. Unlike ConfirmSignUp, your IAM credentials authorize user account confirmation. No confirmation code is required. This request sets a user account active in a user pool that requires confirmation of new user accounts before they can sign in. You can configure your user pool to not send confirmation codes to new users and instead confirm them with this API operation on the back end.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints     To configure your user pool to require administrative confirmation of users, set AllowAdminCreateUserOnly to true in a CreateUserPool or UpdateUserPool request.
    @Sendable
    @inlinable
    public func adminConfirmSignUp(_ input: AdminConfirmSignUpRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AdminConfirmSignUpResponse {
        try await self.client.execute(
            operation: "AdminConfirmSignUp", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Confirms user sign-up as an administrator. Unlike ConfirmSignUp, your IAM credentials authorize user account confirmation. No confirmation code is required. This request sets a user account active in a user pool that requires confirmation of new user accounts before they can sign in. You can configure your user pool to not send confirmation codes to new users and instead confirm them with this API operation on the back end.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints     To configure your user pool to require administrative confirmation of users, set AllowAdminCreateUserOnly to true in a CreateUserPool or UpdateUserPool request.
    ///
    /// Parameters:
    ///   - clientMetadata: A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. If your user pool configuration includes triggers, the AdminConfirmSignUp API action invokes the Lambda function that is specified for the post confirmation trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. In this payload, the clientMetadata attribute provides the data that you assigned to the ClientMetadata parameter in your AdminConfirmSignUp request. In your function code in Lambda, you can process the ClientMetadata value to enhance your workflow for your specific needs. For more information, see
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - userPoolId: The ID of the user pool where you want to confirm a user's sign-up request.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminConfirmSignUp(
        clientMetadata: [String: String]? = nil,
        username: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AdminConfirmSignUpResponse {
        let input = AdminConfirmSignUpRequest(
            clientMetadata: clientMetadata, 
            username: username, 
            userPoolId: userPoolId
        )
        return try await self.adminConfirmSignUp(input, logger: logger)
    }

    /// Creates a new user in the specified user pool. If MessageAction isn't set, the default is to send a welcome message via email or phone (SMS).  This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.  This message is based on a template that you configured in your call to create or update a user pool. This template includes your custom sign-up instructions and placeholders for user name and temporary password. Alternatively, you can call AdminCreateUser with SUPPRESS for the MessageAction parameter, and Amazon Cognito won't send any email.  In either case, if the user has a password, they will be in the FORCE_CHANGE_PASSWORD state until they sign in and set their password. Your invitation message template must have the {####} password placeholder if your users have passwords. If your template doesn't have this placeholder, Amazon Cognito doesn't deliver the invitation message. In this case, you must update your message template and resend the password with a new AdminCreateUser request with a MessageAction value of RESEND.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminCreateUser(_ input: AdminCreateUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AdminCreateUserResponse {
        try await self.client.execute(
            operation: "AdminCreateUser", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new user in the specified user pool. If MessageAction isn't set, the default is to send a welcome message via email or phone (SMS).  This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.  This message is based on a template that you configured in your call to create or update a user pool. This template includes your custom sign-up instructions and placeholders for user name and temporary password. Alternatively, you can call AdminCreateUser with SUPPRESS for the MessageAction parameter, and Amazon Cognito won't send any email.  In either case, if the user has a password, they will be in the FORCE_CHANGE_PASSWORD state until they sign in and set their password. Your invitation message template must have the {####} password placeholder if your users have passwords. If your template doesn't have this placeholder, Amazon Cognito doesn't deliver the invitation message. In this case, you must update your message template and resend the password with a new AdminCreateUser request with a MessageAction value of RESEND.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - clientMetadata: A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminCreateUser API action, Amazon Cognito invokes the function that is assigned to the pre sign-up trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a ClientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your AdminCreateUser request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see
    ///   - desiredDeliveryMediums: Specify EMAIL if email will be used to send the welcome message. Specify SMS if the phone number will be used. The default value is SMS. You can specify more than one value.
    ///   - forceAliasCreation: This parameter is used only if the phone_number_verified or email_verified attribute is set to True. Otherwise, it is ignored. If this parameter is set to True and the phone number or email address specified in the UserAttributes parameter already exists as an alias with a different user, this request migrates the alias from the previous user to the newly-created user. The previous user will no longer be able to log in using that alias. If this parameter is set to False, the API throws an AliasExistsException error if the alias already exists. The default value is False.
    ///   - messageAction: Set to RESEND to resend the invitation message to a user that already exists, and to reset the temporary-password duration with a new temporary password. Set to SUPPRESS to suppress sending the message. You can specify only one value.
    ///   - temporaryPassword: The user's temporary password. This password must conform to the password policy that you specified when you created the user pool. The exception to the requirement for a password is when your user pool supports passwordless sign-in with email or SMS OTPs. To create a user with no password, omit this parameter or submit a blank value. You can only create a passwordless user when passwordless sign-in is available. See the SignInPolicyType property of CreateUserPool and UpdateUserPool. The temporary password is valid only once. To complete the Admin Create User flow, the user must enter the temporary password in the sign-in page, along with a new password to be used in all future sign-ins. If you don't specify a value, Amazon Cognito generates one for you unless you have passwordless options active for your user pool. The temporary password can only be used until the user account expiration limit that you set for your user pool. To reset the account after that time limit, you must call AdminCreateUser again and specify RESEND for the MessageAction parameter.
    ///   - userAttributes: An array of name-value pairs that contain user attributes and attribute values to be set for the user to be created. You can create a user without specifying any attributes other than Username. However, any attributes that you specify as required (when creating a user pool or in the Attributes tab of the console) either you should supply (in your call to AdminCreateUser) or the user should supply (when they sign up in response to your welcome message). For custom attributes, you must prepend the custom: prefix to the attribute name. To send a message inviting the user to sign up, you must specify the user's email address or phone number. You can do this in your call to AdminCreateUser or in the Users tab of the Amazon Cognito console for managing your user pools. You must also provide an email address or phone number when you expect the user to do passwordless sign-in with an email or SMS OTP. These attributes must be provided when passwordless options are the only available, or when you don't submit a TemporaryPassword. In your call to AdminCreateUser, you can set the email_verified attribute to True, and you can set the phone_number_verified attribute to True. You can also do this by calling AdminUpdateUserAttributes.    email: The email address of the user to whom the message that contains the code and username will be sent. Required if the email_verified attribute is set to True, or if "EMAIL" is specified in the DesiredDeliveryMediums parameter.    phone_number: The phone number of the user to whom the message that contains the code and username will be sent. Required if the phone_number_verified attribute is set to True, or if "SMS" is specified in the DesiredDeliveryMediums parameter.
    ///   - username: The value that you want to set as the username sign-in attribute. The following conditions apply to the username parameter.   The username can't be a duplicate of another username in the same user pool.   You can't change the value of a username after you create it.   You can only provide a value if usernames are a valid sign-in attribute for your user pool. If your user pool only supports phone numbers or email addresses as sign-in attributes, Amazon Cognito automatically generates a username value. For more information, see Customizing sign-in attributes.
    ///   - userPoolId: The ID of the user pool where you want to create a user.
    ///   - validationData: Temporary user attributes that contribute to the outcomes of your pre sign-up Lambda trigger. This set of key-value pairs are for custom validation of information that you  collect from your users but don't need to retain. Your Lambda function can analyze this additional data and act on it. Your function might perform external API operations like logging user attributes and validation data to Amazon CloudWatch Logs. Validation data might also affect the response that your function returns to Amazon Cognito, like automatically confirming the user if they sign up from within your network. For more information about the pre sign-up Lambda trigger, see Pre sign-up Lambda trigger.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminCreateUser(
        clientMetadata: [String: String]? = nil,
        desiredDeliveryMediums: [DeliveryMediumType]? = nil,
        forceAliasCreation: Bool? = nil,
        messageAction: MessageActionType? = nil,
        temporaryPassword: String? = nil,
        userAttributes: [AttributeType]? = nil,
        username: String,
        userPoolId: String,
        validationData: [AttributeType]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AdminCreateUserResponse {
        let input = AdminCreateUserRequest(
            clientMetadata: clientMetadata, 
            desiredDeliveryMediums: desiredDeliveryMediums, 
            forceAliasCreation: forceAliasCreation, 
            messageAction: messageAction, 
            temporaryPassword: temporaryPassword, 
            userAttributes: userAttributes, 
            username: username, 
            userPoolId: userPoolId, 
            validationData: validationData
        )
        return try await self.adminCreateUser(input, logger: logger)
    }

    /// Deletes a user profile in your user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminDeleteUser(_ input: AdminDeleteUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "AdminDeleteUser", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a user profile in your user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - userPoolId: The ID of the user pool where you want to delete the user.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminDeleteUser(
        username: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = AdminDeleteUserRequest(
            username: username, 
            userPoolId: userPoolId
        )
        return try await self.adminDeleteUser(input, logger: logger)
    }

    /// Deletes attribute values from a user. This operation doesn't affect tokens for existing user sessions. The next ID token that the user receives will no longer have this attribute.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminDeleteUserAttributes(_ input: AdminDeleteUserAttributesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AdminDeleteUserAttributesResponse {
        try await self.client.execute(
            operation: "AdminDeleteUserAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes attribute values from a user. This operation doesn't affect tokens for existing user sessions. The next ID token that the user receives will no longer have this attribute.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - userAttributeNames: An array of strings representing the user attribute names you want to delete. For custom attributes, you must prepend the custom: prefix to the attribute name.
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - userPoolId: The ID of the user pool where you want to delete user attributes.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminDeleteUserAttributes(
        userAttributeNames: [String],
        username: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AdminDeleteUserAttributesResponse {
        let input = AdminDeleteUserAttributesRequest(
            userAttributeNames: userAttributeNames, 
            username: username, 
            userPoolId: userPoolId
        )
        return try await self.adminDeleteUserAttributes(input, logger: logger)
    }

    /// Prevents the user from signing in with the specified external (SAML or social) identity provider (IdP). If the user that you want to deactivate is a Amazon Cognito user pools native username + password user, they can't use their password to sign in. If the user to deactivate is a linked external IdP user, any link between that user and an existing user is removed. When the external user signs in again, and the user is no longer attached to the previously linked DestinationUser, the user must create a new user account. See AdminLinkProviderForUser. The ProviderName must match the value specified when creating an IdP for the pool.  To deactivate a native username + password user, the ProviderName value must be Cognito and the ProviderAttributeName must be Cognito_Subject. The ProviderAttributeValue must be the name that is used in the user pool for the user. The ProviderAttributeName must always be Cognito_Subject for social IdPs. The ProviderAttributeValue must always be the exact subject that was used when the user was originally linked as a source user. For de-linking a SAML identity, there are two scenarios. If the linked identity has not yet been used to sign in, the ProviderAttributeName and ProviderAttributeValue must be the same values that were used for the SourceUser when the identities were originally linked using  AdminLinkProviderForUser call. (If the linking was done with ProviderAttributeName set to Cognito_Subject, the same applies here). However, if the user has already signed in, the ProviderAttributeName must be Cognito_Subject and ProviderAttributeValue must be the subject of the SAML assertion.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminDisableProviderForUser(_ input: AdminDisableProviderForUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AdminDisableProviderForUserResponse {
        try await self.client.execute(
            operation: "AdminDisableProviderForUser", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Prevents the user from signing in with the specified external (SAML or social) identity provider (IdP). If the user that you want to deactivate is a Amazon Cognito user pools native username + password user, they can't use their password to sign in. If the user to deactivate is a linked external IdP user, any link between that user and an existing user is removed. When the external user signs in again, and the user is no longer attached to the previously linked DestinationUser, the user must create a new user account. See AdminLinkProviderForUser. The ProviderName must match the value specified when creating an IdP for the pool.  To deactivate a native username + password user, the ProviderName value must be Cognito and the ProviderAttributeName must be Cognito_Subject. The ProviderAttributeValue must be the name that is used in the user pool for the user. The ProviderAttributeName must always be Cognito_Subject for social IdPs. The ProviderAttributeValue must always be the exact subject that was used when the user was originally linked as a source user. For de-linking a SAML identity, there are two scenarios. If the linked identity has not yet been used to sign in, the ProviderAttributeName and ProviderAttributeValue must be the same values that were used for the SourceUser when the identities were originally linked using  AdminLinkProviderForUser call. (If the linking was done with ProviderAttributeName set to Cognito_Subject, the same applies here). However, if the user has already signed in, the ProviderAttributeName must be Cognito_Subject and ProviderAttributeValue must be the subject of the SAML assertion.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - user: The user profile that you want to delete a linked identity from.
    ///   - userPoolId: The ID of the user pool where you want to delete the user's linked identities.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminDisableProviderForUser(
        user: ProviderUserIdentifierType,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AdminDisableProviderForUserResponse {
        let input = AdminDisableProviderForUserRequest(
            user: user, 
            userPoolId: userPoolId
        )
        return try await self.adminDisableProviderForUser(input, logger: logger)
    }

    /// Deactivates a user profile and revokes all access tokens for the user. A deactivated user can't sign in, but still appears in the responses to ListUsers API requests.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminDisableUser(_ input: AdminDisableUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AdminDisableUserResponse {
        try await self.client.execute(
            operation: "AdminDisableUser", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deactivates a user profile and revokes all access tokens for the user. A deactivated user can't sign in, but still appears in the responses to ListUsers API requests.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - userPoolId: The ID of the user pool where you want to disable the user.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminDisableUser(
        username: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AdminDisableUserResponse {
        let input = AdminDisableUserRequest(
            username: username, 
            userPoolId: userPoolId
        )
        return try await self.adminDisableUser(input, logger: logger)
    }

    /// Activate sign-in for a user profile that previously had sign-in access disabled.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminEnableUser(_ input: AdminEnableUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AdminEnableUserResponse {
        try await self.client.execute(
            operation: "AdminEnableUser", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Activate sign-in for a user profile that previously had sign-in access disabled.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - userPoolId: The ID of the user pool where you want to activate sign-in for the user.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminEnableUser(
        username: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AdminEnableUserResponse {
        let input = AdminEnableUserRequest(
            username: username, 
            userPoolId: userPoolId
        )
        return try await self.adminEnableUser(input, logger: logger)
    }

    /// Forgets, or deletes, a remembered device from a user's profile. After you forget the device, the user can no longer complete device authentication with that device and when applicable, must submit MFA codes again. For more information, see Working with devices.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminForgetDevice(_ input: AdminForgetDeviceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "AdminForgetDevice", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Forgets, or deletes, a remembered device from a user's profile. After you forget the device, the user can no longer complete device authentication with that device and when applicable, must submit MFA codes again. For more information, see Working with devices.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - deviceKey: The key ID of the device that you want to delete. You can get device keys in the response to an AdminListDevices request.
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - userPoolId: The ID of the user pool where the device owner is a user.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminForgetDevice(
        deviceKey: String,
        username: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = AdminForgetDeviceRequest(
            deviceKey: deviceKey, 
            username: username, 
            userPoolId: userPoolId
        )
        return try await self.adminForgetDevice(input, logger: logger)
    }

    /// Given the device key, returns details for a user' device. For more information, see Working with devices.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminGetDevice(_ input: AdminGetDeviceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AdminGetDeviceResponse {
        try await self.client.execute(
            operation: "AdminGetDevice", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Given the device key, returns details for a user' device. For more information, see Working with devices.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - deviceKey: The key of the device that you want to delete. You can get device IDs in the response to an AdminListDevices request.
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - userPoolId: The ID of the user pool where the device owner is a user.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminGetDevice(
        deviceKey: String,
        username: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AdminGetDeviceResponse {
        let input = AdminGetDeviceRequest(
            deviceKey: deviceKey, 
            username: username, 
            userPoolId: userPoolId
        )
        return try await self.adminGetDevice(input, logger: logger)
    }

    /// Given the username, returns details about a user profile in a user pool. This operation contributes to your monthly active user (MAU) count for the purpose of billing. You can specify alias attributes in the Username parameter.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminGetUser(_ input: AdminGetUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AdminGetUserResponse {
        try await self.client.execute(
            operation: "AdminGetUser", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Given the username, returns details about a user profile in a user pool. This operation contributes to your monthly active user (MAU) count for the purpose of billing. You can specify alias attributes in the Username parameter.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - userPoolId: The ID of the user pool where you want to get information about the user.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminGetUser(
        username: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AdminGetUserResponse {
        let input = AdminGetUserRequest(
            username: username, 
            userPoolId: userPoolId
        )
        return try await self.adminGetUser(input, logger: logger)
    }

    /// Starts sign-in for applications with a server-side component, for example a traditional web application. This operation specifies the authentication flow that you'd like to begin. The authentication flow that you specify must be supported in your app client configuration. For more information about authentication flows, see Authentication flows.  This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.   Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminInitiateAuth(_ input: AdminInitiateAuthRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AdminInitiateAuthResponse {
        try await self.client.execute(
            operation: "AdminInitiateAuth", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts sign-in for applications with a server-side component, for example a traditional web application. This operation specifies the authentication flow that you'd like to begin. The authentication flow that you specify must be supported in your app client configuration. For more information about authentication flows, see Authentication flows.  This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.   Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - analyticsMetadata: The analytics metadata for collecting Amazon Pinpoint metrics.
    ///   - authFlow: The authentication flow that you want to initiate. Each AuthFlow has linked AuthParameters that you must submit. The following are some example flows and their parameters.    USER_AUTH: Request a preferred authentication type or review available authentication types. From the offered authentication types, select one in a challenge response and then authenticate with that method in an additional challenge response.    REFRESH_TOKEN_AUTH: Receive new ID and access tokens when you pass a REFRESH_TOKEN parameter with a valid refresh token as the value.    USER_SRP_AUTH: Receive secure remote password (SRP) variables for the next challenge, PASSWORD_VERIFIER, when you pass USERNAME and SRP_A parameters..    ADMIN_USER_PASSWORD_AUTH: Receive new tokens or the next challenge, for example SOFTWARE_TOKEN_MFA, when you pass USERNAME and PASSWORD parameters.    All flows   USER_AUTH  The entry point for sign-in with passwords, one-time passwords, and WebAuthN authenticators.  USER_SRP_AUTH  Username-password authentication with the Secure Remote Password (SRP) protocol. For more information, see Use SRP password verification in custom authentication flow.  REFRESH_TOKEN_AUTH and REFRESH_TOKEN  Provide a valid refresh token and receive new ID and access tokens. For more information, see Using the refresh token.  CUSTOM_AUTH  Custom authentication with Lambda triggers. For more information, see Custom authentication challenge Lambda triggers.  ADMIN_USER_PASSWORD_AUTH  Username-password authentication with the password sent directly in the request. For more information, see Admin authentication flow.    USER_PASSWORD_AUTH is a flow type of InitiateAuth and isn't valid for AdminInitiateAuth.
    ///   - authParameters: The authentication parameters. These are inputs corresponding to the AuthFlow that you're invoking. The required values depend on the value of AuthFlow:   For USER_AUTH: USERNAME (required), PREFERRED_CHALLENGE. If you don't provide a value for PREFERRED_CHALLENGE, Amazon Cognito responds with the AvailableChallenges parameter that specifies the available sign-in methods.   For USER_SRP_AUTH: USERNAME (required), SRP_A (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY.   For ADMIN_USER_PASSWORD_AUTH: USERNAME (required), PASSWORD (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY.   For REFRESH_TOKEN_AUTH/REFRESH_TOKEN: REFRESH_TOKEN (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY.   For CUSTOM_AUTH: USERNAME (required), SECRET_HASH (if app client is configured with client secret), DEVICE_KEY. To start the authentication flow with password verification, include ChallengeName: SRP_A and SRP_A: (The SRP_A Value).   For more information about SECRET_HASH, see Computing secret hash values. For information about DEVICE_KEY, see Working with user devices in your user pool.
    ///   - clientId: The ID of the app client where the user wants to sign in.
    ///   - clientMetadata: A map of custom key-value pairs that you can provide as input for certain custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminInitiateAuth API action, Amazon Cognito invokes the Lambda functions that are specified for various triggers. The ClientMetadata value is passed as input to the functions for only the following triggers:   Pre signup   Pre authentication   User migration   When Amazon Cognito invokes the functions for these triggers, it passes a JSON payload, which the function receives as input. This payload contains a validationData attribute, which provides the data that you assigned to the ClientMetadata parameter in your AdminInitiateAuth request. In your function code in Lambda, you can process the validationData value to enhance your workflow for your specific needs. When you use the AdminInitiateAuth API action, Amazon Cognito also invokes the functions for the following triggers, but it doesn't provide the ClientMetadata value as input:   Post authentication   Custom message   Pre token generation   Create auth challenge   Define auth challenge   Custom email sender   Custom SMS sender   For more information, see
    ///   - contextData: Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced
    ///   - session: The optional session ID from a ConfirmSignUp API request. You can sign in a user directly from the sign-up process with an AuthFlow of USER_AUTH and AuthParameters of EMAIL_OTP or SMS_OTP, depending on how your user pool sent the confirmation-code message.
    ///   - userPoolId: The ID of the user pool where the user wants to sign in.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminInitiateAuth(
        analyticsMetadata: AnalyticsMetadataType? = nil,
        authFlow: AuthFlowType,
        authParameters: [String: String]? = nil,
        clientId: String,
        clientMetadata: [String: String]? = nil,
        contextData: ContextDataType? = nil,
        session: String? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AdminInitiateAuthResponse {
        let input = AdminInitiateAuthRequest(
            analyticsMetadata: analyticsMetadata, 
            authFlow: authFlow, 
            authParameters: authParameters, 
            clientId: clientId, 
            clientMetadata: clientMetadata, 
            contextData: contextData, 
            session: session, 
            userPoolId: userPoolId
        )
        return try await self.adminInitiateAuth(input, logger: logger)
    }

    /// Links an existing user account in a user pool (DestinationUser) to an identity from an external IdP (SourceUser) based on a specified attribute name and value from the external IdP. This allows you to create a link from the existing user account to an external federated user identity that has not yet been used to sign in. You can then use the federated user identity to sign in as the existing user account.  For example, if there is an existing user with a username and password, this API links that user to a federated user identity. When the user signs in with a federated user identity, they sign in as the existing user account.  The maximum number of federated identities linked to a user is five.   Because this API allows a user with an external federated identity to sign in as an existing user in the user pool, it is critical that it only be used with external IdPs and provider attributes that have been trusted by the application owner.   Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminLinkProviderForUser(_ input: AdminLinkProviderForUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AdminLinkProviderForUserResponse {
        try await self.client.execute(
            operation: "AdminLinkProviderForUser", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Links an existing user account in a user pool (DestinationUser) to an identity from an external IdP (SourceUser) based on a specified attribute name and value from the external IdP. This allows you to create a link from the existing user account to an external federated user identity that has not yet been used to sign in. You can then use the federated user identity to sign in as the existing user account.  For example, if there is an existing user with a username and password, this API links that user to a federated user identity. When the user signs in with a federated user identity, they sign in as the existing user account.  The maximum number of federated identities linked to a user is five.   Because this API allows a user with an external federated identity to sign in as an existing user in the user pool, it is critical that it only be used with external IdPs and provider attributes that have been trusted by the application owner.   Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - destinationUser: The existing user in the user pool that you want to assign to the external IdP user account. This user can be a local (Username + Password) Amazon Cognito user pools user or a federated user (for example, a SAML or Facebook user). If the user doesn't exist, Amazon Cognito generates an exception. Amazon Cognito returns this user when the new user (with the linked IdP attribute) signs in. For a native username + password user, the ProviderAttributeValue for the DestinationUser should be the username in the user pool. For a federated user, it should be the provider-specific user_id. The ProviderAttributeName of the DestinationUser is ignored. The ProviderName should be set to Cognito for users in Cognito user pools.  All attributes in the DestinationUser profile must be mutable. If you have assigned the user any immutable custom attributes, the operation won't succeed.
    ///   - sourceUser: An external IdP account for a user who doesn't exist yet in the user pool. This user must be a federated user (for example, a SAML or Facebook user), not another native user. If the SourceUser is using a federated social IdP, such as Facebook, Google, or Login with Amazon, you must set the ProviderAttributeName to Cognito_Subject. For social IdPs, the ProviderName will be Facebook, Google, or LoginWithAmazon, and Amazon Cognito will automatically parse the Facebook, Google, and Login with Amazon tokens for id, sub, and user_id, respectively. The ProviderAttributeValue for the user must be the same value as the id, sub, or user_id value found in the social IdP token. For OIDC, the ProviderAttributeName can be any mapped value from a claim in the ID token, or that your app retrieves from the userInfo endpoint. For SAML, the ProviderAttributeName can be any mapped value from a claim in the SAML assertion. The following additional considerations apply to SourceUser for OIDC and SAML providers.   You must map the claim to a user pool attribute in your IdP configuration, and set the user pool attribute name as the value of ProviderAttributeName in your AdminLinkProviderForUser request. For example, email.   When you set ProviderAttributeName to Cognito_Subject, Amazon Cognito will automatically parse the default unique identifier found in the subject from the IdP token.
    ///   - userPoolId: The ID of the user pool where you want to link a federated identity.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminLinkProviderForUser(
        destinationUser: ProviderUserIdentifierType,
        sourceUser: ProviderUserIdentifierType,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AdminLinkProviderForUserResponse {
        let input = AdminLinkProviderForUserRequest(
            destinationUser: destinationUser, 
            sourceUser: sourceUser, 
            userPoolId: userPoolId
        )
        return try await self.adminLinkProviderForUser(input, logger: logger)
    }

    /// Lists a user's registered devices. Remembered devices are used in authentication services where you offer a "Remember me" option for users who you want to permit to sign in without MFA from a trusted device. Users can bypass MFA while your application performs device SRP authentication on the back end. For more information, see Working with devices.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminListDevices(_ input: AdminListDevicesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AdminListDevicesResponse {
        try await self.client.execute(
            operation: "AdminListDevices", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists a user's registered devices. Remembered devices are used in authentication services where you offer a "Remember me" option for users who you want to permit to sign in without MFA from a trusted device. Users can bypass MFA while your application performs device SRP authentication on the back end. For more information, see Working with devices.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - limit: The maximum number of devices that you want Amazon Cognito to return in the response.
    ///   - paginationToken: This API operation returns a limited number of results. The pagination token is
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - userPoolId: The ID of the user pool where the device owner is a user.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminListDevices(
        limit: Int? = nil,
        paginationToken: String? = nil,
        username: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AdminListDevicesResponse {
        let input = AdminListDevicesRequest(
            limit: limit, 
            paginationToken: paginationToken, 
            username: username, 
            userPoolId: userPoolId
        )
        return try await self.adminListDevices(input, logger: logger)
    }

    /// Lists the groups that a user belongs to. User pool groups are identifiers that you can reference from the contents of ID and access tokens, and set preferred IAM roles for identity-pool authentication. For more information, see Adding groups to a user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminListGroupsForUser(_ input: AdminListGroupsForUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AdminListGroupsForUserResponse {
        try await self.client.execute(
            operation: "AdminListGroupsForUser", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the groups that a user belongs to. User pool groups are identifiers that you can reference from the contents of ID and access tokens, and set preferred IAM roles for identity-pool authentication. For more information, see Adding groups to a user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - limit: The maximum number of groups that you want Amazon Cognito to return in the response.
    ///   - nextToken: This API operation returns a limited number of results. The pagination token is
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - userPoolId: The ID of the user pool where you want to view a user's groups.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminListGroupsForUser(
        limit: Int? = nil,
        nextToken: String? = nil,
        username: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AdminListGroupsForUserResponse {
        let input = AdminListGroupsForUserRequest(
            limit: limit, 
            nextToken: nextToken, 
            username: username, 
            userPoolId: userPoolId
        )
        return try await self.adminListGroupsForUser(input, logger: logger)
    }

    /// Requests a history of user activity and any risks detected as part of Amazon Cognito threat protection. For more information, see Viewing user event history.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminListUserAuthEvents(_ input: AdminListUserAuthEventsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AdminListUserAuthEventsResponse {
        try await self.client.execute(
            operation: "AdminListUserAuthEvents", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Requests a history of user activity and any risks detected as part of Amazon Cognito threat protection. For more information, see Viewing user event history.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of authentication events to return. Returns 60 events if you set MaxResults to 0, or if you don't include a MaxResults parameter.
    ///   - nextToken: This API operation returns a limited number of results. The pagination token is
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - userPoolId: The Id of the user pool that contains the user profile with the logged events.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminListUserAuthEvents(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        username: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AdminListUserAuthEventsResponse {
        let input = AdminListUserAuthEventsRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            username: username, 
            userPoolId: userPoolId
        )
        return try await self.adminListUserAuthEvents(input, logger: logger)
    }

    /// Given a username and a group name. removes them from the group. User pool groups are identifiers that you can reference from the contents of ID and access tokens, and set preferred IAM roles for identity-pool authentication. For more information, see Adding groups to a user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminRemoveUserFromGroup(_ input: AdminRemoveUserFromGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "AdminRemoveUserFromGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Given a username and a group name. removes them from the group. User pool groups are identifiers that you can reference from the contents of ID and access tokens, and set preferred IAM roles for identity-pool authentication. For more information, see Adding groups to a user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - groupName: The name of the group that you want to remove the user from, for example MyTestGroup.
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - userPoolId: The ID of the user pool that contains the group and the user that you want to remove.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminRemoveUserFromGroup(
        groupName: String,
        username: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = AdminRemoveUserFromGroupRequest(
            groupName: groupName, 
            username: username, 
            userPoolId: userPoolId
        )
        return try await self.adminRemoveUserFromGroup(input, logger: logger)
    }

    /// Resets the specified user's password in a user pool. This operation doesn't change the user's password, but sends a password-reset code. This operation is the administrative authentication API equivalent to ForgotPassword. This operation deactivates a user's password, requiring them to change it. If a user tries to sign in after the API request, Amazon Cognito responds with a PasswordResetRequiredException error. Your app must then complete the forgot-password flow by prompting the user for their code and a new password, then submitting those values in a ConfirmForgotPassword request. In addition, if the user pool has phone verification selected and a verified phone number exists for the user, or if email verification is selected and a verified email exists for the user, calling this API will also result in sending a message to the end user with the code to change their password. To use this API operation, your user pool must have self-service account recovery configured. Use AdminSetUserPassword if you manage passwords as an administrator.  This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.   Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminResetUserPassword(_ input: AdminResetUserPasswordRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AdminResetUserPasswordResponse {
        try await self.client.execute(
            operation: "AdminResetUserPassword", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Resets the specified user's password in a user pool. This operation doesn't change the user's password, but sends a password-reset code. This operation is the administrative authentication API equivalent to ForgotPassword. This operation deactivates a user's password, requiring them to change it. If a user tries to sign in after the API request, Amazon Cognito responds with a PasswordResetRequiredException error. Your app must then complete the forgot-password flow by prompting the user for their code and a new password, then submitting those values in a ConfirmForgotPassword request. In addition, if the user pool has phone verification selected and a verified phone number exists for the user, or if email verification is selected and a verified email exists for the user, calling this API will also result in sending a message to the end user with the code to change their password. To use this API operation, your user pool must have self-service account recovery configured. Use AdminSetUserPassword if you manage passwords as an administrator.  This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.   Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - clientMetadata: A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. The AdminResetUserPassword API operation invokes the function that is assigned to the custom message trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your AdminResetUserPassword request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs.  For more information, see
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - userPoolId: The ID of the user pool where you want to reset the user's password.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminResetUserPassword(
        clientMetadata: [String: String]? = nil,
        username: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AdminResetUserPasswordResponse {
        let input = AdminResetUserPasswordRequest(
            clientMetadata: clientMetadata, 
            username: username, 
            userPoolId: userPoolId
        )
        return try await self.adminResetUserPassword(input, logger: logger)
    }

    /// Some API operations in a user pool generate a challenge, like a prompt for an MFA code, for device authentication that bypasses MFA, or for a custom authentication challenge. An AdminRespondToAuthChallenge API request provides the answer to that challenge, like a code or a secure remote password (SRP). The parameters of a response to an authentication challenge vary with the type of challenge. For more information about custom authentication challenges, see Custom authentication challenge Lambda triggers.  This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.   Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminRespondToAuthChallenge(_ input: AdminRespondToAuthChallengeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AdminRespondToAuthChallengeResponse {
        try await self.client.execute(
            operation: "AdminRespondToAuthChallenge", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Some API operations in a user pool generate a challenge, like a prompt for an MFA code, for device authentication that bypasses MFA, or for a custom authentication challenge. An AdminRespondToAuthChallenge API request provides the answer to that challenge, like a code or a secure remote password (SRP). The parameters of a response to an authentication challenge vary with the type of challenge. For more information about custom authentication challenges, see Custom authentication challenge Lambda triggers.  This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.   Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - analyticsMetadata: The analytics metadata for collecting Amazon Pinpoint metrics for AdminRespondToAuthChallenge calls.
    ///   - challengeName: The name of the challenge that you are responding to. You can find more information about values for ChallengeName in the response parameters of AdminInitiateAuth.
    ///   - challengeResponses: The responses to the challenge that you received in the previous request. Each challenge has its own required response parameters. The following examples are partial JSON request bodies that highlight challenge-response parameters.  You must provide a SECRET_HASH parameter in all challenge responses to an app client that has a client secret. Include a DEVICE_KEY for device authentication.   SELECT_CHALLENGE   "ChallengeName": "SELECT_CHALLENGE", "ChallengeResponses": { "USERNAME": "[username]", "ANSWER": "[Challenge name]"}  Available challenges are PASSWORD, PASSWORD_SRP,  EMAIL_OTP, SMS_OTP, and WEB_AUTHN. Complete authentication in the SELECT_CHALLENGE response for PASSWORD, PASSWORD_SRP, and WEB_AUTHN:    "ChallengeName": "SELECT_CHALLENGE", "ChallengeResponses": { "ANSWER": "WEB_AUTHN", "USERNAME": "[username]", "CREDENTIAL": "[AuthenticationResponseJSON]"}  See  AuthenticationResponseJSON.    "ChallengeName": "SELECT_CHALLENGE", "ChallengeResponses": { "ANSWER": "PASSWORD", "USERNAME": "[username]", "PASSWORD": "[password]"}     "ChallengeName": "SELECT_CHALLENGE", "ChallengeResponses": { "ANSWER": "PASSWORD_SRP", "USERNAME": "[username]", "SRP_A": "[SRP_A]"}    For SMS_OTP and EMAIL_OTP, respond with the username and answer. Your user pool will send a code for the user to submit in the next challenge response.    "ChallengeName": "SELECT_CHALLENGE", "ChallengeResponses": { "ANSWER": "SMS_OTP", "USERNAME": "[username]"}     "ChallengeName": "SELECT_CHALLENGE", "ChallengeResponses": { "ANSWER": "EMAIL_OTP", "USERNAME": "[username]"}     SMS_OTP   "ChallengeName": "SMS_OTP", "ChallengeResponses":  {"SMS_OTP_CODE": "[code]", "USERNAME": "[username]"}   EMAIL_OTP   "ChallengeName": "EMAIL_OTP", "ChallengeResponses": {"EMAIL_OTP_CODE": "[code]", "USERNAME": "[username]"}   SMS_MFA   "ChallengeName": "SMS_MFA", "ChallengeResponses": {"SMS_MFA_CODE": "[code]", "USERNAME": "[username]"}   PASSWORD_VERIFIER  This challenge response is part of the SRP flow. Amazon Cognito requires  that your application respond to this challenge within a few seconds. When the response time exceeds this period, your user pool returns a NotAuthorizedException error.  "ChallengeName": "PASSWORD_VERIFIER", "ChallengeResponses": {"PASSWORD_CLAIM_SIGNATURE": "[claim_signature]", "PASSWORD_CLAIM_SECRET_BLOCK": "[secret_block]", "TIMESTAMP": [timestamp], "USERNAME": "[username]"}  Add "DEVICE_KEY" when you sign in with a remembered device.  CUSTOM_CHALLENGE   "ChallengeName": "CUSTOM_CHALLENGE", "ChallengeResponses": {"USERNAME": "[username]", "ANSWER": "[challenge_answer]"}  Add "DEVICE_KEY" when you sign in with a remembered device.  NEW_PASSWORD_REQUIRED   "ChallengeName": "NEW_PASSWORD_REQUIRED", "ChallengeResponses": {"NEW_PASSWORD": "[new_password]", "USERNAME": "[username]"}  To set any required attributes that InitiateAuth returned in an requiredAttributes parameter, add "userAttributes.[attribute_name]": "[attribute_value]". This parameter can also set values for writable attributes that aren't required by your user pool.  In a NEW_PASSWORD_REQUIRED challenge response, you can't modify a required attribute that already has a value.
    ///   - clientId: The ID of the app client where you initiated sign-in.
    ///   - clientMetadata: A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminRespondToAuthChallenge API action, Amazon Cognito invokes any functions that you have assigned to the following triggers:    Pre sign-up   custom message   Post authentication   User migration   Pre token generation   Define auth challenge   Create auth challenge   Verify auth challenge response   When Amazon Cognito invokes any of these functions, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute that provides the data that you assigned to the ClientMetadata parameter in your AdminRespondToAuthChallenge request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see
    ///   - contextData: Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced
    ///   - session: The session identifier that maintains the state of authentication requests and challenge responses. If an AdminInitiateAuth or AdminRespondToAuthChallenge API request results in a determination that your application must pass another challenge, Amazon Cognito returns a session with other challenge parameters. Send this session identifier, unmodified, to the next AdminRespondToAuthChallenge request.
    ///   - userPoolId: The ID of the user pool where you want to respond to an authentication challenge.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminRespondToAuthChallenge(
        analyticsMetadata: AnalyticsMetadataType? = nil,
        challengeName: ChallengeNameType,
        challengeResponses: [String: String]? = nil,
        clientId: String,
        clientMetadata: [String: String]? = nil,
        contextData: ContextDataType? = nil,
        session: String? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AdminRespondToAuthChallengeResponse {
        let input = AdminRespondToAuthChallengeRequest(
            analyticsMetadata: analyticsMetadata, 
            challengeName: challengeName, 
            challengeResponses: challengeResponses, 
            clientId: clientId, 
            clientMetadata: clientMetadata, 
            contextData: contextData, 
            session: session, 
            userPoolId: userPoolId
        )
        return try await self.adminRespondToAuthChallenge(input, logger: logger)
    }

    /// Sets the user's multi-factor authentication (MFA) preference, including which MFA options are activated, and if any are preferred. Only one factor can be set as preferred. The preferred MFA factor will be used to authenticate a user if multiple factors are activated. If multiple options are activated and no preference is set, a challenge to choose an MFA option will be returned during sign-in. This operation doesn't reset an existing TOTP MFA for a user. To register a new TOTP factor for a user, make an AssociateSoftwareToken request. For more information, see TOTP software token MFA.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminSetUserMFAPreference(_ input: AdminSetUserMFAPreferenceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AdminSetUserMFAPreferenceResponse {
        try await self.client.execute(
            operation: "AdminSetUserMFAPreference", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sets the user's multi-factor authentication (MFA) preference, including which MFA options are activated, and if any are preferred. Only one factor can be set as preferred. The preferred MFA factor will be used to authenticate a user if multiple factors are activated. If multiple options are activated and no preference is set, a challenge to choose an MFA option will be returned during sign-in. This operation doesn't reset an existing TOTP MFA for a user. To register a new TOTP factor for a user, make an AssociateSoftwareToken request. For more information, see TOTP software token MFA.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - emailMfaSettings: User preferences for email message MFA. Activates or deactivates email MFA and sets it as the preferred MFA method when multiple methods are available. To activate this setting,  advanced security features must be active in your user pool.
    ///   - smsMfaSettings: User preferences for SMS message MFA. Activates or deactivates SMS MFA and sets it as the preferred MFA method when multiple methods are available.
    ///   - softwareTokenMfaSettings: User preferences for time-based one-time password (TOTP) MFA. Activates or deactivates TOTP MFA and sets it as the preferred MFA method when multiple methods are available.
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - userPoolId: The ID of the user pool where you want to set a user's MFA preferences.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminSetUserMFAPreference(
        emailMfaSettings: EmailMfaSettingsType? = nil,
        smsMfaSettings: SMSMfaSettingsType? = nil,
        softwareTokenMfaSettings: SoftwareTokenMfaSettingsType? = nil,
        username: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AdminSetUserMFAPreferenceResponse {
        let input = AdminSetUserMFAPreferenceRequest(
            emailMfaSettings: emailMfaSettings, 
            smsMfaSettings: smsMfaSettings, 
            softwareTokenMfaSettings: softwareTokenMfaSettings, 
            username: username, 
            userPoolId: userPoolId
        )
        return try await self.adminSetUserMFAPreference(input, logger: logger)
    }

    /// Sets the specified user's password in a user pool. This operation administratively sets a temporary or permanent password for a user. With this operation, you can bypass self-service password changes and permit immediate sign-in with the password that you set. To do this, set Permanent to true. You can also set a new temporary password in this request, send it to a user, and require them to choose a new password on their next sign-in. To do this, set Permanent to false. If the password is temporary, the user's Status becomes FORCE_CHANGE_PASSWORD. When the user next tries to sign in, the InitiateAuth or AdminInitiateAuth response includes the NEW_PASSWORD_REQUIRED challenge. If the user doesn't sign in before the temporary password expires, they can no longer sign in and you must repeat this operation to set a temporary or permanent password for them. After the user sets a new password, or if you set a permanent password, their status becomes Confirmed.  AdminSetUserPassword can set a password for the user profile that Amazon Cognito creates for third-party federated users. When you set a password, the federated user's status changes from EXTERNAL_PROVIDER to CONFIRMED. A user in this state can sign in as a federated user, and initiate authentication flows in the API like a linked native user. They can also modify their password and attributes in token-authenticated API requests like ChangePassword and UpdateUserAttributes. As a best security practice and to keep users in sync with your external IdP, don't set passwords on federated user profiles. To set up a federated user for native sign-in with a linked native user, refer to Linking federated users to an existing user profile.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminSetUserPassword(_ input: AdminSetUserPasswordRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AdminSetUserPasswordResponse {
        try await self.client.execute(
            operation: "AdminSetUserPassword", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sets the specified user's password in a user pool. This operation administratively sets a temporary or permanent password for a user. With this operation, you can bypass self-service password changes and permit immediate sign-in with the password that you set. To do this, set Permanent to true. You can also set a new temporary password in this request, send it to a user, and require them to choose a new password on their next sign-in. To do this, set Permanent to false. If the password is temporary, the user's Status becomes FORCE_CHANGE_PASSWORD. When the user next tries to sign in, the InitiateAuth or AdminInitiateAuth response includes the NEW_PASSWORD_REQUIRED challenge. If the user doesn't sign in before the temporary password expires, they can no longer sign in and you must repeat this operation to set a temporary or permanent password for them. After the user sets a new password, or if you set a permanent password, their status becomes Confirmed.  AdminSetUserPassword can set a password for the user profile that Amazon Cognito creates for third-party federated users. When you set a password, the federated user's status changes from EXTERNAL_PROVIDER to CONFIRMED. A user in this state can sign in as a federated user, and initiate authentication flows in the API like a linked native user. They can also modify their password and attributes in token-authenticated API requests like ChangePassword and UpdateUserAttributes. As a best security practice and to keep users in sync with your external IdP, don't set passwords on federated user profiles. To set up a federated user for native sign-in with a linked native user, refer to Linking federated users to an existing user profile.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - password: The new temporary or permanent password that you want to set for the user. You can't remove the password for a user who already has a password so that they can only sign in with passwordless methods. In this scenario, you must create a new user without a password.
    ///   - permanent: Set to true to set a password that the user can immediately sign in with. Set to false to set a temporary password that the user must change on their next sign-in.
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - userPoolId: The ID of the user pool where you want to set the user's password.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminSetUserPassword(
        password: String,
        permanent: Bool? = nil,
        username: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AdminSetUserPasswordResponse {
        let input = AdminSetUserPasswordRequest(
            password: password, 
            permanent: permanent, 
            username: username, 
            userPoolId: userPoolId
        )
        return try await self.adminSetUserPassword(input, logger: logger)
    }

    ///  This action is no longer supported. You can use it to configure only SMS MFA. You can't use it to configure time-based one-time password (TOTP) software token MFA. To configure either type of MFA, use AdminSetUserMFAPreference instead.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminSetUserSettings(_ input: AdminSetUserSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AdminSetUserSettingsResponse {
        try await self.client.execute(
            operation: "AdminSetUserSettings", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  This action is no longer supported. You can use it to configure only SMS MFA. You can't use it to configure time-based one-time password (TOTP) software token MFA. To configure either type of MFA, use AdminSetUserMFAPreference instead.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - mfaOptions: You can use this parameter only to set an SMS configuration that uses SMS for delivery.
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - userPoolId: The ID of the user pool that contains the user whose options you're setting.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminSetUserSettings(
        mfaOptions: [MFAOptionType],
        username: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AdminSetUserSettingsResponse {
        let input = AdminSetUserSettingsRequest(
            mfaOptions: mfaOptions, 
            username: username, 
            userPoolId: userPoolId
        )
        return try await self.adminSetUserSettings(input, logger: logger)
    }

    /// Provides feedback for an authentication event indicating if it was from a valid user. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito threat protection. To train the threat-protection model to recognize trusted and untrusted sign-in characteristics, configure threat protection in audit-only mode and provide a mechanism for users or administrators to submit feedback. Your feedback can tell Amazon Cognito that a risk rating was assigned at a level you don't agree with.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminUpdateAuthEventFeedback(_ input: AdminUpdateAuthEventFeedbackRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AdminUpdateAuthEventFeedbackResponse {
        try await self.client.execute(
            operation: "AdminUpdateAuthEventFeedback", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides feedback for an authentication event indicating if it was from a valid user. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito threat protection. To train the threat-protection model to recognize trusted and untrusted sign-in characteristics, configure threat protection in audit-only mode and provide a mechanism for users or administrators to submit feedback. Your feedback can tell Amazon Cognito that a risk rating was assigned at a level you don't agree with.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - eventId: The authentication event ID. To query authentication events for a user, see AdminListUserAuthEvents.
    ///   - feedbackValue: The authentication event feedback value. When you provide a FeedbackValue
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - userPoolId: The ID of the user pool where you want to submit authentication-event feedback.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminUpdateAuthEventFeedback(
        eventId: String,
        feedbackValue: FeedbackValueType,
        username: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AdminUpdateAuthEventFeedbackResponse {
        let input = AdminUpdateAuthEventFeedbackRequest(
            eventId: eventId, 
            feedbackValue: feedbackValue, 
            username: username, 
            userPoolId: userPoolId
        )
        return try await self.adminUpdateAuthEventFeedback(input, logger: logger)
    }

    /// Updates the status of a user's device so that it is marked as remembered or not remembered for the purpose of device authentication. Device authentication is a "remember me" mechanism that silently completes sign-in from trusted devices with a device key instead of a user-provided MFA code. This operation changes the status of a device without deleting it, so you can enable it again later. For more information about device authentication, see Working with devices.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminUpdateDeviceStatus(_ input: AdminUpdateDeviceStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AdminUpdateDeviceStatusResponse {
        try await self.client.execute(
            operation: "AdminUpdateDeviceStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the status of a user's device so that it is marked as remembered or not remembered for the purpose of device authentication. Device authentication is a "remember me" mechanism that silently completes sign-in from trusted devices with a device key instead of a user-provided MFA code. This operation changes the status of a device without deleting it, so you can enable it again later. For more information about device authentication, see Working with devices.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - deviceKey: The unique identifier, or device key, of the device that you want to update the status for.
    ///   - deviceRememberedStatus: To enable device authentication with the specified device, set to remembered.To disable, set to not_remembered.
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - userPoolId: The ID of the user pool where you want to change a user's device status.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminUpdateDeviceStatus(
        deviceKey: String,
        deviceRememberedStatus: DeviceRememberedStatusType? = nil,
        username: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AdminUpdateDeviceStatusResponse {
        let input = AdminUpdateDeviceStatusRequest(
            deviceKey: deviceKey, 
            deviceRememberedStatus: deviceRememberedStatus, 
            username: username, 
            userPoolId: userPoolId
        )
        return try await self.adminUpdateDeviceStatus(input, logger: logger)
    }

    ///  This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.  Updates the specified user's attributes. To delete an attribute from your user, submit the attribute in your API request with a blank value. For custom attributes, you must prepend the custom: prefix to the attribute name. This operation can set a user's email address or phone number as verified and permit immediate sign-in in user pools that require verification of these attributes. To do this, set the email_verified or phone_number_verified attribute to true.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminUpdateUserAttributes(_ input: AdminUpdateUserAttributesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AdminUpdateUserAttributesResponse {
        try await self.client.execute(
            operation: "AdminUpdateUserAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.  Updates the specified user's attributes. To delete an attribute from your user, submit the attribute in your API request with a blank value. For custom attributes, you must prepend the custom: prefix to the attribute name. This operation can set a user's email address or phone number as verified and permit immediate sign-in in user pools that require verification of these attributes. To do this, set the email_verified or phone_number_verified attribute to true.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - clientMetadata: A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminUpdateUserAttributes API action, Amazon Cognito invokes the function that is assigned to the custom message trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your AdminUpdateUserAttributes request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see
    ///   - userAttributes: An array of name-value pairs representing user attributes. For custom attributes, you must prepend the custom: prefix to the attribute name. If your user pool requires verification before Amazon Cognito updates an attribute value that you specify in this request, Amazon Cognito doesn’t immediately update the value of that attribute. After your user receives and responds to a verification message to verify the new value, Amazon Cognito updates the attribute value. Your user can sign in and receive messages with the original attribute value until they verify the new value. To skip the verification message and update the value of an attribute that requires verification in the same API request, include the email_verified or phone_number_verified attribute, with a value of true. If you set the email_verified or phone_number_verified value for an email or phone_number attribute that requires verification to true, Amazon Cognito doesn’t send a verification message to your user.
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - userPoolId: The ID of the user pool where you want to update user attributes.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminUpdateUserAttributes(
        clientMetadata: [String: String]? = nil,
        userAttributes: [AttributeType],
        username: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AdminUpdateUserAttributesResponse {
        let input = AdminUpdateUserAttributesRequest(
            clientMetadata: clientMetadata, 
            userAttributes: userAttributes, 
            username: username, 
            userPoolId: userPoolId
        )
        return try await self.adminUpdateUserAttributes(input, logger: logger)
    }

    /// Invalidates the identity, access, and refresh tokens that Amazon Cognito issued to a user. Call this operation with your administrative credentials when your user signs out of your app. This results in the following behavior.   Amazon Cognito no longer accepts token-authorized user operations that you authorize with a signed-out user's access tokens. For more information, see Using the Amazon Cognito user pools API and user pool endpoints. Amazon Cognito returns an Access Token has been revoked error when your app attempts to authorize a user pools API request with a revoked access token that contains the scope aws.cognito.signin.user.admin.   Amazon Cognito no longer accepts a signed-out user's ID token in a GetId  request to an identity pool with ServerSideTokenCheck enabled for its user pool IdP configuration in CognitoIdentityProvider.   Amazon Cognito no longer accepts a signed-out user's refresh tokens in refresh requests.   Other requests might be valid until your user's token expires. This operation doesn't clear the managed login session cookie. To clear the session for a user who signed in with managed login or the classic hosted UI, direct their browser session to the logout endpoint.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func adminUserGlobalSignOut(_ input: AdminUserGlobalSignOutRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AdminUserGlobalSignOutResponse {
        try await self.client.execute(
            operation: "AdminUserGlobalSignOut", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Invalidates the identity, access, and refresh tokens that Amazon Cognito issued to a user. Call this operation with your administrative credentials when your user signs out of your app. This results in the following behavior.   Amazon Cognito no longer accepts token-authorized user operations that you authorize with a signed-out user's access tokens. For more information, see Using the Amazon Cognito user pools API and user pool endpoints. Amazon Cognito returns an Access Token has been revoked error when your app attempts to authorize a user pools API request with a revoked access token that contains the scope aws.cognito.signin.user.admin.   Amazon Cognito no longer accepts a signed-out user's ID token in a GetId  request to an identity pool with ServerSideTokenCheck enabled for its user pool IdP configuration in CognitoIdentityProvider.   Amazon Cognito no longer accepts a signed-out user's refresh tokens in refresh requests.   Other requests might be valid until your user's token expires. This operation doesn't clear the managed login session cookie. To clear the session for a user who signed in with managed login or the classic hosted UI, direct their browser session to the logout endpoint.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - userPoolId: The ID of the user pool where you want to sign out a user.
    ///   - logger: Logger use during operation
    @inlinable
    public func adminUserGlobalSignOut(
        username: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AdminUserGlobalSignOutResponse {
        let input = AdminUserGlobalSignOutRequest(
            username: username, 
            userPoolId: userPoolId
        )
        return try await self.adminUserGlobalSignOut(input, logger: logger)
    }

    /// Begins setup of time-based one-time password (TOTP) multi-factor authentication (MFA) for a user, with a unique private key that Amazon Cognito generates and returns in the API response. You can authorize an AssociateSoftwareToken request with either the user's access token, or a session string from a challenge response that you received from Amazon Cognito.  Amazon Cognito disassociates an existing software token when you verify the new token in a VerifySoftwareToken API request. If you don't verify the software token and your user pool doesn't require MFA, the user can then authenticate with user name and password credentials alone. If your user pool requires TOTP MFA, Amazon Cognito generates an MFA_SETUP or SOFTWARE_TOKEN_SETUP challenge each time your user signs in. Complete setup with AssociateSoftwareToken and VerifySoftwareToken. After you set up software token MFA for your user, Amazon Cognito generates a SOFTWARE_TOKEN_MFA challenge when they authenticate. Respond to this challenge with your user's TOTP.   Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.  Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.
    @Sendable
    @inlinable
    public func associateSoftwareToken(_ input: AssociateSoftwareTokenRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateSoftwareTokenResponse {
        try await self.client.execute(
            operation: "AssociateSoftwareToken", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Begins setup of time-based one-time password (TOTP) multi-factor authentication (MFA) for a user, with a unique private key that Amazon Cognito generates and returns in the API response. You can authorize an AssociateSoftwareToken request with either the user's access token, or a session string from a challenge response that you received from Amazon Cognito.  Amazon Cognito disassociates an existing software token when you verify the new token in a VerifySoftwareToken API request. If you don't verify the software token and your user pool doesn't require MFA, the user can then authenticate with user name and password credentials alone. If your user pool requires TOTP MFA, Amazon Cognito generates an MFA_SETUP or SOFTWARE_TOKEN_SETUP challenge each time your user signs in. Complete setup with AssociateSoftwareToken and VerifySoftwareToken. After you set up software token MFA for your user, Amazon Cognito generates a SOFTWARE_TOKEN_MFA challenge when they authenticate. Respond to this challenge with your user's TOTP.   Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.  Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.
    ///
    /// Parameters:
    ///   - accessToken: A valid access token that Amazon Cognito issued to the user whose software token you want to generate. You can provide either an access token or a session ID in the request.
    ///   - session: The session identifier that maintains the state of authentication requests and challenge responses. In AssociateSoftwareToken, this is the session ID from a successful sign-in. You can provide either an access token or a session ID in the request.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateSoftwareToken(
        accessToken: String? = nil,
        session: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateSoftwareTokenResponse {
        let input = AssociateSoftwareTokenRequest(
            accessToken: accessToken, 
            session: session
        )
        return try await self.associateSoftwareToken(input, logger: logger)
    }

    /// Changes the password for a specified user in a user pool. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    @Sendable
    @inlinable
    public func changePassword(_ input: ChangePasswordRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ChangePasswordResponse {
        try await self.client.execute(
            operation: "ChangePassword", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Changes the password for a specified user in a user pool. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    ///
    /// Parameters:
    ///   - accessToken: A valid access token that Amazon Cognito issued to the user whose password you want to change.
    ///   - previousPassword: The user's previous password. Required if the user has a password. If the user has no password and only signs in with passwordless authentication options, you can omit this parameter.
    ///   - proposedPassword: A new password that you prompted the user to enter in your application.
    ///   - logger: Logger use during operation
    @inlinable
    public func changePassword(
        accessToken: String,
        previousPassword: String? = nil,
        proposedPassword: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ChangePasswordResponse {
        let input = ChangePasswordRequest(
            accessToken: accessToken, 
            previousPassword: previousPassword, 
            proposedPassword: proposedPassword
        )
        return try await self.changePassword(input, logger: logger)
    }

    /// Completes registration of a passkey authenticator for the current user. Your application provides data from a successful registration request with the data from the output of a  StartWebAuthnRegistration. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.
    @Sendable
    @inlinable
    public func completeWebAuthnRegistration(_ input: CompleteWebAuthnRegistrationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CompleteWebAuthnRegistrationResponse {
        try await self.client.execute(
            operation: "CompleteWebAuthnRegistration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Completes registration of a passkey authenticator for the current user. Your application provides data from a successful registration request with the data from the output of a  StartWebAuthnRegistration. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.
    ///
    /// Parameters:
    ///   - accessToken: A valid access token that Amazon Cognito issued to the user whose passkey registration you want to complete.
    ///   - credential: A RegistrationResponseJSON public-key credential response from the user's passkey provider.
    ///   - logger: Logger use during operation
    @inlinable
    public func completeWebAuthnRegistration(
        accessToken: String,
        credential: AWSDocument,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CompleteWebAuthnRegistrationResponse {
        let input = CompleteWebAuthnRegistrationRequest(
            accessToken: accessToken, 
            credential: credential
        )
        return try await self.completeWebAuthnRegistration(input, logger: logger)
    }

    /// Confirms a device that a user wants to remember. A remembered device is a "Remember me on this device" option for user pools that perform authentication with the device key of a trusted device in the back end, instead of a user-provided MFA code. For more information about device authentication, see Working with user devices in your user pool. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    @Sendable
    @inlinable
    public func confirmDevice(_ input: ConfirmDeviceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ConfirmDeviceResponse {
        try await self.client.execute(
            operation: "ConfirmDevice", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Confirms a device that a user wants to remember. A remembered device is a "Remember me on this device" option for user pools that perform authentication with the device key of a trusted device in the back end, instead of a user-provided MFA code. For more information about device authentication, see Working with user devices in your user pool. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    ///
    /// Parameters:
    ///   - accessToken: A valid access token that Amazon Cognito issued to the user whose device you want to confirm.
    ///   - deviceKey: The unique identifier, or device key, of the device that you want to update the status for.
    ///   - deviceName: A friendly name for the device, for example MyMobilePhone.
    ///   - deviceSecretVerifierConfig: The configuration of the device secret verifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func confirmDevice(
        accessToken: String,
        deviceKey: String,
        deviceName: String? = nil,
        deviceSecretVerifierConfig: DeviceSecretVerifierConfigType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ConfirmDeviceResponse {
        let input = ConfirmDeviceRequest(
            accessToken: accessToken, 
            deviceKey: deviceKey, 
            deviceName: deviceName, 
            deviceSecretVerifierConfig: deviceSecretVerifierConfig
        )
        return try await self.confirmDevice(input, logger: logger)
    }

    /// This public API operation accepts a confirmation code that Amazon Cognito sent to a user and accepts a new password for that user.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    @Sendable
    @inlinable
    public func confirmForgotPassword(_ input: ConfirmForgotPasswordRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ConfirmForgotPasswordResponse {
        try await self.client.execute(
            operation: "ConfirmForgotPassword", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// This public API operation accepts a confirmation code that Amazon Cognito sent to a user and accepts a new password for that user.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    ///
    /// Parameters:
    ///   - analyticsMetadata: The Amazon Pinpoint analytics metadata for collecting metrics for ConfirmForgotPassword calls.
    ///   - clientId: The ID of the app client where the user wants to reset their password. This parameter is an identifier of the client application that users are resetting their password from, but this operation resets users' passwords for all app clients in the user pool.
    ///   - clientMetadata: A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the ConfirmForgotPassword API action, Amazon Cognito invokes the function that is assigned to the post confirmation trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your ConfirmForgotPassword request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see
    ///   - confirmationCode: The confirmation code that your user pool sent in response to an AdminResetUserPassword or a ForgotPassword request.
    ///   - password: The new password that your user wants to set.
    ///   - secretHash: A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message. For more information about SecretHash, see Computing secret hash values.
    ///   - userContextData: Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - logger: Logger use during operation
    @inlinable
    public func confirmForgotPassword(
        analyticsMetadata: AnalyticsMetadataType? = nil,
        clientId: String,
        clientMetadata: [String: String]? = nil,
        confirmationCode: String,
        password: String,
        secretHash: String? = nil,
        userContextData: UserContextDataType? = nil,
        username: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ConfirmForgotPasswordResponse {
        let input = ConfirmForgotPasswordRequest(
            analyticsMetadata: analyticsMetadata, 
            clientId: clientId, 
            clientMetadata: clientMetadata, 
            confirmationCode: confirmationCode, 
            password: password, 
            secretHash: secretHash, 
            userContextData: userContextData, 
            username: username
        )
        return try await self.confirmForgotPassword(input, logger: logger)
    }

    /// This public API operation submits a code that Amazon Cognito sent to your user when they signed up in your user pool via the SignUp API operation. After your user enters their code, they confirm ownership of the email address or phone number that they provided, and their user account becomes active. Depending on your user pool configuration, your users will receive their confirmation code in an email or SMS message. Local users who signed up in your user pool are the only type of user who can confirm sign-up with a code. Users who federate through an external identity provider (IdP) have already been confirmed by their IdP. Administrator-created users, users created with the AdminCreateUser API operation, confirm their accounts when they respond to their invitation email message and choose a password. They do not receive a confirmation code. Instead, they receive a temporary password.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    @Sendable
    @inlinable
    public func confirmSignUp(_ input: ConfirmSignUpRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ConfirmSignUpResponse {
        try await self.client.execute(
            operation: "ConfirmSignUp", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// This public API operation submits a code that Amazon Cognito sent to your user when they signed up in your user pool via the SignUp API operation. After your user enters their code, they confirm ownership of the email address or phone number that they provided, and their user account becomes active. Depending on your user pool configuration, your users will receive their confirmation code in an email or SMS message. Local users who signed up in your user pool are the only type of user who can confirm sign-up with a code. Users who federate through an external identity provider (IdP) have already been confirmed by their IdP. Administrator-created users, users created with the AdminCreateUser API operation, confirm their accounts when they respond to their invitation email message and choose a password. They do not receive a confirmation code. Instead, they receive a temporary password.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    ///
    /// Parameters:
    ///   - analyticsMetadata: The Amazon Pinpoint analytics metadata for collecting metrics for ConfirmSignUp calls.
    ///   - clientId: The ID of the app client associated with the user pool.
    ///   - clientMetadata: A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the ConfirmSignUp API action, Amazon Cognito invokes the function that is assigned to the post confirmation trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your ConfirmSignUp request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see
    ///   - confirmationCode: The confirmation code that your user pool sent in response to the SignUp request.
    ///   - forceAliasCreation: When true, forces user confirmation despite any existing aliases. Defaults to false. A value of true migrates the alias from an existing user to the new user if an existing user already has the phone number or email address as an alias. Say, for example, that an existing user has an email attribute of bob@example.com and email is an alias in your user pool. If the new user also has an email of bob@example.com and your ConfirmSignUp response sets ForceAliasCreation to true, the new user can sign in with a username of bob@example.com and the existing user can no longer do so. If false and an attribute belongs to an existing alias, this request returns an AliasExistsException error. For more information about sign-in aliases, see Customizing sign-in attributes.
    ///   - secretHash: A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message. For more information about SecretHash, see Computing secret hash values.
    ///   - session: The optional session ID from a SignUp API request. You can sign in a user directly from the sign-up process with the USER_AUTH authentication flow.
    ///   - userContextData: Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - logger: Logger use during operation
    @inlinable
    public func confirmSignUp(
        analyticsMetadata: AnalyticsMetadataType? = nil,
        clientId: String,
        clientMetadata: [String: String]? = nil,
        confirmationCode: String,
        forceAliasCreation: Bool? = nil,
        secretHash: String? = nil,
        session: String? = nil,
        userContextData: UserContextDataType? = nil,
        username: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ConfirmSignUpResponse {
        let input = ConfirmSignUpRequest(
            analyticsMetadata: analyticsMetadata, 
            clientId: clientId, 
            clientMetadata: clientMetadata, 
            confirmationCode: confirmationCode, 
            forceAliasCreation: forceAliasCreation, 
            secretHash: secretHash, 
            session: session, 
            userContextData: userContextData, 
            username: username
        )
        return try await self.confirmSignUp(input, logger: logger)
    }

    /// Creates a new group in the specified user pool. For more information about user pool groups see Adding groups to a user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func createGroup(_ input: CreateGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateGroupResponse {
        try await self.client.execute(
            operation: "CreateGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new group in the specified user pool. For more information about user pool groups see Adding groups to a user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - description: A description of the group that you're creating.
    ///   - groupName: A name for the group. This name must be unique in your user pool.
    ///   - precedence: A non-negative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. Zero is the highest precedence value. Groups with lower Precedence values take precedence over groups with higher or null Precedence values. If a user belongs to two or more groups, it is the group with the lowest precedence value whose role ARN is given in the user's tokens for the cognito:roles and cognito:preferred_role claims. Two groups can have the same Precedence value. If this happens, neither group takes precedence over the other. If two groups with the same Precedence have the same role ARN, that role is used in the cognito:preferred_role claim in tokens for users in each group. If the two groups have different role ARNs, the cognito:preferred_role claim isn't set in users' tokens. The default Precedence value is null. The maximum Precedence value is 2^31-1.
    ///   - roleArn: The Amazon Resource Name (ARN) for the IAM role that you want to associate with the group. A group role primarily declares a preferred role for the credentials that you get from an identity pool. Amazon Cognito ID tokens have a cognito:preferred_role claim that presents the highest-precedence group that a user belongs to. Both ID and access tokens also contain a cognito:groups claim that list all the groups that a user is a member of.
    ///   - userPoolId: The ID of the user pool where you want to create a user group.
    ///   - logger: Logger use during operation
    @inlinable
    public func createGroup(
        description: String? = nil,
        groupName: String,
        precedence: Int? = nil,
        roleArn: String? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateGroupResponse {
        let input = CreateGroupRequest(
            description: description, 
            groupName: groupName, 
            precedence: precedence, 
            roleArn: roleArn, 
            userPoolId: userPoolId
        )
        return try await self.createGroup(input, logger: logger)
    }

    /// Adds a configuration and trust relationship between a third-party identity provider (IdP) and a user pool. Amazon Cognito accepts sign-in with third-party identity providers through managed login and OIDC relying-party libraries. For more information, see Third-party IdP sign-in.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func createIdentityProvider(_ input: CreateIdentityProviderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateIdentityProviderResponse {
        try await self.client.execute(
            operation: "CreateIdentityProvider", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds a configuration and trust relationship between a third-party identity provider (IdP) and a user pool. Amazon Cognito accepts sign-in with third-party identity providers through managed login and OIDC relying-party libraries. For more information, see Third-party IdP sign-in.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - attributeMapping: A mapping of IdP attributes to standard and custom user pool attributes. Specify a user pool attribute as the key of the key-value pair, and the IdP attribute claim name as the value.
    ///   - idpIdentifiers: An array of IdP identifiers, for example "IdPIdentifiers": [ "MyIdP", "MyIdP2" ]. Identifiers are friendly names that you can pass in the idp_identifier query parameter of requests to the Authorize endpoint to silently redirect to sign-in with the associated IdP. Identifiers in a domain format also enable the use of email-address matching with SAML providers.
    ///   - providerDetails: The scopes, URLs, and identifiers for your external identity provider. The following
    ///   - providerName: The name that you want to assign to the IdP. You can pass the identity provider name in the identity_provider query parameter of requests to the Authorize endpoint to silently redirect to sign-in with the associated IdP.
    ///   - providerType: The type of IdP that you want to add. Amazon Cognito supports OIDC, SAML 2.0, Login With Amazon, Sign In With Apple, Google, and Facebook IdPs.
    ///   - userPoolId: The Id of the user pool where you want to create an IdP.
    ///   - logger: Logger use during operation
    @inlinable
    public func createIdentityProvider(
        attributeMapping: [String: String]? = nil,
        idpIdentifiers: [String]? = nil,
        providerDetails: [String: String],
        providerName: String,
        providerType: IdentityProviderTypeType,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateIdentityProviderResponse {
        let input = CreateIdentityProviderRequest(
            attributeMapping: attributeMapping, 
            idpIdentifiers: idpIdentifiers, 
            providerDetails: providerDetails, 
            providerName: providerName, 
            providerType: providerType, 
            userPoolId: userPoolId
        )
        return try await self.createIdentityProvider(input, logger: logger)
    }

    /// Creates a new set of branding settings for a user pool style and associates it with an app client. This operation is the programmatic option for the creation of a new style in the branding designer. Provides values for UI customization in a Settings JSON object and image files in an Assets array. To send the JSON object Document type parameter in Settings, you might need to update to the most recent version of your Amazon Web Services SDK. To create a new style with default settings, set UseCognitoProvidedValues to true and don't provide values for any other options. This operation has a 2-megabyte request-size limit and include the CSS settings and image assets for your app client. Your branding settings might exceed 2MB in size. Amazon Cognito doesn't require that you pass all parameters in one request and preserves existing style settings that you don't specify. If your request is larger than 2MB, separate it into multiple requests, each with a size smaller than the limit.  As a best practice, modify the output of DescribeManagedLoginBrandingByClient into the request parameters for this operation. To get all settings, set ReturnMergedResources to true. For more information, see API and SDK operations for managed login branding.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func createManagedLoginBranding(_ input: CreateManagedLoginBrandingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateManagedLoginBrandingResponse {
        try await self.client.execute(
            operation: "CreateManagedLoginBranding", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new set of branding settings for a user pool style and associates it with an app client. This operation is the programmatic option for the creation of a new style in the branding designer. Provides values for UI customization in a Settings JSON object and image files in an Assets array. To send the JSON object Document type parameter in Settings, you might need to update to the most recent version of your Amazon Web Services SDK. To create a new style with default settings, set UseCognitoProvidedValues to true and don't provide values for any other options. This operation has a 2-megabyte request-size limit and include the CSS settings and image assets for your app client. Your branding settings might exceed 2MB in size. Amazon Cognito doesn't require that you pass all parameters in one request and preserves existing style settings that you don't specify. If your request is larger than 2MB, separate it into multiple requests, each with a size smaller than the limit.  As a best practice, modify the output of DescribeManagedLoginBrandingByClient into the request parameters for this operation. To get all settings, set ReturnMergedResources to true. For more information, see API and SDK operations for managed login branding.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - assets: An array of image files that you want to apply to roles like backgrounds, logos, and icons. Each object must also indicate whether it is for dark mode, light mode, or browser-adaptive mode.
    ///   - clientId: The app client that you want to create the branding style for. Each style is permanently linked to an app client. To change the style for an app client, delete the existing style with DeleteManagedLoginBranding and create a new one.
    ///   - settings: A JSON file, encoded as a Document type, with the the settings that you want to apply to your style.
    ///   - useCognitoProvidedValues: When true, applies the default branding style options. These default options are managed by Amazon Cognito. You can modify them later in the branding designer. When you specify true for this option, you must also omit values for Settings and Assets in the request.
    ///   - userPoolId: The ID of the user pool where you want to create a new branding style.
    ///   - logger: Logger use during operation
    @inlinable
    public func createManagedLoginBranding(
        assets: [AssetType]? = nil,
        clientId: String,
        settings: AWSDocument? = nil,
        useCognitoProvidedValues: Bool? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateManagedLoginBrandingResponse {
        let input = CreateManagedLoginBrandingRequest(
            assets: assets, 
            clientId: clientId, 
            settings: settings, 
            useCognitoProvidedValues: useCognitoProvidedValues, 
            userPoolId: userPoolId
        )
        return try await self.createManagedLoginBranding(input, logger: logger)
    }

    /// Creates a new OAuth2.0 resource server and defines custom scopes within it. Resource servers are associated with custom scopes and machine-to-machine (M2M) authorization. For more information, see Access control with resource servers.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func createResourceServer(_ input: CreateResourceServerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateResourceServerResponse {
        try await self.client.execute(
            operation: "CreateResourceServer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new OAuth2.0 resource server and defines custom scopes within it. Resource servers are associated with custom scopes and machine-to-machine (M2M) authorization. For more information, see Access control with resource servers.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - identifier: A unique resource server identifier for the resource server. The identifier can be an API friendly name like solar-system-data. You can also set an API URL like https://solar-system-data-api.example.com as your identifier. Amazon Cognito represents scopes in the access token in the format $resource-server-identifier/$scope. Longer scope-identifier strings increase the size of your access tokens.
    ///   - name: A friendly name for the resource server.
    ///   - scopes: A list of custom scopes. Each scope is a key-value map with the keys ScopeName and ScopeDescription. The name of a custom scope is a combination of ScopeName and the resource server Name in this request, for example MyResourceServerName/MyScopeName.
    ///   - userPoolId: The ID of the user pool where you want to create a resource server.
    ///   - logger: Logger use during operation
    @inlinable
    public func createResourceServer(
        identifier: String,
        name: String,
        scopes: [ResourceServerScopeType]? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateResourceServerResponse {
        let input = CreateResourceServerRequest(
            identifier: identifier, 
            name: name, 
            scopes: scopes, 
            userPoolId: userPoolId
        )
        return try await self.createResourceServer(input, logger: logger)
    }

    /// Creates a user import job. You can import users into user pools from a comma-separated values (CSV) file without adding Amazon Cognito MAU costs to your Amazon Web Services bill. To generate a template for your import, see GetCSVHeader. To learn more about CSV import, see Importing users from a CSV file.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func createUserImportJob(_ input: CreateUserImportJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateUserImportJobResponse {
        try await self.client.execute(
            operation: "CreateUserImportJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a user import job. You can import users into user pools from a comma-separated values (CSV) file without adding Amazon Cognito MAU costs to your Amazon Web Services bill. To generate a template for your import, see GetCSVHeader. To learn more about CSV import, see Importing users from a CSV file.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - cloudWatchLogsRoleArn: You must specify an IAM role that has permission to log import-job results to Amazon CloudWatch Logs. This parameter is the ARN of that role.
    ///   - jobName: A friendly name for the user import job.
    ///   - userPoolId: The ID of the user pool that you want to import users into.
    ///   - logger: Logger use during operation
    @inlinable
    public func createUserImportJob(
        cloudWatchLogsRoleArn: String,
        jobName: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateUserImportJobResponse {
        let input = CreateUserImportJobRequest(
            cloudWatchLogsRoleArn: cloudWatchLogsRoleArn, 
            jobName: jobName, 
            userPoolId: userPoolId
        )
        return try await self.createUserImportJob(input, logger: logger)
    }

    ///  This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.  Creates a new Amazon Cognito user pool. This operation sets basic and advanced configuration options. You can create a user pool in the Amazon Cognito console to your preferences and use the output of DescribeUserPool to generate requests from that baseline.  If you don't provide a value for an attribute, Amazon Cognito sets it to its default value.   Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func createUserPool(_ input: CreateUserPoolRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateUserPoolResponse {
        try await self.client.execute(
            operation: "CreateUserPool", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.  Creates a new Amazon Cognito user pool. This operation sets basic and advanced configuration options. You can create a user pool in the Amazon Cognito console to your preferences and use the output of DescribeUserPool to generate requests from that baseline.  If you don't provide a value for an attribute, Amazon Cognito sets it to its default value.   Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - accountRecoverySetting: The available verified method a user can use to recover their password when they call ForgotPassword. You can use this setting to define a preferred method when a user has more than one method available. With this setting, SMS doesn't qualify for a valid password recovery mechanism if the user also has SMS multi-factor authentication (MFA) activated. In the absence of this setting, Amazon Cognito uses the legacy behavior to determine the recovery method where SMS is preferred through email.
    ///   - adminCreateUserConfig: The configuration for AdminCreateUser requests. Includes the template for the invitation message for new users, the duration of temporary passwords, and permitting self-service sign-up.
    ///   - aliasAttributes: Attributes supported as an alias for this user pool. Possible values: phone_number, email, or preferred_username. For more information about alias attributes, see Customizing sign-in attributes.
    ///   - autoVerifiedAttributes: The attributes that you want your user pool to automatically verify. Possible values: email, phone_number. For more information see Verifying contact information at sign-up.
    ///   - deletionProtection: When active, DeletionProtection prevents accidental deletion of your user
    ///   - deviceConfiguration: The device-remembering configuration for a user pool. Device remembering or device tracking is a "Remember me on this device" option for user pools that perform authentication with the device key of a trusted device in the back end, instead of a user-provided MFA code. For more information about device authentication, see Working with user devices in your user pool. A null value indicates that you have deactivated device remembering in your user pool.  When you provide a value for any DeviceConfiguration field, you activate the Amazon Cognito device-remembering feature. For more infor
    ///   - emailConfiguration: The email configuration of your user pool. The email configuration type sets your preferred sending method, Amazon Web Services Region, and sender for messages from your user pool.
    ///   - emailVerificationMessage: This parameter is no longer used. See VerificationMessageTemplateType.
    ///   - emailVerificationSubject: This parameter is no longer used. See VerificationMessageTemplateType.
    ///   - lambdaConfig: A collection of user pool Lambda triggers. Amazon Cognito invokes triggers at several possible stages of authentication operations. Triggers can modify the outcome of the operations that invoked them.
    ///   - mfaConfiguration: Sets multi-factor authentication (MFA) to be on, off, or optional. When ON, all users must set up MFA before they can sign in. When OPTIONAL, your application must make a client-side determination of whether a user wants to register an MFA device. For user pools with adaptive authentication with threat protection, choose OPTIONAL.
    ///   - policies: The password policy and sign-in policy in the user pool. The password policy sets options like password complexity requirements and password history. The sign-in policy sets the options available to applications in choice-based authentication.
    ///   - poolName: A friendlhy name for your user pool.
    ///   - schema: An array of attributes for the new user pool. You can add custom attributes and modify the properties of default attributes. The specifications in this parameter set the required attributes in your user pool. For more information, see Working with user attributes.
    ///   - smsAuthenticationMessage: A string representing the SMS authentication message.
    ///   - smsConfiguration: The SMS configuration with the settings that your Amazon Cognito user pool must use to send an SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To send SMS messages with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role in your Amazon Web Services account. For more information see SMS message settings.
    ///   - smsVerificationMessage: This parameter is no longer used. See VerificationMessageTemplateType.
    ///   - userAttributeUpdateSettings: The settings for updates to user attributes. These settings include the property AttributesRequireVerificationBeforeUpdate,
    ///   - usernameAttributes: Specifies whether a user can use an email address or phone number as a username when they sign up. For more information, see Customizing sign-in attributes.
    ///   - usernameConfiguration: Sets the case sensitivity option for sign-in usernames. When CaseSensitive is false (case insensitive), users can sign in with any combination of capital and lowercase letters. For example, username, USERNAME, or UserName, or for email, email@example.com or EMaiL@eXamplE.Com. For most use cases, set case sensitivity to false as a best practice. When usernames and email addresses are case insensitive, Amazon Cognito treats any variation in case as the same user, and prevents a case variation from being assigned to the same attribute for a different user. When CaseSensitive is true (case sensitive), Amazon Cognito interprets USERNAME and UserName as distinct users. This configuration is immutable after you set it.
    ///   - userPoolAddOns: User pool add-ons. Contains settings for activation of advanced security features. To log user security information but take no action, set to AUDIT. To configure automatic security responses to risky traffic to your user pool, set to ENFORCED. For more information, see Adding advanced security to a user pool.
    ///   - userPoolTags: The tag keys and values to assign to the user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria.
    ///   - userPoolTier: The user pool feature plan, or tier. This parameter determines the eligibility of the user pool for features like managed login, access-token customization, and threat protection. Defaults to ESSENTIALS.
    ///   - verificationMessageTemplate: The template for the verification message that your user pool delivers to users who set an email address or phone number attribute. Set the email message type that corresponds to your DefaultEmailOption selection. For CONFIRM_WITH_LINK, specify an EmailMessageByLink and leave EmailMessage blank. For CONFIRM_WITH_CODE, specify an EmailMessage and leave EmailMessageByLink blank. When you supply both parameters with either choice, Amazon Cognito returns an error.
    ///   - logger: Logger use during operation
    @inlinable
    public func createUserPool(
        accountRecoverySetting: AccountRecoverySettingType? = nil,
        adminCreateUserConfig: AdminCreateUserConfigType? = nil,
        aliasAttributes: [AliasAttributeType]? = nil,
        autoVerifiedAttributes: [VerifiedAttributeType]? = nil,
        deletionProtection: DeletionProtectionType? = nil,
        deviceConfiguration: DeviceConfigurationType? = nil,
        emailConfiguration: EmailConfigurationType? = nil,
        emailVerificationMessage: String? = nil,
        emailVerificationSubject: String? = nil,
        lambdaConfig: LambdaConfigType? = nil,
        mfaConfiguration: UserPoolMfaType? = nil,
        policies: UserPoolPolicyType? = nil,
        poolName: String,
        schema: [SchemaAttributeType]? = nil,
        smsAuthenticationMessage: String? = nil,
        smsConfiguration: SmsConfigurationType? = nil,
        smsVerificationMessage: String? = nil,
        userAttributeUpdateSettings: UserAttributeUpdateSettingsType? = nil,
        usernameAttributes: [UsernameAttributeType]? = nil,
        usernameConfiguration: UsernameConfigurationType? = nil,
        userPoolAddOns: UserPoolAddOnsType? = nil,
        userPoolTags: [String: String]? = nil,
        userPoolTier: UserPoolTierType? = nil,
        verificationMessageTemplate: VerificationMessageTemplateType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateUserPoolResponse {
        let input = CreateUserPoolRequest(
            accountRecoverySetting: accountRecoverySetting, 
            adminCreateUserConfig: adminCreateUserConfig, 
            aliasAttributes: aliasAttributes, 
            autoVerifiedAttributes: autoVerifiedAttributes, 
            deletionProtection: deletionProtection, 
            deviceConfiguration: deviceConfiguration, 
            emailConfiguration: emailConfiguration, 
            emailVerificationMessage: emailVerificationMessage, 
            emailVerificationSubject: emailVerificationSubject, 
            lambdaConfig: lambdaConfig, 
            mfaConfiguration: mfaConfiguration, 
            policies: policies, 
            poolName: poolName, 
            schema: schema, 
            smsAuthenticationMessage: smsAuthenticationMessage, 
            smsConfiguration: smsConfiguration, 
            smsVerificationMessage: smsVerificationMessage, 
            userAttributeUpdateSettings: userAttributeUpdateSettings, 
            usernameAttributes: usernameAttributes, 
            usernameConfiguration: usernameConfiguration, 
            userPoolAddOns: userPoolAddOns, 
            userPoolTags: userPoolTags, 
            userPoolTier: userPoolTier, 
            verificationMessageTemplate: verificationMessageTemplate
        )
        return try await self.createUserPool(input, logger: logger)
    }

    /// Creates an app client in a user pool. This operation sets basic and advanced configuration options. You can create an app client in the Amazon Cognito console to your preferences and use the output of DescribeUserPoolClient to generate requests from that baseline. New app clients activate token revocation by default. For more information about revoking tokens, see RevokeToken.  If you don't provide a value for an attribute, Amazon Cognito sets it to its default value.   Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func createUserPoolClient(_ input: CreateUserPoolClientRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateUserPoolClientResponse {
        try await self.client.execute(
            operation: "CreateUserPoolClient", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an app client in a user pool. This operation sets basic and advanced configuration options. You can create an app client in the Amazon Cognito console to your preferences and use the output of DescribeUserPoolClient to generate requests from that baseline. New app clients activate token revocation by default. For more information about revoking tokens, see RevokeToken.  If you don't provide a value for an attribute, Amazon Cognito sets it to its default value.   Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - accessTokenValidity: The access token time limit. After this limit expires, your user can't use
    ///   - allowedOAuthFlows: The OAuth grant types that you want your app client to generate. To create an app client that generates client credentials grants, you must add client_credentials as the only allowed OAuth flow.  code  Use a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the /oauth2/token endpoint.  implicit  Issue the access token (and, optionally, ID token, based on scopes) directly to your user.  client_credentials  Issue the access token from the /oauth2/token endpoint directly to a non-person user using a combination of the client ID and client secret.
    ///   - allowedOAuthFlowsUserPoolClient: Set to true to use OAuth 2.0 features in your user pool app client.  AllowedOAuthFlowsUserPoolClient must be true before you can configure
    ///   - allowedOAuthScopes: The OAuth 2.0 scopes that you want to permit your app client to authorize. Scopes govern access control to user pool self-service API operations, user data from the userInfo endpoint, and third-party APIs. Possible values provided by OAuth are phone, email, openid, and profile. Possible values provided by Amazon Web Services are aws.cognito.signin.user.admin. Custom scopes created in Resource Servers are also supported.
    ///   - analyticsConfiguration: The user pool analytics configuration for collecting metrics and sending them to your Amazon Pinpoint campaign. In Amazon Web Services Regions where Amazon Pinpoint isn't available, user pools might not have access to analytics or might be configurable with campaigns in the US East (N. Virginia) Region. For more information, see Using Amazon Pinpoint analytics.
    ///   - authSessionValidity: Amazon Cognito creates a session token for each API request in an authentication flow. AuthSessionValidity is the duration,
    ///   - callbackURLs: A list of allowed redirect (callback) URLs for the IdPs. A redirect URI must:   Be an absolute URI.   Be registered with the authorization server. Amazon Cognito doesn't accept authorization requests with redirect_uri values that aren't in the list of CallbackURLs that you provide in this parameter.   Not include a fragment component.   See OAuth 2.0 - Redirection Endpoint. Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.
    ///   - clientName: A friendly name for the app client that you want to create.
    ///   - defaultRedirectURI: The default redirect URI. In app clients with one assigned IdP, replaces redirect_uri in authentication requests. Must be in the CallbackURLs list.
    ///   - enablePropagateAdditionalUserContextData: Activates the propagation of additional user context data. For more information about propagation of user context data, see  Adding advanced security to a user pool. If you don’t include this parameter, you can't send device fingerprint information, including source IP address, to Amazon Cognito advanced security. You can only activate EnablePropagateAdditionalUserContextData in an app client that has a client secret.
    ///   - enableTokenRevocation: Activates or deactivates token revocation. For more information about revoking tokens, see RevokeToken. If you don't include this parameter, token revocation is automatically activated for the new user pool client.
    ///   - explicitAuthFlows: The authentication flows that you want your user pool client to support. For each app client in your user pool, you can sign in
    ///   - generateSecret: When true, generates a client secret for the app client. Client secrets are used with server-side and machine-to-machine applications. For more information, see App client types.
    ///   - idTokenValidity: The ID token time limit. After this limit expires, your user can't use
    ///   - logoutURLs: A list of allowed logout URLs for managed login authentication. For more information, see Logout endpoint.
    ///   - preventUserExistenceErrors: Errors and responses that you want Amazon Cognito APIs to return during authentication, account confirmation, and password recovery when the user doesn't exist in the user pool. When set to ENABLED and the user doesn't exist, authentication returns an error indicating either the username or password was incorrect. Account confirmation and password recovery return a response indicating a code was sent to a simulated destination. When set to LEGACY, those APIs return a UserNotFoundException exception if the user doesn't exist in the user pool. Valid values include:    ENABLED - This prevents user existence-related errors.    LEGACY - This represents the early behavior of Amazon Cognito where user existence related errors aren't prevented.   Defaults to LEGACY when you don't provide a value.
    ///   - readAttributes: The list of user attributes that you want your app client to have read access to. After your user authenticates in your app, their access token authorizes them to read their own attribute value for any attribute in this list. An example of this kind of activity is when your user selects a link to view their profile information. Your app makes a GetUser API request to retrieve and display your user's profile data. When you don't specify the ReadAttributes for your app client, your app can read the values of email_verified, phone_number_verified, and the Standard attributes of your user pool. When your user pool app client has read access to these default attributes, ReadAttributes doesn't return any information. Amazon Cognito only populates ReadAttributes in the API response if you have specified your own custom set of read attributes.
    ///   - refreshTokenValidity: The refresh token time limit. After this limit expires, your user can't use
    ///   - supportedIdentityProviders: A list of provider names for the identity providers (IdPs) that are supported on this client. The following are supported: COGNITO, Facebook, Google, SignInWithApple, and LoginWithAmazon. You can also specify the names that you configured for the SAML and OIDC IdPs in your user pool, for example MySAMLIdP or MyOIDCIdP. This setting applies to providers that you can access with managed  login. The removal of COGNITO from this list doesn't prevent authentication operations for local users with the user pools API in an Amazon Web Services SDK. The only way to prevent API-based authentication is to block access with a WAF rule.
    ///   - tokenValidityUnits: The units that validity times are represented in. The default unit for refresh tokens is days, and the default for ID and access tokens are hours.
    ///   - userPoolId: The ID of the user pool where you want to create an app client.
    ///   - writeAttributes: The list of user attributes that you want your app client to have write access to. After your user authenticates in your app, their access token authorizes them to set or modify their own attribute value for any attribute in this list. An example of this kind of activity is when you present your user with a form to update their profile information and they change their last name. Your app then makes an UpdateUserAttributes API request and sets family_name to the new value.  When you don't specify the WriteAttributes for your app client, your app can write the values of the Standard attributes of your user pool. When your user pool has write access to these default attributes, WriteAttributes doesn't return any information. Amazon Cognito only populates WriteAttributes in the API response if you have specified your own custom set of write attributes. If your app client allows users to sign in through an IdP, this array must include all attributes that you have mapped to IdP attributes. Amazon Cognito updates mapped attributes when users sign in to your application through an IdP. If your app client does not have write access to a mapped attribute, Amazon Cognito throws an error when it tries to update the attribute. For more information, see Specifying IdP Attribute Mappings for Your user pool.
    ///   - logger: Logger use during operation
    @inlinable
    public func createUserPoolClient(
        accessTokenValidity: Int? = nil,
        allowedOAuthFlows: [OAuthFlowType]? = nil,
        allowedOAuthFlowsUserPoolClient: Bool? = nil,
        allowedOAuthScopes: [String]? = nil,
        analyticsConfiguration: AnalyticsConfigurationType? = nil,
        authSessionValidity: Int? = nil,
        callbackURLs: [String]? = nil,
        clientName: String,
        defaultRedirectURI: String? = nil,
        enablePropagateAdditionalUserContextData: Bool? = nil,
        enableTokenRevocation: Bool? = nil,
        explicitAuthFlows: [ExplicitAuthFlowsType]? = nil,
        generateSecret: Bool? = nil,
        idTokenValidity: Int? = nil,
        logoutURLs: [String]? = nil,
        preventUserExistenceErrors: PreventUserExistenceErrorTypes? = nil,
        readAttributes: [String]? = nil,
        refreshTokenValidity: Int? = nil,
        supportedIdentityProviders: [String]? = nil,
        tokenValidityUnits: TokenValidityUnitsType? = nil,
        userPoolId: String,
        writeAttributes: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateUserPoolClientResponse {
        let input = CreateUserPoolClientRequest(
            accessTokenValidity: accessTokenValidity, 
            allowedOAuthFlows: allowedOAuthFlows, 
            allowedOAuthFlowsUserPoolClient: allowedOAuthFlowsUserPoolClient, 
            allowedOAuthScopes: allowedOAuthScopes, 
            analyticsConfiguration: analyticsConfiguration, 
            authSessionValidity: authSessionValidity, 
            callbackURLs: callbackURLs, 
            clientName: clientName, 
            defaultRedirectURI: defaultRedirectURI, 
            enablePropagateAdditionalUserContextData: enablePropagateAdditionalUserContextData, 
            enableTokenRevocation: enableTokenRevocation, 
            explicitAuthFlows: explicitAuthFlows, 
            generateSecret: generateSecret, 
            idTokenValidity: idTokenValidity, 
            logoutURLs: logoutURLs, 
            preventUserExistenceErrors: preventUserExistenceErrors, 
            readAttributes: readAttributes, 
            refreshTokenValidity: refreshTokenValidity, 
            supportedIdentityProviders: supportedIdentityProviders, 
            tokenValidityUnits: tokenValidityUnits, 
            userPoolId: userPoolId, 
            writeAttributes: writeAttributes
        )
        return try await self.createUserPoolClient(input, logger: logger)
    }

    /// A user pool domain hosts managed login, an authorization server and web server for authentication in your application. This operation creates a new user pool prefix or custom domain and sets the managed login branding version. Set the branding version to 1 for hosted UI (classic) or 2 for managed login. When you choose a custom domain, you must provide an SSL certificate in the US East (N. Virginia) Amazon Web Services Region in your request. Your prefix domain might take up to one minute to take effect. Your custom domain is online within five minutes, but it can take up to one hour to distribute your SSL certificate. For more information about adding a custom domain to your user pool, see Configuring a user pool domain.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func createUserPoolDomain(_ input: CreateUserPoolDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateUserPoolDomainResponse {
        try await self.client.execute(
            operation: "CreateUserPoolDomain", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// A user pool domain hosts managed login, an authorization server and web server for authentication in your application. This operation creates a new user pool prefix or custom domain and sets the managed login branding version. Set the branding version to 1 for hosted UI (classic) or 2 for managed login. When you choose a custom domain, you must provide an SSL certificate in the US East (N. Virginia) Amazon Web Services Region in your request. Your prefix domain might take up to one minute to take effect. Your custom domain is online within five minutes, but it can take up to one hour to distribute your SSL certificate. For more information about adding a custom domain to your user pool, see Configuring a user pool domain.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - customDomainConfig: The configuration for a custom domain. Configures your domain with an Certificate Manager certificate in the us-east-1 Region. Provide this parameter only if you want to use a custom domain for your user pool. Otherwise, you can exclude this parameter and use a prefix domain instead. For more information about the hosted domain and custom domains, see Configuring a User Pool Domain.
    ///   - domain: The domain string. For custom domains, this is the fully-qualified domain name, such as auth.example.com. For prefix domains, this is the prefix alone, such as myprefix. A prefix value of myprefix for a user pool in the us-east-1 Region results in a domain of myprefix.auth.us-east-1.amazoncognito.com.
    ///   - managedLoginVersion: The version of managed login branding that you want to apply to your domain. A value of 1 indicates hosted UI (classic) and a version of 2 indicates managed login. Managed login requires that your user pool be configured for any feature plan other than Lite.
    ///   - userPoolId: The ID of the user pool where you want to add a domain.
    ///   - logger: Logger use during operation
    @inlinable
    public func createUserPoolDomain(
        customDomainConfig: CustomDomainConfigType? = nil,
        domain: String,
        managedLoginVersion: Int? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateUserPoolDomainResponse {
        let input = CreateUserPoolDomainRequest(
            customDomainConfig: customDomainConfig, 
            domain: domain, 
            managedLoginVersion: managedLoginVersion, 
            userPoolId: userPoolId
        )
        return try await self.createUserPoolDomain(input, logger: logger)
    }

    /// Deletes a group from the specified user pool. When you delete a group, that group no longer contributes to users' cognito:preferred_group or cognito:groups claims, and no longer influence access-control decision that are based on group membership. For more information about user pool groups, see Adding groups to a user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func deleteGroup(_ input: DeleteGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a group from the specified user pool. When you delete a group, that group no longer contributes to users' cognito:preferred_group or cognito:groups claims, and no longer influence access-control decision that are based on group membership. For more information about user pool groups, see Adding groups to a user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - groupName: The name of the group that you want to delete.
    ///   - userPoolId: The ID of the user pool where you want to delete the group.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteGroup(
        groupName: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteGroupRequest(
            groupName: groupName, 
            userPoolId: userPoolId
        )
        return try await self.deleteGroup(input, logger: logger)
    }

    /// Deletes a user pool identity provider (IdP). After you delete an IdP, users can no longer sign in to your user pool through that IdP. For more information about user pool IdPs, see Third-party IdP sign-in.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func deleteIdentityProvider(_ input: DeleteIdentityProviderRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteIdentityProvider", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a user pool identity provider (IdP). After you delete an IdP, users can no longer sign in to your user pool through that IdP. For more information about user pool IdPs, see Third-party IdP sign-in.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - providerName: The name of the IdP that you want to delete.
    ///   - userPoolId: The ID of the user pool where you want to delete the identity provider.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteIdentityProvider(
        providerName: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteIdentityProviderRequest(
            providerName: providerName, 
            userPoolId: userPoolId
        )
        return try await self.deleteIdentityProvider(input, logger: logger)
    }

    /// Deletes a managed login branding style. When you delete a style, you delete the branding association for an app client. When an app client doesn't have a style assigned, your managed login pages for that app client are nonfunctional until you create a new style or switch the domain branding version.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func deleteManagedLoginBranding(_ input: DeleteManagedLoginBrandingRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteManagedLoginBranding", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a managed login branding style. When you delete a style, you delete the branding association for an app client. When an app client doesn't have a style assigned, your managed login pages for that app client are nonfunctional until you create a new style or switch the domain branding version.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - managedLoginBrandingId: The ID of the managed login branding style that you want to delete.
    ///   - userPoolId: The ID of the user pool that contains the managed login branding style that you want to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteManagedLoginBranding(
        managedLoginBrandingId: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteManagedLoginBrandingRequest(
            managedLoginBrandingId: managedLoginBrandingId, 
            userPoolId: userPoolId
        )
        return try await self.deleteManagedLoginBranding(input, logger: logger)
    }

    /// Deletes a resource server. After you delete a resource server, users can no longer generate access tokens with scopes that are associate with that resource server. Resource servers are associated with custom scopes and machine-to-machine (M2M) authorization. For more information, see Access control with resource servers.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func deleteResourceServer(_ input: DeleteResourceServerRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteResourceServer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a resource server. After you delete a resource server, users can no longer generate access tokens with scopes that are associate with that resource server. Resource servers are associated with custom scopes and machine-to-machine (M2M) authorization. For more information, see Access control with resource servers.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - identifier: The identifier of the resource server that you want to delete.
    ///   - userPoolId: The ID of the user pool where you want to delete the resource server.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteResourceServer(
        identifier: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteResourceServerRequest(
            identifier: identifier, 
            userPoolId: userPoolId
        )
        return try await self.deleteResourceServer(input, logger: logger)
    }

    /// Self-deletes a user profile. A deleted user profile can no longer be used to sign in and can't be restored. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    @Sendable
    @inlinable
    public func deleteUser(_ input: DeleteUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteUser", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Self-deletes a user profile. A deleted user profile can no longer be used to sign in and can't be restored. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    ///
    /// Parameters:
    ///   - accessToken: A valid access token that Amazon Cognito issued to the user whose user profile you want to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteUser(
        accessToken: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteUserRequest(
            accessToken: accessToken
        )
        return try await self.deleteUser(input, logger: logger)
    }

    /// Self-deletes attributes for a user. For example, your application can submit a request to this operation when a user wants to remove their birthdate attribute value. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    @Sendable
    @inlinable
    public func deleteUserAttributes(_ input: DeleteUserAttributesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteUserAttributesResponse {
        try await self.client.execute(
            operation: "DeleteUserAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Self-deletes attributes for a user. For example, your application can submit a request to this operation when a user wants to remove their birthdate attribute value. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    ///
    /// Parameters:
    ///   - accessToken: A valid access token that Amazon Cognito issued to the user whose attributes you want to delete.
    ///   - userAttributeNames: An array of strings representing the user attribute names you want to delete. For custom attributes, you must prepend the custom: prefix to the attribute name, for example custom:department.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteUserAttributes(
        accessToken: String,
        userAttributeNames: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteUserAttributesResponse {
        let input = DeleteUserAttributesRequest(
            accessToken: accessToken, 
            userAttributeNames: userAttributeNames
        )
        return try await self.deleteUserAttributes(input, logger: logger)
    }

    /// Deletes a user pool. After you delete a user pool, users can no longer sign in to any associated applications.
    @Sendable
    @inlinable
    public func deleteUserPool(_ input: DeleteUserPoolRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteUserPool", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a user pool. After you delete a user pool, users can no longer sign in to any associated applications.
    ///
    /// Parameters:
    ///   - userPoolId: The ID of the user pool that you want to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteUserPool(
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteUserPoolRequest(
            userPoolId: userPoolId
        )
        return try await self.deleteUserPool(input, logger: logger)
    }

    /// Deletes a user pool app client. After you delete an app client, users can no longer sign in to the associated application.
    @Sendable
    @inlinable
    public func deleteUserPoolClient(_ input: DeleteUserPoolClientRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteUserPoolClient", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a user pool app client. After you delete an app client, users can no longer sign in to the associated application.
    ///
    /// Parameters:
    ///   - clientId: The ID of the user pool app client that you want to delete.
    ///   - userPoolId: The ID of the user pool where you want to delete the client.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteUserPoolClient(
        clientId: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteUserPoolClientRequest(
            clientId: clientId, 
            userPoolId: userPoolId
        )
        return try await self.deleteUserPoolClient(input, logger: logger)
    }

    /// Given a user pool ID and domain identifier, deletes a user pool domain. After you delete a user pool domain, your managed login pages and authorization server are no longer available.
    @Sendable
    @inlinable
    public func deleteUserPoolDomain(_ input: DeleteUserPoolDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteUserPoolDomainResponse {
        try await self.client.execute(
            operation: "DeleteUserPoolDomain", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Given a user pool ID and domain identifier, deletes a user pool domain. After you delete a user pool domain, your managed login pages and authorization server are no longer available.
    ///
    /// Parameters:
    ///   - domain: The domain that you want to delete. For custom domains, this is the fully-qualified domain name, such as auth.example.com. For Amazon Cognito prefix domains, this is the prefix alone, such as auth.
    ///   - userPoolId: The ID of the user pool where you want to delete the domain.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteUserPoolDomain(
        domain: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteUserPoolDomainResponse {
        let input = DeleteUserPoolDomainRequest(
            domain: domain, 
            userPoolId: userPoolId
        )
        return try await self.deleteUserPoolDomain(input, logger: logger)
    }

    /// Deletes a registered passkey, or webauthN, authenticator for the currently signed-in user. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    @Sendable
    @inlinable
    public func deleteWebAuthnCredential(_ input: DeleteWebAuthnCredentialRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteWebAuthnCredentialResponse {
        try await self.client.execute(
            operation: "DeleteWebAuthnCredential", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a registered passkey, or webauthN, authenticator for the currently signed-in user. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    ///
    /// Parameters:
    ///   - accessToken: A valid access token that Amazon Cognito issued to the user whose passkey credential you want to delete.
    ///   - credentialId: The unique identifier of the passkey that you want to delete. Look up registered devices with ListWebAuthnCredentials.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteWebAuthnCredential(
        accessToken: String,
        credentialId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteWebAuthnCredentialResponse {
        let input = DeleteWebAuthnCredentialRequest(
            accessToken: accessToken, 
            credentialId: credentialId
        )
        return try await self.deleteWebAuthnCredential(input, logger: logger)
    }

    /// Given a user pool ID and identity provider (IdP) name, returns details about the IdP.
    @Sendable
    @inlinable
    public func describeIdentityProvider(_ input: DescribeIdentityProviderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeIdentityProviderResponse {
        try await self.client.execute(
            operation: "DescribeIdentityProvider", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Given a user pool ID and identity provider (IdP) name, returns details about the IdP.
    ///
    /// Parameters:
    ///   - providerName: The name of the IdP that you want to describe.
    ///   - userPoolId: The ID of the user pool that has the IdP that you want to describe..
    ///   - logger: Logger use during operation
    @inlinable
    public func describeIdentityProvider(
        providerName: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeIdentityProviderResponse {
        let input = DescribeIdentityProviderRequest(
            providerName: providerName, 
            userPoolId: userPoolId
        )
        return try await self.describeIdentityProvider(input, logger: logger)
    }

    /// Given the ID of a managed login branding style, returns detailed information about the style.
    @Sendable
    @inlinable
    public func describeManagedLoginBranding(_ input: DescribeManagedLoginBrandingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeManagedLoginBrandingResponse {
        try await self.client.execute(
            operation: "DescribeManagedLoginBranding", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Given the ID of a managed login branding style, returns detailed information about the style.
    ///
    /// Parameters:
    ///   - managedLoginBrandingId: The ID of the managed login branding style that you want to get more information about.
    ///   - returnMergedResources: When true, returns values for branding options that are unchanged from Amazon Cognito defaults. When false or when you omit this parameter, returns only values that you customized in your branding style.
    ///   - userPoolId: The ID of the user pool that contains the managed login branding style that you want to get information about.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeManagedLoginBranding(
        managedLoginBrandingId: String,
        returnMergedResources: Bool? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeManagedLoginBrandingResponse {
        let input = DescribeManagedLoginBrandingRequest(
            managedLoginBrandingId: managedLoginBrandingId, 
            returnMergedResources: returnMergedResources, 
            userPoolId: userPoolId
        )
        return try await self.describeManagedLoginBranding(input, logger: logger)
    }

    /// Given the ID of a user pool app client, returns detailed information about the style assigned to the app client.
    @Sendable
    @inlinable
    public func describeManagedLoginBrandingByClient(_ input: DescribeManagedLoginBrandingByClientRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeManagedLoginBrandingByClientResponse {
        try await self.client.execute(
            operation: "DescribeManagedLoginBrandingByClient", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Given the ID of a user pool app client, returns detailed information about the style assigned to the app client.
    ///
    /// Parameters:
    ///   - clientId: The app client that's assigned to the branding style that you want more information about.
    ///   - returnMergedResources: When true, returns values for branding options that are unchanged from Amazon Cognito defaults. When false or when you omit this parameter, returns only values that you customized in your branding style.
    ///   - userPoolId: The ID of the user pool that contains the app client where you want more information about the managed login branding style.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeManagedLoginBrandingByClient(
        clientId: String,
        returnMergedResources: Bool? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeManagedLoginBrandingByClientResponse {
        let input = DescribeManagedLoginBrandingByClientRequest(
            clientId: clientId, 
            returnMergedResources: returnMergedResources, 
            userPoolId: userPoolId
        )
        return try await self.describeManagedLoginBrandingByClient(input, logger: logger)
    }

    /// Describes a resource server. For more information about resource servers, see Access control with resource servers.
    @Sendable
    @inlinable
    public func describeResourceServer(_ input: DescribeResourceServerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeResourceServerResponse {
        try await self.client.execute(
            operation: "DescribeResourceServer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes a resource server. For more information about resource servers, see Access control with resource servers.
    ///
    /// Parameters:
    ///   - identifier: A unique resource server identifier for the resource server. The identifier can be an API friendly name like solar-system-data. You can also set an API URL like https://solar-system-data-api.example.com as your identifier. Amazon Cognito represents scopes in the access token in the format $resource-server-identifier/$scope. Longer scope-identifier strings increase the size of your access tokens.
    ///   - userPoolId: The ID of the user pool that hosts the resource server.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeResourceServer(
        identifier: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeResourceServerResponse {
        let input = DescribeResourceServerRequest(
            identifier: identifier, 
            userPoolId: userPoolId
        )
        return try await self.describeResourceServer(input, logger: logger)
    }

    /// Given an app client or user pool ID where threat protection is configured, describes the risk configuration. This operation returns details about adaptive authentication, compromised credentials, and IP-address allow- and denylists. For more information about threat protection, see Threat protection.
    @Sendable
    @inlinable
    public func describeRiskConfiguration(_ input: DescribeRiskConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeRiskConfigurationResponse {
        try await self.client.execute(
            operation: "DescribeRiskConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Given an app client or user pool ID where threat protection is configured, describes the risk configuration. This operation returns details about adaptive authentication, compromised credentials, and IP-address allow- and denylists. For more information about threat protection, see Threat protection.
    ///
    /// Parameters:
    ///   - clientId: The ID of the app client with the risk configuration that you want to inspect. You can apply default risk configuration at the user pool level and further customize it from user pool defaults at the app-client level. Specify ClientId to inspect client-level configuration, or UserPoolId to inspect pool-level configuration.
    ///   - userPoolId: The ID of the user pool with the risk configuration that you want to inspect. You can apply default risk configuration at the user pool level and further customize it from user pool defaults at the app-client level. Specify ClientId to inspect client-level configuration, or UserPoolId to inspect pool-level configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeRiskConfiguration(
        clientId: String? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeRiskConfigurationResponse {
        let input = DescribeRiskConfigurationRequest(
            clientId: clientId, 
            userPoolId: userPoolId
        )
        return try await self.describeRiskConfiguration(input, logger: logger)
    }

    /// Describes a user import job. For more information about user CSV import, see Importing users from a CSV file.
    @Sendable
    @inlinable
    public func describeUserImportJob(_ input: DescribeUserImportJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeUserImportJobResponse {
        try await self.client.execute(
            operation: "DescribeUserImportJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes a user import job. For more information about user CSV import, see Importing users from a CSV file.
    ///
    /// Parameters:
    ///   - jobId: The Id of the user import job that you want to describe.
    ///   - userPoolId: The ID of the user pool that's associated with the import job.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeUserImportJob(
        jobId: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeUserImportJobResponse {
        let input = DescribeUserImportJobRequest(
            jobId: jobId, 
            userPoolId: userPoolId
        )
        return try await self.describeUserImportJob(input, logger: logger)
    }

    /// Given a user pool ID, returns configuration information. This operation is useful when you want to inspect an existing user pool and programmatically replicate the configuration to another user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func describeUserPool(_ input: DescribeUserPoolRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeUserPoolResponse {
        try await self.client.execute(
            operation: "DescribeUserPool", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Given a user pool ID, returns configuration information. This operation is useful when you want to inspect an existing user pool and programmatically replicate the configuration to another user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - userPoolId: The ID of the user pool you want to describe.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeUserPool(
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeUserPoolResponse {
        let input = DescribeUserPoolRequest(
            userPoolId: userPoolId
        )
        return try await self.describeUserPool(input, logger: logger)
    }

    /// Given an app client ID, returns configuration information. This operation is useful when you want to inspect an existing app client and programmatically replicate the configuration to another app client. For more information about app clients, see App clients.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func describeUserPoolClient(_ input: DescribeUserPoolClientRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeUserPoolClientResponse {
        try await self.client.execute(
            operation: "DescribeUserPoolClient", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Given an app client ID, returns configuration information. This operation is useful when you want to inspect an existing app client and programmatically replicate the configuration to another app client. For more information about app clients, see App clients.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - clientId: The ID of the app client that you want to describe.
    ///   - userPoolId: The ID of the user pool that contains the app client you want to describe.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeUserPoolClient(
        clientId: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeUserPoolClientResponse {
        let input = DescribeUserPoolClientRequest(
            clientId: clientId, 
            userPoolId: userPoolId
        )
        return try await self.describeUserPoolClient(input, logger: logger)
    }

    /// Given a user pool domain name, returns information about the domain configuration.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func describeUserPoolDomain(_ input: DescribeUserPoolDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeUserPoolDomainResponse {
        try await self.client.execute(
            operation: "DescribeUserPoolDomain", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Given a user pool domain name, returns information about the domain configuration.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - domain: The domain that you want to describe. For custom domains, this is the fully-qualified domain name, such as auth.example.com. For Amazon Cognito prefix domains, this is the prefix alone, such as auth.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeUserPoolDomain(
        domain: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeUserPoolDomainResponse {
        let input = DescribeUserPoolDomainRequest(
            domain: domain
        )
        return try await self.describeUserPoolDomain(input, logger: logger)
    }

    /// Forgets the specified device. For more information about device authentication, see Working with user devices in your user pool. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    @Sendable
    @inlinable
    public func forgetDevice(_ input: ForgetDeviceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "ForgetDevice", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Forgets the specified device. For more information about device authentication, see Working with user devices in your user pool. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    ///
    /// Parameters:
    ///   - accessToken: A valid access token that Amazon Cognito issued to the user whose registered device you want to forget.
    ///   - deviceKey: The device key.
    ///   - logger: Logger use during operation
    @inlinable
    public func forgetDevice(
        accessToken: String? = nil,
        deviceKey: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = ForgetDeviceRequest(
            accessToken: accessToken, 
            deviceKey: deviceKey
        )
        return try await self.forgetDevice(input, logger: logger)
    }

    /// Calling this API causes a message to be sent to the end user with a confirmation code that is required to change the user's password. For the Username parameter, you can use the username or user alias. The method used to send the confirmation code is sent according to the specified AccountRecoverySetting. For more information, see Recovering User Accounts in the Amazon Cognito Developer Guide. To use the confirmation code for resetting the password, call ConfirmForgotPassword.  If neither a verified phone number nor a verified email exists, this API returns InvalidParameterException. If your app client has a client secret and you don't provide a SECRET_HASH parameter, this API returns NotAuthorizedException. To use this API operation, your user pool must have self-service account recovery configured. Use AdminSetUserPassword if you manage passwords as an administrator.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.   This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.
    @Sendable
    @inlinable
    public func forgotPassword(_ input: ForgotPasswordRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ForgotPasswordResponse {
        try await self.client.execute(
            operation: "ForgotPassword", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Calling this API causes a message to be sent to the end user with a confirmation code that is required to change the user's password. For the Username parameter, you can use the username or user alias. The method used to send the confirmation code is sent according to the specified AccountRecoverySetting. For more information, see Recovering User Accounts in the Amazon Cognito Developer Guide. To use the confirmation code for resetting the password, call ConfirmForgotPassword.  If neither a verified phone number nor a verified email exists, this API returns InvalidParameterException. If your app client has a client secret and you don't provide a SECRET_HASH parameter, this API returns NotAuthorizedException. To use this API operation, your user pool must have self-service account recovery configured. Use AdminSetUserPassword if you manage passwords as an administrator.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.   This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.
    ///
    /// Parameters:
    ///   - analyticsMetadata: The Amazon Pinpoint analytics metadata that contributes to your metrics for ForgotPassword calls.
    ///   - clientId: The ID of the client associated with the user pool.
    ///   - clientMetadata: A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the ForgotPassword API action, Amazon Cognito invokes any functions that are assigned to the following triggers: pre sign-up, custom message, and user migration. When Amazon Cognito invokes any of these functions, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your ForgotPassword request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see
    ///   - secretHash: A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message. For more information about SecretHash, see Computing secret hash values.
    ///   - userContextData: Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - logger: Logger use during operation
    @inlinable
    public func forgotPassword(
        analyticsMetadata: AnalyticsMetadataType? = nil,
        clientId: String,
        clientMetadata: [String: String]? = nil,
        secretHash: String? = nil,
        userContextData: UserContextDataType? = nil,
        username: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ForgotPasswordResponse {
        let input = ForgotPasswordRequest(
            analyticsMetadata: analyticsMetadata, 
            clientId: clientId, 
            clientMetadata: clientMetadata, 
            secretHash: secretHash, 
            userContextData: userContextData, 
            username: username
        )
        return try await self.forgotPassword(input, logger: logger)
    }

    /// Gets the header information for the comma-separated value (CSV) file to be used as input for the user import job.
    @Sendable
    @inlinable
    public func getCSVHeader(_ input: GetCSVHeaderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCSVHeaderResponse {
        try await self.client.execute(
            operation: "GetCSVHeader", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the header information for the comma-separated value (CSV) file to be used as input for the user import job.
    ///
    /// Parameters:
    ///   - userPoolId: The ID of the user pool that the users are to be imported into.
    ///   - logger: Logger use during operation
    @inlinable
    public func getCSVHeader(
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetCSVHeaderResponse {
        let input = GetCSVHeaderRequest(
            userPoolId: userPoolId
        )
        return try await self.getCSVHeader(input, logger: logger)
    }

    /// Gets the device. For more information about device authentication, see Working with user devices in your user pool. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    @Sendable
    @inlinable
    public func getDevice(_ input: GetDeviceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDeviceResponse {
        try await self.client.execute(
            operation: "GetDevice", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the device. For more information about device authentication, see Working with user devices in your user pool. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    ///
    /// Parameters:
    ///   - accessToken: A valid access token that Amazon Cognito issued to the user whose device information you want to request.
    ///   - deviceKey: The device key.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDevice(
        accessToken: String? = nil,
        deviceKey: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDeviceResponse {
        let input = GetDeviceRequest(
            accessToken: accessToken, 
            deviceKey: deviceKey
        )
        return try await self.getDevice(input, logger: logger)
    }

    /// Gets a group. Calling this action requires developer credentials.
    @Sendable
    @inlinable
    public func getGroup(_ input: GetGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetGroupResponse {
        try await self.client.execute(
            operation: "GetGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a group. Calling this action requires developer credentials.
    ///
    /// Parameters:
    ///   - groupName: The name of the group.
    ///   - userPoolId: The ID of the user pool.
    ///   - logger: Logger use during operation
    @inlinable
    public func getGroup(
        groupName: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetGroupResponse {
        let input = GetGroupRequest(
            groupName: groupName, 
            userPoolId: userPoolId
        )
        return try await self.getGroup(input, logger: logger)
    }

    /// Gets the specified IdP.
    @Sendable
    @inlinable
    public func getIdentityProviderByIdentifier(_ input: GetIdentityProviderByIdentifierRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIdentityProviderByIdentifierResponse {
        try await self.client.execute(
            operation: "GetIdentityProviderByIdentifier", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the specified IdP.
    ///
    /// Parameters:
    ///   - idpIdentifier: The IdP identifier.
    ///   - userPoolId: The user pool ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getIdentityProviderByIdentifier(
        idpIdentifier: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetIdentityProviderByIdentifierResponse {
        let input = GetIdentityProviderByIdentifierRequest(
            idpIdentifier: idpIdentifier, 
            userPoolId: userPoolId
        )
        return try await self.getIdentityProviderByIdentifier(input, logger: logger)
    }

    /// Gets the logging configuration of a user pool.
    @Sendable
    @inlinable
    public func getLogDeliveryConfiguration(_ input: GetLogDeliveryConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLogDeliveryConfigurationResponse {
        try await self.client.execute(
            operation: "GetLogDeliveryConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the logging configuration of a user pool.
    ///
    /// Parameters:
    ///   - userPoolId: The ID of the user pool that has the logging configuration that you want to view.
    ///   - logger: Logger use during operation
    @inlinable
    public func getLogDeliveryConfiguration(
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetLogDeliveryConfigurationResponse {
        let input = GetLogDeliveryConfigurationRequest(
            userPoolId: userPoolId
        )
        return try await self.getLogDeliveryConfiguration(input, logger: logger)
    }

    /// This method takes a user pool ID, and returns the signing certificate. The issued certificate is valid for 10 years from the date of issue. Amazon Cognito issues and assigns a new signing certificate annually. This process returns a new value in the response to GetSigningCertificate, but doesn't invalidate the original certificate.
    @Sendable
    @inlinable
    public func getSigningCertificate(_ input: GetSigningCertificateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSigningCertificateResponse {
        try await self.client.execute(
            operation: "GetSigningCertificate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// This method takes a user pool ID, and returns the signing certificate. The issued certificate is valid for 10 years from the date of issue. Amazon Cognito issues and assigns a new signing certificate annually. This process returns a new value in the response to GetSigningCertificate, but doesn't invalidate the original certificate.
    ///
    /// Parameters:
    ///   - userPoolId: The user pool ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getSigningCertificate(
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSigningCertificateResponse {
        let input = GetSigningCertificateRequest(
            userPoolId: userPoolId
        )
        return try await self.getSigningCertificate(input, logger: logger)
    }

    /// Gets the user interface (UI) Customization information for a particular app client's app UI, if any such information exists for the client. If nothing is set for the particular client, but there is an existing pool level customization (the app clientId is ALL), then that information is returned. If nothing is present, then an empty shape is returned.
    @Sendable
    @inlinable
    public func getUICustomization(_ input: GetUICustomizationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetUICustomizationResponse {
        try await self.client.execute(
            operation: "GetUICustomization", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the user interface (UI) Customization information for a particular app client's app UI, if any such information exists for the client. If nothing is set for the particular client, but there is an existing pool level customization (the app clientId is ALL), then that information is returned. If nothing is present, then an empty shape is returned.
    ///
    /// Parameters:
    ///   - clientId: The client ID for the client app.
    ///   - userPoolId: The ID of the user pool.
    ///   - logger: Logger use during operation
    @inlinable
    public func getUICustomization(
        clientId: String? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetUICustomizationResponse {
        let input = GetUICustomizationRequest(
            clientId: clientId, 
            userPoolId: userPoolId
        )
        return try await self.getUICustomization(input, logger: logger)
    }

    /// Gets the user attributes and metadata for a user. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    @Sendable
    @inlinable
    public func getUser(_ input: GetUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetUserResponse {
        try await self.client.execute(
            operation: "GetUser", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the user attributes and metadata for a user. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    ///
    /// Parameters:
    ///   - accessToken: A non-expired access token for the user whose information you want to query.
    ///   - logger: Logger use during operation
    @inlinable
    public func getUser(
        accessToken: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetUserResponse {
        let input = GetUserRequest(
            accessToken: accessToken
        )
        return try await self.getUser(input, logger: logger)
    }

    /// Generates a user attribute verification code for the specified attribute name. Sends a message to a user with a code that they must return in a VerifyUserAttribute request. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.   This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.
    @Sendable
    @inlinable
    public func getUserAttributeVerificationCode(_ input: GetUserAttributeVerificationCodeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetUserAttributeVerificationCodeResponse {
        try await self.client.execute(
            operation: "GetUserAttributeVerificationCode", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Generates a user attribute verification code for the specified attribute name. Sends a message to a user with a code that they must return in a VerifyUserAttribute request. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.   This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.
    ///
    /// Parameters:
    ///   - accessToken: A non-expired access token for the user whose attribute verification code you want to generate.
    ///   - attributeName: The attribute name returned by the server response to get the user attribute verification code.
    ///   - clientMetadata: A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the GetUserAttributeVerificationCode API action, Amazon Cognito invokes the function that is assigned to the custom message trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your GetUserAttributeVerificationCode request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see
    ///   - logger: Logger use during operation
    @inlinable
    public func getUserAttributeVerificationCode(
        accessToken: String,
        attributeName: String,
        clientMetadata: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetUserAttributeVerificationCodeResponse {
        let input = GetUserAttributeVerificationCodeRequest(
            accessToken: accessToken, 
            attributeName: attributeName, 
            clientMetadata: clientMetadata
        )
        return try await self.getUserAttributeVerificationCode(input, logger: logger)
    }

    /// Lists the authentication options for the currently signed-in user. Returns the following:   The user's multi-factor authentication (MFA) preferences.   The user's options in the USER_AUTH flow that they can select in a SELECT_CHALLENGE response or request in a PREFERRED_CHALLENGErequest.
    @Sendable
    @inlinable
    public func getUserAuthFactors(_ input: GetUserAuthFactorsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetUserAuthFactorsResponse {
        try await self.client.execute(
            operation: "GetUserAuthFactors", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the authentication options for the currently signed-in user. Returns the following:   The user's multi-factor authentication (MFA) preferences.   The user's options in the USER_AUTH flow that they can select in a SELECT_CHALLENGE response or request in a PREFERRED_CHALLENGErequest.
    ///
    /// Parameters:
    ///   - accessToken: A valid access token that Amazon Cognito issued to the user whose authentication factors you want to view.
    ///   - logger: Logger use during operation
    @inlinable
    public func getUserAuthFactors(
        accessToken: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetUserAuthFactorsResponse {
        let input = GetUserAuthFactorsRequest(
            accessToken: accessToken
        )
        return try await self.getUserAuthFactors(input, logger: logger)
    }

    /// Gets the user pool multi-factor authentication (MFA) configuration.
    @Sendable
    @inlinable
    public func getUserPoolMfaConfig(_ input: GetUserPoolMfaConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetUserPoolMfaConfigResponse {
        try await self.client.execute(
            operation: "GetUserPoolMfaConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the user pool multi-factor authentication (MFA) configuration.
    ///
    /// Parameters:
    ///   - userPoolId: The user pool ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getUserPoolMfaConfig(
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetUserPoolMfaConfigResponse {
        let input = GetUserPoolMfaConfigRequest(
            userPoolId: userPoolId
        )
        return try await self.getUserPoolMfaConfig(input, logger: logger)
    }

    /// Invalidates the identity, access, and refresh tokens that Amazon Cognito issued to a user. Call this operation when your user signs out of your app. This results in the following behavior.    Amazon Cognito no longer accepts token-authorized user operations that you authorize with a signed-out user's access tokens. For more information, see Using the Amazon Cognito user pools API and user pool endpoints. Amazon Cognito returns an Access Token has been revoked error when your app attempts to authorize a user pools API request with a revoked access token that contains the scope aws.cognito.signin.user.admin.   Amazon Cognito no longer accepts a signed-out user's ID token in a GetId  request to an identity pool with ServerSideTokenCheck enabled for its user pool IdP configuration in CognitoIdentityProvider.   Amazon Cognito no longer accepts a signed-out user's refresh tokens in refresh requests.   Other requests might be valid until your user's token expires. This operation doesn't clear the managed login session cookie. To clear the session for a user who signed in with managed login or the classic hosted UI, direct their browser session to the logout endpoint. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    @Sendable
    @inlinable
    public func globalSignOut(_ input: GlobalSignOutRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GlobalSignOutResponse {
        try await self.client.execute(
            operation: "GlobalSignOut", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Invalidates the identity, access, and refresh tokens that Amazon Cognito issued to a user. Call this operation when your user signs out of your app. This results in the following behavior.    Amazon Cognito no longer accepts token-authorized user operations that you authorize with a signed-out user's access tokens. For more information, see Using the Amazon Cognito user pools API and user pool endpoints. Amazon Cognito returns an Access Token has been revoked error when your app attempts to authorize a user pools API request with a revoked access token that contains the scope aws.cognito.signin.user.admin.   Amazon Cognito no longer accepts a signed-out user's ID token in a GetId  request to an identity pool with ServerSideTokenCheck enabled for its user pool IdP configuration in CognitoIdentityProvider.   Amazon Cognito no longer accepts a signed-out user's refresh tokens in refresh requests.   Other requests might be valid until your user's token expires. This operation doesn't clear the managed login session cookie. To clear the session for a user who signed in with managed login or the classic hosted UI, direct their browser session to the logout endpoint. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    ///
    /// Parameters:
    ///   - accessToken: A valid access token that Amazon Cognito issued to the user who you want to sign out.
    ///   - logger: Logger use during operation
    @inlinable
    public func globalSignOut(
        accessToken: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GlobalSignOutResponse {
        let input = GlobalSignOutRequest(
            accessToken: accessToken
        )
        return try await self.globalSignOut(input, logger: logger)
    }

    /// Initiates sign-in for a user in the Amazon Cognito user directory. You can't sign in a user with a federated IdP with InitiateAuth. For more information, see  Adding user pool sign-in through a third party.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.   This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.
    @Sendable
    @inlinable
    public func initiateAuth(_ input: InitiateAuthRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> InitiateAuthResponse {
        try await self.client.execute(
            operation: "InitiateAuth", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Initiates sign-in for a user in the Amazon Cognito user directory. You can't sign in a user with a federated IdP with InitiateAuth. For more information, see  Adding user pool sign-in through a third party.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.   This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.
    ///
    /// Parameters:
    ///   - analyticsMetadata: The Amazon Pinpoint analytics metadata that contributes to your metrics for InitiateAuth calls.
    ///   - authFlow: The authentication flow that you want to initiate. Each AuthFlow has linked AuthParameters that you must submit. The following are some example flows and their parameters.    USER_AUTH: Request a preferred authentication type or review available authentication types. From the offered authentication types, select one in a challenge response and then authenticate with that method in an additional challenge response.    REFRESH_TOKEN_AUTH: Receive new ID and access tokens when you pass a REFRESH_TOKEN parameter with a valid refresh token as the value.    USER_SRP_AUTH: Receive secure remote password (SRP) variables for the next challenge, PASSWORD_VERIFIER, when you pass USERNAME and SRP_A parameters.    USER_PASSWORD_AUTH: Receive new tokens or the next challenge, for example SOFTWARE_TOKEN_MFA, when you pass USERNAME and PASSWORD parameters.    All flows   USER_AUTH  The entry point for sign-in with passwords, one-time passwords, and WebAuthN authenticators.  USER_SRP_AUTH  Username-password authentication with the Secure Remote Password (SRP) protocol. For more information, see Use SRP password verification in custom authentication flow.  REFRESH_TOKEN_AUTH and REFRESH_TOKEN  Provide a valid refresh token and receive new ID and access tokens. For more information, see Using the refresh token.  CUSTOM_AUTH  Custom authentication with Lambda triggers. For more information, see Custom authentication challenge Lambda triggers.  USER_PASSWORD_AUTH  Username-password authentication with the password sent directly in the request. For more information, see Admin authentication flow.    ADMIN_USER_PASSWORD_AUTH is a flow type of AdminInitiateAuth and isn't valid for InitiateAuth. ADMIN_NO_SRP_AUTH is a legacy server-side username-password flow and isn't valid for InitiateAuth.
    ///   - authParameters: The authentication parameters. These are inputs corresponding to the AuthFlow that you're invoking. The required values depend on the value of AuthFlow:   For USER_AUTH: USERNAME (required), PREFERRED_CHALLENGE. If you don't provide a value for PREFERRED_CHALLENGE, Amazon Cognito responds with the AvailableChallenges parameter that specifies the available sign-in methods.   For USER_SRP_AUTH: USERNAME (required), SRP_A (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY.   For USER_PASSWORD_AUTH: USERNAME (required), PASSWORD (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY.   For REFRESH_TOKEN_AUTH/REFRESH_TOKEN: REFRESH_TOKEN (required), SECRET_HASH (required if the app client is configured with a client secret), DEVICE_KEY.   For CUSTOM_AUTH: USERNAME (required), SECRET_HASH (if app client is configured with client secret), DEVICE_KEY. To start the authentication flow with password verification, include ChallengeName: SRP_A and SRP_A: (The SRP_A Value).   For more information about SECRET_HASH, see Computing secret hash values. For information about DEVICE_KEY, see Working with user devices in your user pool.
    ///   - clientId: The app client ID.
    ///   - clientMetadata: A map of custom key-value pairs that you can provide as input for certain custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the InitiateAuth API action, Amazon Cognito invokes the Lambda functions that are specified for various triggers. The ClientMetadata value is passed as input to the functions for only the following triggers:   Pre signup   Pre authentication   User migration   When Amazon Cognito invokes the functions for these triggers, it passes a JSON payload, which the function receives as input. This payload contains a validationData attribute, which provides the data that you assigned to the ClientMetadata parameter in your InitiateAuth request. In your function code in Lambda, you can process the validationData value to enhance your workflow for your specific needs. When you use the InitiateAuth API action, Amazon Cognito also invokes the functions for the following triggers, but it doesn't provide the ClientMetadata value as input:   Post authentication   Custom message   Pre token generation   Create auth challenge   Define auth challenge   Custom email sender   Custom SMS sender   For more information, see
    ///   - session: The optional session ID from a ConfirmSignUp API request. You can sign in a user directly from the sign-up process with the USER_AUTH authentication flow.
    ///   - userContextData: Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced
    ///   - logger: Logger use during operation
    @inlinable
    public func initiateAuth(
        analyticsMetadata: AnalyticsMetadataType? = nil,
        authFlow: AuthFlowType,
        authParameters: [String: String]? = nil,
        clientId: String,
        clientMetadata: [String: String]? = nil,
        session: String? = nil,
        userContextData: UserContextDataType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> InitiateAuthResponse {
        let input = InitiateAuthRequest(
            analyticsMetadata: analyticsMetadata, 
            authFlow: authFlow, 
            authParameters: authParameters, 
            clientId: clientId, 
            clientMetadata: clientMetadata, 
            session: session, 
            userContextData: userContextData
        )
        return try await self.initiateAuth(input, logger: logger)
    }

    /// Lists the sign-in devices that Amazon Cognito has registered to the current user. For more information about device authentication, see Working with user devices in your user pool. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    @Sendable
    @inlinable
    public func listDevices(_ input: ListDevicesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDevicesResponse {
        try await self.client.execute(
            operation: "ListDevices", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the sign-in devices that Amazon Cognito has registered to the current user. For more information about device authentication, see Working with user devices in your user pool. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    ///
    /// Parameters:
    ///   - accessToken: A valid access token that Amazon Cognito issued to the user whose list of devices you want to view.
    ///   - limit: The limit of the device request.
    ///   - paginationToken: This API operation returns a limited number of results. The pagination token is
    ///   - logger: Logger use during operation
    @inlinable
    public func listDevices(
        accessToken: String,
        limit: Int? = nil,
        paginationToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDevicesResponse {
        let input = ListDevicesRequest(
            accessToken: accessToken, 
            limit: limit, 
            paginationToken: paginationToken
        )
        return try await self.listDevices(input, logger: logger)
    }

    /// Lists the groups associated with a user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func listGroups(_ input: ListGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListGroupsResponse {
        try await self.client.execute(
            operation: "ListGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the groups associated with a user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - limit: The limit of the request to list groups.
    ///   - nextToken: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    ///   - userPoolId: The ID of the user pool.
    ///   - logger: Logger use during operation
    @inlinable
    public func listGroups(
        limit: Int? = nil,
        nextToken: String? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListGroupsResponse {
        let input = ListGroupsRequest(
            limit: limit, 
            nextToken: nextToken, 
            userPoolId: userPoolId
        )
        return try await self.listGroups(input, logger: logger)
    }

    /// Lists information about all IdPs for a user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func listIdentityProviders(_ input: ListIdentityProvidersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListIdentityProvidersResponse {
        try await self.client.execute(
            operation: "ListIdentityProviders", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists information about all IdPs for a user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of IdPs to return.
    ///   - nextToken: A pagination token.
    ///   - userPoolId: The user pool ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func listIdentityProviders(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListIdentityProvidersResponse {
        let input = ListIdentityProvidersRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            userPoolId: userPoolId
        )
        return try await self.listIdentityProviders(input, logger: logger)
    }

    /// Lists the resource servers for a user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func listResourceServers(_ input: ListResourceServersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListResourceServersResponse {
        try await self.client.execute(
            operation: "ListResourceServers", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the resource servers for a user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of resource servers to return.
    ///   - nextToken: A pagination token.
    ///   - userPoolId: The ID of the user pool.
    ///   - logger: Logger use during operation
    @inlinable
    public func listResourceServers(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListResourceServersResponse {
        let input = ListResourceServersRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            userPoolId: userPoolId
        )
        return try await self.listResourceServers(input, logger: logger)
    }

    /// Lists the tags that are assigned to an Amazon Cognito user pool. A tag is a label that you can apply to user pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria. You can use this action up to 10 times per second, per account.
    @Sendable
    @inlinable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the tags that are assigned to an Amazon Cognito user pool. A tag is a label that you can apply to user pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria. You can use this action up to 10 times per second, per account.
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Name (ARN) of the user pool that the tags are assigned to.
    ///   - logger: Logger use during operation
    @inlinable
    public func listTagsForResource(
        resourceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTagsForResourceResponse {
        let input = ListTagsForResourceRequest(
            resourceArn: resourceArn
        )
        return try await self.listTagsForResource(input, logger: logger)
    }

    /// Lists user import jobs for a user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func listUserImportJobs(_ input: ListUserImportJobsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListUserImportJobsResponse {
        try await self.client.execute(
            operation: "ListUserImportJobs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists user import jobs for a user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of import jobs you want the request to return.
    ///   - paginationToken: This API operation returns a limited number of results. The pagination token is
    ///   - userPoolId: The ID of the user pool that the users are being imported into.
    ///   - logger: Logger use during operation
    @inlinable
    public func listUserImportJobs(
        maxResults: Int,
        paginationToken: String? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListUserImportJobsResponse {
        let input = ListUserImportJobsRequest(
            maxResults: maxResults, 
            paginationToken: paginationToken, 
            userPoolId: userPoolId
        )
        return try await self.listUserImportJobs(input, logger: logger)
    }

    /// Lists the clients that have been created for the specified user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func listUserPoolClients(_ input: ListUserPoolClientsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListUserPoolClientsResponse {
        try await self.client.execute(
            operation: "ListUserPoolClients", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the clients that have been created for the specified user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results you want the request to return when listing the user pool clients.
    ///   - nextToken: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    ///   - userPoolId: The ID of the user pool where you want to list user pool clients.
    ///   - logger: Logger use during operation
    @inlinable
    public func listUserPoolClients(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListUserPoolClientsResponse {
        let input = ListUserPoolClientsRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            userPoolId: userPoolId
        )
        return try await self.listUserPoolClients(input, logger: logger)
    }

    /// Lists the user pools associated with an Amazon Web Services account.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func listUserPools(_ input: ListUserPoolsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListUserPoolsResponse {
        try await self.client.execute(
            operation: "ListUserPools", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the user pools associated with an Amazon Web Services account.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results you want the request to return when listing the user pools.
    ///   - nextToken: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    ///   - logger: Logger use during operation
    @inlinable
    public func listUserPools(
        maxResults: Int,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListUserPoolsResponse {
        let input = ListUserPoolsRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listUserPools(input, logger: logger)
    }

    /// Lists users and their basic details in a user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func listUsers(_ input: ListUsersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListUsersResponse {
        try await self.client.execute(
            operation: "ListUsers", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists users and their basic details in a user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - attributesToGet: A JSON array of user attribute names, for example given_name, that you want Amazon Cognito to include in the response for each user. When you don't provide an AttributesToGet parameter, Amazon Cognito returns all attributes for each user. Use AttributesToGet with required attributes in your user pool, or in conjunction with Filter. Amazon Cognito returns an error if not all users in the results have set a value for the attribute you request. Attributes that you can't filter on, including custom attributes, must have a value set in every user profile before an AttributesToGet parameter returns results.
    ///   - filter: A filter string of the form "AttributeName Filter-Type "AttributeValue". Quotation marks within the filter string must be escaped using the backslash (\) character. For example, "family_name = \"Reddy\"".    AttributeName: The name of the attribute to search for. You can only search for one attribute at a time.    Filter-Type: For an exact match, use =, for example, "given_name = \"Jon\"". For a prefix ("starts with") match, use ^=, for example, "given_name ^= \"Jon\"".     AttributeValue: The attribute value that must be matched for each user.   If the filter string is empty, ListUsers returns all users in the user pool. You can only search for the following standard attributes:    username (case-sensitive)    email     phone_number     name     given_name     family_name     preferred_username     cognito:user_status (called Status in the Console) (case-insensitive)    status (called Enabled in the Console) (case-sensitive)     sub    Custom attributes aren't searchable.  You can also list users with a client-side filter. The server-side filter matches no more than one attribute. For an advanced search, use a client-side filter with the --query parameter of the list-users action in the CLI. When you use a client-side filter, ListUsers returns a paginated list of zero or more users. You can receive multiple pages in a row with zero results. Repeat the query with each pagination token that is returned until you receive a null pagination token value, and then review the combined result.  For more information about server-side and client-side filtering, see FilteringCLI output in the Command Line Interface User Guide.   For more information, see Searching for Users Using the ListUsers API and Examples of Using the ListUsers API in the Amazon Cognito Developer Guide.
    ///   - limit: Maximum number of users to be returned.
    ///   - paginationToken: This API operation returns a limited number of results. The pagination token is
    ///   - userPoolId: The ID of the user pool on which the search should be performed.
    ///   - logger: Logger use during operation
    @inlinable
    public func listUsers(
        attributesToGet: [String]? = nil,
        filter: String? = nil,
        limit: Int? = nil,
        paginationToken: String? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListUsersResponse {
        let input = ListUsersRequest(
            attributesToGet: attributesToGet, 
            filter: filter, 
            limit: limit, 
            paginationToken: paginationToken, 
            userPoolId: userPoolId
        )
        return try await self.listUsers(input, logger: logger)
    }

    /// Lists the users in the specified group.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func listUsersInGroup(_ input: ListUsersInGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListUsersInGroupResponse {
        try await self.client.execute(
            operation: "ListUsersInGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the users in the specified group.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - groupName: The name of the group.
    ///   - limit: The maximum number of users that you want to retrieve before pagination.
    ///   - nextToken: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    ///   - userPoolId: The ID of the user pool.
    ///   - logger: Logger use during operation
    @inlinable
    public func listUsersInGroup(
        groupName: String,
        limit: Int? = nil,
        nextToken: String? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListUsersInGroupResponse {
        let input = ListUsersInGroupRequest(
            groupName: groupName, 
            limit: limit, 
            nextToken: nextToken, 
            userPoolId: userPoolId
        )
        return try await self.listUsersInGroup(input, logger: logger)
    }

    /// Generates a list of the current user's registered passkey, or webauthN, credentials.
    @Sendable
    @inlinable
    public func listWebAuthnCredentials(_ input: ListWebAuthnCredentialsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListWebAuthnCredentialsResponse {
        try await self.client.execute(
            operation: "ListWebAuthnCredentials", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Generates a list of the current user's registered passkey, or webauthN, credentials.
    ///
    /// Parameters:
    ///   - accessToken: A valid access token that Amazon Cognito issued to the user whose registered passkeys you want to list.
    ///   - maxResults: The maximum number of the user's passkey credentials that you want to return.
    ///   - nextToken: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    ///   - logger: Logger use during operation
    @inlinable
    public func listWebAuthnCredentials(
        accessToken: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListWebAuthnCredentialsResponse {
        let input = ListWebAuthnCredentialsRequest(
            accessToken: accessToken, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listWebAuthnCredentials(input, logger: logger)
    }

    /// Resends the confirmation (for confirmation of registration) to a specific user in the user pool.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.   This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.
    @Sendable
    @inlinable
    public func resendConfirmationCode(_ input: ResendConfirmationCodeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ResendConfirmationCodeResponse {
        try await self.client.execute(
            operation: "ResendConfirmationCode", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Resends the confirmation (for confirmation of registration) to a specific user in the user pool.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.   This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.
    ///
    /// Parameters:
    ///   - analyticsMetadata: The Amazon Pinpoint analytics metadata that contributes to your metrics for ResendConfirmationCode calls.
    ///   - clientId: The ID of the client associated with the user pool.
    ///   - clientMetadata: A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the ResendConfirmationCode API action, Amazon Cognito invokes the function that is assigned to the custom message trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your ResendConfirmationCode request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see
    ///   - secretHash: A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message. For more information about SecretHash, see Computing secret hash values.
    ///   - userContextData: Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - logger: Logger use during operation
    @inlinable
    public func resendConfirmationCode(
        analyticsMetadata: AnalyticsMetadataType? = nil,
        clientId: String,
        clientMetadata: [String: String]? = nil,
        secretHash: String? = nil,
        userContextData: UserContextDataType? = nil,
        username: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ResendConfirmationCodeResponse {
        let input = ResendConfirmationCodeRequest(
            analyticsMetadata: analyticsMetadata, 
            clientId: clientId, 
            clientMetadata: clientMetadata, 
            secretHash: secretHash, 
            userContextData: userContextData, 
            username: username
        )
        return try await self.resendConfirmationCode(input, logger: logger)
    }

    /// Some API operations in a user pool generate a challenge, like a prompt for an MFA code, for device authentication that bypasses MFA, or for a custom authentication challenge. A RespondToAuthChallenge API request provides the answer to that challenge, like a code or a secure remote password (SRP). The parameters of a response to an authentication challenge vary with the type of challenge. For more information about custom authentication challenges, see Custom authentication challenge Lambda triggers.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.   This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.
    @Sendable
    @inlinable
    public func respondToAuthChallenge(_ input: RespondToAuthChallengeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RespondToAuthChallengeResponse {
        try await self.client.execute(
            operation: "RespondToAuthChallenge", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Some API operations in a user pool generate a challenge, like a prompt for an MFA code, for device authentication that bypasses MFA, or for a custom authentication challenge. A RespondToAuthChallenge API request provides the answer to that challenge, like a code or a secure remote password (SRP). The parameters of a response to an authentication challenge vary with the type of challenge. For more information about custom authentication challenges, see Custom authentication challenge Lambda triggers.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.   This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.
    ///
    /// Parameters:
    ///   - analyticsMetadata: The Amazon Pinpoint analytics metadata that contributes to your metrics for RespondToAuthChallenge calls.
    ///   - challengeName: The challenge name. For more information, see InitiateAuth.  ADMIN_NO_SRP_AUTH isn't a valid value.
    ///   - challengeResponses: The responses to the challenge that you received in the previous request. Each challenge has its own required response parameters. The following examples are partial JSON request bodies that highlight challenge-response parameters.  You must provide a SECRET_HASH parameter in all challenge responses to an app client that has a client secret. Include a DEVICE_KEY for device authentication.   SELECT_CHALLENGE   "ChallengeName": "SELECT_CHALLENGE", "ChallengeResponses": { "USERNAME": "[username]", "ANSWER": "[Challenge name]"}  Available challenges are PASSWORD, PASSWORD_SRP,  EMAIL_OTP, SMS_OTP, and WEB_AUTHN. Complete authentication in the SELECT_CHALLENGE response for PASSWORD, PASSWORD_SRP, and WEB_AUTHN:    "ChallengeName": "SELECT_CHALLENGE", "ChallengeResponses": { "ANSWER": "WEB_AUTHN", "USERNAME": "[username]", "CREDENTIAL": "[AuthenticationResponseJSON]"}  See  AuthenticationResponseJSON.    "ChallengeName": "SELECT_CHALLENGE", "ChallengeResponses": { "ANSWER": "PASSWORD", "USERNAME": "[username]", "PASSWORD": "[password]"}     "ChallengeName": "SELECT_CHALLENGE", "ChallengeResponses": { "ANSWER": "PASSWORD_SRP", "USERNAME": "[username]", "SRP_A": "[SRP_A]"}    For SMS_OTP and EMAIL_OTP, respond with the username and answer. Your user pool will send a code for the user to submit in the next challenge response.    "ChallengeName": "SELECT_CHALLENGE", "ChallengeResponses": { "ANSWER": "SMS_OTP", "USERNAME": "[username]"}     "ChallengeName": "SELECT_CHALLENGE", "ChallengeResponses": { "ANSWER": "EMAIL_OTP", "USERNAME": "[username]"}     SMS_OTP   "ChallengeName": "SMS_OTP", "ChallengeResponses":  {"SMS_OTP_CODE": "[code]", "USERNAME": "[username]"}   EMAIL_OTP   "ChallengeName": "EMAIL_OTP", "ChallengeResponses": {"EMAIL_OTP_CODE": "[code]", "USERNAME": "[username]"}   SMS_MFA   "ChallengeName": "SMS_MFA", "ChallengeResponses": {"SMS_MFA_CODE": "[code]", "USERNAME": "[username]"}   PASSWORD_VERIFIER  This challenge response is part of the SRP flow. Amazon Cognito requires  that your application respond to this challenge within a few seconds. When the response time exceeds this period, your user pool returns a NotAuthorizedException error.  "ChallengeName": "PASSWORD_VERIFIER", "ChallengeResponses": {"PASSWORD_CLAIM_SIGNATURE": "[claim_signature]", "PASSWORD_CLAIM_SECRET_BLOCK": "[secret_block]", "TIMESTAMP": [timestamp], "USERNAME": "[username]"}  Add "DEVICE_KEY" when you sign in with a remembered device.  CUSTOM_CHALLENGE   "ChallengeName": "CUSTOM_CHALLENGE", "ChallengeResponses": {"USERNAME": "[username]", "ANSWER": "[challenge_answer]"}  Add "DEVICE_KEY" when you sign in with a remembered device.  NEW_PASSWORD_REQUIRED   "ChallengeName": "NEW_PASSWORD_REQUIRED", "ChallengeResponses": {"NEW_PASSWORD": "[new_password]", "USERNAME": "[username]"}  To set any required attributes that InitiateAuth returned in an requiredAttributes parameter, add "userAttributes.[attribute_name]": "[attribute_value]". This parameter can also set values for writable attributes that aren't required by your user pool.  In a NEW_PASSWORD_REQUIRED challenge response, you can't modify a required attribute that already has a value.
    ///   - clientId: The app client ID.
    ///   - clientMetadata: A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the RespondToAuthChallenge API action, Amazon Cognito invokes any functions that are assigned to the following triggers: post authentication, pre token generation, define auth challenge, create auth challenge, and verify auth challenge. When Amazon Cognito invokes any of these functions, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your RespondToAuthChallenge request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see
    ///   - session: The session that should be passed both ways in challenge-response calls to the service. If InitiateAuth or RespondToAuthChallenge API call determines that the caller must pass another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
    ///   - userContextData: Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced
    ///   - logger: Logger use during operation
    @inlinable
    public func respondToAuthChallenge(
        analyticsMetadata: AnalyticsMetadataType? = nil,
        challengeName: ChallengeNameType,
        challengeResponses: [String: String]? = nil,
        clientId: String,
        clientMetadata: [String: String]? = nil,
        session: String? = nil,
        userContextData: UserContextDataType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RespondToAuthChallengeResponse {
        let input = RespondToAuthChallengeRequest(
            analyticsMetadata: analyticsMetadata, 
            challengeName: challengeName, 
            challengeResponses: challengeResponses, 
            clientId: clientId, 
            clientMetadata: clientMetadata, 
            session: session, 
            userContextData: userContextData
        )
        return try await self.respondToAuthChallenge(input, logger: logger)
    }

    /// Revokes all of the access tokens generated by, and at the same time as, the specified refresh token. After a token is revoked, you can't use the revoked token to access Amazon Cognito user APIs, or to authorize access to your resource server.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    @Sendable
    @inlinable
    public func revokeToken(_ input: RevokeTokenRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RevokeTokenResponse {
        try await self.client.execute(
            operation: "RevokeToken", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Revokes all of the access tokens generated by, and at the same time as, the specified refresh token. After a token is revoked, you can't use the revoked token to access Amazon Cognito user APIs, or to authorize access to your resource server.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    ///
    /// Parameters:
    ///   - clientId: The client ID for the token that you want to revoke.
    ///   - clientSecret: The secret for the client ID. This is required only if the client ID has a secret.
    ///   - token: The refresh token that you want to revoke.
    ///   - logger: Logger use during operation
    @inlinable
    public func revokeToken(
        clientId: String,
        clientSecret: String? = nil,
        token: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RevokeTokenResponse {
        let input = RevokeTokenRequest(
            clientId: clientId, 
            clientSecret: clientSecret, 
            token: token
        )
        return try await self.revokeToken(input, logger: logger)
    }

    /// Sets up or modifies the logging configuration of a user pool. User pools can export user notification logs and advanced security features user activity logs.
    @Sendable
    @inlinable
    public func setLogDeliveryConfiguration(_ input: SetLogDeliveryConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SetLogDeliveryConfigurationResponse {
        try await self.client.execute(
            operation: "SetLogDeliveryConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sets up or modifies the logging configuration of a user pool. User pools can export user notification logs and advanced security features user activity logs.
    ///
    /// Parameters:
    ///   - logConfigurations: A collection of the logging configurations for a user pool.
    ///   - userPoolId: The ID of the user pool where you want to configure logging.
    ///   - logger: Logger use during operation
    @inlinable
    public func setLogDeliveryConfiguration(
        logConfigurations: [LogConfigurationType],
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SetLogDeliveryConfigurationResponse {
        let input = SetLogDeliveryConfigurationRequest(
            logConfigurations: logConfigurations, 
            userPoolId: userPoolId
        )
        return try await self.setLogDeliveryConfiguration(input, logger: logger)
    }

    /// Configures actions on detected risks. To delete the risk configuration for UserPoolId or ClientId, pass null values for all four configuration types. To activate Amazon Cognito advanced security features, update the user pool to include the UserPoolAddOns keyAdvancedSecurityMode.
    @Sendable
    @inlinable
    public func setRiskConfiguration(_ input: SetRiskConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SetRiskConfigurationResponse {
        try await self.client.execute(
            operation: "SetRiskConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Configures actions on detected risks. To delete the risk configuration for UserPoolId or ClientId, pass null values for all four configuration types. To activate Amazon Cognito advanced security features, update the user pool to include the UserPoolAddOns keyAdvancedSecurityMode.
    ///
    /// Parameters:
    ///   - accountTakeoverRiskConfiguration: The account takeover risk configuration.
    ///   - clientId: The app client ID. If ClientId is null, then the risk configuration is mapped to userPoolId. When the client ID is null, the same risk configuration is applied to all the clients in the userPool. Otherwise, ClientId is mapped to the client. When the client ID isn't null, the user pool configuration is overridden and the risk configuration for the client is used instead.
    ///   - compromisedCredentialsRiskConfiguration: The compromised credentials risk configuration.
    ///   - riskExceptionConfiguration: The configuration to override the risk decision.
    ///   - userPoolId: The user pool ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func setRiskConfiguration(
        accountTakeoverRiskConfiguration: AccountTakeoverRiskConfigurationType? = nil,
        clientId: String? = nil,
        compromisedCredentialsRiskConfiguration: CompromisedCredentialsRiskConfigurationType? = nil,
        riskExceptionConfiguration: RiskExceptionConfigurationType? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SetRiskConfigurationResponse {
        let input = SetRiskConfigurationRequest(
            accountTakeoverRiskConfiguration: accountTakeoverRiskConfiguration, 
            clientId: clientId, 
            compromisedCredentialsRiskConfiguration: compromisedCredentialsRiskConfiguration, 
            riskExceptionConfiguration: riskExceptionConfiguration, 
            userPoolId: userPoolId
        )
        return try await self.setRiskConfiguration(input, logger: logger)
    }

    /// Sets the user interface (UI) customization information for a user pool's built-in app UI. You can specify app UI customization settings for a single client (with a specific clientId) or for all clients (by setting the clientId to ALL). If you specify ALL, the default configuration is used for every client that has no previously set UI customization. If you specify UI customization settings for a particular client, it will no longer return to the ALL configuration.  To use this API, your user pool must have a domain associated with it. Otherwise, there is no place to host the app's pages, and the service will throw an error.
    @Sendable
    @inlinable
    public func setUICustomization(_ input: SetUICustomizationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SetUICustomizationResponse {
        try await self.client.execute(
            operation: "SetUICustomization", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sets the user interface (UI) customization information for a user pool's built-in app UI. You can specify app UI customization settings for a single client (with a specific clientId) or for all clients (by setting the clientId to ALL). If you specify ALL, the default configuration is used for every client that has no previously set UI customization. If you specify UI customization settings for a particular client, it will no longer return to the ALL configuration.  To use this API, your user pool must have a domain associated with it. Otherwise, there is no place to host the app's pages, and the service will throw an error.
    ///
    /// Parameters:
    ///   - clientId: The client ID for the client app.
    ///   - css: The CSS values in the UI customization.
    ///   - imageFile: The uploaded logo image for the UI customization.
    ///   - userPoolId: The ID of the user pool.
    ///   - logger: Logger use during operation
    @inlinable
    public func setUICustomization(
        clientId: String? = nil,
        css: String? = nil,
        imageFile: AWSBase64Data? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SetUICustomizationResponse {
        let input = SetUICustomizationRequest(
            clientId: clientId, 
            css: css, 
            imageFile: imageFile, 
            userPoolId: userPoolId
        )
        return try await self.setUICustomization(input, logger: logger)
    }

    /// Set the user's multi-factor authentication (MFA) method preference, including which MFA factors are activated and if any are preferred. Only one factor can be set as preferred. The preferred MFA factor will be used to authenticate a user if multiple factors are activated. If multiple options are activated and no preference is set, a challenge to choose an MFA option will be returned during sign-in. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts unless device tracking is turned on and the device has been trusted. If you want MFA to be applied selectively based on the assessed risk level of sign-in attempts, deactivate MFA for users and turn on Adaptive Authentication for the user pool. This operation doesn't reset an existing TOTP MFA for a user. To register a new TOTP factor for a user, make an AssociateSoftwareToken request. For more information, see TOTP software token MFA. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    @Sendable
    @inlinable
    public func setUserMFAPreference(_ input: SetUserMFAPreferenceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SetUserMFAPreferenceResponse {
        try await self.client.execute(
            operation: "SetUserMFAPreference", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Set the user's multi-factor authentication (MFA) method preference, including which MFA factors are activated and if any are preferred. Only one factor can be set as preferred. The preferred MFA factor will be used to authenticate a user if multiple factors are activated. If multiple options are activated and no preference is set, a challenge to choose an MFA option will be returned during sign-in. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts unless device tracking is turned on and the device has been trusted. If you want MFA to be applied selectively based on the assessed risk level of sign-in attempts, deactivate MFA for users and turn on Adaptive Authentication for the user pool. This operation doesn't reset an existing TOTP MFA for a user. To register a new TOTP factor for a user, make an AssociateSoftwareToken request. For more information, see TOTP software token MFA. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    ///
    /// Parameters:
    ///   - accessToken: A valid access token that Amazon Cognito issued to the user whose MFA preference you want to set.
    ///   - emailMfaSettings: User preferences for email message MFA. Activates or deactivates email MFA and sets it as the preferred MFA method when multiple methods are available. To activate this setting,  advanced security features must be active in your user pool.
    ///   - smsMfaSettings: User preferences for SMS message MFA. Activates or deactivates SMS MFA and sets it as the preferred MFA method when multiple methods are available.
    ///   - softwareTokenMfaSettings: User preferences for time-based one-time password (TOTP) MFA. Activates or deactivates TOTP MFA and sets it as the preferred MFA method when multiple methods are available.
    ///   - logger: Logger use during operation
    @inlinable
    public func setUserMFAPreference(
        accessToken: String,
        emailMfaSettings: EmailMfaSettingsType? = nil,
        smsMfaSettings: SMSMfaSettingsType? = nil,
        softwareTokenMfaSettings: SoftwareTokenMfaSettingsType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SetUserMFAPreferenceResponse {
        let input = SetUserMFAPreferenceRequest(
            accessToken: accessToken, 
            emailMfaSettings: emailMfaSettings, 
            smsMfaSettings: smsMfaSettings, 
            softwareTokenMfaSettings: softwareTokenMfaSettings
        )
        return try await self.setUserMFAPreference(input, logger: logger)
    }

    /// Sets the user pool multi-factor authentication (MFA) and passkey configuration.  This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.
    @Sendable
    @inlinable
    public func setUserPoolMfaConfig(_ input: SetUserPoolMfaConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SetUserPoolMfaConfigResponse {
        try await self.client.execute(
            operation: "SetUserPoolMfaConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sets the user pool multi-factor authentication (MFA) and passkey configuration.  This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.
    ///
    /// Parameters:
    ///   - emailMfaConfiguration: Configures user pool email messages for MFA. Sets the subject and body of the email message template for MFA messages. To activate this setting,  advanced security features must be active in your user pool.
    ///   - mfaConfiguration: The MFA configuration. If you set the MfaConfiguration value to ‘ON’, only users who have set up an MFA factor can sign in. To learn more, see Adding Multi-Factor Authentication (MFA) to a user pool. Valid values include:    OFF MFA won't be used for any users.    ON MFA is required for all users to sign in.    OPTIONAL MFA will be required only for individual users who have an MFA factor activated.
    ///   - smsMfaConfiguration: Configures user pool SMS messages for MFA. Sets the message template and the SMS message sending configuration for Amazon SNS.
    ///   - softwareTokenMfaConfiguration: Configures a user pool for time-based one-time password (TOTP) MFA. Enables or disables TOTP.
    ///   - userPoolId: The user pool ID.
    ///   - webAuthnConfiguration: The configuration of your user pool for passkey, or webauthN, authentication and registration. You can set this configuration independent of the MFA configuration options in this operation.
    ///   - logger: Logger use during operation
    @inlinable
    public func setUserPoolMfaConfig(
        emailMfaConfiguration: EmailMfaConfigType? = nil,
        mfaConfiguration: UserPoolMfaType? = nil,
        smsMfaConfiguration: SmsMfaConfigType? = nil,
        softwareTokenMfaConfiguration: SoftwareTokenMfaConfigType? = nil,
        userPoolId: String,
        webAuthnConfiguration: WebAuthnConfigurationType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SetUserPoolMfaConfigResponse {
        let input = SetUserPoolMfaConfigRequest(
            emailMfaConfiguration: emailMfaConfiguration, 
            mfaConfiguration: mfaConfiguration, 
            smsMfaConfiguration: smsMfaConfiguration, 
            softwareTokenMfaConfiguration: softwareTokenMfaConfiguration, 
            userPoolId: userPoolId, 
            webAuthnConfiguration: webAuthnConfiguration
        )
        return try await self.setUserPoolMfaConfig(input, logger: logger)
    }

    ///  This action is no longer supported. You can use it to configure only SMS MFA. You can't use it to configure time-based one-time password (TOTP) software token MFA. To configure either type of MFA, use SetUserMFAPreference instead. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    @Sendable
    @inlinable
    public func setUserSettings(_ input: SetUserSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SetUserSettingsResponse {
        try await self.client.execute(
            operation: "SetUserSettings", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  This action is no longer supported. You can use it to configure only SMS MFA. You can't use it to configure time-based one-time password (TOTP) software token MFA. To configure either type of MFA, use SetUserMFAPreference instead. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    ///
    /// Parameters:
    ///   - accessToken: A valid access token that Amazon Cognito issued to the user whose user settings you want to configure.
    ///   - mfaOptions: You can use this parameter only to set an SMS configuration that uses SMS for delivery.
    ///   - logger: Logger use during operation
    @inlinable
    public func setUserSettings(
        accessToken: String,
        mfaOptions: [MFAOptionType],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SetUserSettingsResponse {
        let input = SetUserSettingsRequest(
            accessToken: accessToken, 
            mfaOptions: mfaOptions
        )
        return try await self.setUserSettings(input, logger: logger)
    }

    /// Registers the user in the specified user pool and creates a user name, password, and user attributes.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.   This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.  You might receive a LimitExceeded exception in response to this request if you have exceeded a rate quota for email or SMS messages, and if your user pool automatically verifies email addresses or phone numbers. When you get this exception in the response, the user is successfully created and is in an UNCONFIRMED state. You can send a new code with the  ResendConfirmationCode request, or confirm the user as an administrator with an  AdminConfirmSignUp request.
    @Sendable
    @inlinable
    public func signUp(_ input: SignUpRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SignUpResponse {
        try await self.client.execute(
            operation: "SignUp", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Registers the user in the specified user pool and creates a user name, password, and user attributes.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.   This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.  You might receive a LimitExceeded exception in response to this request if you have exceeded a rate quota for email or SMS messages, and if your user pool automatically verifies email addresses or phone numbers. When you get this exception in the response, the user is successfully created and is in an UNCONFIRMED state. You can send a new code with the  ResendConfirmationCode request, or confirm the user as an administrator with an  AdminConfirmSignUp request.
    ///
    /// Parameters:
    ///   - analyticsMetadata: The Amazon Pinpoint analytics metadata that contributes to your metrics for SignUp calls.
    ///   - clientId: The ID of the client associated with the user pool.
    ///   - clientMetadata: A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers. You create custom workflows by assigning Lambda functions to user pool triggers. When you use the SignUp API action, Amazon Cognito invokes any functions that are assigned to the following triggers: pre sign-up, custom message, and post confirmation. When Amazon Cognito invokes any of these functions, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your SignUp request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see
    ///   - password: The password of the user you want to register. Users can sign up without a password when your user pool supports passwordless sign-in with email or SMS OTPs. To create a user with no password, omit this parameter or submit a blank value. You can only create a passwordless user when passwordless sign-in is available. See the SignInPolicyType property of CreateUserPool and UpdateUserPool.
    ///   - secretHash: A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message. For more information about SecretHash, see Computing secret hash values.
    ///   - userAttributes: An array of name-value pairs representing user attributes. For custom attributes, you must prepend the custom: prefix to the attribute name.
    ///   - userContextData: Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced
    ///   - username: The username of the user that you want to sign up. The value of this parameter is typically a username, but can be any alias attribute in your user pool.
    ///   - validationData: Temporary user attributes that contribute to the outcomes of your pre sign-up Lambda trigger. This set of key-value pairs are for custom validation of information that you  collect from your users but don't need to retain. Your Lambda function can analyze this additional data and act on it. Your function might perform external API operations like logging user attributes and validation data to Amazon CloudWatch Logs. Validation data might also affect the response that your function returns to Amazon Cognito, like automatically confirming the user if they sign up from within your network. For more information about the pre sign-up Lambda trigger, see Pre sign-up Lambda trigger.
    ///   - logger: Logger use during operation
    @inlinable
    public func signUp(
        analyticsMetadata: AnalyticsMetadataType? = nil,
        clientId: String,
        clientMetadata: [String: String]? = nil,
        password: String? = nil,
        secretHash: String? = nil,
        userAttributes: [AttributeType]? = nil,
        userContextData: UserContextDataType? = nil,
        username: String,
        validationData: [AttributeType]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SignUpResponse {
        let input = SignUpRequest(
            analyticsMetadata: analyticsMetadata, 
            clientId: clientId, 
            clientMetadata: clientMetadata, 
            password: password, 
            secretHash: secretHash, 
            userAttributes: userAttributes, 
            userContextData: userContextData, 
            username: username, 
            validationData: validationData
        )
        return try await self.signUp(input, logger: logger)
    }

    /// Starts the user import.
    @Sendable
    @inlinable
    public func startUserImportJob(_ input: StartUserImportJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartUserImportJobResponse {
        try await self.client.execute(
            operation: "StartUserImportJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts the user import.
    ///
    /// Parameters:
    ///   - jobId: The job ID for the user import job.
    ///   - userPoolId: The ID of the user pool that the users are being imported into.
    ///   - logger: Logger use during operation
    @inlinable
    public func startUserImportJob(
        jobId: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartUserImportJobResponse {
        let input = StartUserImportJobRequest(
            jobId: jobId, 
            userPoolId: userPoolId
        )
        return try await self.startUserImportJob(input, logger: logger)
    }

    /// Requests credential creation options from your user pool for registration of a passkey authenticator. Returns information about the user pool, the user profile, and authentication requirements. Users must provide this information in their request to enroll your application with their passkey provider. After users present this data and register with their passkey provider, return the response to your user pool in a  CompleteWebAuthnRegistration API request. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.
    @Sendable
    @inlinable
    public func startWebAuthnRegistration(_ input: StartWebAuthnRegistrationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartWebAuthnRegistrationResponse {
        try await self.client.execute(
            operation: "StartWebAuthnRegistration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Requests credential creation options from your user pool for registration of a passkey authenticator. Returns information about the user pool, the user profile, and authentication requirements. Users must provide this information in their request to enroll your application with their passkey provider. After users present this data and register with their passkey provider, return the response to your user pool in a  CompleteWebAuthnRegistration API request. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.
    ///
    /// Parameters:
    ///   - accessToken: A valid access token that Amazon Cognito issued to the user whose passkey metadata you want to generate.
    ///   - logger: Logger use during operation
    @inlinable
    public func startWebAuthnRegistration(
        accessToken: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartWebAuthnRegistrationResponse {
        let input = StartWebAuthnRegistrationRequest(
            accessToken: accessToken
        )
        return try await self.startWebAuthnRegistration(input, logger: logger)
    }

    /// Stops the user import job.
    @Sendable
    @inlinable
    public func stopUserImportJob(_ input: StopUserImportJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopUserImportJobResponse {
        try await self.client.execute(
            operation: "StopUserImportJob", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Stops the user import job.
    ///
    /// Parameters:
    ///   - jobId: The job ID for the user import job.
    ///   - userPoolId: The ID of the user pool that the users are being imported into.
    ///   - logger: Logger use during operation
    @inlinable
    public func stopUserImportJob(
        jobId: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StopUserImportJobResponse {
        let input = StopUserImportJobRequest(
            jobId: jobId, 
            userPoolId: userPoolId
        )
        return try await self.stopUserImportJob(input, logger: logger)
    }

    /// Assigns a set of tags to an Amazon Cognito user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria. Each tag consists of a key and value, both of which you define. A key is a general category for more specific values. For example, if you have two versions of a user pool, one for testing and another for production, you might assign an Environment tag key to both user pools. The value of this key might be Test for one user pool, and Production for the other. Tags are useful for cost tracking and access control. You can activate your tags so that they appear on the Billing and Cost Management console, where you can track the costs associated with your user pools. In an Identity and Access Management policy, you can constrain permissions for user pools based on specific tags or tag values. You can use this action up to 5 times per second, per account. A user pool can have as many as 50 tags.
    @Sendable
    @inlinable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        try await self.client.execute(
            operation: "TagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Assigns a set of tags to an Amazon Cognito user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria. Each tag consists of a key and value, both of which you define. A key is a general category for more specific values. For example, if you have two versions of a user pool, one for testing and another for production, you might assign an Environment tag key to both user pools. The value of this key might be Test for one user pool, and Production for the other. Tags are useful for cost tracking and access control. You can activate your tags so that they appear on the Billing and Cost Management console, where you can track the costs associated with your user pools. In an Identity and Access Management policy, you can constrain permissions for user pools based on specific tags or tag values. You can use this action up to 5 times per second, per account. A user pool can have as many as 50 tags.
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Name (ARN) of the user pool to assign the tags to.
    ///   - tags: The tags to assign to the user pool.
    ///   - logger: Logger use during operation
    @inlinable
    public func tagResource(
        resourceArn: String,
        tags: [String: String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TagResourceResponse {
        let input = TagResourceRequest(
            resourceArn: resourceArn, 
            tags: tags
        )
        return try await self.tagResource(input, logger: logger)
    }

    /// Removes the specified tags from an Amazon Cognito user pool. You can use this action up to 5 times per second, per account.
    @Sendable
    @inlinable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        try await self.client.execute(
            operation: "UntagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes the specified tags from an Amazon Cognito user pool. You can use this action up to 5 times per second, per account.
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Name (ARN) of the user pool that the tags are assigned to.
    ///   - tagKeys: The keys of the tags to remove from the user pool.
    ///   - logger: Logger use during operation
    @inlinable
    public func untagResource(
        resourceArn: String,
        tagKeys: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UntagResourceResponse {
        let input = UntagResourceRequest(
            resourceArn: resourceArn, 
            tagKeys: tagKeys
        )
        return try await self.untagResource(input, logger: logger)
    }

    /// Provides the feedback for an authentication event, whether it was from a valid user or not. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito advanced security.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    @Sendable
    @inlinable
    public func updateAuthEventFeedback(_ input: UpdateAuthEventFeedbackRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAuthEventFeedbackResponse {
        try await self.client.execute(
            operation: "UpdateAuthEventFeedback", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides the feedback for an authentication event, whether it was from a valid user or not. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito advanced security.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    ///
    /// Parameters:
    ///   - eventId: The event ID.
    ///   - feedbackToken: The feedback token.
    ///   - feedbackValue: The authentication event feedback value. When you provide a FeedbackValue
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - userPoolId: The user pool ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateAuthEventFeedback(
        eventId: String,
        feedbackToken: String,
        feedbackValue: FeedbackValueType,
        username: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateAuthEventFeedbackResponse {
        let input = UpdateAuthEventFeedbackRequest(
            eventId: eventId, 
            feedbackToken: feedbackToken, 
            feedbackValue: feedbackValue, 
            username: username, 
            userPoolId: userPoolId
        )
        return try await self.updateAuthEventFeedback(input, logger: logger)
    }

    /// Updates the device status. For more information about device authentication, see Working with user devices in your user pool. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    @Sendable
    @inlinable
    public func updateDeviceStatus(_ input: UpdateDeviceStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDeviceStatusResponse {
        try await self.client.execute(
            operation: "UpdateDeviceStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the device status. For more information about device authentication, see Working with user devices in your user pool. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    ///
    /// Parameters:
    ///   - accessToken: A valid access token that Amazon Cognito issued to the user whose device status you want to update.
    ///   - deviceKey: The device key.
    ///   - deviceRememberedStatus: The status of whether a device is remembered.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateDeviceStatus(
        accessToken: String,
        deviceKey: String,
        deviceRememberedStatus: DeviceRememberedStatusType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateDeviceStatusResponse {
        let input = UpdateDeviceStatusRequest(
            accessToken: accessToken, 
            deviceKey: deviceKey, 
            deviceRememberedStatus: deviceRememberedStatus
        )
        return try await self.updateDeviceStatus(input, logger: logger)
    }

    /// Updates the specified group with the specified attributes.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func updateGroup(_ input: UpdateGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateGroupResponse {
        try await self.client.execute(
            operation: "UpdateGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the specified group with the specified attributes.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - description: A string containing the new description of the group.
    ///   - groupName: The name of the group.
    ///   - precedence: The new precedence value for the group. For more information about this parameter, see CreateGroup.
    ///   - roleArn: The new role Amazon Resource Name (ARN) for the group. This is used for setting the cognito:roles and cognito:preferred_role claims in the token.
    ///   - userPoolId: The ID of the user pool.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateGroup(
        description: String? = nil,
        groupName: String,
        precedence: Int? = nil,
        roleArn: String? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateGroupResponse {
        let input = UpdateGroupRequest(
            description: description, 
            groupName: groupName, 
            precedence: precedence, 
            roleArn: roleArn, 
            userPoolId: userPoolId
        )
        return try await self.updateGroup(input, logger: logger)
    }

    /// Updates IdP information for a user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func updateIdentityProvider(_ input: UpdateIdentityProviderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateIdentityProviderResponse {
        try await self.client.execute(
            operation: "UpdateIdentityProvider", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates IdP information for a user pool.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - attributeMapping: The IdP attribute mapping to be changed.
    ///   - idpIdentifiers: A list of IdP identifiers.
    ///   - providerDetails: The scopes, URLs, and identifiers for your external identity provider. The following
    ///   - providerName: The IdP name.
    ///   - userPoolId: The user pool ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateIdentityProvider(
        attributeMapping: [String: String]? = nil,
        idpIdentifiers: [String]? = nil,
        providerDetails: [String: String]? = nil,
        providerName: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateIdentityProviderResponse {
        let input = UpdateIdentityProviderRequest(
            attributeMapping: attributeMapping, 
            idpIdentifiers: idpIdentifiers, 
            providerDetails: providerDetails, 
            providerName: providerName, 
            userPoolId: userPoolId
        )
        return try await self.updateIdentityProvider(input, logger: logger)
    }

    /// Configures the branding settings for a user pool style. This operation is the programmatic option for the configuration of a style in the branding designer. Provides values for UI customization in a Settings JSON object and image files in an Assets array. This operation has a 2-megabyte request-size limit and include the CSS settings and image assets for your app client. Your branding settings might exceed 2MB in size. Amazon Cognito doesn't require that you pass all parameters in one request and preserves existing style settings that you don't specify. If your request is larger than 2MB, separate it into multiple requests, each with a size smaller than the limit.  As a best practice, modify the output of DescribeManagedLoginBrandingByClient into the request parameters for this operation. To get all settings, set ReturnMergedResources to true. For more information, see API and SDK operations for managed login branding   Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func updateManagedLoginBranding(_ input: UpdateManagedLoginBrandingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateManagedLoginBrandingResponse {
        try await self.client.execute(
            operation: "UpdateManagedLoginBranding", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Configures the branding settings for a user pool style. This operation is the programmatic option for the configuration of a style in the branding designer. Provides values for UI customization in a Settings JSON object and image files in an Assets array. This operation has a 2-megabyte request-size limit and include the CSS settings and image assets for your app client. Your branding settings might exceed 2MB in size. Amazon Cognito doesn't require that you pass all parameters in one request and preserves existing style settings that you don't specify. If your request is larger than 2MB, separate it into multiple requests, each with a size smaller than the limit.  As a best practice, modify the output of DescribeManagedLoginBrandingByClient into the request parameters for this operation. To get all settings, set ReturnMergedResources to true. For more information, see API and SDK operations for managed login branding   Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - assets: An array of image files that you want to apply to roles like backgrounds, logos, and icons. Each object must also indicate whether it is for dark mode, light mode, or browser-adaptive mode.
    ///   - managedLoginBrandingId: The ID of the managed login branding style that you want to update.
    ///   - settings: A JSON file, encoded as a Document type, with the the settings that you want to apply to your style.
    ///   - useCognitoProvidedValues: When true, applies the default branding style options. This option reverts to default style options that are managed by Amazon Cognito. You can modify them later in the branding designer. When you specify true for this option, you must also omit values for Settings and Assets in the request.
    ///   - userPoolId: The ID of the user pool that contains the managed login branding style that you want to update.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateManagedLoginBranding(
        assets: [AssetType]? = nil,
        managedLoginBrandingId: String? = nil,
        settings: AWSDocument? = nil,
        useCognitoProvidedValues: Bool? = nil,
        userPoolId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateManagedLoginBrandingResponse {
        let input = UpdateManagedLoginBrandingRequest(
            assets: assets, 
            managedLoginBrandingId: managedLoginBrandingId, 
            settings: settings, 
            useCognitoProvidedValues: useCognitoProvidedValues, 
            userPoolId: userPoolId
        )
        return try await self.updateManagedLoginBranding(input, logger: logger)
    }

    /// Updates the name and scopes of resource server. All other fields are read-only.  If you don't provide a value for an attribute, it is set to the default value.   Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func updateResourceServer(_ input: UpdateResourceServerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateResourceServerResponse {
        try await self.client.execute(
            operation: "UpdateResourceServer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the name and scopes of resource server. All other fields are read-only.  If you don't provide a value for an attribute, it is set to the default value.   Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - identifier: A unique resource server identifier for the resource server. The identifier can be an API friendly name like solar-system-data. You can also set an API URL like https://solar-system-data-api.example.com as your identifier. Amazon Cognito represents scopes in the access token in the format $resource-server-identifier/$scope. Longer scope-identifier strings increase the size of your access tokens.
    ///   - name: The name of the resource server.
    ///   - scopes: The scope values to be set for the resource server.
    ///   - userPoolId: The ID of the user pool.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateResourceServer(
        identifier: String,
        name: String,
        scopes: [ResourceServerScopeType]? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateResourceServerResponse {
        let input = UpdateResourceServerRequest(
            identifier: identifier, 
            name: name, 
            scopes: scopes, 
            userPoolId: userPoolId
        )
        return try await self.updateResourceServer(input, logger: logger)
    }

    /// With this operation, your users can update one or more of their attributes with their own credentials. You authorize this API request with the user's access token. To delete an attribute from your user, submit the attribute in your API request with a blank value. Custom attribute values in this request must include the custom: prefix. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.   This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.
    @Sendable
    @inlinable
    public func updateUserAttributes(_ input: UpdateUserAttributesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateUserAttributesResponse {
        try await self.client.execute(
            operation: "UpdateUserAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// With this operation, your users can update one or more of their attributes with their own credentials. You authorize this API request with the user's access token. To delete an attribute from your user, submit the attribute in your API request with a blank value. Custom attribute values in this request must include the custom: prefix. Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.   This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.
    ///
    /// Parameters:
    ///   - accessToken: A valid access token that Amazon Cognito issued to the user whose user attributes you want to update.
    ///   - clientMetadata: A map of custom key-value pairs that you can provide as input for any custom workflows that this action initiates.  You create custom workflows by assigning Lambda functions to user pool triggers. When you use the UpdateUserAttributes API action, Amazon Cognito invokes the function that is assigned to the custom message trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a clientMetadata attribute, which provides the data that you assigned to the ClientMetadata parameter in your UpdateUserAttributes request. In your function code in Lambda, you can process the clientMetadata value to enhance your workflow for your specific needs. For more information, see
    ///   - userAttributes: An array of name-value pairs representing user attributes. For custom attributes, you must prepend the custom: prefix to the attribute name. If you have set an attribute to require verification before Amazon Cognito updates its value, this request doesn’t immediately update the value of that attribute. After your user receives and responds to a verification message to verify the new value, Amazon Cognito updates the attribute value. Your user can sign in and receive messages with the original attribute value until they verify the new value.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateUserAttributes(
        accessToken: String,
        clientMetadata: [String: String]? = nil,
        userAttributes: [AttributeType],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateUserAttributesResponse {
        let input = UpdateUserAttributesRequest(
            accessToken: accessToken, 
            clientMetadata: clientMetadata, 
            userAttributes: userAttributes
        )
        return try await self.updateUserAttributes(input, logger: logger)
    }

    ///  This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.  Updates the specified user pool with the specified attributes. You can get a list of the current user pool settings using DescribeUserPool.  If you don't provide a value for an attribute, Amazon Cognito sets it to its default value.   Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func updateUserPool(_ input: UpdateUserPoolRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateUserPoolResponse {
        try await self.client.execute(
            operation: "UpdateUserPool", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with Amazon Pinpoint. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in. If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Services service, Amazon Simple Notification Service might place your account in the SMS sandbox. In  sandbox mode , you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see  SMS message settings for Amazon Cognito user pools in the Amazon Cognito Developer Guide.  Updates the specified user pool with the specified attributes. You can get a list of the current user pool settings using DescribeUserPool.  If you don't provide a value for an attribute, Amazon Cognito sets it to its default value.   Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - accountRecoverySetting: The available verified method a user can use to recover their password when they call ForgotPassword. You can use this setting to define a preferred method when a user has more than one method available. With this setting, SMS doesn't qualify for a valid password recovery mechanism if the user also has SMS multi-factor authentication (MFA) activated. In the absence of this setting, Amazon Cognito uses the legacy behavior to determine the recovery method where SMS is preferred through email.
    ///   - adminCreateUserConfig: The configuration for AdminCreateUser requests.
    ///   - autoVerifiedAttributes: The attributes that are automatically verified when Amazon Cognito requests to update user pools.
    ///   - deletionProtection: When active, DeletionProtection prevents accidental deletion of your user
    ///   - deviceConfiguration: The device-remembering configuration for a user pool. A null value indicates that you have deactivated device remembering in your user pool.  When you provide a value for any DeviceConfiguration field, you activate the Amazon Cognito device-remembering feature.
    ///   - emailConfiguration: The email configuration of your user pool. The email configuration type sets your preferred sending method, Amazon Web Services Region, and sender for email invitation and verification messages from your user pool.
    ///   - emailVerificationMessage: This parameter is no longer used. See VerificationMessageTemplateType.
    ///   - emailVerificationSubject: This parameter is no longer used. See VerificationMessageTemplateType.
    ///   - lambdaConfig: The Lambda configuration information from the request to update the user pool.
    ///   - mfaConfiguration: Possible values include:    OFF - MFA tokens aren't required and can't be specified during user registration.    ON - MFA tokens are required for all user registrations. You can only specify ON when you're initially creating a user pool. You can use the SetUserPoolMfaConfig API operation to turn MFA "ON" for existing user pools.     OPTIONAL - Users have the option when registering to create an MFA token.
    ///   - policies: A container with the policies you want to update in a user pool.
    ///   - poolName: The updated name of your user pool.
    ///   - smsAuthenticationMessage: The contents of the SMS authentication message.
    ///   - smsConfiguration: The SMS configuration with the settings that your Amazon Cognito user pool must use to send an SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To send SMS messages with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role in your Amazon Web Services account.
    ///   - smsVerificationMessage: This parameter is no longer used. See VerificationMessageTemplateType.
    ///   - userAttributeUpdateSettings: The settings for updates to user attributes. These settings include the property AttributesRequireVerificationBeforeUpdate,
    ///   - userPoolAddOns: User pool add-ons. Contains settings for activation of advanced security features. To log user security information but take no action, set to AUDIT. To configure automatic security responses to risky traffic to your user pool, set to ENFORCED. For more information, see Adding advanced security to a user pool.
    ///   - userPoolId: The ID of the user pool you want to update.
    ///   - userPoolTags: The tag keys and values to assign to the user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria.
    ///   - userPoolTier: The user pool feature plan, or tier. This parameter determines the eligibility of the user pool for features like managed login, access-token customization, and threat protection. Defaults to ESSENTIALS.
    ///   - verificationMessageTemplate: The template for verification messages.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateUserPool(
        accountRecoverySetting: AccountRecoverySettingType? = nil,
        adminCreateUserConfig: AdminCreateUserConfigType? = nil,
        autoVerifiedAttributes: [VerifiedAttributeType]? = nil,
        deletionProtection: DeletionProtectionType? = nil,
        deviceConfiguration: DeviceConfigurationType? = nil,
        emailConfiguration: EmailConfigurationType? = nil,
        emailVerificationMessage: String? = nil,
        emailVerificationSubject: String? = nil,
        lambdaConfig: LambdaConfigType? = nil,
        mfaConfiguration: UserPoolMfaType? = nil,
        policies: UserPoolPolicyType? = nil,
        poolName: String? = nil,
        smsAuthenticationMessage: String? = nil,
        smsConfiguration: SmsConfigurationType? = nil,
        smsVerificationMessage: String? = nil,
        userAttributeUpdateSettings: UserAttributeUpdateSettingsType? = nil,
        userPoolAddOns: UserPoolAddOnsType? = nil,
        userPoolId: String,
        userPoolTags: [String: String]? = nil,
        userPoolTier: UserPoolTierType? = nil,
        verificationMessageTemplate: VerificationMessageTemplateType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateUserPoolResponse {
        let input = UpdateUserPoolRequest(
            accountRecoverySetting: accountRecoverySetting, 
            adminCreateUserConfig: adminCreateUserConfig, 
            autoVerifiedAttributes: autoVerifiedAttributes, 
            deletionProtection: deletionProtection, 
            deviceConfiguration: deviceConfiguration, 
            emailConfiguration: emailConfiguration, 
            emailVerificationMessage: emailVerificationMessage, 
            emailVerificationSubject: emailVerificationSubject, 
            lambdaConfig: lambdaConfig, 
            mfaConfiguration: mfaConfiguration, 
            policies: policies, 
            poolName: poolName, 
            smsAuthenticationMessage: smsAuthenticationMessage, 
            smsConfiguration: smsConfiguration, 
            smsVerificationMessage: smsVerificationMessage, 
            userAttributeUpdateSettings: userAttributeUpdateSettings, 
            userPoolAddOns: userPoolAddOns, 
            userPoolId: userPoolId, 
            userPoolTags: userPoolTags, 
            userPoolTier: userPoolTier, 
            verificationMessageTemplate: verificationMessageTemplate
        )
        return try await self.updateUserPool(input, logger: logger)
    }

    /// Updates the specified user pool app client with the specified attributes. You can get a list of the current user pool app client settings using DescribeUserPoolClient.  If you don't provide a value for an attribute, Amazon Cognito sets it to its default value.  You can also use this operation to enable token revocation for user pool clients. For more information about revoking tokens, see RevokeToken.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func updateUserPoolClient(_ input: UpdateUserPoolClientRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateUserPoolClientResponse {
        try await self.client.execute(
            operation: "UpdateUserPoolClient", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the specified user pool app client with the specified attributes. You can get a list of the current user pool app client settings using DescribeUserPoolClient.  If you don't provide a value for an attribute, Amazon Cognito sets it to its default value.  You can also use this operation to enable token revocation for user pool clients. For more information about revoking tokens, see RevokeToken.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - accessTokenValidity: The access token time limit. After this limit expires, your user can't use
    ///   - allowedOAuthFlows: The allowed OAuth flows.  code  Use a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the /oauth2/token endpoint.  implicit  Issue the access token (and, optionally, ID token, based on scopes) directly to your user.  client_credentials  Issue the access token from the /oauth2/token endpoint directly to a non-person user using a combination of the client ID and client secret.
    ///   - allowedOAuthFlowsUserPoolClient: Set to true to use OAuth 2.0 features in your user pool app client.  AllowedOAuthFlowsUserPoolClient must be true before you can configure
    ///   - allowedOAuthScopes: The allowed OAuth scopes. Possible values provided by OAuth are phone, email, openid, and profile. Possible values provided by Amazon Web Services are aws.cognito.signin.user.admin. Custom scopes created in Resource Servers are also supported.
    ///   - analyticsConfiguration: The Amazon Pinpoint analytics configuration necessary to collect metrics for this user pool.  In Amazon Web Services Regions where Amazon Pinpoint isn't available, user pools only support sending events to Amazon Pinpoint projects in us-east-1. In Regions where Amazon Pinpoint is available, user pools support sending events to Amazon Pinpoint projects within that same Region.
    ///   - authSessionValidity: Amazon Cognito creates a session token for each API request in an authentication flow. AuthSessionValidity is the duration,
    ///   - callbackURLs: A list of allowed redirect (callback) URLs for the IdPs. A redirect URI must:   Be an absolute URI.   Be registered with the authorization server.   Not include a fragment component.   See OAuth 2.0 - Redirection Endpoint. Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.
    ///   - clientId: The ID of the client associated with the user pool.
    ///   - clientName: The client name from the update user pool client request.
    ///   - defaultRedirectURI: The default redirect URI. Must be in the CallbackURLs list. A redirect URI must:   Be an absolute URI.   Be registered with the authorization server.   Not include a fragment component.   See OAuth 2.0 - Redirection Endpoint. Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only. App callback URLs such as myapp://example are also supported.
    ///   - enablePropagateAdditionalUserContextData: Activates the propagation of additional user context data. For more information about propagation of user context data, see  Adding advanced security to a user pool. If you don’t include this parameter, you can't send device fingerprint information, including source IP address, to Amazon Cognito advanced security. You can only activate EnablePropagateAdditionalUserContextData in an app client that has a client secret.
    ///   - enableTokenRevocation: Activates or deactivates token revocation. For more information about revoking tokens, see RevokeToken.
    ///   - explicitAuthFlows: The authentication flows that you want your user pool client to support. For each app client in your user pool, you can sign in
    ///   - idTokenValidity: The ID token time limit. After this limit expires, your user can't use
    ///   - logoutURLs: A list of allowed logout URLs for the IdPs.
    ///   - preventUserExistenceErrors: Errors and responses that you want Amazon Cognito APIs to return during authentication, account confirmation, and password recovery when the user doesn't exist in the user pool. When set to ENABLED and the user doesn't exist, authentication returns an error indicating either the username or password was incorrect. Account confirmation and password recovery return a response indicating a code was sent to a simulated destination. When set to LEGACY, those APIs return a UserNotFoundException exception if the user doesn't exist in the user pool. Valid values include:    ENABLED - This prevents user existence-related errors.    LEGACY - This represents the early behavior of Amazon Cognito where user existence related errors aren't prevented.   Defaults to LEGACY when you don't provide a value.
    ///   - readAttributes: The list of user attributes that you want your app client to have read access to. After your user authenticates in your app, their access token authorizes them to read their own attribute value for any attribute in this list. An example of this kind of activity is when your user selects a link to view their profile information. Your app makes a GetUser API request to retrieve and display your user's profile data. When you don't specify the ReadAttributes for your app client, your app can read the values of email_verified, phone_number_verified, and the Standard attributes of your user pool. When your user pool app client has read access to these default attributes, ReadAttributes doesn't return any information. Amazon Cognito only populates ReadAttributes in the API response if you have specified your own custom set of read attributes.
    ///   - refreshTokenValidity: The refresh token time limit. After this limit expires, your user can't use
    ///   - supportedIdentityProviders: A list of provider names for the identity providers (IdPs) that are supported on this client. The following are supported: COGNITO, Facebook, Google, SignInWithApple, and LoginWithAmazon. You can also specify the names that you configured for the SAML and OIDC IdPs in your user pool, for example MySAMLIdP or MyOIDCIdP. This setting applies to providers that you can access with managed  login. The removal of COGNITO from this list doesn't prevent authentication operations for local users with the user pools API in an Amazon Web Services SDK. The only way to prevent API-based authentication is to block access with a WAF rule.
    ///   - tokenValidityUnits: The time units you use when you set the duration of ID, access, and refresh tokens. The default unit for RefreshToken is days, and the default for ID and access tokens is hours.
    ///   - userPoolId: The ID of the user pool where you want to update the user pool client.
    ///   - writeAttributes: The list of user attributes that you want your app client to have write access to. After your user authenticates in your app, their access token authorizes them to set or modify their own attribute value for any attribute in this list. An example of this kind of activity is when you present your user with a form to update their profile information and they change their last name. Your app then makes an UpdateUserAttributes API request and sets family_name to the new value.  When you don't specify the WriteAttributes for your app client, your app can write the values of the Standard attributes of your user pool. When your user pool has write access to these default attributes, WriteAttributes doesn't return any information. Amazon Cognito only populates WriteAttributes in the API response if you have specified your own custom set of write attributes. If your app client allows users to sign in through an IdP, this array must include all attributes that you have mapped to IdP attributes. Amazon Cognito updates mapped attributes when users sign in to your application through an IdP. If your app client does not have write access to a mapped attribute, Amazon Cognito throws an error when it tries to update the attribute. For more information, see Specifying IdP Attribute Mappings for Your user pool.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateUserPoolClient(
        accessTokenValidity: Int? = nil,
        allowedOAuthFlows: [OAuthFlowType]? = nil,
        allowedOAuthFlowsUserPoolClient: Bool? = nil,
        allowedOAuthScopes: [String]? = nil,
        analyticsConfiguration: AnalyticsConfigurationType? = nil,
        authSessionValidity: Int? = nil,
        callbackURLs: [String]? = nil,
        clientId: String,
        clientName: String? = nil,
        defaultRedirectURI: String? = nil,
        enablePropagateAdditionalUserContextData: Bool? = nil,
        enableTokenRevocation: Bool? = nil,
        explicitAuthFlows: [ExplicitAuthFlowsType]? = nil,
        idTokenValidity: Int? = nil,
        logoutURLs: [String]? = nil,
        preventUserExistenceErrors: PreventUserExistenceErrorTypes? = nil,
        readAttributes: [String]? = nil,
        refreshTokenValidity: Int? = nil,
        supportedIdentityProviders: [String]? = nil,
        tokenValidityUnits: TokenValidityUnitsType? = nil,
        userPoolId: String,
        writeAttributes: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateUserPoolClientResponse {
        let input = UpdateUserPoolClientRequest(
            accessTokenValidity: accessTokenValidity, 
            allowedOAuthFlows: allowedOAuthFlows, 
            allowedOAuthFlowsUserPoolClient: allowedOAuthFlowsUserPoolClient, 
            allowedOAuthScopes: allowedOAuthScopes, 
            analyticsConfiguration: analyticsConfiguration, 
            authSessionValidity: authSessionValidity, 
            callbackURLs: callbackURLs, 
            clientId: clientId, 
            clientName: clientName, 
            defaultRedirectURI: defaultRedirectURI, 
            enablePropagateAdditionalUserContextData: enablePropagateAdditionalUserContextData, 
            enableTokenRevocation: enableTokenRevocation, 
            explicitAuthFlows: explicitAuthFlows, 
            idTokenValidity: idTokenValidity, 
            logoutURLs: logoutURLs, 
            preventUserExistenceErrors: preventUserExistenceErrors, 
            readAttributes: readAttributes, 
            refreshTokenValidity: refreshTokenValidity, 
            supportedIdentityProviders: supportedIdentityProviders, 
            tokenValidityUnits: tokenValidityUnits, 
            userPoolId: userPoolId, 
            writeAttributes: writeAttributes
        )
        return try await self.updateUserPoolClient(input, logger: logger)
    }

    /// A user pool domain hosts managed login, an authorization server and web server for authentication in your application. This operation updates the branding version for user pool domains between 1 for hosted UI (classic) and 2 for managed login. It also updates the SSL certificate for user pool custom domains. Changes to the domain branding version take up to one minute to take effect for a prefix domain and up to five minutes for a custom domain. This operation doesn't change the name of your user pool domain. To change your domain, delete it with DeleteUserPoolDomain and create a new domain with CreateUserPoolDomain. You can pass the ARN of a new Certificate Manager certificate in this request. Typically, ACM certificates automatically renew and you user pool can continue to use the same ARN. But if you generate a new certificate for your custom domain name, replace the original configuration with the new ARN in this request. ACM certificates for custom domains must be in the US East (N. Virginia) Amazon Web Services Region. After you submit your request, Amazon Cognito requires up to 1 hour to distribute your new certificate to your custom domain. For more information about adding a custom domain to your user pool, see Configuring a user pool domain.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    @Sendable
    @inlinable
    public func updateUserPoolDomain(_ input: UpdateUserPoolDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateUserPoolDomainResponse {
        try await self.client.execute(
            operation: "UpdateUserPoolDomain", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// A user pool domain hosts managed login, an authorization server and web server for authentication in your application. This operation updates the branding version for user pool domains between 1 for hosted UI (classic) and 2 for managed login. It also updates the SSL certificate for user pool custom domains. Changes to the domain branding version take up to one minute to take effect for a prefix domain and up to five minutes for a custom domain. This operation doesn't change the name of your user pool domain. To change your domain, delete it with DeleteUserPoolDomain and create a new domain with CreateUserPoolDomain. You can pass the ARN of a new Certificate Manager certificate in this request. Typically, ACM certificates automatically renew and you user pool can continue to use the same ARN. But if you generate a new certificate for your custom domain name, replace the original configuration with the new ARN in this request. ACM certificates for custom domains must be in the US East (N. Virginia) Amazon Web Services Region. After you submit your request, Amazon Cognito requires up to 1 hour to distribute your new certificate to your custom domain. For more information about adding a custom domain to your user pool, see Configuring a user pool domain.  Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.  Learn more     Signing Amazon Web Services API Requests     Using the Amazon Cognito user pools API and user pool endpoints
    ///
    /// Parameters:
    ///   - customDomainConfig: The configuration for a custom domain that hosts the sign-up and sign-in pages for your application. Use this object to specify an SSL certificate that is managed by ACM. When you create a custom domain, the passkey RP ID defaults to the custom domain. If you had a prefix domain active, this will cause passkey integration for your prefix domain to stop working due to a mismatch in RP ID. To keep the prefix domain passkey integration working, you can explicitly set RP ID to the prefix domain. Update the RP ID in a SetUserPoolMfaConfig request.
    ///   - domain: The domain name for the custom domain that hosts the sign-up and sign-in pages for your application. One example might be auth.example.com.  This string can include only lowercase letters, numbers, and hyphens. Don't use a hyphen for the first or last character. Use periods to separate subdomain names.
    ///   - managedLoginVersion: A version number that indicates the state of managed login for your domain. Version 1 is hosted UI (classic). Version 2 is the newer managed login with the branding designer. For more information, see Managed login.
    ///   - userPoolId: The ID of the user pool that is associated with the custom domain whose certificate you're updating.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateUserPoolDomain(
        customDomainConfig: CustomDomainConfigType? = nil,
        domain: String,
        managedLoginVersion: Int? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateUserPoolDomainResponse {
        let input = UpdateUserPoolDomainRequest(
            customDomainConfig: customDomainConfig, 
            domain: domain, 
            managedLoginVersion: managedLoginVersion, 
            userPoolId: userPoolId
        )
        return try await self.updateUserPoolDomain(input, logger: logger)
    }

    /// Use this API to register a user's entered time-based one-time password (TOTP) code and mark the user's software token MFA status as "verified" if successful. The request takes an access token or a session string, but not both.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    @Sendable
    @inlinable
    public func verifySoftwareToken(_ input: VerifySoftwareTokenRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> VerifySoftwareTokenResponse {
        try await self.client.execute(
            operation: "VerifySoftwareToken", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Use this API to register a user's entered time-based one-time password (TOTP) code and mark the user's software token MFA status as "verified" if successful. The request takes an access token or a session string, but not both.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    ///
    /// Parameters:
    ///   - accessToken: A valid access token that Amazon Cognito issued to the user whose software token you want to verify.
    ///   - friendlyDeviceName: The friendly device name.
    ///   - session: The session that should be passed both ways in challenge-response calls to the service.
    ///   - userCode: The one- time password computed using the secret code returned by AssociateSoftwareToken.
    ///   - logger: Logger use during operation
    @inlinable
    public func verifySoftwareToken(
        accessToken: String? = nil,
        friendlyDeviceName: String? = nil,
        session: String? = nil,
        userCode: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> VerifySoftwareTokenResponse {
        let input = VerifySoftwareTokenRequest(
            accessToken: accessToken, 
            friendlyDeviceName: friendlyDeviceName, 
            session: session, 
            userCode: userCode
        )
        return try await self.verifySoftwareToken(input, logger: logger)
    }

    /// Verifies the specified user attributes in the user pool. If your user pool requires verification before Amazon Cognito updates the attribute value, VerifyUserAttribute updates the affected attribute to its pending value. For more information, see  UserAttributeUpdateSettingsType.  Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    @Sendable
    @inlinable
    public func verifyUserAttribute(_ input: VerifyUserAttributeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> VerifyUserAttributeResponse {
        try await self.client.execute(
            operation: "VerifyUserAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Verifies the specified user attributes in the user pool. If your user pool requires verification before Amazon Cognito updates the attribute value, VerifyUserAttribute updates the affected attribute to its pending value. For more information, see  UserAttributeUpdateSettingsType.  Authorize this action with a signed-in user's access token. It must include the scope aws.cognito.signin.user.admin.  Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see Using the Amazon Cognito user pools API and user pool endpoints.
    ///
    /// Parameters:
    ///   - accessToken: A valid access token that Amazon Cognito issued to the user whose user attributes you want to verify.
    ///   - attributeName: The attribute name in the request to verify user attributes.
    ///   - code: The verification code in the request to verify user attributes.
    ///   - logger: Logger use during operation
    @inlinable
    public func verifyUserAttribute(
        accessToken: String,
        attributeName: String,
        code: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> VerifyUserAttributeResponse {
        let input = VerifyUserAttributeRequest(
            accessToken: accessToken, 
            attributeName: attributeName, 
            code: code
        )
        return try await self.verifyUserAttribute(input, logger: logger)
    }
}

extension CognitoIdentityProvider {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: CognitoIdentityProvider, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension CognitoIdentityProvider {
    /// Return PaginatorSequence for operation ``adminListGroupsForUser(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func adminListGroupsForUserPaginator(
        _ input: AdminListGroupsForUserRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<AdminListGroupsForUserRequest, AdminListGroupsForUserResponse> {
        return .init(
            input: input,
            command: self.adminListGroupsForUser,
            inputKey: \AdminListGroupsForUserRequest.nextToken,
            outputKey: \AdminListGroupsForUserResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``adminListGroupsForUser(_:logger:)``.
    ///
    /// - Parameters:
    ///   - limit: The maximum number of groups that you want Amazon Cognito to return in the response.
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - userPoolId: The ID of the user pool where you want to view a user's groups.
    ///   - logger: Logger used for logging
    @inlinable
    public func adminListGroupsForUserPaginator(
        limit: Int? = nil,
        username: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<AdminListGroupsForUserRequest, AdminListGroupsForUserResponse> {
        let input = AdminListGroupsForUserRequest(
            limit: limit, 
            username: username, 
            userPoolId: userPoolId
        )
        return self.adminListGroupsForUserPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``adminListUserAuthEvents(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func adminListUserAuthEventsPaginator(
        _ input: AdminListUserAuthEventsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<AdminListUserAuthEventsRequest, AdminListUserAuthEventsResponse> {
        return .init(
            input: input,
            command: self.adminListUserAuthEvents,
            inputKey: \AdminListUserAuthEventsRequest.nextToken,
            outputKey: \AdminListUserAuthEventsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``adminListUserAuthEvents(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of authentication events to return. Returns 60 events if you set MaxResults to 0, or if you don't include a MaxResults parameter.
    ///   - username: The username of the user that you want to query or modify. The value of this parameter is typically your user's username, but it can be any of their alias attributes. If username isn't an alias attribute in your user pool, this value must be the sub of a local user or the username of a user from a third-party IdP.
    ///   - userPoolId: The Id of the user pool that contains the user profile with the logged events.
    ///   - logger: Logger used for logging
    @inlinable
    public func adminListUserAuthEventsPaginator(
        maxResults: Int? = nil,
        username: String,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<AdminListUserAuthEventsRequest, AdminListUserAuthEventsResponse> {
        let input = AdminListUserAuthEventsRequest(
            maxResults: maxResults, 
            username: username, 
            userPoolId: userPoolId
        )
        return self.adminListUserAuthEventsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listGroupsPaginator(
        _ input: ListGroupsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListGroupsRequest, ListGroupsResponse> {
        return .init(
            input: input,
            command: self.listGroups,
            inputKey: \ListGroupsRequest.nextToken,
            outputKey: \ListGroupsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - limit: The limit of the request to list groups.
    ///   - userPoolId: The ID of the user pool.
    ///   - logger: Logger used for logging
    @inlinable
    public func listGroupsPaginator(
        limit: Int? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListGroupsRequest, ListGroupsResponse> {
        let input = ListGroupsRequest(
            limit: limit, 
            userPoolId: userPoolId
        )
        return self.listGroupsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listIdentityProviders(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listIdentityProvidersPaginator(
        _ input: ListIdentityProvidersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListIdentityProvidersRequest, ListIdentityProvidersResponse> {
        return .init(
            input: input,
            command: self.listIdentityProviders,
            inputKey: \ListIdentityProvidersRequest.nextToken,
            outputKey: \ListIdentityProvidersResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listIdentityProviders(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of IdPs to return.
    ///   - userPoolId: The user pool ID.
    ///   - logger: Logger used for logging
    @inlinable
    public func listIdentityProvidersPaginator(
        maxResults: Int? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListIdentityProvidersRequest, ListIdentityProvidersResponse> {
        let input = ListIdentityProvidersRequest(
            maxResults: maxResults, 
            userPoolId: userPoolId
        )
        return self.listIdentityProvidersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listResourceServers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listResourceServersPaginator(
        _ input: ListResourceServersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListResourceServersRequest, ListResourceServersResponse> {
        return .init(
            input: input,
            command: self.listResourceServers,
            inputKey: \ListResourceServersRequest.nextToken,
            outputKey: \ListResourceServersResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listResourceServers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of resource servers to return.
    ///   - userPoolId: The ID of the user pool.
    ///   - logger: Logger used for logging
    @inlinable
    public func listResourceServersPaginator(
        maxResults: Int? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListResourceServersRequest, ListResourceServersResponse> {
        let input = ListResourceServersRequest(
            maxResults: maxResults, 
            userPoolId: userPoolId
        )
        return self.listResourceServersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listUserPoolClients(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listUserPoolClientsPaginator(
        _ input: ListUserPoolClientsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListUserPoolClientsRequest, ListUserPoolClientsResponse> {
        return .init(
            input: input,
            command: self.listUserPoolClients,
            inputKey: \ListUserPoolClientsRequest.nextToken,
            outputKey: \ListUserPoolClientsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listUserPoolClients(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results you want the request to return when listing the user pool clients.
    ///   - userPoolId: The ID of the user pool where you want to list user pool clients.
    ///   - logger: Logger used for logging
    @inlinable
    public func listUserPoolClientsPaginator(
        maxResults: Int? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListUserPoolClientsRequest, ListUserPoolClientsResponse> {
        let input = ListUserPoolClientsRequest(
            maxResults: maxResults, 
            userPoolId: userPoolId
        )
        return self.listUserPoolClientsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listUserPools(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listUserPoolsPaginator(
        _ input: ListUserPoolsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListUserPoolsRequest, ListUserPoolsResponse> {
        return .init(
            input: input,
            command: self.listUserPools,
            inputKey: \ListUserPoolsRequest.nextToken,
            outputKey: \ListUserPoolsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listUserPools(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results you want the request to return when listing the user pools.
    ///   - logger: Logger used for logging
    @inlinable
    public func listUserPoolsPaginator(
        maxResults: Int,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListUserPoolsRequest, ListUserPoolsResponse> {
        let input = ListUserPoolsRequest(
            maxResults: maxResults
        )
        return self.listUserPoolsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listUsers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listUsersPaginator(
        _ input: ListUsersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListUsersRequest, ListUsersResponse> {
        return .init(
            input: input,
            command: self.listUsers,
            inputKey: \ListUsersRequest.paginationToken,
            outputKey: \ListUsersResponse.paginationToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listUsers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - attributesToGet: A JSON array of user attribute names, for example given_name, that you want Amazon Cognito to include in the response for each user. When you don't provide an AttributesToGet parameter, Amazon Cognito returns all attributes for each user. Use AttributesToGet with required attributes in your user pool, or in conjunction with Filter. Amazon Cognito returns an error if not all users in the results have set a value for the attribute you request. Attributes that you can't filter on, including custom attributes, must have a value set in every user profile before an AttributesToGet parameter returns results.
    ///   - filter: A filter string of the form "AttributeName Filter-Type "AttributeValue". Quotation marks within the filter string must be escaped using the backslash (\) character. For example, "family_name = \"Reddy\"".    AttributeName: The name of the attribute to search for. You can only search for one attribute at a time.    Filter-Type: For an exact match, use =, for example, "given_name = \"Jon\"". For a prefix ("starts with") match, use ^=, for example, "given_name ^= \"Jon\"".     AttributeValue: The attribute value that must be matched for each user.   If the filter string is empty, ListUsers returns all users in the user pool. You can only search for the following standard attributes:    username (case-sensitive)    email     phone_number     name     given_name     family_name     preferred_username     cognito:user_status (called Status in the Console) (case-insensitive)    status (called Enabled in the Console) (case-sensitive)     sub    Custom attributes aren't searchable.  You can also list users with a client-side filter. The server-side filter matches no more than one attribute. For an advanced search, use a client-side filter with the --query parameter of the list-users action in the CLI. When you use a client-side filter, ListUsers returns a paginated list of zero or more users. You can receive multiple pages in a row with zero results. Repeat the query with each pagination token that is returned until you receive a null pagination token value, and then review the combined result.  For more information about server-side and client-side filtering, see FilteringCLI output in the Command Line Interface User Guide.   For more information, see Searching for Users Using the ListUsers API and Examples of Using the ListUsers API in the Amazon Cognito Developer Guide.
    ///   - limit: Maximum number of users to be returned.
    ///   - userPoolId: The ID of the user pool on which the search should be performed.
    ///   - logger: Logger used for logging
    @inlinable
    public func listUsersPaginator(
        attributesToGet: [String]? = nil,
        filter: String? = nil,
        limit: Int? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListUsersRequest, ListUsersResponse> {
        let input = ListUsersRequest(
            attributesToGet: attributesToGet, 
            filter: filter, 
            limit: limit, 
            userPoolId: userPoolId
        )
        return self.listUsersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listUsersInGroup(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listUsersInGroupPaginator(
        _ input: ListUsersInGroupRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListUsersInGroupRequest, ListUsersInGroupResponse> {
        return .init(
            input: input,
            command: self.listUsersInGroup,
            inputKey: \ListUsersInGroupRequest.nextToken,
            outputKey: \ListUsersInGroupResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listUsersInGroup(_:logger:)``.
    ///
    /// - Parameters:
    ///   - groupName: The name of the group.
    ///   - limit: The maximum number of users that you want to retrieve before pagination.
    ///   - userPoolId: The ID of the user pool.
    ///   - logger: Logger used for logging
    @inlinable
    public func listUsersInGroupPaginator(
        groupName: String,
        limit: Int? = nil,
        userPoolId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListUsersInGroupRequest, ListUsersInGroupResponse> {
        let input = ListUsersInGroupRequest(
            groupName: groupName, 
            limit: limit, 
            userPoolId: userPoolId
        )
        return self.listUsersInGroupPaginator(input, logger: logger)
    }
}

extension CognitoIdentityProvider.AdminListGroupsForUserRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CognitoIdentityProvider.AdminListGroupsForUserRequest {
        return .init(
            limit: self.limit,
            nextToken: token,
            username: self.username,
            userPoolId: self.userPoolId
        )
    }
}

extension CognitoIdentityProvider.AdminListUserAuthEventsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CognitoIdentityProvider.AdminListUserAuthEventsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            username: self.username,
            userPoolId: self.userPoolId
        )
    }
}

extension CognitoIdentityProvider.ListGroupsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CognitoIdentityProvider.ListGroupsRequest {
        return .init(
            limit: self.limit,
            nextToken: token,
            userPoolId: self.userPoolId
        )
    }
}

extension CognitoIdentityProvider.ListIdentityProvidersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CognitoIdentityProvider.ListIdentityProvidersRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            userPoolId: self.userPoolId
        )
    }
}

extension CognitoIdentityProvider.ListResourceServersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CognitoIdentityProvider.ListResourceServersRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            userPoolId: self.userPoolId
        )
    }
}

extension CognitoIdentityProvider.ListUserPoolClientsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CognitoIdentityProvider.ListUserPoolClientsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            userPoolId: self.userPoolId
        )
    }
}

extension CognitoIdentityProvider.ListUserPoolsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CognitoIdentityProvider.ListUserPoolsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension CognitoIdentityProvider.ListUsersInGroupRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CognitoIdentityProvider.ListUsersInGroupRequest {
        return .init(
            groupName: self.groupName,
            limit: self.limit,
            nextToken: token,
            userPoolId: self.userPoolId
        )
    }
}

extension CognitoIdentityProvider.ListUsersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CognitoIdentityProvider.ListUsersRequest {
        return .init(
            attributesToGet: self.attributesToGet,
            filter: self.filter,
            limit: self.limit,
            paginationToken: token,
            userPoolId: self.userPoolId
        )
    }
}
