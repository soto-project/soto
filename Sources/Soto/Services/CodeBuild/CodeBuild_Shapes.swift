//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto/tree/main/CodeGenerator. DO NOT EDIT.

import Foundation
import SotoCore

extension CodeBuild {
    // MARK: Enums

    public enum ArtifactNamespace: String, CustomStringConvertible, Codable {
        case buildId = "BUILD_ID"
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public enum ArtifactPackaging: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case zip = "ZIP"
        public var description: String { return self.rawValue }
    }

    public enum ArtifactsType: String, CustomStringConvertible, Codable {
        case codepipeline = "CODEPIPELINE"
        case noArtifacts = "NO_ARTIFACTS"
        case s3 = "S3"
        public var description: String { return self.rawValue }
    }

    public enum AuthType: String, CustomStringConvertible, Codable {
        case basicAuth = "BASIC_AUTH"
        case oauth = "OAUTH"
        case personalAccessToken = "PERSONAL_ACCESS_TOKEN"
        public var description: String { return self.rawValue }
    }

    public enum BuildBatchPhaseType: String, CustomStringConvertible, Codable {
        case combineArtifacts = "COMBINE_ARTIFACTS"
        case downloadBatchspec = "DOWNLOAD_BATCHSPEC"
        case failed = "FAILED"
        case inProgress = "IN_PROGRESS"
        case stopped = "STOPPED"
        case submitted = "SUBMITTED"
        case succeeded = "SUCCEEDED"
        public var description: String { return self.rawValue }
    }

    public enum BuildPhaseType: String, CustomStringConvertible, Codable {
        case build = "BUILD"
        case completed = "COMPLETED"
        case downloadSource = "DOWNLOAD_SOURCE"
        case finalizing = "FINALIZING"
        case install = "INSTALL"
        case postBuild = "POST_BUILD"
        case preBuild = "PRE_BUILD"
        case provisioning = "PROVISIONING"
        case queued = "QUEUED"
        case submitted = "SUBMITTED"
        case uploadArtifacts = "UPLOAD_ARTIFACTS"
        public var description: String { return self.rawValue }
    }

    public enum CacheMode: String, CustomStringConvertible, Codable {
        case localCustomCache = "LOCAL_CUSTOM_CACHE"
        case localDockerLayerCache = "LOCAL_DOCKER_LAYER_CACHE"
        case localSourceCache = "LOCAL_SOURCE_CACHE"
        public var description: String { return self.rawValue }
    }

    public enum CacheType: String, CustomStringConvertible, Codable {
        case local = "LOCAL"
        case noCache = "NO_CACHE"
        case s3 = "S3"
        public var description: String { return self.rawValue }
    }

    public enum ComputeType: String, CustomStringConvertible, Codable {
        case buildGeneral12Xlarge = "BUILD_GENERAL1_2XLARGE"
        case buildGeneral1Large = "BUILD_GENERAL1_LARGE"
        case buildGeneral1Medium = "BUILD_GENERAL1_MEDIUM"
        case buildGeneral1Small = "BUILD_GENERAL1_SMALL"
        public var description: String { return self.rawValue }
    }

    public enum CredentialProviderType: String, CustomStringConvertible, Codable {
        case secretsManager = "SECRETS_MANAGER"
        public var description: String { return self.rawValue }
    }

    public enum EnvironmentType: String, CustomStringConvertible, Codable {
        case armContainer = "ARM_CONTAINER"
        case linuxContainer = "LINUX_CONTAINER"
        case linuxGpuContainer = "LINUX_GPU_CONTAINER"
        case windowsContainer = "WINDOWS_CONTAINER"
        case windowsServer2019Container = "WINDOWS_SERVER_2019_CONTAINER"
        public var description: String { return self.rawValue }
    }

    public enum EnvironmentVariableType: String, CustomStringConvertible, Codable {
        case parameterStore = "PARAMETER_STORE"
        case plaintext = "PLAINTEXT"
        case secretsManager = "SECRETS_MANAGER"
        public var description: String { return self.rawValue }
    }

    public enum FileSystemType: String, CustomStringConvertible, Codable {
        case efs = "EFS"
        public var description: String { return self.rawValue }
    }

    public enum ImagePullCredentialsType: String, CustomStringConvertible, Codable {
        case codebuild = "CODEBUILD"
        case serviceRole = "SERVICE_ROLE"
        public var description: String { return self.rawValue }
    }

    public enum LanguageType: String, CustomStringConvertible, Codable {
        case android = "ANDROID"
        case base = "BASE"
        case docker = "DOCKER"
        case dotnet = "DOTNET"
        case golang = "GOLANG"
        case java = "JAVA"
        case nodeJs = "NODE_JS"
        case php = "PHP"
        case python = "PYTHON"
        case ruby = "RUBY"
        public var description: String { return self.rawValue }
    }

    public enum LogsConfigStatusType: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum PlatformType: String, CustomStringConvertible, Codable {
        case amazonLinux = "AMAZON_LINUX"
        case debian = "DEBIAN"
        case ubuntu = "UBUNTU"
        case windowsServer = "WINDOWS_SERVER"
        public var description: String { return self.rawValue }
    }

    public enum ProjectSortByType: String, CustomStringConvertible, Codable {
        case createdTime = "CREATED_TIME"
        case lastModifiedTime = "LAST_MODIFIED_TIME"
        case name = "NAME"
        public var description: String { return self.rawValue }
    }

    public enum ReportCodeCoverageSortByType: String, CustomStringConvertible, Codable {
        case filePath = "FILE_PATH"
        case lineCoveragePercentage = "LINE_COVERAGE_PERCENTAGE"
        public var description: String { return self.rawValue }
    }

    public enum ReportExportConfigType: String, CustomStringConvertible, Codable {
        case noExport = "NO_EXPORT"
        case s3 = "S3"
        public var description: String { return self.rawValue }
    }

    public enum ReportGroupSortByType: String, CustomStringConvertible, Codable {
        case createdTime = "CREATED_TIME"
        case lastModifiedTime = "LAST_MODIFIED_TIME"
        case name = "NAME"
        public var description: String { return self.rawValue }
    }

    public enum ReportGroupStatusType: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case deleting = "DELETING"
        public var description: String { return self.rawValue }
    }

    public enum ReportGroupTrendFieldType: String, CustomStringConvertible, Codable {
        case branchCoverage = "BRANCH_COVERAGE"
        case branchesCovered = "BRANCHES_COVERED"
        case branchesMissed = "BRANCHES_MISSED"
        case duration = "DURATION"
        case lineCoverage = "LINE_COVERAGE"
        case linesCovered = "LINES_COVERED"
        case linesMissed = "LINES_MISSED"
        case passRate = "PASS_RATE"
        case total = "TOTAL"
        public var description: String { return self.rawValue }
    }

    public enum ReportPackagingType: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case zip = "ZIP"
        public var description: String { return self.rawValue }
    }

    public enum ReportStatusType: String, CustomStringConvertible, Codable {
        case deleting = "DELETING"
        case failed = "FAILED"
        case generating = "GENERATING"
        case incomplete = "INCOMPLETE"
        case succeeded = "SUCCEEDED"
        public var description: String { return self.rawValue }
    }

    public enum ReportType: String, CustomStringConvertible, Codable {
        case codeCoverage = "CODE_COVERAGE"
        case test = "TEST"
        public var description: String { return self.rawValue }
    }

    public enum RetryBuildBatchType: String, CustomStringConvertible, Codable {
        case retryAllBuilds = "RETRY_ALL_BUILDS"
        case retryFailedBuilds = "RETRY_FAILED_BUILDS"
        public var description: String { return self.rawValue }
    }

    public enum ServerType: String, CustomStringConvertible, Codable {
        case bitbucket = "BITBUCKET"
        case github = "GITHUB"
        case githubEnterprise = "GITHUB_ENTERPRISE"
        public var description: String { return self.rawValue }
    }

    public enum SharedResourceSortByType: String, CustomStringConvertible, Codable {
        case arn = "ARN"
        case modifiedTime = "MODIFIED_TIME"
        public var description: String { return self.rawValue }
    }

    public enum SortOrderType: String, CustomStringConvertible, Codable {
        case ascending = "ASCENDING"
        case descending = "DESCENDING"
        public var description: String { return self.rawValue }
    }

    public enum SourceAuthType: String, CustomStringConvertible, Codable {
        case oauth = "OAUTH"
        public var description: String { return self.rawValue }
    }

    public enum SourceType: String, CustomStringConvertible, Codable {
        case bitbucket = "BITBUCKET"
        case codecommit = "CODECOMMIT"
        case codepipeline = "CODEPIPELINE"
        case github = "GITHUB"
        case githubEnterprise = "GITHUB_ENTERPRISE"
        case noSource = "NO_SOURCE"
        case s3 = "S3"
        public var description: String { return self.rawValue }
    }

    public enum StatusType: String, CustomStringConvertible, Codable {
        case failed = "FAILED"
        case fault = "FAULT"
        case inProgress = "IN_PROGRESS"
        case stopped = "STOPPED"
        case succeeded = "SUCCEEDED"
        case timedOut = "TIMED_OUT"
        public var description: String { return self.rawValue }
    }

    public enum WebhookBuildType: String, CustomStringConvertible, Codable {
        case build = "BUILD"
        case buildBatch = "BUILD_BATCH"
        public var description: String { return self.rawValue }
    }

    public enum WebhookFilterType: String, CustomStringConvertible, Codable {
        case actorAccountId = "ACTOR_ACCOUNT_ID"
        case baseRef = "BASE_REF"
        case commitMessage = "COMMIT_MESSAGE"
        case event = "EVENT"
        case filePath = "FILE_PATH"
        case headRef = "HEAD_REF"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct BatchDeleteBuildsInput: AWSEncodableShape {
        /// The IDs of the builds to delete.
        public let ids: [String]

        public init(ids: [String]) {
            self.ids = ids
        }

        public func validate(name: String) throws {
            try self.ids.forEach {
                try validate($0, name: "ids[]", parent: name, min: 1)
            }
            try self.validate(self.ids, name: "ids", parent: name, max: 100)
            try self.validate(self.ids, name: "ids", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case ids
        }
    }

    public struct BatchDeleteBuildsOutput: AWSDecodableShape {
        /// The IDs of the builds that were successfully deleted.
        public let buildsDeleted: [String]?
        /// Information about any builds that could not be successfully deleted.
        public let buildsNotDeleted: [BuildNotDeleted]?

        public init(buildsDeleted: [String]? = nil, buildsNotDeleted: [BuildNotDeleted]? = nil) {
            self.buildsDeleted = buildsDeleted
            self.buildsNotDeleted = buildsNotDeleted
        }

        private enum CodingKeys: String, CodingKey {
            case buildsDeleted
            case buildsNotDeleted
        }
    }

    public struct BatchGetBuildBatchesInput: AWSEncodableShape {
        /// An array that contains the batch build identifiers to retrieve.
        public let ids: [String]

        public init(ids: [String]) {
            self.ids = ids
        }

        public func validate(name: String) throws {
            try self.ids.forEach {
                try validate($0, name: "ids[]", parent: name, min: 1)
            }
            try self.validate(self.ids, name: "ids", parent: name, max: 100)
            try self.validate(self.ids, name: "ids", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case ids
        }
    }

    public struct BatchGetBuildBatchesOutput: AWSDecodableShape {
        /// An array of BuildBatch objects that represent the retrieved batch builds.
        public let buildBatches: [BuildBatch]?
        /// An array that contains the identifiers of any batch builds that are not found.
        public let buildBatchesNotFound: [String]?

        public init(buildBatches: [BuildBatch]? = nil, buildBatchesNotFound: [String]? = nil) {
            self.buildBatches = buildBatches
            self.buildBatchesNotFound = buildBatchesNotFound
        }

        private enum CodingKeys: String, CodingKey {
            case buildBatches
            case buildBatchesNotFound
        }
    }

    public struct BatchGetBuildsInput: AWSEncodableShape {
        /// The IDs of the builds.
        public let ids: [String]

        public init(ids: [String]) {
            self.ids = ids
        }

        public func validate(name: String) throws {
            try self.ids.forEach {
                try validate($0, name: "ids[]", parent: name, min: 1)
            }
            try self.validate(self.ids, name: "ids", parent: name, max: 100)
            try self.validate(self.ids, name: "ids", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case ids
        }
    }

    public struct BatchGetBuildsOutput: AWSDecodableShape {
        /// Information about the requested builds.
        public let builds: [Build]?
        /// The IDs of builds for which information could not be found.
        public let buildsNotFound: [String]?

        public init(builds: [Build]? = nil, buildsNotFound: [String]? = nil) {
            self.builds = builds
            self.buildsNotFound = buildsNotFound
        }

        private enum CodingKeys: String, CodingKey {
            case builds
            case buildsNotFound
        }
    }

    public struct BatchGetProjectsInput: AWSEncodableShape {
        /// The names or ARNs of the build projects. To get information about a project shared with your Amazon Web Services account, its ARN must be specified. You cannot specify a shared project using its name.
        public let names: [String]

        public init(names: [String]) {
            self.names = names
        }

        public func validate(name: String) throws {
            try self.names.forEach {
                try validate($0, name: "names[]", parent: name, min: 1)
            }
            try self.validate(self.names, name: "names", parent: name, max: 100)
            try self.validate(self.names, name: "names", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case names
        }
    }

    public struct BatchGetProjectsOutput: AWSDecodableShape {
        /// Information about the requested build projects.
        public let projects: [Project]?
        /// The names of build projects for which information could not be found.
        public let projectsNotFound: [String]?

        public init(projects: [Project]? = nil, projectsNotFound: [String]? = nil) {
            self.projects = projects
            self.projectsNotFound = projectsNotFound
        }

        private enum CodingKeys: String, CodingKey {
            case projects
            case projectsNotFound
        }
    }

    public struct BatchGetReportGroupsInput: AWSEncodableShape {
        ///  An array of report group ARNs that identify the report groups to return.
        public let reportGroupArns: [String]

        public init(reportGroupArns: [String]) {
            self.reportGroupArns = reportGroupArns
        }

        public func validate(name: String) throws {
            try self.reportGroupArns.forEach {
                try validate($0, name: "reportGroupArns[]", parent: name, min: 1)
            }
            try self.validate(self.reportGroupArns, name: "reportGroupArns", parent: name, max: 100)
            try self.validate(self.reportGroupArns, name: "reportGroupArns", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case reportGroupArns
        }
    }

    public struct BatchGetReportGroupsOutput: AWSDecodableShape {
        ///  The array of report groups returned by BatchGetReportGroups.
        public let reportGroups: [ReportGroup]?
        ///  An array of ARNs passed to BatchGetReportGroups that are not associated with a ReportGroup.
        public let reportGroupsNotFound: [String]?

        public init(reportGroups: [ReportGroup]? = nil, reportGroupsNotFound: [String]? = nil) {
            self.reportGroups = reportGroups
            self.reportGroupsNotFound = reportGroupsNotFound
        }

        private enum CodingKeys: String, CodingKey {
            case reportGroups
            case reportGroupsNotFound
        }
    }

    public struct BatchGetReportsInput: AWSEncodableShape {
        ///  An array of ARNs that identify the Report objects to return.
        public let reportArns: [String]

        public init(reportArns: [String]) {
            self.reportArns = reportArns
        }

        public func validate(name: String) throws {
            try self.reportArns.forEach {
                try validate($0, name: "reportArns[]", parent: name, min: 1)
            }
            try self.validate(self.reportArns, name: "reportArns", parent: name, max: 100)
            try self.validate(self.reportArns, name: "reportArns", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case reportArns
        }
    }

    public struct BatchGetReportsOutput: AWSDecodableShape {
        ///  The array of Report objects returned by BatchGetReports.
        public let reports: [Report]?
        ///  An array of ARNs passed to BatchGetReportGroups that are not associated with a Report.
        public let reportsNotFound: [String]?

        public init(reports: [Report]? = nil, reportsNotFound: [String]? = nil) {
            self.reports = reports
            self.reportsNotFound = reportsNotFound
        }

        private enum CodingKeys: String, CodingKey {
            case reports
            case reportsNotFound
        }
    }

    public struct BatchRestrictions: AWSEncodableShape & AWSDecodableShape {
        /// An array of strings that specify the compute types that are allowed for the batch build. See Build environment compute types in the CodeBuild User Guide for these values.
        public let computeTypesAllowed: [String]?
        /// Specifies the maximum number of builds allowed.
        public let maximumBuildsAllowed: Int?

        public init(computeTypesAllowed: [String]? = nil, maximumBuildsAllowed: Int? = nil) {
            self.computeTypesAllowed = computeTypesAllowed
            self.maximumBuildsAllowed = maximumBuildsAllowed
        }

        public func validate(name: String) throws {
            try self.computeTypesAllowed?.forEach {
                try validate($0, name: "computeTypesAllowed[]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case computeTypesAllowed
            case maximumBuildsAllowed
        }
    }

    public struct Build: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the build.
        public let arn: String?
        /// Information about the output artifacts for the build.
        public let artifacts: BuildArtifacts?
        /// The ARN of the batch build that this build is a member of, if applicable.
        public let buildBatchArn: String?
        /// Whether the build is complete. True if complete; otherwise, false.
        public let buildComplete: Bool?
        /// The number of the build. For each project, the buildNumber of its first build is 1. The buildNumber of each subsequent build is incremented by 1. If a build is deleted, the buildNumber of other builds does not change.
        public let buildNumber: Int64?
        /// The current status of the build. Valid values include:    FAILED: The build failed.    FAULT: The build faulted.    IN_PROGRESS: The build is still in progress.    STOPPED: The build stopped.    SUCCEEDED: The build succeeded.    TIMED_OUT: The build timed out.
        public let buildStatus: StatusType?
        /// Information about the cache for the build.
        public let cache: ProjectCache?
        /// The current build phase.
        public let currentPhase: String?
        /// Contains information about the debug session for this build.
        public let debugSession: DebugSession?
        /// The Key Management Service customer master key (CMK) to be used for encrypting the build output artifacts.   You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key.   You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format alias/&lt;alias-name&gt;).
        public let encryptionKey: String?
        /// When the build process ended, expressed in Unix time format.
        public let endTime: Date?
        /// Information about the build environment for this build.
        public let environment: ProjectEnvironment?
        /// A list of exported environment variables for this build. Exported environment variables are used in conjunction with CodePipeline to export environment variables from the current build stage to subsequent stages in the pipeline. For more information, see Working with variables in the CodePipeline User Guide.
        public let exportedEnvironmentVariables: [ExportedEnvironmentVariable]?
        ///  An array of ProjectFileSystemLocation objects for a CodeBuild build project. A ProjectFileSystemLocation object specifies the identifier, location, mountOptions, mountPoint, and type of a file system created using Amazon Elastic File System.
        public let fileSystemLocations: [ProjectFileSystemLocation]?
        /// The unique ID for the build.
        public let id: String?
        /// The entity that started the build. Valid values include:   If CodePipeline started the build, the pipeline's name (for example, codepipeline/my-demo-pipeline).   If an Identity and Access Management user started the build, the user's name (for example, MyUserName).   If the Jenkins plugin for CodeBuild started the build, the string CodeBuild-Jenkins-Plugin.
        public let initiator: String?
        /// Information about the build's logs in CloudWatch Logs.
        public let logs: LogsLocation?
        /// Describes a network interface.
        public let networkInterface: NetworkInterface?
        /// Information about all previous build phases that are complete and information about any current build phase that is not yet complete.
        public let phases: [BuildPhase]?
        /// The name of the CodeBuild project.
        public let projectName: String?
        ///  The number of minutes a build is allowed to be queued before it times out.
        public let queuedTimeoutInMinutes: Int?
        ///  An array of the ARNs associated with this build's reports.
        public let reportArns: [String]?
        ///  An identifier for the version of this build's source code.     For CodeCommit, GitHub, GitHub Enterprise, and BitBucket, the commit ID.     For CodePipeline, the source revision provided by CodePipeline.     For Amazon S3, this does not apply.
        public let resolvedSourceVersion: String?
        ///  An array of ProjectArtifacts objects.
        public let secondaryArtifacts: [BuildArtifacts]?
        ///  An array of ProjectSource objects.
        public let secondarySources: [ProjectSource]?
        ///  An array of ProjectSourceVersion objects. Each ProjectSourceVersion must be one of:    For CodeCommit: the commit ID, branch, or Git tag to use.   For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format pr/pull-request-ID (for example, pr/25). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.   For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.   For Amazon S3: the version ID of the object that represents the build input ZIP file to use.
        public let secondarySourceVersions: [ProjectSourceVersion]?
        /// The name of a service role used for this build.
        public let serviceRole: String?
        /// Information about the source code to be built.
        public let source: ProjectSource?
        /// Any version identifier for the version of the source code to be built. If sourceVersion is specified at the project level, then this sourceVersion (at the build level) takes precedence.   For more information, see Source Version Sample with CodeBuild in the CodeBuild User Guide.
        public let sourceVersion: String?
        /// When the build process started, expressed in Unix time format.
        public let startTime: Date?
        /// How long, in minutes, for CodeBuild to wait before timing out this build if it does not get marked as completed.
        public let timeoutInMinutes: Int?
        /// If your CodeBuild project accesses resources in an Amazon VPC, you provide this parameter that identifies the VPC ID and the list of security group IDs and subnet IDs. The security groups and subnets must belong to the same VPC. You must provide at least one security group and one subnet ID.
        public let vpcConfig: VpcConfig?

        public init(arn: String? = nil, artifacts: BuildArtifacts? = nil, buildBatchArn: String? = nil, buildComplete: Bool? = nil, buildNumber: Int64? = nil, buildStatus: StatusType? = nil, cache: ProjectCache? = nil, currentPhase: String? = nil, debugSession: DebugSession? = nil, encryptionKey: String? = nil, endTime: Date? = nil, environment: ProjectEnvironment? = nil, exportedEnvironmentVariables: [ExportedEnvironmentVariable]? = nil, fileSystemLocations: [ProjectFileSystemLocation]? = nil, id: String? = nil, initiator: String? = nil, logs: LogsLocation? = nil, networkInterface: NetworkInterface? = nil, phases: [BuildPhase]? = nil, projectName: String? = nil, queuedTimeoutInMinutes: Int? = nil, reportArns: [String]? = nil, resolvedSourceVersion: String? = nil, secondaryArtifacts: [BuildArtifacts]? = nil, secondarySources: [ProjectSource]? = nil, secondarySourceVersions: [ProjectSourceVersion]? = nil, serviceRole: String? = nil, source: ProjectSource? = nil, sourceVersion: String? = nil, startTime: Date? = nil, timeoutInMinutes: Int? = nil, vpcConfig: VpcConfig? = nil) {
            self.arn = arn
            self.artifacts = artifacts
            self.buildBatchArn = buildBatchArn
            self.buildComplete = buildComplete
            self.buildNumber = buildNumber
            self.buildStatus = buildStatus
            self.cache = cache
            self.currentPhase = currentPhase
            self.debugSession = debugSession
            self.encryptionKey = encryptionKey
            self.endTime = endTime
            self.environment = environment
            self.exportedEnvironmentVariables = exportedEnvironmentVariables
            self.fileSystemLocations = fileSystemLocations
            self.id = id
            self.initiator = initiator
            self.logs = logs
            self.networkInterface = networkInterface
            self.phases = phases
            self.projectName = projectName
            self.queuedTimeoutInMinutes = queuedTimeoutInMinutes
            self.reportArns = reportArns
            self.resolvedSourceVersion = resolvedSourceVersion
            self.secondaryArtifacts = secondaryArtifacts
            self.secondarySources = secondarySources
            self.secondarySourceVersions = secondarySourceVersions
            self.serviceRole = serviceRole
            self.source = source
            self.sourceVersion = sourceVersion
            self.startTime = startTime
            self.timeoutInMinutes = timeoutInMinutes
            self.vpcConfig = vpcConfig
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case artifacts
            case buildBatchArn
            case buildComplete
            case buildNumber
            case buildStatus
            case cache
            case currentPhase
            case debugSession
            case encryptionKey
            case endTime
            case environment
            case exportedEnvironmentVariables
            case fileSystemLocations
            case id
            case initiator
            case logs
            case networkInterface
            case phases
            case projectName
            case queuedTimeoutInMinutes
            case reportArns
            case resolvedSourceVersion
            case secondaryArtifacts
            case secondarySources
            case secondarySourceVersions
            case serviceRole
            case source
            case sourceVersion
            case startTime
            case timeoutInMinutes
            case vpcConfig
        }
    }

    public struct BuildArtifacts: AWSDecodableShape {
        ///  An identifier for this artifact definition.
        public let artifactIdentifier: String?
        ///  Information that tells you if encryption for build artifacts is disabled.
        public let encryptionDisabled: Bool?
        /// Information about the location of the build artifacts.
        public let location: String?
        /// The MD5 hash of the build artifact. You can use this hash along with a checksum tool to confirm file integrity and authenticity.  This value is available only if the build project's packaging value is set to ZIP.
        public let md5sum: String?
        ///  If this flag is set, a name specified in the buildspec file overrides the artifact name. The name specified in a buildspec file is calculated at build time and uses the Shell Command Language. For example, you can append a date and time to your artifact name so that it is always unique.
        public let overrideArtifactName: Bool?
        /// The SHA-256 hash of the build artifact. You can use this hash along with a checksum tool to confirm file integrity and authenticity.  This value is available only if the build project's packaging value is set to ZIP.
        public let sha256sum: String?

        public init(artifactIdentifier: String? = nil, encryptionDisabled: Bool? = nil, location: String? = nil, md5sum: String? = nil, overrideArtifactName: Bool? = nil, sha256sum: String? = nil) {
            self.artifactIdentifier = artifactIdentifier
            self.encryptionDisabled = encryptionDisabled
            self.location = location
            self.md5sum = md5sum
            self.overrideArtifactName = overrideArtifactName
            self.sha256sum = sha256sum
        }

        private enum CodingKeys: String, CodingKey {
            case artifactIdentifier
            case encryptionDisabled
            case location
            case md5sum
            case overrideArtifactName
            case sha256sum
        }
    }

    public struct BuildBatch: AWSDecodableShape {
        /// The ARN of the batch build.
        public let arn: String?
        /// A BuildArtifacts object the defines the build artifacts for this batch build.
        public let artifacts: BuildArtifacts?
        public let buildBatchConfig: ProjectBuildBatchConfig?
        /// The number of the batch build. For each project, the buildBatchNumber of its first batch build is 1. The buildBatchNumber of each subsequent batch build is incremented by 1. If a batch build is deleted, the buildBatchNumber of other batch builds does not change.
        public let buildBatchNumber: Int64?
        /// The status of the batch build.
        public let buildBatchStatus: StatusType?
        /// An array of BuildGroup objects that define the build groups for the batch build.
        public let buildGroups: [BuildGroup]?
        /// Specifies the maximum amount of time, in minutes, that the build in a batch must be completed in.
        public let buildTimeoutInMinutes: Int?
        public let cache: ProjectCache?
        /// Indicates if the batch build is complete.
        public let complete: Bool?
        /// The current phase of the batch build.
        public let currentPhase: String?
        /// Specifies if session debugging is enabled for this batch build. For more information, see Viewing a running build in Session Manager. Batch session debugging is not supported for matrix batch builds.
        public let debugSessionEnabled: Bool?
        /// The Key Management Service customer master key (CMK) to be used for encrypting the batch build output artifacts.  You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key.   You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format alias/&lt;alias-name&gt;).
        public let encryptionKey: String?
        /// The date and time that the batch build ended.
        public let endTime: Date?
        public let environment: ProjectEnvironment?
        /// An array of ProjectFileSystemLocation objects for the batch build project. A ProjectFileSystemLocation object specifies the identifier, location, mountOptions, mountPoint, and type of a file system created using Amazon Elastic File System.
        public let fileSystemLocations: [ProjectFileSystemLocation]?
        /// The identifier of the batch build.
        public let id: String?
        /// The entity that started the batch build. Valid values include:   If CodePipeline started the build, the pipeline's name (for example, codepipeline/my-demo-pipeline).   If an Identity and Access Management user started the build, the user's name.   If the Jenkins plugin for CodeBuild started the build, the string CodeBuild-Jenkins-Plugin.
        public let initiator: String?
        public let logConfig: LogsConfig?
        /// An array of BuildBatchPhase objects the specify the phases of the batch build.
        public let phases: [BuildBatchPhase]?
        /// The name of the batch build project.
        public let projectName: String?
        /// Specifies the amount of time, in minutes, that the batch build is allowed to be queued before it times out.
        public let queuedTimeoutInMinutes: Int?
        /// The identifier of the resolved version of this batch build's source code.   For CodeCommit, GitHub, GitHub Enterprise, and BitBucket, the commit ID.   For CodePipeline, the source revision provided by CodePipeline.   For Amazon S3, this does not apply.
        public let resolvedSourceVersion: String?
        /// An array of BuildArtifacts objects the define the build artifacts for this batch build.
        public let secondaryArtifacts: [BuildArtifacts]?
        /// An array of ProjectSource objects that define the sources for the batch build.
        public let secondarySources: [ProjectSource]?
        /// An array of ProjectSourceVersion objects. Each ProjectSourceVersion must be one of:    For CodeCommit: the commit ID, branch, or Git tag to use.   For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format pr/pull-request-ID (for example, pr/25). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.   For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.   For Amazon S3: the version ID of the object that represents the build input ZIP file to use.
        public let secondarySourceVersions: [ProjectSourceVersion]?
        /// The name of a service role used for builds in the batch.
        public let serviceRole: String?
        public let source: ProjectSource?
        /// The identifier of the version of the source code to be built.
        public let sourceVersion: String?
        /// The date and time that the batch build started.
        public let startTime: Date?
        public let vpcConfig: VpcConfig?

        public init(arn: String? = nil, artifacts: BuildArtifacts? = nil, buildBatchConfig: ProjectBuildBatchConfig? = nil, buildBatchNumber: Int64? = nil, buildBatchStatus: StatusType? = nil, buildGroups: [BuildGroup]? = nil, buildTimeoutInMinutes: Int? = nil, cache: ProjectCache? = nil, complete: Bool? = nil, currentPhase: String? = nil, debugSessionEnabled: Bool? = nil, encryptionKey: String? = nil, endTime: Date? = nil, environment: ProjectEnvironment? = nil, fileSystemLocations: [ProjectFileSystemLocation]? = nil, id: String? = nil, initiator: String? = nil, logConfig: LogsConfig? = nil, phases: [BuildBatchPhase]? = nil, projectName: String? = nil, queuedTimeoutInMinutes: Int? = nil, resolvedSourceVersion: String? = nil, secondaryArtifacts: [BuildArtifacts]? = nil, secondarySources: [ProjectSource]? = nil, secondarySourceVersions: [ProjectSourceVersion]? = nil, serviceRole: String? = nil, source: ProjectSource? = nil, sourceVersion: String? = nil, startTime: Date? = nil, vpcConfig: VpcConfig? = nil) {
            self.arn = arn
            self.artifacts = artifacts
            self.buildBatchConfig = buildBatchConfig
            self.buildBatchNumber = buildBatchNumber
            self.buildBatchStatus = buildBatchStatus
            self.buildGroups = buildGroups
            self.buildTimeoutInMinutes = buildTimeoutInMinutes
            self.cache = cache
            self.complete = complete
            self.currentPhase = currentPhase
            self.debugSessionEnabled = debugSessionEnabled
            self.encryptionKey = encryptionKey
            self.endTime = endTime
            self.environment = environment
            self.fileSystemLocations = fileSystemLocations
            self.id = id
            self.initiator = initiator
            self.logConfig = logConfig
            self.phases = phases
            self.projectName = projectName
            self.queuedTimeoutInMinutes = queuedTimeoutInMinutes
            self.resolvedSourceVersion = resolvedSourceVersion
            self.secondaryArtifacts = secondaryArtifacts
            self.secondarySources = secondarySources
            self.secondarySourceVersions = secondarySourceVersions
            self.serviceRole = serviceRole
            self.source = source
            self.sourceVersion = sourceVersion
            self.startTime = startTime
            self.vpcConfig = vpcConfig
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case artifacts
            case buildBatchConfig
            case buildBatchNumber
            case buildBatchStatus
            case buildGroups
            case buildTimeoutInMinutes
            case cache
            case complete
            case currentPhase
            case debugSessionEnabled
            case encryptionKey
            case endTime
            case environment
            case fileSystemLocations
            case id
            case initiator
            case logConfig
            case phases
            case projectName
            case queuedTimeoutInMinutes
            case resolvedSourceVersion
            case secondaryArtifacts
            case secondarySources
            case secondarySourceVersions
            case serviceRole
            case source
            case sourceVersion
            case startTime
            case vpcConfig
        }
    }

    public struct BuildBatchFilter: AWSEncodableShape {
        /// The status of the batch builds to retrieve. Only batch builds that have this status will be retrieved.
        public let status: StatusType?

        public init(status: StatusType? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status
        }
    }

    public struct BuildBatchPhase: AWSDecodableShape {
        /// Additional information about the batch build phase. Especially to help troubleshoot a failed batch build.
        public let contexts: [PhaseContext]?
        /// How long, in seconds, between the starting and ending times of the batch build's phase.
        public let durationInSeconds: Int64?
        /// When the batch build phase ended, expressed in Unix time format.
        public let endTime: Date?
        /// The current status of the batch build phase. Valid values include:  FAILED  The build phase failed.  FAULT  The build phase faulted.  IN_PROGRESS  The build phase is still in progress.  QUEUED  The build has been submitted and is queued behind other submitted builds.  STOPPED  The build phase stopped.  SUCCEEDED  The build phase succeeded.  TIMED_OUT  The build phase timed out.
        public let phaseStatus: StatusType?
        /// The name of the batch build phase. Valid values include:  COMBINE_ARTIFACTS  Build output artifacts are being combined and uploaded to the output location.  DOWNLOAD_BATCHSPEC  The batch build specification is being downloaded.  FAILED  One or more of the builds failed.  IN_PROGRESS  The batch build is in progress.  STOPPED  The batch build was stopped.  SUBMITTED  The btach build has been submitted.  SUCCEEDED  The batch build succeeded.
        public let phaseType: BuildBatchPhaseType?
        /// When the batch build phase started, expressed in Unix time format.
        public let startTime: Date?

        public init(contexts: [PhaseContext]? = nil, durationInSeconds: Int64? = nil, endTime: Date? = nil, phaseStatus: StatusType? = nil, phaseType: BuildBatchPhaseType? = nil, startTime: Date? = nil) {
            self.contexts = contexts
            self.durationInSeconds = durationInSeconds
            self.endTime = endTime
            self.phaseStatus = phaseStatus
            self.phaseType = phaseType
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case contexts
            case durationInSeconds
            case endTime
            case phaseStatus
            case phaseType
            case startTime
        }
    }

    public struct BuildGroup: AWSDecodableShape {
        /// A BuildSummary object that contains a summary of the current build group.
        public let currentBuildSummary: BuildSummary?
        /// An array of strings that contain the identifiers of the build groups that this build group depends on.
        public let dependsOn: [String]?
        /// Contains the identifier of the build group.
        public let identifier: String?
        /// Specifies if failures in this build group can be ignored.
        public let ignoreFailure: Bool?
        /// An array of BuildSummary objects that contain summaries of previous build groups.
        public let priorBuildSummaryList: [BuildSummary]?

        public init(currentBuildSummary: BuildSummary? = nil, dependsOn: [String]? = nil, identifier: String? = nil, ignoreFailure: Bool? = nil, priorBuildSummaryList: [BuildSummary]? = nil) {
            self.currentBuildSummary = currentBuildSummary
            self.dependsOn = dependsOn
            self.identifier = identifier
            self.ignoreFailure = ignoreFailure
            self.priorBuildSummaryList = priorBuildSummaryList
        }

        private enum CodingKeys: String, CodingKey {
            case currentBuildSummary
            case dependsOn
            case identifier
            case ignoreFailure
            case priorBuildSummaryList
        }
    }

    public struct BuildNotDeleted: AWSDecodableShape {
        /// The ID of the build that could not be successfully deleted.
        public let id: String?
        /// Additional information about the build that could not be successfully deleted.
        public let statusCode: String?

        public init(id: String? = nil, statusCode: String? = nil) {
            self.id = id
            self.statusCode = statusCode
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case statusCode
        }
    }

    public struct BuildPhase: AWSDecodableShape {
        /// Additional information about a build phase, especially to help troubleshoot a failed build.
        public let contexts: [PhaseContext]?
        /// How long, in seconds, between the starting and ending times of the build's phase.
        public let durationInSeconds: Int64?
        /// When the build phase ended, expressed in Unix time format.
        public let endTime: Date?
        /// The current status of the build phase. Valid values include:  FAILED  The build phase failed.  FAULT  The build phase faulted.  IN_PROGRESS  The build phase is still in progress.  QUEUED  The build has been submitted and is queued behind other submitted builds.  STOPPED  The build phase stopped.  SUCCEEDED  The build phase succeeded.  TIMED_OUT  The build phase timed out.
        public let phaseStatus: StatusType?
        /// The name of the build phase. Valid values include:    BUILD: Core build activities typically occur in this build phase.    COMPLETED: The build has been completed.    DOWNLOAD_SOURCE: Source code is being downloaded in this build phase.    FINALIZING: The build process is completing in this build phase.    INSTALL: Installation activities typically occur in this build phase.    POST_BUILD: Post-build activities typically occur in this build phase.    PRE_BUILD: Pre-build activities typically occur in this build phase.    PROVISIONING: The build environment is being set up.    QUEUED: The build has been submitted and is queued behind other submitted builds.    SUBMITTED: The build has been submitted.    UPLOAD_ARTIFACTS: Build output artifacts are being uploaded to the output location.
        public let phaseType: BuildPhaseType?
        /// When the build phase started, expressed in Unix time format.
        public let startTime: Date?

        public init(contexts: [PhaseContext]? = nil, durationInSeconds: Int64? = nil, endTime: Date? = nil, phaseStatus: StatusType? = nil, phaseType: BuildPhaseType? = nil, startTime: Date? = nil) {
            self.contexts = contexts
            self.durationInSeconds = durationInSeconds
            self.endTime = endTime
            self.phaseStatus = phaseStatus
            self.phaseType = phaseType
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case contexts
            case durationInSeconds
            case endTime
            case phaseStatus
            case phaseType
            case startTime
        }
    }

    public struct BuildStatusConfig: AWSEncodableShape & AWSDecodableShape {
        /// Specifies the context of the build status CodeBuild sends to the source provider. The usage of this parameter depends on the source provider.  Bitbucket  This parameter is used for the name parameter in the Bitbucket commit status. For more information, see build in the Bitbucket API documentation.  GitHub/GitHub Enterprise Server  This parameter is used for the context parameter in the GitHub commit status. For more information, see Create a commit status in the GitHub developer guide.
        public let context: String?
        /// Specifies the target url of the build status CodeBuild sends to the source provider. The usage of this parameter depends on the source provider.  Bitbucket  This parameter is used for the url parameter in the Bitbucket commit status. For more information, see build in the Bitbucket API documentation.  GitHub/GitHub Enterprise Server  This parameter is used for the target_url parameter in the GitHub commit status. For more information, see Create a commit status in the GitHub developer guide.
        public let targetUrl: String?

        public init(context: String? = nil, targetUrl: String? = nil) {
            self.context = context
            self.targetUrl = targetUrl
        }

        private enum CodingKeys: String, CodingKey {
            case context
            case targetUrl
        }
    }

    public struct BuildSummary: AWSDecodableShape {
        /// The batch build ARN.
        public let arn: String?
        /// The status of the build group.  FAILED  The build group failed.  FAULT  The build group faulted.  IN_PROGRESS  The build group is still in progress.  STOPPED  The build group stopped.  SUCCEEDED  The build group succeeded.  TIMED_OUT  The build group timed out.
        public let buildStatus: StatusType?
        /// A ResolvedArtifact object that represents the primary build artifacts for the build group.
        public let primaryArtifact: ResolvedArtifact?
        /// When the build was started, expressed in Unix time format.
        public let requestedOn: Date?
        /// An array of ResolvedArtifact objects that represents the secondary build artifacts for the build group.
        public let secondaryArtifacts: [ResolvedArtifact]?

        public init(arn: String? = nil, buildStatus: StatusType? = nil, primaryArtifact: ResolvedArtifact? = nil, requestedOn: Date? = nil, secondaryArtifacts: [ResolvedArtifact]? = nil) {
            self.arn = arn
            self.buildStatus = buildStatus
            self.primaryArtifact = primaryArtifact
            self.requestedOn = requestedOn
            self.secondaryArtifacts = secondaryArtifacts
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case buildStatus
            case primaryArtifact
            case requestedOn
            case secondaryArtifacts
        }
    }

    public struct CloudWatchLogsConfig: AWSEncodableShape & AWSDecodableShape {
        ///  The group name of the logs in CloudWatch Logs. For more information, see Working with Log Groups and Log Streams.
        public let groupName: String?
        /// The current status of the logs in CloudWatch Logs for a build project. Valid values are:    ENABLED: CloudWatch Logs are enabled for this build project.    DISABLED: CloudWatch Logs are not enabled for this build project.
        public let status: LogsConfigStatusType
        ///  The prefix of the stream name of the CloudWatch Logs. For more information, see Working with Log Groups and Log Streams.
        public let streamName: String?

        public init(groupName: String? = nil, status: LogsConfigStatusType, streamName: String? = nil) {
            self.groupName = groupName
            self.status = status
            self.streamName = streamName
        }

        private enum CodingKeys: String, CodingKey {
            case groupName
            case status
            case streamName
        }
    }

    public struct CodeCoverage: AWSDecodableShape {
        /// The percentage of branches that are covered by your tests.
        public let branchCoveragePercentage: Double?
        /// The number of conditional branches that are covered by your tests.
        public let branchesCovered: Int?
        /// The number of conditional branches that are not covered by your tests.
        public let branchesMissed: Int?
        /// The date and time that the tests were run.
        public let expired: Date?
        /// The path of the test report file.
        public let filePath: String?
        /// The identifier of the code coverage report.
        public let id: String?
        /// The percentage of lines that are covered by your tests.
        public let lineCoveragePercentage: Double?
        /// The number of lines that are covered by your tests.
        public let linesCovered: Int?
        /// The number of lines that are not covered by your tests.
        public let linesMissed: Int?
        /// The ARN of the report.
        public let reportARN: String?

        public init(branchCoveragePercentage: Double? = nil, branchesCovered: Int? = nil, branchesMissed: Int? = nil, expired: Date? = nil, filePath: String? = nil, id: String? = nil, lineCoveragePercentage: Double? = nil, linesCovered: Int? = nil, linesMissed: Int? = nil, reportARN: String? = nil) {
            self.branchCoveragePercentage = branchCoveragePercentage
            self.branchesCovered = branchesCovered
            self.branchesMissed = branchesMissed
            self.expired = expired
            self.filePath = filePath
            self.id = id
            self.lineCoveragePercentage = lineCoveragePercentage
            self.linesCovered = linesCovered
            self.linesMissed = linesMissed
            self.reportARN = reportARN
        }

        private enum CodingKeys: String, CodingKey {
            case branchCoveragePercentage
            case branchesCovered
            case branchesMissed
            case expired
            case filePath
            case id
            case lineCoveragePercentage
            case linesCovered
            case linesMissed
            case reportARN
        }
    }

    public struct CodeCoverageReportSummary: AWSDecodableShape {
        /// The percentage of branches that are covered by your tests.
        public let branchCoveragePercentage: Double?
        /// The number of conditional branches that are covered by your tests.
        public let branchesCovered: Int?
        /// The number of conditional branches that are not covered by your tests.
        public let branchesMissed: Int?
        /// The percentage of lines that are covered by your tests.
        public let lineCoveragePercentage: Double?
        /// The number of lines that are covered by your tests.
        public let linesCovered: Int?
        /// The number of lines that are not covered by your tests.
        public let linesMissed: Int?

        public init(branchCoveragePercentage: Double? = nil, branchesCovered: Int? = nil, branchesMissed: Int? = nil, lineCoveragePercentage: Double? = nil, linesCovered: Int? = nil, linesMissed: Int? = nil) {
            self.branchCoveragePercentage = branchCoveragePercentage
            self.branchesCovered = branchesCovered
            self.branchesMissed = branchesMissed
            self.lineCoveragePercentage = lineCoveragePercentage
            self.linesCovered = linesCovered
            self.linesMissed = linesMissed
        }

        private enum CodingKeys: String, CodingKey {
            case branchCoveragePercentage
            case branchesCovered
            case branchesMissed
            case lineCoveragePercentage
            case linesCovered
            case linesMissed
        }
    }

    public struct CreateProjectInput: AWSEncodableShape {
        /// Information about the build output artifacts for the build project.
        public let artifacts: ProjectArtifacts
        /// Set this to true to generate a publicly accessible URL for your project's build badge.
        public let badgeEnabled: Bool?
        /// A ProjectBuildBatchConfig object that defines the batch build options for the project.
        public let buildBatchConfig: ProjectBuildBatchConfig?
        /// Stores recently used information so that it can be quickly accessed at a later time.
        public let cache: ProjectCache?
        /// The maximum number of concurrent builds that are allowed for this project. New builds are only started if the current number of builds is less than or equal to this limit. If the current build count meets this limit, new builds are throttled and are not run.
        public let concurrentBuildLimit: Int?
        /// A description that makes the build project easy to identify.
        public let description: String?
        /// The Key Management Service customer master key (CMK) to be used for encrypting the build output artifacts.  You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key.   You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format alias/&lt;alias-name&gt;).
        public let encryptionKey: String?
        /// Information about the build environment for the build project.
        public let environment: ProjectEnvironment
        ///  An array of ProjectFileSystemLocation objects for a CodeBuild build project. A ProjectFileSystemLocation object specifies the identifier, location, mountOptions, mountPoint, and type of a file system created using Amazon Elastic File System.
        public let fileSystemLocations: [ProjectFileSystemLocation]?
        /// Information about logs for the build project. These can be logs in CloudWatch Logs, logs uploaded to a specified S3 bucket, or both.
        public let logsConfig: LogsConfig?
        /// The name of the build project.
        public let name: String
        /// The number of minutes a build is allowed to be queued before it times out.
        public let queuedTimeoutInMinutes: Int?
        /// An array of ProjectArtifacts objects.
        public let secondaryArtifacts: [ProjectArtifacts]?
        /// An array of ProjectSource objects.
        public let secondarySources: [ProjectSource]?
        /// An array of ProjectSourceVersion objects. If secondarySourceVersions is specified at the build level, then they take precedence over these secondarySourceVersions (at the project level).
        public let secondarySourceVersions: [ProjectSourceVersion]?
        /// The ARN of the Identity and Access Management role that enables CodeBuild to interact with dependent Amazon Web Services services on behalf of the Amazon Web Services account.
        public let serviceRole: String
        /// Information about the build input source code for the build project.
        public let source: ProjectSource
        /// A version of the build input to be built for this project. If not specified, the latest version is used. If specified, it must be one of:    For CodeCommit: the commit ID, branch, or Git tag to use.   For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format pr/pull-request-ID (for example pr/25). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.   For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.   For Amazon S3: the version ID of the object that represents the build input ZIP file to use.   If sourceVersion is specified at the build level, then that version takes precedence over this sourceVersion (at the project level).  For more information, see Source Version Sample with CodeBuild in the CodeBuild User Guide.
        public let sourceVersion: String?
        /// A list of tag key and value pairs associated with this build project. These tags are available for use by Amazon Web Services services that support CodeBuild build project tags.
        public let tags: [Tag]?
        /// How long, in minutes, from 5 to 480 (8 hours), for CodeBuild to wait before it times out any build that has not been marked as completed. The default is 60 minutes.
        public let timeoutInMinutes: Int?
        /// VpcConfig enables CodeBuild to access resources in an Amazon VPC.
        public let vpcConfig: VpcConfig?

        public init(artifacts: ProjectArtifacts, badgeEnabled: Bool? = nil, buildBatchConfig: ProjectBuildBatchConfig? = nil, cache: ProjectCache? = nil, concurrentBuildLimit: Int? = nil, description: String? = nil, encryptionKey: String? = nil, environment: ProjectEnvironment, fileSystemLocations: [ProjectFileSystemLocation]? = nil, logsConfig: LogsConfig? = nil, name: String, queuedTimeoutInMinutes: Int? = nil, secondaryArtifacts: [ProjectArtifacts]? = nil, secondarySources: [ProjectSource]? = nil, secondarySourceVersions: [ProjectSourceVersion]? = nil, serviceRole: String, source: ProjectSource, sourceVersion: String? = nil, tags: [Tag]? = nil, timeoutInMinutes: Int? = nil, vpcConfig: VpcConfig? = nil) {
            self.artifacts = artifacts
            self.badgeEnabled = badgeEnabled
            self.buildBatchConfig = buildBatchConfig
            self.cache = cache
            self.concurrentBuildLimit = concurrentBuildLimit
            self.description = description
            self.encryptionKey = encryptionKey
            self.environment = environment
            self.fileSystemLocations = fileSystemLocations
            self.logsConfig = logsConfig
            self.name = name
            self.queuedTimeoutInMinutes = queuedTimeoutInMinutes
            self.secondaryArtifacts = secondaryArtifacts
            self.secondarySources = secondarySources
            self.secondarySourceVersions = secondarySourceVersions
            self.serviceRole = serviceRole
            self.source = source
            self.sourceVersion = sourceVersion
            self.tags = tags
            self.timeoutInMinutes = timeoutInMinutes
            self.vpcConfig = vpcConfig
        }

        public func validate(name: String) throws {
            try self.buildBatchConfig?.validate(name: "\(name).buildBatchConfig")
            try self.validate(self.description, name: "description", parent: name, max: 255)
            try self.validate(self.description, name: "description", parent: name, min: 0)
            try self.validate(self.encryptionKey, name: "encryptionKey", parent: name, min: 1)
            try self.environment.validate(name: "\(name).environment")
            try self.validate(self.name, name: "name", parent: name, max: 255)
            try self.validate(self.name, name: "name", parent: name, min: 2)
            try self.validate(self.name, name: "name", parent: name, pattern: "[A-Za-z0-9][A-Za-z0-9\\-_]{1,254}")
            try self.validate(self.queuedTimeoutInMinutes, name: "queuedTimeoutInMinutes", parent: name, max: 480)
            try self.validate(self.queuedTimeoutInMinutes, name: "queuedTimeoutInMinutes", parent: name, min: 5)
            try self.validate(self.secondaryArtifacts, name: "secondaryArtifacts", parent: name, max: 12)
            try self.validate(self.secondaryArtifacts, name: "secondaryArtifacts", parent: name, min: 0)
            try self.secondarySources?.forEach {
                try $0.validate(name: "\(name).secondarySources[]")
            }
            try self.validate(self.secondarySources, name: "secondarySources", parent: name, max: 12)
            try self.validate(self.secondarySources, name: "secondarySources", parent: name, min: 0)
            try self.validate(self.secondarySourceVersions, name: "secondarySourceVersions", parent: name, max: 12)
            try self.validate(self.secondarySourceVersions, name: "secondarySourceVersions", parent: name, min: 0)
            try self.validate(self.serviceRole, name: "serviceRole", parent: name, min: 1)
            try self.source.validate(name: "\(name).source")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
            try self.validate(self.timeoutInMinutes, name: "timeoutInMinutes", parent: name, max: 480)
            try self.validate(self.timeoutInMinutes, name: "timeoutInMinutes", parent: name, min: 5)
            try self.vpcConfig?.validate(name: "\(name).vpcConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case artifacts
            case badgeEnabled
            case buildBatchConfig
            case cache
            case concurrentBuildLimit
            case description
            case encryptionKey
            case environment
            case fileSystemLocations
            case logsConfig
            case name
            case queuedTimeoutInMinutes
            case secondaryArtifacts
            case secondarySources
            case secondarySourceVersions
            case serviceRole
            case source
            case sourceVersion
            case tags
            case timeoutInMinutes
            case vpcConfig
        }
    }

    public struct CreateProjectOutput: AWSDecodableShape {
        /// Information about the build project that was created.
        public let project: Project?

        public init(project: Project? = nil) {
            self.project = project
        }

        private enum CodingKeys: String, CodingKey {
            case project
        }
    }

    public struct CreateReportGroupInput: AWSEncodableShape {
        ///  A ReportExportConfig object that contains information about where the report group test results are exported.
        public let exportConfig: ReportExportConfig
        ///  The name of the report group.
        public let name: String
        ///  A list of tag key and value pairs associated with this report group.  These tags are available for use by Amazon Web Services services that support CodeBuild report group tags.
        public let tags: [Tag]?
        ///  The type of report group.
        public let type: ReportType

        public init(exportConfig: ReportExportConfig, name: String, tags: [Tag]? = nil, type: ReportType) {
            self.exportConfig = exportConfig
            self.name = name
            self.tags = tags
            self.type = type
        }

        public func validate(name: String) throws {
            try self.exportConfig.validate(name: "\(name).exportConfig")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 2)
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case exportConfig
            case name
            case tags
            case type
        }
    }

    public struct CreateReportGroupOutput: AWSDecodableShape {
        ///  Information about the report group that was created.
        public let reportGroup: ReportGroup?

        public init(reportGroup: ReportGroup? = nil) {
            self.reportGroup = reportGroup
        }

        private enum CodingKeys: String, CodingKey {
            case reportGroup
        }
    }

    public struct CreateWebhookInput: AWSEncodableShape {
        /// A regular expression used to determine which repository branches are built when a webhook is triggered. If the name of a branch matches the regular expression, then it is built. If branchFilter is empty, then all branches are built.  It is recommended that you use filterGroups instead of branchFilter.
        public let branchFilter: String?
        /// Specifies the type of build this webhook will trigger.
        public let buildType: WebhookBuildType?
        /// An array of arrays of WebhookFilter objects used to determine which webhooks are triggered. At least one WebhookFilter in the array must specify EVENT as its type.  For a build to be triggered, at least one filter group in the filterGroups array must pass. For a filter group to pass, each of its filters must pass.
        public let filterGroups: [[WebhookFilter]]?
        /// The name of the CodeBuild project.
        public let projectName: String

        public init(branchFilter: String? = nil, buildType: WebhookBuildType? = nil, filterGroups: [[WebhookFilter]]? = nil, projectName: String) {
            self.branchFilter = branchFilter
            self.buildType = buildType
            self.filterGroups = filterGroups
            self.projectName = projectName
        }

        public func validate(name: String) throws {
            try self.validate(self.projectName, name: "projectName", parent: name, max: 255)
            try self.validate(self.projectName, name: "projectName", parent: name, min: 2)
            try self.validate(self.projectName, name: "projectName", parent: name, pattern: "[A-Za-z0-9][A-Za-z0-9\\-_]{1,254}")
        }

        private enum CodingKeys: String, CodingKey {
            case branchFilter
            case buildType
            case filterGroups
            case projectName
        }
    }

    public struct CreateWebhookOutput: AWSDecodableShape {
        /// Information about a webhook that connects repository events to a build project in CodeBuild.
        public let webhook: Webhook?

        public init(webhook: Webhook? = nil) {
            self.webhook = webhook
        }

        private enum CodingKeys: String, CodingKey {
            case webhook
        }
    }

    public struct DebugSession: AWSDecodableShape {
        /// Specifies if session debugging is enabled for this build.
        public let sessionEnabled: Bool?
        /// Contains the identifier of the Session Manager session used for the build. To work with the paused build, you open this session to examine, control, and resume the build.
        public let sessionTarget: String?

        public init(sessionEnabled: Bool? = nil, sessionTarget: String? = nil) {
            self.sessionEnabled = sessionEnabled
            self.sessionTarget = sessionTarget
        }

        private enum CodingKeys: String, CodingKey {
            case sessionEnabled
            case sessionTarget
        }
    }

    public struct DeleteBuildBatchInput: AWSEncodableShape {
        /// The identifier of the batch build to delete.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case id
        }
    }

    public struct DeleteBuildBatchOutput: AWSDecodableShape {
        /// An array of strings that contain the identifiers of the builds that were deleted.
        public let buildsDeleted: [String]?
        /// An array of BuildNotDeleted objects that specify the builds that could not be deleted.
        public let buildsNotDeleted: [BuildNotDeleted]?
        /// The status code.
        public let statusCode: String?

        public init(buildsDeleted: [String]? = nil, buildsNotDeleted: [BuildNotDeleted]? = nil, statusCode: String? = nil) {
            self.buildsDeleted = buildsDeleted
            self.buildsNotDeleted = buildsNotDeleted
            self.statusCode = statusCode
        }

        private enum CodingKeys: String, CodingKey {
            case buildsDeleted
            case buildsNotDeleted
            case statusCode
        }
    }

    public struct DeleteProjectInput: AWSEncodableShape {
        /// The name of the build project.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case name
        }
    }

    public struct DeleteProjectOutput: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteReportGroupInput: AWSEncodableShape {
        /// The ARN of the report group to delete.
        public let arn: String
        /// If true, deletes any reports that belong to a report group before deleting the report group.  If false, you must delete any reports in the report group. Use ListReportsForReportGroup to get the reports in a report group. Use DeleteReport to delete the reports. If you call DeleteReportGroup for a report group that contains one or more reports, an exception is thrown.
        public let deleteReports: Bool?

        public init(arn: String, deleteReports: Bool? = nil) {
            self.arn = arn
            self.deleteReports = deleteReports
        }

        public func validate(name: String) throws {
            try self.validate(self.arn, name: "arn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case deleteReports
        }
    }

    public struct DeleteReportGroupOutput: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteReportInput: AWSEncodableShape {
        ///  The ARN of the report to delete.
        public let arn: String

        public init(arn: String) {
            self.arn = arn
        }

        public func validate(name: String) throws {
            try self.validate(self.arn, name: "arn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case arn
        }
    }

    public struct DeleteReportOutput: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteResourcePolicyInput: AWSEncodableShape {
        ///  The ARN of the resource that is associated with the resource policy.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn
        }
    }

    public struct DeleteResourcePolicyOutput: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteSourceCredentialsInput: AWSEncodableShape {
        ///  The Amazon Resource Name (ARN) of the token.
        public let arn: String

        public init(arn: String) {
            self.arn = arn
        }

        public func validate(name: String) throws {
            try self.validate(self.arn, name: "arn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case arn
        }
    }

    public struct DeleteSourceCredentialsOutput: AWSDecodableShape {
        ///  The Amazon Resource Name (ARN) of the token.
        public let arn: String?

        public init(arn: String? = nil) {
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case arn
        }
    }

    public struct DeleteWebhookInput: AWSEncodableShape {
        /// The name of the CodeBuild project.
        public let projectName: String

        public init(projectName: String) {
            self.projectName = projectName
        }

        public func validate(name: String) throws {
            try self.validate(self.projectName, name: "projectName", parent: name, max: 255)
            try self.validate(self.projectName, name: "projectName", parent: name, min: 2)
            try self.validate(self.projectName, name: "projectName", parent: name, pattern: "[A-Za-z0-9][A-Za-z0-9\\-_]{1,254}")
        }

        private enum CodingKeys: String, CodingKey {
            case projectName
        }
    }

    public struct DeleteWebhookOutput: AWSDecodableShape {
        public init() {}
    }

    public struct DescribeCodeCoveragesInput: AWSEncodableShape {
        /// The maximum line coverage percentage to report.
        public let maxLineCoveragePercentage: Double?
        /// The maximum number of results to return.
        public let maxResults: Int?
        /// The minimum line coverage percentage to report.
        public let minLineCoveragePercentage: Double?
        /// The nextToken value returned from a previous call to DescribeCodeCoverages. This specifies the next item to return. To return the beginning of the list, exclude this parameter.
        public let nextToken: String?
        ///  The ARN of the report for which test cases are returned.
        public let reportArn: String
        /// Specifies how the results are sorted. Possible values are:  FILE_PATH  The results are sorted by file path.  LINE_COVERAGE_PERCENTAGE  The results are sorted by the percentage of lines that are covered.
        public let sortBy: ReportCodeCoverageSortByType?
        /// Specifies if the results are sorted in ascending or descending order.
        public let sortOrder: SortOrderType?

        public init(maxLineCoveragePercentage: Double? = nil, maxResults: Int? = nil, minLineCoveragePercentage: Double? = nil, nextToken: String? = nil, reportArn: String, sortBy: ReportCodeCoverageSortByType? = nil, sortOrder: SortOrderType? = nil) {
            self.maxLineCoveragePercentage = maxLineCoveragePercentage
            self.maxResults = maxResults
            self.minLineCoveragePercentage = minLineCoveragePercentage
            self.nextToken = nextToken
            self.reportArn = reportArn
            self.sortBy = sortBy
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try self.validate(self.maxLineCoveragePercentage, name: "maxLineCoveragePercentage", parent: name, max: 100)
            try self.validate(self.maxLineCoveragePercentage, name: "maxLineCoveragePercentage", parent: name, min: 0)
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.minLineCoveragePercentage, name: "minLineCoveragePercentage", parent: name, max: 100)
            try self.validate(self.minLineCoveragePercentage, name: "minLineCoveragePercentage", parent: name, min: 0)
            try self.validate(self.reportArn, name: "reportArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxLineCoveragePercentage
            case maxResults
            case minLineCoveragePercentage
            case nextToken
            case reportArn
            case sortBy
            case sortOrder
        }
    }

    public struct DescribeCodeCoveragesOutput: AWSDecodableShape {
        /// An array of CodeCoverage objects that contain the results.
        public let codeCoverages: [CodeCoverage]?
        /// If there are more items to return, this contains a token that is passed to a subsequent call to DescribeCodeCoverages to retrieve the next set of items.
        public let nextToken: String?

        public init(codeCoverages: [CodeCoverage]? = nil, nextToken: String? = nil) {
            self.codeCoverages = codeCoverages
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case codeCoverages
            case nextToken
        }
    }

    public struct DescribeTestCasesInput: AWSEncodableShape {
        ///  A TestCaseFilter object used to filter the returned reports.
        public let filter: TestCaseFilter?
        ///  The maximum number of paginated test cases returned per response. Use nextToken to iterate pages in the list of returned TestCase objects. The default value is 100.
        public let maxResults: Int?
        ///  During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
        public let nextToken: String?
        ///  The ARN of the report for which test cases are returned.
        public let reportArn: String

        public init(filter: TestCaseFilter? = nil, maxResults: Int? = nil, nextToken: String? = nil, reportArn: String) {
            self.filter = filter
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.reportArn = reportArn
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case filter
            case maxResults
            case nextToken
            case reportArn
        }
    }

    public struct DescribeTestCasesOutput: AWSDecodableShape {
        ///  During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
        public let nextToken: String?
        ///  The returned list of test cases.
        public let testCases: [TestCase]?

        public init(nextToken: String? = nil, testCases: [TestCase]? = nil) {
            self.nextToken = nextToken
            self.testCases = testCases
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case testCases
        }
    }

    public struct EnvironmentImage: AWSDecodableShape {
        /// The description of the Docker image.
        public let description: String?
        /// The name of the Docker image.
        public let name: String?
        /// A list of environment image versions.
        public let versions: [String]?

        public init(description: String? = nil, name: String? = nil, versions: [String]? = nil) {
            self.description = description
            self.name = name
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case name
            case versions
        }
    }

    public struct EnvironmentLanguage: AWSDecodableShape {
        /// The list of Docker images that are related by the specified programming language.
        public let images: [EnvironmentImage]?
        /// The programming language for the Docker images.
        public let language: LanguageType?

        public init(images: [EnvironmentImage]? = nil, language: LanguageType? = nil) {
            self.images = images
            self.language = language
        }

        private enum CodingKeys: String, CodingKey {
            case images
            case language
        }
    }

    public struct EnvironmentPlatform: AWSDecodableShape {
        /// The list of programming languages that are available for the specified platform.
        public let languages: [EnvironmentLanguage]?
        /// The platform's name.
        public let platform: PlatformType?

        public init(languages: [EnvironmentLanguage]? = nil, platform: PlatformType? = nil) {
            self.languages = languages
            self.platform = platform
        }

        private enum CodingKeys: String, CodingKey {
            case languages
            case platform
        }
    }

    public struct EnvironmentVariable: AWSEncodableShape & AWSDecodableShape {
        /// The name or key of the environment variable.
        public let name: String
        /// The type of environment variable. Valid values include:    PARAMETER_STORE: An environment variable stored in Systems Manager Parameter Store. To learn how to specify a parameter store environment variable, see env/parameter-store in the CodeBuild User Guide.    PLAINTEXT: An environment variable in plain text format. This is the default value.    SECRETS_MANAGER: An environment variable stored in Secrets Manager. To learn how to specify a secrets manager environment variable, see env/secrets-manager in the CodeBuild User Guide.
        public let type: EnvironmentVariableType?
        /// The value of the environment variable.  We strongly discourage the use of PLAINTEXT environment variables to store sensitive values, especially Amazon Web Services secret key IDs and secret access keys. PLAINTEXT environment variables can be displayed in plain text using the CodeBuild console and the AWS Command Line Interface (AWS CLI). For sensitive values, we recommend you use an environment variable of type PARAMETER_STORE or SECRETS_MANAGER.
        public let value: String

        public init(name: String, type: EnvironmentVariableType? = nil, value: String) {
            self.name = name
            self.type = type
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case type
            case value
        }
    }

    public struct ExportedEnvironmentVariable: AWSDecodableShape {
        /// The name of the exported environment variable.
        public let name: String?
        /// The value assigned to the exported environment variable.
        public let value: String?

        public init(name: String? = nil, value: String? = nil) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case value
        }
    }

    public struct GetReportGroupTrendInput: AWSEncodableShape {
        /// The number of reports to analyze. This operation always retrieves the most recent reports. If this parameter is omitted, the most recent 100 reports are analyzed.
        public let numOfReports: Int?
        /// The ARN of the report group that contains the reports to analyze.
        public let reportGroupArn: String
        /// The test report value to accumulate. This must be one of the following values:  Test reports:   DURATION  Accumulate the test run times for the specified reports.  PASS_RATE  Accumulate the percentage of tests that passed for the specified test reports.  TOTAL  Accumulate the total number of tests for the specified test reports.      Code coverage reports:   BRANCH_COVERAGE  Accumulate the branch coverage percentages for the specified test reports.  BRANCHES_COVERED  Accumulate the branches covered values for the specified test reports.  BRANCHES_MISSED  Accumulate the branches missed values for the specified test reports.  LINE_COVERAGE  Accumulate the line coverage percentages for the specified test reports.  LINES_COVERED  Accumulate the lines covered values for the specified test reports.  LINES_MISSED  Accumulate the lines not covered values for the specified test reports.
        public let trendField: ReportGroupTrendFieldType

        public init(numOfReports: Int? = nil, reportGroupArn: String, trendField: ReportGroupTrendFieldType) {
            self.numOfReports = numOfReports
            self.reportGroupArn = reportGroupArn
            self.trendField = trendField
        }

        public func validate(name: String) throws {
            try self.validate(self.numOfReports, name: "numOfReports", parent: name, max: 100)
            try self.validate(self.numOfReports, name: "numOfReports", parent: name, min: 1)
            try self.validate(self.reportGroupArn, name: "reportGroupArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case numOfReports
            case reportGroupArn
            case trendField
        }
    }

    public struct GetReportGroupTrendOutput: AWSDecodableShape {
        /// An array that contains the raw data for each report.
        public let rawData: [ReportWithRawData]?
        /// Contains the accumulated trend data.
        public let stats: ReportGroupTrendStats?

        public init(rawData: [ReportWithRawData]? = nil, stats: ReportGroupTrendStats? = nil) {
            self.rawData = rawData
            self.stats = stats
        }

        private enum CodingKeys: String, CodingKey {
            case rawData
            case stats
        }
    }

    public struct GetResourcePolicyInput: AWSEncodableShape {
        ///  The ARN of the resource that is associated with the resource policy.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn
        }
    }

    public struct GetResourcePolicyOutput: AWSDecodableShape {
        ///  The resource policy for the resource identified by the input ARN parameter.
        public let policy: String?

        public init(policy: String? = nil) {
            self.policy = policy
        }

        private enum CodingKeys: String, CodingKey {
            case policy
        }
    }

    public struct GitSubmodulesConfig: AWSEncodableShape & AWSDecodableShape {
        ///  Set to true to fetch Git submodules for your CodeBuild build project.
        public let fetchSubmodules: Bool

        public init(fetchSubmodules: Bool) {
            self.fetchSubmodules = fetchSubmodules
        }

        private enum CodingKeys: String, CodingKey {
            case fetchSubmodules
        }
    }

    public struct ImportSourceCredentialsInput: AWSEncodableShape {
        ///  The type of authentication used to connect to a GitHub, GitHub Enterprise, or Bitbucket repository. An OAUTH connection is not supported by the API and must be created using the CodeBuild console.
        public let authType: AuthType
        ///  The source provider used for this project.
        public let serverType: ServerType
        ///  Set to false to prevent overwriting the repository source credentials. Set to true to overwrite the repository source credentials. The default value is true.
        public let shouldOverwrite: Bool?
        ///  For GitHub or GitHub Enterprise, this is the personal access token. For Bitbucket, this is the app password.
        public let token: String
        ///  The Bitbucket username when the authType is BASIC_AUTH. This parameter is not valid for other types of source providers or connections.
        public let username: String?

        public init(authType: AuthType, serverType: ServerType, shouldOverwrite: Bool? = nil, token: String, username: String? = nil) {
            self.authType = authType
            self.serverType = serverType
            self.shouldOverwrite = shouldOverwrite
            self.token = token
            self.username = username
        }

        public func validate(name: String) throws {
            try self.validate(self.token, name: "token", parent: name, min: 1)
            try self.validate(self.username, name: "username", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case authType
            case serverType
            case shouldOverwrite
            case token
            case username
        }
    }

    public struct ImportSourceCredentialsOutput: AWSDecodableShape {
        ///  The Amazon Resource Name (ARN) of the token.
        public let arn: String?

        public init(arn: String? = nil) {
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case arn
        }
    }

    public struct InvalidateProjectCacheInput: AWSEncodableShape {
        /// The name of the CodeBuild build project that the cache is reset for.
        public let projectName: String

        public init(projectName: String) {
            self.projectName = projectName
        }

        public func validate(name: String) throws {
            try self.validate(self.projectName, name: "projectName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case projectName
        }
    }

    public struct InvalidateProjectCacheOutput: AWSDecodableShape {
        public init() {}
    }

    public struct ListBuildBatchesForProjectInput: AWSEncodableShape {
        /// A BuildBatchFilter object that specifies the filters for the search.
        public let filter: BuildBatchFilter?
        /// The maximum number of results to return.
        public let maxResults: Int?
        /// The nextToken value returned from a previous call to ListBuildBatchesForProject. This specifies the next item to return. To return the beginning of the list, exclude this parameter.
        public let nextToken: String?
        /// The name of the project.
        public let projectName: String?
        /// Specifies the sort order of the returned items. Valid values include:    ASCENDING: List the batch build identifiers in ascending order by identifier.    DESCENDING: List the batch build identifiers in descending order by identifier.
        public let sortOrder: SortOrderType?

        public init(filter: BuildBatchFilter? = nil, maxResults: Int? = nil, nextToken: String? = nil, projectName: String? = nil, sortOrder: SortOrderType? = nil) {
            self.filter = filter
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.projectName = projectName
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.projectName, name: "projectName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case filter
            case maxResults
            case nextToken
            case projectName
            case sortOrder
        }
    }

    public struct ListBuildBatchesForProjectOutput: AWSDecodableShape {
        /// An array of strings that contains the batch build identifiers.
        public let ids: [String]?
        /// If there are more items to return, this contains a token that is passed to a subsequent call to ListBuildBatchesForProject to retrieve the next set of items.
        public let nextToken: String?

        public init(ids: [String]? = nil, nextToken: String? = nil) {
            self.ids = ids
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ids
            case nextToken
        }
    }

    public struct ListBuildBatchesInput: AWSEncodableShape {
        /// A BuildBatchFilter object that specifies the filters for the search.
        public let filter: BuildBatchFilter?
        /// The maximum number of results to return.
        public let maxResults: Int?
        /// The nextToken value returned from a previous call to ListBuildBatches. This specifies the next item to return. To return the beginning of the list, exclude this parameter.
        public let nextToken: String?
        /// Specifies the sort order of the returned items. Valid values include:    ASCENDING: List the batch build identifiers in ascending order by identifier.    DESCENDING: List the batch build identifiers in descending order by identifier.
        public let sortOrder: SortOrderType?

        public init(filter: BuildBatchFilter? = nil, maxResults: Int? = nil, nextToken: String? = nil, sortOrder: SortOrderType? = nil) {
            self.filter = filter
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case filter
            case maxResults
            case nextToken
            case sortOrder
        }
    }

    public struct ListBuildBatchesOutput: AWSDecodableShape {
        /// An array of strings that contains the batch build identifiers.
        public let ids: [String]?
        /// If there are more items to return, this contains a token that is passed to a subsequent call to ListBuildBatches to retrieve the next set of items.
        public let nextToken: String?

        public init(ids: [String]? = nil, nextToken: String? = nil) {
            self.ids = ids
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ids
            case nextToken
        }
    }

    public struct ListBuildsForProjectInput: AWSEncodableShape {
        /// During a previous call, if there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a nextToken. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
        public let nextToken: String?
        /// The name of the CodeBuild project.
        public let projectName: String
        /// The order to list results in. The results are sorted by build number, not the build identifier. Valid values include:    ASCENDING: List the build IDs in ascending order by build ID.    DESCENDING: List the build IDs in descending order by build ID.   If the project has more than 100 builds, setting the sort order will result in an error.
        public let sortOrder: SortOrderType?

        public init(nextToken: String? = nil, projectName: String, sortOrder: SortOrderType? = nil) {
            self.nextToken = nextToken
            self.projectName = projectName
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try self.validate(self.projectName, name: "projectName", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case projectName
            case sortOrder
        }
    }

    public struct ListBuildsForProjectOutput: AWSDecodableShape {
        /// A list of build IDs for the specified build project, with each build ID representing a single build.
        public let ids: [String]?
        /// If there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a nextToken. To get the next batch of items in the list, call this operation again, adding the next token to the call.
        public let nextToken: String?

        public init(ids: [String]? = nil, nextToken: String? = nil) {
            self.ids = ids
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ids
            case nextToken
        }
    }

    public struct ListBuildsInput: AWSEncodableShape {
        /// During a previous call, if there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a nextToken. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
        public let nextToken: String?
        /// The order to list build IDs. Valid values include:    ASCENDING: List the build IDs in ascending order by build ID.    DESCENDING: List the build IDs in descending order by build ID.
        public let sortOrder: SortOrderType?

        public init(nextToken: String? = nil, sortOrder: SortOrderType? = nil) {
            self.nextToken = nextToken
            self.sortOrder = sortOrder
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case sortOrder
        }
    }

    public struct ListBuildsOutput: AWSDecodableShape {
        /// A list of build IDs, with each build ID representing a single build.
        public let ids: [String]?
        /// If there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a nextToken. To get the next batch of items in the list, call this operation again, adding the next token to the call.
        public let nextToken: String?

        public init(ids: [String]? = nil, nextToken: String? = nil) {
            self.ids = ids
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ids
            case nextToken
        }
    }

    public struct ListCuratedEnvironmentImagesInput: AWSEncodableShape {
        public init() {}
    }

    public struct ListCuratedEnvironmentImagesOutput: AWSDecodableShape {
        /// Information about supported platforms for Docker images that are managed by CodeBuild.
        public let platforms: [EnvironmentPlatform]?

        public init(platforms: [EnvironmentPlatform]? = nil) {
            self.platforms = platforms
        }

        private enum CodingKeys: String, CodingKey {
            case platforms
        }
    }

    public struct ListProjectsInput: AWSEncodableShape {
        /// During a previous call, if there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a nextToken. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
        public let nextToken: String?
        /// The criterion to be used to list build project names. Valid values include:    CREATED_TIME: List based on when each build project was created.    LAST_MODIFIED_TIME: List based on when information about each build project was last changed.    NAME: List based on each build project's name.   Use sortOrder to specify in what order to list the build project names based on the preceding criteria.
        public let sortBy: ProjectSortByType?
        /// The order in which to list build projects. Valid values include:    ASCENDING: List in ascending order.    DESCENDING: List in descending order.   Use sortBy to specify the criterion to be used to list build project names.
        public let sortOrder: SortOrderType?

        public init(nextToken: String? = nil, sortBy: ProjectSortByType? = nil, sortOrder: SortOrderType? = nil) {
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case sortBy
            case sortOrder
        }
    }

    public struct ListProjectsOutput: AWSDecodableShape {
        /// If there are more than 100 items in the list, only the first 100 items are returned, along with a unique string called a nextToken. To get the next batch of items in the list, call this operation again, adding the next token to the call.
        public let nextToken: String?
        /// The list of build project names, with each build project name representing a single build project.
        public let projects: [String]?

        public init(nextToken: String? = nil, projects: [String]? = nil) {
            self.nextToken = nextToken
            self.projects = projects
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case projects
        }
    }

    public struct ListReportGroupsInput: AWSEncodableShape {
        ///  The maximum number of paginated report groups returned per response. Use nextToken to iterate pages in the list of returned ReportGroup objects. The default value is 100.
        public let maxResults: Int?
        ///  During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
        public let nextToken: String?
        ///  The criterion to be used to list build report groups. Valid values include:     CREATED_TIME: List based on when each report group was created.    LAST_MODIFIED_TIME: List based on when each report group was last changed.    NAME: List based on each report group's name.
        public let sortBy: ReportGroupSortByType?
        ///  Used to specify the order to sort the list of returned report groups. Valid values are ASCENDING and DESCENDING.
        public let sortOrder: SortOrderType?

        public init(maxResults: Int? = nil, nextToken: String? = nil, sortBy: ReportGroupSortByType? = nil, sortOrder: SortOrderType? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults
            case nextToken
            case sortBy
            case sortOrder
        }
    }

    public struct ListReportGroupsOutput: AWSDecodableShape {
        ///  During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
        public let nextToken: String?
        ///  The list of ARNs for the report groups in the current Amazon Web Services account.
        public let reportGroups: [String]?

        public init(nextToken: String? = nil, reportGroups: [String]? = nil) {
            self.nextToken = nextToken
            self.reportGroups = reportGroups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case reportGroups
        }
    }

    public struct ListReportsForReportGroupInput: AWSEncodableShape {
        ///  A ReportFilter object used to filter the returned reports.
        public let filter: ReportFilter?
        ///  The maximum number of paginated reports in this report group returned per response. Use nextToken to iterate pages in the list of returned Report objects. The default value is 100.
        public let maxResults: Int?
        ///  During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
        public let nextToken: String?
        ///  The ARN of the report group for which you want to return report ARNs.
        public let reportGroupArn: String
        ///  Use to specify whether the results are returned in ascending or descending order.
        public let sortOrder: SortOrderType?

        public init(filter: ReportFilter? = nil, maxResults: Int? = nil, nextToken: String? = nil, reportGroupArn: String, sortOrder: SortOrderType? = nil) {
            self.filter = filter
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.reportGroupArn = reportGroupArn
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case filter
            case maxResults
            case nextToken
            case reportGroupArn
            case sortOrder
        }
    }

    public struct ListReportsForReportGroupOutput: AWSDecodableShape {
        ///  During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
        public let nextToken: String?
        ///  The list of report ARNs.
        public let reports: [String]?

        public init(nextToken: String? = nil, reports: [String]? = nil) {
            self.nextToken = nextToken
            self.reports = reports
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case reports
        }
    }

    public struct ListReportsInput: AWSEncodableShape {
        ///  A ReportFilter object used to filter the returned reports.
        public let filter: ReportFilter?
        ///  The maximum number of paginated reports returned per response. Use nextToken to iterate pages in the list of returned Report objects. The default value is 100.
        public let maxResults: Int?
        ///  During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
        public let nextToken: String?
        ///  Specifies the sort order for the list of returned reports. Valid values are:     ASCENDING: return reports in chronological order based on their creation date.     DESCENDING: return reports in the reverse chronological order based on their creation date.
        public let sortOrder: SortOrderType?

        public init(filter: ReportFilter? = nil, maxResults: Int? = nil, nextToken: String? = nil, sortOrder: SortOrderType? = nil) {
            self.filter = filter
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case filter
            case maxResults
            case nextToken
            case sortOrder
        }
    }

    public struct ListReportsOutput: AWSDecodableShape {
        ///  During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
        public let nextToken: String?
        ///  The list of returned ARNs for the reports in the current Amazon Web Services account.
        public let reports: [String]?

        public init(nextToken: String? = nil, reports: [String]? = nil) {
            self.nextToken = nextToken
            self.reports = reports
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case reports
        }
    }

    public struct ListSharedProjectsInput: AWSEncodableShape {
        ///  The maximum number of paginated shared build projects returned per response. Use nextToken to iterate pages in the list of returned Project objects. The default value is 100.
        public let maxResults: Int?
        ///  During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
        public let nextToken: String?
        ///  The criterion to be used to list build projects shared with the current Amazon Web Services account or user. Valid values include:     ARN: List based on the ARN.     MODIFIED_TIME: List based on when information about the shared project was last changed.
        public let sortBy: SharedResourceSortByType?
        /// The order in which to list shared build projects. Valid values include:    ASCENDING: List in ascending order.    DESCENDING: List in descending order.
        public let sortOrder: SortOrderType?

        public init(maxResults: Int? = nil, nextToken: String? = nil, sortBy: SharedResourceSortByType? = nil, sortOrder: SortOrderType? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults
            case nextToken
            case sortBy
            case sortOrder
        }
    }

    public struct ListSharedProjectsOutput: AWSDecodableShape {
        ///  During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
        public let nextToken: String?
        ///  The list of ARNs for the build projects shared with the current Amazon Web Services account or user.
        public let projects: [String]?

        public init(nextToken: String? = nil, projects: [String]? = nil) {
            self.nextToken = nextToken
            self.projects = projects
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case projects
        }
    }

    public struct ListSharedReportGroupsInput: AWSEncodableShape {
        ///  The maximum number of paginated shared report groups per response. Use nextToken to iterate pages in the list of returned ReportGroup objects. The default value is 100.
        public let maxResults: Int?
        ///  During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
        public let nextToken: String?
        ///  The criterion to be used to list report groups shared with the current Amazon Web Services account or user. Valid values include:     ARN: List based on the ARN.     MODIFIED_TIME: List based on when information about the shared report group was last changed.
        public let sortBy: SharedResourceSortByType?
        /// The order in which to list shared report groups. Valid values include:    ASCENDING: List in ascending order.    DESCENDING: List in descending order.
        public let sortOrder: SortOrderType?

        public init(maxResults: Int? = nil, nextToken: String? = nil, sortBy: SharedResourceSortByType? = nil, sortOrder: SortOrderType? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sortBy = sortBy
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults
            case nextToken
            case sortBy
            case sortOrder
        }
    }

    public struct ListSharedReportGroupsOutput: AWSDecodableShape {
        ///  During a previous call, the maximum number of items that can be returned is the value specified in maxResults. If there more items in the list, then a unique string called a nextToken is returned. To get the next batch of items in the list, call this operation again, adding the next token to the call. To get all of the items in the list, keep calling this operation with each subsequent next token that is returned, until no more next tokens are returned.
        public let nextToken: String?
        ///  The list of ARNs for the report groups shared with the current Amazon Web Services account or user.
        public let reportGroups: [String]?

        public init(nextToken: String? = nil, reportGroups: [String]? = nil) {
            self.nextToken = nextToken
            self.reportGroups = reportGroups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case reportGroups
        }
    }

    public struct ListSourceCredentialsInput: AWSEncodableShape {
        public init() {}
    }

    public struct ListSourceCredentialsOutput: AWSDecodableShape {
        ///  A list of SourceCredentialsInfo objects. Each SourceCredentialsInfo object includes the authentication type, token ARN, and type of source provider for one set of credentials.
        public let sourceCredentialsInfos: [SourceCredentialsInfo]?

        public init(sourceCredentialsInfos: [SourceCredentialsInfo]? = nil) {
            self.sourceCredentialsInfos = sourceCredentialsInfos
        }

        private enum CodingKeys: String, CodingKey {
            case sourceCredentialsInfos
        }
    }

    public struct LogsConfig: AWSEncodableShape & AWSDecodableShape {
        ///  Information about CloudWatch Logs for a build project. CloudWatch Logs are enabled by default.
        public let cloudWatchLogs: CloudWatchLogsConfig?
        ///  Information about logs built to an S3 bucket for a build project. S3 logs are not enabled by default.
        public let s3Logs: S3LogsConfig?

        public init(cloudWatchLogs: CloudWatchLogsConfig? = nil, s3Logs: S3LogsConfig? = nil) {
            self.cloudWatchLogs = cloudWatchLogs
            self.s3Logs = s3Logs
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLogs
            case s3Logs
        }
    }

    public struct LogsLocation: AWSDecodableShape {
        ///  Information about CloudWatch Logs for a build project.
        public let cloudWatchLogs: CloudWatchLogsConfig?
        ///  The ARN of CloudWatch Logs for a build project. Its format is arn:${Partition}:logs:${Region}:${Account}:log-group:${LogGroupName}:log-stream:${LogStreamName}. For more information, see Resources Defined by CloudWatch Logs.
        public let cloudWatchLogsArn: String?
        /// The URL to an individual build log in CloudWatch Logs.
        public let deepLink: String?
        /// The name of the CloudWatch Logs group for the build logs.
        public let groupName: String?
        ///  The URL to a build log in an S3 bucket.
        public let s3DeepLink: String?
        ///  Information about S3 logs for a build project.
        public let s3Logs: S3LogsConfig?
        ///  The ARN of S3 logs for a build project. Its format is arn:${Partition}:s3:::${BucketName}/${ObjectName}. For more information, see Resources Defined by Amazon S3.
        public let s3LogsArn: String?
        /// The name of the CloudWatch Logs stream for the build logs.
        public let streamName: String?

        public init(cloudWatchLogs: CloudWatchLogsConfig? = nil, cloudWatchLogsArn: String? = nil, deepLink: String? = nil, groupName: String? = nil, s3DeepLink: String? = nil, s3Logs: S3LogsConfig? = nil, s3LogsArn: String? = nil, streamName: String? = nil) {
            self.cloudWatchLogs = cloudWatchLogs
            self.cloudWatchLogsArn = cloudWatchLogsArn
            self.deepLink = deepLink
            self.groupName = groupName
            self.s3DeepLink = s3DeepLink
            self.s3Logs = s3Logs
            self.s3LogsArn = s3LogsArn
            self.streamName = streamName
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLogs
            case cloudWatchLogsArn
            case deepLink
            case groupName
            case s3DeepLink
            case s3Logs
            case s3LogsArn
            case streamName
        }
    }

    public struct NetworkInterface: AWSDecodableShape {
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(networkInterfaceId: String? = nil, subnetId: String? = nil) {
            self.networkInterfaceId = networkInterfaceId
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaceId
            case subnetId
        }
    }

    public struct PhaseContext: AWSDecodableShape {
        /// An explanation of the build phase's context. This might include a command ID and an exit code.
        public let message: String?
        /// The status code for the context of the build phase.
        public let statusCode: String?

        public init(message: String? = nil, statusCode: String? = nil) {
            self.message = message
            self.statusCode = statusCode
        }

        private enum CodingKeys: String, CodingKey {
            case message
            case statusCode
        }
    }

    public struct Project: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the build project.
        public let arn: String?
        /// Information about the build output artifacts for the build project.
        public let artifacts: ProjectArtifacts?
        /// Information about the build badge for the build project.
        public let badge: ProjectBadge?
        /// A ProjectBuildBatchConfig object that defines the batch build options for the project.
        public let buildBatchConfig: ProjectBuildBatchConfig?
        /// Information about the cache for the build project.
        public let cache: ProjectCache?
        /// The maximum number of concurrent builds that are allowed for this project. New builds are only started if the current number of builds is less than or equal to this limit. If the current build count meets this limit, new builds are throttled and are not run.
        public let concurrentBuildLimit: Int?
        /// When the build project was created, expressed in Unix time format.
        public let created: Date?
        /// A description that makes the build project easy to identify.
        public let description: String?
        /// The Key Management Service customer master key (CMK) to be used for encrypting the build output artifacts.  You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key.   You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format alias/&lt;alias-name&gt;). If you don't specify a value, CodeBuild uses the managed CMK for Amazon Simple Storage Service (Amazon S3).
        public let encryptionKey: String?
        /// Information about the build environment for this build project.
        public let environment: ProjectEnvironment?
        ///  An array of ProjectFileSystemLocation objects for a CodeBuild build project. A ProjectFileSystemLocation object specifies the identifier, location, mountOptions, mountPoint, and type of a file system created using Amazon Elastic File System.
        public let fileSystemLocations: [ProjectFileSystemLocation]?
        /// When the build project's settings were last modified, expressed in Unix time format.
        public let lastModified: Date?
        /// Information about logs for the build project. A project can create logs in CloudWatch Logs, an S3 bucket, or both.
        public let logsConfig: LogsConfig?
        /// The name of the build project.
        public let name: String?
        /// The number of minutes a build is allowed to be queued before it times out.
        public let queuedTimeoutInMinutes: Int?
        /// An array of ProjectArtifacts objects.
        public let secondaryArtifacts: [ProjectArtifacts]?
        /// An array of ProjectSource objects.
        public let secondarySources: [ProjectSource]?
        /// An array of ProjectSourceVersion objects. If secondarySourceVersions is specified at the build level, then they take over these secondarySourceVersions (at the project level).
        public let secondarySourceVersions: [ProjectSourceVersion]?
        /// The ARN of the Identity and Access Management role that enables CodeBuild to interact with dependent Amazon Web Services services on behalf of the Amazon Web Services account.
        public let serviceRole: String?
        /// Information about the build input source code for this build project.
        public let source: ProjectSource?
        /// A version of the build input to be built for this project. If not specified, the latest version is used. If specified, it must be one of:   For CodeCommit: the commit ID, branch, or Git tag to use.   For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format pr/pull-request-ID (for example pr/25). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.   For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.   For Amazon S3: the version ID of the object that represents the build input ZIP file to use.   If sourceVersion is specified at the build level, then that version takes precedence over this sourceVersion (at the project level).  For more information, see Source Version Sample with CodeBuild in the CodeBuild User Guide.
        public let sourceVersion: String?
        /// A list of tag key and value pairs associated with this build project. These tags are available for use by Amazon Web Services services that support CodeBuild build project tags.
        public let tags: [Tag]?
        /// How long, in minutes, from 5 to 480 (8 hours), for CodeBuild to wait before timing out any related build that did not get marked as completed. The default is 60 minutes.
        public let timeoutInMinutes: Int?
        /// Information about the VPC configuration that CodeBuild accesses.
        public let vpcConfig: VpcConfig?
        /// Information about a webhook that connects repository events to a build project in CodeBuild.
        public let webhook: Webhook?

        public init(arn: String? = nil, artifacts: ProjectArtifacts? = nil, badge: ProjectBadge? = nil, buildBatchConfig: ProjectBuildBatchConfig? = nil, cache: ProjectCache? = nil, concurrentBuildLimit: Int? = nil, created: Date? = nil, description: String? = nil, encryptionKey: String? = nil, environment: ProjectEnvironment? = nil, fileSystemLocations: [ProjectFileSystemLocation]? = nil, lastModified: Date? = nil, logsConfig: LogsConfig? = nil, name: String? = nil, queuedTimeoutInMinutes: Int? = nil, secondaryArtifacts: [ProjectArtifacts]? = nil, secondarySources: [ProjectSource]? = nil, secondarySourceVersions: [ProjectSourceVersion]? = nil, serviceRole: String? = nil, source: ProjectSource? = nil, sourceVersion: String? = nil, tags: [Tag]? = nil, timeoutInMinutes: Int? = nil, vpcConfig: VpcConfig? = nil, webhook: Webhook? = nil) {
            self.arn = arn
            self.artifacts = artifacts
            self.badge = badge
            self.buildBatchConfig = buildBatchConfig
            self.cache = cache
            self.concurrentBuildLimit = concurrentBuildLimit
            self.created = created
            self.description = description
            self.encryptionKey = encryptionKey
            self.environment = environment
            self.fileSystemLocations = fileSystemLocations
            self.lastModified = lastModified
            self.logsConfig = logsConfig
            self.name = name
            self.queuedTimeoutInMinutes = queuedTimeoutInMinutes
            self.secondaryArtifacts = secondaryArtifacts
            self.secondarySources = secondarySources
            self.secondarySourceVersions = secondarySourceVersions
            self.serviceRole = serviceRole
            self.source = source
            self.sourceVersion = sourceVersion
            self.tags = tags
            self.timeoutInMinutes = timeoutInMinutes
            self.vpcConfig = vpcConfig
            self.webhook = webhook
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case artifacts
            case badge
            case buildBatchConfig
            case cache
            case concurrentBuildLimit
            case created
            case description
            case encryptionKey
            case environment
            case fileSystemLocations
            case lastModified
            case logsConfig
            case name
            case queuedTimeoutInMinutes
            case secondaryArtifacts
            case secondarySources
            case secondarySourceVersions
            case serviceRole
            case source
            case sourceVersion
            case tags
            case timeoutInMinutes
            case vpcConfig
            case webhook
        }
    }

    public struct ProjectArtifacts: AWSEncodableShape & AWSDecodableShape {
        ///  An identifier for this artifact definition.
        public let artifactIdentifier: String?
        ///  Set to true if you do not want your output artifacts encrypted. This option is valid only if your artifacts type is Amazon S3. If this is set with another artifacts type, an invalidInputException is thrown.
        public let encryptionDisabled: Bool?
        /// Information about the build output artifact location:   If type is set to CODEPIPELINE, CodePipeline ignores this value if specified. This is because CodePipeline manages its build output locations instead of CodeBuild.   If type is set to NO_ARTIFACTS, this value is ignored if specified, because no build output is produced.   If type is set to S3, this is the name of the output bucket.
        public let location: String?
        /// Along with path and namespaceType, the pattern that CodeBuild uses to name and store the output artifact:   If type is set to CODEPIPELINE, CodePipeline ignores this value if specified. This is because CodePipeline manages its build output names instead of CodeBuild.   If type is set to NO_ARTIFACTS, this value is ignored if specified, because no build output is produced.   If type is set to S3, this is the name of the output artifact object. If you set the name to be a forward slash ("/"), the artifact is stored in the root of the output bucket.   For example:    If path is set to MyArtifacts, namespaceType is set to BUILD_ID, and name is set to MyArtifact.zip, then the output artifact is stored in MyArtifacts/&lt;build-ID&gt;/MyArtifact.zip.     If path is empty, namespaceType is set to NONE, and name is set to "/", the output artifact is stored in the root of the output bucket.     If path is set to MyArtifacts, namespaceType is set to BUILD_ID, and name is set to "/", the output artifact is stored in MyArtifacts/&lt;build-ID&gt;.
        public let name: String?
        /// Along with path and name, the pattern that CodeBuild uses to determine the name and location to store the output artifact:   If type is set to CODEPIPELINE, CodePipeline ignores this value if specified. This is because CodePipeline manages its build output names instead of CodeBuild.   If type is set to NO_ARTIFACTS, this value is ignored if specified, because no build output is produced.   If type is set to S3, valid values include:    BUILD_ID: Include the build ID in the location of the build output artifact.    NONE: Do not include the build ID. This is the default if namespaceType is not specified.     For example, if path is set to MyArtifacts, namespaceType is set to BUILD_ID, and name is set to MyArtifact.zip, the output artifact is stored in MyArtifacts/&lt;build-ID&gt;/MyArtifact.zip.
        public let namespaceType: ArtifactNamespace?
        ///  If this flag is set, a name specified in the buildspec file overrides the artifact name. The name specified in a buildspec file is calculated at build time and uses the Shell Command Language. For example, you can append a date and time to your artifact name so that it is always unique.
        public let overrideArtifactName: Bool?
        /// The type of build output artifact to create:   If type is set to CODEPIPELINE, CodePipeline ignores this value if specified. This is because CodePipeline manages its build output artifacts instead of CodeBuild.   If type is set to NO_ARTIFACTS, this value is ignored if specified, because no build output is produced.   If type is set to S3, valid values include:    NONE: CodeBuild creates in the output bucket a folder that contains the build output. This is the default if packaging is not specified.    ZIP: CodeBuild creates in the output bucket a ZIP file that contains the build output.
        public let packaging: ArtifactPackaging?
        /// Along with namespaceType and name, the pattern that CodeBuild uses to name and store the output artifact:   If type is set to CODEPIPELINE, CodePipeline ignores this value if specified. This is because CodePipeline manages its build output names instead of CodeBuild.   If type is set to NO_ARTIFACTS, this value is ignored if specified, because no build output is produced.   If type is set to S3, this is the path to the output artifact. If path is not specified, path is not used.   For example, if path is set to MyArtifacts, namespaceType is set to NONE, and name is set to MyArtifact.zip, the output artifact is stored in the output bucket at MyArtifacts/MyArtifact.zip.
        public let path: String?
        /// The type of build output artifact. Valid values include:    CODEPIPELINE: The build project has build output generated through CodePipeline.   The CODEPIPELINE type is not supported for secondaryArtifacts.     NO_ARTIFACTS: The build project does not produce any build output.    S3: The build project stores build output in Amazon S3.
        public let type: ArtifactsType

        public init(artifactIdentifier: String? = nil, encryptionDisabled: Bool? = nil, location: String? = nil, name: String? = nil, namespaceType: ArtifactNamespace? = nil, overrideArtifactName: Bool? = nil, packaging: ArtifactPackaging? = nil, path: String? = nil, type: ArtifactsType) {
            self.artifactIdentifier = artifactIdentifier
            self.encryptionDisabled = encryptionDisabled
            self.location = location
            self.name = name
            self.namespaceType = namespaceType
            self.overrideArtifactName = overrideArtifactName
            self.packaging = packaging
            self.path = path
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case artifactIdentifier
            case encryptionDisabled
            case location
            case name
            case namespaceType
            case overrideArtifactName
            case packaging
            case path
            case type
        }
    }

    public struct ProjectBadge: AWSDecodableShape {
        /// Set this to true to generate a publicly accessible URL for your project's build badge.
        public let badgeEnabled: Bool?
        /// The publicly-accessible URL through which you can access the build badge for your project.
        public let badgeRequestUrl: String?

        public init(badgeEnabled: Bool? = nil, badgeRequestUrl: String? = nil) {
            self.badgeEnabled = badgeEnabled
            self.badgeRequestUrl = badgeRequestUrl
        }

        private enum CodingKeys: String, CodingKey {
            case badgeEnabled
            case badgeRequestUrl
        }
    }

    public struct ProjectBuildBatchConfig: AWSEncodableShape & AWSDecodableShape {
        /// Specifies if the build artifacts for the batch build should be combined into a single artifact location.
        public let combineArtifacts: Bool?
        /// A BatchRestrictions object that specifies the restrictions for the batch build.
        public let restrictions: BatchRestrictions?
        /// Specifies the service role ARN for the batch build project.
        public let serviceRole: String?
        /// Specifies the maximum amount of time, in minutes, that the batch build must be completed in.
        public let timeoutInMins: Int?

        public init(combineArtifacts: Bool? = nil, restrictions: BatchRestrictions? = nil, serviceRole: String? = nil, timeoutInMins: Int? = nil) {
            self.combineArtifacts = combineArtifacts
            self.restrictions = restrictions
            self.serviceRole = serviceRole
            self.timeoutInMins = timeoutInMins
        }

        public func validate(name: String) throws {
            try self.restrictions?.validate(name: "\(name).restrictions")
            try self.validate(self.serviceRole, name: "serviceRole", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case combineArtifacts
            case restrictions
            case serviceRole
            case timeoutInMins
        }
    }

    public struct ProjectCache: AWSEncodableShape & AWSDecodableShape {
        /// Information about the cache location:     NO_CACHE or LOCAL: This value is ignored.    S3: This is the S3 bucket name/prefix.
        public let location: String?
        /// An array of strings that specify the local cache modes. You can use one or more local cache modes at the same time. This is only used for LOCAL cache types. Possible values are:  LOCAL_SOURCE_CACHE  Caches Git metadata for primary and secondary sources. After the cache is created, subsequent builds pull only the change between commits. This mode is a good choice for projects with a clean working directory and a source that is a large Git repository. If you choose this option and your project does not use a Git repository (GitHub, GitHub Enterprise, or Bitbucket), the option is ignored.   LOCAL_DOCKER_LAYER_CACHE  Caches existing Docker layers. This mode is a good choice for projects that build or pull large Docker images. It can prevent the performance issues caused by pulling large Docker images down from the network.     You can use a Docker layer cache in the Linux environment only.    The privileged flag must be set so that your project has the required Docker permissions.    You should consider the security implications before you use a Docker layer cache.      LOCAL_CUSTOM_CACHE  Caches directories you specify in the buildspec file. This mode is a good choice if your build scenario is not suited to one of the other three local cache modes. If you use a custom cache:    Only directories can be specified for caching. You cannot specify individual files.    Symlinks are used to reference cached directories.    Cached directories are linked to your build before it downloads its project sources. Cached items are overridden if a source item has the same name. Directories are specified using cache paths in the buildspec file.
        public let modes: [CacheMode]?
        /// The type of cache used by the build project. Valid values include:    NO_CACHE: The build project does not use any cache.    S3: The build project reads and writes from and to S3.    LOCAL: The build project stores a cache locally on a build host that is only available to that build host.
        public let type: CacheType

        public init(location: String? = nil, modes: [CacheMode]? = nil, type: CacheType) {
            self.location = location
            self.modes = modes
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case location
            case modes
            case type
        }
    }

    public struct ProjectEnvironment: AWSEncodableShape & AWSDecodableShape {
        /// The ARN of the Amazon S3 bucket, path prefix, and object key that contains the PEM-encoded certificate for the build project. For more information, see certificate in the CodeBuild User Guide.
        public let certificate: String?
        /// Information about the compute resources the build project uses. Available values include:    BUILD_GENERAL1_SMALL: Use up to 3 GB memory and 2 vCPUs for builds.    BUILD_GENERAL1_MEDIUM: Use up to 7 GB memory and 4 vCPUs for builds.    BUILD_GENERAL1_LARGE: Use up to 16 GB memory and 8 vCPUs for builds, depending on your environment type.    BUILD_GENERAL1_2XLARGE: Use up to 145 GB memory, 72 vCPUs, and 824 GB of SSD storage for builds. This compute type supports Docker images up to 100 GB uncompressed.    If you use BUILD_GENERAL1_LARGE:     For environment type LINUX_CONTAINER, you can use up to 15 GB memory and 8 vCPUs for builds.     For environment type LINUX_GPU_CONTAINER, you can use up to 255 GB memory, 32 vCPUs, and 4 NVIDIA Tesla V100 GPUs for builds.    For environment type ARM_CONTAINER, you can use up to 16 GB memory and 8 vCPUs on ARM-based processors for builds.   For more information, see Build Environment Compute Types in the CodeBuild User Guide.
        public let computeType: ComputeType
        /// A set of environment variables to make available to builds for this build project.
        public let environmentVariables: [EnvironmentVariable]?
        /// The image tag or image digest that identifies the Docker image to use for this build project. Use the following formats:   For an image tag: &lt;registry&gt;/&lt;repository&gt;:&lt;tag&gt;. For example, in the Docker repository that CodeBuild uses to manage its Docker images, this would be aws/codebuild/standard:4.0.    For an image digest: &lt;registry&gt;/&lt;repository&gt;@&lt;digest&gt;. For example, to specify an image with the digest "sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf," use &lt;registry&gt;/&lt;repository&gt;@sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf.   For more information, see Docker images provided by CodeBuild in the CodeBuild user guide.
        public let image: String
        ///  The type of credentials CodeBuild uses to pull images in your build. There are two valid values:     CODEBUILD specifies that CodeBuild uses its own credentials. This requires that you modify your ECR repository policy to trust CodeBuild service principal.     SERVICE_ROLE specifies that CodeBuild uses your build project's service role.     When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an CodeBuild curated image, you must use CODEBUILD credentials.
        public let imagePullCredentialsType: ImagePullCredentialsType?
        /// Enables running the Docker daemon inside a Docker container. Set to true only if the build project is used to build Docker images. Otherwise, a build that attempts to interact with the Docker daemon fails. The default setting is false. You can initialize the Docker daemon during the install phase of your build by adding one of the following sets of commands to the install phase of your buildspec file: If the operating system's base image is Ubuntu Linux:  - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay&amp;   - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"  If the operating system's base image is Alpine Linux and the previous command does not work, add the -t argument to timeout:  - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay&amp;   - timeout -t 15 sh -c "until docker info; do echo .; sleep 1; done"
        public let privilegedMode: Bool?
        ///  The credentials for access to a private registry.
        public let registryCredential: RegistryCredential?
        /// The type of build environment to use for related builds.   The environment type ARM_CONTAINER is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), Asia Pacific (Mumbai), Asia Pacific (Tokyo), Asia Pacific (Sydney), and EU (Frankfurt).   The environment type LINUX_CONTAINER with compute type build.general1.2xlarge is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), Canada (Central), EU (Ireland), EU (London), EU (Frankfurt), Asia Pacific (Tokyo), Asia Pacific (Seoul), Asia Pacific (Singapore), Asia Pacific (Sydney), China (Beijing), and China (Ningxia).   The environment type LINUX_GPU_CONTAINER is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), Canada (Central), EU (Ireland), EU (London), EU (Frankfurt), Asia Pacific (Tokyo), Asia Pacific (Seoul), Asia Pacific (Singapore), Asia Pacific (Sydney) , China (Beijing), and China (Ningxia).     The environment types WINDOWS_CONTAINER and WINDOWS_SERVER_2019_CONTAINER are available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), and EU (Ireland).   For more information, see Build environment compute types in the CodeBuild user guide.
        public let type: EnvironmentType

        public init(certificate: String? = nil, computeType: ComputeType, environmentVariables: [EnvironmentVariable]? = nil, image: String, imagePullCredentialsType: ImagePullCredentialsType? = nil, privilegedMode: Bool? = nil, registryCredential: RegistryCredential? = nil, type: EnvironmentType) {
            self.certificate = certificate
            self.computeType = computeType
            self.environmentVariables = environmentVariables
            self.image = image
            self.imagePullCredentialsType = imagePullCredentialsType
            self.privilegedMode = privilegedMode
            self.registryCredential = registryCredential
            self.type = type
        }

        public func validate(name: String) throws {
            try self.environmentVariables?.forEach {
                try $0.validate(name: "\(name).environmentVariables[]")
            }
            try self.validate(self.image, name: "image", parent: name, min: 1)
            try self.registryCredential?.validate(name: "\(name).registryCredential")
        }

        private enum CodingKeys: String, CodingKey {
            case certificate
            case computeType
            case environmentVariables
            case image
            case imagePullCredentialsType
            case privilegedMode
            case registryCredential
            case type
        }
    }

    public struct ProjectFileSystemLocation: AWSEncodableShape & AWSDecodableShape {
        /// The name used to access a file system created by Amazon EFS. CodeBuild creates an environment variable by appending the identifier in all capital letters to CODEBUILD_. For example, if you specify my_efs for identifier, a new environment variable is create named CODEBUILD_MY_EFS.   The identifier is used to mount your file system.
        public let identifier: String?
        /// A string that specifies the location of the file system created by Amazon EFS. Its format is efs-dns-name:/directory-path. You can find the DNS name of file system when you view it in the Amazon EFS console. The directory path is a path to a directory in the file system that CodeBuild mounts. For example, if the DNS name of a file system is fs-abcd1234.efs.us-west-2.amazonaws.com, and its mount directory is my-efs-mount-directory, then the location is fs-abcd1234.efs.us-west-2.amazonaws.com:/my-efs-mount-directory.  The directory path in the format efs-dns-name:/directory-path is optional. If you do not specify a directory path, the location is only the DNS name and CodeBuild mounts the entire file system.
        public let location: String?
        ///  The mount options for a file system created by Amazon EFS. The default mount options used by CodeBuild are nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2. For more information, see Recommended NFS Mount Options.
        public let mountOptions: String?
        /// The location in the container where you mount the file system.
        public let mountPoint: String?
        ///  The type of the file system. The one supported type is EFS.
        public let type: FileSystemType?

        public init(identifier: String? = nil, location: String? = nil, mountOptions: String? = nil, mountPoint: String? = nil, type: FileSystemType? = nil) {
            self.identifier = identifier
            self.location = location
            self.mountOptions = mountOptions
            self.mountPoint = mountPoint
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case identifier
            case location
            case mountOptions
            case mountPoint
            case type
        }
    }

    public struct ProjectSource: AWSEncodableShape & AWSDecodableShape {
        /// Information about the authorization settings for CodeBuild to access the source code to be built. This information is for the CodeBuild console's use only. Your code should not get or set this information directly.
        public let auth: SourceAuth?
        /// The buildspec file declaration to use for the builds in this build project.  If this value is set, it can be either an inline buildspec definition, the path to an alternate buildspec file relative to the value of the built-in CODEBUILD_SRC_DIR environment variable, or the path to an S3 bucket. The bucket must be in the same Region as the build project. Specify the buildspec file using its ARN (for example, arn:aws:s3:::my-codebuild-sample2/buildspec.yml). If this value is not provided or is set to an empty string, the source code must contain a buildspec file in its root directory. For more information, see Buildspec File Name and Storage Location.
        public let buildspec: String?
        /// Contains information that defines how the build project reports the build status to the source provider. This option is only used when the source provider is GITHUB, GITHUB_ENTERPRISE, or BITBUCKET.
        public let buildStatusConfig: BuildStatusConfig?
        /// Information about the Git clone depth for the build project.
        public let gitCloneDepth: Int?
        ///  Information about the Git submodules configuration for the build project.
        public let gitSubmodulesConfig: GitSubmodulesConfig?
        /// Enable this flag to ignore SSL warnings while connecting to the project source code.
        public let insecureSsl: Bool?
        /// Information about the location of the source code to be built. Valid values include:   For source code settings that are specified in the source action of a pipeline in CodePipeline, location should not be specified. If it is specified, CodePipeline ignores it. This is because CodePipeline uses the settings in a pipeline's source action instead of this value.   For source code in an CodeCommit repository, the HTTPS clone URL to the repository that contains the source code and the buildspec file (for example, https://git-codecommit.&lt;region-ID&gt;.amazonaws.com/v1/repos/&lt;repo-name&gt;).   For source code in an Amazon S3 input bucket, one of the following.    The path to the ZIP file that contains the source code (for example, &lt;bucket-name&gt;/&lt;path&gt;/&lt;object-name&gt;.zip).    The path to the folder that contains the source code (for example, &lt;bucket-name&gt;/&lt;path-to-source-code&gt;/&lt;folder&gt;/).      For source code in a GitHub repository, the HTTPS clone URL to the repository that contains the source and the buildspec file. You must connect your account to your GitHub account. Use the CodeBuild console to start creating a build project. When you use the console to connect (or reconnect) with GitHub, on the GitHub Authorize application page, for Organization access, choose Request access next to each repository you want to allow CodeBuild to have access to, and then choose Authorize application. (After you have connected to your GitHub account, you do not need to finish creating the build project. You can leave the CodeBuild console.) To instruct CodeBuild to use this connection, in the source object, set the auth object's type value to OAUTH.   For source code in a Bitbucket repository, the HTTPS clone URL to the repository that contains the source and the buildspec file. You must connect your Amazon Web Services account to your Bitbucket account. Use the CodeBuild console to start creating a build project. When you use the console to connect (or reconnect) with Bitbucket, on the Bitbucket Confirm access to your account page, choose Grant access. (After you have connected to your Bitbucket account, you do not need to finish creating the build project. You can leave the CodeBuild console.) To instruct CodeBuild to use this connection, in the source object, set the auth object's type value to OAUTH.    If you specify CODEPIPELINE for the Type property, don't specify this property. For all of the other types, you must specify Location.
        public let location: String?
        ///  Set to true to report the status of a build's start and finish to your source provider. This option is valid only when your source provider is GitHub, GitHub Enterprise, or Bitbucket. If this is set and you use a different source provider, an invalidInputException is thrown.  To be able to report the build status to the source provider, the user associated with the source provider must have write access to the repo. If the user does not have write access, the build status cannot be updated. For more information, see Source provider access in the CodeBuild User Guide.   The status of a build triggered by a webhook is always reported to your source provider.
        public let reportBuildStatus: Bool?
        /// An identifier for this project source. The identifier can only contain alphanumeric characters and underscores, and must be less than 128 characters in length.
        public let sourceIdentifier: String?
        /// The type of repository that contains the source code to be built. Valid values include:    BITBUCKET: The source code is in a Bitbucket repository.    CODECOMMIT: The source code is in an CodeCommit repository.    CODEPIPELINE: The source code settings are specified in the source action of a pipeline in CodePipeline.    GITHUB: The source code is in a GitHub or GitHub Enterprise Cloud repository.    GITHUB_ENTERPRISE: The source code is in a GitHub Enterprise Server repository.    NO_SOURCE: The project does not have input source code.    S3: The source code is in an Amazon S3 bucket.
        public let type: SourceType

        public init(auth: SourceAuth? = nil, buildspec: String? = nil, buildStatusConfig: BuildStatusConfig? = nil, gitCloneDepth: Int? = nil, gitSubmodulesConfig: GitSubmodulesConfig? = nil, insecureSsl: Bool? = nil, location: String? = nil, reportBuildStatus: Bool? = nil, sourceIdentifier: String? = nil, type: SourceType) {
            self.auth = auth
            self.buildspec = buildspec
            self.buildStatusConfig = buildStatusConfig
            self.gitCloneDepth = gitCloneDepth
            self.gitSubmodulesConfig = gitSubmodulesConfig
            self.insecureSsl = insecureSsl
            self.location = location
            self.reportBuildStatus = reportBuildStatus
            self.sourceIdentifier = sourceIdentifier
            self.type = type
        }

        public func validate(name: String) throws {
            try self.validate(self.gitCloneDepth, name: "gitCloneDepth", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case auth
            case buildspec
            case buildStatusConfig
            case gitCloneDepth
            case gitSubmodulesConfig
            case insecureSsl
            case location
            case reportBuildStatus
            case sourceIdentifier
            case type
        }
    }

    public struct ProjectSourceVersion: AWSEncodableShape & AWSDecodableShape {
        /// An identifier for a source in the build project. The identifier can only contain alphanumeric characters and underscores, and must be less than 128 characters in length.
        public let sourceIdentifier: String
        /// The source version for the corresponding source identifier. If specified, must be one of:   For CodeCommit: the commit ID, branch, or Git tag to use.   For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format pr/pull-request-ID (for example, pr/25). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.   For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.   For Amazon S3: the version ID of the object that represents the build input ZIP file to use.    For more information, see Source Version Sample with CodeBuild in the CodeBuild User Guide.
        public let sourceVersion: String

        public init(sourceIdentifier: String, sourceVersion: String) {
            self.sourceIdentifier = sourceIdentifier
            self.sourceVersion = sourceVersion
        }

        private enum CodingKeys: String, CodingKey {
            case sourceIdentifier
            case sourceVersion
        }
    }

    public struct PutResourcePolicyInput: AWSEncodableShape {
        ///  A JSON-formatted resource policy. For more information, see Sharing a Project and Sharing a Report Group in the CodeBuild User Guide.
        public let policy: String
        ///  The ARN of the Project or ReportGroup resource you want to associate with a resource policy.
        public let resourceArn: String

        public init(policy: String, resourceArn: String) {
            self.policy = policy
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.policy, name: "policy", parent: name, min: 1)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case policy
            case resourceArn
        }
    }

    public struct PutResourcePolicyOutput: AWSDecodableShape {
        ///  The ARN of the Project or ReportGroup resource that is associated with a resource policy.
        public let resourceArn: String?

        public init(resourceArn: String? = nil) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn
        }
    }

    public struct RegistryCredential: AWSEncodableShape & AWSDecodableShape {
        ///  The Amazon Resource Name (ARN) or name of credentials created using Secrets Manager.    The credential can use the name of the credentials only if they exist in your current Region.
        public let credential: String
        ///  The service that created the credentials to access a private Docker registry. The valid value, SECRETS_MANAGER, is for Secrets Manager.
        public let credentialProvider: CredentialProviderType

        public init(credential: String, credentialProvider: CredentialProviderType) {
            self.credential = credential
            self.credentialProvider = credentialProvider
        }

        public func validate(name: String) throws {
            try self.validate(self.credential, name: "credential", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case credential
            case credentialProvider
        }
    }

    public struct Report: AWSDecodableShape {
        ///  The ARN of the report run.
        public let arn: String?
        /// A CodeCoverageReportSummary object that contains a code coverage summary for this report.
        public let codeCoverageSummary: CodeCoverageReportSummary?
        ///  The date and time this report run occurred.
        public let created: Date?
        ///  The ARN of the build run that generated this report.
        public let executionId: String?
        ///  The date and time a report expires. A report expires 30 days after it is created. An expired report is not available to view in CodeBuild.
        public let expired: Date?
        ///  Information about where the raw data used to generate this report was exported.
        public let exportConfig: ReportExportConfig?
        ///  The name of the report that was run.
        public let name: String?
        ///  The ARN of the report group associated with this report.
        public let reportGroupArn: String?
        ///  The status of this report.
        public let status: ReportStatusType?
        ///  A TestReportSummary object that contains information about this test report.
        public let testSummary: TestReportSummary?
        ///  A boolean that specifies if this report run is truncated. The list of test cases is truncated after the maximum number of test cases is reached.
        public let truncated: Bool?
        /// The type of the report that was run.  CODE_COVERAGE  A code coverage report.  TEST  A test report.
        public let type: ReportType?

        public init(arn: String? = nil, codeCoverageSummary: CodeCoverageReportSummary? = nil, created: Date? = nil, executionId: String? = nil, expired: Date? = nil, exportConfig: ReportExportConfig? = nil, name: String? = nil, reportGroupArn: String? = nil, status: ReportStatusType? = nil, testSummary: TestReportSummary? = nil, truncated: Bool? = nil, type: ReportType? = nil) {
            self.arn = arn
            self.codeCoverageSummary = codeCoverageSummary
            self.created = created
            self.executionId = executionId
            self.expired = expired
            self.exportConfig = exportConfig
            self.name = name
            self.reportGroupArn = reportGroupArn
            self.status = status
            self.testSummary = testSummary
            self.truncated = truncated
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case codeCoverageSummary
            case created
            case executionId
            case expired
            case exportConfig
            case name
            case reportGroupArn
            case status
            case testSummary
            case truncated
            case type
        }
    }

    public struct ReportExportConfig: AWSEncodableShape & AWSDecodableShape {
        ///  The export configuration type. Valid values are:     S3: The report results are exported to an S3 bucket.     NO_EXPORT: The report results are not exported.
        public let exportConfigType: ReportExportConfigType?
        ///  A S3ReportExportConfig object that contains information about the S3 bucket where the run of a report is exported.
        public let s3Destination: S3ReportExportConfig?

        public init(exportConfigType: ReportExportConfigType? = nil, s3Destination: S3ReportExportConfig? = nil) {
            self.exportConfigType = exportConfigType
            self.s3Destination = s3Destination
        }

        public func validate(name: String) throws {
            try self.s3Destination?.validate(name: "\(name).s3Destination")
        }

        private enum CodingKeys: String, CodingKey {
            case exportConfigType
            case s3Destination
        }
    }

    public struct ReportFilter: AWSEncodableShape {
        ///  The status used to filter reports. You can filter using one status only.
        public let status: ReportStatusType?

        public init(status: ReportStatusType? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status
        }
    }

    public struct ReportGroup: AWSDecodableShape {
        /// The ARN of the ReportGroup.
        public let arn: String?
        /// The date and time this ReportGroup was created.
        public let created: Date?
        /// Information about the destination where the raw data of this ReportGroup is exported.
        public let exportConfig: ReportExportConfig?
        /// The date and time this ReportGroup was last modified.
        public let lastModified: Date?
        /// The name of the ReportGroup.
        public let name: String?
        /// The status of the report group. This property is read-only. This can be one of the following values:  ACTIVE  The report group is active.  DELETING  The report group is in the process of being deleted.
        public let status: ReportGroupStatusType?
        /// A list of tag key and value pairs associated with this report group.  These tags are available for use by Amazon Web Services services that support CodeBuild report group tags.
        public let tags: [Tag]?
        /// The type of the ReportGroup. This can be one of the following values:  CODE_COVERAGE  The report group contains code coverage reports.  TEST  The report group contains test reports.
        public let type: ReportType?

        public init(arn: String? = nil, created: Date? = nil, exportConfig: ReportExportConfig? = nil, lastModified: Date? = nil, name: String? = nil, status: ReportGroupStatusType? = nil, tags: [Tag]? = nil, type: ReportType? = nil) {
            self.arn = arn
            self.created = created
            self.exportConfig = exportConfig
            self.lastModified = lastModified
            self.name = name
            self.status = status
            self.tags = tags
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case created
            case exportConfig
            case lastModified
            case name
            case status
            case tags
            case type
        }
    }

    public struct ReportGroupTrendStats: AWSDecodableShape {
        /// Contains the average of all values analyzed.
        public let average: String?
        /// Contains the maximum value analyzed.
        public let max: String?
        /// Contains the minimum value analyzed.
        public let min: String?

        public init(average: String? = nil, max: String? = nil, min: String? = nil) {
            self.average = average
            self.max = max
            self.min = min
        }

        private enum CodingKeys: String, CodingKey {
            case average
            case max
            case min
        }
    }

    public struct ReportWithRawData: AWSDecodableShape {
        /// The value of the requested data field from the report.
        public let data: String?
        /// The ARN of the report.
        public let reportArn: String?

        public init(data: String? = nil, reportArn: String? = nil) {
            self.data = data
            self.reportArn = reportArn
        }

        private enum CodingKeys: String, CodingKey {
            case data
            case reportArn
        }
    }

    public struct ResolvedArtifact: AWSDecodableShape {
        /// The identifier of the artifact.
        public let identifier: String?
        /// The location of the artifact.
        public let location: String?
        /// Specifies the type of artifact.
        public let type: ArtifactsType?

        public init(identifier: String? = nil, location: String? = nil, type: ArtifactsType? = nil) {
            self.identifier = identifier
            self.location = location
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case identifier
            case location
            case type
        }
    }

    public struct RetryBuildBatchInput: AWSEncodableShape {
        /// Specifies the identifier of the batch build to restart.
        public let id: String?
        /// A unique, case sensitive identifier you provide to ensure the idempotency of the RetryBuildBatch request. The token is included in the RetryBuildBatch request and is valid for five minutes. If you repeat the RetryBuildBatch request with the same token, but change a parameter, CodeBuild returns a parameter mismatch error.
        public let idempotencyToken: String?
        /// Specifies the type of retry to perform.
        public let retryType: RetryBuildBatchType?

        public init(id: String? = nil, idempotencyToken: String? = nil, retryType: RetryBuildBatchType? = nil) {
            self.id = id
            self.idempotencyToken = idempotencyToken
            self.retryType = retryType
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case idempotencyToken
            case retryType
        }
    }

    public struct RetryBuildBatchOutput: AWSDecodableShape {
        public let buildBatch: BuildBatch?

        public init(buildBatch: BuildBatch? = nil) {
            self.buildBatch = buildBatch
        }

        private enum CodingKeys: String, CodingKey {
            case buildBatch
        }
    }

    public struct RetryBuildInput: AWSEncodableShape {
        /// Specifies the identifier of the build to restart.
        public let id: String?
        /// A unique, case sensitive identifier you provide to ensure the idempotency of the RetryBuild request. The token is included in the RetryBuild request and is valid for five minutes. If you repeat the RetryBuild request with the same token, but change a parameter, CodeBuild returns a parameter mismatch error.
        public let idempotencyToken: String?

        public init(id: String? = nil, idempotencyToken: String? = nil) {
            self.id = id
            self.idempotencyToken = idempotencyToken
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case idempotencyToken
        }
    }

    public struct RetryBuildOutput: AWSDecodableShape {
        public let build: Build?

        public init(build: Build? = nil) {
            self.build = build
        }

        private enum CodingKeys: String, CodingKey {
            case build
        }
    }

    public struct S3LogsConfig: AWSEncodableShape & AWSDecodableShape {
        ///  Set to true if you do not want your S3 build log output encrypted. By default S3 build logs are encrypted.
        public let encryptionDisabled: Bool?
        ///  The ARN of an S3 bucket and the path prefix for S3 logs. If your Amazon S3 bucket name is my-bucket, and your path prefix is build-log, then acceptable formats are my-bucket/build-log or arn:aws:s3:::my-bucket/build-log.
        public let location: String?
        /// The current status of the S3 build logs. Valid values are:    ENABLED: S3 build logs are enabled for this build project.    DISABLED: S3 build logs are not enabled for this build project.
        public let status: LogsConfigStatusType

        public init(encryptionDisabled: Bool? = nil, location: String? = nil, status: LogsConfigStatusType) {
            self.encryptionDisabled = encryptionDisabled
            self.location = location
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case encryptionDisabled
            case location
            case status
        }
    }

    public struct S3ReportExportConfig: AWSEncodableShape & AWSDecodableShape {
        ///  The name of the S3 bucket where the raw data of a report are exported.
        public let bucket: String?
        /// The Amazon Web Services account identifier of the owner of the Amazon S3 bucket. This allows report data to be exported to an Amazon S3 bucket that is owned by an account other than the account running the build.
        public let bucketOwner: String?
        ///  A boolean value that specifies if the results of a report are encrypted.
        public let encryptionDisabled: Bool?
        ///  The encryption key for the report's encrypted raw data.
        public let encryptionKey: String?
        ///  The type of build output artifact to create. Valid values include:     NONE: CodeBuild creates the raw data in the output bucket. This is the default if packaging is not specified.     ZIP: CodeBuild creates a ZIP file with the raw data in the output bucket.
        public let packaging: ReportPackagingType?
        ///  The path to the exported report's raw data results.
        public let path: String?

        public init(bucket: String? = nil, bucketOwner: String? = nil, encryptionDisabled: Bool? = nil, encryptionKey: String? = nil, packaging: ReportPackagingType? = nil, path: String? = nil) {
            self.bucket = bucket
            self.bucketOwner = bucketOwner
            self.encryptionDisabled = encryptionDisabled
            self.encryptionKey = encryptionKey
            self.packaging = packaging
            self.path = path
        }

        public func validate(name: String) throws {
            try self.validate(self.bucket, name: "bucket", parent: name, min: 1)
            try self.validate(self.encryptionKey, name: "encryptionKey", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case bucket
            case bucketOwner
            case encryptionDisabled
            case encryptionKey
            case packaging
            case path
        }
    }

    public struct SourceAuth: AWSEncodableShape & AWSDecodableShape {
        /// The resource value that applies to the specified authorization type.
        public let resource: String?
        ///   This data type is deprecated and is no longer accurate or used.   The authorization type to use. The only valid value is OAUTH, which represents the OAuth authorization type.
        public let type: SourceAuthType

        public init(resource: String? = nil, type: SourceAuthType) {
            self.resource = resource
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case resource
            case type
        }
    }

    public struct SourceCredentialsInfo: AWSDecodableShape {
        ///  The Amazon Resource Name (ARN) of the token.
        public let arn: String?
        ///  The type of authentication used by the credentials. Valid options are OAUTH, BASIC_AUTH, or PERSONAL_ACCESS_TOKEN.
        public let authType: AuthType?
        ///  The type of source provider. The valid options are GITHUB, GITHUB_ENTERPRISE, or BITBUCKET.
        public let serverType: ServerType?

        public init(arn: String? = nil, authType: AuthType? = nil, serverType: ServerType? = nil) {
            self.arn = arn
            self.authType = authType
            self.serverType = serverType
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case authType
            case serverType
        }
    }

    public struct StartBuildBatchInput: AWSEncodableShape {
        /// An array of ProjectArtifacts objects that contains information about the build output artifact overrides for the build project.
        public let artifactsOverride: ProjectArtifacts?
        /// A BuildBatchConfigOverride object that contains batch build configuration overrides.
        public let buildBatchConfigOverride: ProjectBuildBatchConfig?
        /// A buildspec file declaration that overrides, for this build only, the latest one already defined in the build project. If this value is set, it can be either an inline buildspec definition, the path to an alternate buildspec file relative to the value of the built-in CODEBUILD_SRC_DIR environment variable, or the path to an S3 bucket. The bucket must be in the same Region as the build project. Specify the buildspec file using its ARN (for example, arn:aws:s3:::my-codebuild-sample2/buildspec.yml). If this value is not provided or is set to an empty string, the source code must contain a buildspec file in its root directory. For more information, see Buildspec File Name and Storage Location.
        public let buildspecOverride: String?
        /// Overrides the build timeout specified in the batch build project.
        public let buildTimeoutInMinutesOverride: Int?
        /// A ProjectCache object that specifies cache overrides.
        public let cacheOverride: ProjectCache?
        /// The name of a certificate for this batch build that overrides the one specified in the batch build project.
        public let certificateOverride: String?
        /// The name of a compute type for this batch build that overrides the one specified in the batch build project.
        public let computeTypeOverride: ComputeType?
        /// Specifies if session debugging is enabled for this batch build. For more information, see Viewing a running build in Session Manager. Batch session debugging is not supported for matrix batch builds.
        public let debugSessionEnabled: Bool?
        /// The Key Management Service customer master key (CMK) that overrides the one specified in the batch build project. The CMK key encrypts the build output artifacts.  You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key.   You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format alias/&lt;alias-name&gt;).
        public let encryptionKeyOverride: String?
        /// A container type for this batch build that overrides the one specified in the batch build project.
        public let environmentTypeOverride: EnvironmentType?
        /// An array of EnvironmentVariable objects that override, or add to, the environment variables defined in the batch build project.
        public let environmentVariablesOverride: [EnvironmentVariable]?
        /// The user-defined depth of history, with a minimum value of 0, that overrides, for this batch build only, any previous depth of history defined in the batch build project.
        public let gitCloneDepthOverride: Int?
        /// A GitSubmodulesConfig object that overrides the Git submodules configuration for this batch build.
        public let gitSubmodulesConfigOverride: GitSubmodulesConfig?
        /// A unique, case sensitive identifier you provide to ensure the idempotency of the StartBuildBatch request. The token is included in the StartBuildBatch request and is valid for five minutes. If you repeat the StartBuildBatch request with the same token, but change a parameter, CodeBuild returns a parameter mismatch error.
        public let idempotencyToken: String?
        /// The name of an image for this batch build that overrides the one specified in the batch build project.
        public let imageOverride: String?
        /// The type of credentials CodeBuild uses to pull images in your batch build. There are two valid values:   CODEBUILD  Specifies that CodeBuild uses its own credentials. This requires that you modify your ECR repository policy to trust CodeBuild's service principal.  SERVICE_ROLE  Specifies that CodeBuild uses your build project's service role.    When using a cross-account or private registry image, you must use SERVICE_ROLE credentials. When using an CodeBuild curated image, you must use CODEBUILD credentials.
        public let imagePullCredentialsTypeOverride: ImagePullCredentialsType?
        /// Enable this flag to override the insecure SSL setting that is specified in the batch build project. The insecure SSL setting determines whether to ignore SSL warnings while connecting to the project source code. This override applies only if the build's source is GitHub Enterprise.
        public let insecureSslOverride: Bool?
        /// A LogsConfig object that override the log settings defined in the batch build project.
        public let logsConfigOverride: LogsConfig?
        /// Enable this flag to override privileged mode in the batch build project.
        public let privilegedModeOverride: Bool?
        /// The name of the project.
        public let projectName: String
        /// The number of minutes a batch build is allowed to be queued before it times out.
        public let queuedTimeoutInMinutesOverride: Int?
        /// A RegistryCredential object that overrides credentials for access to a private registry.
        public let registryCredentialOverride: RegistryCredential?
        /// Set to true to report to your source provider the status of a batch build's start and completion. If you use this option with a source provider other than GitHub, GitHub Enterprise, or Bitbucket, an invalidInputException is thrown.   The status of a build triggered by a webhook is always reported to your source provider.
        public let reportBuildBatchStatusOverride: Bool?
        /// An array of ProjectArtifacts objects that override the secondary artifacts defined in the batch build project.
        public let secondaryArtifactsOverride: [ProjectArtifacts]?
        /// An array of ProjectSource objects that override the secondary sources defined in the batch build project.
        public let secondarySourcesOverride: [ProjectSource]?
        /// An array of ProjectSourceVersion objects that override the secondary source versions in the batch build project.
        public let secondarySourcesVersionOverride: [ProjectSourceVersion]?
        /// The name of a service role for this batch build that overrides the one specified in the batch build project.
        public let serviceRoleOverride: String?
        /// A SourceAuth object that overrides the one defined in the batch build project. This override applies only if the build project's source is BitBucket or GitHub.
        public let sourceAuthOverride: SourceAuth?
        /// A location that overrides, for this batch build, the source location defined in the batch build project.
        public let sourceLocationOverride: String?
        /// The source input type that overrides the source input defined in the batch build project.
        public let sourceTypeOverride: SourceType?
        /// The version of the batch build input to be built, for this build only. If not specified, the latest version is used. If specified, the contents depends on the source provider:  CodeCommit  The commit ID, branch, or Git tag to use.  GitHub  The commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format pr/pull-request-ID (for example pr/25). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.  Bitbucket  The commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.  Amazon S3  The version ID of the object that represents the build input ZIP file to use.   If sourceVersion is specified at the project level, then this sourceVersion (at the build level) takes precedence.  For more information, see Source Version Sample with CodeBuild in the CodeBuild User Guide.
        public let sourceVersion: String?

        public init(artifactsOverride: ProjectArtifacts? = nil, buildBatchConfigOverride: ProjectBuildBatchConfig? = nil, buildspecOverride: String? = nil, buildTimeoutInMinutesOverride: Int? = nil, cacheOverride: ProjectCache? = nil, certificateOverride: String? = nil, computeTypeOverride: ComputeType? = nil, debugSessionEnabled: Bool? = nil, encryptionKeyOverride: String? = nil, environmentTypeOverride: EnvironmentType? = nil, environmentVariablesOverride: [EnvironmentVariable]? = nil, gitCloneDepthOverride: Int? = nil, gitSubmodulesConfigOverride: GitSubmodulesConfig? = nil, idempotencyToken: String? = nil, imageOverride: String? = nil, imagePullCredentialsTypeOverride: ImagePullCredentialsType? = nil, insecureSslOverride: Bool? = nil, logsConfigOverride: LogsConfig? = nil, privilegedModeOverride: Bool? = nil, projectName: String, queuedTimeoutInMinutesOverride: Int? = nil, registryCredentialOverride: RegistryCredential? = nil, reportBuildBatchStatusOverride: Bool? = nil, secondaryArtifactsOverride: [ProjectArtifacts]? = nil, secondarySourcesOverride: [ProjectSource]? = nil, secondarySourcesVersionOverride: [ProjectSourceVersion]? = nil, serviceRoleOverride: String? = nil, sourceAuthOverride: SourceAuth? = nil, sourceLocationOverride: String? = nil, sourceTypeOverride: SourceType? = nil, sourceVersion: String? = nil) {
            self.artifactsOverride = artifactsOverride
            self.buildBatchConfigOverride = buildBatchConfigOverride
            self.buildspecOverride = buildspecOverride
            self.buildTimeoutInMinutesOverride = buildTimeoutInMinutesOverride
            self.cacheOverride = cacheOverride
            self.certificateOverride = certificateOverride
            self.computeTypeOverride = computeTypeOverride
            self.debugSessionEnabled = debugSessionEnabled
            self.encryptionKeyOverride = encryptionKeyOverride
            self.environmentTypeOverride = environmentTypeOverride
            self.environmentVariablesOverride = environmentVariablesOverride
            self.gitCloneDepthOverride = gitCloneDepthOverride
            self.gitSubmodulesConfigOverride = gitSubmodulesConfigOverride
            self.idempotencyToken = idempotencyToken
            self.imageOverride = imageOverride
            self.imagePullCredentialsTypeOverride = imagePullCredentialsTypeOverride
            self.insecureSslOverride = insecureSslOverride
            self.logsConfigOverride = logsConfigOverride
            self.privilegedModeOverride = privilegedModeOverride
            self.projectName = projectName
            self.queuedTimeoutInMinutesOverride = queuedTimeoutInMinutesOverride
            self.registryCredentialOverride = registryCredentialOverride
            self.reportBuildBatchStatusOverride = reportBuildBatchStatusOverride
            self.secondaryArtifactsOverride = secondaryArtifactsOverride
            self.secondarySourcesOverride = secondarySourcesOverride
            self.secondarySourcesVersionOverride = secondarySourcesVersionOverride
            self.serviceRoleOverride = serviceRoleOverride
            self.sourceAuthOverride = sourceAuthOverride
            self.sourceLocationOverride = sourceLocationOverride
            self.sourceTypeOverride = sourceTypeOverride
            self.sourceVersion = sourceVersion
        }

        public func validate(name: String) throws {
            try self.buildBatchConfigOverride?.validate(name: "\(name).buildBatchConfigOverride")
            try self.validate(self.buildTimeoutInMinutesOverride, name: "buildTimeoutInMinutesOverride", parent: name, max: 480)
            try self.validate(self.buildTimeoutInMinutesOverride, name: "buildTimeoutInMinutesOverride", parent: name, min: 5)
            try self.validate(self.encryptionKeyOverride, name: "encryptionKeyOverride", parent: name, min: 1)
            try self.environmentVariablesOverride?.forEach {
                try $0.validate(name: "\(name).environmentVariablesOverride[]")
            }
            try self.validate(self.gitCloneDepthOverride, name: "gitCloneDepthOverride", parent: name, min: 0)
            try self.validate(self.imageOverride, name: "imageOverride", parent: name, min: 1)
            try self.validate(self.projectName, name: "projectName", parent: name, min: 1)
            try self.validate(self.queuedTimeoutInMinutesOverride, name: "queuedTimeoutInMinutesOverride", parent: name, max: 480)
            try self.validate(self.queuedTimeoutInMinutesOverride, name: "queuedTimeoutInMinutesOverride", parent: name, min: 5)
            try self.registryCredentialOverride?.validate(name: "\(name).registryCredentialOverride")
            try self.validate(self.secondaryArtifactsOverride, name: "secondaryArtifactsOverride", parent: name, max: 12)
            try self.validate(self.secondaryArtifactsOverride, name: "secondaryArtifactsOverride", parent: name, min: 0)
            try self.secondarySourcesOverride?.forEach {
                try $0.validate(name: "\(name).secondarySourcesOverride[]")
            }
            try self.validate(self.secondarySourcesOverride, name: "secondarySourcesOverride", parent: name, max: 12)
            try self.validate(self.secondarySourcesOverride, name: "secondarySourcesOverride", parent: name, min: 0)
            try self.validate(self.secondarySourcesVersionOverride, name: "secondarySourcesVersionOverride", parent: name, max: 12)
            try self.validate(self.secondarySourcesVersionOverride, name: "secondarySourcesVersionOverride", parent: name, min: 0)
            try self.validate(self.serviceRoleOverride, name: "serviceRoleOverride", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case artifactsOverride
            case buildBatchConfigOverride
            case buildspecOverride
            case buildTimeoutInMinutesOverride
            case cacheOverride
            case certificateOverride
            case computeTypeOverride
            case debugSessionEnabled
            case encryptionKeyOverride
            case environmentTypeOverride
            case environmentVariablesOverride
            case gitCloneDepthOverride
            case gitSubmodulesConfigOverride
            case idempotencyToken
            case imageOverride
            case imagePullCredentialsTypeOverride
            case insecureSslOverride
            case logsConfigOverride
            case privilegedModeOverride
            case projectName
            case queuedTimeoutInMinutesOverride
            case registryCredentialOverride
            case reportBuildBatchStatusOverride
            case secondaryArtifactsOverride
            case secondarySourcesOverride
            case secondarySourcesVersionOverride
            case serviceRoleOverride
            case sourceAuthOverride
            case sourceLocationOverride
            case sourceTypeOverride
            case sourceVersion
        }
    }

    public struct StartBuildBatchOutput: AWSDecodableShape {
        /// A BuildBatch object that contains information about the batch build.
        public let buildBatch: BuildBatch?

        public init(buildBatch: BuildBatch? = nil) {
            self.buildBatch = buildBatch
        }

        private enum CodingKeys: String, CodingKey {
            case buildBatch
        }
    }

    public struct StartBuildInput: AWSEncodableShape {
        /// Build output artifact settings that override, for this build only, the latest ones already defined in the build project.
        public let artifactsOverride: ProjectArtifacts?
        /// A buildspec file declaration that overrides, for this build only, the latest one already defined in the build project.  If this value is set, it can be either an inline buildspec definition, the path to an alternate buildspec file relative to the value of the built-in CODEBUILD_SRC_DIR environment variable, or the path to an S3 bucket. The bucket must be in the same Region as the build project. Specify the buildspec file using its ARN (for example, arn:aws:s3:::my-codebuild-sample2/buildspec.yml). If this value is not provided or is set to an empty string, the source code must contain a buildspec file in its root directory. For more information, see Buildspec File Name and Storage Location.
        public let buildspecOverride: String?
        /// Contains information that defines how the build project reports the build status to the source provider. This option is only used when the source provider is GITHUB, GITHUB_ENTERPRISE, or BITBUCKET.
        public let buildStatusConfigOverride: BuildStatusConfig?
        /// A ProjectCache object specified for this build that overrides the one defined in the build project.
        public let cacheOverride: ProjectCache?
        /// The name of a certificate for this build that overrides the one specified in the build project.
        public let certificateOverride: String?
        /// The name of a compute type for this build that overrides the one specified in the build project.
        public let computeTypeOverride: ComputeType?
        /// Specifies if session debugging is enabled for this build. For more information, see Viewing a running build in Session Manager.
        public let debugSessionEnabled: Bool?
        /// The Key Management Service customer master key (CMK) that overrides the one specified in the build project. The CMK key encrypts the build output artifacts.   You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key.   You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format alias/&lt;alias-name&gt;).
        public let encryptionKeyOverride: String?
        /// A container type for this build that overrides the one specified in the build project.
        public let environmentTypeOverride: EnvironmentType?
        /// A set of environment variables that overrides, for this build only, the latest ones already defined in the build project.
        public let environmentVariablesOverride: [EnvironmentVariable]?
        /// The user-defined depth of history, with a minimum value of 0, that overrides, for this build only, any previous depth of history defined in the build project.
        public let gitCloneDepthOverride: Int?
        ///  Information about the Git submodules configuration for this build of an CodeBuild build project.
        public let gitSubmodulesConfigOverride: GitSubmodulesConfig?
        /// A unique, case sensitive identifier you provide to ensure the idempotency of the StartBuild request. The token is included in the StartBuild request and is valid for 5 minutes. If you repeat the StartBuild request with the same token, but change a parameter, CodeBuild returns a parameter mismatch error.
        public let idempotencyToken: String?
        /// The name of an image for this build that overrides the one specified in the build project.
        public let imageOverride: String?
        /// The type of credentials CodeBuild uses to pull images in your build. There are two valid values:   CODEBUILD  Specifies that CodeBuild uses its own credentials. This requires that you modify your ECR repository policy to trust CodeBuild's service principal.  SERVICE_ROLE  Specifies that CodeBuild uses your build project's service role.    When using a cross-account or private registry image, you must use SERVICE_ROLE credentials. When using an CodeBuild curated image, you must use CODEBUILD credentials.
        public let imagePullCredentialsTypeOverride: ImagePullCredentialsType?
        /// Enable this flag to override the insecure SSL setting that is specified in the build project. The insecure SSL setting determines whether to ignore SSL warnings while connecting to the project source code. This override applies only if the build's source is GitHub Enterprise.
        public let insecureSslOverride: Bool?
        ///  Log settings for this build that override the log settings defined in the build project.
        public let logsConfigOverride: LogsConfig?
        /// Enable this flag to override privileged mode in the build project.
        public let privilegedModeOverride: Bool?
        /// The name of the CodeBuild build project to start running a build.
        public let projectName: String
        ///  The number of minutes a build is allowed to be queued before it times out.
        public let queuedTimeoutInMinutesOverride: Int?
        ///  The credentials for access to a private registry.
        public let registryCredentialOverride: RegistryCredential?
        ///  Set to true to report to your source provider the status of a build's start and completion. If you use this option with a source provider other than GitHub, GitHub Enterprise, or Bitbucket, an invalidInputException is thrown.  To be able to report the build status to the source provider, the user associated with the source provider must have write access to the repo. If the user does not have write access, the build status cannot be updated. For more information, see Source provider access in the CodeBuild User Guide.   The status of a build triggered by a webhook is always reported to your source provider.
        public let reportBuildStatusOverride: Bool?
        ///  An array of ProjectArtifacts objects.
        public let secondaryArtifactsOverride: [ProjectArtifacts]?
        ///  An array of ProjectSource objects.
        public let secondarySourcesOverride: [ProjectSource]?
        ///  An array of ProjectSourceVersion objects that specify one or more versions of the project's secondary sources to be used for this build only.
        public let secondarySourcesVersionOverride: [ProjectSourceVersion]?
        /// The name of a service role for this build that overrides the one specified in the build project.
        public let serviceRoleOverride: String?
        /// An authorization type for this build that overrides the one defined in the build project. This override applies only if the build project's source is BitBucket or GitHub.
        public let sourceAuthOverride: SourceAuth?
        /// A location that overrides, for this build, the source location for the one defined in the build project.
        public let sourceLocationOverride: String?
        /// A source input type, for this build, that overrides the source input defined in the build project.
        public let sourceTypeOverride: SourceType?
        /// The version of the build input to be built, for this build only. If not specified, the latest version is used. If specified, the contents depends on the source provider:  CodeCommit  The commit ID, branch, or Git tag to use.  GitHub  The commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format pr/pull-request-ID (for example pr/25). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.  Bitbucket  The commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.  Amazon S3  The version ID of the object that represents the build input ZIP file to use.   If sourceVersion is specified at the project level, then this sourceVersion (at the build level) takes precedence.  For more information, see Source Version Sample with CodeBuild in the CodeBuild User Guide.
        public let sourceVersion: String?
        /// The number of build timeout minutes, from 5 to 480 (8 hours), that overrides, for this build only, the latest setting already defined in the build project.
        public let timeoutInMinutesOverride: Int?

        public init(artifactsOverride: ProjectArtifacts? = nil, buildspecOverride: String? = nil, buildStatusConfigOverride: BuildStatusConfig? = nil, cacheOverride: ProjectCache? = nil, certificateOverride: String? = nil, computeTypeOverride: ComputeType? = nil, debugSessionEnabled: Bool? = nil, encryptionKeyOverride: String? = nil, environmentTypeOverride: EnvironmentType? = nil, environmentVariablesOverride: [EnvironmentVariable]? = nil, gitCloneDepthOverride: Int? = nil, gitSubmodulesConfigOverride: GitSubmodulesConfig? = nil, idempotencyToken: String? = nil, imageOverride: String? = nil, imagePullCredentialsTypeOverride: ImagePullCredentialsType? = nil, insecureSslOverride: Bool? = nil, logsConfigOverride: LogsConfig? = nil, privilegedModeOverride: Bool? = nil, projectName: String, queuedTimeoutInMinutesOverride: Int? = nil, registryCredentialOverride: RegistryCredential? = nil, reportBuildStatusOverride: Bool? = nil, secondaryArtifactsOverride: [ProjectArtifacts]? = nil, secondarySourcesOverride: [ProjectSource]? = nil, secondarySourcesVersionOverride: [ProjectSourceVersion]? = nil, serviceRoleOverride: String? = nil, sourceAuthOverride: SourceAuth? = nil, sourceLocationOverride: String? = nil, sourceTypeOverride: SourceType? = nil, sourceVersion: String? = nil, timeoutInMinutesOverride: Int? = nil) {
            self.artifactsOverride = artifactsOverride
            self.buildspecOverride = buildspecOverride
            self.buildStatusConfigOverride = buildStatusConfigOverride
            self.cacheOverride = cacheOverride
            self.certificateOverride = certificateOverride
            self.computeTypeOverride = computeTypeOverride
            self.debugSessionEnabled = debugSessionEnabled
            self.encryptionKeyOverride = encryptionKeyOverride
            self.environmentTypeOverride = environmentTypeOverride
            self.environmentVariablesOverride = environmentVariablesOverride
            self.gitCloneDepthOverride = gitCloneDepthOverride
            self.gitSubmodulesConfigOverride = gitSubmodulesConfigOverride
            self.idempotencyToken = idempotencyToken
            self.imageOverride = imageOverride
            self.imagePullCredentialsTypeOverride = imagePullCredentialsTypeOverride
            self.insecureSslOverride = insecureSslOverride
            self.logsConfigOverride = logsConfigOverride
            self.privilegedModeOverride = privilegedModeOverride
            self.projectName = projectName
            self.queuedTimeoutInMinutesOverride = queuedTimeoutInMinutesOverride
            self.registryCredentialOverride = registryCredentialOverride
            self.reportBuildStatusOverride = reportBuildStatusOverride
            self.secondaryArtifactsOverride = secondaryArtifactsOverride
            self.secondarySourcesOverride = secondarySourcesOverride
            self.secondarySourcesVersionOverride = secondarySourcesVersionOverride
            self.serviceRoleOverride = serviceRoleOverride
            self.sourceAuthOverride = sourceAuthOverride
            self.sourceLocationOverride = sourceLocationOverride
            self.sourceTypeOverride = sourceTypeOverride
            self.sourceVersion = sourceVersion
            self.timeoutInMinutesOverride = timeoutInMinutesOverride
        }

        public func validate(name: String) throws {
            try self.validate(self.encryptionKeyOverride, name: "encryptionKeyOverride", parent: name, min: 1)
            try self.environmentVariablesOverride?.forEach {
                try $0.validate(name: "\(name).environmentVariablesOverride[]")
            }
            try self.validate(self.gitCloneDepthOverride, name: "gitCloneDepthOverride", parent: name, min: 0)
            try self.validate(self.imageOverride, name: "imageOverride", parent: name, min: 1)
            try self.validate(self.projectName, name: "projectName", parent: name, min: 1)
            try self.validate(self.queuedTimeoutInMinutesOverride, name: "queuedTimeoutInMinutesOverride", parent: name, max: 480)
            try self.validate(self.queuedTimeoutInMinutesOverride, name: "queuedTimeoutInMinutesOverride", parent: name, min: 5)
            try self.registryCredentialOverride?.validate(name: "\(name).registryCredentialOverride")
            try self.validate(self.secondaryArtifactsOverride, name: "secondaryArtifactsOverride", parent: name, max: 12)
            try self.validate(self.secondaryArtifactsOverride, name: "secondaryArtifactsOverride", parent: name, min: 0)
            try self.secondarySourcesOverride?.forEach {
                try $0.validate(name: "\(name).secondarySourcesOverride[]")
            }
            try self.validate(self.secondarySourcesOverride, name: "secondarySourcesOverride", parent: name, max: 12)
            try self.validate(self.secondarySourcesOverride, name: "secondarySourcesOverride", parent: name, min: 0)
            try self.validate(self.secondarySourcesVersionOverride, name: "secondarySourcesVersionOverride", parent: name, max: 12)
            try self.validate(self.secondarySourcesVersionOverride, name: "secondarySourcesVersionOverride", parent: name, min: 0)
            try self.validate(self.serviceRoleOverride, name: "serviceRoleOverride", parent: name, min: 1)
            try self.validate(self.timeoutInMinutesOverride, name: "timeoutInMinutesOverride", parent: name, max: 480)
            try self.validate(self.timeoutInMinutesOverride, name: "timeoutInMinutesOverride", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case artifactsOverride
            case buildspecOverride
            case buildStatusConfigOverride
            case cacheOverride
            case certificateOverride
            case computeTypeOverride
            case debugSessionEnabled
            case encryptionKeyOverride
            case environmentTypeOverride
            case environmentVariablesOverride
            case gitCloneDepthOverride
            case gitSubmodulesConfigOverride
            case idempotencyToken
            case imageOverride
            case imagePullCredentialsTypeOverride
            case insecureSslOverride
            case logsConfigOverride
            case privilegedModeOverride
            case projectName
            case queuedTimeoutInMinutesOverride
            case registryCredentialOverride
            case reportBuildStatusOverride
            case secondaryArtifactsOverride
            case secondarySourcesOverride
            case secondarySourcesVersionOverride
            case serviceRoleOverride
            case sourceAuthOverride
            case sourceLocationOverride
            case sourceTypeOverride
            case sourceVersion
            case timeoutInMinutesOverride
        }
    }

    public struct StartBuildOutput: AWSDecodableShape {
        /// Information about the build to be run.
        public let build: Build?

        public init(build: Build? = nil) {
            self.build = build
        }

        private enum CodingKeys: String, CodingKey {
            case build
        }
    }

    public struct StopBuildBatchInput: AWSEncodableShape {
        /// The identifier of the batch build to stop.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case id
        }
    }

    public struct StopBuildBatchOutput: AWSDecodableShape {
        public let buildBatch: BuildBatch?

        public init(buildBatch: BuildBatch? = nil) {
            self.buildBatch = buildBatch
        }

        private enum CodingKeys: String, CodingKey {
            case buildBatch
        }
    }

    public struct StopBuildInput: AWSEncodableShape {
        /// The ID of the build.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public func validate(name: String) throws {
            try self.validate(self.id, name: "id", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case id
        }
    }

    public struct StopBuildOutput: AWSDecodableShape {
        /// Information about the build.
        public let build: Build?

        public init(build: Build? = nil) {
            self.build = build
        }

        private enum CodingKeys: String, CodingKey {
            case build
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        /// The tag's key.
        public let key: String?
        /// The tag's value.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.key, name: "key", parent: name, max: 127)
            try self.validate(self.key, name: "key", parent: name, min: 1)
            try self.validate(self.key, name: "key", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=@+\\-]*)$")
            try self.validate(self.value, name: "value", parent: name, max: 255)
            try self.validate(self.value, name: "value", parent: name, min: 0)
            try self.validate(self.value, name: "value", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=@+\\-]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case key
            case value
        }
    }

    public struct TestCase: AWSDecodableShape {
        ///  The number of nanoseconds it took to run this test case.
        public let durationInNanoSeconds: Int64?
        ///  The date and time a test case expires. A test case expires 30 days after it is created. An expired test case is not available to view in CodeBuild.
        public let expired: Date?
        ///  A message associated with a test case. For example, an error message or stack trace.
        public let message: String?
        ///  The name of the test case.
        public let name: String?
        ///  A string that is applied to a series of related test cases. CodeBuild generates the prefix. The prefix depends on the framework used to generate the tests.
        public let prefix: String?
        ///  The ARN of the report to which the test case belongs.
        public let reportArn: String?
        ///  The status returned by the test case after it was run. Valid statuses are SUCCEEDED, FAILED, ERROR, SKIPPED, and UNKNOWN.
        public let status: String?
        ///  The path to the raw data file that contains the test result.
        public let testRawDataPath: String?

        public init(durationInNanoSeconds: Int64? = nil, expired: Date? = nil, message: String? = nil, name: String? = nil, prefix: String? = nil, reportArn: String? = nil, status: String? = nil, testRawDataPath: String? = nil) {
            self.durationInNanoSeconds = durationInNanoSeconds
            self.expired = expired
            self.message = message
            self.name = name
            self.prefix = prefix
            self.reportArn = reportArn
            self.status = status
            self.testRawDataPath = testRawDataPath
        }

        private enum CodingKeys: String, CodingKey {
            case durationInNanoSeconds
            case expired
            case message
            case name
            case prefix
            case reportArn
            case status
            case testRawDataPath
        }
    }

    public struct TestCaseFilter: AWSEncodableShape {
        /// A keyword that is used to filter on the name or the prefix of the test cases. Only test cases where the keyword is a substring of the name or the prefix will be returned.
        public let keyword: String?
        /// The status used to filter test cases. A TestCaseFilter can have one status. Valid values are:    SUCCEEDED     FAILED     ERROR     SKIPPED     UNKNOWN
        public let status: String?

        public init(keyword: String? = nil, status: String? = nil) {
            self.keyword = keyword
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case keyword
            case status
        }
    }

    public struct TestReportSummary: AWSDecodableShape {
        ///  The number of nanoseconds it took to run all of the test cases in this report.
        public let durationInNanoSeconds: Int64
        ///  A map that contains the number of each type of status returned by the test results in this TestReportSummary.
        public let statusCounts: [String: Int]
        ///  The number of test cases in this TestReportSummary. The total includes truncated test cases.
        public let total: Int

        public init(durationInNanoSeconds: Int64, statusCounts: [String: Int], total: Int) {
            self.durationInNanoSeconds = durationInNanoSeconds
            self.statusCounts = statusCounts
            self.total = total
        }

        private enum CodingKeys: String, CodingKey {
            case durationInNanoSeconds
            case statusCounts
            case total
        }
    }

    public struct UpdateProjectInput: AWSEncodableShape {
        /// Information to be changed about the build output artifacts for the build project.
        public let artifacts: ProjectArtifacts?
        /// Set this to true to generate a publicly accessible URL for your project's build badge.
        public let badgeEnabled: Bool?
        public let buildBatchConfig: ProjectBuildBatchConfig?
        /// Stores recently used information so that it can be quickly accessed at a later time.
        public let cache: ProjectCache?
        /// The maximum number of concurrent builds that are allowed for this project. New builds are only started if the current number of builds is less than or equal to this limit. If the current build count meets this limit, new builds are throttled and are not run. To remove this limit, set this value to -1.
        public let concurrentBuildLimit: Int?
        /// A new or replacement description of the build project.
        public let description: String?
        /// The Key Management Service customer master key (CMK) to be used for encrypting the build output artifacts.   You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key.   You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format alias/&lt;alias-name&gt;).
        public let encryptionKey: String?
        /// Information to be changed about the build environment for the build project.
        public let environment: ProjectEnvironment?
        ///  An array of ProjectFileSystemLocation objects for a CodeBuild build project. A ProjectFileSystemLocation object specifies the identifier, location, mountOptions, mountPoint, and type of a file system created using Amazon Elastic File System.
        public let fileSystemLocations: [ProjectFileSystemLocation]?
        ///  Information about logs for the build project. A project can create logs in CloudWatch Logs, logs in an S3 bucket, or both.
        public let logsConfig: LogsConfig?
        /// The name of the build project.  You cannot change a build project's name.
        public let name: String
        ///  The number of minutes a build is allowed to be queued before it times out.
        public let queuedTimeoutInMinutes: Int?
        ///  An array of ProjectSource objects.
        public let secondaryArtifacts: [ProjectArtifacts]?
        ///  An array of ProjectSource objects.
        public let secondarySources: [ProjectSource]?
        ///  An array of ProjectSourceVersion objects. If secondarySourceVersions is specified at the build level, then they take over these secondarySourceVersions (at the project level).
        public let secondarySourceVersions: [ProjectSourceVersion]?
        /// The replacement ARN of the Identity and Access Management role that enables CodeBuild to interact with dependent Amazon Web Services services on behalf of the Amazon Web Services account.
        public let serviceRole: String?
        /// Information to be changed about the build input source code for the build project.
        public let source: ProjectSource?
        ///  A version of the build input to be built for this project. If not specified, the latest version is used. If specified, it must be one of:    For CodeCommit: the commit ID, branch, or Git tag to use.   For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format pr/pull-request-ID (for example pr/25). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.   For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.   For Amazon S3: the version ID of the object that represents the build input ZIP file to use.    If sourceVersion is specified at the build level, then that version takes precedence over this sourceVersion (at the project level).   For more information, see Source Version Sample with CodeBuild in the CodeBuild User Guide.
        public let sourceVersion: String?
        /// An updated list of tag key and value pairs associated with this build project. These tags are available for use by Amazon Web Services services that support CodeBuild build project tags.
        public let tags: [Tag]?
        /// The replacement value in minutes, from 5 to 480 (8 hours), for CodeBuild to wait before timing out any related build that did not get marked as completed.
        public let timeoutInMinutes: Int?
        /// VpcConfig enables CodeBuild to access resources in an Amazon VPC.
        public let vpcConfig: VpcConfig?

        public init(artifacts: ProjectArtifacts? = nil, badgeEnabled: Bool? = nil, buildBatchConfig: ProjectBuildBatchConfig? = nil, cache: ProjectCache? = nil, concurrentBuildLimit: Int? = nil, description: String? = nil, encryptionKey: String? = nil, environment: ProjectEnvironment? = nil, fileSystemLocations: [ProjectFileSystemLocation]? = nil, logsConfig: LogsConfig? = nil, name: String, queuedTimeoutInMinutes: Int? = nil, secondaryArtifacts: [ProjectArtifacts]? = nil, secondarySources: [ProjectSource]? = nil, secondarySourceVersions: [ProjectSourceVersion]? = nil, serviceRole: String? = nil, source: ProjectSource? = nil, sourceVersion: String? = nil, tags: [Tag]? = nil, timeoutInMinutes: Int? = nil, vpcConfig: VpcConfig? = nil) {
            self.artifacts = artifacts
            self.badgeEnabled = badgeEnabled
            self.buildBatchConfig = buildBatchConfig
            self.cache = cache
            self.concurrentBuildLimit = concurrentBuildLimit
            self.description = description
            self.encryptionKey = encryptionKey
            self.environment = environment
            self.fileSystemLocations = fileSystemLocations
            self.logsConfig = logsConfig
            self.name = name
            self.queuedTimeoutInMinutes = queuedTimeoutInMinutes
            self.secondaryArtifacts = secondaryArtifacts
            self.secondarySources = secondarySources
            self.secondarySourceVersions = secondarySourceVersions
            self.serviceRole = serviceRole
            self.source = source
            self.sourceVersion = sourceVersion
            self.tags = tags
            self.timeoutInMinutes = timeoutInMinutes
            self.vpcConfig = vpcConfig
        }

        public func validate(name: String) throws {
            try self.buildBatchConfig?.validate(name: "\(name).buildBatchConfig")
            try self.validate(self.description, name: "description", parent: name, max: 255)
            try self.validate(self.description, name: "description", parent: name, min: 0)
            try self.validate(self.encryptionKey, name: "encryptionKey", parent: name, min: 1)
            try self.environment?.validate(name: "\(name).environment")
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.queuedTimeoutInMinutes, name: "queuedTimeoutInMinutes", parent: name, max: 480)
            try self.validate(self.queuedTimeoutInMinutes, name: "queuedTimeoutInMinutes", parent: name, min: 5)
            try self.validate(self.secondaryArtifacts, name: "secondaryArtifacts", parent: name, max: 12)
            try self.validate(self.secondaryArtifacts, name: "secondaryArtifacts", parent: name, min: 0)
            try self.secondarySources?.forEach {
                try $0.validate(name: "\(name).secondarySources[]")
            }
            try self.validate(self.secondarySources, name: "secondarySources", parent: name, max: 12)
            try self.validate(self.secondarySources, name: "secondarySources", parent: name, min: 0)
            try self.validate(self.secondarySourceVersions, name: "secondarySourceVersions", parent: name, max: 12)
            try self.validate(self.secondarySourceVersions, name: "secondarySourceVersions", parent: name, min: 0)
            try self.validate(self.serviceRole, name: "serviceRole", parent: name, min: 1)
            try self.source?.validate(name: "\(name).source")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
            try self.validate(self.timeoutInMinutes, name: "timeoutInMinutes", parent: name, max: 480)
            try self.validate(self.timeoutInMinutes, name: "timeoutInMinutes", parent: name, min: 5)
            try self.vpcConfig?.validate(name: "\(name).vpcConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case artifacts
            case badgeEnabled
            case buildBatchConfig
            case cache
            case concurrentBuildLimit
            case description
            case encryptionKey
            case environment
            case fileSystemLocations
            case logsConfig
            case name
            case queuedTimeoutInMinutes
            case secondaryArtifacts
            case secondarySources
            case secondarySourceVersions
            case serviceRole
            case source
            case sourceVersion
            case tags
            case timeoutInMinutes
            case vpcConfig
        }
    }

    public struct UpdateProjectOutput: AWSDecodableShape {
        /// Information about the build project that was changed.
        public let project: Project?

        public init(project: Project? = nil) {
            self.project = project
        }

        private enum CodingKeys: String, CodingKey {
            case project
        }
    }

    public struct UpdateReportGroupInput: AWSEncodableShape {
        ///  The ARN of the report group to update.
        public let arn: String
        ///  Used to specify an updated export type. Valid values are:     S3: The report results are exported to an S3 bucket.     NO_EXPORT: The report results are not exported.
        public let exportConfig: ReportExportConfig?
        ///  An updated list of tag key and value pairs associated with this report group.  These tags are available for use by Amazon Web Services services that support CodeBuild report group tags.
        public let tags: [Tag]?

        public init(arn: String, exportConfig: ReportExportConfig? = nil, tags: [Tag]? = nil) {
            self.arn = arn
            self.exportConfig = exportConfig
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.arn, name: "arn", parent: name, min: 1)
            try self.exportConfig?.validate(name: "\(name).exportConfig")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.validate(self.tags, name: "tags", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case exportConfig
            case tags
        }
    }

    public struct UpdateReportGroupOutput: AWSDecodableShape {
        ///  Information about the updated report group.
        public let reportGroup: ReportGroup?

        public init(reportGroup: ReportGroup? = nil) {
            self.reportGroup = reportGroup
        }

        private enum CodingKeys: String, CodingKey {
            case reportGroup
        }
    }

    public struct UpdateWebhookInput: AWSEncodableShape {
        /// A regular expression used to determine which repository branches are built when a webhook is triggered. If the name of a branch matches the regular expression, then it is built. If branchFilter is empty, then all branches are built.   It is recommended that you use filterGroups instead of branchFilter.
        public let branchFilter: String?
        /// Specifies the type of build this webhook will trigger.
        public let buildType: WebhookBuildType?
        ///  An array of arrays of WebhookFilter objects used to determine if a webhook event can trigger a build. A filter group must contain at least one EVENT WebhookFilter.
        public let filterGroups: [[WebhookFilter]]?
        /// The name of the CodeBuild project.
        public let projectName: String
        ///  A boolean value that specifies whether the associated GitHub repository's secret token should be updated. If you use Bitbucket for your repository, rotateSecret is ignored.
        public let rotateSecret: Bool?

        public init(branchFilter: String? = nil, buildType: WebhookBuildType? = nil, filterGroups: [[WebhookFilter]]? = nil, projectName: String, rotateSecret: Bool? = nil) {
            self.branchFilter = branchFilter
            self.buildType = buildType
            self.filterGroups = filterGroups
            self.projectName = projectName
            self.rotateSecret = rotateSecret
        }

        public func validate(name: String) throws {
            try self.validate(self.projectName, name: "projectName", parent: name, max: 255)
            try self.validate(self.projectName, name: "projectName", parent: name, min: 2)
            try self.validate(self.projectName, name: "projectName", parent: name, pattern: "[A-Za-z0-9][A-Za-z0-9\\-_]{1,254}")
        }

        private enum CodingKeys: String, CodingKey {
            case branchFilter
            case buildType
            case filterGroups
            case projectName
            case rotateSecret
        }
    }

    public struct UpdateWebhookOutput: AWSDecodableShape {
        ///  Information about a repository's webhook that is associated with a project in CodeBuild.
        public let webhook: Webhook?

        public init(webhook: Webhook? = nil) {
            self.webhook = webhook
        }

        private enum CodingKeys: String, CodingKey {
            case webhook
        }
    }

    public struct VpcConfig: AWSEncodableShape & AWSDecodableShape {
        /// A list of one or more security groups IDs in your Amazon VPC.
        public let securityGroupIds: [String]?
        /// A list of one or more subnet IDs in your Amazon VPC.
        public let subnets: [String]?
        /// The ID of the Amazon VPC.
        public let vpcId: String?

        public init(securityGroupIds: [String]? = nil, subnets: [String]? = nil, vpcId: String? = nil) {
            self.securityGroupIds = securityGroupIds
            self.subnets = subnets
            self.vpcId = vpcId
        }

        public func validate(name: String) throws {
            try self.securityGroupIds?.forEach {
                try validate($0, name: "securityGroupIds[]", parent: name, min: 1)
            }
            try self.validate(self.securityGroupIds, name: "securityGroupIds", parent: name, max: 5)
            try self.subnets?.forEach {
                try validate($0, name: "subnets[]", parent: name, min: 1)
            }
            try self.validate(self.subnets, name: "subnets", parent: name, max: 16)
            try self.validate(self.vpcId, name: "vpcId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupIds
            case subnets
            case vpcId
        }
    }

    public struct Webhook: AWSDecodableShape {
        /// A regular expression used to determine which repository branches are built when a webhook is triggered. If the name of a branch matches the regular expression, then it is built. If branchFilter is empty, then all branches are built.  It is recommended that you use filterGroups instead of branchFilter.
        public let branchFilter: String?
        /// Specifies the type of build this webhook will trigger.
        public let buildType: WebhookBuildType?
        /// An array of arrays of WebhookFilter objects used to determine which webhooks are triggered. At least one WebhookFilter in the array must specify EVENT as its type.  For a build to be triggered, at least one filter group in the filterGroups array must pass. For a filter group to pass, each of its filters must pass.
        public let filterGroups: [[WebhookFilter]]?
        /// A timestamp that indicates the last time a repository's secret token was modified.
        public let lastModifiedSecret: Date?
        /// The CodeBuild endpoint where webhook events are sent.
        public let payloadUrl: String?
        /// The secret token of the associated repository.   A Bitbucket webhook does not support secret.
        public let secret: String?
        /// The URL to the webhook.
        public let url: String?

        public init(branchFilter: String? = nil, buildType: WebhookBuildType? = nil, filterGroups: [[WebhookFilter]]? = nil, lastModifiedSecret: Date? = nil, payloadUrl: String? = nil, secret: String? = nil, url: String? = nil) {
            self.branchFilter = branchFilter
            self.buildType = buildType
            self.filterGroups = filterGroups
            self.lastModifiedSecret = lastModifiedSecret
            self.payloadUrl = payloadUrl
            self.secret = secret
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case branchFilter
            case buildType
            case filterGroups
            case lastModifiedSecret
            case payloadUrl
            case secret
            case url
        }
    }

    public struct WebhookFilter: AWSEncodableShape & AWSDecodableShape {
        ///  Used to indicate that the pattern determines which webhook events do not trigger a build. If true, then a webhook event that does not match the pattern triggers a build. If false, then a webhook event that matches the pattern triggers a build.
        public let excludeMatchedPattern: Bool?
        ///  For a WebHookFilter that uses EVENT type, a comma-separated string that specifies one or more events. For example, the webhook filter PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED allows all push, pull request created, and pull request updated events to trigger a build.   For a WebHookFilter that uses any of the other filter types, a regular expression pattern. For example, a WebHookFilter that uses HEAD_REF for its type and the pattern ^refs/heads/ triggers a build when the head reference is a branch with a reference name refs/heads/branch-name.
        public let pattern: String
        ///  The type of webhook filter. There are six webhook filter types: EVENT, ACTOR_ACCOUNT_ID, HEAD_REF, BASE_REF, FILE_PATH, and COMMIT_MESSAGE.    EVENT    A webhook event triggers a build when the provided pattern matches one of five event types: PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED, PULL_REQUEST_REOPENED, and PULL_REQUEST_MERGED. The EVENT patterns are specified as a comma-separated string. For example, PUSH, PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED filters all push, pull request created, and pull request updated events.    The PULL_REQUEST_REOPENED works with GitHub and GitHub Enterprise only.     ACTOR_ACCOUNT_ID    A webhook event triggers a build when a GitHub, GitHub Enterprise, or Bitbucket account ID matches the regular expression pattern.    HEAD_REF    A webhook event triggers a build when the head reference matches the regular expression pattern. For example, refs/heads/branch-name and refs/tags/tag-name.   Works with GitHub and GitHub Enterprise push, GitHub and GitHub Enterprise pull request, Bitbucket push, and Bitbucket pull request events.    BASE_REF    A webhook event triggers a build when the base reference matches the regular expression pattern. For example, refs/heads/branch-name.    Works with pull request events only.     FILE_PATH    A webhook triggers a build when the path of a changed file matches the regular expression pattern.    Works with GitHub and Bitbucket events push and pull requests events. Also works with GitHub Enterprise push events, but does not work with GitHub Enterprise pull request events.    COMMIT_MESSAGE  A webhook triggers a build when the head commit message matches the regular expression pattern.   Works with GitHub and Bitbucket events push and pull requests events. Also works with GitHub Enterprise push events, but does not work with GitHub Enterprise pull request events.
        public let type: WebhookFilterType

        public init(excludeMatchedPattern: Bool? = nil, pattern: String, type: WebhookFilterType) {
            self.excludeMatchedPattern = excludeMatchedPattern
            self.pattern = pattern
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case excludeMatchedPattern
            case pattern
            case type
        }
    }
}
