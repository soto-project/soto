//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if compiler(>=5.5) && canImport(_Concurrency)

import SotoCore

// MARK: Paginators

@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)
extension CodeBuild {
    ///  Retrieves one or more code coverage reports.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeCodeCoveragesPaginator(
        _ input: DescribeCodeCoveragesInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeCodeCoveragesInput, DescribeCodeCoveragesOutput> {
        return .init(
            input: input,
            command: describeCodeCoverages,
            inputKey: \DescribeCodeCoveragesInput.nextToken,
            outputKey: \DescribeCodeCoveragesOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///   Returns a list of details about test cases for a report.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func describeTestCasesPaginator(
        _ input: DescribeTestCasesInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<DescribeTestCasesInput, DescribeTestCasesOutput> {
        return .init(
            input: input,
            command: describeTestCases,
            inputKey: \DescribeTestCasesInput.nextToken,
            outputKey: \DescribeTestCasesOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Retrieves the identifiers of your build batches in the current region.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listBuildBatchesPaginator(
        _ input: ListBuildBatchesInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListBuildBatchesInput, ListBuildBatchesOutput> {
        return .init(
            input: input,
            command: listBuildBatches,
            inputKey: \ListBuildBatchesInput.nextToken,
            outputKey: \ListBuildBatchesOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Retrieves the identifiers of the build batches for a specific project.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listBuildBatchesForProjectPaginator(
        _ input: ListBuildBatchesForProjectInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListBuildBatchesForProjectInput, ListBuildBatchesForProjectOutput> {
        return .init(
            input: input,
            command: listBuildBatchesForProject,
            inputKey: \ListBuildBatchesForProjectInput.nextToken,
            outputKey: \ListBuildBatchesForProjectOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Gets a list of build IDs, with each build ID representing a single build.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listBuildsPaginator(
        _ input: ListBuildsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListBuildsInput, ListBuildsOutput> {
        return .init(
            input: input,
            command: listBuilds,
            inputKey: \ListBuildsInput.nextToken,
            outputKey: \ListBuildsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Gets a list of build identifiers for the specified build project, with each build identifier representing a single build.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listBuildsForProjectPaginator(
        _ input: ListBuildsForProjectInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListBuildsForProjectInput, ListBuildsForProjectOutput> {
        return .init(
            input: input,
            command: listBuildsForProject,
            inputKey: \ListBuildsForProjectInput.nextToken,
            outputKey: \ListBuildsForProjectOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Gets a list of build project names, with each build project name representing a single build project.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listProjectsPaginator(
        _ input: ListProjectsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListProjectsInput, ListProjectsOutput> {
        return .init(
            input: input,
            command: listProjects,
            inputKey: \ListProjectsInput.nextToken,
            outputKey: \ListProjectsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///   Gets a list ARNs for the report groups in the current Amazon Web Services account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listReportGroupsPaginator(
        _ input: ListReportGroupsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListReportGroupsInput, ListReportGroupsOutput> {
        return .init(
            input: input,
            command: listReportGroups,
            inputKey: \ListReportGroupsInput.nextToken,
            outputKey: \ListReportGroupsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///   Returns a list of ARNs for the reports in the current Amazon Web Services account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listReportsPaginator(
        _ input: ListReportsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListReportsInput, ListReportsOutput> {
        return .init(
            input: input,
            command: listReports,
            inputKey: \ListReportsInput.nextToken,
            outputKey: \ListReportsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///   Returns a list of ARNs for the reports that belong to a ReportGroup.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listReportsForReportGroupPaginator(
        _ input: ListReportsForReportGroupInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListReportsForReportGroupInput, ListReportsForReportGroupOutput> {
        return .init(
            input: input,
            command: listReportsForReportGroup,
            inputKey: \ListReportsForReportGroupInput.nextToken,
            outputKey: \ListReportsForReportGroupOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///   Gets a list of projects that are shared with other Amazon Web Services accounts or users.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listSharedProjectsPaginator(
        _ input: ListSharedProjectsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListSharedProjectsInput, ListSharedProjectsOutput> {
        return .init(
            input: input,
            command: listSharedProjects,
            inputKey: \ListSharedProjectsInput.nextToken,
            outputKey: \ListSharedProjectsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///   Gets a list of report groups that are shared with other Amazon Web Services accounts or users.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listSharedReportGroupsPaginator(
        _ input: ListSharedReportGroupsInput,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListSharedReportGroupsInput, ListSharedReportGroupsOutput> {
        return .init(
            input: input,
            command: listSharedReportGroups,
            inputKey: \ListSharedReportGroupsInput.nextToken,
            outputKey: \ListSharedReportGroupsOutput.nextToken,
            logger: logger,
            on: eventLoop
        )
    }
}

#endif // compiler(>=5.5) && canImport(_Concurrency)
