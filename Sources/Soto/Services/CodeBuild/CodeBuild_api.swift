//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS CodeBuild service.
///
/// CodeBuild CodeBuild is a fully managed build service in the cloud. CodeBuild compiles your source code, runs unit tests, and produces artifacts that are ready to deploy. CodeBuild eliminates the need to provision, manage, and scale your own build servers. It provides prepackaged build environments for the most popular programming languages and build tools, such as Apache Maven, Gradle, and more. You can also fully customize build environments in CodeBuild to use your own build tools. CodeBuild scales automatically to meet peak build requests. You pay only for the build time you consume. For more information about CodeBuild, see the  CodeBuild User Guide.
public struct CodeBuild: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the CodeBuild client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "CodeBuild_20161006",
            serviceName: "CodeBuild",
            serviceIdentifier: "codebuild",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2016-10-06",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: CodeBuildErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "us-east-1": "codebuild-fips.us-east-1.amazonaws.com",
            "us-east-2": "codebuild-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "codebuild-fips.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "codebuild-fips.us-gov-west-1.amazonaws.com",
            "us-west-1": "codebuild-fips.us-west-1.amazonaws.com",
            "us-west-2": "codebuild-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Deletes one or more builds.
    @Sendable
    public func batchDeleteBuilds(_ input: BatchDeleteBuildsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchDeleteBuildsOutput {
        return try await self.client.execute(
            operation: "BatchDeleteBuilds", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves information about one or more batch builds.
    @Sendable
    public func batchGetBuildBatches(_ input: BatchGetBuildBatchesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchGetBuildBatchesOutput {
        return try await self.client.execute(
            operation: "BatchGetBuildBatches", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about one or more builds.
    @Sendable
    public func batchGetBuilds(_ input: BatchGetBuildsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchGetBuildsOutput {
        return try await self.client.execute(
            operation: "BatchGetBuilds", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about one or more compute fleets.
    @Sendable
    public func batchGetFleets(_ input: BatchGetFleetsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchGetFleetsOutput {
        return try await self.client.execute(
            operation: "BatchGetFleets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about one or more build projects.
    @Sendable
    public func batchGetProjects(_ input: BatchGetProjectsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchGetProjectsOutput {
        return try await self.client.execute(
            operation: "BatchGetProjects", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns an array of report groups.
    @Sendable
    public func batchGetReportGroups(_ input: BatchGetReportGroupsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchGetReportGroupsOutput {
        return try await self.client.execute(
            operation: "BatchGetReportGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns an array of reports.
    @Sendable
    public func batchGetReports(_ input: BatchGetReportsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchGetReportsOutput {
        return try await self.client.execute(
            operation: "BatchGetReports", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a compute fleet.
    @Sendable
    public func createFleet(_ input: CreateFleetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFleetOutput {
        return try await self.client.execute(
            operation: "CreateFleet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a build project.
    @Sendable
    public func createProject(_ input: CreateProjectInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateProjectOutput {
        return try await self.client.execute(
            operation: "CreateProject", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Creates a report group. A report group contains a collection of reports.
    @Sendable
    public func createReportGroup(_ input: CreateReportGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateReportGroupOutput {
        return try await self.client.execute(
            operation: "CreateReportGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// For an existing CodeBuild build project that has its source code stored in a GitHub or Bitbucket repository, enables CodeBuild to start rebuilding the source code every time a code change is pushed to the repository.  If you enable webhooks for an CodeBuild project, and the project is used as a build step in CodePipeline, then two identical builds are created for each commit. One build is triggered through webhooks, and one through CodePipeline. Because billing is on a per-build basis, you are billed for both builds. Therefore, if you are using CodePipeline, we recommend that you disable webhooks in CodeBuild. In the CodeBuild console, clear the Webhook box. For more information, see step 5 in Change a Build Project's Settings.
    @Sendable
    public func createWebhook(_ input: CreateWebhookInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateWebhookOutput {
        return try await self.client.execute(
            operation: "CreateWebhook", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a batch build.
    @Sendable
    public func deleteBuildBatch(_ input: DeleteBuildBatchInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteBuildBatchOutput {
        return try await self.client.execute(
            operation: "DeleteBuildBatch", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a compute fleet. When you delete a compute fleet, its builds are not deleted.
    @Sendable
    public func deleteFleet(_ input: DeleteFleetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteFleetOutput {
        return try await self.client.execute(
            operation: "DeleteFleet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Deletes a build project. When you delete a project, its builds are not deleted.
    @Sendable
    public func deleteProject(_ input: DeleteProjectInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteProjectOutput {
        return try await self.client.execute(
            operation: "DeleteProject", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Deletes a report.
    @Sendable
    public func deleteReport(_ input: DeleteReportInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteReportOutput {
        return try await self.client.execute(
            operation: "DeleteReport", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a report group. Before you delete a report group, you must delete its reports.
    @Sendable
    public func deleteReportGroup(_ input: DeleteReportGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteReportGroupOutput {
        return try await self.client.execute(
            operation: "DeleteReportGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Deletes a resource policy that is identified by its resource ARN.
    @Sendable
    public func deleteResourcePolicy(_ input: DeleteResourcePolicyInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteResourcePolicyOutput {
        return try await self.client.execute(
            operation: "DeleteResourcePolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Deletes a set of GitHub, GitHub Enterprise, or Bitbucket source credentials.
    @Sendable
    public func deleteSourceCredentials(_ input: DeleteSourceCredentialsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteSourceCredentialsOutput {
        return try await self.client.execute(
            operation: "DeleteSourceCredentials", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// For an existing CodeBuild build project that has its source code stored in a GitHub or Bitbucket repository, stops CodeBuild from rebuilding the source code every time a code change is pushed to the repository.
    @Sendable
    public func deleteWebhook(_ input: DeleteWebhookInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteWebhookOutput {
        return try await self.client.execute(
            operation: "DeleteWebhook", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves one or more code coverage reports.
    @Sendable
    public func describeCodeCoverages(_ input: DescribeCodeCoveragesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeCodeCoveragesOutput {
        return try await self.client.execute(
            operation: "DescribeCodeCoverages", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns a list of details about test cases for a report.
    @Sendable
    public func describeTestCases(_ input: DescribeTestCasesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTestCasesOutput {
        return try await self.client.execute(
            operation: "DescribeTestCases", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Analyzes and accumulates test report values for the specified test reports.
    @Sendable
    public func getReportGroupTrend(_ input: GetReportGroupTrendInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetReportGroupTrendOutput {
        return try await self.client.execute(
            operation: "GetReportGroupTrend", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Gets a resource policy that is identified by its resource ARN.
    @Sendable
    public func getResourcePolicy(_ input: GetResourcePolicyInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetResourcePolicyOutput {
        return try await self.client.execute(
            operation: "GetResourcePolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Imports the source repository credentials for an CodeBuild project that has its source code stored in a GitHub, GitHub Enterprise, or Bitbucket repository.
    @Sendable
    public func importSourceCredentials(_ input: ImportSourceCredentialsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ImportSourceCredentialsOutput {
        return try await self.client.execute(
            operation: "ImportSourceCredentials", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Resets the cache for a project.
    @Sendable
    public func invalidateProjectCache(_ input: InvalidateProjectCacheInput, logger: Logger = AWSClient.loggingDisabled) async throws -> InvalidateProjectCacheOutput {
        return try await self.client.execute(
            operation: "InvalidateProjectCache", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the identifiers of your build batches in the current region.
    @Sendable
    public func listBuildBatches(_ input: ListBuildBatchesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListBuildBatchesOutput {
        return try await self.client.execute(
            operation: "ListBuildBatches", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the identifiers of the build batches for a specific project.
    @Sendable
    public func listBuildBatchesForProject(_ input: ListBuildBatchesForProjectInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListBuildBatchesForProjectOutput {
        return try await self.client.execute(
            operation: "ListBuildBatchesForProject", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of build IDs, with each build ID representing a single build.
    @Sendable
    public func listBuilds(_ input: ListBuildsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListBuildsOutput {
        return try await self.client.execute(
            operation: "ListBuilds", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of build identifiers for the specified build project, with each build identifier representing a single build.
    @Sendable
    public func listBuildsForProject(_ input: ListBuildsForProjectInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListBuildsForProjectOutput {
        return try await self.client.execute(
            operation: "ListBuildsForProject", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about Docker images that are managed by CodeBuild.
    @Sendable
    public func listCuratedEnvironmentImages(_ input: ListCuratedEnvironmentImagesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCuratedEnvironmentImagesOutput {
        return try await self.client.execute(
            operation: "ListCuratedEnvironmentImages", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of compute fleet names with each compute fleet name representing a single compute fleet.
    @Sendable
    public func listFleets(_ input: ListFleetsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFleetsOutput {
        return try await self.client.execute(
            operation: "ListFleets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a list of build project names, with each build project name representing a single build project.
    @Sendable
    public func listProjects(_ input: ListProjectsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProjectsOutput {
        return try await self.client.execute(
            operation: "ListProjects", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Gets a list ARNs for the report groups in the current Amazon Web Services account.
    @Sendable
    public func listReportGroups(_ input: ListReportGroupsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListReportGroupsOutput {
        return try await self.client.execute(
            operation: "ListReportGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns a list of ARNs for the reports in the current Amazon Web Services account.
    @Sendable
    public func listReports(_ input: ListReportsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListReportsOutput {
        return try await self.client.execute(
            operation: "ListReports", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns a list of ARNs for the reports that belong to a ReportGroup.
    @Sendable
    public func listReportsForReportGroup(_ input: ListReportsForReportGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListReportsForReportGroupOutput {
        return try await self.client.execute(
            operation: "ListReportsForReportGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Gets a list of projects that are shared with other Amazon Web Services accounts or users.
    @Sendable
    public func listSharedProjects(_ input: ListSharedProjectsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSharedProjectsOutput {
        return try await self.client.execute(
            operation: "ListSharedProjects", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Gets a list of report groups that are shared with other Amazon Web Services accounts or users.
    @Sendable
    public func listSharedReportGroups(_ input: ListSharedReportGroupsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSharedReportGroupsOutput {
        return try await self.client.execute(
            operation: "ListSharedReportGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Returns a list of SourceCredentialsInfo objects.
    @Sendable
    public func listSourceCredentials(_ input: ListSourceCredentialsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSourceCredentialsOutput {
        return try await self.client.execute(
            operation: "ListSourceCredentials", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Stores a resource policy for the ARN of a Project or ReportGroup object.
    @Sendable
    public func putResourcePolicy(_ input: PutResourcePolicyInput, logger: Logger = AWSClient.loggingDisabled) async throws -> PutResourcePolicyOutput {
        return try await self.client.execute(
            operation: "PutResourcePolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Restarts a build.
    @Sendable
    public func retryBuild(_ input: RetryBuildInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RetryBuildOutput {
        return try await self.client.execute(
            operation: "RetryBuild", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Restarts a failed batch build. Only batch builds that have failed can be retried.
    @Sendable
    public func retryBuildBatch(_ input: RetryBuildBatchInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RetryBuildBatchOutput {
        return try await self.client.execute(
            operation: "RetryBuildBatch", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts running a build with the settings defined in the project. These setting include: how to run a build,  where to get the source code, which build environment to use, which build commands to run, and where to store the build output. You can also start a build run by overriding some of the build settings in the project. The overrides only apply for that  specific start build request. The settings in the project are unaltered.
    @Sendable
    public func startBuild(_ input: StartBuildInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StartBuildOutput {
        return try await self.client.execute(
            operation: "StartBuild", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts a batch build for a project.
    @Sendable
    public func startBuildBatch(_ input: StartBuildBatchInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StartBuildBatchOutput {
        return try await self.client.execute(
            operation: "StartBuildBatch", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Attempts to stop running a build.
    @Sendable
    public func stopBuild(_ input: StopBuildInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StopBuildOutput {
        return try await self.client.execute(
            operation: "StopBuild", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stops a running batch build.
    @Sendable
    public func stopBuildBatch(_ input: StopBuildBatchInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StopBuildBatchOutput {
        return try await self.client.execute(
            operation: "StopBuildBatch", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a compute fleet.
    @Sendable
    public func updateFleet(_ input: UpdateFleetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateFleetOutput {
        return try await self.client.execute(
            operation: "UpdateFleet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Changes the settings of a build project.
    @Sendable
    public func updateProject(_ input: UpdateProjectInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateProjectOutput {
        return try await self.client.execute(
            operation: "UpdateProject", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Changes the public visibility for a project. The project's build results, logs, and artifacts are available to the general public.  For more information, see Public build projects in the CodeBuild User Guide.  The following should be kept in mind when making your projects public:   All of a project's build results, logs, and artifacts, including builds that were run when the project was private, are available to the general public.   All build logs and artifacts are available to the public. Environment variables, source code, and other sensitive information may have been output to the build logs and artifacts. You must be careful about what information is output to the build logs. Some best practice are:   Do not store sensitive values in environment variables. We recommend that you use an Amazon EC2 Systems Manager Parameter Store or Secrets Manager to store sensitive values.   Follow Best practices for using webhooks in the CodeBuild User Guide to limit which entities can trigger a build, and do not store the buildspec in the project itself, to ensure that your webhooks are as secure as possible.     A malicious user can use public builds to distribute malicious artifacts. We recommend that you review all pull requests to verify that the pull request is a legitimate change. We also recommend that you validate any artifacts with their checksums to make sure that the correct artifacts are being downloaded.
    @Sendable
    public func updateProjectVisibility(_ input: UpdateProjectVisibilityInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateProjectVisibilityOutput {
        return try await self.client.execute(
            operation: "UpdateProjectVisibility", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Updates a report group.
    @Sendable
    public func updateReportGroup(_ input: UpdateReportGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateReportGroupOutput {
        return try await self.client.execute(
            operation: "UpdateReportGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Updates the webhook associated with an CodeBuild build project.   If you use Bitbucket for your repository, rotateSecret is ignored.
    @Sendable
    public func updateWebhook(_ input: UpdateWebhookInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateWebhookOutput {
        return try await self.client.execute(
            operation: "UpdateWebhook", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension CodeBuild {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: CodeBuild, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension CodeBuild {
    /// Retrieves one or more code coverage reports.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeCodeCoveragesPaginator(
        _ input: DescribeCodeCoveragesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeCodeCoveragesInput, DescribeCodeCoveragesOutput> {
        return .init(
            input: input,
            command: self.describeCodeCoverages,
            inputKey: \DescribeCodeCoveragesInput.nextToken,
            outputKey: \DescribeCodeCoveragesOutput.nextToken,
            logger: logger
        )
    }

    ///  Returns a list of details about test cases for a report.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeTestCasesPaginator(
        _ input: DescribeTestCasesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeTestCasesInput, DescribeTestCasesOutput> {
        return .init(
            input: input,
            command: self.describeTestCases,
            inputKey: \DescribeTestCasesInput.nextToken,
            outputKey: \DescribeTestCasesOutput.nextToken,
            logger: logger
        )
    }

    /// Retrieves the identifiers of your build batches in the current region.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listBuildBatchesPaginator(
        _ input: ListBuildBatchesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListBuildBatchesInput, ListBuildBatchesOutput> {
        return .init(
            input: input,
            command: self.listBuildBatches,
            inputKey: \ListBuildBatchesInput.nextToken,
            outputKey: \ListBuildBatchesOutput.nextToken,
            logger: logger
        )
    }

    /// Retrieves the identifiers of the build batches for a specific project.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listBuildBatchesForProjectPaginator(
        _ input: ListBuildBatchesForProjectInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListBuildBatchesForProjectInput, ListBuildBatchesForProjectOutput> {
        return .init(
            input: input,
            command: self.listBuildBatchesForProject,
            inputKey: \ListBuildBatchesForProjectInput.nextToken,
            outputKey: \ListBuildBatchesForProjectOutput.nextToken,
            logger: logger
        )
    }

    /// Gets a list of build IDs, with each build ID representing a single build.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listBuildsPaginator(
        _ input: ListBuildsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListBuildsInput, ListBuildsOutput> {
        return .init(
            input: input,
            command: self.listBuilds,
            inputKey: \ListBuildsInput.nextToken,
            outputKey: \ListBuildsOutput.nextToken,
            logger: logger
        )
    }

    /// Gets a list of build identifiers for the specified build project, with each build identifier representing a single build.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listBuildsForProjectPaginator(
        _ input: ListBuildsForProjectInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListBuildsForProjectInput, ListBuildsForProjectOutput> {
        return .init(
            input: input,
            command: self.listBuildsForProject,
            inputKey: \ListBuildsForProjectInput.nextToken,
            outputKey: \ListBuildsForProjectOutput.nextToken,
            logger: logger
        )
    }

    /// Gets a list of compute fleet names with each compute fleet name representing a single compute fleet.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listFleetsPaginator(
        _ input: ListFleetsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListFleetsInput, ListFleetsOutput> {
        return .init(
            input: input,
            command: self.listFleets,
            inputKey: \ListFleetsInput.nextToken,
            outputKey: \ListFleetsOutput.nextToken,
            logger: logger
        )
    }

    /// Gets a list of build project names, with each build project name representing a single build project.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listProjectsPaginator(
        _ input: ListProjectsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListProjectsInput, ListProjectsOutput> {
        return .init(
            input: input,
            command: self.listProjects,
            inputKey: \ListProjectsInput.nextToken,
            outputKey: \ListProjectsOutput.nextToken,
            logger: logger
        )
    }

    ///  Gets a list ARNs for the report groups in the current Amazon Web Services account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listReportGroupsPaginator(
        _ input: ListReportGroupsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListReportGroupsInput, ListReportGroupsOutput> {
        return .init(
            input: input,
            command: self.listReportGroups,
            inputKey: \ListReportGroupsInput.nextToken,
            outputKey: \ListReportGroupsOutput.nextToken,
            logger: logger
        )
    }

    ///  Returns a list of ARNs for the reports in the current Amazon Web Services account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listReportsPaginator(
        _ input: ListReportsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListReportsInput, ListReportsOutput> {
        return .init(
            input: input,
            command: self.listReports,
            inputKey: \ListReportsInput.nextToken,
            outputKey: \ListReportsOutput.nextToken,
            logger: logger
        )
    }

    ///  Returns a list of ARNs for the reports that belong to a ReportGroup.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listReportsForReportGroupPaginator(
        _ input: ListReportsForReportGroupInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListReportsForReportGroupInput, ListReportsForReportGroupOutput> {
        return .init(
            input: input,
            command: self.listReportsForReportGroup,
            inputKey: \ListReportsForReportGroupInput.nextToken,
            outputKey: \ListReportsForReportGroupOutput.nextToken,
            logger: logger
        )
    }

    ///  Gets a list of projects that are shared with other Amazon Web Services accounts or users.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listSharedProjectsPaginator(
        _ input: ListSharedProjectsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSharedProjectsInput, ListSharedProjectsOutput> {
        return .init(
            input: input,
            command: self.listSharedProjects,
            inputKey: \ListSharedProjectsInput.nextToken,
            outputKey: \ListSharedProjectsOutput.nextToken,
            logger: logger
        )
    }

    ///  Gets a list of report groups that are shared with other Amazon Web Services accounts or users.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listSharedReportGroupsPaginator(
        _ input: ListSharedReportGroupsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSharedReportGroupsInput, ListSharedReportGroupsOutput> {
        return .init(
            input: input,
            command: self.listSharedReportGroups,
            inputKey: \ListSharedReportGroupsInput.nextToken,
            outputKey: \ListSharedReportGroupsOutput.nextToken,
            logger: logger
        )
    }
}

extension CodeBuild.DescribeCodeCoveragesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.DescribeCodeCoveragesInput {
        return .init(
            maxLineCoveragePercentage: self.maxLineCoveragePercentage,
            maxResults: self.maxResults,
            minLineCoveragePercentage: self.minLineCoveragePercentage,
            nextToken: token,
            reportArn: self.reportArn,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension CodeBuild.DescribeTestCasesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.DescribeTestCasesInput {
        return .init(
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token,
            reportArn: self.reportArn
        )
    }
}

extension CodeBuild.ListBuildBatchesForProjectInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.ListBuildBatchesForProjectInput {
        return .init(
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token,
            projectName: self.projectName,
            sortOrder: self.sortOrder
        )
    }
}

extension CodeBuild.ListBuildBatchesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.ListBuildBatchesInput {
        return .init(
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token,
            sortOrder: self.sortOrder
        )
    }
}

extension CodeBuild.ListBuildsForProjectInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.ListBuildsForProjectInput {
        return .init(
            nextToken: token,
            projectName: self.projectName,
            sortOrder: self.sortOrder
        )
    }
}

extension CodeBuild.ListBuildsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.ListBuildsInput {
        return .init(
            nextToken: token,
            sortOrder: self.sortOrder
        )
    }
}

extension CodeBuild.ListFleetsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.ListFleetsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension CodeBuild.ListProjectsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.ListProjectsInput {
        return .init(
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension CodeBuild.ListReportGroupsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.ListReportGroupsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension CodeBuild.ListReportsForReportGroupInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.ListReportsForReportGroupInput {
        return .init(
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token,
            reportGroupArn: self.reportGroupArn,
            sortOrder: self.sortOrder
        )
    }
}

extension CodeBuild.ListReportsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.ListReportsInput {
        return .init(
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token,
            sortOrder: self.sortOrder
        )
    }
}

extension CodeBuild.ListSharedProjectsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.ListSharedProjectsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension CodeBuild.ListSharedReportGroupsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CodeBuild.ListSharedReportGroupsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}
