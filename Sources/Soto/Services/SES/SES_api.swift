//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS SES service.
///
/// Amazon Simple Email Service This document contains reference information for the Amazon Simple Email Service (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the Amazon SES Developer Guide.   For a list of Amazon SES endpoints to use in service requests, see Regions and Amazon SES in the Amazon SES Developer Guide.  This documentation contains reference information related to the following:    Amazon SES API Actions     Amazon SES API Data Types     Common Parameters     Common Errors
public struct SES: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the SES client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "SES",
            serviceIdentifier: "email",
            signingName: "ses",
            serviceProtocol: .query,
            apiVersion: "2010-12-01",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: SESErrorType.self,
            xmlNamespace: "http://ses.amazonaws.com/doc/2010-12-01/",
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "ca-central-1": "email-fips.ca-central-1.amazonaws.com",
            "us-east-1": "email-fips.us-east-1.amazonaws.com",
            "us-east-2": "email-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "email-fips.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "email-fips.us-gov-west-1.amazonaws.com",
            "us-west-1": "email-fips.us-west-1.amazonaws.com",
            "us-west-2": "email-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set. For information about setting up rule sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func cloneReceiptRuleSet(_ input: CloneReceiptRuleSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CloneReceiptRuleSetResponse {
        try await self.client.execute(
            operation: "CloneReceiptRuleSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a receipt rule set by cloning an existing one. All receipt rules and configurations are copied to the new receipt rule set and are completely independent of the source rule set. For information about setting up rule sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - originalRuleSetName: The name of the rule set to clone.
    ///   - ruleSetName: The name of the rule set to create. The name must meet the following requirements:   Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).   Start and end with a letter or number.   Contain 64 characters or fewer.
    ///   - logger: Logger use during operation
    @inlinable
    public func cloneReceiptRuleSet(
        originalRuleSetName: String,
        ruleSetName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CloneReceiptRuleSetResponse {
        let input = CloneReceiptRuleSetRequest(
            originalRuleSetName: originalRuleSetName, 
            ruleSetName: ruleSetName
        )
        return try await self.cloneReceiptRuleSet(input, logger: logger)
    }

    /// Creates a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func createConfigurationSet(_ input: CreateConfigurationSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateConfigurationSetResponse {
        try await self.client.execute(
            operation: "CreateConfigurationSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - configurationSet: A data structure that contains the name of the configuration set.
    ///   - logger: Logger use during operation
    @inlinable
    public func createConfigurationSet(
        configurationSet: ConfigurationSet,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateConfigurationSetResponse {
        let input = CreateConfigurationSetRequest(
            configurationSet: configurationSet
        )
        return try await self.createConfigurationSet(input, logger: logger)
    }

    /// Creates a configuration set event destination.  When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).  An event destination is the Amazon Web Services service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func createConfigurationSetEventDestination(_ input: CreateConfigurationSetEventDestinationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateConfigurationSetEventDestinationResponse {
        try await self.client.execute(
            operation: "CreateConfigurationSetEventDestination", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a configuration set event destination.  When you create or update an event destination, you must provide one, and only one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).  An event destination is the Amazon Web Services service to which Amazon SES publishes the email sending events associated with a configuration set. For information about using configuration sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - configurationSetName: The name of the configuration set that the event destination should be associated with.
    ///   - eventDestination: An object that describes the Amazon Web Services service that email sending event where information is published.
    ///   - logger: Logger use during operation
    @inlinable
    public func createConfigurationSetEventDestination(
        configurationSetName: String,
        eventDestination: EventDestination,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateConfigurationSetEventDestinationResponse {
        let input = CreateConfigurationSetEventDestinationRequest(
            configurationSetName: configurationSetName, 
            eventDestination: eventDestination
        )
        return try await self.createConfigurationSetEventDestination(input, logger: logger)
    }

    /// Creates an association between a configuration set and a custom domain for open and click event tracking.  By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the Amazon SES Developer Guide.
    @Sendable
    @inlinable
    public func createConfigurationSetTrackingOptions(_ input: CreateConfigurationSetTrackingOptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateConfigurationSetTrackingOptionsResponse {
        try await self.client.execute(
            operation: "CreateConfigurationSetTrackingOptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an association between a configuration set and a custom domain for open and click event tracking.  By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the Amazon SES Developer Guide.
    ///
    /// Parameters:
    ///   - configurationSetName: The name of the configuration set that the tracking options should be associated with.
    ///   - trackingOptions: 
    ///   - logger: Logger use during operation
    @inlinable
    public func createConfigurationSetTrackingOptions(
        configurationSetName: String,
        trackingOptions: TrackingOptions,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateConfigurationSetTrackingOptionsResponse {
        let input = CreateConfigurationSetTrackingOptionsRequest(
            configurationSetName: configurationSetName, 
            trackingOptions: trackingOptions
        )
        return try await self.createConfigurationSetTrackingOptions(input, logger: logger)
    }

    /// Creates a new custom verification email template. For more information about custom verification email templates, see Using Custom Verification Email Templates in the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func createCustomVerificationEmailTemplate(_ input: CreateCustomVerificationEmailTemplateRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "CreateCustomVerificationEmailTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new custom verification email template. For more information about custom verification email templates, see Using Custom Verification Email Templates in the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - failureRedirectionURL: The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
    ///   - fromEmailAddress: The email address that the custom verification email is sent from.
    ///   - successRedirectionURL: The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
    ///   - templateContent: The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see Custom Verification Email Frequently Asked Questions in the Amazon SES Developer Guide.
    ///   - templateName: The name of the custom verification email template.
    ///   - templateSubject: The subject line of the custom verification email.
    ///   - logger: Logger use during operation
    @inlinable
    public func createCustomVerificationEmailTemplate(
        failureRedirectionURL: String,
        fromEmailAddress: String,
        successRedirectionURL: String,
        templateContent: String,
        templateName: String,
        templateSubject: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = CreateCustomVerificationEmailTemplateRequest(
            failureRedirectionURL: failureRedirectionURL, 
            fromEmailAddress: fromEmailAddress, 
            successRedirectionURL: successRedirectionURL, 
            templateContent: templateContent, 
            templateName: templateName, 
            templateSubject: templateSubject
        )
        return try await self.createCustomVerificationEmailTemplate(input, logger: logger)
    }

    /// Creates a new IP address filter. For information about setting up IP address filters, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func createReceiptFilter(_ input: CreateReceiptFilterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateReceiptFilterResponse {
        try await self.client.execute(
            operation: "CreateReceiptFilter", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new IP address filter. For information about setting up IP address filters, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - filter: A data structure that describes the IP address filter to create, which consists of a name, an IP address range, and whether to allow or block mail from it.
    ///   - logger: Logger use during operation
    @inlinable
    public func createReceiptFilter(
        filter: ReceiptFilter,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateReceiptFilterResponse {
        let input = CreateReceiptFilterRequest(
            filter: filter
        )
        return try await self.createReceiptFilter(input, logger: logger)
    }

    /// Creates a receipt rule. For information about setting up receipt rules, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func createReceiptRule(_ input: CreateReceiptRuleRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateReceiptRuleResponse {
        try await self.client.execute(
            operation: "CreateReceiptRule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a receipt rule. For information about setting up receipt rules, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - after: The name of an existing rule after which the new rule is placed. If this parameter is null, the new rule is inserted at the beginning of the rule list.
    ///   - rule: A data structure that contains the specified rule's name, actions, recipients, domains, enabled status, scan status, and TLS policy.
    ///   - ruleSetName: The name of the rule set where the receipt rule is added.
    ///   - logger: Logger use during operation
    @inlinable
    public func createReceiptRule(
        after: String? = nil,
        rule: ReceiptRule,
        ruleSetName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateReceiptRuleResponse {
        let input = CreateReceiptRuleRequest(
            after: after, 
            rule: rule, 
            ruleSetName: ruleSetName
        )
        return try await self.createReceiptRule(input, logger: logger)
    }

    /// Creates an empty receipt rule set. For information about setting up receipt rule sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func createReceiptRuleSet(_ input: CreateReceiptRuleSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateReceiptRuleSetResponse {
        try await self.client.execute(
            operation: "CreateReceiptRuleSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an empty receipt rule set. For information about setting up receipt rule sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - ruleSetName: The name of the rule set to create. The name must meet the following requirements:   Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).   Start and end with a letter or number.   Contain 64 characters or fewer.
    ///   - logger: Logger use during operation
    @inlinable
    public func createReceiptRuleSet(
        ruleSetName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateReceiptRuleSetResponse {
        let input = CreateReceiptRuleSetRequest(
            ruleSetName: ruleSetName
        )
        return try await self.createReceiptRuleSet(input, logger: logger)
    }

    /// Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single operation. For more information, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func createTemplate(_ input: CreateTemplateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTemplateResponse {
        try await self.client.execute(
            operation: "CreateTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an email template. Email templates enable you to send personalized email to one or more destinations in a single operation. For more information, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - template: The content of the email, composed of a subject line and either an HTML part or a text-only part.
    ///   - logger: Logger use during operation
    @inlinable
    public func createTemplate(
        template: Template,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateTemplateResponse {
        let input = CreateTemplateRequest(
            template: template
        )
        return try await self.createTemplate(input, logger: logger)
    }

    /// Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func deleteConfigurationSet(_ input: DeleteConfigurationSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteConfigurationSetResponse {
        try await self.client.execute(
            operation: "DeleteConfigurationSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a configuration set. Configuration sets enable you to publish email sending events. For information about using configuration sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - configurationSetName: The name of the configuration set to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteConfigurationSet(
        configurationSetName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteConfigurationSetResponse {
        let input = DeleteConfigurationSetRequest(
            configurationSetName: configurationSetName
        )
        return try await self.deleteConfigurationSet(input, logger: logger)
    }

    /// Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func deleteConfigurationSetEventDestination(_ input: DeleteConfigurationSetEventDestinationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteConfigurationSetEventDestinationResponse {
        try await self.client.execute(
            operation: "DeleteConfigurationSetEventDestination", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a configuration set event destination. Configuration set event destinations are associated with configuration sets, which enable you to publish email sending events. For information about using configuration sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - configurationSetName: The name of the configuration set from which to delete the event destination.
    ///   - eventDestinationName: The name of the event destination to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteConfigurationSetEventDestination(
        configurationSetName: String,
        eventDestinationName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteConfigurationSetEventDestinationResponse {
        let input = DeleteConfigurationSetEventDestinationRequest(
            configurationSetName: configurationSetName, 
            eventDestinationName: eventDestinationName
        )
        return try await self.deleteConfigurationSetEventDestination(input, logger: logger)
    }

    /// Deletes an association between a configuration set and a custom domain for open and click event tracking. By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the Amazon SES Developer Guide.  Deleting this kind of association results in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.
    @Sendable
    @inlinable
    public func deleteConfigurationSetTrackingOptions(_ input: DeleteConfigurationSetTrackingOptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteConfigurationSetTrackingOptionsResponse {
        try await self.client.execute(
            operation: "DeleteConfigurationSetTrackingOptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an association between a configuration set and a custom domain for open and click event tracking. By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the Amazon SES Developer Guide.  Deleting this kind of association results in emails sent using the specified configuration set to capture open and click events using the standard, Amazon SES-operated domains.
    ///
    /// Parameters:
    ///   - configurationSetName: The name of the configuration set.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteConfigurationSetTrackingOptions(
        configurationSetName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteConfigurationSetTrackingOptionsResponse {
        let input = DeleteConfigurationSetTrackingOptionsRequest(
            configurationSetName: configurationSetName
        )
        return try await self.deleteConfigurationSetTrackingOptions(input, logger: logger)
    }

    /// Deletes an existing custom verification email template.  For more information about custom verification email templates, see Using Custom Verification Email Templates in the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func deleteCustomVerificationEmailTemplate(_ input: DeleteCustomVerificationEmailTemplateRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteCustomVerificationEmailTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an existing custom verification email template.  For more information about custom verification email templates, see Using Custom Verification Email Templates in the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - templateName: The name of the custom verification email template to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteCustomVerificationEmailTemplate(
        templateName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteCustomVerificationEmailTemplateRequest(
            templateName: templateName
        )
        return try await self.deleteCustomVerificationEmailTemplate(input, logger: logger)
    }

    /// Deletes the specified identity (an email address or a domain) from the list of verified identities. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func deleteIdentity(_ input: DeleteIdentityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteIdentityResponse {
        try await self.client.execute(
            operation: "DeleteIdentity", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified identity (an email address or a domain) from the list of verified identities. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - identity: The identity to be removed from the list of identities for the Amazon Web Services account.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteIdentity(
        identity: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteIdentityResponse {
        let input = DeleteIdentityRequest(
            identity: identity
        )
        return try await self.deleteIdentity(input, logger: logger)
    }

    /// Deletes the specified sending authorization policy for the given identity (an email address or a domain). This operation returns successfully even if a policy with the specified name does not exist.  This operation is for the identity owner only. If you have not verified the identity, it returns an error.  Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func deleteIdentityPolicy(_ input: DeleteIdentityPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteIdentityPolicyResponse {
        try await self.client.execute(
            operation: "DeleteIdentityPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified sending authorization policy for the given identity (an email address or a domain). This operation returns successfully even if a policy with the specified name does not exist.  This operation is for the identity owner only. If you have not verified the identity, it returns an error.  Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - identity: The identity that is associated with the policy to delete. You can specify the identity by using its name or by using its Amazon Resource Name (ARN). Examples: user@example.com, example.com, arn:aws:ses:us-east-1:123456789012:identity/example.com. To successfully call this operation, you must own the identity.
    ///   - policyName: The name of the policy to be deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteIdentityPolicy(
        identity: String,
        policyName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteIdentityPolicyResponse {
        let input = DeleteIdentityPolicyRequest(
            identity: identity, 
            policyName: policyName
        )
        return try await self.deleteIdentityPolicy(input, logger: logger)
    }

    /// Deletes the specified IP address filter. For information about managing IP address filters, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func deleteReceiptFilter(_ input: DeleteReceiptFilterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteReceiptFilterResponse {
        try await self.client.execute(
            operation: "DeleteReceiptFilter", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified IP address filter. For information about managing IP address filters, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - filterName: The name of the IP address filter to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteReceiptFilter(
        filterName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteReceiptFilterResponse {
        let input = DeleteReceiptFilterRequest(
            filterName: filterName
        )
        return try await self.deleteReceiptFilter(input, logger: logger)
    }

    /// Deletes the specified receipt rule. For information about managing receipt rules, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func deleteReceiptRule(_ input: DeleteReceiptRuleRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteReceiptRuleResponse {
        try await self.client.execute(
            operation: "DeleteReceiptRule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified receipt rule. For information about managing receipt rules, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - ruleName: The name of the receipt rule to delete.
    ///   - ruleSetName: The name of the receipt rule set that contains the receipt rule to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteReceiptRule(
        ruleName: String,
        ruleSetName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteReceiptRuleResponse {
        let input = DeleteReceiptRuleRequest(
            ruleName: ruleName, 
            ruleSetName: ruleSetName
        )
        return try await self.deleteReceiptRule(input, logger: logger)
    }

    /// Deletes the specified receipt rule set and all of the receipt rules it contains.  The currently active rule set cannot be deleted.  For information about managing receipt rule sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func deleteReceiptRuleSet(_ input: DeleteReceiptRuleSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteReceiptRuleSetResponse {
        try await self.client.execute(
            operation: "DeleteReceiptRuleSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified receipt rule set and all of the receipt rules it contains.  The currently active rule set cannot be deleted.  For information about managing receipt rule sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - ruleSetName: The name of the receipt rule set to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteReceiptRuleSet(
        ruleSetName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteReceiptRuleSetResponse {
        let input = DeleteReceiptRuleSetRequest(
            ruleSetName: ruleSetName
        )
        return try await self.deleteReceiptRuleSet(input, logger: logger)
    }

    /// Deletes an email template. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func deleteTemplate(_ input: DeleteTemplateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTemplateResponse {
        try await self.client.execute(
            operation: "DeleteTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an email template. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - templateName: The name of the template to be deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTemplate(
        templateName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteTemplateResponse {
        let input = DeleteTemplateRequest(
            templateName: templateName
        )
        return try await self.deleteTemplate(input, logger: logger)
    }

    /// Deprecated. Use the DeleteIdentity operation to delete email addresses and domains.
    @Sendable
    @inlinable
    public func deleteVerifiedEmailAddress(_ input: DeleteVerifiedEmailAddressRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteVerifiedEmailAddress", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deprecated. Use the DeleteIdentity operation to delete email addresses and domains.
    ///
    /// Parameters:
    ///   - emailAddress: An email address to be removed from the list of verified addresses.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteVerifiedEmailAddress(
        emailAddress: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteVerifiedEmailAddressRequest(
            emailAddress: emailAddress
        )
        return try await self.deleteVerifiedEmailAddress(input, logger: logger)
    }

    /// Returns the metadata and receipt rules for the receipt rule set that is currently active. For information about setting up receipt rule sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func describeActiveReceiptRuleSet(_ input: DescribeActiveReceiptRuleSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeActiveReceiptRuleSetResponse {
        try await self.client.execute(
            operation: "DescribeActiveReceiptRuleSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the metadata and receipt rules for the receipt rule set that is currently active. For information about setting up receipt rule sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - logger: Logger use during operation
    @inlinable
    public func describeActiveReceiptRuleSet(
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeActiveReceiptRuleSetResponse {
        let input = DescribeActiveReceiptRuleSetRequest(
        )
        return try await self.describeActiveReceiptRuleSet(input, logger: logger)
    }

    /// Returns the details of the specified configuration set. For information about using configuration sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func describeConfigurationSet(_ input: DescribeConfigurationSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeConfigurationSetResponse {
        try await self.client.execute(
            operation: "DescribeConfigurationSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the details of the specified configuration set. For information about using configuration sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - configurationSetAttributeNames: A list of configuration set attributes to return.
    ///   - configurationSetName: The name of the configuration set to describe.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeConfigurationSet(
        configurationSetAttributeNames: [ConfigurationSetAttribute]? = nil,
        configurationSetName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeConfigurationSetResponse {
        let input = DescribeConfigurationSetRequest(
            configurationSetAttributeNames: configurationSetAttributeNames, 
            configurationSetName: configurationSetName
        )
        return try await self.describeConfigurationSet(input, logger: logger)
    }

    /// Returns the details of the specified receipt rule. For information about setting up receipt rules, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func describeReceiptRule(_ input: DescribeReceiptRuleRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeReceiptRuleResponse {
        try await self.client.execute(
            operation: "DescribeReceiptRule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the details of the specified receipt rule. For information about setting up receipt rules, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - ruleName: The name of the receipt rule.
    ///   - ruleSetName: The name of the receipt rule set that the receipt rule belongs to.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeReceiptRule(
        ruleName: String,
        ruleSetName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeReceiptRuleResponse {
        let input = DescribeReceiptRuleRequest(
            ruleName: ruleName, 
            ruleSetName: ruleSetName
        )
        return try await self.describeReceiptRule(input, logger: logger)
    }

    /// Returns the details of the specified receipt rule set. For information about managing receipt rule sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func describeReceiptRuleSet(_ input: DescribeReceiptRuleSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeReceiptRuleSetResponse {
        try await self.client.execute(
            operation: "DescribeReceiptRuleSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the details of the specified receipt rule set. For information about managing receipt rule sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - ruleSetName: The name of the receipt rule set to describe.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeReceiptRuleSet(
        ruleSetName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeReceiptRuleSetResponse {
        let input = DescribeReceiptRuleSetRequest(
            ruleSetName: ruleSetName
        )
        return try await self.describeReceiptRuleSet(input, logger: logger)
    }

    /// Returns the email sending status of the Amazon SES account for the current Region. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func getAccountSendingEnabled(logger: Logger = AWSClient.loggingDisabled) async throws -> GetAccountSendingEnabledResponse {
        try await self.client.execute(
            operation: "GetAccountSendingEnabled", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            logger: logger
        )
    }

    /// Returns the custom email verification template for the template name you specify. For more information about custom verification email templates, see Using Custom Verification Email Templates in the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func getCustomVerificationEmailTemplate(_ input: GetCustomVerificationEmailTemplateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCustomVerificationEmailTemplateResponse {
        try await self.client.execute(
            operation: "GetCustomVerificationEmailTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the custom email verification template for the template name you specify. For more information about custom verification email templates, see Using Custom Verification Email Templates in the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - templateName: The name of the custom verification email template to retrieve.
    ///   - logger: Logger use during operation
    @inlinable
    public func getCustomVerificationEmailTemplate(
        templateName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetCustomVerificationEmailTemplateResponse {
        let input = GetCustomVerificationEmailTemplateRequest(
            templateName: templateName
        )
        return try await self.getCustomVerificationEmailTemplate(input, logger: logger)
    }

    /// Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published. This operation takes a list of identities as input and returns the following information for each:   Whether Easy DKIM signing is enabled or disabled.   A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.   Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.   This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time. For more information about creating DNS records using DKIM tokens, go to the Amazon SES Developer Guide.
    @Sendable
    @inlinable
    public func getIdentityDkimAttributes(_ input: GetIdentityDkimAttributesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIdentityDkimAttributesResponse {
        try await self.client.execute(
            operation: "GetIdentityDkimAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the current status of Easy DKIM signing for an entity. For domain name identities, this operation also returns the DKIM tokens that are required for Easy DKIM signing, and whether Amazon SES has successfully verified that these tokens have been published. This operation takes a list of identities as input and returns the following information for each:   Whether Easy DKIM signing is enabled or disabled.   A set of DKIM tokens that represent the identity. If the identity is an email address, the tokens represent the domain of that address.   Whether Amazon SES has successfully verified the DKIM tokens published in the domain's DNS. This information is only returned for domain name identities, not for email addresses.   This operation is throttled at one request per second and can only get DKIM attributes for up to 100 identities at a time. For more information about creating DNS records using DKIM tokens, go to the Amazon SES Developer Guide.
    ///
    /// Parameters:
    ///   - identities: A list of one or more verified identities - email addresses, domains, or both.
    ///   - logger: Logger use during operation
    @inlinable
    public func getIdentityDkimAttributes(
        identities: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetIdentityDkimAttributesResponse {
        let input = GetIdentityDkimAttributesRequest(
            identities: identities
        )
        return try await self.getIdentityDkimAttributes(input, logger: logger)
    }

    /// Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains). This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.
    @Sendable
    @inlinable
    public func getIdentityMailFromDomainAttributes(_ input: GetIdentityMailFromDomainAttributesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIdentityMailFromDomainAttributesResponse {
        try await self.client.execute(
            operation: "GetIdentityMailFromDomainAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the custom MAIL FROM attributes for a list of identities (email addresses : domains). This operation is throttled at one request per second and can only get custom MAIL FROM attributes for up to 100 identities at a time.
    ///
    /// Parameters:
    ///   - identities: A list of one or more identities.
    ///   - logger: Logger use during operation
    @inlinable
    public func getIdentityMailFromDomainAttributes(
        identities: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetIdentityMailFromDomainAttributesResponse {
        let input = GetIdentityMailFromDomainAttributesRequest(
            identities: identities
        )
        return try await self.getIdentityMailFromDomainAttributes(input, logger: logger)
    }

    /// Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes. This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time. For more information about using notifications with Amazon SES, see the Amazon SES Developer Guide.
    @Sendable
    @inlinable
    public func getIdentityNotificationAttributes(_ input: GetIdentityNotificationAttributesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIdentityNotificationAttributesResponse {
        try await self.client.execute(
            operation: "GetIdentityNotificationAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Given a list of verified identities (email addresses and/or domains), returns a structure describing identity notification attributes. This operation is throttled at one request per second and can only get notification attributes for up to 100 identities at a time. For more information about using notifications with Amazon SES, see the Amazon SES Developer Guide.
    ///
    /// Parameters:
    ///   - identities: A list of one or more identities. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: user@example.com, example.com, arn:aws:ses:us-east-1:123456789012:identity/example.com.
    ///   - logger: Logger use during operation
    @inlinable
    public func getIdentityNotificationAttributes(
        identities: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetIdentityNotificationAttributesResponse {
        let input = GetIdentityNotificationAttributesRequest(
            identities: identities
        )
        return try await self.getIdentityNotificationAttributes(input, logger: logger)
    }

    /// Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.  This operation is for the identity owner only. If you have not verified the identity, it returns an error.  Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func getIdentityPolicies(_ input: GetIdentityPoliciesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIdentityPoliciesResponse {
        try await self.client.execute(
            operation: "GetIdentityPolicies", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the requested sending authorization policies for the given identity (an email address or a domain). The policies are returned as a map of policy names to policy contents. You can retrieve a maximum of 20 policies at a time.  This operation is for the identity owner only. If you have not verified the identity, it returns an error.  Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - identity: The identity for which the policies are retrieved. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: user@example.com, example.com, arn:aws:ses:us-east-1:123456789012:identity/example.com. To successfully call this operation, you must own the identity.
    ///   - policyNames: A list of the names of policies to be retrieved. You can retrieve a maximum of 20 policies at a time. If you do not know the names of the policies that are attached to the identity, you can use ListIdentityPolicies.
    ///   - logger: Logger use during operation
    @inlinable
    public func getIdentityPolicies(
        identity: String,
        policyNames: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetIdentityPoliciesResponse {
        let input = GetIdentityPoliciesRequest(
            identity: identity, 
            policyNames: policyNames
        )
        return try await self.getIdentityPolicies(input, logger: logger)
    }

    /// Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity. The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, to verify the email address, you must restart the verification process from the beginning. For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, to verify the domain, you must restart the verification process from the beginning. This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.
    @Sendable
    @inlinable
    public func getIdentityVerificationAttributes(_ input: GetIdentityVerificationAttributesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIdentityVerificationAttributesResponse {
        try await self.client.execute(
            operation: "GetIdentityVerificationAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Given a list of identities (email addresses and/or domains), returns the verification status and (for domain identities) the verification token for each identity. The verification status of an email address is "Pending" until the email address owner clicks the link within the verification email that Amazon SES sent to that address. If the email address owner clicks the link within 24 hours, the verification status of the email address changes to "Success". If the link is not clicked within 24 hours, the verification status changes to "Failed." In that case, to verify the email address, you must restart the verification process from the beginning. For domain identities, the domain's verification status is "Pending" as Amazon SES searches for the required TXT record in the DNS settings of the domain. When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, to verify the domain, you must restart the verification process from the beginning. This operation is throttled at one request per second and can only get verification attributes for up to 100 identities at a time.
    ///
    /// Parameters:
    ///   - identities: A list of identities.
    ///   - logger: Logger use during operation
    @inlinable
    public func getIdentityVerificationAttributes(
        identities: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetIdentityVerificationAttributesResponse {
        let input = GetIdentityVerificationAttributesRequest(
            identities: identities
        )
        return try await self.getIdentityVerificationAttributes(input, logger: logger)
    }

    /// Provides the sending limits for the Amazon SES account.  You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func getSendQuota(logger: Logger = AWSClient.loggingDisabled) async throws -> GetSendQuotaResponse {
        try await self.client.execute(
            operation: "GetSendQuota", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            logger: logger
        )
    }

    /// Provides sending statistics for the current Amazon Web Services Region. The result is a list of data points, representing the last two weeks of sending activity. Each data point in the list contains statistics for a 15-minute period of time. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func getSendStatistics(logger: Logger = AWSClient.loggingDisabled) async throws -> GetSendStatisticsResponse {
        try await self.client.execute(
            operation: "GetSendStatistics", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            logger: logger
        )
    }

    /// Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func getTemplate(_ input: GetTemplateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTemplateResponse {
        try await self.client.execute(
            operation: "GetTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Displays the template object (which includes the Subject line, HTML part and text part) for the template you specify. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - templateName: The name of the template to retrieve.
    ///   - logger: Logger use during operation
    @inlinable
    public func getTemplate(
        templateName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetTemplateResponse {
        let input = GetTemplateRequest(
            templateName: templateName
        )
        return try await self.getTemplate(input, logger: logger)
    }

    /// Provides a list of the configuration sets associated with your Amazon SES account in the current Amazon Web Services Region. For information about using configuration sets, see Monitoring Your Amazon SES Sending Activity in the Amazon SES Developer Guide.  You can execute this operation no more than once per second. This operation returns up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation also returns NextToken. You can then execute the ListConfigurationSets operation again, passing the NextToken parameter and the value of the NextToken element to retrieve additional results.
    @Sendable
    @inlinable
    public func listConfigurationSets(_ input: ListConfigurationSetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListConfigurationSetsResponse {
        try await self.client.execute(
            operation: "ListConfigurationSets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides a list of the configuration sets associated with your Amazon SES account in the current Amazon Web Services Region. For information about using configuration sets, see Monitoring Your Amazon SES Sending Activity in the Amazon SES Developer Guide.  You can execute this operation no more than once per second. This operation returns up to 1,000 configuration sets each time it is run. If your Amazon SES account has more than 1,000 configuration sets, this operation also returns NextToken. You can then execute the ListConfigurationSets operation again, passing the NextToken parameter and the value of the NextToken element to retrieve additional results.
    ///
    /// Parameters:
    ///   - maxItems: The number of configuration sets to return.
    ///   - nextToken: A token returned from a previous call to ListConfigurationSets to indicate the position of the configuration set in the configuration set list.
    ///   - logger: Logger use during operation
    @inlinable
    public func listConfigurationSets(
        maxItems: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListConfigurationSetsResponse {
        let input = ListConfigurationSetsRequest(
            maxItems: maxItems, 
            nextToken: nextToken
        )
        return try await self.listConfigurationSets(input, logger: logger)
    }

    /// Lists the existing custom verification email templates for your account in the current Amazon Web Services Region. For more information about custom verification email templates, see Using Custom Verification Email Templates in the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func listCustomVerificationEmailTemplates(_ input: ListCustomVerificationEmailTemplatesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCustomVerificationEmailTemplatesResponse {
        try await self.client.execute(
            operation: "ListCustomVerificationEmailTemplates", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the existing custom verification email templates for your account in the current Amazon Web Services Region. For more information about custom verification email templates, see Using Custom Verification Email Templates in the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation returns up to 50 results.
    ///   - nextToken: An array the contains the name and creation time stamp for each template in your Amazon SES account.
    ///   - logger: Logger use during operation
    @inlinable
    public func listCustomVerificationEmailTemplates(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListCustomVerificationEmailTemplatesResponse {
        let input = ListCustomVerificationEmailTemplatesRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listCustomVerificationEmailTemplates(input, logger: logger)
    }

    /// Returns a list containing all of the identities (email addresses and domains) for your Amazon Web Services account in the current Amazon Web Services Region, regardless of verification status. You can execute this operation no more than once per second.  It's recommended that for successive pagination calls of this API, you continue to the use the same parameter/value pairs as used in the original call, e.g., if you used IdentityType=Domain in the the original call and received a NextToken in the response, you should continue providing the IdentityType=Domain parameter for further NextToken calls; however, if you didn't provide the IdentityType parameter in the original call, then continue to not provide it for successive pagination calls. Using this protocol will ensure consistent results.
    @Sendable
    @inlinable
    public func listIdentities(_ input: ListIdentitiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListIdentitiesResponse {
        try await self.client.execute(
            operation: "ListIdentities", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list containing all of the identities (email addresses and domains) for your Amazon Web Services account in the current Amazon Web Services Region, regardless of verification status. You can execute this operation no more than once per second.  It's recommended that for successive pagination calls of this API, you continue to the use the same parameter/value pairs as used in the original call, e.g., if you used IdentityType=Domain in the the original call and received a NextToken in the response, you should continue providing the IdentityType=Domain parameter for further NextToken calls; however, if you didn't provide the IdentityType parameter in the original call, then continue to not provide it for successive pagination calls. Using this protocol will ensure consistent results.
    ///
    /// Parameters:
    ///   - identityType: The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities are listed.
    ///   - maxItems: The maximum number of identities per page. Possible values are 1-1000 inclusive.
    ///   - nextToken: The token to use for pagination.
    ///   - logger: Logger use during operation
    @inlinable
    public func listIdentities(
        identityType: IdentityType? = nil,
        maxItems: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListIdentitiesResponse {
        let input = ListIdentitiesRequest(
            identityType: identityType, 
            maxItems: maxItems, 
            nextToken: nextToken
        )
        return try await self.listIdentities(input, logger: logger)
    }

    /// Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This operation returns only a list. To get the actual policy content, use GetIdentityPolicies.  This operation is for the identity owner only. If you have not verified the identity, it returns an error.  Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func listIdentityPolicies(_ input: ListIdentityPoliciesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListIdentityPoliciesResponse {
        try await self.client.execute(
            operation: "ListIdentityPolicies", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of sending authorization policies that are attached to the given identity (an email address or a domain). This operation returns only a list. To get the actual policy content, use GetIdentityPolicies.  This operation is for the identity owner only. If you have not verified the identity, it returns an error.  Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - identity: The identity that is associated with the policy for which the policies are listed. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: user@example.com, example.com, arn:aws:ses:us-east-1:123456789012:identity/example.com. To successfully call this operation, you must own the identity.
    ///   - logger: Logger use during operation
    @inlinable
    public func listIdentityPolicies(
        identity: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListIdentityPoliciesResponse {
        let input = ListIdentityPoliciesRequest(
            identity: identity
        )
        return try await self.listIdentityPolicies(input, logger: logger)
    }

    /// Lists the IP address filters associated with your Amazon Web Services account in the current Amazon Web Services Region. For information about managing IP address filters, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func listReceiptFilters(_ input: ListReceiptFiltersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListReceiptFiltersResponse {
        try await self.client.execute(
            operation: "ListReceiptFilters", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the IP address filters associated with your Amazon Web Services account in the current Amazon Web Services Region. For information about managing IP address filters, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - logger: Logger use during operation
    @inlinable
    public func listReceiptFilters(
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListReceiptFiltersResponse {
        let input = ListReceiptFiltersRequest(
        )
        return try await self.listReceiptFilters(input, logger: logger)
    }

    /// Lists the receipt rule sets that exist under your Amazon Web Services account in the current Amazon Web Services Region. If there are additional receipt rule sets to be retrieved, you receive a NextToken that you can provide to the next call to ListReceiptRuleSets to retrieve the additional entries. For information about managing receipt rule sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func listReceiptRuleSets(_ input: ListReceiptRuleSetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListReceiptRuleSetsResponse {
        try await self.client.execute(
            operation: "ListReceiptRuleSets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the receipt rule sets that exist under your Amazon Web Services account in the current Amazon Web Services Region. If there are additional receipt rule sets to be retrieved, you receive a NextToken that you can provide to the next call to ListReceiptRuleSets to retrieve the additional entries. For information about managing receipt rule sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - nextToken: A token returned from a previous call to ListReceiptRuleSets to indicate the position in the receipt rule set list.
    ///   - logger: Logger use during operation
    @inlinable
    public func listReceiptRuleSets(
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListReceiptRuleSetsResponse {
        let input = ListReceiptRuleSetsRequest(
            nextToken: nextToken
        )
        return try await self.listReceiptRuleSets(input, logger: logger)
    }

    /// Lists the email templates present in your Amazon SES account in the current Amazon Web Services Region. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func listTemplates(_ input: ListTemplatesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTemplatesResponse {
        try await self.client.execute(
            operation: "ListTemplates", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the email templates present in your Amazon SES account in the current Amazon Web Services Region. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - maxItems: The maximum number of templates to return. This value must be at least 1 and less than or equal to 100. If more than 100 items are requested, the page size will automatically set to 100. If you do not specify a value, 10 is the default page size.
    ///   - nextToken: A token returned from a previous call to ListTemplates to indicate the position in the list of email templates.
    ///   - logger: Logger use during operation
    @inlinable
    public func listTemplates(
        maxItems: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTemplatesResponse {
        let input = ListTemplatesRequest(
            maxItems: maxItems, 
            nextToken: nextToken
        )
        return try await self.listTemplates(input, logger: logger)
    }

    /// Deprecated. Use the ListIdentities operation to list the email addresses and domains associated with your account.
    @Sendable
    @inlinable
    public func listVerifiedEmailAddresses(logger: Logger = AWSClient.loggingDisabled) async throws -> ListVerifiedEmailAddressesResponse {
        try await self.client.execute(
            operation: "ListVerifiedEmailAddresses", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            logger: logger
        )
    }

    /// Adds or updates the delivery options for a configuration set.
    @Sendable
    @inlinable
    public func putConfigurationSetDeliveryOptions(_ input: PutConfigurationSetDeliveryOptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutConfigurationSetDeliveryOptionsResponse {
        try await self.client.execute(
            operation: "PutConfigurationSetDeliveryOptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds or updates the delivery options for a configuration set.
    ///
    /// Parameters:
    ///   - configurationSetName: The name of the configuration set.
    ///   - deliveryOptions: Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS).
    ///   - logger: Logger use during operation
    @inlinable
    public func putConfigurationSetDeliveryOptions(
        configurationSetName: String,
        deliveryOptions: DeliveryOptions? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutConfigurationSetDeliveryOptionsResponse {
        let input = PutConfigurationSetDeliveryOptionsRequest(
            configurationSetName: configurationSetName, 
            deliveryOptions: deliveryOptions
        )
        return try await self.putConfigurationSetDeliveryOptions(input, logger: logger)
    }

    /// Adds or updates a sending authorization policy for the specified identity (an email address or a domain).  This operation is for the identity owner only. If you have not verified the identity, it returns an error.  Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func putIdentityPolicy(_ input: PutIdentityPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutIdentityPolicyResponse {
        try await self.client.execute(
            operation: "PutIdentityPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds or updates a sending authorization policy for the specified identity (an email address or a domain).  This operation is for the identity owner only. If you have not verified the identity, it returns an error.  Sending authorization is a feature that enables an identity owner to authorize other senders to use its identities. For information about using sending authorization, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - identity: The identity to which that the policy applies. You can specify an identity by using its name or by using its Amazon Resource Name (ARN). Examples: user@example.com, example.com, arn:aws:ses:us-east-1:123456789012:identity/example.com. To successfully call this operation, you must own the identity.
    ///   - policy: The text of the policy in JSON format. The policy cannot exceed 4 KB. For information about the syntax of sending authorization policies, see the Amazon SES Developer Guide.
    ///   - policyName: The name of the policy. The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.
    ///   - logger: Logger use during operation
    @inlinable
    public func putIdentityPolicy(
        identity: String,
        policy: String,
        policyName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutIdentityPolicyResponse {
        let input = PutIdentityPolicyRequest(
            identity: identity, 
            policy: policy, 
            policyName: policyName
        )
        return try await self.putIdentityPolicy(input, logger: logger)
    }

    /// Reorders the receipt rules within a receipt rule set.  All of the rules in the rule set must be represented in this request. That is, it is error if the reorder request doesn't explicitly position all of the rules.  For information about managing receipt rule sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func reorderReceiptRuleSet(_ input: ReorderReceiptRuleSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ReorderReceiptRuleSetResponse {
        try await self.client.execute(
            operation: "ReorderReceiptRuleSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Reorders the receipt rules within a receipt rule set.  All of the rules in the rule set must be represented in this request. That is, it is error if the reorder request doesn't explicitly position all of the rules.  For information about managing receipt rule sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - ruleNames: The specified receipt rule set's receipt rules, in order.
    ///   - ruleSetName: The name of the receipt rule set to reorder.
    ///   - logger: Logger use during operation
    @inlinable
    public func reorderReceiptRuleSet(
        ruleNames: [String],
        ruleSetName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ReorderReceiptRuleSetResponse {
        let input = ReorderReceiptRuleSetRequest(
            ruleNames: ruleNames, 
            ruleSetName: ruleSetName
        )
        return try await self.reorderReceiptRuleSet(input, logger: logger)
    }

    /// Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this operation on an email up to 24 hours after you receive it.  You cannot use this operation to send generic bounces for mail that was not received by Amazon SES.  For information about receiving email through Amazon SES, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func sendBounce(_ input: SendBounceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SendBounceResponse {
        try await self.client.execute(
            operation: "SendBounce", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Generates and sends a bounce message to the sender of an email you received through Amazon SES. You can only use this operation on an email up to 24 hours after you receive it.  You cannot use this operation to send generic bounces for mail that was not received by Amazon SES.  For information about receiving email through Amazon SES, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - bouncedRecipientInfoList: A list of recipients of the bounced message, including the information required to create the Delivery Status Notifications (DSNs) for the recipients. You must specify at least one BouncedRecipientInfo in the list.
    ///   - bounceSender: The address to use in the "From" header of the bounce message. This must be an identity that you have verified with Amazon SES.
    ///   - bounceSenderArn: This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the address in the "From" header of the bounce. For more information about sending authorization, see the Amazon SES Developer Guide.
    ///   - explanation: Human-readable text for the bounce message to explain the failure. If not specified, the text is auto-generated based on the bounced recipient information.
    ///   - messageDsn: Message-related DSN fields. If not specified, Amazon SES chooses the values.
    ///   - originalMessageId: The message ID of the message to be bounced.
    ///   - logger: Logger use during operation
    @inlinable
    public func sendBounce(
        bouncedRecipientInfoList: [BouncedRecipientInfo],
        bounceSender: String,
        bounceSenderArn: String? = nil,
        explanation: String? = nil,
        messageDsn: MessageDsn? = nil,
        originalMessageId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SendBounceResponse {
        let input = SendBounceRequest(
            bouncedRecipientInfoList: bouncedRecipientInfoList, 
            bounceSender: bounceSender, 
            bounceSenderArn: bounceSenderArn, 
            explanation: explanation, 
            messageDsn: messageDsn, 
            originalMessageId: originalMessageId
        )
        return try await self.sendBounce(input, logger: logger)
    }

    /// Composes an email message to multiple destinations. The message body is created using an email template. To send email using this operation, your call must meet the following requirements:   The call must refer to an existing email template. You can create email templates using CreateTemplate.   The message must be sent from a verified email address or domain.   If your account is still in the Amazon SES sandbox, you may send only to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see Verifying Email Addresses and Domains in the Amazon SES Developer Guide.    The maximum message size is 10 MB.   Each Destination parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format UserName@[SubDomain.]Domain.TopLevelDomain), the entire message is rejected, even if the message contains other recipients that are valid.   The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the SendBulkTemplatedEmail operation several times to send the message to each group.   The number of destinations you can contact in a single call can be limited by your account's maximum sending rate.
    @Sendable
    @inlinable
    public func sendBulkTemplatedEmail(_ input: SendBulkTemplatedEmailRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SendBulkTemplatedEmailResponse {
        try await self.client.execute(
            operation: "SendBulkTemplatedEmail", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Composes an email message to multiple destinations. The message body is created using an email template. To send email using this operation, your call must meet the following requirements:   The call must refer to an existing email template. You can create email templates using CreateTemplate.   The message must be sent from a verified email address or domain.   If your account is still in the Amazon SES sandbox, you may send only to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see Verifying Email Addresses and Domains in the Amazon SES Developer Guide.    The maximum message size is 10 MB.   Each Destination parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format UserName@[SubDomain.]Domain.TopLevelDomain), the entire message is rejected, even if the message contains other recipients that are valid.   The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the SendBulkTemplatedEmail operation several times to send the message to each group.   The number of destinations you can contact in a single call can be limited by your account's maximum sending rate.
    ///
    /// Parameters:
    ///   - configurationSetName: The name of the configuration set to use when you send an email using SendBulkTemplatedEmail.
    ///   - defaultTags: A list of tags, in the form of name/value pairs, to apply to an email that you send to a destination using SendBulkTemplatedEmail.
    ///   - defaultTemplateData: A list of replacement values to apply to the template when replacement data is not specified in a Destination object. These values act as a default or fallback option when no other data is available. The template data is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
    ///   - destinations: One or more Destination objects. All of the recipients in a Destination receive the same version of the email. You can specify up to 50 Destination objects within a Destinations array.
    ///   - replyToAddresses: The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address receives the reply.
    ///   - returnPath: The email address that bounces and complaints are forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message is returned from the recipient's ISP; this message is forwarded to the email address specified by the ReturnPath parameter. The ReturnPath parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.
    ///   - returnPathArn: This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the ReturnPath parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use feedback@example.com, then you would specify the ReturnPathArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the ReturnPath to be feedback@example.com. For more information about sending authorization, see the Amazon SES Developer Guide.
    ///   - source: The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the Amazon SES Developer Guide. If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the SourceArn parameter. For more information about sending authorization, see the Amazon SES Developer Guide.  Amazon SES does not support the SMTPUTF8 extension, as described in RFC6531. For this reason, the email address string must be 7-bit ASCII. If you want to send to or from email addresses that contain Unicode characters in the domain part of an address, you must encode the domain using Punycode. Punycode is not permitted in the local part of the email address (the part before the @ sign) nor in the "friendly from" name. If you want to use Unicode characters in the "friendly from" name, you must encode the "friendly from" name using MIME encoded-word syntax, as described in Sending raw email using the Amazon SES API. For more information about Punycode, see RFC 3492.
    ///   - sourceArn: This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the Source parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to send from user@example.com, then you would specify the SourceArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the Source to be user@example.com. For more information about sending authorization, see the Amazon SES Developer Guide.
    ///   - template: The template to use when sending this email.
    ///   - templateArn: The ARN of the template to use when sending this email.
    ///   - logger: Logger use during operation
    @inlinable
    public func sendBulkTemplatedEmail(
        configurationSetName: String? = nil,
        defaultTags: [MessageTag]? = nil,
        defaultTemplateData: String,
        destinations: [BulkEmailDestination],
        replyToAddresses: [String]? = nil,
        returnPath: String? = nil,
        returnPathArn: String? = nil,
        source: String,
        sourceArn: String? = nil,
        template: String,
        templateArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SendBulkTemplatedEmailResponse {
        let input = SendBulkTemplatedEmailRequest(
            configurationSetName: configurationSetName, 
            defaultTags: defaultTags, 
            defaultTemplateData: defaultTemplateData, 
            destinations: destinations, 
            replyToAddresses: replyToAddresses, 
            returnPath: returnPath, 
            returnPathArn: returnPathArn, 
            source: source, 
            sourceArn: sourceArn, 
            template: template, 
            templateArn: templateArn
        )
        return try await self.sendBulkTemplatedEmail(input, logger: logger)
    }

    /// Adds an email address to the list of identities for your Amazon SES account in the current Amazon Web Services Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address. To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see Using Custom Verification Email Templates in the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func sendCustomVerificationEmail(_ input: SendCustomVerificationEmailRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SendCustomVerificationEmailResponse {
        try await self.client.execute(
            operation: "SendCustomVerificationEmail", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds an email address to the list of identities for your Amazon SES account in the current Amazon Web Services Region and attempts to verify it. As a result of executing this operation, a customized verification email is sent to the specified address. To use this operation, you must first create a custom verification email template. For more information about creating and using custom verification email templates, see Using Custom Verification Email Templates in the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - configurationSetName: Name of a configuration set to use when sending the verification email.
    ///   - emailAddress: The email address to verify.
    ///   - templateName: The name of the custom verification email template to use when sending the verification email.
    ///   - logger: Logger use during operation
    @inlinable
    public func sendCustomVerificationEmail(
        configurationSetName: String? = nil,
        emailAddress: String,
        templateName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SendCustomVerificationEmailResponse {
        let input = SendCustomVerificationEmailRequest(
            configurationSetName: configurationSetName, 
            emailAddress: emailAddress, 
            templateName: templateName
        )
        return try await self.sendCustomVerificationEmail(input, logger: logger)
    }

    /// Composes an email message and immediately queues it for sending. To send email using this operation, your message must meet the following requirements:   The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation results in an "Email address not verified" error.    If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see Verifying Email Addresses and Domains in the Amazon SES Developer Guide.    The maximum message size is 10 MB.   The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format UserName@[SubDomain.]Domain.TopLevelDomain), the entire message is rejected, even if the message contains other recipients that are valid.   The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the SendEmail operation several times to send the message to each group.    For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your sending quota). For more information about sending quotas in Amazon SES, see Managing Your Amazon SES Sending Limits in the Amazon SES Developer Guide.
    @Sendable
    @inlinable
    public func sendEmail(_ input: SendEmailRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SendEmailResponse {
        try await self.client.execute(
            operation: "SendEmail", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Composes an email message and immediately queues it for sending. To send email using this operation, your message must meet the following requirements:   The message must be sent from a verified email address or domain. If you attempt to send email using a non-verified address or domain, the operation results in an "Email address not verified" error.    If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see Verifying Email Addresses and Domains in the Amazon SES Developer Guide.    The maximum message size is 10 MB.   The message must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format UserName@[SubDomain.]Domain.TopLevelDomain), the entire message is rejected, even if the message contains other recipients that are valid.   The message may not include more than 50 recipients, across the To:, CC: and BCC: fields. If you need to send an email message to a larger audience, you can divide your recipient list into groups of 50 or fewer, and then call the SendEmail operation several times to send the message to each group.    For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your sending quota). For more information about sending quotas in Amazon SES, see Managing Your Amazon SES Sending Limits in the Amazon SES Developer Guide.
    ///
    /// Parameters:
    ///   - configurationSetName: The name of the configuration set to use when you send an email using SendEmail.
    ///   - destination: The destination for this email, composed of To:, CC:, and BCC: fields.
    ///   - message: The message to be sent.
    ///   - replyToAddresses: The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address receives the reply.
    ///   - returnPath: The email address that bounces and complaints are forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message is returned from the recipient's ISP; this message is forwarded to the email address specified by the ReturnPath parameter. The ReturnPath parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.
    ///   - returnPathArn: This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the ReturnPath parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use feedback@example.com, then you would specify the ReturnPathArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the ReturnPath to be feedback@example.com. For more information about sending authorization, see the Amazon SES Developer Guide.
    ///   - source: The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the Amazon SES Developer Guide. If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the SourceArn parameter. For more information about sending authorization, see the Amazon SES Developer Guide.  Amazon SES does not support the SMTPUTF8 extension, as described in RFC6531. For this reason, the email address string must be 7-bit ASCII. If you want to send to or from email addresses that contain Unicode characters in the domain part of an address, you must encode the domain using Punycode. Punycode is not permitted in the local part of the email address (the part before the @ sign) nor in the "friendly from" name. If you want to use Unicode characters in the "friendly from" name, you must encode the "friendly from" name using MIME encoded-word syntax, as described in Sending raw email using the Amazon SES API. For more information about Punycode, see RFC 3492.
    ///   - sourceArn: This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the Source parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to send from user@example.com, then you would specify the SourceArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the Source to be user@example.com. For more information about sending authorization, see the Amazon SES Developer Guide.
    ///   - tags: A list of tags, in the form of name/value pairs, to apply to an email that you send using SendEmail. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
    ///   - logger: Logger use during operation
    @inlinable
    public func sendEmail(
        configurationSetName: String? = nil,
        destination: Destination,
        message: Message,
        replyToAddresses: [String]? = nil,
        returnPath: String? = nil,
        returnPathArn: String? = nil,
        source: String,
        sourceArn: String? = nil,
        tags: [MessageTag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SendEmailResponse {
        let input = SendEmailRequest(
            configurationSetName: configurationSetName, 
            destination: destination, 
            message: message, 
            replyToAddresses: replyToAddresses, 
            returnPath: returnPath, 
            returnPathArn: returnPathArn, 
            source: source, 
            sourceArn: sourceArn, 
            tags: tags
        )
        return try await self.sendEmail(input, logger: logger)
    }

    /// Composes an email message and immediately queues it for sending. This operation is more flexible than the SendEmail operation. When you use the SendRawEmail operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you need to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments. The SendRawEmail operation has the following requirements:   You can only send email from verified email addresses or domains. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.   If your account is still in the Amazon SES sandbox, you can only send email to other verified addresses in your account, or to addresses that are associated with the Amazon SES mailbox simulator.   The maximum message size, including attachments, is 10 MB.   Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.   If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format UserName@[SubDomain.]Domain.TopLevelDomain), Amazon SES rejects the entire message, even if the other addresses are valid.   Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.   Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see MIME Encoding in the Amazon SES Developer Guide.   Additionally, keep the following considerations in mind when using the SendRawEmail operation:   Although you can customize the message headers when using the SendRawEmail operation, Amazon SES automatically applies its own Message-ID and Date headers; if you passed these headers when creating the message, they are overwritten by the values that Amazon SES provides.   If you are using sending authorization to send on behalf of another user, SendRawEmail enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters SourceArn, FromArn, and/or ReturnPathArn, or you can include the following X-headers in the header of your raw email:    X-SES-SOURCE-ARN     X-SES-FROM-ARN     X-SES-RETURN-PATH-ARN     Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.  If you only specify the SourceIdentityArn parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified. For more information about sending authorization, see the Using Sending Authorization with Amazon SES in the Amazon SES Developer Guide.    For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your sending quota). For more information about sending quotas in Amazon SES, see Managing Your Amazon SES Sending Limits in the Amazon SES Developer Guide.
    @Sendable
    @inlinable
    public func sendRawEmail(_ input: SendRawEmailRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SendRawEmailResponse {
        try await self.client.execute(
            operation: "SendRawEmail", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Composes an email message and immediately queues it for sending. This operation is more flexible than the SendEmail operation. When you use the SendRawEmail operation, you can specify the headers of the message as well as its content. This flexibility is useful, for example, when you need to send a multipart MIME email (such a message that contains both a text and an HTML version). You can also use this operation to send messages that include attachments. The SendRawEmail operation has the following requirements:   You can only send email from verified email addresses or domains. If you try to send email from an address that isn't verified, the operation results in an "Email address not verified" error.   If your account is still in the Amazon SES sandbox, you can only send email to other verified addresses in your account, or to addresses that are associated with the Amazon SES mailbox simulator.   The maximum message size, including attachments, is 10 MB.   Each message has to include at least one recipient address. A recipient address includes any address on the To:, CC:, or BCC: lines.   If you send a single message to more than one recipient address, and one of the recipient addresses isn't in a valid format (that is, it's not in the format UserName@[SubDomain.]Domain.TopLevelDomain), Amazon SES rejects the entire message, even if the other addresses are valid.   Each message can include up to 50 recipient addresses across the To:, CC:, or BCC: lines. If you need to send a single message to more than 50 recipients, you have to split the list of recipient addresses into groups of less than 50 recipients, and send separate messages to each group.   Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message parts. However, if Amazon SES has to modify the contents of your message (for example, if you use open and click tracking), 8-bit content isn't preserved. For this reason, we highly recommend that you encode all content that isn't 7-bit ASCII. For more information, see MIME Encoding in the Amazon SES Developer Guide.   Additionally, keep the following considerations in mind when using the SendRawEmail operation:   Although you can customize the message headers when using the SendRawEmail operation, Amazon SES automatically applies its own Message-ID and Date headers; if you passed these headers when creating the message, they are overwritten by the values that Amazon SES provides.   If you are using sending authorization to send on behalf of another user, SendRawEmail enables you to specify the cross-account identity for the email's Source, From, and Return-Path parameters in one of two ways: you can pass optional parameters SourceArn, FromArn, and/or ReturnPathArn, or you can include the following X-headers in the header of your raw email:    X-SES-SOURCE-ARN     X-SES-FROM-ARN     X-SES-RETURN-PATH-ARN     Don't include these X-headers in the DKIM signature. Amazon SES removes these before it sends the email.  If you only specify the SourceIdentityArn parameter, Amazon SES sets the From and Return-Path addresses to the same identity that you specified. For more information about sending authorization, see the Using Sending Authorization with Amazon SES in the Amazon SES Developer Guide.    For every message that you send, the total number of recipients (including each recipient in the To:, CC: and BCC: fields) is counted against the maximum number of emails you can send in a 24-hour period (your sending quota). For more information about sending quotas in Amazon SES, see Managing Your Amazon SES Sending Limits in the Amazon SES Developer Guide.
    ///
    /// Parameters:
    ///   - configurationSetName: The name of the configuration set to use when you send an email using SendRawEmail.
    ///   - destinations: A list of destinations for the message, consisting of To:, CC:, and BCC: addresses.
    ///   - fromArn: This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to specify a particular "From" address in the header of the raw email. Instead of using this parameter, you can use the X-header X-SES-FROM-ARN in the raw message of the email. If you use both the FromArn parameter and the corresponding X-header, Amazon SES uses the value of the FromArn parameter.  For information about when to use this parameter, see the description of SendRawEmail in this guide, or see the Amazon SES Developer Guide.
    ///   - rawMessage: The raw email message itself. The message has to meet the following criteria:   The message has to contain a header and a body, separated by a blank line.   All of the required header fields must be present in the message.   Each part of a multipart MIME message must be formatted properly.   Attachments must be of a content type that Amazon SES supports. For a list on unsupported content types, see Unsupported Attachment Types in the Amazon SES Developer Guide.   The entire message must be base64-encoded.   If any of the MIME parts in your message contain content that is outside of the 7-bit ASCII character range, we highly recommend that you encode that content. For more information, see Sending Raw Email in the Amazon SES Developer Guide.   Per RFC 5321, the maximum length of each line of text, including the , must not exceed 1,000 characters.
    ///   - returnPathArn: This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the ReturnPath parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use feedback@example.com, then you would specify the ReturnPathArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the ReturnPath to be feedback@example.com. Instead of using this parameter, you can use the X-header X-SES-RETURN-PATH-ARN in the raw message of the email. If you use both the ReturnPathArn parameter and the corresponding X-header, Amazon SES uses the value of the ReturnPathArn parameter.  For information about when to use this parameter, see the description of SendRawEmail in this guide, or see the Amazon SES Developer Guide.
    ///   - source: The identity's email address. If you do not provide a value for this parameter, you must specify a "From" address in the raw text of the message. (You can also specify both.)  Amazon SES does not support the SMTPUTF8 extension, as described inRFC6531. For this reason, the email address string must be 7-bit ASCII. If you want to send to or from email addresses that contain Unicode characters in the domain part of an address, you must encode the domain using Punycode. Punycode is not permitted in the local part of the email address (the part before the @ sign) nor in the "friendly from" name. If you want to use Unicode characters in the "friendly from" name, you must encode the "friendly from" name using MIME encoded-word syntax, as described in Sending raw email using the Amazon SES API. For more information about Punycode, see RFC 3492.  If you specify the Source parameter and have feedback forwarding enabled, then bounces and complaints are sent to this email address. This takes precedence over any Return-Path header that you might include in the raw text of the message.
    ///   - sourceArn: This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the Source parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to send from user@example.com, then you would specify the SourceArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the Source to be user@example.com. Instead of using this parameter, you can use the X-header X-SES-SOURCE-ARN in the raw message of the email. If you use both the SourceArn parameter and the corresponding X-header, Amazon SES uses the value of the SourceArn parameter.  For information about when to use this parameter, see the description of SendRawEmail in this guide, or see the Amazon SES Developer Guide.
    ///   - tags: A list of tags, in the form of name/value pairs, to apply to an email that you send using SendRawEmail. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
    ///   - logger: Logger use during operation
    @inlinable
    public func sendRawEmail(
        configurationSetName: String? = nil,
        destinations: [String]? = nil,
        fromArn: String? = nil,
        rawMessage: RawMessage,
        returnPathArn: String? = nil,
        source: String? = nil,
        sourceArn: String? = nil,
        tags: [MessageTag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SendRawEmailResponse {
        let input = SendRawEmailRequest(
            configurationSetName: configurationSetName, 
            destinations: destinations, 
            fromArn: fromArn, 
            rawMessage: rawMessage, 
            returnPathArn: returnPathArn, 
            source: source, 
            sourceArn: sourceArn, 
            tags: tags
        )
        return try await self.sendRawEmail(input, logger: logger)
    }

    /// Composes an email message using an email template and immediately queues it for sending. To send email using this operation, your call must meet the following requirements:   The call must refer to an existing email template. You can create email templates using the CreateTemplate operation.   The message must be sent from a verified email address or domain.   If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see Verifying Email Addresses and Domains in the Amazon SES Developer Guide.    The maximum message size is 10 MB.   Calls to the SendTemplatedEmail operation may only include one Destination parameter. A destination is a set of recipients that receives the same version of the email. The Destination parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.   The Destination parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format UserName@[SubDomain.]Domain.TopLevelDomain), the entire message is rejected, even if the message contains other recipients that are valid.    If your call to the SendTemplatedEmail operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email. For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see Sending Personalized Email Using the Amazon SES API in the Amazon Simple Email Service Developer Guide.
    @Sendable
    @inlinable
    public func sendTemplatedEmail(_ input: SendTemplatedEmailRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SendTemplatedEmailResponse {
        try await self.client.execute(
            operation: "SendTemplatedEmail", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Composes an email message using an email template and immediately queues it for sending. To send email using this operation, your call must meet the following requirements:   The call must refer to an existing email template. You can create email templates using the CreateTemplate operation.   The message must be sent from a verified email address or domain.   If your account is still in the Amazon SES sandbox, you may only send to verified addresses or domains, or to email addresses associated with the Amazon SES Mailbox Simulator. For more information, see Verifying Email Addresses and Domains in the Amazon SES Developer Guide.    The maximum message size is 10 MB.   Calls to the SendTemplatedEmail operation may only include one Destination parameter. A destination is a set of recipients that receives the same version of the email. The Destination parameter can include up to 50 recipients, across the To:, CC: and BCC: fields.   The Destination parameter must include at least one recipient email address. The recipient address can be a To: address, a CC: address, or a BCC: address. If a recipient email address is invalid (that is, it is not in the format UserName@[SubDomain.]Domain.TopLevelDomain), the entire message is rejected, even if the message contains other recipients that are valid.    If your call to the SendTemplatedEmail operation includes all of the required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES can't render the email because the template contains errors, it doesn't send the email. Additionally, because it already accepted the message, Amazon SES doesn't return a message stating that it was unable to send the email. For these reasons, we highly recommend that you set up Amazon SES to send you notifications when Rendering Failure events occur. For more information, see Sending Personalized Email Using the Amazon SES API in the Amazon Simple Email Service Developer Guide.
    ///
    /// Parameters:
    ///   - configurationSetName: The name of the configuration set to use when you send an email using SendTemplatedEmail.
    ///   - destination: The destination for this email, composed of To:, CC:, and BCC: fields. A Destination can include up to 50 recipients across these three fields.
    ///   - replyToAddresses: The reply-to email address(es) for the message. If the recipient replies to the message, each reply-to address receives the reply.
    ///   - returnPath: The email address that bounces and complaints are forwarded to when feedback forwarding is enabled. If the message cannot be delivered to the recipient, then an error message is returned from the recipient's ISP; this message is forwarded to the email address specified by the ReturnPath parameter. The ReturnPath parameter is never overwritten. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.
    ///   - returnPathArn: This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the ReturnPath parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use feedback@example.com, then you would specify the ReturnPathArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the ReturnPath to be feedback@example.com. For more information about sending authorization, see the Amazon SES Developer Guide.
    ///   - source: The email address that is sending the email. This email address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES. For information about verifying identities, see the Amazon SES Developer Guide. If you are sending on behalf of another user and have been permitted to do so by a sending authorization policy, then you must also specify the SourceArn parameter. For more information about sending authorization, see the Amazon SES Developer Guide.  Amazon SES does not support the SMTPUTF8 extension, as described in RFC6531. for this reason, The email address string must be 7-bit ASCII. If you want to send to or from email addresses that contain Unicode characters in the domain part of an address, you must encode the domain using Punycode. Punycode is not permitted in the local part of the email address (the part before the @ sign) nor in the "friendly from" name. If you want to use Unicode characters in the "friendly from" name, you must encode the "friendly from" name using MIME encoded-word syntax, as described in Sending raw email using the Amazon SES API. For more information about Punycode, see RFC 3492.
    ///   - sourceArn: This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to send for the email address specified in the Source parameter. For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to send from user@example.com, then you would specify the SourceArn to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the Source to be user@example.com. For more information about sending authorization, see the Amazon SES Developer Guide.
    ///   - tags: A list of tags, in the form of name/value pairs, to apply to an email that you send using SendTemplatedEmail. Tags correspond to characteristics of the email that you define, so that you can publish email sending events.
    ///   - template: The template to use when sending this email.
    ///   - templateArn: The ARN of the template to use when sending this email.
    ///   - templateData: A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
    ///   - logger: Logger use during operation
    @inlinable
    public func sendTemplatedEmail(
        configurationSetName: String? = nil,
        destination: Destination,
        replyToAddresses: [String]? = nil,
        returnPath: String? = nil,
        returnPathArn: String? = nil,
        source: String,
        sourceArn: String? = nil,
        tags: [MessageTag]? = nil,
        template: String,
        templateArn: String? = nil,
        templateData: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SendTemplatedEmailResponse {
        let input = SendTemplatedEmailRequest(
            configurationSetName: configurationSetName, 
            destination: destination, 
            replyToAddresses: replyToAddresses, 
            returnPath: returnPath, 
            returnPathArn: returnPathArn, 
            source: source, 
            sourceArn: sourceArn, 
            tags: tags, 
            template: template, 
            templateArn: templateArn, 
            templateData: templateData
        )
        return try await self.sendTemplatedEmail(input, logger: logger)
    }

    /// Sets the specified receipt rule set as the active receipt rule set.  To disable your email-receiving through Amazon SES completely, you can call this operation with RuleSetName set to null.  For information about managing receipt rule sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func setActiveReceiptRuleSet(_ input: SetActiveReceiptRuleSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SetActiveReceiptRuleSetResponse {
        try await self.client.execute(
            operation: "SetActiveReceiptRuleSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sets the specified receipt rule set as the active receipt rule set.  To disable your email-receiving through Amazon SES completely, you can call this operation with RuleSetName set to null.  For information about managing receipt rule sets, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - ruleSetName: The name of the receipt rule set to make active. Setting this value to null disables all email receiving.
    ///   - logger: Logger use during operation
    @inlinable
    public func setActiveReceiptRuleSet(
        ruleSetName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SetActiveReceiptRuleSetResponse {
        let input = SetActiveReceiptRuleSetRequest(
            ruleSetName: ruleSetName
        )
        return try await self.setActiveReceiptRuleSet(input, logger: logger)
    }

    /// Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.  For email addresses (for example, user@example.com), you can only enable DKIM signing if the corresponding domain (in this case, example.com) has been set up to use Easy DKIM.  You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete.  You can execute this operation no more than once per second. For more information about Easy DKIM signing, go to the Amazon SES Developer Guide.
    @Sendable
    @inlinable
    public func setIdentityDkimEnabled(_ input: SetIdentityDkimEnabledRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SetIdentityDkimEnabledResponse {
        try await self.client.execute(
            operation: "SetIdentityDkimEnabled", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends from addresses on that domain. If Easy DKIM signing is enabled for an email address, then Amazon SES uses DKIM to sign all email it sends from that address.  For email addresses (for example, user@example.com), you can only enable DKIM signing if the corresponding domain (in this case, example.com) has been set up to use Easy DKIM.  You can enable DKIM signing for an identity at any time after you start the verification process for the identity, even if the verification process isn't complete.  You can execute this operation no more than once per second. For more information about Easy DKIM signing, go to the Amazon SES Developer Guide.
    ///
    /// Parameters:
    ///   - dkimEnabled: Sets whether DKIM signing is enabled for an identity. Set to true to enable DKIM signing for this identity; false to disable it.
    ///   - identity: The identity for which DKIM signing should be enabled or disabled.
    ///   - logger: Logger use during operation
    @inlinable
    public func setIdentityDkimEnabled(
        dkimEnabled: Bool = false,
        identity: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SetIdentityDkimEnabledResponse {
        let input = SetIdentityDkimEnabledRequest(
            dkimEnabled: dkimEnabled, 
            identity: identity
        )
        return try await self.setIdentityDkimEnabled(input, logger: logger)
    }

    /// Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.  Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.  You can execute this operation no more than once per second. For more information about using notifications with Amazon SES, see the Amazon SES Developer Guide.
    @Sendable
    @inlinable
    public func setIdentityFeedbackForwardingEnabled(_ input: SetIdentityFeedbackForwardingEnabledRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SetIdentityFeedbackForwardingEnabledResponse {
        try await self.client.execute(
            operation: "SetIdentityFeedbackForwardingEnabled", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Given an identity (an email address or a domain), enables or disables whether Amazon SES forwards bounce and complaint notifications as email. Feedback forwarding can only be disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and complaints.  Feedback forwarding does not apply to delivery notifications. Delivery notifications are only available through Amazon SNS.  You can execute this operation no more than once per second. For more information about using notifications with Amazon SES, see the Amazon SES Developer Guide.
    ///
    /// Parameters:
    ///   - forwardingEnabled: Sets whether Amazon SES forwards bounce and complaint notifications as email. true specifies that Amazon SES forwards bounce and complaint notifications as email, in addition to any Amazon SNS topic publishing otherwise specified. false specifies that Amazon SES publishes bounce and complaint notifications only through Amazon SNS. This value can only be set to false when Amazon SNS topics are set for both Bounce and Complaint notification types.
    ///   - identity: The identity for which to set bounce and complaint notification forwarding. Examples: user@example.com, example.com.
    ///   - logger: Logger use during operation
    @inlinable
    public func setIdentityFeedbackForwardingEnabled(
        forwardingEnabled: Bool = false,
        identity: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SetIdentityFeedbackForwardingEnabledResponse {
        let input = SetIdentityFeedbackForwardingEnabledRequest(
            forwardingEnabled: forwardingEnabled, 
            identity: identity
        )
        return try await self.setIdentityFeedbackForwardingEnabled(input, logger: logger)
    }

    /// Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type. You can execute this operation no more than once per second. For more information about using notifications with Amazon SES, see the Amazon SES Developer Guide.
    @Sendable
    @inlinable
    public func setIdentityHeadersInNotificationsEnabled(_ input: SetIdentityHeadersInNotificationsEnabledRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SetIdentityHeadersInNotificationsEnabledResponse {
        try await self.client.execute(
            operation: "SetIdentityHeadersInNotificationsEnabled", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type. You can execute this operation no more than once per second. For more information about using notifications with Amazon SES, see the Amazon SES Developer Guide.
    ///
    /// Parameters:
    ///   - enabled: Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of true specifies that Amazon SES includes headers in notifications, and a value of false specifies that Amazon SES does not include headers in notifications. This value can only be set when NotificationType is already set to use a particular Amazon SNS topic.
    ///   - identity: The identity for which to enable or disable headers in notifications. Examples: user@example.com, example.com.
    ///   - notificationType: The notification type for which to enable or disable headers in notifications.
    ///   - logger: Logger use during operation
    @inlinable
    public func setIdentityHeadersInNotificationsEnabled(
        enabled: Bool = false,
        identity: String,
        notificationType: NotificationType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SetIdentityHeadersInNotificationsEnabledResponse {
        let input = SetIdentityHeadersInNotificationsEnabledRequest(
            enabled: enabled, 
            identity: identity, 
            notificationType: notificationType
        )
        return try await self.setIdentityHeadersInNotificationsEnabled(input, logger: logger)
    }

    /// Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).  To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. To ensure that your emails pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the Amazon SES Developer Guide.  You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func setIdentityMailFromDomain(_ input: SetIdentityMailFromDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SetIdentityMailFromDomainResponse {
        try await self.client.execute(
            operation: "SetIdentityMailFromDomain", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enables or disables the custom MAIL FROM domain setup for a verified identity (an email address or a domain).  To send emails using the specified MAIL FROM domain, you must add an MX record to your MAIL FROM domain's DNS settings. To ensure that your emails pass Sender Policy Framework (SPF) checks, you must also add or update an SPF record. For more information, see the Amazon SES Developer Guide.  You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - behaviorOnMXFailure: The action for Amazon SES to take if it cannot successfully read the required MX record when you send an email. If you choose UseDefaultValue, Amazon SES uses amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose RejectMessage, Amazon SES returns a MailFromDomainNotVerified error and not send the email. The action specified in BehaviorOnMXFailure is taken when the custom MAIL FROM domain setup is in the Pending, Failed, and TemporaryFailure states.
    ///   - identity: The verified identity.
    ///   - mailFromDomain: The custom MAIL FROM domain for the verified identity to use. The MAIL FROM domain must 1) be a subdomain of the verified identity, 2) not be used in a "From" address if the MAIL FROM domain is the destination of email feedback forwarding (for more information, see the Amazon SES Developer Guide), and 3) not be used to receive emails. A value of null disables the custom MAIL FROM setting for the identity.
    ///   - logger: Logger use during operation
    @inlinable
    public func setIdentityMailFromDomain(
        behaviorOnMXFailure: BehaviorOnMXFailure? = nil,
        identity: String,
        mailFromDomain: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SetIdentityMailFromDomainResponse {
        let input = SetIdentityMailFromDomainRequest(
            behaviorOnMXFailure: behaviorOnMXFailure, 
            identity: identity, 
            mailFromDomain: mailFromDomain
        )
        return try await self.setIdentityMailFromDomain(input, logger: logger)
    }

    /// Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify. You can execute this operation no more than once per second. For more information about feedback notification, see the Amazon SES Developer Guide.
    @Sendable
    @inlinable
    public func setIdentityNotificationTopic(_ input: SetIdentityNotificationTopicRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SetIdentityNotificationTopicResponse {
        try await self.client.execute(
            operation: "SetIdentityNotificationTopic", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use this operation, you specify a verified identity, such as an email address or domain. When you send an email that uses the chosen identity in the Source field, Amazon SES sends notifications to the topic you specified. You can send bounce, complaint, or delivery notifications (or any combination of the three) to the Amazon SNS topic that you specify. You can execute this operation no more than once per second. For more information about feedback notification, see the Amazon SES Developer Guide.
    ///
    /// Parameters:
    ///   - identity: The identity (email address or domain) for the Amazon SNS topic.  You can only specify a verified identity for this parameter.  You can specify an identity by using its name or by using its Amazon Resource Name (ARN). The following examples are all valid identities: sender@example.com, example.com, arn:aws:ses:us-east-1:123456789012:identity/example.com.
    ///   - notificationType: The type of notifications that are published to the specified Amazon SNS topic.
    ///   - snsTopic: The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from the request or a null value is passed, SnsTopic is cleared and publishing is disabled.
    ///   - logger: Logger use during operation
    @inlinable
    public func setIdentityNotificationTopic(
        identity: String,
        notificationType: NotificationType,
        snsTopic: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SetIdentityNotificationTopicResponse {
        let input = SetIdentityNotificationTopicRequest(
            identity: identity, 
            notificationType: notificationType, 
            snsTopic: snsTopic
        )
        return try await self.setIdentityNotificationTopic(input, logger: logger)
    }

    /// Sets the position of the specified receipt rule in the receipt rule set. For information about managing receipt rules, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func setReceiptRulePosition(_ input: SetReceiptRulePositionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SetReceiptRulePositionResponse {
        try await self.client.execute(
            operation: "SetReceiptRulePosition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sets the position of the specified receipt rule in the receipt rule set. For information about managing receipt rules, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - after: The name of the receipt rule after which to place the specified receipt rule.
    ///   - ruleName: The name of the receipt rule to reposition.
    ///   - ruleSetName: The name of the receipt rule set that contains the receipt rule to reposition.
    ///   - logger: Logger use during operation
    @inlinable
    public func setReceiptRulePosition(
        after: String? = nil,
        ruleName: String,
        ruleSetName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SetReceiptRulePositionResponse {
        let input = SetReceiptRulePositionRequest(
            after: after, 
            ruleName: ruleName, 
            ruleSetName: ruleSetName
        )
        return try await self.setReceiptRulePosition(input, logger: logger)
    }

    /// Creates a preview of the MIME content of an email when provided with a template and a set of replacement data. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func testRenderTemplate(_ input: TestRenderTemplateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TestRenderTemplateResponse {
        try await self.client.execute(
            operation: "TestRenderTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a preview of the MIME content of an email when provided with a template and a set of replacement data. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - templateData: A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.
    ///   - templateName: The name of the template to render.
    ///   - logger: Logger use during operation
    @inlinable
    public func testRenderTemplate(
        templateData: String,
        templateName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TestRenderTemplateResponse {
        let input = TestRenderTemplateRequest(
            templateData: templateData, 
            templateName: templateName
        )
        return try await self.testRenderTemplate(input, logger: logger)
    }

    /// Enables or disables email sending across your entire Amazon SES account in the current Amazon Web Services Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given Amazon Web Services Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func updateAccountSendingEnabled(_ input: UpdateAccountSendingEnabledRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateAccountSendingEnabled", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enables or disables email sending across your entire Amazon SES account in the current Amazon Web Services Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending across your Amazon SES account in a given Amazon Web Services Region when reputation metrics (such as your bounce or complaint rates) reach certain thresholds. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - enabled: Describes whether email sending is enabled or disabled for your Amazon SES account in the current Amazon Web Services Region.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateAccountSendingEnabled(
        enabled: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateAccountSendingEnabledRequest(
            enabled: enabled
        )
        return try await self.updateAccountSendingEnabled(input, logger: logger)
    }

    /// Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see Monitoring Your Amazon SES Sending Activity in the Amazon SES Developer Guide.   When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).  You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func updateConfigurationSetEventDestination(_ input: UpdateConfigurationSetEventDestinationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateConfigurationSetEventDestinationResponse {
        try await self.client.execute(
            operation: "UpdateConfigurationSetEventDestination", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the event destination of a configuration set. Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see Monitoring Your Amazon SES Sending Activity in the Amazon SES Developer Guide.   When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).  You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - configurationSetName: The name of the configuration set that contains the event destination.
    ///   - eventDestination: The event destination object.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateConfigurationSetEventDestination(
        configurationSetName: String,
        eventDestination: EventDestination,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateConfigurationSetEventDestinationResponse {
        let input = UpdateConfigurationSetEventDestinationRequest(
            configurationSetName: configurationSetName, 
            eventDestination: eventDestination
        )
        return try await self.updateConfigurationSetEventDestination(input, logger: logger)
    }

    /// Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given Amazon Web Services Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func updateConfigurationSetReputationMetricsEnabled(_ input: UpdateConfigurationSetReputationMetricsEnabledRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateConfigurationSetReputationMetricsEnabled", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enables or disables the publishing of reputation metrics for emails sent using a specific configuration set in a given Amazon Web Services Region. Reputation metrics include bounce and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can create alarms when bounce or complaint rates exceed certain thresholds. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - configurationSetName: The name of the configuration set to update.
    ///   - enabled: Describes whether or not Amazon SES publishes reputation metrics for the configuration set, such as bounce and complaint rates, to Amazon CloudWatch.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateConfigurationSetReputationMetricsEnabled(
        configurationSetName: String,
        enabled: Bool = false,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateConfigurationSetReputationMetricsEnabledRequest(
            configurationSetName: configurationSetName, 
            enabled: enabled
        )
        return try await self.updateConfigurationSetReputationMetricsEnabled(input, logger: logger)
    }

    /// Enables or disables email sending for messages sent using a specific configuration set in a given Amazon Web Services Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func updateConfigurationSetSendingEnabled(_ input: UpdateConfigurationSetSendingEnabledRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateConfigurationSetSendingEnabled", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enables or disables email sending for messages sent using a specific configuration set in a given Amazon Web Services Region. You can use this operation in conjunction with Amazon CloudWatch alarms to temporarily pause email sending for a configuration set when the reputation metrics for that configuration set (such as your bounce on complaint rate) exceed certain thresholds. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - configurationSetName: The name of the configuration set to update.
    ///   - enabled: Describes whether email sending is enabled or disabled for the configuration set.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateConfigurationSetSendingEnabled(
        configurationSetName: String,
        enabled: Bool = false,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateConfigurationSetSendingEnabledRequest(
            configurationSetName: configurationSetName, 
            enabled: enabled
        )
        return try await self.updateConfigurationSetSendingEnabled(input, logger: logger)
    }

    /// Modifies an association between a configuration set and a custom domain for open and click event tracking.  By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the Amazon SES Developer Guide.
    @Sendable
    @inlinable
    public func updateConfigurationSetTrackingOptions(_ input: UpdateConfigurationSetTrackingOptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateConfigurationSetTrackingOptionsResponse {
        try await self.client.execute(
            operation: "UpdateConfigurationSetTrackingOptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies an association between a configuration set and a custom domain for open and click event tracking.  By default, images and links used for tracking open and click events are hosted on domains operated by Amazon SES. You can configure a subdomain of your own to handle these events. For information about using custom domains, see the Amazon SES Developer Guide.
    ///
    /// Parameters:
    ///   - configurationSetName: The name of the configuration set.
    ///   - trackingOptions: 
    ///   - logger: Logger use during operation
    @inlinable
    public func updateConfigurationSetTrackingOptions(
        configurationSetName: String,
        trackingOptions: TrackingOptions,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateConfigurationSetTrackingOptionsResponse {
        let input = UpdateConfigurationSetTrackingOptionsRequest(
            configurationSetName: configurationSetName, 
            trackingOptions: trackingOptions
        )
        return try await self.updateConfigurationSetTrackingOptions(input, logger: logger)
    }

    /// Updates an existing custom verification email template. For more information about custom verification email templates, see Using Custom Verification Email Templates in the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func updateCustomVerificationEmailTemplate(_ input: UpdateCustomVerificationEmailTemplateRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateCustomVerificationEmailTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates an existing custom verification email template. For more information about custom verification email templates, see Using Custom Verification Email Templates in the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - failureRedirectionURL: The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.
    ///   - fromEmailAddress: The email address that the custom verification email is sent from.
    ///   - successRedirectionURL: The URL that the recipient of the verification email is sent to if his or her address is successfully verified.
    ///   - templateContent: The content of the custom verification email. The total size of the email must be less than 10 MB. The message body may contain HTML, with some limitations. For more information, see Custom Verification Email Frequently Asked Questions in the Amazon SES Developer Guide.
    ///   - templateName: The name of the custom verification email template to update.
    ///   - templateSubject: The subject line of the custom verification email.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateCustomVerificationEmailTemplate(
        failureRedirectionURL: String? = nil,
        fromEmailAddress: String? = nil,
        successRedirectionURL: String? = nil,
        templateContent: String? = nil,
        templateName: String,
        templateSubject: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateCustomVerificationEmailTemplateRequest(
            failureRedirectionURL: failureRedirectionURL, 
            fromEmailAddress: fromEmailAddress, 
            successRedirectionURL: successRedirectionURL, 
            templateContent: templateContent, 
            templateName: templateName, 
            templateSubject: templateSubject
        )
        return try await self.updateCustomVerificationEmailTemplate(input, logger: logger)
    }

    /// Updates a receipt rule. For information about managing receipt rules, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func updateReceiptRule(_ input: UpdateReceiptRuleRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateReceiptRuleResponse {
        try await self.client.execute(
            operation: "UpdateReceiptRule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a receipt rule. For information about managing receipt rules, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - rule: A data structure that contains the updated receipt rule information.
    ///   - ruleSetName: The name of the receipt rule set that the receipt rule belongs to.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateReceiptRule(
        rule: ReceiptRule,
        ruleSetName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateReceiptRuleResponse {
        let input = UpdateReceiptRuleRequest(
            rule: rule, 
            ruleSetName: ruleSetName
        )
        return try await self.updateReceiptRule(input, logger: logger)
    }

    /// Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single operation. For more information, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func updateTemplate(_ input: UpdateTemplateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateTemplateResponse {
        try await self.client.execute(
            operation: "UpdateTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates an email template. Email templates enable you to send personalized email to one or more destinations in a single operation. For more information, see the Amazon SES Developer Guide. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - template: 
    ///   - logger: Logger use during operation
    @inlinable
    public func updateTemplate(
        template: Template,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateTemplateResponse {
        let input = UpdateTemplateRequest(
            template: template
        )
        return try await self.updateTemplate(input, logger: logger)
    }

    /// Returns a set of DKIM tokens for a domain identity.  When you execute the VerifyDomainDkim operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the VerifyDomainIdentity operation. However, you can't send email from the domain until you either successfully verify it or you successfully set up DKIM for it.  You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM. To create the CNAME records for DKIM authentication, use the following values:    Name: token._domainkey.example.com     Type: CNAME    Value: token.dkim.amazonses.com   In the preceding example, replace token with one of the tokens that are generated when you execute this operation. Replace example.com with your domain. Repeat this process for each token that's generated by this operation. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func verifyDomainDkim(_ input: VerifyDomainDkimRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> VerifyDomainDkimResponse {
        try await self.client.execute(
            operation: "VerifyDomainDkim", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a set of DKIM tokens for a domain identity.  When you execute the VerifyDomainDkim operation, the domain that you specify is added to the list of identities that are associated with your account. This is true even if you haven't already associated the domain with your account by using the VerifyDomainIdentity operation. However, you can't send email from the domain until you either successfully verify it or you successfully set up DKIM for it.  You use the tokens that are generated by this operation to create CNAME records. When Amazon SES detects that you've added these records to the DNS configuration for a domain, you can start sending email from that domain. You can start sending email even if you haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS configuration for your domain. All email that you send from the domain is authenticated using DKIM. To create the CNAME records for DKIM authentication, use the following values:    Name: token._domainkey.example.com     Type: CNAME    Value: token.dkim.amazonses.com   In the preceding example, replace token with one of the tokens that are generated when you execute this operation. Replace example.com with your domain. Repeat this process for each token that's generated by this operation. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - domain: The name of the domain to be verified for Easy DKIM signing.
    ///   - logger: Logger use during operation
    @inlinable
    public func verifyDomainDkim(
        domain: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> VerifyDomainDkimResponse {
        let input = VerifyDomainDkimRequest(
            domain: domain
        )
        return try await self.verifyDomainDkim(input, logger: logger)
    }

    /// Adds a domain to the list of identities for your Amazon SES account in the current Amazon Web Services Region and attempts to verify it. For more information about verifying domains, see Verifying Email Addresses and Domains in the Amazon SES Developer Guide.  You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func verifyDomainIdentity(_ input: VerifyDomainIdentityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> VerifyDomainIdentityResponse {
        try await self.client.execute(
            operation: "VerifyDomainIdentity", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds a domain to the list of identities for your Amazon SES account in the current Amazon Web Services Region and attempts to verify it. For more information about verifying domains, see Verifying Email Addresses and Domains in the Amazon SES Developer Guide.  You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - domain: The domain to be verified.
    ///   - logger: Logger use during operation
    @inlinable
    public func verifyDomainIdentity(
        domain: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> VerifyDomainIdentityResponse {
        let input = VerifyDomainIdentityRequest(
            domain: domain
        )
        return try await self.verifyDomainIdentity(input, logger: logger)
    }

    /// Deprecated. Use the VerifyEmailIdentity operation to verify a new email address.
    @Sendable
    @inlinable
    public func verifyEmailAddress(_ input: VerifyEmailAddressRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "VerifyEmailAddress", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deprecated. Use the VerifyEmailIdentity operation to verify a new email address.
    ///
    /// Parameters:
    ///   - emailAddress: The email address to be verified.
    ///   - logger: Logger use during operation
    @inlinable
    public func verifyEmailAddress(
        emailAddress: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = VerifyEmailAddressRequest(
            emailAddress: emailAddress
        )
        return try await self.verifyEmailAddress(input, logger: logger)
    }

    /// Adds an email address to the list of identities for your Amazon SES account in the current Amazon Web Services Region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address. You can execute this operation no more than once per second.
    @Sendable
    @inlinable
    public func verifyEmailIdentity(_ input: VerifyEmailIdentityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> VerifyEmailIdentityResponse {
        try await self.client.execute(
            operation: "VerifyEmailIdentity", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds an email address to the list of identities for your Amazon SES account in the current Amazon Web Services Region and attempts to verify it. As a result of executing this operation, a verification email is sent to the specified address. You can execute this operation no more than once per second.
    ///
    /// Parameters:
    ///   - emailAddress: The email address to be verified.
    ///   - logger: Logger use during operation
    @inlinable
    public func verifyEmailIdentity(
        emailAddress: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> VerifyEmailIdentityResponse {
        let input = VerifyEmailIdentityRequest(
            emailAddress: emailAddress
        )
        return try await self.verifyEmailIdentity(input, logger: logger)
    }
}

extension SES {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: SES, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension SES {
    /// Return PaginatorSequence for operation ``listCustomVerificationEmailTemplates(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listCustomVerificationEmailTemplatesPaginator(
        _ input: ListCustomVerificationEmailTemplatesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCustomVerificationEmailTemplatesRequest, ListCustomVerificationEmailTemplatesResponse> {
        return .init(
            input: input,
            command: self.listCustomVerificationEmailTemplates,
            inputKey: \ListCustomVerificationEmailTemplatesRequest.nextToken,
            outputKey: \ListCustomVerificationEmailTemplatesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listCustomVerificationEmailTemplates(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of custom verification email templates to return. This value must be at least 1 and less than or equal to 50. If you do not specify a value, or if you specify a value less than 1 or greater than 50, the operation returns up to 50 results.
    ///   - logger: Logger used for logging
    @inlinable
    public func listCustomVerificationEmailTemplatesPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListCustomVerificationEmailTemplatesRequest, ListCustomVerificationEmailTemplatesResponse> {
        let input = ListCustomVerificationEmailTemplatesRequest(
            maxResults: maxResults
        )
        return self.listCustomVerificationEmailTemplatesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listIdentities(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listIdentitiesPaginator(
        _ input: ListIdentitiesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListIdentitiesRequest, ListIdentitiesResponse> {
        return .init(
            input: input,
            command: self.listIdentities,
            inputKey: \ListIdentitiesRequest.nextToken,
            outputKey: \ListIdentitiesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listIdentities(_:logger:)``.
    ///
    /// - Parameters:
    ///   - identityType: The type of the identities to list. Possible values are "EmailAddress" and "Domain". If this parameter is omitted, then all identities are listed.
    ///   - maxItems: The maximum number of identities per page. Possible values are 1-1000 inclusive.
    ///   - logger: Logger used for logging
    @inlinable
    public func listIdentitiesPaginator(
        identityType: IdentityType? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListIdentitiesRequest, ListIdentitiesResponse> {
        let input = ListIdentitiesRequest(
            identityType: identityType, 
            maxItems: maxItems
        )
        return self.listIdentitiesPaginator(input, logger: logger)
    }
}

extension SES.ListCustomVerificationEmailTemplatesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> SES.ListCustomVerificationEmailTemplatesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension SES.ListIdentitiesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> SES.ListIdentitiesRequest {
        return .init(
            identityType: self.identityType,
            maxItems: self.maxItems,
            nextToken: token
        )
    }
}

// MARK: Waiters

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension SES {
    /// Waiter for operation ``getIdentityVerificationAttributes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilIdentityExists(
        _ input: GetIdentityVerificationAttributesRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<GetIdentityVerificationAttributesRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("verificationAttributes.*.verificationStatus", expected: "Success")),
            ],
            minDelayTime: .seconds(3),
            command: self.getIdentityVerificationAttributes
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``getIdentityVerificationAttributes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - identities: A list of identities.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilIdentityExists(
        identities: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = GetIdentityVerificationAttributesRequest(
            identities: identities
        )
        try await self.waitUntilIdentityExists(input, logger: logger)
    }
}
