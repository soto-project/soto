//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS ConnectCases service.
///
/// With Amazon Connect Cases, your agents can track and manage customer issues that require multiple interactions, follow-up tasks, and teams in your contact center. A case represents a customer issue. It records the issue, the steps and interactions taken to resolve the issue, and the outcome. For more information, see Amazon Connect Cases in the Amazon Connect Administrator Guide.
public struct ConnectCases: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the ConnectCases client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "ConnectCases",
            serviceIdentifier: "cases",
            serviceProtocol: .restjson,
            apiVersion: "2022-10-03",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: ConnectCasesErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "us-east-1": "cases-fips.us-east-1.amazonaws.com",
            "us-west-2": "cases-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Returns the description for the list of fields in the request parameters.
    @Sendable
    public func batchGetField(_ input: BatchGetFieldRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchGetFieldResponse {
        return try await self.client.execute(
            operation: "BatchGetField", 
            path: "/domains/{domainId}/fields-batch", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates and updates a set of field options for a single select field in a Cases domain.
    @Sendable
    public func batchPutFieldOptions(_ input: BatchPutFieldOptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchPutFieldOptionsResponse {
        return try await self.client.execute(
            operation: "BatchPutFieldOptions", 
            path: "/domains/{domainId}/fields/{fieldId}/options", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  If you provide a value for PerformedBy.UserArn you must also have connect:DescribeUser permission on the User ARN resource that you provide
    ///  Creates a case in the specified Cases domain. Case system and custom fields are taken as an array id/value pairs with a declared data types. The following fields are required when creating a case:     customer_id - You must provide the full customer profile ARN in this format: arn:aws:profile:your_AWS_Region:your_AWS_account ID:domains/your_profiles_domain_name/profiles/profile_ID     title
    @Sendable
    public func createCase(_ input: CreateCaseRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCaseResponse {
        return try await self.client.execute(
            operation: "CreateCase", 
            path: "/domains/{domainId}/cases", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a domain, which is a container for all case data, such as cases, fields, templates and layouts. Each Amazon Connect instance can be associated with only one Cases domain.  This will not associate your connect instance to Cases domain. Instead, use the Amazon Connect CreateIntegrationAssociation API. You need specific IAM permissions to successfully associate the Cases domain. For more information, see Onboard to Cases.
    @Sendable
    public func createDomain(_ input: CreateDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDomainResponse {
        return try await self.client.execute(
            operation: "CreateDomain", 
            path: "/domains", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a field in the Cases domain. This field is used to define the case object model (that is, defines what data can be captured on cases) in a Cases domain.
    @Sendable
    public func createField(_ input: CreateFieldRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFieldResponse {
        return try await self.client.execute(
            operation: "CreateField", 
            path: "/domains/{domainId}/fields", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a layout in the Cases domain. Layouts define the following configuration in the top section and More Info tab of the Cases user interface:   Fields to display to the users   Field ordering    Title and Status fields cannot be part of layouts since they are not configurable.
    @Sendable
    public func createLayout(_ input: CreateLayoutRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLayoutResponse {
        return try await self.client.execute(
            operation: "CreateLayout", 
            path: "/domains/{domainId}/layouts", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a related item (comments, tasks, and contacts) and associates it with a case.    A Related Item is a resource that is associated with a case. It may or may not have an external identifier linking it to an external resource (for example, a contactArn). All Related Items have their own internal identifier, the relatedItemArn. Examples of related items include comments and contacts.   If you provide a value for performedBy.userArn you must also have DescribeUser permission on the ARN of the user that you provide.
    ///
    @Sendable
    public func createRelatedItem(_ input: CreateRelatedItemRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateRelatedItemResponse {
        return try await self.client.execute(
            operation: "CreateRelatedItem", 
            path: "/domains/{domainId}/cases/{caseId}/related-items/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a template in the Cases domain. This template is used to define the case object model (that is, to define what data can be captured on cases) in a Cases domain. A template must have a unique name within a domain, and it must reference existing field IDs and layout IDs. Additionally, multiple fields with same IDs are not allowed within the same Template. A template can be either Active or Inactive, as indicated by its status. Inactive templates cannot be used to create cases.
    @Sendable
    public func createTemplate(_ input: CreateTemplateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTemplateResponse {
        return try await self.client.execute(
            operation: "CreateTemplate", 
            path: "/domains/{domainId}/templates", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a Cases domain.
    ///   After deleting your domain you must disassociate the deleted domain from your Amazon Connect instance with another API call before being able to use Cases again with this Amazon Connect instance. See DeleteIntegrationAssociation.
    @Sendable
    public func deleteDomain(_ input: DeleteDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDomainResponse {
        return try await self.client.execute(
            operation: "DeleteDomain", 
            path: "/domains/{domainId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a specific case if it exists.
    @Sendable
    public func getCase(_ input: GetCaseRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCaseResponse {
        return try await self.client.execute(
            operation: "GetCase", 
            path: "/domains/{domainId}/cases/{caseId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the audit history about a specific case if it exists.
    @Sendable
    public func getCaseAuditEvents(_ input: GetCaseAuditEventsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCaseAuditEventsResponse {
        return try await self.client.execute(
            operation: "GetCaseAuditEvents", 
            path: "/domains/{domainId}/cases/{caseId}/audit-history", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the case event publishing configuration.
    @Sendable
    public func getCaseEventConfiguration(_ input: GetCaseEventConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCaseEventConfigurationResponse {
        return try await self.client.execute(
            operation: "GetCaseEventConfiguration", 
            path: "/domains/{domainId}/case-event-configuration", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a specific domain if it exists.
    @Sendable
    public func getDomain(_ input: GetDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDomainResponse {
        return try await self.client.execute(
            operation: "GetDomain", 
            path: "/domains/{domainId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the details for the requested layout.
    @Sendable
    public func getLayout(_ input: GetLayoutRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLayoutResponse {
        return try await self.client.execute(
            operation: "GetLayout", 
            path: "/domains/{domainId}/layouts/{layoutId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the details for the requested template.
    @Sendable
    public func getTemplate(_ input: GetTemplateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTemplateResponse {
        return try await self.client.execute(
            operation: "GetTemplate", 
            path: "/domains/{domainId}/templates/{templateId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists cases for a given contact.
    @Sendable
    public func listCasesForContact(_ input: ListCasesForContactRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCasesForContactResponse {
        return try await self.client.execute(
            operation: "ListCasesForContact", 
            path: "/domains/{domainId}/list-cases-for-contact", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all cases domains in the Amazon Web Services account. Each list item is a condensed summary object of the domain.
    @Sendable
    public func listDomains(_ input: ListDomainsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDomainsResponse {
        return try await self.client.execute(
            operation: "ListDomains", 
            path: "/domains-list", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all of the field options for a field identifier in the domain.
    @Sendable
    public func listFieldOptions(_ input: ListFieldOptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFieldOptionsResponse {
        return try await self.client.execute(
            operation: "ListFieldOptions", 
            path: "/domains/{domainId}/fields/{fieldId}/options-list", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all fields in a Cases domain.
    @Sendable
    public func listFields(_ input: ListFieldsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFieldsResponse {
        return try await self.client.execute(
            operation: "ListFields", 
            path: "/domains/{domainId}/fields-list", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all layouts in the given cases domain. Each list item is a condensed summary object of the layout.
    @Sendable
    public func listLayouts(_ input: ListLayoutsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLayoutsResponse {
        return try await self.client.execute(
            operation: "ListLayouts", 
            path: "/domains/{domainId}/layouts-list", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists tags for a resource.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{arn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all of the templates in a Cases domain. Each list item is a condensed summary object of the template.
    @Sendable
    public func listTemplates(_ input: ListTemplatesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTemplatesResponse {
        return try await self.client.execute(
            operation: "ListTemplates", 
            path: "/domains/{domainId}/templates-list", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds case event publishing configuration. For a complete list of fields you can add to the event message, see Create case fields in the Amazon Connect Administrator Guide
    @Sendable
    public func putCaseEventConfiguration(_ input: PutCaseEventConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutCaseEventConfigurationResponse {
        return try await self.client.execute(
            operation: "PutCaseEventConfiguration", 
            path: "/domains/{domainId}/case-event-configuration", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Searches for cases within their associated Cases domain. Search results are returned as a paginated list of abridged case documents.  For customer_id you must provide the full customer profile ARN in this format:  arn:aws:profile:your AWS Region:your AWS account ID:domains/profiles domain name/profiles/profile ID.
    @Sendable
    public func searchCases(_ input: SearchCasesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchCasesResponse {
        return try await self.client.execute(
            operation: "SearchCases", 
            path: "/domains/{domainId}/cases-search", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Searches for related items that are associated with a case.  If no filters are provided, this returns all related items associated with a case.
    @Sendable
    public func searchRelatedItems(_ input: SearchRelatedItemsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchRelatedItemsResponse {
        return try await self.client.execute(
            operation: "SearchRelatedItems", 
            path: "/domains/{domainId}/cases/{caseId}/related-items-search", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds tags to a resource.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{arn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Untags a resource.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{arn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  If you provide a value for PerformedBy.UserArn you must also have connect:DescribeUser permission on the User ARN resource that you provide
    ///  Updates the values of fields on a case. Fields to be updated are received as an array of id/value pairs identical to the CreateCase input . If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.
    @Sendable
    public func updateCase(_ input: UpdateCaseRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateCaseResponse {
        return try await self.client.execute(
            operation: "UpdateCase", 
            path: "/domains/{domainId}/cases/{caseId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the properties of an existing field.
    @Sendable
    public func updateField(_ input: UpdateFieldRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateFieldResponse {
        return try await self.client.execute(
            operation: "UpdateField", 
            path: "/domains/{domainId}/fields/{fieldId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the attributes of an existing layout. If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body. A ValidationException is returned when you add non-existent fieldIds to a layout.  Title and Status fields cannot be part of layouts because they are not configurable.
    @Sendable
    public func updateLayout(_ input: UpdateLayoutRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateLayoutResponse {
        return try await self.client.execute(
            operation: "UpdateLayout", 
            path: "/domains/{domainId}/layouts/{layoutId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the attributes of an existing template. The template attributes that can be modified include name, description, layoutConfiguration, requiredFields, and status. At least one of these attributes must not be null. If a null value is provided for a given attribute, that attribute is ignored and its current value is preserved.
    @Sendable
    public func updateTemplate(_ input: UpdateTemplateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateTemplateResponse {
        return try await self.client.execute(
            operation: "UpdateTemplate", 
            path: "/domains/{domainId}/templates/{templateId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension ConnectCases {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: ConnectCases, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension ConnectCases {
    /// Returns information about a specific case if it exists.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getCasePaginator(
        _ input: GetCaseRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetCaseRequest, GetCaseResponse> {
        return .init(
            input: input,
            command: self.getCase,
            inputKey: \GetCaseRequest.nextToken,
            outputKey: \GetCaseResponse.nextToken,
            logger: logger
        )
    }

    /// Returns the audit history about a specific case if it exists.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getCaseAuditEventsPaginator(
        _ input: GetCaseAuditEventsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetCaseAuditEventsRequest, GetCaseAuditEventsResponse> {
        return .init(
            input: input,
            command: self.getCaseAuditEvents,
            inputKey: \GetCaseAuditEventsRequest.nextToken,
            outputKey: \GetCaseAuditEventsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists cases for a given contact.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listCasesForContactPaginator(
        _ input: ListCasesForContactRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCasesForContactRequest, ListCasesForContactResponse> {
        return .init(
            input: input,
            command: self.listCasesForContact,
            inputKey: \ListCasesForContactRequest.nextToken,
            outputKey: \ListCasesForContactResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all cases domains in the Amazon Web Services account. Each list item is a condensed summary object of the domain.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDomainsPaginator(
        _ input: ListDomainsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDomainsRequest, ListDomainsResponse> {
        return .init(
            input: input,
            command: self.listDomains,
            inputKey: \ListDomainsRequest.nextToken,
            outputKey: \ListDomainsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all of the field options for a field identifier in the domain.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listFieldOptionsPaginator(
        _ input: ListFieldOptionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListFieldOptionsRequest, ListFieldOptionsResponse> {
        return .init(
            input: input,
            command: self.listFieldOptions,
            inputKey: \ListFieldOptionsRequest.nextToken,
            outputKey: \ListFieldOptionsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all fields in a Cases domain.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listFieldsPaginator(
        _ input: ListFieldsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListFieldsRequest, ListFieldsResponse> {
        return .init(
            input: input,
            command: self.listFields,
            inputKey: \ListFieldsRequest.nextToken,
            outputKey: \ListFieldsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all layouts in the given cases domain. Each list item is a condensed summary object of the layout.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listLayoutsPaginator(
        _ input: ListLayoutsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLayoutsRequest, ListLayoutsResponse> {
        return .init(
            input: input,
            command: self.listLayouts,
            inputKey: \ListLayoutsRequest.nextToken,
            outputKey: \ListLayoutsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all of the templates in a Cases domain. Each list item is a condensed summary object of the template.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTemplatesPaginator(
        _ input: ListTemplatesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTemplatesRequest, ListTemplatesResponse> {
        return .init(
            input: input,
            command: self.listTemplates,
            inputKey: \ListTemplatesRequest.nextToken,
            outputKey: \ListTemplatesResponse.nextToken,
            logger: logger
        )
    }

    /// Searches for cases within their associated Cases domain. Search results are returned as a paginated list of abridged case documents.  For customer_id you must provide the full customer profile ARN in this format:  arn:aws:profile:your AWS Region:your AWS account ID:domains/profiles domain name/profiles/profile ID.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func searchCasesPaginator(
        _ input: SearchCasesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SearchCasesRequest, SearchCasesResponse> {
        return .init(
            input: input,
            command: self.searchCases,
            inputKey: \SearchCasesRequest.nextToken,
            outputKey: \SearchCasesResponse.nextToken,
            logger: logger
        )
    }

    /// Searches for related items that are associated with a case.  If no filters are provided, this returns all related items associated with a case.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func searchRelatedItemsPaginator(
        _ input: SearchRelatedItemsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SearchRelatedItemsRequest, SearchRelatedItemsResponse> {
        return .init(
            input: input,
            command: self.searchRelatedItems,
            inputKey: \SearchRelatedItemsRequest.nextToken,
            outputKey: \SearchRelatedItemsResponse.nextToken,
            logger: logger
        )
    }
}

extension ConnectCases.GetCaseAuditEventsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ConnectCases.GetCaseAuditEventsRequest {
        return .init(
            caseId: self.caseId,
            domainId: self.domainId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension ConnectCases.GetCaseRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ConnectCases.GetCaseRequest {
        return .init(
            caseId: self.caseId,
            domainId: self.domainId,
            fields: self.fields,
            nextToken: token
        )
    }
}

extension ConnectCases.ListCasesForContactRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ConnectCases.ListCasesForContactRequest {
        return .init(
            contactArn: self.contactArn,
            domainId: self.domainId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension ConnectCases.ListDomainsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ConnectCases.ListDomainsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension ConnectCases.ListFieldOptionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ConnectCases.ListFieldOptionsRequest {
        return .init(
            domainId: self.domainId,
            fieldId: self.fieldId,
            maxResults: self.maxResults,
            nextToken: token,
            values: self.values
        )
    }
}

extension ConnectCases.ListFieldsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ConnectCases.ListFieldsRequest {
        return .init(
            domainId: self.domainId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension ConnectCases.ListLayoutsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ConnectCases.ListLayoutsRequest {
        return .init(
            domainId: self.domainId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension ConnectCases.ListTemplatesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ConnectCases.ListTemplatesRequest {
        return .init(
            domainId: self.domainId,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )
    }
}

extension ConnectCases.SearchCasesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ConnectCases.SearchCasesRequest {
        return .init(
            domainId: self.domainId,
            fields: self.fields,
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token,
            searchTerm: self.searchTerm,
            sorts: self.sorts
        )
    }
}

extension ConnectCases.SearchRelatedItemsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ConnectCases.SearchRelatedItemsRequest {
        return .init(
            caseId: self.caseId,
            domainId: self.domainId,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
