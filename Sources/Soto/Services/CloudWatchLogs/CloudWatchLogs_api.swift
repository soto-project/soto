//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS CloudWatchLogs service.
///
/// You can use Amazon CloudWatch Logs to monitor, store, and access your log files from EC2 instances, CloudTrail, and other sources. You can then retrieve the associated log data from CloudWatch Logs using the CloudWatch console. Alternatively, you can use CloudWatch Logs commands in the Amazon Web Services CLI, CloudWatch Logs API, or CloudWatch Logs SDK. You can use CloudWatch Logs to:    Monitor logs from EC2 instances in real time: You can use CloudWatch Logs to monitor applications and systems using log data. For example, CloudWatch Logs can track the number of errors that occur in your application logs. Then, it can send you a notification whenever the rate of errors exceeds a threshold that you specify. CloudWatch Logs uses your log data for monitoring so no code changes are required. For example, you can monitor application logs for specific literal terms (such as "NullReferenceException"). You can also count the number of occurrences of a literal term at a particular position in log data (such as "404" status codes in an Apache access log). When the term you are searching for is found, CloudWatch Logs reports the data to a CloudWatch metric that you specify.    Monitor CloudTrail logged events: You can create alarms in CloudWatch and receive notifications of particular API activity as captured by CloudTrail. You can use the notification to perform troubleshooting.    Archive log data: You can use CloudWatch Logs to store your log data in highly durable storage. You can change the log retention setting so that any log events earlier than this setting are automatically deleted. The CloudWatch Logs agent helps to quickly send both rotated and non-rotated log data off of a host and into the log service. You can then access the raw log data when you need it.
public struct CloudWatchLogs: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the CloudWatchLogs client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "Logs_20140328",
            serviceName: "CloudWatchLogs",
            serviceIdentifier: "logs",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2014-03-28",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: CloudWatchLogsErrorType.self,
            xmlNamespace: "http://monitoring.amazonaws.com/doc/2014-03-28/",
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.dualstack]: .init(endpoints: [
            "af-south-1": "logs.af-south-1.api.aws",
            "ap-east-1": "logs.ap-east-1.api.aws",
            "ap-northeast-1": "logs.ap-northeast-1.api.aws",
            "ap-northeast-2": "logs.ap-northeast-2.api.aws",
            "ap-northeast-3": "logs.ap-northeast-3.api.aws",
            "ap-south-1": "logs.ap-south-1.api.aws",
            "ap-south-2": "logs.ap-south-2.api.aws",
            "ap-southeast-1": "logs.ap-southeast-1.api.aws",
            "ap-southeast-2": "logs.ap-southeast-2.api.aws",
            "ap-southeast-3": "logs.ap-southeast-3.api.aws",
            "ap-southeast-4": "logs.ap-southeast-4.api.aws",
            "ca-central-1": "logs.ca-central-1.api.aws",
            "ca-west-1": "logs.ca-west-1.api.aws",
            "cn-north-1": "logs.cn-north-1.api.amazonwebservices.com.cn",
            "cn-northwest-1": "logs.cn-northwest-1.api.amazonwebservices.com.cn",
            "eu-central-1": "logs.eu-central-1.api.aws",
            "eu-central-2": "logs.eu-central-2.api.aws",
            "eu-north-1": "logs.eu-north-1.api.aws",
            "eu-south-1": "logs.eu-south-1.api.aws",
            "eu-south-2": "logs.eu-south-2.api.aws",
            "eu-west-1": "logs.eu-west-1.api.aws",
            "eu-west-2": "logs.eu-west-2.api.aws",
            "eu-west-3": "logs.eu-west-3.api.aws",
            "il-central-1": "logs.il-central-1.api.aws",
            "me-central-1": "logs.me-central-1.api.aws",
            "me-south-1": "logs.me-south-1.api.aws",
            "sa-east-1": "logs.sa-east-1.api.aws",
            "us-east-1": "logs.us-east-1.api.aws",
            "us-east-2": "logs.us-east-2.api.aws",
            "us-gov-east-1": "logs.us-gov-east-1.api.aws",
            "us-gov-west-1": "logs.us-gov-west-1.api.aws",
            "us-west-1": "logs.us-west-1.api.aws",
            "us-west-2": "logs.us-west-2.api.aws"
        ]),
        [.fips]: .init(endpoints: [
            "ca-central-1": "logs-fips.ca-central-1.amazonaws.com",
            "ca-west-1": "logs-fips.ca-west-1.amazonaws.com",
            "us-east-1": "logs-fips.us-east-1.amazonaws.com",
            "us-east-2": "logs-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "logs.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "logs.us-gov-west-1.amazonaws.com",
            "us-west-1": "logs-fips.us-west-1.amazonaws.com",
            "us-west-2": "logs-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Associates the specified KMS key with either one log group in the account, or with all stored CloudWatch Logs query insights results in the account. When you use AssociateKmsKey, you specify either the logGroupName parameter or the resourceIdentifier parameter. You can't specify both of those parameters in the same operation.   Specify the logGroupName parameter to cause log events ingested into that log group to be encrypted with that key. Only the log events ingested after the key is associated are encrypted with that key. Associating a KMS key with a log group overrides any existing associations between the log group and a KMS key. After a KMS key is associated with a log group, all newly ingested data for the log group is encrypted using the KMS key. This association is stored as long as the data encrypted with the KMS key is still within CloudWatch Logs. This enables CloudWatch Logs to decrypt this data whenever it is requested. Associating a key with a log group does not cause the results of queries of that log group to be encrypted with that key. To have query results encrypted with a KMS key, you must use an AssociateKmsKey operation with the resourceIdentifier parameter that specifies a query-result resource.    Specify the resourceIdentifier parameter with a query-result resource,  to use that key to encrypt the stored results of all future  StartQuery operations in the account. The response from a  GetQueryResults operation will still return the query results in plain text. Even if you have not associated a key with your query results, the query results are encrypted when stored, using the default CloudWatch Logs method. If you run a query from a monitoring account that queries logs in a source account, the query results key from the monitoring account, if any, is used.    If you delete the key that is used to encrypt log events or log group query results, then all the associated stored log events or query results that were encrypted with that key  will be unencryptable and unusable.   CloudWatch Logs supports only symmetric KMS keys. Do not use an associate an asymmetric KMS key with your log group or query results. For more information, see Using Symmetric and Asymmetric Keys.  It can take up to 5 minutes for this operation to take effect. If you attempt to associate a KMS key with a log group but the KMS key does not exist or the KMS key is disabled, you receive an InvalidParameterException error.
    @Sendable
    @inlinable
    public func associateKmsKey(_ input: AssociateKmsKeyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "AssociateKmsKey", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates the specified KMS key with either one log group in the account, or with all stored CloudWatch Logs query insights results in the account. When you use AssociateKmsKey, you specify either the logGroupName parameter or the resourceIdentifier parameter. You can't specify both of those parameters in the same operation.   Specify the logGroupName parameter to cause log events ingested into that log group to be encrypted with that key. Only the log events ingested after the key is associated are encrypted with that key. Associating a KMS key with a log group overrides any existing associations between the log group and a KMS key. After a KMS key is associated with a log group, all newly ingested data for the log group is encrypted using the KMS key. This association is stored as long as the data encrypted with the KMS key is still within CloudWatch Logs. This enables CloudWatch Logs to decrypt this data whenever it is requested. Associating a key with a log group does not cause the results of queries of that log group to be encrypted with that key. To have query results encrypted with a KMS key, you must use an AssociateKmsKey operation with the resourceIdentifier parameter that specifies a query-result resource.    Specify the resourceIdentifier parameter with a query-result resource,  to use that key to encrypt the stored results of all future  StartQuery operations in the account. The response from a  GetQueryResults operation will still return the query results in plain text. Even if you have not associated a key with your query results, the query results are encrypted when stored, using the default CloudWatch Logs method. If you run a query from a monitoring account that queries logs in a source account, the query results key from the monitoring account, if any, is used.    If you delete the key that is used to encrypt log events or log group query results, then all the associated stored log events or query results that were encrypted with that key  will be unencryptable and unusable.   CloudWatch Logs supports only symmetric KMS keys. Do not use an associate an asymmetric KMS key with your log group or query results. For more information, see Using Symmetric and Asymmetric Keys.  It can take up to 5 minutes for this operation to take effect. If you attempt to associate a KMS key with a log group but the KMS key does not exist or the KMS key is disabled, you receive an InvalidParameterException error.
    ///
    /// Parameters:
    ///   - kmsKeyId: The Amazon Resource Name (ARN) of the KMS key to use when encrypting log data. This must be a symmetric KMS key. For more information, see Amazon Resource Names and Using Symmetric and Asymmetric Keys.
    ///   - logGroupName: The name of the log group. In your AssociateKmsKey operation, you must specify either the resourceIdentifier parameter or the logGroup parameter,  but you can't specify both.
    ///   - resourceIdentifier: Specifies the target for this operation. You must specify one of the following:   Specify the following ARN to have future GetQueryResults operations in this account encrypt the results with the specified KMS key. Replace REGION and ACCOUNT_ID with your Region and account ID.  arn:aws:logs:REGION:ACCOUNT_ID:query-result:*    Specify the ARN of a log group to have CloudWatch Logs use the KMS key to encrypt log events that are ingested and stored by that log group. The log group ARN must be in  the following format. Replace REGION and ACCOUNT_ID with your Region and account ID.  arn:aws:logs:REGION:ACCOUNT_ID:log-group:LOG_GROUP_NAME     In your AssociateKmsKey operation, you must specify either the resourceIdentifier parameter or the logGroup parameter,  but you can't specify both.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateKmsKey(
        kmsKeyId: String,
        logGroupName: String? = nil,
        resourceIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = AssociateKmsKeyRequest(
            kmsKeyId: kmsKeyId, 
            logGroupName: logGroupName, 
            resourceIdentifier: resourceIdentifier
        )
        return try await self.associateKmsKey(input, logger: logger)
    }

    /// Cancels the specified export task. The task must be in the PENDING or RUNNING state.
    @Sendable
    @inlinable
    public func cancelExportTask(_ input: CancelExportTaskRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "CancelExportTask", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancels the specified export task. The task must be in the PENDING or RUNNING state.
    ///
    /// Parameters:
    ///   - taskId: The ID of the export task.
    ///   - logger: Logger use during operation
    @inlinable
    public func cancelExportTask(
        taskId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = CancelExportTaskRequest(
            taskId: taskId
        )
        return try await self.cancelExportTask(input, logger: logger)
    }

    /// Creates a delivery. A delivery is a connection between a logical delivery source and a logical delivery destination that you have already created. Only some Amazon Web Services services support being configured as a delivery source using this operation. These services are listed as Supported [V2 Permissions] in the table at  Enabling  logging from Amazon Web Services services.  A delivery destination can represent a log group in CloudWatch Logs, an Amazon S3 bucket, or a delivery stream in Firehose. To configure logs delivery between a supported Amazon Web Services service and a destination, you must do the following:   Create a delivery source, which is a logical object that represents the resource that is actually sending the logs. For more  information, see PutDeliverySource.   Create a delivery destination, which is a logical object that represents the actual delivery destination.  For more  information, see PutDeliveryDestination.   If you are delivering logs cross-account, you must use  PutDeliveryDestinationPolicy in the destination account to assign an IAM policy to the  destination. This policy allows delivery to that destination.    Use CreateDelivery to create a delivery by pairing exactly one delivery source and one delivery destination.    You can configure a single delivery source to send logs to multiple destinations by creating multiple deliveries. You  can also create multiple deliveries to configure multiple delivery sources to send logs to the same delivery destination. To update an existing delivery configuration, use UpdateDeliveryConfiguration.
    @Sendable
    @inlinable
    public func createDelivery(_ input: CreateDeliveryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDeliveryResponse {
        try await self.client.execute(
            operation: "CreateDelivery", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a delivery. A delivery is a connection between a logical delivery source and a logical delivery destination that you have already created. Only some Amazon Web Services services support being configured as a delivery source using this operation. These services are listed as Supported [V2 Permissions] in the table at  Enabling  logging from Amazon Web Services services.  A delivery destination can represent a log group in CloudWatch Logs, an Amazon S3 bucket, or a delivery stream in Firehose. To configure logs delivery between a supported Amazon Web Services service and a destination, you must do the following:   Create a delivery source, which is a logical object that represents the resource that is actually sending the logs. For more  information, see PutDeliverySource.   Create a delivery destination, which is a logical object that represents the actual delivery destination.  For more  information, see PutDeliveryDestination.   If you are delivering logs cross-account, you must use  PutDeliveryDestinationPolicy in the destination account to assign an IAM policy to the  destination. This policy allows delivery to that destination.    Use CreateDelivery to create a delivery by pairing exactly one delivery source and one delivery destination.    You can configure a single delivery source to send logs to multiple destinations by creating multiple deliveries. You  can also create multiple deliveries to configure multiple delivery sources to send logs to the same delivery destination. To update an existing delivery configuration, use UpdateDeliveryConfiguration.
    ///
    /// Parameters:
    ///   - deliveryDestinationArn: The ARN of the delivery destination to use for this delivery.
    ///   - deliverySourceName: The name of the delivery source to use for this delivery.
    ///   - fieldDelimiter: The field delimiter to use between record fields when the final output format of a delivery is in Plain, W3C, or Raw format.
    ///   - recordFields: The list of record fields to be delivered to the destination, in order.  If the delivery's log source has mandatory fields, they must be included in this list.
    ///   - s3DeliveryConfiguration: This structure contains parameters that are valid only when the delivery's delivery destination is an S3 bucket.
    ///   - tags: An optional list of key-value pairs to associate with the resource. For more information about tagging, see  Tagging Amazon Web Services resources
    ///   - logger: Logger use during operation
    @inlinable
    public func createDelivery(
        deliveryDestinationArn: String,
        deliverySourceName: String,
        fieldDelimiter: String? = nil,
        recordFields: [String]? = nil,
        s3DeliveryConfiguration: S3DeliveryConfiguration? = nil,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateDeliveryResponse {
        let input = CreateDeliveryRequest(
            deliveryDestinationArn: deliveryDestinationArn, 
            deliverySourceName: deliverySourceName, 
            fieldDelimiter: fieldDelimiter, 
            recordFields: recordFields, 
            s3DeliveryConfiguration: s3DeliveryConfiguration, 
            tags: tags
        )
        return try await self.createDelivery(input, logger: logger)
    }

    /// Creates an export task so that you can efficiently export data from a log group to an Amazon S3 bucket. When you perform a CreateExportTask operation, you must use credentials that have permission to write to the S3 bucket that you specify as the destination. Exporting log data to S3 buckets that are encrypted by KMS is supported. Exporting log data to Amazon S3 buckets that have S3 Object Lock enabled with a retention period is also supported. Exporting to S3 buckets that are encrypted with AES-256 is supported.  This is an asynchronous call. If all the required information is provided, this  operation initiates an export task and responds with the ID of the task. After the task has started, you can use DescribeExportTasks to get the status of the export task. Each account can only have one active (RUNNING or PENDING) export task at a time. To cancel an export task, use CancelExportTask. You can export logs from multiple log groups or multiple time ranges to the same S3 bucket. To separate log data for each export task, specify a prefix to be used as the Amazon S3 key prefix for all exported objects.  We recommend that you don't regularly export to Amazon S3 as a way to continuously archive your logs. For that use case, we instaed recommend that  you use subscriptions. For more information about subscriptions, see  Real-time processing of log data with subscriptions.   Time-based sorting on chunks of log data inside an exported file is not guaranteed. You can sort the exported log field data by using Linux utilities.
    @Sendable
    @inlinable
    public func createExportTask(_ input: CreateExportTaskRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateExportTaskResponse {
        try await self.client.execute(
            operation: "CreateExportTask", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an export task so that you can efficiently export data from a log group to an Amazon S3 bucket. When you perform a CreateExportTask operation, you must use credentials that have permission to write to the S3 bucket that you specify as the destination. Exporting log data to S3 buckets that are encrypted by KMS is supported. Exporting log data to Amazon S3 buckets that have S3 Object Lock enabled with a retention period is also supported. Exporting to S3 buckets that are encrypted with AES-256 is supported.  This is an asynchronous call. If all the required information is provided, this  operation initiates an export task and responds with the ID of the task. After the task has started, you can use DescribeExportTasks to get the status of the export task. Each account can only have one active (RUNNING or PENDING) export task at a time. To cancel an export task, use CancelExportTask. You can export logs from multiple log groups or multiple time ranges to the same S3 bucket. To separate log data for each export task, specify a prefix to be used as the Amazon S3 key prefix for all exported objects.  We recommend that you don't regularly export to Amazon S3 as a way to continuously archive your logs. For that use case, we instaed recommend that  you use subscriptions. For more information about subscriptions, see  Real-time processing of log data with subscriptions.   Time-based sorting on chunks of log data inside an exported file is not guaranteed. You can sort the exported log field data by using Linux utilities.
    ///
    /// Parameters:
    ///   - destination: The name of S3 bucket for the exported log data. The bucket must be in the same Amazon Web Services Region.
    ///   - destinationPrefix: The prefix used as the start of the key for every object exported. If you don't specify a value, the default is exportedlogs. The length of this parameter must comply with the S3 object key name length limits. The object key name is a sequence of Unicode characters with UTF-8 encoding,  and can be up to 1,024 bytes.
    ///   - from: The start time of the range for the request, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp earlier than this time are not exported.
    ///   - logGroupName: The name of the log group.
    ///   - logStreamNamePrefix: Export only log streams that match the provided prefix. If you don't specify a value, no prefix filter is applied.
    ///   - taskName: The name of the export task.
    ///   - to: The end time of the range for the request, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not exported. You must specify a time that is not earlier than when this log group was created.
    ///   - logger: Logger use during operation
    @inlinable
    public func createExportTask(
        destination: String,
        destinationPrefix: String? = nil,
        from: Int64,
        logGroupName: String,
        logStreamNamePrefix: String? = nil,
        taskName: String? = nil,
        to: Int64,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateExportTaskResponse {
        let input = CreateExportTaskRequest(
            destination: destination, 
            destinationPrefix: destinationPrefix, 
            from: from, 
            logGroupName: logGroupName, 
            logStreamNamePrefix: logStreamNamePrefix, 
            taskName: taskName, 
            to: to
        )
        return try await self.createExportTask(input, logger: logger)
    }

    /// Creates an anomaly detector that regularly scans one or more  log groups and look for patterns and anomalies in the logs. An anomaly detector can help surface issues by automatically discovering anomalies in your log event traffic.  An anomaly detector uses machine learning algorithms to scan log events and find patterns.  A pattern is a shared text structure that recurs among your log fields.  Patterns provide a useful tool for  analyzing large sets of logs because a large number of log events can often be compressed into a few patterns. The anomaly detector uses pattern recognition to find anomalies, which are unusual log  events. It uses the evaluationFrequency to compare current log events and patterns with trained baselines.  Fields within a pattern are called tokens. Fields that vary within a pattern, such as a  request ID or timestamp, are referred to as dynamic tokens and represented by .  The following is an example of a pattern:  [INFO] Request time:  ms  This pattern represents log events like [INFO] Request time: 327 ms and other similar log events that differ only by the number, in this csse 327. When the pattern is displayed, the different numbers are replaced by    Any parts of log events that are masked as sensitive data are not scanned for anomalies. For more information about masking sensitive data, see  Help protect sensitive log data with masking.
    @Sendable
    @inlinable
    public func createLogAnomalyDetector(_ input: CreateLogAnomalyDetectorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLogAnomalyDetectorResponse {
        try await self.client.execute(
            operation: "CreateLogAnomalyDetector", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an anomaly detector that regularly scans one or more  log groups and look for patterns and anomalies in the logs. An anomaly detector can help surface issues by automatically discovering anomalies in your log event traffic.  An anomaly detector uses machine learning algorithms to scan log events and find patterns.  A pattern is a shared text structure that recurs among your log fields.  Patterns provide a useful tool for  analyzing large sets of logs because a large number of log events can often be compressed into a few patterns. The anomaly detector uses pattern recognition to find anomalies, which are unusual log  events. It uses the evaluationFrequency to compare current log events and patterns with trained baselines.  Fields within a pattern are called tokens. Fields that vary within a pattern, such as a  request ID or timestamp, are referred to as dynamic tokens and represented by .  The following is an example of a pattern:  [INFO] Request time:  ms  This pattern represents log events like [INFO] Request time: 327 ms and other similar log events that differ only by the number, in this csse 327. When the pattern is displayed, the different numbers are replaced by    Any parts of log events that are masked as sensitive data are not scanned for anomalies. For more information about masking sensitive data, see  Help protect sensitive log data with masking.
    ///
    /// Parameters:
    ///   - anomalyVisibilityTime: The number of days to have visibility on an anomaly. After this time period has elapsed for an anomaly,  it will be automatically baselined and the anomaly detector will treat new occurrences of a similar anomaly as  normal. Therefore,  if you do not correct the cause of an  anomaly during the time period specified in anomalyVisibilityTime, it will be considered normal  going forward and will not be detected as an anomaly.
    ///   - detectorName: A name for this anomaly detector.
    ///   - evaluationFrequency: Specifies how often the anomaly detector is to run and look for anomalies. Set this value according to the frequency that the log group receives new logs. For example, if the log group receives new log events every 10 minutes, then 15 minutes might be a good setting for  evaluationFrequency .
    ///   - filterPattern: You can use this parameter to limit the anomaly detection model to examine only log events that match the pattern you specify here. For more information, see Filter and Pattern Syntax.
    ///   - kmsKeyId: Optionally assigns a KMS key to secure this anomaly detector and its findings. If a key is  assigned, the anomalies found and the model used by this detector are encrypted at rest with the key. If  a key is assigned to an anomaly detector, a user must have permissions for both this key and for the  anomaly detector to retrieve information about the anomalies that it finds. Make sure the value provided is a valid KMS key ARN. For more information about using a KMS key and to see the required IAM policy, see Use a KMS key with an anomaly detector.
    ///   - logGroupArnList: An array containing the ARN of the log group that this anomaly detector will watch. You can specify only one log group ARN.
    ///   - tags: An optional list of key-value pairs to associate with the resource. For more information about tagging, see  Tagging Amazon Web Services resources
    ///   - logger: Logger use during operation
    @inlinable
    public func createLogAnomalyDetector(
        anomalyVisibilityTime: Int64? = nil,
        detectorName: String? = nil,
        evaluationFrequency: EvaluationFrequency? = nil,
        filterPattern: String? = nil,
        kmsKeyId: String? = nil,
        logGroupArnList: [String],
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateLogAnomalyDetectorResponse {
        let input = CreateLogAnomalyDetectorRequest(
            anomalyVisibilityTime: anomalyVisibilityTime, 
            detectorName: detectorName, 
            evaluationFrequency: evaluationFrequency, 
            filterPattern: filterPattern, 
            kmsKeyId: kmsKeyId, 
            logGroupArnList: logGroupArnList, 
            tags: tags
        )
        return try await self.createLogAnomalyDetector(input, logger: logger)
    }

    /// Creates a log group with the specified name. You can create up to 1,000,000 log groups per Region per account. You must use the following guidelines when naming a log group:   Log group names must be unique within a Region for an Amazon Web Services account.   Log group names can be between 1 and 512 characters long.   Log group names consist of the following characters: a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen),  '/' (forward slash), '.' (period), and '#' (number sign)   Log group names can't start with the string aws/    When you create a log group, by default the log events in the log group do not expire. To set a retention policy so that events expire and are deleted after a specified time, use PutRetentionPolicy. If you associate an KMS key with the log group, ingested data is encrypted using the KMS key. This association is stored as long as the data encrypted with the KMS key is still within CloudWatch Logs. This enables CloudWatch Logs to decrypt this data whenever it is requested. If you attempt to associate a KMS key with the log group but the KMS key does not exist or the KMS key is disabled, you receive an InvalidParameterException error.   CloudWatch Logs supports only symmetric KMS keys. Do not associate an asymmetric KMS key with your log group. For more information, see Using Symmetric and Asymmetric Keys.
    @Sendable
    @inlinable
    public func createLogGroup(_ input: CreateLogGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "CreateLogGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a log group with the specified name. You can create up to 1,000,000 log groups per Region per account. You must use the following guidelines when naming a log group:   Log group names must be unique within a Region for an Amazon Web Services account.   Log group names can be between 1 and 512 characters long.   Log group names consist of the following characters: a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen),  '/' (forward slash), '.' (period), and '#' (number sign)   Log group names can't start with the string aws/    When you create a log group, by default the log events in the log group do not expire. To set a retention policy so that events expire and are deleted after a specified time, use PutRetentionPolicy. If you associate an KMS key with the log group, ingested data is encrypted using the KMS key. This association is stored as long as the data encrypted with the KMS key is still within CloudWatch Logs. This enables CloudWatch Logs to decrypt this data whenever it is requested. If you attempt to associate a KMS key with the log group but the KMS key does not exist or the KMS key is disabled, you receive an InvalidParameterException error.   CloudWatch Logs supports only symmetric KMS keys. Do not associate an asymmetric KMS key with your log group. For more information, see Using Symmetric and Asymmetric Keys.
    ///
    /// Parameters:
    ///   - kmsKeyId: The Amazon Resource Name (ARN) of the KMS key to use when encrypting log data. For more information, see Amazon Resource Names.
    ///   - logGroupClass: Use this parameter to specify the log group class for this log group. There are two classes:   The Standard log class supports all CloudWatch Logs features.   The Infrequent Access log class supports a subset of CloudWatch Logs features and incurs lower costs.   If you omit this parameter, the default of STANDARD is used.  The value of logGroupClass can't be changed after a log group is created.  For details about the features supported by each class, see  Log classes
    ///   - logGroupName: A name for the log group.
    ///   - tags: The key-value pairs to use for the tags. You can grant users access to certain log groups while preventing them from accessing other log groups. To do so, tag your groups and use IAM policies that refer to those tags. To assign tags when  you create a log group, you must have either the logs:TagResource or logs:TagLogGroup permission. For more information about tagging, see  Tagging Amazon Web Services resources. For more information about using tags to control access, see  Controlling access to Amazon Web Services resources using tags.
    ///   - logger: Logger use during operation
    @inlinable
    public func createLogGroup(
        kmsKeyId: String? = nil,
        logGroupClass: LogGroupClass? = nil,
        logGroupName: String,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = CreateLogGroupRequest(
            kmsKeyId: kmsKeyId, 
            logGroupClass: logGroupClass, 
            logGroupName: logGroupName, 
            tags: tags
        )
        return try await self.createLogGroup(input, logger: logger)
    }

    /// Creates a log stream for the specified log group. A log stream is a sequence of log events that originate from a single source, such as an application instance or a resource that is  being monitored. There is no limit on the number of log streams that you can create for a log group. There is a limit  of 50 TPS on CreateLogStream operations, after which transactions are throttled. You must use the following guidelines when naming a log stream:   Log stream names must be unique within the log group.   Log stream names can be between 1 and 512 characters long.   Don't use ':' (colon) or '*' (asterisk) characters.
    @Sendable
    @inlinable
    public func createLogStream(_ input: CreateLogStreamRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "CreateLogStream", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a log stream for the specified log group. A log stream is a sequence of log events that originate from a single source, such as an application instance or a resource that is  being monitored. There is no limit on the number of log streams that you can create for a log group. There is a limit  of 50 TPS on CreateLogStream operations, after which transactions are throttled. You must use the following guidelines when naming a log stream:   Log stream names must be unique within the log group.   Log stream names can be between 1 and 512 characters long.   Don't use ':' (colon) or '*' (asterisk) characters.
    ///
    /// Parameters:
    ///   - logGroupName: The name of the log group.
    ///   - logStreamName: The name of the log stream.
    ///   - logger: Logger use during operation
    @inlinable
    public func createLogStream(
        logGroupName: String,
        logStreamName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = CreateLogStreamRequest(
            logGroupName: logGroupName, 
            logStreamName: logStreamName
        )
        return try await self.createLogStream(input, logger: logger)
    }

    /// Deletes a CloudWatch Logs account policy. This stops the account-wide policy from applying to log groups in the account. If you delete a data protection  policy or subscription filter policy, any log-group level policies of those types remain in effect. To use this operation, you must be signed on with the correct permissions depending on the type of policy that you are deleting.   To delete a data protection policy, you must have the logs:DeleteDataProtectionPolicy and  logs:DeleteAccountPolicy permissions.   To delete a subscription filter policy, you must have the logs:DeleteSubscriptionFilter and  logs:DeleteAccountPolicy permissions.   To delete a transformer policy, you must have the logs:DeleteTransformer and logs:DeleteAccountPolicy permissions.   To delete a field index policy, you must have the logs:DeleteIndexPolicy and  logs:DeleteAccountPolicy permissions.   If you delete a field index policy, the indexing of the log events that happened before you deleted the policy will still be used for up to 30 days to improve CloudWatch Logs Insights queries.
    @Sendable
    @inlinable
    public func deleteAccountPolicy(_ input: DeleteAccountPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteAccountPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a CloudWatch Logs account policy. This stops the account-wide policy from applying to log groups in the account. If you delete a data protection  policy or subscription filter policy, any log-group level policies of those types remain in effect. To use this operation, you must be signed on with the correct permissions depending on the type of policy that you are deleting.   To delete a data protection policy, you must have the logs:DeleteDataProtectionPolicy and  logs:DeleteAccountPolicy permissions.   To delete a subscription filter policy, you must have the logs:DeleteSubscriptionFilter and  logs:DeleteAccountPolicy permissions.   To delete a transformer policy, you must have the logs:DeleteTransformer and logs:DeleteAccountPolicy permissions.   To delete a field index policy, you must have the logs:DeleteIndexPolicy and  logs:DeleteAccountPolicy permissions.   If you delete a field index policy, the indexing of the log events that happened before you deleted the policy will still be used for up to 30 days to improve CloudWatch Logs Insights queries.
    ///
    /// Parameters:
    ///   - policyName: The name of the policy to delete.
    ///   - policyType: The type of policy to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteAccountPolicy(
        policyName: String,
        policyType: PolicyType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteAccountPolicyRequest(
            policyName: policyName, 
            policyType: policyType
        )
        return try await self.deleteAccountPolicy(input, logger: logger)
    }

    /// Deletes the data protection policy from the specified log group.  For more information about data protection policies, see PutDataProtectionPolicy.
    @Sendable
    @inlinable
    public func deleteDataProtectionPolicy(_ input: DeleteDataProtectionPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteDataProtectionPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the data protection policy from the specified log group.  For more information about data protection policies, see PutDataProtectionPolicy.
    ///
    /// Parameters:
    ///   - logGroupIdentifier: The name or ARN of the log group that you want to delete the data protection policy for.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDataProtectionPolicy(
        logGroupIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteDataProtectionPolicyRequest(
            logGroupIdentifier: logGroupIdentifier
        )
        return try await self.deleteDataProtectionPolicy(input, logger: logger)
    }

    /// Deletes a delivery. A delivery is a connection between a logical delivery source and a logical delivery destination. Deleting a delivery only deletes the connection between the delivery source and delivery destination. It does not delete the delivery destination or the delivery source.
    @Sendable
    @inlinable
    public func deleteDelivery(_ input: DeleteDeliveryRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteDelivery", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a delivery. A delivery is a connection between a logical delivery source and a logical delivery destination. Deleting a delivery only deletes the connection between the delivery source and delivery destination. It does not delete the delivery destination or the delivery source.
    ///
    /// Parameters:
    ///   - id: The unique ID of the delivery to delete. You can find the ID of a delivery with the  DescribeDeliveries operation.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDelivery(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteDeliveryRequest(
            id: id
        )
        return try await self.deleteDelivery(input, logger: logger)
    }

    /// Deletes a delivery destination. A delivery is a connection between a logical delivery source and a logical delivery destination. You can't delete a delivery destination if any current deliveries are associated with it. To find whether any deliveries are associated with  this delivery destination, use the DescribeDeliveries operation and check the deliveryDestinationArn field in the results.
    @Sendable
    @inlinable
    public func deleteDeliveryDestination(_ input: DeleteDeliveryDestinationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteDeliveryDestination", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a delivery destination. A delivery is a connection between a logical delivery source and a logical delivery destination. You can't delete a delivery destination if any current deliveries are associated with it. To find whether any deliveries are associated with  this delivery destination, use the DescribeDeliveries operation and check the deliveryDestinationArn field in the results.
    ///
    /// Parameters:
    ///   - name: The name of the delivery destination that you want to delete. You can find a list of delivery destionation names by using the DescribeDeliveryDestinations operation.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDeliveryDestination(
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteDeliveryDestinationRequest(
            name: name
        )
        return try await self.deleteDeliveryDestination(input, logger: logger)
    }

    /// Deletes a delivery destination policy. For more information about these policies, see PutDeliveryDestinationPolicy.
    @Sendable
    @inlinable
    public func deleteDeliveryDestinationPolicy(_ input: DeleteDeliveryDestinationPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteDeliveryDestinationPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a delivery destination policy. For more information about these policies, see PutDeliveryDestinationPolicy.
    ///
    /// Parameters:
    ///   - deliveryDestinationName: The name of the delivery destination that you want to delete the policy for.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDeliveryDestinationPolicy(
        deliveryDestinationName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteDeliveryDestinationPolicyRequest(
            deliveryDestinationName: deliveryDestinationName
        )
        return try await self.deleteDeliveryDestinationPolicy(input, logger: logger)
    }

    /// Deletes a delivery source. A delivery is a connection between a logical delivery source and a logical delivery destination. You can't delete a delivery source if any current deliveries are associated with it. To find whether any deliveries are associated with  this delivery source, use the DescribeDeliveries operation and check the deliverySourceName field in the results.
    @Sendable
    @inlinable
    public func deleteDeliverySource(_ input: DeleteDeliverySourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteDeliverySource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a delivery source. A delivery is a connection between a logical delivery source and a logical delivery destination. You can't delete a delivery source if any current deliveries are associated with it. To find whether any deliveries are associated with  this delivery source, use the DescribeDeliveries operation and check the deliverySourceName field in the results.
    ///
    /// Parameters:
    ///   - name: The name of the delivery source that you want to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDeliverySource(
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteDeliverySourceRequest(
            name: name
        )
        return try await self.deleteDeliverySource(input, logger: logger)
    }

    /// Deletes the specified destination, and eventually disables all the subscription filters that publish to it. This operation does not delete the  physical resource encapsulated by the destination.
    @Sendable
    @inlinable
    public func deleteDestination(_ input: DeleteDestinationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteDestination", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified destination, and eventually disables all the subscription filters that publish to it. This operation does not delete the  physical resource encapsulated by the destination.
    ///
    /// Parameters:
    ///   - destinationName: The name of the destination.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDestination(
        destinationName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteDestinationRequest(
            destinationName: destinationName
        )
        return try await self.deleteDestination(input, logger: logger)
    }

    /// Deletes a log-group level field index policy that was applied to a single log group. The indexing of the log events that happened before you delete the policy will still be used for as many as 30 days to improve CloudWatch Logs Insights queries. You can't use this operation to delete an account-level index policy. Instead, use  DeletAccountPolicy. If you delete a log-group level field index policy and there is an account-level field index policy, in a few minutes the log group begins using that account-wide policy to index new incoming log events.
    @Sendable
    @inlinable
    public func deleteIndexPolicy(_ input: DeleteIndexPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteIndexPolicyResponse {
        try await self.client.execute(
            operation: "DeleteIndexPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a log-group level field index policy that was applied to a single log group. The indexing of the log events that happened before you delete the policy will still be used for as many as 30 days to improve CloudWatch Logs Insights queries. You can't use this operation to delete an account-level index policy. Instead, use  DeletAccountPolicy. If you delete a log-group level field index policy and there is an account-level field index policy, in a few minutes the log group begins using that account-wide policy to index new incoming log events.
    ///
    /// Parameters:
    ///   - logGroupIdentifier: The log group to delete the index policy for. You can specify either the name or the ARN of the log group.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteIndexPolicy(
        logGroupIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteIndexPolicyResponse {
        let input = DeleteIndexPolicyRequest(
            logGroupIdentifier: logGroupIdentifier
        )
        return try await self.deleteIndexPolicy(input, logger: logger)
    }

    /// Deletes the integration between CloudWatch Logs and OpenSearch Service. If your integration has active vended logs dashboards,  you must specify true for the force parameter, otherwise the operation will fail. If you delete the integration by  setting force to true,  all your vended logs dashboards powered by OpenSearch Service will be deleted and the data that was on them  will no longer be accessible.
    @Sendable
    @inlinable
    public func deleteIntegration(_ input: DeleteIntegrationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteIntegrationResponse {
        try await self.client.execute(
            operation: "DeleteIntegration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the integration between CloudWatch Logs and OpenSearch Service. If your integration has active vended logs dashboards,  you must specify true for the force parameter, otherwise the operation will fail. If you delete the integration by  setting force to true,  all your vended logs dashboards powered by OpenSearch Service will be deleted and the data that was on them  will no longer be accessible.
    ///
    /// Parameters:
    ///   - force: Specify true to force the deletion of the integration even if vended logs dashboards currently exist. The default is false.
    ///   - integrationName: The name of the integration to delete. To find the name of your integration, use  ListIntegrations.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteIntegration(
        force: Bool? = nil,
        integrationName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteIntegrationResponse {
        let input = DeleteIntegrationRequest(
            force: force, 
            integrationName: integrationName
        )
        return try await self.deleteIntegration(input, logger: logger)
    }

    /// Deletes the specified CloudWatch Logs anomaly detector.
    @Sendable
    @inlinable
    public func deleteLogAnomalyDetector(_ input: DeleteLogAnomalyDetectorRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteLogAnomalyDetector", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified CloudWatch Logs anomaly detector.
    ///
    /// Parameters:
    ///   - anomalyDetectorArn: The ARN of the anomaly detector to delete. You can find the ARNs of log anomaly detectors  in your account by using the ListLogAnomalyDetectors operation.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteLogAnomalyDetector(
        anomalyDetectorArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteLogAnomalyDetectorRequest(
            anomalyDetectorArn: anomalyDetectorArn
        )
        return try await self.deleteLogAnomalyDetector(input, logger: logger)
    }

    /// Deletes the specified log group and permanently deletes all the archived log events associated with the log group.
    @Sendable
    @inlinable
    public func deleteLogGroup(_ input: DeleteLogGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteLogGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified log group and permanently deletes all the archived log events associated with the log group.
    ///
    /// Parameters:
    ///   - logGroupName: The name of the log group.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteLogGroup(
        logGroupName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteLogGroupRequest(
            logGroupName: logGroupName
        )
        return try await self.deleteLogGroup(input, logger: logger)
    }

    /// Deletes the specified log stream and permanently deletes all the archived log events associated with the log stream.
    @Sendable
    @inlinable
    public func deleteLogStream(_ input: DeleteLogStreamRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteLogStream", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified log stream and permanently deletes all the archived log events associated with the log stream.
    ///
    /// Parameters:
    ///   - logGroupName: The name of the log group.
    ///   - logStreamName: The name of the log stream.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteLogStream(
        logGroupName: String,
        logStreamName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteLogStreamRequest(
            logGroupName: logGroupName, 
            logStreamName: logStreamName
        )
        return try await self.deleteLogStream(input, logger: logger)
    }

    /// Deletes the specified metric filter.
    @Sendable
    @inlinable
    public func deleteMetricFilter(_ input: DeleteMetricFilterRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteMetricFilter", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified metric filter.
    ///
    /// Parameters:
    ///   - filterName: The name of the metric filter.
    ///   - logGroupName: The name of the log group.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteMetricFilter(
        filterName: String,
        logGroupName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteMetricFilterRequest(
            filterName: filterName, 
            logGroupName: logGroupName
        )
        return try await self.deleteMetricFilter(input, logger: logger)
    }

    /// Deletes a saved CloudWatch Logs Insights query definition.  A query definition contains details about a saved CloudWatch Logs Insights query. Each DeleteQueryDefinition operation can delete one query definition. You must have the logs:DeleteQueryDefinition permission to be able to perform this operation.
    @Sendable
    @inlinable
    public func deleteQueryDefinition(_ input: DeleteQueryDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteQueryDefinitionResponse {
        try await self.client.execute(
            operation: "DeleteQueryDefinition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a saved CloudWatch Logs Insights query definition.  A query definition contains details about a saved CloudWatch Logs Insights query. Each DeleteQueryDefinition operation can delete one query definition. You must have the logs:DeleteQueryDefinition permission to be able to perform this operation.
    ///
    /// Parameters:
    ///   - queryDefinitionId: The ID of the query definition that you want to delete. You can use DescribeQueryDefinitions to retrieve the IDs of your saved query definitions.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteQueryDefinition(
        queryDefinitionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteQueryDefinitionResponse {
        let input = DeleteQueryDefinitionRequest(
            queryDefinitionId: queryDefinitionId
        )
        return try await self.deleteQueryDefinition(input, logger: logger)
    }

    /// Deletes a resource policy from this account. This revokes  the access of the identities in that policy to put log events to this account.
    @Sendable
    @inlinable
    public func deleteResourcePolicy(_ input: DeleteResourcePolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteResourcePolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a resource policy from this account. This revokes  the access of the identities in that policy to put log events to this account.
    ///
    /// Parameters:
    ///   - policyName: The name of the policy to be revoked. This parameter is required.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteResourcePolicy(
        policyName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteResourcePolicyRequest(
            policyName: policyName
        )
        return try await self.deleteResourcePolicy(input, logger: logger)
    }

    /// Deletes the specified retention policy. Log events do not expire if they belong to log groups without a retention policy.
    @Sendable
    @inlinable
    public func deleteRetentionPolicy(_ input: DeleteRetentionPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteRetentionPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified retention policy. Log events do not expire if they belong to log groups without a retention policy.
    ///
    /// Parameters:
    ///   - logGroupName: The name of the log group.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteRetentionPolicy(
        logGroupName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteRetentionPolicyRequest(
            logGroupName: logGroupName
        )
        return try await self.deleteRetentionPolicy(input, logger: logger)
    }

    /// Deletes the specified subscription filter.
    @Sendable
    @inlinable
    public func deleteSubscriptionFilter(_ input: DeleteSubscriptionFilterRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteSubscriptionFilter", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified subscription filter.
    ///
    /// Parameters:
    ///   - filterName: The name of the subscription filter.
    ///   - logGroupName: The name of the log group.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteSubscriptionFilter(
        filterName: String,
        logGroupName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteSubscriptionFilterRequest(
            filterName: filterName, 
            logGroupName: logGroupName
        )
        return try await self.deleteSubscriptionFilter(input, logger: logger)
    }

    /// Deletes the log transformer for the specified log group. As soon as you do this,  the transformation of incoming log events according to that transformer stops. If this account has an  account-level transformer that applies to this log group, the log group begins using that account-level transformer when this log-group level transformer is deleted. After you delete a transformer, be sure to edit any metric filters or subscription filters that relied on the transformed versions of the log events.
    @Sendable
    @inlinable
    public func deleteTransformer(_ input: DeleteTransformerRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteTransformer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the log transformer for the specified log group. As soon as you do this,  the transformation of incoming log events according to that transformer stops. If this account has an  account-level transformer that applies to this log group, the log group begins using that account-level transformer when this log-group level transformer is deleted. After you delete a transformer, be sure to edit any metric filters or subscription filters that relied on the transformed versions of the log events.
    ///
    /// Parameters:
    ///   - logGroupIdentifier: Specify either the name or ARN of the log group to delete the transformer for. If the log group is in a source account and you are using a monitoring account, you must use the log group ARN.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTransformer(
        logGroupIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteTransformerRequest(
            logGroupIdentifier: logGroupIdentifier
        )
        return try await self.deleteTransformer(input, logger: logger)
    }

    /// Returns a list of all CloudWatch Logs account policies in the account. To use this operation, you must be signed on with the correct permissions depending on the type of policy that you are retrieving information for.   To see data protection policies, you must have the logs:GetDataProtectionPolicy and  logs:DescribeAccountPolicies permissions.   To see subscription filter policies, you must have the logs:DescrubeSubscriptionFilters and  logs:DescribeAccountPolicies permissions.   To see transformer policies, you must have the logs:GetTransformer and logs:DescribeAccountPolicies permissions.   To see field index policies, you must have the logs:DescribeIndexPolicies and  logs:DescribeAccountPolicies permissions.
    @Sendable
    @inlinable
    public func describeAccountPolicies(_ input: DescribeAccountPoliciesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAccountPoliciesResponse {
        try await self.client.execute(
            operation: "DescribeAccountPolicies", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of all CloudWatch Logs account policies in the account. To use this operation, you must be signed on with the correct permissions depending on the type of policy that you are retrieving information for.   To see data protection policies, you must have the logs:GetDataProtectionPolicy and  logs:DescribeAccountPolicies permissions.   To see subscription filter policies, you must have the logs:DescrubeSubscriptionFilters and  logs:DescribeAccountPolicies permissions.   To see transformer policies, you must have the logs:GetTransformer and logs:DescribeAccountPolicies permissions.   To see field index policies, you must have the logs:DescribeIndexPolicies and  logs:DescribeAccountPolicies permissions.
    ///
    /// Parameters:
    ///   - accountIdentifiers: If you are using an account that is set up as a monitoring account for CloudWatch unified cross-account observability, you can use this to specify the account ID of a source account. If you do,  the operation returns the account policy for the specified account. Currently, you can specify only one account ID in this parameter. If you omit this parameter, only the policy in the current account is returned.
    ///   - nextToken: The token for the next set of items to return. (You received this token from a previous call.)
    ///   - policyName: Use this parameter to limit the returned policies to only the policy with the name that you specify.
    ///   - policyType: Use this parameter to limit the returned policies to only the policies that match the policy type that you specify.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAccountPolicies(
        accountIdentifiers: [String]? = nil,
        nextToken: String? = nil,
        policyName: String? = nil,
        policyType: PolicyType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAccountPoliciesResponse {
        let input = DescribeAccountPoliciesRequest(
            accountIdentifiers: accountIdentifiers, 
            nextToken: nextToken, 
            policyName: policyName, 
            policyType: policyType
        )
        return try await self.describeAccountPolicies(input, logger: logger)
    }

    /// Use this operation to return the valid and default values that are used when creating delivery sources, delivery destinations, and deliveries. For more information about deliveries, see CreateDelivery.
    @Sendable
    @inlinable
    public func describeConfigurationTemplates(_ input: DescribeConfigurationTemplatesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeConfigurationTemplatesResponse {
        try await self.client.execute(
            operation: "DescribeConfigurationTemplates", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Use this operation to return the valid and default values that are used when creating delivery sources, delivery destinations, and deliveries. For more information about deliveries, see CreateDelivery.
    ///
    /// Parameters:
    ///   - deliveryDestinationTypes: Use this parameter to filter the response to include only the  configuration templates that apply to the delivery destination types that you specify here.
    ///   - limit: Use this parameter to limit the number of configuration templates that are returned in the response.
    ///   - logTypes: Use this parameter to filter the response to include only the  configuration templates that apply to the log types that you specify here.
    ///   - nextToken: 
    ///   - resourceTypes: Use this parameter to filter the response to include only the  configuration templates that apply to the resource types that you specify here.
    ///   - service: Use this parameter to filter the response to include only the  configuration templates that apply to the Amazon Web Services service that you specify here.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeConfigurationTemplates(
        deliveryDestinationTypes: [DeliveryDestinationType]? = nil,
        limit: Int? = nil,
        logTypes: [String]? = nil,
        nextToken: String? = nil,
        resourceTypes: [String]? = nil,
        service: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeConfigurationTemplatesResponse {
        let input = DescribeConfigurationTemplatesRequest(
            deliveryDestinationTypes: deliveryDestinationTypes, 
            limit: limit, 
            logTypes: logTypes, 
            nextToken: nextToken, 
            resourceTypes: resourceTypes, 
            service: service
        )
        return try await self.describeConfigurationTemplates(input, logger: logger)
    }

    /// Retrieves a list of the deliveries that have been created in the account. A delivery is a  connection between a  delivery source and a   delivery destination . A delivery source represents an Amazon Web Services resource that sends logs to an logs delivery destination.  The destination can be CloudWatch Logs, Amazon S3, or Firehose.  Only some Amazon Web Services services support being configured as a delivery source. These services are listed in Enable logging from Amazon Web Services  services.
    @Sendable
    @inlinable
    public func describeDeliveries(_ input: DescribeDeliveriesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDeliveriesResponse {
        try await self.client.execute(
            operation: "DescribeDeliveries", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of the deliveries that have been created in the account. A delivery is a  connection between a  delivery source and a   delivery destination . A delivery source represents an Amazon Web Services resource that sends logs to an logs delivery destination.  The destination can be CloudWatch Logs, Amazon S3, or Firehose.  Only some Amazon Web Services services support being configured as a delivery source. These services are listed in Enable logging from Amazon Web Services  services.
    ///
    /// Parameters:
    ///   - limit: Optionally specify the maximum number of deliveries to return in the response.
    ///   - nextToken: 
    ///   - logger: Logger use during operation
    @inlinable
    public func describeDeliveries(
        limit: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeDeliveriesResponse {
        let input = DescribeDeliveriesRequest(
            limit: limit, 
            nextToken: nextToken
        )
        return try await self.describeDeliveries(input, logger: logger)
    }

    /// Retrieves a list of the delivery destinations that have been created in the account.
    @Sendable
    @inlinable
    public func describeDeliveryDestinations(_ input: DescribeDeliveryDestinationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDeliveryDestinationsResponse {
        try await self.client.execute(
            operation: "DescribeDeliveryDestinations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of the delivery destinations that have been created in the account.
    ///
    /// Parameters:
    ///   - limit: Optionally specify the maximum number of delivery destinations to return in the response.
    ///   - nextToken: 
    ///   - logger: Logger use during operation
    @inlinable
    public func describeDeliveryDestinations(
        limit: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeDeliveryDestinationsResponse {
        let input = DescribeDeliveryDestinationsRequest(
            limit: limit, 
            nextToken: nextToken
        )
        return try await self.describeDeliveryDestinations(input, logger: logger)
    }

    /// Retrieves a list of the delivery sources that have been created in the account.
    @Sendable
    @inlinable
    public func describeDeliverySources(_ input: DescribeDeliverySourcesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDeliverySourcesResponse {
        try await self.client.execute(
            operation: "DescribeDeliverySources", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of the delivery sources that have been created in the account.
    ///
    /// Parameters:
    ///   - limit: Optionally specify the maximum number of delivery sources to return in the response.
    ///   - nextToken: 
    ///   - logger: Logger use during operation
    @inlinable
    public func describeDeliverySources(
        limit: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeDeliverySourcesResponse {
        let input = DescribeDeliverySourcesRequest(
            limit: limit, 
            nextToken: nextToken
        )
        return try await self.describeDeliverySources(input, logger: logger)
    }

    /// Lists all your destinations. The results are ASCII-sorted by destination name.
    @Sendable
    @inlinable
    public func describeDestinations(_ input: DescribeDestinationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDestinationsResponse {
        try await self.client.execute(
            operation: "DescribeDestinations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all your destinations. The results are ASCII-sorted by destination name.
    ///
    /// Parameters:
    ///   - destinationNamePrefix: The prefix to match. If you don't specify a value, no prefix filter is applied.
    ///   - limit: The maximum number of items returned. If you don't specify a value, the default maximum value of  50 items is used.
    ///   - nextToken: The token for the next set of items to return. (You received this token from a previous call.)
    ///   - logger: Logger use during operation
    @inlinable
    public func describeDestinations(
        destinationNamePrefix: String? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeDestinationsResponse {
        let input = DescribeDestinationsRequest(
            destinationNamePrefix: destinationNamePrefix, 
            limit: limit, 
            nextToken: nextToken
        )
        return try await self.describeDestinations(input, logger: logger)
    }

    /// Lists the specified export tasks. You can list all your export tasks or filter  the results based on task ID or task status.
    @Sendable
    @inlinable
    public func describeExportTasks(_ input: DescribeExportTasksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeExportTasksResponse {
        try await self.client.execute(
            operation: "DescribeExportTasks", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the specified export tasks. You can list all your export tasks or filter  the results based on task ID or task status.
    ///
    /// Parameters:
    ///   - limit: The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
    ///   - nextToken: The token for the next set of items to return. (You received this token from a previous call.)
    ///   - statusCode: The status code of the export task. Specifying a status code filters the results to zero or more export tasks.
    ///   - taskId: The ID of the export task. Specifying a task ID filters the results to one or zero export tasks.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeExportTasks(
        limit: Int? = nil,
        nextToken: String? = nil,
        statusCode: ExportTaskStatusCode? = nil,
        taskId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeExportTasksResponse {
        let input = DescribeExportTasksRequest(
            limit: limit, 
            nextToken: nextToken, 
            statusCode: statusCode, 
            taskId: taskId
        )
        return try await self.describeExportTasks(input, logger: logger)
    }

    /// Returns a list of field indexes listed in the field index policies of  one or more log groups. For more information about field index policies, see PutIndexPolicy.
    @Sendable
    @inlinable
    public func describeFieldIndexes(_ input: DescribeFieldIndexesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeFieldIndexesResponse {
        try await self.client.execute(
            operation: "DescribeFieldIndexes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of field indexes listed in the field index policies of  one or more log groups. For more information about field index policies, see PutIndexPolicy.
    ///
    /// Parameters:
    ///   - logGroupIdentifiers: An array containing the names or ARNs of the log groups that you want to retrieve field indexes for.
    ///   - nextToken: 
    ///   - logger: Logger use during operation
    @inlinable
    public func describeFieldIndexes(
        logGroupIdentifiers: [String],
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeFieldIndexesResponse {
        let input = DescribeFieldIndexesRequest(
            logGroupIdentifiers: logGroupIdentifiers, 
            nextToken: nextToken
        )
        return try await self.describeFieldIndexes(input, logger: logger)
    }

    /// Returns the field index policies of  one or more log groups. For more information about field index policies, see PutIndexPolicy. If a specified log group has a log-group level index policy, that policy is returned by this operation. If a specified log group doesn't have a log-group level index policy, but an account-wide index policy applies to it,  that account-wide policy is returned by this operation. To find information about only account-level policies, use DescribeAccountPolicies instead.
    @Sendable
    @inlinable
    public func describeIndexPolicies(_ input: DescribeIndexPoliciesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeIndexPoliciesResponse {
        try await self.client.execute(
            operation: "DescribeIndexPolicies", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the field index policies of  one or more log groups. For more information about field index policies, see PutIndexPolicy. If a specified log group has a log-group level index policy, that policy is returned by this operation. If a specified log group doesn't have a log-group level index policy, but an account-wide index policy applies to it,  that account-wide policy is returned by this operation. To find information about only account-level policies, use DescribeAccountPolicies instead.
    ///
    /// Parameters:
    ///   - logGroupIdentifiers: An array containing the name or ARN of the log group that you want to retrieve field index policies for.
    ///   - nextToken: 
    ///   - logger: Logger use during operation
    @inlinable
    public func describeIndexPolicies(
        logGroupIdentifiers: [String],
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeIndexPoliciesResponse {
        let input = DescribeIndexPoliciesRequest(
            logGroupIdentifiers: logGroupIdentifiers, 
            nextToken: nextToken
        )
        return try await self.describeIndexPolicies(input, logger: logger)
    }

    /// Lists the specified log groups. You can list all your log groups or filter the results by prefix. The results are ASCII-sorted by log group name. CloudWatch Logs doesn't support IAM policies that control access to the DescribeLogGroups action by using the  aws:ResourceTag/key-name condition key. Other CloudWatch Logs actions do support the use of the aws:ResourceTag/key-name condition key to control access. For more information about using tags to control access, see  Controlling access to Amazon Web Services resources using tags. If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account and  view data from the linked source accounts. For more information, see  CloudWatch cross-account observability.
    @Sendable
    @inlinable
    public func describeLogGroups(_ input: DescribeLogGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeLogGroupsResponse {
        try await self.client.execute(
            operation: "DescribeLogGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the specified log groups. You can list all your log groups or filter the results by prefix. The results are ASCII-sorted by log group name. CloudWatch Logs doesn't support IAM policies that control access to the DescribeLogGroups action by using the  aws:ResourceTag/key-name condition key. Other CloudWatch Logs actions do support the use of the aws:ResourceTag/key-name condition key to control access. For more information about using tags to control access, see  Controlling access to Amazon Web Services resources using tags. If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account and  view data from the linked source accounts. For more information, see  CloudWatch cross-account observability.
    ///
    /// Parameters:
    ///   - accountIdentifiers: When includeLinkedAccounts is set to True, use this parameter to specify the list of accounts to search. You can specify as many as 20 account IDs in the array.
    ///   - includeLinkedAccounts: If you are using a monitoring account, set this to True to have the operation return log groups in  the accounts listed in accountIdentifiers. If this parameter is set to true and accountIdentifiers
    ///   - limit: The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
    ///   - logGroupClass: Specifies the log group class for this log group. There are two classes:   The Standard log class supports all CloudWatch Logs features.   The Infrequent Access log class supports a subset of CloudWatch Logs features and incurs lower costs.   For details about the features supported by each class, see  Log classes
    ///   - logGroupNamePattern: If you specify a string for this parameter, the operation returns only log groups that have names
    ///   - logGroupNamePrefix: The prefix to match.   logGroupNamePrefix and logGroupNamePattern are mutually exclusive.  Only one  of these parameters can be passed.
    ///   - nextToken: The token for the next set of items to return. (You received this token from a previous call.)
    ///   - logger: Logger use during operation
    @inlinable
    public func describeLogGroups(
        accountIdentifiers: [String]? = nil,
        includeLinkedAccounts: Bool? = nil,
        limit: Int? = nil,
        logGroupClass: LogGroupClass? = nil,
        logGroupNamePattern: String? = nil,
        logGroupNamePrefix: String? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeLogGroupsResponse {
        let input = DescribeLogGroupsRequest(
            accountIdentifiers: accountIdentifiers, 
            includeLinkedAccounts: includeLinkedAccounts, 
            limit: limit, 
            logGroupClass: logGroupClass, 
            logGroupNamePattern: logGroupNamePattern, 
            logGroupNamePrefix: logGroupNamePrefix, 
            nextToken: nextToken
        )
        return try await self.describeLogGroups(input, logger: logger)
    }

    /// Lists the log streams for the specified log group.  You can list all the log streams or filter the results by prefix. You can also control how the results are ordered. You can specify the log group to search by using either logGroupIdentifier or logGroupName. You must include one of these two parameters, but you can't include both.  This operation has a limit of 25 transactions per second, after which transactions are throttled. If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account and  view data from the linked source accounts. For more information, see  CloudWatch cross-account observability.
    @Sendable
    @inlinable
    public func describeLogStreams(_ input: DescribeLogStreamsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeLogStreamsResponse {
        try await self.client.execute(
            operation: "DescribeLogStreams", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the log streams for the specified log group.  You can list all the log streams or filter the results by prefix. You can also control how the results are ordered. You can specify the log group to search by using either logGroupIdentifier or logGroupName. You must include one of these two parameters, but you can't include both.  This operation has a limit of 25 transactions per second, after which transactions are throttled. If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account and  view data from the linked source accounts. For more information, see  CloudWatch cross-account observability.
    ///
    /// Parameters:
    ///   - descending: If the value is true, results are returned in descending order.  If the value is to false, results are returned in ascending order. The default value is false.
    ///   - limit: The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
    ///   - logGroupIdentifier: Specify either the name or ARN of the log group to view. If the log group is in a source account and you are using a monitoring account, you must use the log group ARN.   You must include either logGroupIdentifier or logGroupName, but not  both.
    ///   - logGroupName: The name of the log group.   You must include either logGroupIdentifier or logGroupName, but not  both.
    ///   - logStreamNamePrefix: The prefix to match. If orderBy is LastEventTime, you cannot specify this parameter.
    ///   - nextToken: The token for the next set of items to return. (You received this token from a previous call.)
    ///   - orderBy: If the value is LogStreamName, the results are ordered by log stream name. If the value is LastEventTime, the results are ordered by the event time.  The default value is LogStreamName. If you order the results by event time, you cannot specify the logStreamNamePrefix parameter.  lastEventTimestamp represents the time of the most recent log event in the log stream in CloudWatch Logs. This number is expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. lastEventTimestamp updates on an eventual consistency basis. It typically updates in less than an hour from ingestion, but in rare situations might take longer.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeLogStreams(
        descending: Bool? = nil,
        limit: Int? = nil,
        logGroupIdentifier: String? = nil,
        logGroupName: String? = nil,
        logStreamNamePrefix: String? = nil,
        nextToken: String? = nil,
        orderBy: OrderBy? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeLogStreamsResponse {
        let input = DescribeLogStreamsRequest(
            descending: descending, 
            limit: limit, 
            logGroupIdentifier: logGroupIdentifier, 
            logGroupName: logGroupName, 
            logStreamNamePrefix: logStreamNamePrefix, 
            nextToken: nextToken, 
            orderBy: orderBy
        )
        return try await self.describeLogStreams(input, logger: logger)
    }

    /// Lists the specified metric filters. You can list all of the metric filters or filter the results by log name, prefix, metric name, or metric namespace. The results are ASCII-sorted by filter name.
    @Sendable
    @inlinable
    public func describeMetricFilters(_ input: DescribeMetricFiltersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeMetricFiltersResponse {
        try await self.client.execute(
            operation: "DescribeMetricFilters", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the specified metric filters. You can list all of the metric filters or filter the results by log name, prefix, metric name, or metric namespace. The results are ASCII-sorted by filter name.
    ///
    /// Parameters:
    ///   - filterNamePrefix: The prefix to match. CloudWatch Logs uses the value that you set here only if you also include the logGroupName parameter in your request.
    ///   - limit: The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
    ///   - logGroupName: The name of the log group.
    ///   - metricName: Filters results to include only those with the specified metric name. If you include this parameter in your request, you  must also include the metricNamespace parameter.
    ///   - metricNamespace: Filters results to include only those in the specified namespace. If you include this parameter in your request, you  must also include the metricName parameter.
    ///   - nextToken: The token for the next set of items to return. (You received this token from a previous call.)
    ///   - logger: Logger use during operation
    @inlinable
    public func describeMetricFilters(
        filterNamePrefix: String? = nil,
        limit: Int? = nil,
        logGroupName: String? = nil,
        metricName: String? = nil,
        metricNamespace: String? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeMetricFiltersResponse {
        let input = DescribeMetricFiltersRequest(
            filterNamePrefix: filterNamePrefix, 
            limit: limit, 
            logGroupName: logGroupName, 
            metricName: metricName, 
            metricNamespace: metricNamespace, 
            nextToken: nextToken
        )
        return try await self.describeMetricFilters(input, logger: logger)
    }

    /// Returns a list of CloudWatch Logs Insights queries that are scheduled, running, or have been run recently in this account. You can request all queries or limit it to queries of a specific log group or queries with a certain status.
    @Sendable
    @inlinable
    public func describeQueries(_ input: DescribeQueriesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeQueriesResponse {
        try await self.client.execute(
            operation: "DescribeQueries", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of CloudWatch Logs Insights queries that are scheduled, running, or have been run recently in this account. You can request all queries or limit it to queries of a specific log group or queries with a certain status.
    ///
    /// Parameters:
    ///   - logGroupName: Limits the returned queries to only those for the specified log group.
    ///   - maxResults: Limits the number of returned queries to the specified number.
    ///   - nextToken: 
    ///   - queryLanguage: Limits the returned queries to only the queries that use the specified query language.
    ///   - status: Limits the returned queries to only those that have the specified status. Valid values are Cancelled,  Complete, Failed, Running, and Scheduled.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeQueries(
        logGroupName: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        queryLanguage: QueryLanguage? = nil,
        status: QueryStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeQueriesResponse {
        let input = DescribeQueriesRequest(
            logGroupName: logGroupName, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            queryLanguage: queryLanguage, 
            status: status
        )
        return try await self.describeQueries(input, logger: logger)
    }

    /// This operation returns a paginated list of your saved CloudWatch Logs Insights query definitions. You can retrieve query definitions from the current account or from a source account that is linked to the current account. You can use the queryDefinitionNamePrefix parameter to limit the results to only the query definitions that have names that start with a certain string.
    @Sendable
    @inlinable
    public func describeQueryDefinitions(_ input: DescribeQueryDefinitionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeQueryDefinitionsResponse {
        try await self.client.execute(
            operation: "DescribeQueryDefinitions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// This operation returns a paginated list of your saved CloudWatch Logs Insights query definitions. You can retrieve query definitions from the current account or from a source account that is linked to the current account. You can use the queryDefinitionNamePrefix parameter to limit the results to only the query definitions that have names that start with a certain string.
    ///
    /// Parameters:
    ///   - maxResults: Limits the number of returned query definitions to the specified number.
    ///   - nextToken: 
    ///   - queryDefinitionNamePrefix: Use this parameter to filter your results to only the query definitions that have names that start with the prefix you specify.
    ///   - queryLanguage: The query language used for this query. For more information about the query languages that CloudWatch Logs supports,  see Supported query languages.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeQueryDefinitions(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        queryDefinitionNamePrefix: String? = nil,
        queryLanguage: QueryLanguage? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeQueryDefinitionsResponse {
        let input = DescribeQueryDefinitionsRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            queryDefinitionNamePrefix: queryDefinitionNamePrefix, 
            queryLanguage: queryLanguage
        )
        return try await self.describeQueryDefinitions(input, logger: logger)
    }

    /// Lists the resource policies in this account.
    @Sendable
    @inlinable
    public func describeResourcePolicies(_ input: DescribeResourcePoliciesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeResourcePoliciesResponse {
        try await self.client.execute(
            operation: "DescribeResourcePolicies", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the resource policies in this account.
    ///
    /// Parameters:
    ///   - limit: The maximum number of resource policies to be displayed with one call of this API.
    ///   - nextToken: 
    ///   - logger: Logger use during operation
    @inlinable
    public func describeResourcePolicies(
        limit: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeResourcePoliciesResponse {
        let input = DescribeResourcePoliciesRequest(
            limit: limit, 
            nextToken: nextToken
        )
        return try await self.describeResourcePolicies(input, logger: logger)
    }

    /// Lists the subscription filters for the specified log group. You can list all the subscription filters or filter the results by prefix. The results are ASCII-sorted by filter name.
    @Sendable
    @inlinable
    public func describeSubscriptionFilters(_ input: DescribeSubscriptionFiltersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSubscriptionFiltersResponse {
        try await self.client.execute(
            operation: "DescribeSubscriptionFilters", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the subscription filters for the specified log group. You can list all the subscription filters or filter the results by prefix. The results are ASCII-sorted by filter name.
    ///
    /// Parameters:
    ///   - filterNamePrefix: The prefix to match. If you don't specify a value, no prefix filter is applied.
    ///   - limit: The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
    ///   - logGroupName: The name of the log group.
    ///   - nextToken: The token for the next set of items to return. (You received this token from a previous call.)
    ///   - logger: Logger use during operation
    @inlinable
    public func describeSubscriptionFilters(
        filterNamePrefix: String? = nil,
        limit: Int? = nil,
        logGroupName: String,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeSubscriptionFiltersResponse {
        let input = DescribeSubscriptionFiltersRequest(
            filterNamePrefix: filterNamePrefix, 
            limit: limit, 
            logGroupName: logGroupName, 
            nextToken: nextToken
        )
        return try await self.describeSubscriptionFilters(input, logger: logger)
    }

    /// Disassociates the specified KMS key from the specified log group or from all CloudWatch Logs Insights query results in the account. When you use DisassociateKmsKey, you specify either the logGroupName parameter or the resourceIdentifier parameter. You can't specify both of those parameters in the same operation.   Specify the logGroupName parameter to stop using the KMS key to encrypt future log events ingested and stored in the log group. Instead, they will be encrypted with the default CloudWatch Logs method. The log events that were ingested while the key was associated with the log group are still encrypted with that key. Therefore, CloudWatch Logs will need permissions for the key whenever that data is accessed.   Specify the resourceIdentifier parameter with the query-result resource to stop using the KMS key to encrypt the results of all future StartQuery operations in the account. They will instead be encrypted with the default CloudWatch Logs method. The results from queries that ran while the key was associated with the account are still encrypted with that key. Therefore, CloudWatch Logs will need permissions for the key whenever that data is accessed.   It can take up to 5 minutes for this operation to take effect.
    @Sendable
    @inlinable
    public func disassociateKmsKey(_ input: DisassociateKmsKeyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DisassociateKmsKey", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates the specified KMS key from the specified log group or from all CloudWatch Logs Insights query results in the account. When you use DisassociateKmsKey, you specify either the logGroupName parameter or the resourceIdentifier parameter. You can't specify both of those parameters in the same operation.   Specify the logGroupName parameter to stop using the KMS key to encrypt future log events ingested and stored in the log group. Instead, they will be encrypted with the default CloudWatch Logs method. The log events that were ingested while the key was associated with the log group are still encrypted with that key. Therefore, CloudWatch Logs will need permissions for the key whenever that data is accessed.   Specify the resourceIdentifier parameter with the query-result resource to stop using the KMS key to encrypt the results of all future StartQuery operations in the account. They will instead be encrypted with the default CloudWatch Logs method. The results from queries that ran while the key was associated with the account are still encrypted with that key. Therefore, CloudWatch Logs will need permissions for the key whenever that data is accessed.   It can take up to 5 minutes for this operation to take effect.
    ///
    /// Parameters:
    ///   - logGroupName: The name of the log group. In your DisassociateKmsKey operation, you must specify either the resourceIdentifier parameter or the logGroup parameter,  but you can't specify both.
    ///   - resourceIdentifier: Specifies the target for this operation. You must specify one of the following:   Specify the ARN of a log group to stop having CloudWatch Logs use the KMS key to encrypt log events that are ingested and stored by that log group. After you run this operation, CloudWatch Logs encrypts ingested log events with the default CloudWatch Logs method. The log group ARN must be in  the following format. Replace REGION and ACCOUNT_ID with your Region and account ID.  arn:aws:logs:REGION:ACCOUNT_ID:log-group:LOG_GROUP_NAME     Specify the following ARN to stop using this key to encrypt the results of future StartQuery operations in this account. Replace REGION and ACCOUNT_ID with your Region and account ID.  arn:aws:logs:REGION:ACCOUNT_ID:query-result:*    In your DisssociateKmsKey operation, you must specify either the resourceIdentifier parameter or the logGroup parameter,  but you can't specify both.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateKmsKey(
        logGroupName: String? = nil,
        resourceIdentifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DisassociateKmsKeyRequest(
            logGroupName: logGroupName, 
            resourceIdentifier: resourceIdentifier
        )
        return try await self.disassociateKmsKey(input, logger: logger)
    }

    /// Lists log events from the specified log group. You can list all the log events or filter the results using one or more of the following:   A filter pattern   A time range   The log stream name, or a log stream name prefix that matches mutltiple log streams   You must have the logs:FilterLogEvents permission to perform this operation. You can specify the log group to search by using either logGroupIdentifier or logGroupName. You must include one of these two parameters, but you can't include both.   FilterLogEvents is a paginated operation. Each page returned can contain up to 1 MB of log events or up to 10,000 log events. A returned page might only be partially full, or even empty.  For example, if the result of a query would return 15,000 log events, the first page isn't guaranteed to have 10,000 log events even if they all fit into 1 MB. Partially full or empty pages don't necessarily mean that pagination is finished. If the results include a nextToken, there might be more log events available. You can return these additional log events by providing the nextToken in a subsequent FilterLogEvents operation. If the results don't include a nextToken, then pagination is finished.   If you set startFromHead to true and you don’t include endTime in your request, you can end up in a situation where the pagination doesn't terminate.  This can happen when the new log events are being added to the target log streams faster than they are being read. This situation is a good use case for the CloudWatch Logs Live Tail feature.  The returned log events are sorted by event timestamp, the timestamp when the event was ingested by CloudWatch Logs, and the ID of the PutLogEvents request. If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account and  view data from the linked source accounts. For more information, see  CloudWatch cross-account observability.  If you are using log transformation, the FilterLogEvents operation returns only the original versions of log events, before they  were transformed. To view the transformed versions, you must use a CloudWatch Logs query.
    @Sendable
    @inlinable
    public func filterLogEvents(_ input: FilterLogEventsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> FilterLogEventsResponse {
        try await self.client.execute(
            operation: "FilterLogEvents", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists log events from the specified log group. You can list all the log events or filter the results using one or more of the following:   A filter pattern   A time range   The log stream name, or a log stream name prefix that matches mutltiple log streams   You must have the logs:FilterLogEvents permission to perform this operation. You can specify the log group to search by using either logGroupIdentifier or logGroupName. You must include one of these two parameters, but you can't include both.   FilterLogEvents is a paginated operation. Each page returned can contain up to 1 MB of log events or up to 10,000 log events. A returned page might only be partially full, or even empty.  For example, if the result of a query would return 15,000 log events, the first page isn't guaranteed to have 10,000 log events even if they all fit into 1 MB. Partially full or empty pages don't necessarily mean that pagination is finished. If the results include a nextToken, there might be more log events available. You can return these additional log events by providing the nextToken in a subsequent FilterLogEvents operation. If the results don't include a nextToken, then pagination is finished.   If you set startFromHead to true and you don’t include endTime in your request, you can end up in a situation where the pagination doesn't terminate.  This can happen when the new log events are being added to the target log streams faster than they are being read. This situation is a good use case for the CloudWatch Logs Live Tail feature.  The returned log events are sorted by event timestamp, the timestamp when the event was ingested by CloudWatch Logs, and the ID of the PutLogEvents request. If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account and  view data from the linked source accounts. For more information, see  CloudWatch cross-account observability.  If you are using log transformation, the FilterLogEvents operation returns only the original versions of log events, before they  were transformed. To view the transformed versions, you must use a CloudWatch Logs query.
    ///
    /// Parameters:
    ///   - endTime: The end of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not returned.
    ///   - filterPattern: The filter pattern to use. For more information, see Filter and Pattern Syntax. If not provided, all the events are matched.
    ///   - limit: The maximum number of events to return. The default is 10,000 events.
    ///   - logGroupIdentifier: Specify either the name or ARN of the log group to view log events from. If the log group is in a source account and you are using a monitoring account, you must use the log group ARN.   You must include either logGroupIdentifier or logGroupName, but not  both.
    ///   - logGroupName: The name of the log group to search.   You must include either logGroupIdentifier or logGroupName, but not  both.
    ///   - logStreamNamePrefix: Filters the results to include only events from log streams that have names starting with this prefix. If you specify a value for both logStreamNamePrefix and logStreamNames, the action returns an InvalidParameterException error.
    ///   - logStreamNames: Filters the results to only logs from the log streams in this list. If you specify a value for both logStreamNames and logStreamNamePrefix, the action returns an InvalidParameterException error.
    ///   - nextToken: The token for the next set of events to return. (You received this token from a previous call.)
    ///   - startTime: The start of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp before this time are not returned.
    ///   - unmask: Specify true to display the log event fields with all sensitive data unmasked and visible. The default is false. To use this operation with this parameter, you must be signed into an account with the logs:Unmask permission.
    ///   - logger: Logger use during operation
    @inlinable
    public func filterLogEvents(
        endTime: Int64? = nil,
        filterPattern: String? = nil,
        limit: Int? = nil,
        logGroupIdentifier: String? = nil,
        logGroupName: String? = nil,
        logStreamNamePrefix: String? = nil,
        logStreamNames: [String]? = nil,
        nextToken: String? = nil,
        startTime: Int64? = nil,
        unmask: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> FilterLogEventsResponse {
        let input = FilterLogEventsRequest(
            endTime: endTime, 
            filterPattern: filterPattern, 
            limit: limit, 
            logGroupIdentifier: logGroupIdentifier, 
            logGroupName: logGroupName, 
            logStreamNamePrefix: logStreamNamePrefix, 
            logStreamNames: logStreamNames, 
            nextToken: nextToken, 
            startTime: startTime, 
            unmask: unmask
        )
        return try await self.filterLogEvents(input, logger: logger)
    }

    /// Returns information about a log group data protection policy.
    @Sendable
    @inlinable
    public func getDataProtectionPolicy(_ input: GetDataProtectionPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDataProtectionPolicyResponse {
        try await self.client.execute(
            operation: "GetDataProtectionPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about a log group data protection policy.
    ///
    /// Parameters:
    ///   - logGroupIdentifier: The name or ARN of the log group that contains the data protection policy that you want to see.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDataProtectionPolicy(
        logGroupIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDataProtectionPolicyResponse {
        let input = GetDataProtectionPolicyRequest(
            logGroupIdentifier: logGroupIdentifier
        )
        return try await self.getDataProtectionPolicy(input, logger: logger)
    }

    /// Returns complete information about one logical delivery. A delivery is a  connection between a  delivery source and a   delivery destination . A delivery source represents an Amazon Web Services resource that sends logs to an logs delivery destination.  The destination can be CloudWatch Logs, Amazon S3, or Firehose.  Only some Amazon Web Services services support being configured as a delivery source. These services are listed in Enable logging from Amazon Web Services  services.  You need to specify the delivery id in this operation. You can find the IDs of the deliveries in your account with the   DescribeDeliveries operation.
    @Sendable
    @inlinable
    public func getDelivery(_ input: GetDeliveryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDeliveryResponse {
        try await self.client.execute(
            operation: "GetDelivery", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns complete information about one logical delivery. A delivery is a  connection between a  delivery source and a   delivery destination . A delivery source represents an Amazon Web Services resource that sends logs to an logs delivery destination.  The destination can be CloudWatch Logs, Amazon S3, or Firehose.  Only some Amazon Web Services services support being configured as a delivery source. These services are listed in Enable logging from Amazon Web Services  services.  You need to specify the delivery id in this operation. You can find the IDs of the deliveries in your account with the   DescribeDeliveries operation.
    ///
    /// Parameters:
    ///   - id: The ID of the delivery that you want to retrieve.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDelivery(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDeliveryResponse {
        let input = GetDeliveryRequest(
            id: id
        )
        return try await self.getDelivery(input, logger: logger)
    }

    /// Retrieves complete information about one delivery destination.
    @Sendable
    @inlinable
    public func getDeliveryDestination(_ input: GetDeliveryDestinationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDeliveryDestinationResponse {
        try await self.client.execute(
            operation: "GetDeliveryDestination", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves complete information about one delivery destination.
    ///
    /// Parameters:
    ///   - name: The name of the delivery destination that you want to retrieve.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDeliveryDestination(
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDeliveryDestinationResponse {
        let input = GetDeliveryDestinationRequest(
            name: name
        )
        return try await self.getDeliveryDestination(input, logger: logger)
    }

    /// Retrieves the delivery destination policy assigned to the delivery destination that you specify. For more information about delivery destinations and their policies, see  PutDeliveryDestinationPolicy.
    @Sendable
    @inlinable
    public func getDeliveryDestinationPolicy(_ input: GetDeliveryDestinationPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDeliveryDestinationPolicyResponse {
        try await self.client.execute(
            operation: "GetDeliveryDestinationPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the delivery destination policy assigned to the delivery destination that you specify. For more information about delivery destinations and their policies, see  PutDeliveryDestinationPolicy.
    ///
    /// Parameters:
    ///   - deliveryDestinationName: The name of the delivery destination that you want to retrieve the policy of.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDeliveryDestinationPolicy(
        deliveryDestinationName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDeliveryDestinationPolicyResponse {
        let input = GetDeliveryDestinationPolicyRequest(
            deliveryDestinationName: deliveryDestinationName
        )
        return try await self.getDeliveryDestinationPolicy(input, logger: logger)
    }

    /// Retrieves complete information about one delivery source.
    @Sendable
    @inlinable
    public func getDeliverySource(_ input: GetDeliverySourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDeliverySourceResponse {
        try await self.client.execute(
            operation: "GetDeliverySource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves complete information about one delivery source.
    ///
    /// Parameters:
    ///   - name: The name of the delivery source that you want to retrieve.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDeliverySource(
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDeliverySourceResponse {
        let input = GetDeliverySourceRequest(
            name: name
        )
        return try await self.getDeliverySource(input, logger: logger)
    }

    /// Returns information about one integration between CloudWatch Logs and OpenSearch Service.
    @Sendable
    @inlinable
    public func getIntegration(_ input: GetIntegrationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIntegrationResponse {
        try await self.client.execute(
            operation: "GetIntegration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about one integration between CloudWatch Logs and OpenSearch Service.
    ///
    /// Parameters:
    ///   - integrationName: The name of the integration that you want to find information about. To find the name of your integration, use  ListIntegrations
    ///   - logger: Logger use during operation
    @inlinable
    public func getIntegration(
        integrationName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetIntegrationResponse {
        let input = GetIntegrationRequest(
            integrationName: integrationName
        )
        return try await self.getIntegration(input, logger: logger)
    }

    /// Retrieves information about the log anomaly detector that you specify. The KMS key ARN detected is valid.
    @Sendable
    @inlinable
    public func getLogAnomalyDetector(_ input: GetLogAnomalyDetectorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLogAnomalyDetectorResponse {
        try await self.client.execute(
            operation: "GetLogAnomalyDetector", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves information about the log anomaly detector that you specify. The KMS key ARN detected is valid.
    ///
    /// Parameters:
    ///   - anomalyDetectorArn: The ARN of the anomaly detector to retrieve information about. You can find the ARNs of log anomaly detectors  in your account by using the ListLogAnomalyDetectors operation.
    ///   - logger: Logger use during operation
    @inlinable
    public func getLogAnomalyDetector(
        anomalyDetectorArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetLogAnomalyDetectorResponse {
        let input = GetLogAnomalyDetectorRequest(
            anomalyDetectorArn: anomalyDetectorArn
        )
        return try await self.getLogAnomalyDetector(input, logger: logger)
    }

    /// Lists log events from the specified log stream. You can list all of the log events or filter using a time range.  GetLogEvents is a paginated operation. Each page returned can contain up to 1 MB of log events or up to 10,000 log events. A returned page might only be partially full, or even empty.  For example, if the result of a query would return 15,000 log events, the first page isn't guaranteed to have 10,000 log events even if they all fit into 1 MB. Partially full or empty pages don't necessarily mean that pagination is finished. As long as the nextBackwardToken or nextForwardToken returned is NOT equal to the nextToken  that you passed into the API call, there might be more  log events available. The token that you use depends on the direction you want to move in along the log stream. The returned tokens are never null.  If you set startFromHead to true and you don’t include endTime in your request, you can end up in a situation where the pagination doesn't terminate.  This can happen when the new log events are being added to the target log streams faster than they are being read. This situation is a good use case for the CloudWatch Logs Live Tail feature.  If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account and  view data from the linked source accounts. For more information, see  CloudWatch cross-account observability. You can specify the log group to search by using either logGroupIdentifier or logGroupName. You must include one of these two parameters, but you can't include both.   If you are using log transformation, the GetLogEvents operation returns only the original versions of log events, before they  were transformed. To view the transformed versions, you must use a CloudWatch Logs query.
    @Sendable
    @inlinable
    public func getLogEvents(_ input: GetLogEventsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLogEventsResponse {
        try await self.client.execute(
            operation: "GetLogEvents", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists log events from the specified log stream. You can list all of the log events or filter using a time range.  GetLogEvents is a paginated operation. Each page returned can contain up to 1 MB of log events or up to 10,000 log events. A returned page might only be partially full, or even empty.  For example, if the result of a query would return 15,000 log events, the first page isn't guaranteed to have 10,000 log events even if they all fit into 1 MB. Partially full or empty pages don't necessarily mean that pagination is finished. As long as the nextBackwardToken or nextForwardToken returned is NOT equal to the nextToken  that you passed into the API call, there might be more  log events available. The token that you use depends on the direction you want to move in along the log stream. The returned tokens are never null.  If you set startFromHead to true and you don’t include endTime in your request, you can end up in a situation where the pagination doesn't terminate.  This can happen when the new log events are being added to the target log streams faster than they are being read. This situation is a good use case for the CloudWatch Logs Live Tail feature.  If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account and  view data from the linked source accounts. For more information, see  CloudWatch cross-account observability. You can specify the log group to search by using either logGroupIdentifier or logGroupName. You must include one of these two parameters, but you can't include both.   If you are using log transformation, the GetLogEvents operation returns only the original versions of log events, before they  were transformed. To view the transformed versions, you must use a CloudWatch Logs query.
    ///
    /// Parameters:
    ///   - endTime: The end of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp equal to or later than this time are not included.
    ///   - limit: The maximum number of log events returned. If you don't specify a limit, the default is as many log events as can fit in a response size of 1 MB (up to 10,000 log events).
    ///   - logGroupIdentifier: Specify either the name or ARN of the log group to view events from. If the log group is in a source account and you are using a monitoring account, you must use the log group ARN.   You must include either logGroupIdentifier or logGroupName, but not  both.
    ///   - logGroupName: The name of the log group.   You must include either logGroupIdentifier or logGroupName, but not  both.
    ///   - logStreamName: The name of the log stream.
    ///   - nextToken: The token for the next set of items to return. (You received this token from a previous call.)
    ///   - startFromHead: If the value is true, the earliest log events are returned first. If the value is false, the latest log events are returned first. The default value is false. If you are using a previous nextForwardToken value as the nextToken in this operation,  you must specify true for startFromHead.
    ///   - startTime: The start of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp equal to this time or later than this time are included. Events with a timestamp earlier than this time are not included.
    ///   - unmask: Specify true to display the log event fields with all sensitive data unmasked and visible. The default is false. To use this operation with this parameter, you must be signed into an account with the logs:Unmask permission.
    ///   - logger: Logger use during operation
    @inlinable
    public func getLogEvents(
        endTime: Int64? = nil,
        limit: Int? = nil,
        logGroupIdentifier: String? = nil,
        logGroupName: String? = nil,
        logStreamName: String,
        nextToken: String? = nil,
        startFromHead: Bool? = nil,
        startTime: Int64? = nil,
        unmask: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetLogEventsResponse {
        let input = GetLogEventsRequest(
            endTime: endTime, 
            limit: limit, 
            logGroupIdentifier: logGroupIdentifier, 
            logGroupName: logGroupName, 
            logStreamName: logStreamName, 
            nextToken: nextToken, 
            startFromHead: startFromHead, 
            startTime: startTime, 
            unmask: unmask
        )
        return try await self.getLogEvents(input, logger: logger)
    }

    /// Returns a list of the fields that are included in log events in the specified log group. Includes the percentage of log events that contain each field. The search is limited to a time period that you specify. You can specify the log group to search by using either logGroupIdentifier or logGroupName. You must specify one of these parameters, but you can't specify both.  In the results, fields that start with @ are fields generated by CloudWatch Logs. For example, @timestamp is the timestamp of each log event. For more information about the fields that are generated by CloudWatch logs, see Supported Logs and Discovered Fields. The response results are sorted by the frequency percentage, starting  with the highest percentage. If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account and  view data from the linked source accounts. For more information, see  CloudWatch cross-account observability.
    @Sendable
    @inlinable
    public func getLogGroupFields(_ input: GetLogGroupFieldsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLogGroupFieldsResponse {
        try await self.client.execute(
            operation: "GetLogGroupFields", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of the fields that are included in log events in the specified log group. Includes the percentage of log events that contain each field. The search is limited to a time period that you specify. You can specify the log group to search by using either logGroupIdentifier or logGroupName. You must specify one of these parameters, but you can't specify both.  In the results, fields that start with @ are fields generated by CloudWatch Logs. For example, @timestamp is the timestamp of each log event. For more information about the fields that are generated by CloudWatch logs, see Supported Logs and Discovered Fields. The response results are sorted by the frequency percentage, starting  with the highest percentage. If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account and  view data from the linked source accounts. For more information, see  CloudWatch cross-account observability.
    ///
    /// Parameters:
    ///   - logGroupIdentifier: Specify either the name or ARN of the log group to view. If the log group is in a source account and you are using a monitoring account, you must specify the ARN.   You must include either logGroupIdentifier or logGroupName, but not  both.
    ///   - logGroupName: The name of the log group to search.   You must include either logGroupIdentifier or logGroupName, but not  both.
    ///   - time: The time to set as the center of the query. If you specify time, the 8 minutes before and 8 minutes after this time are searched. If you omit time, the most recent 15 minutes up to the current time are searched. The time value is specified as epoch time, which is the number of seconds since January 1, 1970, 00:00:00 UTC.
    ///   - logger: Logger use during operation
    @inlinable
    public func getLogGroupFields(
        logGroupIdentifier: String? = nil,
        logGroupName: String? = nil,
        time: Int64? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetLogGroupFieldsResponse {
        let input = GetLogGroupFieldsRequest(
            logGroupIdentifier: logGroupIdentifier, 
            logGroupName: logGroupName, 
            time: time
        )
        return try await self.getLogGroupFields(input, logger: logger)
    }

    /// Retrieves all of the fields and values of a single log event. All fields are retrieved, even if the original query that produced the logRecordPointer retrieved only a subset of fields. Fields are returned as field name/field value pairs. The full unparsed log event is returned within @message.
    @Sendable
    @inlinable
    public func getLogRecord(_ input: GetLogRecordRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLogRecordResponse {
        try await self.client.execute(
            operation: "GetLogRecord", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves all of the fields and values of a single log event. All fields are retrieved, even if the original query that produced the logRecordPointer retrieved only a subset of fields. Fields are returned as field name/field value pairs. The full unparsed log event is returned within @message.
    ///
    /// Parameters:
    ///   - logRecordPointer: The pointer corresponding to the log event record you want to retrieve. You get this from the response of a GetQueryResults operation. In that response, the value of the @ptr field for a log event is the value to use as logRecordPointer to retrieve that complete log event record.
    ///   - unmask: Specify true to display the log event fields with all sensitive data unmasked and visible. The default is false. To use this operation with this parameter, you must be signed into an account with the logs:Unmask permission.
    ///   - logger: Logger use during operation
    @inlinable
    public func getLogRecord(
        logRecordPointer: String,
        unmask: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetLogRecordResponse {
        let input = GetLogRecordRequest(
            logRecordPointer: logRecordPointer, 
            unmask: unmask
        )
        return try await self.getLogRecord(input, logger: logger)
    }

    /// Returns the results from the specified query. Only the fields requested in the query are returned, along with a @ptr field, which is the identifier for the log record. You can use the value of @ptr in a GetLogRecord operation to get the full log record.  GetQueryResults does not start running a query. To run a query, use StartQuery. For more information about how long results of previous queries are available, see CloudWatch Logs quotas. If the value of the Status field in the output is Running, this operation  returns only partial results. If you see a value of Scheduled or Running for the status,  you can retry the operation later to see the final results.  If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account to start  queries in linked source accounts. For more information, see  CloudWatch cross-account observability.
    @Sendable
    @inlinable
    public func getQueryResults(_ input: GetQueryResultsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetQueryResultsResponse {
        try await self.client.execute(
            operation: "GetQueryResults", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the results from the specified query. Only the fields requested in the query are returned, along with a @ptr field, which is the identifier for the log record. You can use the value of @ptr in a GetLogRecord operation to get the full log record.  GetQueryResults does not start running a query. To run a query, use StartQuery. For more information about how long results of previous queries are available, see CloudWatch Logs quotas. If the value of the Status field in the output is Running, this operation  returns only partial results. If you see a value of Scheduled or Running for the status,  you can retry the operation later to see the final results.  If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account to start  queries in linked source accounts. For more information, see  CloudWatch cross-account observability.
    ///
    /// Parameters:
    ///   - queryId: The ID number of the query.
    ///   - logger: Logger use during operation
    @inlinable
    public func getQueryResults(
        queryId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetQueryResultsResponse {
        let input = GetQueryResultsRequest(
            queryId: queryId
        )
        return try await self.getQueryResults(input, logger: logger)
    }

    /// Returns the information about the log transformer associated with this log group. This operation returns data only for transformers created at the log group level. To get information for an account-level transformer, use DescribeAccountPolicies.
    @Sendable
    @inlinable
    public func getTransformer(_ input: GetTransformerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTransformerResponse {
        try await self.client.execute(
            operation: "GetTransformer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the information about the log transformer associated with this log group. This operation returns data only for transformers created at the log group level. To get information for an account-level transformer, use DescribeAccountPolicies.
    ///
    /// Parameters:
    ///   - logGroupIdentifier: Specify either the name or ARN of the log group to return transformer information for. If the log group is in a source account and you are using a monitoring account, you must use the log group ARN.
    ///   - logger: Logger use during operation
    @inlinable
    public func getTransformer(
        logGroupIdentifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetTransformerResponse {
        let input = GetTransformerRequest(
            logGroupIdentifier: logGroupIdentifier
        )
        return try await self.getTransformer(input, logger: logger)
    }

    /// Returns a list of anomalies that log anomaly detectors have found. For details about the structure format of each anomaly object that is returned, see the example in this section.
    @Sendable
    @inlinable
    public func listAnomalies(_ input: ListAnomaliesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAnomaliesResponse {
        try await self.client.execute(
            operation: "ListAnomalies", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of anomalies that log anomaly detectors have found. For details about the structure format of each anomaly object that is returned, see the example in this section.
    ///
    /// Parameters:
    ///   - anomalyDetectorArn: Use this to optionally limit the results to only the anomalies found by a certain  anomaly detector.
    ///   - limit: The maximum number of items to return. If you don't specify a value, the default maximum value of  50 items is used.
    ///   - nextToken: 
    ///   - suppressionState: You can specify this parameter if you want to the operation to return only anomalies that  are currently either suppressed or unsuppressed.
    ///   - logger: Logger use during operation
    @inlinable
    public func listAnomalies(
        anomalyDetectorArn: String? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        suppressionState: SuppressionState? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListAnomaliesResponse {
        let input = ListAnomaliesRequest(
            anomalyDetectorArn: anomalyDetectorArn, 
            limit: limit, 
            nextToken: nextToken, 
            suppressionState: suppressionState
        )
        return try await self.listAnomalies(input, logger: logger)
    }

    /// Returns a list of integrations between CloudWatch Logs and other services in this account. Currently, only one integration can be created in an account, and this integration must be with OpenSearch Service.
    @Sendable
    @inlinable
    public func listIntegrations(_ input: ListIntegrationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListIntegrationsResponse {
        try await self.client.execute(
            operation: "ListIntegrations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of integrations between CloudWatch Logs and other services in this account. Currently, only one integration can be created in an account, and this integration must be with OpenSearch Service.
    ///
    /// Parameters:
    ///   - integrationNamePrefix: To limit the results to integrations that start with a certain name prefix, specify that name prefix here.
    ///   - integrationStatus: To limit the results to integrations with a certain status, specify that status here.
    ///   - integrationType: To limit the results to integrations of a certain type, specify that type here.
    ///   - logger: Logger use during operation
    @inlinable
    public func listIntegrations(
        integrationNamePrefix: String? = nil,
        integrationStatus: IntegrationStatus? = nil,
        integrationType: IntegrationType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListIntegrationsResponse {
        let input = ListIntegrationsRequest(
            integrationNamePrefix: integrationNamePrefix, 
            integrationStatus: integrationStatus, 
            integrationType: integrationType
        )
        return try await self.listIntegrations(input, logger: logger)
    }

    /// Retrieves a list of the log anomaly detectors in the account.
    @Sendable
    @inlinable
    public func listLogAnomalyDetectors(_ input: ListLogAnomalyDetectorsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLogAnomalyDetectorsResponse {
        try await self.client.execute(
            operation: "ListLogAnomalyDetectors", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of the log anomaly detectors in the account.
    ///
    /// Parameters:
    ///   - filterLogGroupArn: Use this to optionally filter the results to only include anomaly detectors that are associated with the  specified log group.
    ///   - limit: The maximum number of items to return. If you don't specify a value, the default maximum value of  50 items is used.
    ///   - nextToken: 
    ///   - logger: Logger use during operation
    @inlinable
    public func listLogAnomalyDetectors(
        filterLogGroupArn: String? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListLogAnomalyDetectorsResponse {
        let input = ListLogAnomalyDetectorsRequest(
            filterLogGroupArn: filterLogGroupArn, 
            limit: limit, 
            nextToken: nextToken
        )
        return try await self.listLogAnomalyDetectors(input, logger: logger)
    }

    /// Returns a list of the log groups that were analyzed during a single CloudWatch Logs Insights query. This can be useful for queries that use log group name prefixes or the filterIndex command, because the log groups are dynamically selected in these cases. For more information about field indexes, see  Create field indexes to improve query performance and reduce costs.
    @Sendable
    @inlinable
    public func listLogGroupsForQuery(_ input: ListLogGroupsForQueryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLogGroupsForQueryResponse {
        try await self.client.execute(
            operation: "ListLogGroupsForQuery", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of the log groups that were analyzed during a single CloudWatch Logs Insights query. This can be useful for queries that use log group name prefixes or the filterIndex command, because the log groups are dynamically selected in these cases. For more information about field indexes, see  Create field indexes to improve query performance and reduce costs.
    ///
    /// Parameters:
    ///   - maxResults: Limits the number of returned log groups to the specified number.
    ///   - nextToken: 
    ///   - queryId: The ID of the query to use. This query ID is from the response to your StartQuery operation.
    ///   - logger: Logger use during operation
    @inlinable
    public func listLogGroupsForQuery(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        queryId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListLogGroupsForQueryResponse {
        let input = ListLogGroupsForQueryRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            queryId: queryId
        )
        return try await self.listLogGroupsForQuery(input, logger: logger)
    }

    /// Displays the tags associated with a CloudWatch Logs resource. Currently, log groups  and destinations support tagging.
    @Sendable
    @inlinable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Displays the tags associated with a CloudWatch Logs resource. Currently, log groups  and destinations support tagging.
    ///
    /// Parameters:
    ///   - resourceArn: The ARN of the  resource that you want to view tags for. The ARN format of a log group is  arn:aws:logs:Region:account-id:log-group:log-group-name   The ARN format of a destination is  arn:aws:logs:Region:account-id:destination:destination-name   For more information about ARN format, see CloudWatch Logs  resources and operations.
    ///   - logger: Logger use during operation
    @inlinable
    public func listTagsForResource(
        resourceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTagsForResourceResponse {
        let input = ListTagsForResourceRequest(
            resourceArn: resourceArn
        )
        return try await self.listTagsForResource(input, logger: logger)
    }

    ///  The ListTagsLogGroup operation is on the path to deprecation. We recommend that you use  ListTagsForResource instead.  Lists the tags for the specified log group.
    @available(*, deprecated, message: "Please use the generic tagging API ListTagsForResource")
    @Sendable
    @inlinable
    public func listTagsLogGroup(_ input: ListTagsLogGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsLogGroupResponse {
        try await self.client.execute(
            operation: "ListTagsLogGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  The ListTagsLogGroup operation is on the path to deprecation. We recommend that you use  ListTagsForResource instead.  Lists the tags for the specified log group.
    ///
    /// Parameters:
    ///   - logGroupName: The name of the log group.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Please use the generic tagging API ListTagsForResource")
    @inlinable
    public func listTagsLogGroup(
        logGroupName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTagsLogGroupResponse {
        let input = ListTagsLogGroupRequest(
            logGroupName: logGroupName
        )
        return try await self.listTagsLogGroup(input, logger: logger)
    }

    /// Creates an account-level data protection policy, subscription filter policy, or field index policy that applies to all log groups  or a subset of log groups in the account. To use this operation, you must be signed on with the correct permissions depending on the type of policy that you are creating.   To create a data protection policy, you must have the logs:PutDataProtectionPolicy and  logs:PutAccountPolicy permissions.   To create a subscription filter policy, you must have the logs:PutSubscriptionFilter and  logs:PutccountPolicy permissions.   To create a transformer policy, you must have the logs:PutTransformer and logs:PutAccountPolicy permissions.   To create a field index policy, you must have the logs:PutIndexPolicy and  logs:PutAccountPolicy permissions.    Data protection policy  A data protection policy can help safeguard sensitive  data that's ingested by your log groups by auditing and masking the sensitive log data. Each account can have only one account-level data protection policy.  Sensitive data is detected and masked when it is ingested into a log group. When you set a  data protection policy, log events ingested into the log groups before that time are not masked.  If you use PutAccountPolicy to create a data protection policy for your whole account, it applies to both existing log groups and all log groups that are created later in this account. The account-level policy is applied to existing log groups with eventual consistency. It might take up to 5 minutes before sensitive data in existing log groups begins to be masked. By default, when a user views a log event that includes masked data, the sensitive data is replaced by asterisks. A user who has the logs:Unmask permission can use a  GetLogEvents or  FilterLogEvents operation with the unmask parameter set to true to view the unmasked  log events. Users with the logs:Unmask can also view unmasked data in the CloudWatch Logs console by running a CloudWatch Logs Insights query with the unmask query command. For more information, including a list of types of data that can be audited and masked, see Protect sensitive log data with masking. To use the PutAccountPolicy operation for a data protection policy, you must be signed on with  the logs:PutDataProtectionPolicy and logs:PutAccountPolicy permissions. The PutAccountPolicy operation applies to all log groups in the account. You can use  PutDataProtectionPolicy to create a data protection policy that applies to just one log group.  If a log group has its own data protection policy and  the account also has an account-level data protection policy, then the two policies are cumulative. Any sensitive term specified in either policy is masked.  Subscription filter policy  A subscription filter policy sets up a real-time feed of log events from CloudWatch Logs to other Amazon Web Services services. Account-level subscription filter policies apply to both existing log groups and log groups that are created later in  this account. Supported destinations are Kinesis Data Streams, Firehose, and  Lambda. When log events are sent to the receiving service, they are Base64 encoded and  compressed with the GZIP format. The following destinations are supported for subscription filters:   An Kinesis Data Streams data stream in the same account as the subscription policy, for same-account delivery.   An Firehose data stream in the same account as the subscription policy, for same-account delivery.   A Lambda function in the same account as the subscription policy, for same-account delivery.   A logical destination in a different account created with PutDestination, for cross-account delivery. Kinesis Data Streams and Firehose are supported as logical destinations.   Each account can have one account-level subscription filter policy per Region.  If you are updating an existing filter, you must specify the correct name in PolicyName. To perform a PutAccountPolicy subscription filter operation for any destination except a Lambda  function, you must also have the iam:PassRole permission.  Transformer policy  Creates or updates a log transformer policy for your account. You use log transformers to transform log events into a different format, making them easier for you to process and analyze. You can also transform logs from different sources into standardized formats that  contain relevant, source-specific information. After you have created a transformer,  CloudWatch Logs performs this transformation at the time of log ingestion. You can then refer to the transformed versions of the logs during operations such as querying with CloudWatch Logs Insights or creating metric filters or subscription filters. You can also use a transformer to copy metadata from metadata keys into the log events themselves. This metadata can include log group name,  log stream name, account ID and Region. A transformer for a log group is a series of processors, where each processor applies one type of transformation to the log events ingested into this log group. For more information about the available processors to use in a transformer, see  Processors that you can use. Having log events in standardized format enables visibility across your applications for your log analysis, reporting, and alarming needs.  CloudWatch Logs provides transformation for common log types with out-of-the-box transformation templates for major Amazon Web Services log sources such  as VPC flow logs, Lambda, and Amazon RDS. You can use pre-built transformation templates or create custom transformation policies. You can create transformers only for the log groups in the Standard log class. You can have one account-level transformer policy that applies to all log groups in the account.  Or you can create as many as 20 account-level transformer policies that are each scoped to a subset of log groups with  the selectionCriteria parameter. If you have multiple account-level transformer policies with selection criteria, no two of them can use the same or overlapping log group name prefixes. For example, if you have one policy filtered to log groups that start with my-log, you can't have another field index policy filtered to my-logpprod or my-logging. You can also set up a transformer at the log-group level. For more information, see  PutTransformer. If there is both a  log-group level transformer created with PutTransformer and an account-level transformer that could apply to the same log  group, the log group uses only the log-group level transformer. It ignores the account-level transformer.  Field index policy  You can use field index policies to create indexes on fields found in  log events in the log group. Creating field indexes can help lower the scan volume for CloudWatch Logs Insights queries that reference those fields, because these queries attempt to skip the processing of log events that are known to not match the indexed field. Good fields to index are fields that you often need to query for and fields or values that match only a small fraction of the total log events. Common examples of indexes include request ID, session ID, user IDs, or instance IDs. For more information, see  Create field indexes to improve query performance and reduce costs  To find the fields that are in your log group events, use the  GetLogGroupFields operation. For example, suppose you have created a field index for requestId. Then, any  CloudWatch Logs Insights query on that log group that includes requestId = value  or requestId in [value, value, ...] will attempt to process only the log events where the indexed field matches the specified value. Matches of log events to the names of indexed fields are case-sensitive. For example, an indexed field of RequestId won't match a log event containing requestId. You can have one account-level field index policy that applies to all log groups in the account.  Or you can create as many as 20 account-level field index policies that are each scoped to a subset of log groups with  the selectionCriteria parameter. If you have multiple account-level index policies with selection criteria, no two of them can use the same or overlapping log group name prefixes. For example, if you have one policy filtered to log groups that start with my-log, you can't have another field index policy filtered to my-logpprod or my-logging. If you create an account-level field index policy in a monitoring account in cross-account observability, the policy is applied only to the monitoring account and not to any source accounts. If you want to create a field index policy for a single log group, you can use PutIndexPolicy instead of  PutAccountPolicy. If you do so, that log group will use only that log-group level policy, and will ignore the account-level policy that you create with PutAccountPolicy.
    @Sendable
    @inlinable
    public func putAccountPolicy(_ input: PutAccountPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutAccountPolicyResponse {
        try await self.client.execute(
            operation: "PutAccountPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an account-level data protection policy, subscription filter policy, or field index policy that applies to all log groups  or a subset of log groups in the account. To use this operation, you must be signed on with the correct permissions depending on the type of policy that you are creating.   To create a data protection policy, you must have the logs:PutDataProtectionPolicy and  logs:PutAccountPolicy permissions.   To create a subscription filter policy, you must have the logs:PutSubscriptionFilter and  logs:PutccountPolicy permissions.   To create a transformer policy, you must have the logs:PutTransformer and logs:PutAccountPolicy permissions.   To create a field index policy, you must have the logs:PutIndexPolicy and  logs:PutAccountPolicy permissions.    Data protection policy  A data protection policy can help safeguard sensitive  data that's ingested by your log groups by auditing and masking the sensitive log data. Each account can have only one account-level data protection policy.  Sensitive data is detected and masked when it is ingested into a log group. When you set a  data protection policy, log events ingested into the log groups before that time are not masked.  If you use PutAccountPolicy to create a data protection policy for your whole account, it applies to both existing log groups and all log groups that are created later in this account. The account-level policy is applied to existing log groups with eventual consistency. It might take up to 5 minutes before sensitive data in existing log groups begins to be masked. By default, when a user views a log event that includes masked data, the sensitive data is replaced by asterisks. A user who has the logs:Unmask permission can use a  GetLogEvents or  FilterLogEvents operation with the unmask parameter set to true to view the unmasked  log events. Users with the logs:Unmask can also view unmasked data in the CloudWatch Logs console by running a CloudWatch Logs Insights query with the unmask query command. For more information, including a list of types of data that can be audited and masked, see Protect sensitive log data with masking. To use the PutAccountPolicy operation for a data protection policy, you must be signed on with  the logs:PutDataProtectionPolicy and logs:PutAccountPolicy permissions. The PutAccountPolicy operation applies to all log groups in the account. You can use  PutDataProtectionPolicy to create a data protection policy that applies to just one log group.  If a log group has its own data protection policy and  the account also has an account-level data protection policy, then the two policies are cumulative. Any sensitive term specified in either policy is masked.  Subscription filter policy  A subscription filter policy sets up a real-time feed of log events from CloudWatch Logs to other Amazon Web Services services. Account-level subscription filter policies apply to both existing log groups and log groups that are created later in  this account. Supported destinations are Kinesis Data Streams, Firehose, and  Lambda. When log events are sent to the receiving service, they are Base64 encoded and  compressed with the GZIP format. The following destinations are supported for subscription filters:   An Kinesis Data Streams data stream in the same account as the subscription policy, for same-account delivery.   An Firehose data stream in the same account as the subscription policy, for same-account delivery.   A Lambda function in the same account as the subscription policy, for same-account delivery.   A logical destination in a different account created with PutDestination, for cross-account delivery. Kinesis Data Streams and Firehose are supported as logical destinations.   Each account can have one account-level subscription filter policy per Region.  If you are updating an existing filter, you must specify the correct name in PolicyName. To perform a PutAccountPolicy subscription filter operation for any destination except a Lambda  function, you must also have the iam:PassRole permission.  Transformer policy  Creates or updates a log transformer policy for your account. You use log transformers to transform log events into a different format, making them easier for you to process and analyze. You can also transform logs from different sources into standardized formats that  contain relevant, source-specific information. After you have created a transformer,  CloudWatch Logs performs this transformation at the time of log ingestion. You can then refer to the transformed versions of the logs during operations such as querying with CloudWatch Logs Insights or creating metric filters or subscription filters. You can also use a transformer to copy metadata from metadata keys into the log events themselves. This metadata can include log group name,  log stream name, account ID and Region. A transformer for a log group is a series of processors, where each processor applies one type of transformation to the log events ingested into this log group. For more information about the available processors to use in a transformer, see  Processors that you can use. Having log events in standardized format enables visibility across your applications for your log analysis, reporting, and alarming needs.  CloudWatch Logs provides transformation for common log types with out-of-the-box transformation templates for major Amazon Web Services log sources such  as VPC flow logs, Lambda, and Amazon RDS. You can use pre-built transformation templates or create custom transformation policies. You can create transformers only for the log groups in the Standard log class. You can have one account-level transformer policy that applies to all log groups in the account.  Or you can create as many as 20 account-level transformer policies that are each scoped to a subset of log groups with  the selectionCriteria parameter. If you have multiple account-level transformer policies with selection criteria, no two of them can use the same or overlapping log group name prefixes. For example, if you have one policy filtered to log groups that start with my-log, you can't have another field index policy filtered to my-logpprod or my-logging. You can also set up a transformer at the log-group level. For more information, see  PutTransformer. If there is both a  log-group level transformer created with PutTransformer and an account-level transformer that could apply to the same log  group, the log group uses only the log-group level transformer. It ignores the account-level transformer.  Field index policy  You can use field index policies to create indexes on fields found in  log events in the log group. Creating field indexes can help lower the scan volume for CloudWatch Logs Insights queries that reference those fields, because these queries attempt to skip the processing of log events that are known to not match the indexed field. Good fields to index are fields that you often need to query for and fields or values that match only a small fraction of the total log events. Common examples of indexes include request ID, session ID, user IDs, or instance IDs. For more information, see  Create field indexes to improve query performance and reduce costs  To find the fields that are in your log group events, use the  GetLogGroupFields operation. For example, suppose you have created a field index for requestId. Then, any  CloudWatch Logs Insights query on that log group that includes requestId = value  or requestId in [value, value, ...] will attempt to process only the log events where the indexed field matches the specified value. Matches of log events to the names of indexed fields are case-sensitive. For example, an indexed field of RequestId won't match a log event containing requestId. You can have one account-level field index policy that applies to all log groups in the account.  Or you can create as many as 20 account-level field index policies that are each scoped to a subset of log groups with  the selectionCriteria parameter. If you have multiple account-level index policies with selection criteria, no two of them can use the same or overlapping log group name prefixes. For example, if you have one policy filtered to log groups that start with my-log, you can't have another field index policy filtered to my-logpprod or my-logging. If you create an account-level field index policy in a monitoring account in cross-account observability, the policy is applied only to the monitoring account and not to any source accounts. If you want to create a field index policy for a single log group, you can use PutIndexPolicy instead of  PutAccountPolicy. If you do so, that log group will use only that log-group level policy, and will ignore the account-level policy that you create with PutAccountPolicy.
    ///
    /// Parameters:
    ///   - policyDocument: Specify the policy, in JSON.  Data protection policy  A data protection policy must include two JSON blocks:   The first block must include both a DataIdentifer array and an  Operation property with an Audit action. The DataIdentifer array lists the types of sensitive data that you want to mask. For more information about the available options, see  Types of data that you can mask. The Operation property with an Audit action is required to find the  sensitive data terms. This Audit action must contain a FindingsDestination object. You can optionally use that FindingsDestination object to list one or more  destinations to send audit findings to. If you specify destinations such as log groups,  Firehose streams, and S3 buckets, they must already exist.   The second block must include both a DataIdentifer array and an Operation property with an Deidentify action. The DataIdentifer array must exactly match the DataIdentifer array in the first block of the policy. The Operation property with the Deidentify action is what actually masks the  data, and it must  contain the  "MaskConfig": {} object. The  "MaskConfig": {} object must be empty.   For an example data protection policy, see the Examples section on this page.  The contents of the two DataIdentifer arrays must match exactly.  In addition to the two JSON blocks, the policyDocument can also include Name, Description, and Version fields. The Name is different than the  operation's policyName parameter, and is used as a dimension when CloudWatch Logs reports audit findings metrics to CloudWatch. The JSON specified in policyDocument can be up to 30,720 characters long.  Subscription filter policy  A subscription filter policy can include the following attributes in a JSON block:    DestinationArn The ARN of the destination to deliver log events to. Supported destinations are:   An Kinesis Data Streams data stream in the same account as the subscription policy, for same-account delivery.   An Firehose data stream in the same account as the subscription policy, for same-account delivery.   A Lambda function in the same account as the subscription policy, for same-account delivery.   A logical destination in a different account created with PutDestination, for cross-account delivery. Kinesis Data Streams and Firehose are supported as logical destinations.      RoleArn The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.    FilterPattern A filter pattern for subscribing to a  filtered stream of log events.    Distribution The method used to distribute log data to the destination.  By default, log data is grouped by log stream, but the grouping can be set to Random for a more even distribution. This property is only applicable when the destination is an Kinesis Data Streams data stream.    Transformer policy  A transformer policy must include one JSON block with the array of processors and their configurations. For more information about available processors, see  Processors that you can use.   Field index policy  A field index filter policy can include the following attribute in a JSON block:    Fields The array of field indexes to create.   It must contain at least one field index. The following is an example of an index policy document that creates two indexes, RequestId and TransactionId.  "policyDocument": "{ \"Fields\": [ \"RequestId\", \"TransactionId\" ] }"
    ///   - policyName: A name for the policy. This must be unique within the account.
    ///   - policyType: The type of policy that you're creating or updating.
    ///   - scope: Currently the only valid value for this parameter is ALL, which specifies that the data  protection policy applies to all log groups in the account. If you omit this parameter, the default of ALL is used.
    ///   - selectionCriteria: Use this parameter to apply the new policy to a subset of log groups in the account. Specifing selectionCriteria is valid only when you specify SUBSCRIPTION_FILTER_POLICY, FIELD_INDEX_POLICY or TRANSFORMER_POLICYfor policyType. If policyType is SUBSCRIPTION_FILTER_POLICY, the only supported  selectionCriteria filter is LogGroupName NOT IN []  If policyType is FIELD_INDEX_POLICY or TRANSFORMER_POLICY, the only supported  selectionCriteria filter is LogGroupNamePrefix  The selectionCriteria string can be up to 25KB in length. The length is determined by using its UTF-8 bytes. Using the selectionCriteria parameter with SUBSCRIPTION_FILTER_POLICY is useful to help prevent infinite loops.  For more information, see Log recursion prevention.
    ///   - logger: Logger use during operation
    @inlinable
    public func putAccountPolicy(
        policyDocument: String,
        policyName: String,
        policyType: PolicyType,
        scope: Scope? = nil,
        selectionCriteria: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutAccountPolicyResponse {
        let input = PutAccountPolicyRequest(
            policyDocument: policyDocument, 
            policyName: policyName, 
            policyType: policyType, 
            scope: scope, 
            selectionCriteria: selectionCriteria
        )
        return try await self.putAccountPolicy(input, logger: logger)
    }

    /// Creates a data protection policy for the specified log group. A data protection policy can help safeguard sensitive  data that's ingested by the log group by auditing and masking the sensitive log data.  Sensitive data is detected and masked when it is ingested into the log group. When you set a  data protection policy, log events ingested into the log group before that time are not masked.  By default, when a user views a log event that includes masked data, the sensitive data is replaced by asterisks. A user who has the logs:Unmask permission can use a  GetLogEvents or  FilterLogEvents operation with the unmask parameter set to true to view the unmasked  log events. Users with the logs:Unmask can also view unmasked data in the CloudWatch Logs console by running a CloudWatch Logs Insights query with the unmask query command. For more information, including a list of types of data that can be audited and masked, see Protect sensitive log data with masking. The PutDataProtectionPolicy operation applies to only the specified log group. You can also use  PutAccountPolicy to create an account-level data protection policy that applies to all log groups in the account,  including both existing log groups and log groups that are created level. If a log group has its own data protection policy and  the account also has an account-level data protection policy, then the two policies are cumulative. Any sensitive term specified in either policy is masked.
    @Sendable
    @inlinable
    public func putDataProtectionPolicy(_ input: PutDataProtectionPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutDataProtectionPolicyResponse {
        try await self.client.execute(
            operation: "PutDataProtectionPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a data protection policy for the specified log group. A data protection policy can help safeguard sensitive  data that's ingested by the log group by auditing and masking the sensitive log data.  Sensitive data is detected and masked when it is ingested into the log group. When you set a  data protection policy, log events ingested into the log group before that time are not masked.  By default, when a user views a log event that includes masked data, the sensitive data is replaced by asterisks. A user who has the logs:Unmask permission can use a  GetLogEvents or  FilterLogEvents operation with the unmask parameter set to true to view the unmasked  log events. Users with the logs:Unmask can also view unmasked data in the CloudWatch Logs console by running a CloudWatch Logs Insights query with the unmask query command. For more information, including a list of types of data that can be audited and masked, see Protect sensitive log data with masking. The PutDataProtectionPolicy operation applies to only the specified log group. You can also use  PutAccountPolicy to create an account-level data protection policy that applies to all log groups in the account,  including both existing log groups and log groups that are created level. If a log group has its own data protection policy and  the account also has an account-level data protection policy, then the two policies are cumulative. Any sensitive term specified in either policy is masked.
    ///
    /// Parameters:
    ///   - logGroupIdentifier: Specify either the log group name or log group ARN.
    ///   - policyDocument: Specify the data protection policy, in JSON. This policy must include two JSON blocks:   The first block must include both a DataIdentifer array and an  Operation property with an Audit action. The DataIdentifer array lists the types of sensitive data that you want to mask. For more information about the available options, see  Types of data that you can mask. The Operation property with an Audit action is required to find the  sensitive data terms. This Audit action must contain a FindingsDestination object. You can optionally use that FindingsDestination object to list one or more  destinations to send audit findings to. If you specify destinations such as log groups,  Firehose streams, and S3 buckets, they must already exist.   The second block must include both a DataIdentifer array and an Operation property with an Deidentify action. The DataIdentifer array must exactly match the DataIdentifer array in the first block of the policy. The Operation property with the Deidentify action is what actually masks the  data, and it must  contain the  "MaskConfig": {} object. The  "MaskConfig": {} object must be empty.   For an example data protection policy, see the Examples section on this page.  The contents of the two DataIdentifer arrays must match exactly.  In addition to the two JSON blocks, the policyDocument can also include Name, Description, and Version fields. The Name is used as a dimension when CloudWatch Logs reports audit findings metrics to CloudWatch. The JSON specified in policyDocument can be up to 30,720 characters.
    ///   - logger: Logger use during operation
    @inlinable
    public func putDataProtectionPolicy(
        logGroupIdentifier: String,
        policyDocument: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutDataProtectionPolicyResponse {
        let input = PutDataProtectionPolicyRequest(
            logGroupIdentifier: logGroupIdentifier, 
            policyDocument: policyDocument
        )
        return try await self.putDataProtectionPolicy(input, logger: logger)
    }

    /// Creates or updates a logical delivery destination. A delivery destination is an Amazon Web Services resource that represents an  Amazon Web Services service that logs can be sent to. CloudWatch Logs, Amazon S3, and Firehose are supported as logs delivery destinations. To configure logs delivery between a supported Amazon Web Services service and a destination, you must do the following:   Create a delivery source, which is a logical object that represents the resource that is actually sending the logs. For more  information, see PutDeliverySource.   Use PutDeliveryDestination to create a delivery destination in the same account of the actual delivery destination.  The delivery destination that you create is a logical object that represents the actual delivery destination.     If you are delivering logs cross-account, you must use  PutDeliveryDestinationPolicy in the destination account to assign an IAM policy to the  destination. This policy allows delivery to that destination.    Use CreateDelivery to create a delivery by pairing exactly  one delivery source and one delivery destination. For more  information, see CreateDelivery.    You can configure a single delivery source to send logs to multiple destinations by creating multiple deliveries. You  can also create multiple deliveries to configure multiple delivery sources to send logs to the same delivery destination. Only some Amazon Web Services services support being configured as a delivery source. These services are listed as Supported [V2 Permissions] in the table at  Enabling  logging from Amazon Web Services services.  If you use this operation to update an existing delivery destination, all the current delivery destination parameters are overwritten with the new parameter values that you specify.
    @Sendable
    @inlinable
    public func putDeliveryDestination(_ input: PutDeliveryDestinationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutDeliveryDestinationResponse {
        try await self.client.execute(
            operation: "PutDeliveryDestination", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates or updates a logical delivery destination. A delivery destination is an Amazon Web Services resource that represents an  Amazon Web Services service that logs can be sent to. CloudWatch Logs, Amazon S3, and Firehose are supported as logs delivery destinations. To configure logs delivery between a supported Amazon Web Services service and a destination, you must do the following:   Create a delivery source, which is a logical object that represents the resource that is actually sending the logs. For more  information, see PutDeliverySource.   Use PutDeliveryDestination to create a delivery destination in the same account of the actual delivery destination.  The delivery destination that you create is a logical object that represents the actual delivery destination.     If you are delivering logs cross-account, you must use  PutDeliveryDestinationPolicy in the destination account to assign an IAM policy to the  destination. This policy allows delivery to that destination.    Use CreateDelivery to create a delivery by pairing exactly  one delivery source and one delivery destination. For more  information, see CreateDelivery.    You can configure a single delivery source to send logs to multiple destinations by creating multiple deliveries. You  can also create multiple deliveries to configure multiple delivery sources to send logs to the same delivery destination. Only some Amazon Web Services services support being configured as a delivery source. These services are listed as Supported [V2 Permissions] in the table at  Enabling  logging from Amazon Web Services services.  If you use this operation to update an existing delivery destination, all the current delivery destination parameters are overwritten with the new parameter values that you specify.
    ///
    /// Parameters:
    ///   - deliveryDestinationConfiguration: A structure that contains the ARN of the Amazon Web Services resource that will receive the logs.
    ///   - name: A name for this delivery destination. This name must be unique for all delivery destinations in your account.
    ///   - outputFormat: The format for the logs that this delivery destination will receive.
    ///   - tags: An optional list of key-value pairs to associate with the resource. For more information about tagging, see  Tagging Amazon Web Services resources
    ///   - logger: Logger use during operation
    @inlinable
    public func putDeliveryDestination(
        deliveryDestinationConfiguration: DeliveryDestinationConfiguration,
        name: String,
        outputFormat: OutputFormat? = nil,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutDeliveryDestinationResponse {
        let input = PutDeliveryDestinationRequest(
            deliveryDestinationConfiguration: deliveryDestinationConfiguration, 
            name: name, 
            outputFormat: outputFormat, 
            tags: tags
        )
        return try await self.putDeliveryDestination(input, logger: logger)
    }

    /// Creates and assigns an IAM policy that grants permissions to CloudWatch Logs to deliver  logs cross-account to a specified destination in this account. To configure the delivery of logs from an  Amazon Web Services service in another account to a logs delivery destination in the current account, you must do the following:   Create a delivery source, which is a logical object that represents the resource that is actually sending the logs. For more  information, see PutDeliverySource.   Create a delivery destination, which is a logical object that represents the actual delivery destination.  For more  information, see PutDeliveryDestination.   Use this operation in the destination account to assign an IAM policy to the  destination. This policy allows delivery to that destination.    Create a delivery by pairing exactly one delivery source and one delivery destination. For more information, see CreateDelivery.   Only some Amazon Web Services services support being configured as a delivery source. These services are listed as Supported [V2 Permissions] in the table at  Enabling  logging from Amazon Web Services services.  The contents of the policy must include two statements. One statement enables general logs delivery, and the other allows delivery to the chosen destination. See the examples for the needed policies.
    @Sendable
    @inlinable
    public func putDeliveryDestinationPolicy(_ input: PutDeliveryDestinationPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutDeliveryDestinationPolicyResponse {
        try await self.client.execute(
            operation: "PutDeliveryDestinationPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates and assigns an IAM policy that grants permissions to CloudWatch Logs to deliver  logs cross-account to a specified destination in this account. To configure the delivery of logs from an  Amazon Web Services service in another account to a logs delivery destination in the current account, you must do the following:   Create a delivery source, which is a logical object that represents the resource that is actually sending the logs. For more  information, see PutDeliverySource.   Create a delivery destination, which is a logical object that represents the actual delivery destination.  For more  information, see PutDeliveryDestination.   Use this operation in the destination account to assign an IAM policy to the  destination. This policy allows delivery to that destination.    Create a delivery by pairing exactly one delivery source and one delivery destination. For more information, see CreateDelivery.   Only some Amazon Web Services services support being configured as a delivery source. These services are listed as Supported [V2 Permissions] in the table at  Enabling  logging from Amazon Web Services services.  The contents of the policy must include two statements. One statement enables general logs delivery, and the other allows delivery to the chosen destination. See the examples for the needed policies.
    ///
    /// Parameters:
    ///   - deliveryDestinationName: The name of the delivery destination to assign this policy to.
    ///   - deliveryDestinationPolicy: The contents of the policy.
    ///   - logger: Logger use during operation
    @inlinable
    public func putDeliveryDestinationPolicy(
        deliveryDestinationName: String,
        deliveryDestinationPolicy: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutDeliveryDestinationPolicyResponse {
        let input = PutDeliveryDestinationPolicyRequest(
            deliveryDestinationName: deliveryDestinationName, 
            deliveryDestinationPolicy: deliveryDestinationPolicy
        )
        return try await self.putDeliveryDestinationPolicy(input, logger: logger)
    }

    /// Creates or updates a logical delivery source. A delivery source represents an Amazon Web Services resource that sends logs to an logs delivery destination. The destination can be CloudWatch Logs, Amazon S3, or Firehose. To configure logs delivery between a delivery destination and an Amazon Web Services service that is supported as a delivery source, you must do the following:   Use PutDeliverySource to create a delivery source, which is a logical object that represents the resource that is actually sending the logs.    Use PutDeliveryDestination to create a delivery destination, which is a logical object that represents the actual delivery destination. For more  information, see PutDeliveryDestination.   If you are delivering logs cross-account, you must use  PutDeliveryDestinationPolicy in the destination account to assign an IAM policy to the  destination. This policy allows delivery to that destination.    Use CreateDelivery to create a delivery by pairing exactly  one delivery source and one delivery destination. For more  information, see CreateDelivery.    You can configure a single delivery source to send logs to multiple destinations by creating multiple deliveries. You  can also create multiple deliveries to configure multiple delivery sources to send logs to the same delivery destination. Only some Amazon Web Services services support being configured as a delivery source. These services are listed as Supported [V2 Permissions] in the table at  Enabling  logging from Amazon Web Services services.  If you use this operation to update an existing delivery source, all the current delivery source parameters are overwritten with the new parameter values that you specify.
    @Sendable
    @inlinable
    public func putDeliverySource(_ input: PutDeliverySourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutDeliverySourceResponse {
        try await self.client.execute(
            operation: "PutDeliverySource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates or updates a logical delivery source. A delivery source represents an Amazon Web Services resource that sends logs to an logs delivery destination. The destination can be CloudWatch Logs, Amazon S3, or Firehose. To configure logs delivery between a delivery destination and an Amazon Web Services service that is supported as a delivery source, you must do the following:   Use PutDeliverySource to create a delivery source, which is a logical object that represents the resource that is actually sending the logs.    Use PutDeliveryDestination to create a delivery destination, which is a logical object that represents the actual delivery destination. For more  information, see PutDeliveryDestination.   If you are delivering logs cross-account, you must use  PutDeliveryDestinationPolicy in the destination account to assign an IAM policy to the  destination. This policy allows delivery to that destination.    Use CreateDelivery to create a delivery by pairing exactly  one delivery source and one delivery destination. For more  information, see CreateDelivery.    You can configure a single delivery source to send logs to multiple destinations by creating multiple deliveries. You  can also create multiple deliveries to configure multiple delivery sources to send logs to the same delivery destination. Only some Amazon Web Services services support being configured as a delivery source. These services are listed as Supported [V2 Permissions] in the table at  Enabling  logging from Amazon Web Services services.  If you use this operation to update an existing delivery source, all the current delivery source parameters are overwritten with the new parameter values that you specify.
    ///
    /// Parameters:
    ///   - logType: Defines the type of log that the source is sending.   For Amazon Bedrock, the valid value is  APPLICATION_LOGS.   For CloudFront, the valid value is  ACCESS_LOGS.   For Amazon CodeWhisperer, the valid value is  EVENT_LOGS.   For Elemental MediaPackage, the valid values are  EGRESS_ACCESS_LOGS and INGRESS_ACCESS_LOGS.   For Elemental MediaTailor, the valid values are  AD_DECISION_SERVER_LOGS, MANIFEST_SERVICE_LOGS, and TRANSCODE_LOGS.   For IAM Identity Center, the valid value is  ERROR_LOGS.   For Amazon Q, the valid value is  EVENT_LOGS.   For Amazon SES mail manager, the valid value is  APPLICATION_LOG.   For Amazon WorkMail, the valid values are  ACCESS_CONTROL_LOGS, AUTHENTICATION_LOGS, WORKMAIL_AVAILABILITY_PROVIDER_LOGS, WORKMAIL_MAILBOX_ACCESS_LOGS,  and WORKMAIL_PERSONAL_ACCESS_TOKEN_LOGS.
    ///   - name: A name for this delivery source. This name must be unique for all delivery sources in your account.
    ///   - resourceArn: The ARN of the Amazon Web Services resource that is generating and sending logs.  For example, arn:aws:workmail:us-east-1:123456789012:organization/m-1234EXAMPLEabcd1234abcd1234abcd1234
    ///   - tags: An optional list of key-value pairs to associate with the resource. For more information about tagging, see  Tagging Amazon Web Services resources
    ///   - logger: Logger use during operation
    @inlinable
    public func putDeliverySource(
        logType: String,
        name: String,
        resourceArn: String,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutDeliverySourceResponse {
        let input = PutDeliverySourceRequest(
            logType: logType, 
            name: name, 
            resourceArn: resourceArn, 
            tags: tags
        )
        return try await self.putDeliverySource(input, logger: logger)
    }

    /// Creates or updates a destination. This operation is used only to create destinations for cross-account subscriptions. A destination encapsulates a physical resource (such as an Amazon Kinesis stream). With a destination, you can subscribe to a real-time stream of log events for a different account, ingested using PutLogEvents. Through an access policy, a destination controls what is written to it. By default, PutDestination does not set any access policy with the destination, which means a cross-account user cannot call PutSubscriptionFilter against this destination. To enable this, the destination owner must call PutDestinationPolicy after PutDestination. To perform a PutDestination operation, you must also have the  iam:PassRole permission.
    @Sendable
    @inlinable
    public func putDestination(_ input: PutDestinationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutDestinationResponse {
        try await self.client.execute(
            operation: "PutDestination", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates or updates a destination. This operation is used only to create destinations for cross-account subscriptions. A destination encapsulates a physical resource (such as an Amazon Kinesis stream). With a destination, you can subscribe to a real-time stream of log events for a different account, ingested using PutLogEvents. Through an access policy, a destination controls what is written to it. By default, PutDestination does not set any access policy with the destination, which means a cross-account user cannot call PutSubscriptionFilter against this destination. To enable this, the destination owner must call PutDestinationPolicy after PutDestination. To perform a PutDestination operation, you must also have the  iam:PassRole permission.
    ///
    /// Parameters:
    ///   - destinationName: A name for the destination.
    ///   - roleArn: The ARN of an IAM role that grants CloudWatch Logs permissions to call the Amazon Kinesis PutRecord operation on the destination stream.
    ///   - tags: An optional list of key-value pairs to associate with the resource. For more information about tagging, see  Tagging Amazon Web Services resources
    ///   - targetArn: The ARN of an Amazon Kinesis stream to which to deliver matching log events.
    ///   - logger: Logger use during operation
    @inlinable
    public func putDestination(
        destinationName: String,
        roleArn: String,
        tags: [String: String]? = nil,
        targetArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutDestinationResponse {
        let input = PutDestinationRequest(
            destinationName: destinationName, 
            roleArn: roleArn, 
            tags: tags, 
            targetArn: targetArn
        )
        return try await self.putDestination(input, logger: logger)
    }

    /// Creates or updates an access policy associated with an existing destination. An access policy is an IAM policy document that is used to authorize claims to register a subscription filter against a given destination.
    @Sendable
    @inlinable
    public func putDestinationPolicy(_ input: PutDestinationPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "PutDestinationPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates or updates an access policy associated with an existing destination. An access policy is an IAM policy document that is used to authorize claims to register a subscription filter against a given destination.
    ///
    /// Parameters:
    ///   - accessPolicy: An IAM policy document that authorizes cross-account users to deliver their log events to the associated destination. This can be up to 5120 bytes.
    ///   - destinationName: A name for an existing destination.
    ///   - forceUpdate: Specify true if you are updating an existing destination policy to grant permission to an organization ID instead of granting permission to individual Amazon Web Services accounts. Before you update a destination policy this way, you must first update the subscription filters in the accounts that send logs to this destination. If you do not, the subscription filters might stop working. By specifying true for forceUpdate, you are affirming that you have already updated the subscription  filters. For more information, see  Updating an existing cross-account subscription  If you omit this parameter, the default of false is used.
    ///   - logger: Logger use during operation
    @inlinable
    public func putDestinationPolicy(
        accessPolicy: String,
        destinationName: String,
        forceUpdate: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = PutDestinationPolicyRequest(
            accessPolicy: accessPolicy, 
            destinationName: destinationName, 
            forceUpdate: forceUpdate
        )
        return try await self.putDestinationPolicy(input, logger: logger)
    }

    /// Creates or updates a field index policy for the specified log group. Only log groups in the Standard log class support field index policies. For more information about log classes, see Log classes. You can use field index policies to create field indexes on fields found in  log events in the log group. Creating field indexes speeds up and lowers the costs for CloudWatch Logs Insights queries that reference those field indexes, because these queries attempt to skip the processing of log events that are known to not match the indexed field. Good fields to index are fields that you often need to query for and fields or values that match only a small fraction of the total log events. Common examples of indexes include request ID, session ID, userID, and instance IDs. For more information, see Create field indexes to improve query performance and reduce costs. To find the fields that are in your log group events, use the  GetLogGroupFields operation. For example, suppose you have created a field index for requestId. Then, any  CloudWatch Logs Insights query on that log group that includes requestId = value  or requestId IN [value, value, ...] will process fewer log events to reduce costs, and have improved performance. Each index policy has the following quotas and restrictions:   As many as 20 fields can be included in the policy.   Each field name can include as many as 100 characters.   Matches of log events to the names of indexed fields are case-sensitive. For example, a field index of RequestId won't match a log event containing requestId. Log group-level field index policies created with PutIndexPolicy override account-level field  index policies created with PutAccountPolicy. If you use PutIndexPolicy to create a field index policy for a log group, that log group uses only that policy. The log group ignores any account-wide field index policy that you might have created.
    @Sendable
    @inlinable
    public func putIndexPolicy(_ input: PutIndexPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutIndexPolicyResponse {
        try await self.client.execute(
            operation: "PutIndexPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates or updates a field index policy for the specified log group. Only log groups in the Standard log class support field index policies. For more information about log classes, see Log classes. You can use field index policies to create field indexes on fields found in  log events in the log group. Creating field indexes speeds up and lowers the costs for CloudWatch Logs Insights queries that reference those field indexes, because these queries attempt to skip the processing of log events that are known to not match the indexed field. Good fields to index are fields that you often need to query for and fields or values that match only a small fraction of the total log events. Common examples of indexes include request ID, session ID, userID, and instance IDs. For more information, see Create field indexes to improve query performance and reduce costs. To find the fields that are in your log group events, use the  GetLogGroupFields operation. For example, suppose you have created a field index for requestId. Then, any  CloudWatch Logs Insights query on that log group that includes requestId = value  or requestId IN [value, value, ...] will process fewer log events to reduce costs, and have improved performance. Each index policy has the following quotas and restrictions:   As many as 20 fields can be included in the policy.   Each field name can include as many as 100 characters.   Matches of log events to the names of indexed fields are case-sensitive. For example, a field index of RequestId won't match a log event containing requestId. Log group-level field index policies created with PutIndexPolicy override account-level field  index policies created with PutAccountPolicy. If you use PutIndexPolicy to create a field index policy for a log group, that log group uses only that policy. The log group ignores any account-wide field index policy that you might have created.
    ///
    /// Parameters:
    ///   - logGroupIdentifier: Specify either the log group name or log group ARN to apply this field index policy to. If you specify an ARN, use the format arn:aws:logs:region:account-id:log-group:log_group_name Don't include an * at the end.
    ///   - policyDocument: The index policy document, in JSON format. The following is an example of an index policy document that creates two indexes, RequestId and TransactionId.  "policyDocument": "{ "Fields": [ "RequestId", "TransactionId" ] }"  The policy document must include at least one field index. For more information about the fields that can be included and other restrictions, see Field index syntax and quotas.
    ///   - logger: Logger use during operation
    @inlinable
    public func putIndexPolicy(
        logGroupIdentifier: String,
        policyDocument: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutIndexPolicyResponse {
        let input = PutIndexPolicyRequest(
            logGroupIdentifier: logGroupIdentifier, 
            policyDocument: policyDocument
        )
        return try await self.putIndexPolicy(input, logger: logger)
    }

    /// Creates an integration between CloudWatch Logs and another service in this account. Currently, only integrations with  OpenSearch Service are supported, and currently you can have only one integration in your account. Integrating with OpenSearch Service makes it possible for you to create curated vended logs dashboards, powered  by OpenSearch Service analytics. For more information, see  Vended log dashboards powered by Amazon OpenSearch Service. You can use this operation only to create a new integration. You can't modify an existing integration.
    @Sendable
    @inlinable
    public func putIntegration(_ input: PutIntegrationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutIntegrationResponse {
        try await self.client.execute(
            operation: "PutIntegration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an integration between CloudWatch Logs and another service in this account. Currently, only integrations with  OpenSearch Service are supported, and currently you can have only one integration in your account. Integrating with OpenSearch Service makes it possible for you to create curated vended logs dashboards, powered  by OpenSearch Service analytics. For more information, see  Vended log dashboards powered by Amazon OpenSearch Service. You can use this operation only to create a new integration. You can't modify an existing integration.
    ///
    /// Parameters:
    ///   - integrationName: A name for the integration.
    ///   - integrationType: The type of integration. Currently, the only supported type is OPENSEARCH.
    ///   - resourceConfig: A structure that contains configuration information for the integration that you are creating.
    ///   - logger: Logger use during operation
    @inlinable
    public func putIntegration(
        integrationName: String,
        integrationType: IntegrationType,
        resourceConfig: ResourceConfig,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutIntegrationResponse {
        let input = PutIntegrationRequest(
            integrationName: integrationName, 
            integrationType: integrationType, 
            resourceConfig: resourceConfig
        )
        return try await self.putIntegration(input, logger: logger)
    }

    /// Uploads a batch of log events to the specified log stream.  The sequence token is now ignored in PutLogEvents actions. PutLogEvents actions are always accepted and never return InvalidSequenceTokenException or DataAlreadyAcceptedException even if the sequence token is not valid. You can use parallel PutLogEvents actions on the same log stream.   The batch of events must satisfy the following constraints:   The maximum batch size is 1,048,576 bytes. This size is calculated as the sum of all event messages in UTF-8, plus 26 bytes for each log event.   None of the log events in the batch can be more than 2 hours in the future.   None of the log events in the batch can be more than 14 days in the past. Also, none of the log events can be from earlier than the retention period of the log group.   The log events in the batch must be in chronological order by their timestamp. The timestamp is the time that the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. (In Amazon Web Services Tools for PowerShell and the Amazon Web Services SDK for .NET, the timestamp is specified in .NET format: yyyy-mm-ddThh:mm:ss. For example, 2017-09-15T13:45:30.)    A batch of log events in a single request cannot span more than 24 hours. Otherwise, the operation fails.   Each log event can be no larger than 256 KB.   The maximum number of log events in a batch is 10,000.    The quota of five requests per second per log stream has been removed. Instead, PutLogEvents actions are throttled based on a  per-second per-account quota. You can request an increase to the per-second throttling quota by using the Service Quotas service.    If a call to PutLogEvents returns "UnrecognizedClientException" the most likely cause is a non-valid Amazon Web Services access key ID or secret key.
    @Sendable
    @inlinable
    public func putLogEvents(_ input: PutLogEventsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutLogEventsResponse {
        try await self.client.execute(
            operation: "PutLogEvents", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Uploads a batch of log events to the specified log stream.  The sequence token is now ignored in PutLogEvents actions. PutLogEvents actions are always accepted and never return InvalidSequenceTokenException or DataAlreadyAcceptedException even if the sequence token is not valid. You can use parallel PutLogEvents actions on the same log stream.   The batch of events must satisfy the following constraints:   The maximum batch size is 1,048,576 bytes. This size is calculated as the sum of all event messages in UTF-8, plus 26 bytes for each log event.   None of the log events in the batch can be more than 2 hours in the future.   None of the log events in the batch can be more than 14 days in the past. Also, none of the log events can be from earlier than the retention period of the log group.   The log events in the batch must be in chronological order by their timestamp. The timestamp is the time that the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. (In Amazon Web Services Tools for PowerShell and the Amazon Web Services SDK for .NET, the timestamp is specified in .NET format: yyyy-mm-ddThh:mm:ss. For example, 2017-09-15T13:45:30.)    A batch of log events in a single request cannot span more than 24 hours. Otherwise, the operation fails.   Each log event can be no larger than 256 KB.   The maximum number of log events in a batch is 10,000.    The quota of five requests per second per log stream has been removed. Instead, PutLogEvents actions are throttled based on a  per-second per-account quota. You can request an increase to the per-second throttling quota by using the Service Quotas service.    If a call to PutLogEvents returns "UnrecognizedClientException" the most likely cause is a non-valid Amazon Web Services access key ID or secret key.
    ///
    /// Parameters:
    ///   - entity: The entity associated with the log events.
    ///   - logEvents: The log events.
    ///   - logGroupName: The name of the log group.
    ///   - logStreamName: The name of the log stream.
    ///   - sequenceToken: The sequence token obtained from the response of the previous PutLogEvents call.  The sequenceToken parameter is now ignored in PutLogEvents actions. PutLogEvents actions are now accepted and never return InvalidSequenceTokenException or DataAlreadyAcceptedException even if the sequence token is not valid.
    ///   - logger: Logger use during operation
    @inlinable
    public func putLogEvents(
        entity: Entity? = nil,
        logEvents: [InputLogEvent],
        logGroupName: String,
        logStreamName: String,
        sequenceToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutLogEventsResponse {
        let input = PutLogEventsRequest(
            entity: entity, 
            logEvents: logEvents, 
            logGroupName: logGroupName, 
            logStreamName: logStreamName, 
            sequenceToken: sequenceToken
        )
        return try await self.putLogEvents(input, logger: logger)
    }

    /// Creates or updates a metric filter and associates it with the specified log group. With metric filters, you can configure rules to extract metric data from log events ingested through PutLogEvents. The maximum number of metric filters that can be associated with a log group is 100. Using regular expressions in filter patterns is supported. For these filters,  there is a quota of two regular expression patterns within a single filter pattern. There is also a quota of five regular expression patterns per log group. For more information about using regular expressions in filter patterns,  see  Filter pattern syntax for metric filters, subscription filters, filter log events, and Live Tail. When you create a metric filter, you can also optionally assign a unit and dimensions to the metric that is created.  Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as  IPAddress or requestID as dimensions. Each different value  found for  a dimension is treated as a separate metric and accrues charges as a separate custom metric.  CloudWatch Logs might disable a metric filter if it generates 1,000 different name/value pairs for your specified dimensions within one hour. You can also set up a billing alarm to alert you if your charges are higher than  expected. For more information,  see  Creating a Billing Alarm to Monitor Your Estimated Amazon Web Services Charges.
    @Sendable
    @inlinable
    public func putMetricFilter(_ input: PutMetricFilterRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "PutMetricFilter", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates or updates a metric filter and associates it with the specified log group. With metric filters, you can configure rules to extract metric data from log events ingested through PutLogEvents. The maximum number of metric filters that can be associated with a log group is 100. Using regular expressions in filter patterns is supported. For these filters,  there is a quota of two regular expression patterns within a single filter pattern. There is also a quota of five regular expression patterns per log group. For more information about using regular expressions in filter patterns,  see  Filter pattern syntax for metric filters, subscription filters, filter log events, and Live Tail. When you create a metric filter, you can also optionally assign a unit and dimensions to the metric that is created.  Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as  IPAddress or requestID as dimensions. Each different value  found for  a dimension is treated as a separate metric and accrues charges as a separate custom metric.  CloudWatch Logs might disable a metric filter if it generates 1,000 different name/value pairs for your specified dimensions within one hour. You can also set up a billing alarm to alert you if your charges are higher than  expected. For more information,  see  Creating a Billing Alarm to Monitor Your Estimated Amazon Web Services Charges.
    ///
    /// Parameters:
    ///   - applyOnTransformedLogs: This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see PutTransformer. If the log group uses either a log-group level or account-level transformer, and you specify true, the metric filter will be applied on the transformed version of the log events instead of the original ingested log events.
    ///   - filterName: A name for the metric filter.
    ///   - filterPattern: A filter pattern for extracting metric data out of ingested log events.
    ///   - logGroupName: The name of the log group.
    ///   - metricTransformations: A collection of information that defines how metric data gets emitted.
    ///   - logger: Logger use during operation
    @inlinable
    public func putMetricFilter(
        applyOnTransformedLogs: Bool? = nil,
        filterName: String,
        filterPattern: String,
        logGroupName: String,
        metricTransformations: [MetricTransformation],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = PutMetricFilterRequest(
            applyOnTransformedLogs: applyOnTransformedLogs, 
            filterName: filterName, 
            filterPattern: filterPattern, 
            logGroupName: logGroupName, 
            metricTransformations: metricTransformations
        )
        return try await self.putMetricFilter(input, logger: logger)
    }

    /// Creates or updates a query definition for CloudWatch Logs Insights. For  more information, see Analyzing Log Data with CloudWatch Logs Insights. To update a query definition, specify its queryDefinitionId in your request. The values of name, queryString, and logGroupNames are changed to the values that you specify in your update operation. No current values are retained from the current query definition. For example, imagine updating a current query definition that includes log groups. If you don't specify the logGroupNames parameter in your update operation, the query definition changes to contain no log groups. You must have the logs:PutQueryDefinition permission to be able to perform this operation.
    @Sendable
    @inlinable
    public func putQueryDefinition(_ input: PutQueryDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutQueryDefinitionResponse {
        try await self.client.execute(
            operation: "PutQueryDefinition", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates or updates a query definition for CloudWatch Logs Insights. For  more information, see Analyzing Log Data with CloudWatch Logs Insights. To update a query definition, specify its queryDefinitionId in your request. The values of name, queryString, and logGroupNames are changed to the values that you specify in your update operation. No current values are retained from the current query definition. For example, imagine updating a current query definition that includes log groups. If you don't specify the logGroupNames parameter in your update operation, the query definition changes to contain no log groups. You must have the logs:PutQueryDefinition permission to be able to perform this operation.
    ///
    /// Parameters:
    ///   - clientToken: Used as an idempotency token, to avoid returning an exception if the service receives the same  request twice because of a network
    ///   - logGroupNames: Use this parameter to include specific log groups as part of your query definition. If your query uses the OpenSearch Service query language, you specify the log group names inside the querystring instead of here. If you are updating an existing query definition for the Logs Insights QL or OpenSearch Service PPL and you omit this parameter, then the updated definition will contain no log groups.
    ///   - name: A name for the query definition. If you are saving numerous query definitions, we recommend that you name them. This way, you can find the ones you want by using the first part of the name as a filter in the queryDefinitionNamePrefix parameter of DescribeQueryDefinitions.
    ///   - queryDefinitionId: If you are updating a query definition, use this parameter to specify the ID of the query definition that you want to update. You can use DescribeQueryDefinitions to retrieve the IDs of your saved query definitions. If you are creating a query definition, do not specify this parameter. CloudWatch generates a unique ID for the new query definition and include it in the response to this operation.
    ///   - queryLanguage: Specify the query language to use for this query. The options are Logs Insights QL, OpenSearch PPL, and OpenSearch SQL. For more information about the query languages that CloudWatch Logs supports,  see Supported query languages.
    ///   - queryString: The query string to use for this definition.  For more information, see CloudWatch Logs Insights Query Syntax.
    ///   - logger: Logger use during operation
    @inlinable
    public func putQueryDefinition(
        clientToken: String? = PutQueryDefinitionRequest.idempotencyToken(),
        logGroupNames: [String]? = nil,
        name: String,
        queryDefinitionId: String? = nil,
        queryLanguage: QueryLanguage? = nil,
        queryString: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutQueryDefinitionResponse {
        let input = PutQueryDefinitionRequest(
            clientToken: clientToken, 
            logGroupNames: logGroupNames, 
            name: name, 
            queryDefinitionId: queryDefinitionId, 
            queryLanguage: queryLanguage, 
            queryString: queryString
        )
        return try await self.putQueryDefinition(input, logger: logger)
    }

    /// Creates or updates a resource policy allowing other Amazon Web Services services to put log events to this account, such as Amazon Route 53. An account can have up to 10 resource policies per Amazon Web Services Region.
    @Sendable
    @inlinable
    public func putResourcePolicy(_ input: PutResourcePolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutResourcePolicyResponse {
        try await self.client.execute(
            operation: "PutResourcePolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates or updates a resource policy allowing other Amazon Web Services services to put log events to this account, such as Amazon Route 53. An account can have up to 10 resource policies per Amazon Web Services Region.
    ///
    /// Parameters:
    ///   - policyDocument: Details of the new policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string. This parameter is required. The following example creates a resource policy enabling the Route 53 service to put DNS query logs in to the specified log group. Replace "logArn" with the ARN of  your CloudWatch Logs resource, such as a log group or log stream. CloudWatch Logs also supports aws:SourceArn and aws:SourceAccount
    ///   - policyName: Name of the new policy. This parameter is required.
    ///   - logger: Logger use during operation
    @inlinable
    public func putResourcePolicy(
        policyDocument: String? = nil,
        policyName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutResourcePolicyResponse {
        let input = PutResourcePolicyRequest(
            policyDocument: policyDocument, 
            policyName: policyName
        )
        return try await self.putResourcePolicy(input, logger: logger)
    }

    /// Sets the retention of the specified log group. With a retention policy, you can configure the number of days for which to retain log events in the specified log group.  CloudWatch Logs doesn't immediately delete log events when they reach their retention setting. It typically takes up to 72 hours after that before log events are deleted, but in rare situations might take longer. To illustrate, imagine that you change a log group to have a longer retention setting when it contains log events that are past the expiration date, but haven't been deleted. Those log events will take up to 72 hours to be deleted after the new retention date is reached. To make sure that log data is deleted permanently, keep a log group at its lower retention setting until 72 hours after the previous retention period ends. Alternatively, wait to change the retention setting until you confirm that the earlier log events are deleted.  When log events reach their retention setting they are marked for deletion. After they are marked for deletion, they do not add to your archival storage costs anymore, even if  they are not actually deleted until later. These log events marked for deletion are also not  included when you use an API to retrieve the storedBytes value to see how many bytes a log group is storing.
    @Sendable
    @inlinable
    public func putRetentionPolicy(_ input: PutRetentionPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "PutRetentionPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sets the retention of the specified log group. With a retention policy, you can configure the number of days for which to retain log events in the specified log group.  CloudWatch Logs doesn't immediately delete log events when they reach their retention setting. It typically takes up to 72 hours after that before log events are deleted, but in rare situations might take longer. To illustrate, imagine that you change a log group to have a longer retention setting when it contains log events that are past the expiration date, but haven't been deleted. Those log events will take up to 72 hours to be deleted after the new retention date is reached. To make sure that log data is deleted permanently, keep a log group at its lower retention setting until 72 hours after the previous retention period ends. Alternatively, wait to change the retention setting until you confirm that the earlier log events are deleted.  When log events reach their retention setting they are marked for deletion. After they are marked for deletion, they do not add to your archival storage costs anymore, even if  they are not actually deleted until later. These log events marked for deletion are also not  included when you use an API to retrieve the storedBytes value to see how many bytes a log group is storing.
    ///
    /// Parameters:
    ///   - logGroupName: The name of the log group.
    ///   - retentionInDays: 
    ///   - logger: Logger use during operation
    @inlinable
    public func putRetentionPolicy(
        logGroupName: String,
        retentionInDays: Int,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = PutRetentionPolicyRequest(
            logGroupName: logGroupName, 
            retentionInDays: retentionInDays
        )
        return try await self.putRetentionPolicy(input, logger: logger)
    }

    /// Creates or updates a subscription filter and associates it with the specified log group. With subscription filters, you can subscribe to a real-time stream of log events ingested through PutLogEvents and have them delivered to a specific destination. When log events are sent to the receiving service, they are Base64 encoded and compressed with the GZIP format. The following destinations are supported for subscription filters:   An Amazon Kinesis data stream belonging to the same account as the subscription filter, for same-account delivery.   A logical destination created with PutDestination that belongs to a different account, for cross-account delivery. We currently support Kinesis Data Streams and Firehose as logical destinations.   An Amazon Kinesis Data Firehose delivery stream that belongs to the same account as the subscription filter, for same-account delivery.   An Lambda function that belongs to the same account as the subscription filter, for same-account delivery.   Each log group can have up to two subscription filters associated with it. If you are updating an existing filter, you must specify the correct name in filterName.  Using regular expressions in filter patterns is supported. For these filters,  there is a quotas of quota of two regular expression patterns within a single filter pattern. There is also a quota of five regular expression patterns per log group. For more information about using regular expressions in filter patterns,  see  Filter pattern syntax for metric filters, subscription filters, filter log events, and Live Tail. To perform a PutSubscriptionFilter operation for any destination except a Lambda function,  you must also have the  iam:PassRole permission.
    @Sendable
    @inlinable
    public func putSubscriptionFilter(_ input: PutSubscriptionFilterRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "PutSubscriptionFilter", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates or updates a subscription filter and associates it with the specified log group. With subscription filters, you can subscribe to a real-time stream of log events ingested through PutLogEvents and have them delivered to a specific destination. When log events are sent to the receiving service, they are Base64 encoded and compressed with the GZIP format. The following destinations are supported for subscription filters:   An Amazon Kinesis data stream belonging to the same account as the subscription filter, for same-account delivery.   A logical destination created with PutDestination that belongs to a different account, for cross-account delivery. We currently support Kinesis Data Streams and Firehose as logical destinations.   An Amazon Kinesis Data Firehose delivery stream that belongs to the same account as the subscription filter, for same-account delivery.   An Lambda function that belongs to the same account as the subscription filter, for same-account delivery.   Each log group can have up to two subscription filters associated with it. If you are updating an existing filter, you must specify the correct name in filterName.  Using regular expressions in filter patterns is supported. For these filters,  there is a quotas of quota of two regular expression patterns within a single filter pattern. There is also a quota of five regular expression patterns per log group. For more information about using regular expressions in filter patterns,  see  Filter pattern syntax for metric filters, subscription filters, filter log events, and Live Tail. To perform a PutSubscriptionFilter operation for any destination except a Lambda function,  you must also have the  iam:PassRole permission.
    ///
    /// Parameters:
    ///   - applyOnTransformedLogs: This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see PutTransformer. If the log group uses either a log-group level or account-level transformer, and you specify true, the subscription filter will be applied on the transformed version of the log events instead of the original ingested log events.
    ///   - destinationArn: The ARN of the destination to deliver matching log events to. Currently, the supported destinations are:   An Amazon Kinesis stream belonging to the same account as the subscription filter, for same-account delivery.   A logical destination (specified using an ARN) belonging to a different account,  for cross-account delivery. If you're setting up a cross-account subscription, the destination must have an IAM policy associated with it. The IAM policy must allow the sender to send logs to the destination. For more information, see PutDestinationPolicy.   A Kinesis Data Firehose delivery stream belonging to the same account as the subscription filter, for same-account delivery.   A Lambda function belonging to the same account as the subscription filter, for same-account delivery.
    ///   - distribution: The method used to distribute log data to the destination. By default, log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis data stream.
    ///   - filterName: A name for the subscription filter. If you are updating an existing filter, you must specify the correct name in filterName. To find the name of the filter currently associated with a log group, use DescribeSubscriptionFilters.
    ///   - filterPattern: A filter pattern for subscribing to a filtered stream of log events.
    ///   - logGroupName: The name of the log group.
    ///   - roleArn: The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
    ///   - logger: Logger use during operation
    @inlinable
    public func putSubscriptionFilter(
        applyOnTransformedLogs: Bool? = nil,
        destinationArn: String,
        distribution: Distribution? = nil,
        filterName: String,
        filterPattern: String,
        logGroupName: String,
        roleArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = PutSubscriptionFilterRequest(
            applyOnTransformedLogs: applyOnTransformedLogs, 
            destinationArn: destinationArn, 
            distribution: distribution, 
            filterName: filterName, 
            filterPattern: filterPattern, 
            logGroupName: logGroupName, 
            roleArn: roleArn
        )
        return try await self.putSubscriptionFilter(input, logger: logger)
    }

    /// Creates or updates a log transformer for a single log group. You use log transformers to transform log events into a different format, making them easier for you to process and analyze. You can also transform logs from different sources into standardized formats that  contains relevant, source-specific information. After you have created a transformer,  CloudWatch Logs performs the transformations at the time of log ingestion. You can then refer to the transformed versions of the logs during operations such as querying with CloudWatch Logs Insights or creating metric filters or subscription filers. You can also use a transformer to copy metadata from metadata keys into the log events themselves. This metadata can include log group name,  log stream name, account ID and Region. A transformer for a log group is a series of processors, where each processor applies one type of transformation to the log events ingested into this log group. The processors work one after another, in the order that you list them, like a pipeline. For more information about the available processors to use in a transformer, see  Processors that you can use. Having log events in standardized format enables visibility across your applications for your log analysis, reporting, and alarming needs.  CloudWatch Logs provides transformation for common log types with out-of-the-box transformation templates for major Amazon Web Services log sources such  as VPC flow logs, Lambda, and Amazon RDS. You can use pre-built transformation templates or create custom transformation policies. You can create transformers only for the log groups in the Standard log class. You can also set up a transformer at the account level. For more information, see  PutAccountPolicy. If there is both a  log-group level transformer created with PutTransformer and an account-level transformer that could apply to the same log  group, the log group uses only the log-group level transformer. It ignores the account-level transformer.
    @Sendable
    @inlinable
    public func putTransformer(_ input: PutTransformerRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "PutTransformer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates or updates a log transformer for a single log group. You use log transformers to transform log events into a different format, making them easier for you to process and analyze. You can also transform logs from different sources into standardized formats that  contains relevant, source-specific information. After you have created a transformer,  CloudWatch Logs performs the transformations at the time of log ingestion. You can then refer to the transformed versions of the logs during operations such as querying with CloudWatch Logs Insights or creating metric filters or subscription filers. You can also use a transformer to copy metadata from metadata keys into the log events themselves. This metadata can include log group name,  log stream name, account ID and Region. A transformer for a log group is a series of processors, where each processor applies one type of transformation to the log events ingested into this log group. The processors work one after another, in the order that you list them, like a pipeline. For more information about the available processors to use in a transformer, see  Processors that you can use. Having log events in standardized format enables visibility across your applications for your log analysis, reporting, and alarming needs.  CloudWatch Logs provides transformation for common log types with out-of-the-box transformation templates for major Amazon Web Services log sources such  as VPC flow logs, Lambda, and Amazon RDS. You can use pre-built transformation templates or create custom transformation policies. You can create transformers only for the log groups in the Standard log class. You can also set up a transformer at the account level. For more information, see  PutAccountPolicy. If there is both a  log-group level transformer created with PutTransformer and an account-level transformer that could apply to the same log  group, the log group uses only the log-group level transformer. It ignores the account-level transformer.
    ///
    /// Parameters:
    ///   - logGroupIdentifier: Specify either the name or ARN of the log group to create the transformer for.
    ///   - transformerConfig: This structure contains the configuration of this log transformer. A log transformer is an array of processors, where each processor applies one type of transformation to the log events that are ingested.
    ///   - logger: Logger use during operation
    @inlinable
    public func putTransformer(
        logGroupIdentifier: String,
        transformerConfig: [Processor],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = PutTransformerRequest(
            logGroupIdentifier: logGroupIdentifier, 
            transformerConfig: transformerConfig
        )
        return try await self.putTransformer(input, logger: logger)
    }

    /// Starts a Live Tail streaming session for one or more log groups. A Live Tail session returns a stream of  log events that have been recently ingested in the log groups. For more information, see  Use Live Tail to view logs in near real time.  The response to this operation is a response stream, over which  the server sends live log events and the client receives them. The following objects are sent over the stream:   A single LiveTailSessionStart  object is sent at the start of the session.   Every second, a LiveTailSessionUpdate object is sent. Each of these objects contains an array of the actual log events. If no new log events were ingested in the past second, the  LiveTailSessionUpdate object will contain an empty array. The array of log events contained in a LiveTailSessionUpdate can include as many as 500 log events. If the number of log events matching the request exceeds 500 per second, the log events are sampled down to 500 log events to be included in each LiveTailSessionUpdate object. If your client consumes the log events slower than the server produces them, CloudWatch Logs buffers up to 10 LiveTailSessionUpdate events or 5000 log events, after  which it starts dropping the oldest events.   A SessionStreamingException  object is returned if an unknown error occurs on the server side.   A SessionTimeoutException  object is returned when the session times out, after it has been kept open for three hours.    You can end a session before it times out by closing the session stream or by closing the client that is receiving the  stream. The session also ends if the established connection between the client and the server breaks.  For examples of using an SDK to start a Live Tail session, see   Start a Live Tail session using an Amazon Web Services SDK.
    @Sendable
    @inlinable
    public func startLiveTail(_ input: StartLiveTailRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartLiveTailResponse {
        try await self.client.execute(
            operation: "StartLiveTail", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "streaming-", 
            logger: logger
        )
    }
    /// Starts a Live Tail streaming session for one or more log groups. A Live Tail session returns a stream of  log events that have been recently ingested in the log groups. For more information, see  Use Live Tail to view logs in near real time.  The response to this operation is a response stream, over which  the server sends live log events and the client receives them. The following objects are sent over the stream:   A single LiveTailSessionStart  object is sent at the start of the session.   Every second, a LiveTailSessionUpdate object is sent. Each of these objects contains an array of the actual log events. If no new log events were ingested in the past second, the  LiveTailSessionUpdate object will contain an empty array. The array of log events contained in a LiveTailSessionUpdate can include as many as 500 log events. If the number of log events matching the request exceeds 500 per second, the log events are sampled down to 500 log events to be included in each LiveTailSessionUpdate object. If your client consumes the log events slower than the server produces them, CloudWatch Logs buffers up to 10 LiveTailSessionUpdate events or 5000 log events, after  which it starts dropping the oldest events.   A SessionStreamingException  object is returned if an unknown error occurs on the server side.   A SessionTimeoutException  object is returned when the session times out, after it has been kept open for three hours.    You can end a session before it times out by closing the session stream or by closing the client that is receiving the  stream. The session also ends if the established connection between the client and the server breaks.  For examples of using an SDK to start a Live Tail session, see   Start a Live Tail session using an Amazon Web Services SDK.
    ///
    /// Parameters:
    ///   - logEventFilterPattern: An optional pattern to use to filter the results to include only log events that match the pattern. For example, a filter pattern of error 404 causes only log events that include both error  and 404 to be included in the Live Tail stream. Regular expression filter patterns are supported. For more information about filter pattern syntax, see Filter and Pattern Syntax.
    ///   - logGroupIdentifiers: An array where each item in the array is a log group to include in the Live Tail session. Specify each log group by its ARN.  If you specify an ARN, the ARN can't end with an asterisk (*).  You can include up to 10 log groups.
    ///   - logStreamNamePrefixes: If you specify this parameter, then only log events in the log streams that have names that start with the  prefixes that you specify here are  included in the Live Tail session. If you specify this field, you can't also specify the logStreamNames field.  You can specify this parameter only if you specify only one log group in logGroupIdentifiers.
    ///   - logStreamNames: If you specify this parameter, then only log events in the log streams that you specify here are  included in the Live Tail session. If you specify this field, you can't also specify the logStreamNamePrefixes field.  You can specify this parameter only if you specify only one log group in logGroupIdentifiers.
    ///   - logger: Logger use during operation
    @inlinable
    public func startLiveTail(
        logEventFilterPattern: String? = nil,
        logGroupIdentifiers: [String],
        logStreamNamePrefixes: [String]? = nil,
        logStreamNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartLiveTailResponse {
        let input = StartLiveTailRequest(
            logEventFilterPattern: logEventFilterPattern, 
            logGroupIdentifiers: logGroupIdentifiers, 
            logStreamNamePrefixes: logStreamNamePrefixes, 
            logStreamNames: logStreamNames
        )
        return try await self.startLiveTail(input, logger: logger)
    }

    /// Starts a query of one or more log groups using CloudWatch Logs Insights. You specify the log groups and time range to query and the query string to use. For more information, see CloudWatch Logs Insights Query Syntax. After you run a query using StartQuery, the query results are stored by CloudWatch Logs.  You can use GetQueryResults to retrieve the results of a query, using the queryId that StartQuery returns.   To specify the log groups to query, a StartQuery operation must include one of the following:   Either exactly one of the following parameters: logGroupName, logGroupNames, or logGroupIdentifiers    Or the queryString must include a SOURCE command to select log  groups for the query. The SOURCE command can select log groups based on log group name prefix, account ID, and log class.  For more information about the SOURCE command,  see SOURCE.    If you have associated a KMS key with the query results in this account,  then  StartQuery uses that key to  encrypt the results when it stores them. If no key is associated with query results, the query results are  encrypted with the default CloudWatch Logs encryption method. Queries time out after 60 minutes of runtime. If your queries are timing out, reduce the time range being searched or partition your query into a number of queries. If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account to start a query in a linked source account. For more information, see CloudWatch cross-account observability. For a cross-account StartQuery operation, the query definition must be defined in the monitoring account. You can have up to 30 concurrent CloudWatch Logs insights queries, including queries that have been added to dashboards.
    @Sendable
    @inlinable
    public func startQuery(_ input: StartQueryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartQueryResponse {
        try await self.client.execute(
            operation: "StartQuery", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts a query of one or more log groups using CloudWatch Logs Insights. You specify the log groups and time range to query and the query string to use. For more information, see CloudWatch Logs Insights Query Syntax. After you run a query using StartQuery, the query results are stored by CloudWatch Logs.  You can use GetQueryResults to retrieve the results of a query, using the queryId that StartQuery returns.   To specify the log groups to query, a StartQuery operation must include one of the following:   Either exactly one of the following parameters: logGroupName, logGroupNames, or logGroupIdentifiers    Or the queryString must include a SOURCE command to select log  groups for the query. The SOURCE command can select log groups based on log group name prefix, account ID, and log class.  For more information about the SOURCE command,  see SOURCE.    If you have associated a KMS key with the query results in this account,  then  StartQuery uses that key to  encrypt the results when it stores them. If no key is associated with query results, the query results are  encrypted with the default CloudWatch Logs encryption method. Queries time out after 60 minutes of runtime. If your queries are timing out, reduce the time range being searched or partition your query into a number of queries. If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account to start a query in a linked source account. For more information, see CloudWatch cross-account observability. For a cross-account StartQuery operation, the query definition must be defined in the monitoring account. You can have up to 30 concurrent CloudWatch Logs insights queries, including queries that have been added to dashboards.
    ///
    /// Parameters:
    ///   - endTime: The end of the time range to query. The range is inclusive, so the specified end time is included in the query. Specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.
    ///   - limit: The maximum number of log events to return in the query. If the query string uses the fields command, only the specified fields and their values are returned. The default is 10,000.
    ///   - logGroupIdentifiers: The list of log groups to query. You can include up to 50 log groups. You can specify them by the log group name or ARN. If a log group that you're querying is in a source account and you're using a monitoring account, you must specify the ARN of the log group here. The query definition must also be defined in the monitoring account. If you specify an ARN, use the format arn:aws:logs:region:account-id:log-group:log_group_name Don't include an * at the end. A StartQuery operation must include exactly one of the following parameters: logGroupName, logGroupNames, or logGroupIdentifiers. The exception is queries using the OpenSearch Service SQL query language, where you specify the log group names inside the querystring instead of here.
    ///   - logGroupName: The log group on which to perform the query.  A StartQuery operation must include exactly one of the following parameters: logGroupName, logGroupNames, or logGroupIdentifiers. The exception is queries using the OpenSearch Service SQL query language, where you specify the log group names inside the querystring instead of here.
    ///   - logGroupNames: The list of log groups to be queried. You can include up to 50 log groups.  A StartQuery operation must include exactly one of the following parameters: logGroupName, logGroupNames, or logGroupIdentifiers. The exception is queries using the OpenSearch Service SQL query language, where you specify the log group names inside the querystring instead of here.
    ///   - queryLanguage: Specify the query language to use for this query. The options are Logs Insights QL, OpenSearch PPL, and OpenSearch SQL. For more information about the query languages that CloudWatch Logs supports,  see Supported query languages.
    ///   - queryString: The query string to use. For more information, see CloudWatch Logs Insights Query Syntax.
    ///   - startTime: The beginning of the time range to query. The range is inclusive, so the specified start time is included in the query. Specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.
    ///   - logger: Logger use during operation
    @inlinable
    public func startQuery(
        endTime: Int64,
        limit: Int? = nil,
        logGroupIdentifiers: [String]? = nil,
        logGroupName: String? = nil,
        logGroupNames: [String]? = nil,
        queryLanguage: QueryLanguage? = nil,
        queryString: String,
        startTime: Int64,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartQueryResponse {
        let input = StartQueryRequest(
            endTime: endTime, 
            limit: limit, 
            logGroupIdentifiers: logGroupIdentifiers, 
            logGroupName: logGroupName, 
            logGroupNames: logGroupNames, 
            queryLanguage: queryLanguage, 
            queryString: queryString, 
            startTime: startTime
        )
        return try await self.startQuery(input, logger: logger)
    }

    /// Stops a CloudWatch Logs Insights query that is in progress. If the query has already ended, the operation returns an error indicating that the specified query is not running.
    @Sendable
    @inlinable
    public func stopQuery(_ input: StopQueryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopQueryResponse {
        try await self.client.execute(
            operation: "StopQuery", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Stops a CloudWatch Logs Insights query that is in progress. If the query has already ended, the operation returns an error indicating that the specified query is not running.
    ///
    /// Parameters:
    ///   - queryId: The ID number of the query to stop. To find this ID number, use DescribeQueries.
    ///   - logger: Logger use during operation
    @inlinable
    public func stopQuery(
        queryId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StopQueryResponse {
        let input = StopQueryRequest(
            queryId: queryId
        )
        return try await self.stopQuery(input, logger: logger)
    }

    ///  The TagLogGroup operation is on the path to deprecation. We recommend that you use  TagResource instead.  Adds or updates the specified tags for the specified log group. To list the tags for a log group, use ListTagsForResource. To remove tags, use UntagResource. For more information about tags, see Tag Log Groups in Amazon CloudWatch Logs in the Amazon CloudWatch Logs User Guide. CloudWatch Logs doesn't support IAM policies that prevent users from assigning specified tags to  log groups using the aws:Resource/key-name or aws:TagKeys condition keys.  For more information about using tags to control access, see  Controlling access to Amazon Web Services resources using tags.
    @available(*, deprecated, message: "Please use the generic tagging API TagResource")
    @Sendable
    @inlinable
    public func tagLogGroup(_ input: TagLogGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "TagLogGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  The TagLogGroup operation is on the path to deprecation. We recommend that you use  TagResource instead.  Adds or updates the specified tags for the specified log group. To list the tags for a log group, use ListTagsForResource. To remove tags, use UntagResource. For more information about tags, see Tag Log Groups in Amazon CloudWatch Logs in the Amazon CloudWatch Logs User Guide. CloudWatch Logs doesn't support IAM policies that prevent users from assigning specified tags to  log groups using the aws:Resource/key-name or aws:TagKeys condition keys.  For more information about using tags to control access, see  Controlling access to Amazon Web Services resources using tags.
    ///
    /// Parameters:
    ///   - logGroupName: The name of the log group.
    ///   - tags: The key-value pairs to use for the tags.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Please use the generic tagging API TagResource")
    @inlinable
    public func tagLogGroup(
        logGroupName: String,
        tags: [String: String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = TagLogGroupRequest(
            logGroupName: logGroupName, 
            tags: tags
        )
        return try await self.tagLogGroup(input, logger: logger)
    }

    /// Assigns one or more tags (key-value pairs) to the specified CloudWatch Logs resource.  Currently, the only CloudWatch Logs resources that  can be tagged are log groups and destinations.  Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters. You can use the TagResource action with a resource that already has tags. If you specify a new tag key for the alarm,  this tag is appended to the list of tags associated with the alarm. If you specify a tag key that is already associated with the alarm, the new tag value that you specify replaces the previous value for that tag. You can associate as many as 50 tags with a CloudWatch Logs resource.
    @Sendable
    @inlinable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "TagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Assigns one or more tags (key-value pairs) to the specified CloudWatch Logs resource.  Currently, the only CloudWatch Logs resources that  can be tagged are log groups and destinations.  Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters. You can use the TagResource action with a resource that already has tags. If you specify a new tag key for the alarm,  this tag is appended to the list of tags associated with the alarm. If you specify a tag key that is already associated with the alarm, the new tag value that you specify replaces the previous value for that tag. You can associate as many as 50 tags with a CloudWatch Logs resource.
    ///
    /// Parameters:
    ///   - resourceArn: The ARN of the  resource that you're adding tags to. The ARN format of a log group is  arn:aws:logs:Region:account-id:log-group:log-group-name   The ARN format of a destination is  arn:aws:logs:Region:account-id:destination:destination-name   For more information about ARN format, see CloudWatch Logs  resources and operations.
    ///   - tags: The list of key-value pairs to associate with the resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func tagResource(
        resourceArn: String,
        tags: [String: String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = TagResourceRequest(
            resourceArn: resourceArn, 
            tags: tags
        )
        return try await self.tagResource(input, logger: logger)
    }

    /// Tests the filter pattern of a metric filter against a sample of log event messages. You can use this operation to validate the correctness of a metric filter pattern.
    @Sendable
    @inlinable
    public func testMetricFilter(_ input: TestMetricFilterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TestMetricFilterResponse {
        try await self.client.execute(
            operation: "TestMetricFilter", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Tests the filter pattern of a metric filter against a sample of log event messages. You can use this operation to validate the correctness of a metric filter pattern.
    ///
    /// Parameters:
    ///   - filterPattern: 
    ///   - logEventMessages: The log event messages to test.
    ///   - logger: Logger use during operation
    @inlinable
    public func testMetricFilter(
        filterPattern: String,
        logEventMessages: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TestMetricFilterResponse {
        let input = TestMetricFilterRequest(
            filterPattern: filterPattern, 
            logEventMessages: logEventMessages
        )
        return try await self.testMetricFilter(input, logger: logger)
    }

    /// Use this operation to test a log transformer. You enter the transformer configuration and a set of log events to test with. The operation responds with an array that includes the original log events and the transformed versions.
    @Sendable
    @inlinable
    public func testTransformer(_ input: TestTransformerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TestTransformerResponse {
        try await self.client.execute(
            operation: "TestTransformer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Use this operation to test a log transformer. You enter the transformer configuration and a set of log events to test with. The operation responds with an array that includes the original log events and the transformed versions.
    ///
    /// Parameters:
    ///   - logEventMessages: An array of the raw log events that you want to use to test this transformer.
    ///   - transformerConfig: This structure contains the configuration of this log transformer that you want to test. A log transformer is an array of processors, where each processor applies one type of transformation to the log events that are ingested.
    ///   - logger: Logger use during operation
    @inlinable
    public func testTransformer(
        logEventMessages: [String],
        transformerConfig: [Processor],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TestTransformerResponse {
        let input = TestTransformerRequest(
            logEventMessages: logEventMessages, 
            transformerConfig: transformerConfig
        )
        return try await self.testTransformer(input, logger: logger)
    }

    ///  The UntagLogGroup operation is on the path to deprecation. We recommend that you use  UntagResource instead.  Removes the specified tags from the specified log group. To list the tags for a log group, use ListTagsForResource. To add tags, use TagResource. CloudWatch Logs doesn't support IAM policies that prevent users from assigning specified tags to  log groups using the aws:Resource/key-name or aws:TagKeys condition keys.
    @available(*, deprecated, message: "Please use the generic tagging API UntagResource")
    @Sendable
    @inlinable
    public func untagLogGroup(_ input: UntagLogGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UntagLogGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  The UntagLogGroup operation is on the path to deprecation. We recommend that you use  UntagResource instead.  Removes the specified tags from the specified log group. To list the tags for a log group, use ListTagsForResource. To add tags, use TagResource. CloudWatch Logs doesn't support IAM policies that prevent users from assigning specified tags to  log groups using the aws:Resource/key-name or aws:TagKeys condition keys.
    ///
    /// Parameters:
    ///   - logGroupName: The name of the log group.
    ///   - tags: The tag keys. The corresponding tags are removed from the log group.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Please use the generic tagging API UntagResource")
    @inlinable
    public func untagLogGroup(
        logGroupName: String,
        tags: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UntagLogGroupRequest(
            logGroupName: logGroupName, 
            tags: tags
        )
        return try await self.untagLogGroup(input, logger: logger)
    }

    /// Removes one or more tags from the specified resource.
    @Sendable
    @inlinable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UntagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes one or more tags from the specified resource.
    ///
    /// Parameters:
    ///   - resourceArn: The ARN of the CloudWatch Logs resource that you're removing tags from. The ARN format of a log group is  arn:aws:logs:Region:account-id:log-group:log-group-name   The ARN format of a destination is  arn:aws:logs:Region:account-id:destination:destination-name   For more information about ARN format, see CloudWatch Logs  resources and operations.
    ///   - tagKeys: The list of tag keys to remove from the resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func untagResource(
        resourceArn: String,
        tagKeys: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UntagResourceRequest(
            resourceArn: resourceArn, 
            tagKeys: tagKeys
        )
        return try await self.untagResource(input, logger: logger)
    }

    /// Use this operation to suppress anomaly detection for a specified anomaly or pattern. If you suppress  an anomaly, CloudWatch Logs won't report new occurrences of that anomaly and won't update that anomaly  with new data. If you suppress a pattern, CloudWatch Logs won't report any anomalies related to that pattern. You must specify either anomalyId or patternId, but you can't specify both parameters in the  same operation. If you have previously used this operation to suppress detection of a pattern or anomaly, you can use it again to cause CloudWatch Logs to end the suppression. To do this, use this operation and specify the anomaly or pattern to  stop suppressing, and omit the suppressionType and suppressionPeriod parameters.
    @Sendable
    @inlinable
    public func updateAnomaly(_ input: UpdateAnomalyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateAnomaly", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Use this operation to suppress anomaly detection for a specified anomaly or pattern. If you suppress  an anomaly, CloudWatch Logs won't report new occurrences of that anomaly and won't update that anomaly  with new data. If you suppress a pattern, CloudWatch Logs won't report any anomalies related to that pattern. You must specify either anomalyId or patternId, but you can't specify both parameters in the  same operation. If you have previously used this operation to suppress detection of a pattern or anomaly, you can use it again to cause CloudWatch Logs to end the suppression. To do this, use this operation and specify the anomaly or pattern to  stop suppressing, and omit the suppressionType and suppressionPeriod parameters.
    ///
    /// Parameters:
    ///   - anomalyDetectorArn: The ARN of the anomaly detector that this operation is to act on.
    ///   - anomalyId: If you are suppressing or unsuppressing an anomaly, specify its unique ID here. You can find anomaly IDs by using the ListAnomalies operation.
    ///   - baseline: Set this to true to prevent CloudWatch Logs from displaying this behavior as an anomaly in the future. The behavior is then treated as  baseline behavior. However, if similar but  more severe occurrences of this behavior occur in the future, those will still be reported as anomalies.  The default is false
    ///   - patternId: If you are suppressing or unsuppressing an pattern, specify its unique ID here. You can find pattern IDs by using the ListAnomalies operation.
    ///   - suppressionPeriod: If you are temporarily suppressing an anomaly or pattern, use this structure to specify how long the suppression is to last.
    ///   - suppressionType: Use this to specify whether the suppression to be temporary or infinite. If you specify LIMITED, you must also specify a suppressionPeriod. If you specify INFINITE, any value for suppressionPeriod is ignored.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateAnomaly(
        anomalyDetectorArn: String,
        anomalyId: String? = nil,
        baseline: Bool? = nil,
        patternId: String? = nil,
        suppressionPeriod: SuppressionPeriod? = nil,
        suppressionType: SuppressionType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateAnomalyRequest(
            anomalyDetectorArn: anomalyDetectorArn, 
            anomalyId: anomalyId, 
            baseline: baseline, 
            patternId: patternId, 
            suppressionPeriod: suppressionPeriod, 
            suppressionType: suppressionType
        )
        return try await self.updateAnomaly(input, logger: logger)
    }

    /// Use this operation to update the configuration of a delivery to change either the  S3 path pattern or the format of the delivered logs. You can't use this operation to change the source or destination of the delivery.
    @Sendable
    @inlinable
    public func updateDeliveryConfiguration(_ input: UpdateDeliveryConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDeliveryConfigurationResponse {
        try await self.client.execute(
            operation: "UpdateDeliveryConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Use this operation to update the configuration of a delivery to change either the  S3 path pattern or the format of the delivered logs. You can't use this operation to change the source or destination of the delivery.
    ///
    /// Parameters:
    ///   - fieldDelimiter: The field delimiter to use between record fields when the final output format of a delivery is in Plain, W3C, or Raw format.
    ///   - id: The ID of the delivery to be updated by this request.
    ///   - recordFields: The list of record fields to be delivered to the destination, in order.  If the delivery's log source has mandatory fields, they must be included in this list.
    ///   - s3DeliveryConfiguration: This structure contains parameters that are valid only when the delivery's delivery destination is an S3 bucket.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateDeliveryConfiguration(
        fieldDelimiter: String? = nil,
        id: String,
        recordFields: [String]? = nil,
        s3DeliveryConfiguration: S3DeliveryConfiguration? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateDeliveryConfigurationResponse {
        let input = UpdateDeliveryConfigurationRequest(
            fieldDelimiter: fieldDelimiter, 
            id: id, 
            recordFields: recordFields, 
            s3DeliveryConfiguration: s3DeliveryConfiguration
        )
        return try await self.updateDeliveryConfiguration(input, logger: logger)
    }

    /// Updates an existing log anomaly detector.
    @Sendable
    @inlinable
    public func updateLogAnomalyDetector(_ input: UpdateLogAnomalyDetectorRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateLogAnomalyDetector", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates an existing log anomaly detector.
    ///
    /// Parameters:
    ///   - anomalyDetectorArn: The ARN of the anomaly detector that you want to update.
    ///   - anomalyVisibilityTime: The number of days to use as the life cycle of anomalies. After this time, anomalies are automatically baselined  and the anomaly detector model will treat new occurrences of similar event as normal. Therefore, if you do not correct the cause of an  anomaly during this time, it will be considered normal going forward and will not be detected.
    ///   - enabled: Use this parameter to pause or restart the anomaly detector.
    ///   - evaluationFrequency: Specifies how often the anomaly detector runs and look for anomalies. Set this value according to the frequency that the log group receives new logs. For example, if the log group receives new log events every 10 minutes, then setting evaluationFrequency to FIFTEEN_MIN might be appropriate.
    ///   - filterPattern: 
    ///   - logger: Logger use during operation
    @inlinable
    public func updateLogAnomalyDetector(
        anomalyDetectorArn: String,
        anomalyVisibilityTime: Int64? = nil,
        enabled: Bool,
        evaluationFrequency: EvaluationFrequency? = nil,
        filterPattern: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateLogAnomalyDetectorRequest(
            anomalyDetectorArn: anomalyDetectorArn, 
            anomalyVisibilityTime: anomalyVisibilityTime, 
            enabled: enabled, 
            evaluationFrequency: evaluationFrequency, 
            filterPattern: filterPattern
        )
        return try await self.updateLogAnomalyDetector(input, logger: logger)
    }
}

extension CloudWatchLogs {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: CloudWatchLogs, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension CloudWatchLogs {
    /// Return PaginatorSequence for operation ``describeConfigurationTemplates(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeConfigurationTemplatesPaginator(
        _ input: DescribeConfigurationTemplatesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeConfigurationTemplatesRequest, DescribeConfigurationTemplatesResponse> {
        return .init(
            input: input,
            command: self.describeConfigurationTemplates,
            inputKey: \DescribeConfigurationTemplatesRequest.nextToken,
            outputKey: \DescribeConfigurationTemplatesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeConfigurationTemplates(_:logger:)``.
    ///
    /// - Parameters:
    ///   - deliveryDestinationTypes: Use this parameter to filter the response to include only the  configuration templates that apply to the delivery destination types that you specify here.
    ///   - limit: Use this parameter to limit the number of configuration templates that are returned in the response.
    ///   - logTypes: Use this parameter to filter the response to include only the  configuration templates that apply to the log types that you specify here.
    ///   - resourceTypes: Use this parameter to filter the response to include only the  configuration templates that apply to the resource types that you specify here.
    ///   - service: Use this parameter to filter the response to include only the  configuration templates that apply to the Amazon Web Services service that you specify here.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeConfigurationTemplatesPaginator(
        deliveryDestinationTypes: [DeliveryDestinationType]? = nil,
        limit: Int? = nil,
        logTypes: [String]? = nil,
        resourceTypes: [String]? = nil,
        service: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeConfigurationTemplatesRequest, DescribeConfigurationTemplatesResponse> {
        let input = DescribeConfigurationTemplatesRequest(
            deliveryDestinationTypes: deliveryDestinationTypes, 
            limit: limit, 
            logTypes: logTypes, 
            resourceTypes: resourceTypes, 
            service: service
        )
        return self.describeConfigurationTemplatesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeDeliveries(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeDeliveriesPaginator(
        _ input: DescribeDeliveriesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeDeliveriesRequest, DescribeDeliveriesResponse> {
        return .init(
            input: input,
            command: self.describeDeliveries,
            inputKey: \DescribeDeliveriesRequest.nextToken,
            outputKey: \DescribeDeliveriesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeDeliveries(_:logger:)``.
    ///
    /// - Parameters:
    ///   - limit: Optionally specify the maximum number of deliveries to return in the response.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeDeliveriesPaginator(
        limit: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeDeliveriesRequest, DescribeDeliveriesResponse> {
        let input = DescribeDeliveriesRequest(
            limit: limit
        )
        return self.describeDeliveriesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeDeliveryDestinations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeDeliveryDestinationsPaginator(
        _ input: DescribeDeliveryDestinationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeDeliveryDestinationsRequest, DescribeDeliveryDestinationsResponse> {
        return .init(
            input: input,
            command: self.describeDeliveryDestinations,
            inputKey: \DescribeDeliveryDestinationsRequest.nextToken,
            outputKey: \DescribeDeliveryDestinationsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeDeliveryDestinations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - limit: Optionally specify the maximum number of delivery destinations to return in the response.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeDeliveryDestinationsPaginator(
        limit: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeDeliveryDestinationsRequest, DescribeDeliveryDestinationsResponse> {
        let input = DescribeDeliveryDestinationsRequest(
            limit: limit
        )
        return self.describeDeliveryDestinationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeDeliverySources(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeDeliverySourcesPaginator(
        _ input: DescribeDeliverySourcesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeDeliverySourcesRequest, DescribeDeliverySourcesResponse> {
        return .init(
            input: input,
            command: self.describeDeliverySources,
            inputKey: \DescribeDeliverySourcesRequest.nextToken,
            outputKey: \DescribeDeliverySourcesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeDeliverySources(_:logger:)``.
    ///
    /// - Parameters:
    ///   - limit: Optionally specify the maximum number of delivery sources to return in the response.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeDeliverySourcesPaginator(
        limit: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeDeliverySourcesRequest, DescribeDeliverySourcesResponse> {
        let input = DescribeDeliverySourcesRequest(
            limit: limit
        )
        return self.describeDeliverySourcesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeDestinations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeDestinationsPaginator(
        _ input: DescribeDestinationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeDestinationsRequest, DescribeDestinationsResponse> {
        return .init(
            input: input,
            command: self.describeDestinations,
            inputKey: \DescribeDestinationsRequest.nextToken,
            outputKey: \DescribeDestinationsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeDestinations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - destinationNamePrefix: The prefix to match. If you don't specify a value, no prefix filter is applied.
    ///   - limit: The maximum number of items returned. If you don't specify a value, the default maximum value of  50 items is used.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeDestinationsPaginator(
        destinationNamePrefix: String? = nil,
        limit: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeDestinationsRequest, DescribeDestinationsResponse> {
        let input = DescribeDestinationsRequest(
            destinationNamePrefix: destinationNamePrefix, 
            limit: limit
        )
        return self.describeDestinationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeLogGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeLogGroupsPaginator(
        _ input: DescribeLogGroupsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeLogGroupsRequest, DescribeLogGroupsResponse> {
        return .init(
            input: input,
            command: self.describeLogGroups,
            inputKey: \DescribeLogGroupsRequest.nextToken,
            outputKey: \DescribeLogGroupsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeLogGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - accountIdentifiers: When includeLinkedAccounts is set to True, use this parameter to specify the list of accounts to search. You can specify as many as 20 account IDs in the array.
    ///   - includeLinkedAccounts: If you are using a monitoring account, set this to True to have the operation return log groups in  the accounts listed in accountIdentifiers. If this parameter is set to true and accountIdentifiers
    ///   - limit: The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
    ///   - logGroupClass: Specifies the log group class for this log group. There are two classes:   The Standard log class supports all CloudWatch Logs features.   The Infrequent Access log class supports a subset of CloudWatch Logs features and incurs lower costs.   For details about the features supported by each class, see  Log classes
    ///   - logGroupNamePattern: If you specify a string for this parameter, the operation returns only log groups that have names
    ///   - logGroupNamePrefix: The prefix to match.   logGroupNamePrefix and logGroupNamePattern are mutually exclusive.  Only one  of these parameters can be passed.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeLogGroupsPaginator(
        accountIdentifiers: [String]? = nil,
        includeLinkedAccounts: Bool? = nil,
        limit: Int? = nil,
        logGroupClass: LogGroupClass? = nil,
        logGroupNamePattern: String? = nil,
        logGroupNamePrefix: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeLogGroupsRequest, DescribeLogGroupsResponse> {
        let input = DescribeLogGroupsRequest(
            accountIdentifiers: accountIdentifiers, 
            includeLinkedAccounts: includeLinkedAccounts, 
            limit: limit, 
            logGroupClass: logGroupClass, 
            logGroupNamePattern: logGroupNamePattern, 
            logGroupNamePrefix: logGroupNamePrefix
        )
        return self.describeLogGroupsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeLogStreams(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeLogStreamsPaginator(
        _ input: DescribeLogStreamsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeLogStreamsRequest, DescribeLogStreamsResponse> {
        return .init(
            input: input,
            command: self.describeLogStreams,
            inputKey: \DescribeLogStreamsRequest.nextToken,
            outputKey: \DescribeLogStreamsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeLogStreams(_:logger:)``.
    ///
    /// - Parameters:
    ///   - descending: If the value is true, results are returned in descending order.  If the value is to false, results are returned in ascending order. The default value is false.
    ///   - limit: The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
    ///   - logGroupIdentifier: Specify either the name or ARN of the log group to view. If the log group is in a source account and you are using a monitoring account, you must use the log group ARN.   You must include either logGroupIdentifier or logGroupName, but not  both.
    ///   - logGroupName: The name of the log group.   You must include either logGroupIdentifier or logGroupName, but not  both.
    ///   - logStreamNamePrefix: The prefix to match. If orderBy is LastEventTime, you cannot specify this parameter.
    ///   - orderBy: If the value is LogStreamName, the results are ordered by log stream name. If the value is LastEventTime, the results are ordered by the event time.  The default value is LogStreamName. If you order the results by event time, you cannot specify the logStreamNamePrefix parameter.  lastEventTimestamp represents the time of the most recent log event in the log stream in CloudWatch Logs. This number is expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. lastEventTimestamp updates on an eventual consistency basis. It typically updates in less than an hour from ingestion, but in rare situations might take longer.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeLogStreamsPaginator(
        descending: Bool? = nil,
        limit: Int? = nil,
        logGroupIdentifier: String? = nil,
        logGroupName: String? = nil,
        logStreamNamePrefix: String? = nil,
        orderBy: OrderBy? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeLogStreamsRequest, DescribeLogStreamsResponse> {
        let input = DescribeLogStreamsRequest(
            descending: descending, 
            limit: limit, 
            logGroupIdentifier: logGroupIdentifier, 
            logGroupName: logGroupName, 
            logStreamNamePrefix: logStreamNamePrefix, 
            orderBy: orderBy
        )
        return self.describeLogStreamsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeMetricFilters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeMetricFiltersPaginator(
        _ input: DescribeMetricFiltersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeMetricFiltersRequest, DescribeMetricFiltersResponse> {
        return .init(
            input: input,
            command: self.describeMetricFilters,
            inputKey: \DescribeMetricFiltersRequest.nextToken,
            outputKey: \DescribeMetricFiltersResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeMetricFilters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filterNamePrefix: The prefix to match. CloudWatch Logs uses the value that you set here only if you also include the logGroupName parameter in your request.
    ///   - limit: The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
    ///   - logGroupName: The name of the log group.
    ///   - metricName: Filters results to include only those with the specified metric name. If you include this parameter in your request, you  must also include the metricNamespace parameter.
    ///   - metricNamespace: Filters results to include only those in the specified namespace. If you include this parameter in your request, you  must also include the metricName parameter.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeMetricFiltersPaginator(
        filterNamePrefix: String? = nil,
        limit: Int? = nil,
        logGroupName: String? = nil,
        metricName: String? = nil,
        metricNamespace: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeMetricFiltersRequest, DescribeMetricFiltersResponse> {
        let input = DescribeMetricFiltersRequest(
            filterNamePrefix: filterNamePrefix, 
            limit: limit, 
            logGroupName: logGroupName, 
            metricName: metricName, 
            metricNamespace: metricNamespace
        )
        return self.describeMetricFiltersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeSubscriptionFilters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeSubscriptionFiltersPaginator(
        _ input: DescribeSubscriptionFiltersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeSubscriptionFiltersRequest, DescribeSubscriptionFiltersResponse> {
        return .init(
            input: input,
            command: self.describeSubscriptionFilters,
            inputKey: \DescribeSubscriptionFiltersRequest.nextToken,
            outputKey: \DescribeSubscriptionFiltersResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeSubscriptionFilters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filterNamePrefix: The prefix to match. If you don't specify a value, no prefix filter is applied.
    ///   - limit: The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
    ///   - logGroupName: The name of the log group.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeSubscriptionFiltersPaginator(
        filterNamePrefix: String? = nil,
        limit: Int? = nil,
        logGroupName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeSubscriptionFiltersRequest, DescribeSubscriptionFiltersResponse> {
        let input = DescribeSubscriptionFiltersRequest(
            filterNamePrefix: filterNamePrefix, 
            limit: limit, 
            logGroupName: logGroupName
        )
        return self.describeSubscriptionFiltersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``filterLogEvents(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func filterLogEventsPaginator(
        _ input: FilterLogEventsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<FilterLogEventsRequest, FilterLogEventsResponse> {
        return .init(
            input: input,
            command: self.filterLogEvents,
            inputKey: \FilterLogEventsRequest.nextToken,
            outputKey: \FilterLogEventsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``filterLogEvents(_:logger:)``.
    ///
    /// - Parameters:
    ///   - endTime: The end of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not returned.
    ///   - filterPattern: The filter pattern to use. For more information, see Filter and Pattern Syntax. If not provided, all the events are matched.
    ///   - limit: The maximum number of events to return. The default is 10,000 events.
    ///   - logGroupIdentifier: Specify either the name or ARN of the log group to view log events from. If the log group is in a source account and you are using a monitoring account, you must use the log group ARN.   You must include either logGroupIdentifier or logGroupName, but not  both.
    ///   - logGroupName: The name of the log group to search.   You must include either logGroupIdentifier or logGroupName, but not  both.
    ///   - logStreamNamePrefix: Filters the results to include only events from log streams that have names starting with this prefix. If you specify a value for both logStreamNamePrefix and logStreamNames, the action returns an InvalidParameterException error.
    ///   - logStreamNames: Filters the results to only logs from the log streams in this list. If you specify a value for both logStreamNames and logStreamNamePrefix, the action returns an InvalidParameterException error.
    ///   - startTime: The start of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp before this time are not returned.
    ///   - unmask: Specify true to display the log event fields with all sensitive data unmasked and visible. The default is false. To use this operation with this parameter, you must be signed into an account with the logs:Unmask permission.
    ///   - logger: Logger used for logging
    @inlinable
    public func filterLogEventsPaginator(
        endTime: Int64? = nil,
        filterPattern: String? = nil,
        limit: Int? = nil,
        logGroupIdentifier: String? = nil,
        logGroupName: String? = nil,
        logStreamNamePrefix: String? = nil,
        logStreamNames: [String]? = nil,
        startTime: Int64? = nil,
        unmask: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<FilterLogEventsRequest, FilterLogEventsResponse> {
        let input = FilterLogEventsRequest(
            endTime: endTime, 
            filterPattern: filterPattern, 
            limit: limit, 
            logGroupIdentifier: logGroupIdentifier, 
            logGroupName: logGroupName, 
            logStreamNamePrefix: logStreamNamePrefix, 
            logStreamNames: logStreamNames, 
            startTime: startTime, 
            unmask: unmask
        )
        return self.filterLogEventsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getLogEvents(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getLogEventsPaginator(
        _ input: GetLogEventsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetLogEventsRequest, GetLogEventsResponse> {
        return .init(
            input: input,
            command: self.getLogEvents,
            inputKey: \GetLogEventsRequest.nextToken,
            outputKey: \GetLogEventsResponse.nextForwardToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getLogEvents(_:logger:)``.
    ///
    /// - Parameters:
    ///   - endTime: The end of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp equal to or later than this time are not included.
    ///   - limit: The maximum number of log events returned. If you don't specify a limit, the default is as many log events as can fit in a response size of 1 MB (up to 10,000 log events).
    ///   - logGroupIdentifier: Specify either the name or ARN of the log group to view events from. If the log group is in a source account and you are using a monitoring account, you must use the log group ARN.   You must include either logGroupIdentifier or logGroupName, but not  both.
    ///   - logGroupName: The name of the log group.   You must include either logGroupIdentifier or logGroupName, but not  both.
    ///   - logStreamName: The name of the log stream.
    ///   - startFromHead: If the value is true, the earliest log events are returned first. If the value is false, the latest log events are returned first. The default value is false. If you are using a previous nextForwardToken value as the nextToken in this operation,  you must specify true for startFromHead.
    ///   - startTime: The start of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp equal to this time or later than this time are included. Events with a timestamp earlier than this time are not included.
    ///   - unmask: Specify true to display the log event fields with all sensitive data unmasked and visible. The default is false. To use this operation with this parameter, you must be signed into an account with the logs:Unmask permission.
    ///   - logger: Logger used for logging
    @inlinable
    public func getLogEventsPaginator(
        endTime: Int64? = nil,
        limit: Int? = nil,
        logGroupIdentifier: String? = nil,
        logGroupName: String? = nil,
        logStreamName: String,
        startFromHead: Bool? = nil,
        startTime: Int64? = nil,
        unmask: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetLogEventsRequest, GetLogEventsResponse> {
        let input = GetLogEventsRequest(
            endTime: endTime, 
            limit: limit, 
            logGroupIdentifier: logGroupIdentifier, 
            logGroupName: logGroupName, 
            logStreamName: logStreamName, 
            startFromHead: startFromHead, 
            startTime: startTime, 
            unmask: unmask
        )
        return self.getLogEventsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listAnomalies(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listAnomaliesPaginator(
        _ input: ListAnomaliesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAnomaliesRequest, ListAnomaliesResponse> {
        return .init(
            input: input,
            command: self.listAnomalies,
            inputKey: \ListAnomaliesRequest.nextToken,
            outputKey: \ListAnomaliesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listAnomalies(_:logger:)``.
    ///
    /// - Parameters:
    ///   - anomalyDetectorArn: Use this to optionally limit the results to only the anomalies found by a certain  anomaly detector.
    ///   - limit: The maximum number of items to return. If you don't specify a value, the default maximum value of  50 items is used.
    ///   - suppressionState: You can specify this parameter if you want to the operation to return only anomalies that  are currently either suppressed or unsuppressed.
    ///   - logger: Logger used for logging
    @inlinable
    public func listAnomaliesPaginator(
        anomalyDetectorArn: String? = nil,
        limit: Int? = nil,
        suppressionState: SuppressionState? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListAnomaliesRequest, ListAnomaliesResponse> {
        let input = ListAnomaliesRequest(
            anomalyDetectorArn: anomalyDetectorArn, 
            limit: limit, 
            suppressionState: suppressionState
        )
        return self.listAnomaliesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listLogAnomalyDetectors(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listLogAnomalyDetectorsPaginator(
        _ input: ListLogAnomalyDetectorsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLogAnomalyDetectorsRequest, ListLogAnomalyDetectorsResponse> {
        return .init(
            input: input,
            command: self.listLogAnomalyDetectors,
            inputKey: \ListLogAnomalyDetectorsRequest.nextToken,
            outputKey: \ListLogAnomalyDetectorsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listLogAnomalyDetectors(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filterLogGroupArn: Use this to optionally filter the results to only include anomaly detectors that are associated with the  specified log group.
    ///   - limit: The maximum number of items to return. If you don't specify a value, the default maximum value of  50 items is used.
    ///   - logger: Logger used for logging
    @inlinable
    public func listLogAnomalyDetectorsPaginator(
        filterLogGroupArn: String? = nil,
        limit: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListLogAnomalyDetectorsRequest, ListLogAnomalyDetectorsResponse> {
        let input = ListLogAnomalyDetectorsRequest(
            filterLogGroupArn: filterLogGroupArn, 
            limit: limit
        )
        return self.listLogAnomalyDetectorsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listLogGroupsForQuery(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listLogGroupsForQueryPaginator(
        _ input: ListLogGroupsForQueryRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLogGroupsForQueryRequest, ListLogGroupsForQueryResponse> {
        return .init(
            input: input,
            command: self.listLogGroupsForQuery,
            inputKey: \ListLogGroupsForQueryRequest.nextToken,
            outputKey: \ListLogGroupsForQueryResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listLogGroupsForQuery(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: Limits the number of returned log groups to the specified number.
    ///   - queryId: The ID of the query to use. This query ID is from the response to your StartQuery operation.
    ///   - logger: Logger used for logging
    @inlinable
    public func listLogGroupsForQueryPaginator(
        maxResults: Int? = nil,
        queryId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListLogGroupsForQueryRequest, ListLogGroupsForQueryResponse> {
        let input = ListLogGroupsForQueryRequest(
            maxResults: maxResults, 
            queryId: queryId
        )
        return self.listLogGroupsForQueryPaginator(input, logger: logger)
    }
}

extension CloudWatchLogs.DescribeConfigurationTemplatesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudWatchLogs.DescribeConfigurationTemplatesRequest {
        return .init(
            deliveryDestinationTypes: self.deliveryDestinationTypes,
            limit: self.limit,
            logTypes: self.logTypes,
            nextToken: token,
            resourceTypes: self.resourceTypes,
            service: self.service
        )
    }
}

extension CloudWatchLogs.DescribeDeliveriesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudWatchLogs.DescribeDeliveriesRequest {
        return .init(
            limit: self.limit,
            nextToken: token
        )
    }
}

extension CloudWatchLogs.DescribeDeliveryDestinationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudWatchLogs.DescribeDeliveryDestinationsRequest {
        return .init(
            limit: self.limit,
            nextToken: token
        )
    }
}

extension CloudWatchLogs.DescribeDeliverySourcesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudWatchLogs.DescribeDeliverySourcesRequest {
        return .init(
            limit: self.limit,
            nextToken: token
        )
    }
}

extension CloudWatchLogs.DescribeDestinationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudWatchLogs.DescribeDestinationsRequest {
        return .init(
            destinationNamePrefix: self.destinationNamePrefix,
            limit: self.limit,
            nextToken: token
        )
    }
}

extension CloudWatchLogs.DescribeLogGroupsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudWatchLogs.DescribeLogGroupsRequest {
        return .init(
            accountIdentifiers: self.accountIdentifiers,
            includeLinkedAccounts: self.includeLinkedAccounts,
            limit: self.limit,
            logGroupClass: self.logGroupClass,
            logGroupNamePattern: self.logGroupNamePattern,
            logGroupNamePrefix: self.logGroupNamePrefix,
            nextToken: token
        )
    }
}

extension CloudWatchLogs.DescribeLogStreamsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudWatchLogs.DescribeLogStreamsRequest {
        return .init(
            descending: self.descending,
            limit: self.limit,
            logGroupIdentifier: self.logGroupIdentifier,
            logGroupName: self.logGroupName,
            logStreamNamePrefix: self.logStreamNamePrefix,
            nextToken: token,
            orderBy: self.orderBy
        )
    }
}

extension CloudWatchLogs.DescribeMetricFiltersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudWatchLogs.DescribeMetricFiltersRequest {
        return .init(
            filterNamePrefix: self.filterNamePrefix,
            limit: self.limit,
            logGroupName: self.logGroupName,
            metricName: self.metricName,
            metricNamespace: self.metricNamespace,
            nextToken: token
        )
    }
}

extension CloudWatchLogs.DescribeSubscriptionFiltersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudWatchLogs.DescribeSubscriptionFiltersRequest {
        return .init(
            filterNamePrefix: self.filterNamePrefix,
            limit: self.limit,
            logGroupName: self.logGroupName,
            nextToken: token
        )
    }
}

extension CloudWatchLogs.FilterLogEventsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudWatchLogs.FilterLogEventsRequest {
        return .init(
            endTime: self.endTime,
            filterPattern: self.filterPattern,
            limit: self.limit,
            logGroupIdentifier: self.logGroupIdentifier,
            logGroupName: self.logGroupName,
            logStreamNamePrefix: self.logStreamNamePrefix,
            logStreamNames: self.logStreamNames,
            nextToken: token,
            startTime: self.startTime,
            unmask: self.unmask
        )
    }
}

extension CloudWatchLogs.GetLogEventsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudWatchLogs.GetLogEventsRequest {
        return .init(
            endTime: self.endTime,
            limit: self.limit,
            logGroupIdentifier: self.logGroupIdentifier,
            logGroupName: self.logGroupName,
            logStreamName: self.logStreamName,
            nextToken: token,
            startFromHead: self.startFromHead,
            startTime: self.startTime,
            unmask: self.unmask
        )
    }
}

extension CloudWatchLogs.ListAnomaliesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudWatchLogs.ListAnomaliesRequest {
        return .init(
            anomalyDetectorArn: self.anomalyDetectorArn,
            limit: self.limit,
            nextToken: token,
            suppressionState: self.suppressionState
        )
    }
}

extension CloudWatchLogs.ListLogAnomalyDetectorsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudWatchLogs.ListLogAnomalyDetectorsRequest {
        return .init(
            filterLogGroupArn: self.filterLogGroupArn,
            limit: self.limit,
            nextToken: token
        )
    }
}

extension CloudWatchLogs.ListLogGroupsForQueryRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CloudWatchLogs.ListLogGroupsForQueryRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            queryId: self.queryId
        )
    }
}
