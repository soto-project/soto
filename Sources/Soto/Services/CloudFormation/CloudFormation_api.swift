//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS CloudFormation service.
///
/// CloudFormation CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure. With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you. For more information about CloudFormation, see the CloudFormation product page. CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at docs.aws.amazon.com.
public struct CloudFormation: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the CloudFormation client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "CloudFormation",
            serviceIdentifier: "cloudformation",
            serviceProtocol: .query,
            apiVersion: "2010-05-15",
            endpoint: endpoint,
            serviceEndpoints: Self.serviceEndpoints,
            variantEndpoints: Self.variantEndpoints,
            errorType: CloudFormationErrorType.self,
            xmlNamespace: "http://cloudformation.amazonaws.com/doc/2010-05-15/",
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }


    /// custom endpoints for regions
    static var serviceEndpoints: [String: String] {[
        "us-gov-east-1": "cloudformation.us-gov-east-1.amazonaws.com",
        "us-gov-west-1": "cloudformation.us-gov-west-1.amazonaws.com"
    ]}


    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "us-east-1": "cloudformation-fips.us-east-1.amazonaws.com",
            "us-east-2": "cloudformation-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "cloudformation.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "cloudformation.us-gov-west-1.amazonaws.com",
            "us-west-1": "cloudformation-fips.us-west-1.amazonaws.com",
            "us-west-2": "cloudformation-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Activate trusted access with Organizations. With trusted access between StackSets and Organizations activated, the management account has permissions to create and manage StackSets for your organization.
    @Sendable
    public func activateOrganizationsAccess(_ input: ActivateOrganizationsAccessInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ActivateOrganizationsAccessOutput {
        return try await self.client.execute(
            operation: "ActivateOrganizationsAccess", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Activates a public third-party extension, making it available for use in stack templates. For more information, see Using public extensions in the CloudFormation User Guide. Once you have activated a public third-party extension in your account and Region, use SetTypeConfiguration to specify configuration properties for the extension. For more information, see Configuring extensions at the account level in the CloudFormation User Guide.
    @Sendable
    public func activateType(_ input: ActivateTypeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ActivateTypeOutput {
        return try await self.client.execute(
            operation: "ActivateType", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns configuration data for the specified CloudFormation extensions, from the CloudFormation registry for the account and Region. For more information, see Configuring extensions at the account level in the CloudFormation User Guide.
    @Sendable
    public func batchDescribeTypeConfigurations(_ input: BatchDescribeTypeConfigurationsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchDescribeTypeConfigurationsOutput {
        return try await self.client.execute(
            operation: "BatchDescribeTypeConfigurations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Cancels an update on the specified stack. If the call completes successfully, the stack rolls back the update and reverts to the previous stack configuration.  You can cancel only stacks that are in the UPDATE_IN_PROGRESS state.
    @Sendable
    public func cancelUpdateStack(_ input: CancelUpdateStackInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "CancelUpdateStack", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// For a specified stack that's in the UPDATE_ROLLBACK_FAILED state, continues rolling it back to the UPDATE_ROLLBACK_COMPLETE state. Depending on the cause of the failure, you can manually  fix the error and continue the rollback. By continuing the rollback, you can return your stack to a working state (the UPDATE_ROLLBACK_COMPLETE state), and then try to update the stack again. A stack goes into the UPDATE_ROLLBACK_FAILED state when CloudFormation can't roll back all changes after a failed stack update. For example, you might have a stack that's rolling back to an old database instance that was deleted outside of CloudFormation. Because CloudFormation doesn't know the database was deleted, it assumes that the database instance still exists and attempts to roll back to it, causing the update rollback to fail.
    @Sendable
    public func continueUpdateRollback(_ input: ContinueUpdateRollbackInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ContinueUpdateRollbackOutput {
        return try await self.client.execute(
            operation: "ContinueUpdateRollback", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a list of changes that will be applied to a stack so that you can review the changes before executing them. You can create a change set for a stack that doesn't exist or an existing stack. If you create a change set for a stack that doesn't exist, the change set shows all of the resources that CloudFormation will create. If you create a change set for an existing stack, CloudFormation compares the stack's information with the information that you submit in the change set and lists the differences. Use change sets to understand which resources CloudFormation will create or change, and how it will change resources in an existing stack, before you create or update a stack. To create a change set for a stack that doesn't exist, for the ChangeSetType parameter, specify CREATE. To create a change set for an existing stack, specify UPDATE for the ChangeSetType parameter. To create a change set for an import operation, specify IMPORT for the ChangeSetType parameter. After the CreateChangeSet call successfully completes, CloudFormation starts creating the change set. To check the status of the change set or to review it, use the DescribeChangeSet action. When you are satisfied with the changes the change set will make, execute the change set by using the ExecuteChangeSet action. CloudFormation doesn't make changes until you execute the change set. To create a change set for the entire stack hierarchy, set IncludeNestedStacks to True.
    @Sendable
    public func createChangeSet(_ input: CreateChangeSetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateChangeSetOutput {
        return try await self.client.execute(
            operation: "CreateChangeSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a template from existing resources that are not already managed with CloudFormation. You can check the status of the template generation using the DescribeGeneratedTemplate API action.
    @Sendable
    public func createGeneratedTemplate(_ input: CreateGeneratedTemplateInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateGeneratedTemplateOutput {
        return try await self.client.execute(
            operation: "CreateGeneratedTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a stack as specified in the template. After the call completes successfully, the stack creation starts. You can check the status of the stack through the DescribeStacks operation.
    @Sendable
    public func createStack(_ input: CreateStackInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateStackOutput {
        return try await self.client.execute(
            operation: "CreateStack", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates stack instances for the specified accounts, within the specified Amazon Web Services Regions. A stack instance refers to a stack in a specific account and Region. You must specify at least one value for either Accounts or DeploymentTargets, and you must specify at least one value for Regions.
    @Sendable
    public func createStackInstances(_ input: CreateStackInstancesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateStackInstancesOutput {
        return try await self.client.execute(
            operation: "CreateStackInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a stack set.
    @Sendable
    public func createStackSet(_ input: CreateStackSetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateStackSetOutput {
        return try await self.client.execute(
            operation: "CreateStackSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deactivates trusted access with Organizations. If trusted access is deactivated, the management account does not have permissions to create and manage service-managed StackSets for your organization.
    @Sendable
    public func deactivateOrganizationsAccess(_ input: DeactivateOrganizationsAccessInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeactivateOrganizationsAccessOutput {
        return try await self.client.execute(
            operation: "DeactivateOrganizationsAccess", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deactivates a public extension that was previously activated in this account and Region. Once deactivated, an extension can't be used in any CloudFormation operation. This includes stack update operations where the stack template includes the extension, even if no updates are being made to the extension. In addition, deactivated extensions aren't automatically updated if a new version of the extension is released.
    @Sendable
    public func deactivateType(_ input: DeactivateTypeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeactivateTypeOutput {
        return try await self.client.execute(
            operation: "DeactivateType", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified change set. Deleting change sets ensures that no one executes the wrong change set. If the call successfully completes, CloudFormation successfully deleted the change set. If IncludeNestedStacks specifies True during the creation of the nested change set, then DeleteChangeSet will delete all change sets that belong to the stacks hierarchy and will also delete all change sets for nested stacks with the status of REVIEW_IN_PROGRESS.
    @Sendable
    public func deleteChangeSet(_ input: DeleteChangeSetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteChangeSetOutput {
        return try await self.client.execute(
            operation: "DeleteChangeSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deleted a generated template.
    @Sendable
    public func deleteGeneratedTemplate(_ input: DeleteGeneratedTemplateInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteGeneratedTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a specified stack. Once the call completes successfully, stack deletion starts. Deleted stacks don't show up in the DescribeStacks operation if the deletion has been completed successfully.
    @Sendable
    public func deleteStack(_ input: DeleteStackInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteStack", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes stack instances for the specified accounts, in the specified Amazon Web Services Regions.
    @Sendable
    public func deleteStackInstances(_ input: DeleteStackInstancesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteStackInstancesOutput {
        return try await self.client.execute(
            operation: "DeleteStackInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a stack set. Before you can delete a stack set, all its member stack instances must be deleted. For more information about how to complete this, see DeleteStackInstances.
    @Sendable
    public func deleteStackSet(_ input: DeleteStackSetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteStackSetOutput {
        return try await self.client.execute(
            operation: "DeleteStackSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Marks an extension or extension version as DEPRECATED in the CloudFormation registry, removing it from active use. Deprecated extensions or extension versions cannot be used in CloudFormation operations. To deregister an entire extension, you must individually deregister all active versions of that extension. If an extension has only a single active version, deregistering that version results in the extension itself being deregistered and marked as deprecated in the registry. You can't deregister the default version of an extension if there are other active version of that extension. If you do deregister the default version of an extension, the extension type itself is deregistered as well and marked as deprecated. To view the deprecation status of an extension or extension version, use DescribeType.
    @Sendable
    public func deregisterType(_ input: DeregisterTypeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeregisterTypeOutput {
        return try await self.client.execute(
            operation: "DeregisterType", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves your account's CloudFormation limits, such as the maximum number of stacks that you can create in your account. For more information about account limits, see CloudFormation Quotas in the CloudFormation User Guide.
    @Sendable
    public func describeAccountLimits(_ input: DescribeAccountLimitsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAccountLimitsOutput {
        return try await self.client.execute(
            operation: "DescribeAccountLimits", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the inputs for the change set and a list of changes that CloudFormation will make if you execute the change set. For more information, see Updating Stacks Using Change Sets in the CloudFormation User Guide.
    @Sendable
    public func describeChangeSet(_ input: DescribeChangeSetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeChangeSetOutput {
        return try await self.client.execute(
            operation: "DescribeChangeSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns hook-related information for the change set and a list of changes that CloudFormation makes when you run the change set.
    @Sendable
    public func describeChangeSetHooks(_ input: DescribeChangeSetHooksInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeChangeSetHooksOutput {
        return try await self.client.execute(
            operation: "DescribeChangeSetHooks", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes a generated template. The output includes details about the progress of the creation of a generated template started by a CreateGeneratedTemplate API action or the update of a generated template started with an UpdateGeneratedTemplate API action.
    @Sendable
    public func describeGeneratedTemplate(_ input: DescribeGeneratedTemplateInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeGeneratedTemplateOutput {
        return try await self.client.execute(
            operation: "DescribeGeneratedTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves information about the account's OrganizationAccess status. This API can be called either by the management account or the delegated administrator by using the CallAs parameter. This API can also be called without the CallAs parameter by the management account.
    @Sendable
    public func describeOrganizationsAccess(_ input: DescribeOrganizationsAccessInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeOrganizationsAccessOutput {
        return try await self.client.execute(
            operation: "DescribeOrganizationsAccess", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a CloudFormation extension publisher. If you don't supply a PublisherId, and you have registered as an extension publisher, DescribePublisher returns information about your own publisher account. For more information about registering as a publisher, see:    RegisterPublisher     Publishing extensions to make them available for public use in the CloudFormation CLI User Guide
    @Sendable
    public func describePublisher(_ input: DescribePublisherInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribePublisherOutput {
        return try await self.client.execute(
            operation: "DescribePublisher", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes details of a resource scan.
    @Sendable
    public func describeResourceScan(_ input: DescribeResourceScanInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeResourceScanOutput {
        return try await self.client.execute(
            operation: "DescribeResourceScan", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a stack drift detection operation. A stack drift detection operation detects whether a stack's actual configuration differs, or has drifted, from its expected configuration, as defined in the stack template and any values specified as template parameters. A stack is considered to have drifted if one or more of its resources have drifted. For more information about stack and resource drift, see Detecting Unregulated Configuration Changes to Stacks and Resources. Use DetectStackDrift to initiate a stack drift detection operation. DetectStackDrift returns a StackDriftDetectionId you can use to monitor the progress of the operation using DescribeStackDriftDetectionStatus. Once the drift detection operation has completed, use DescribeStackResourceDrifts to return drift information about the stack and its resources.
    @Sendable
    public func describeStackDriftDetectionStatus(_ input: DescribeStackDriftDetectionStatusInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeStackDriftDetectionStatusOutput {
        return try await self.client.execute(
            operation: "DescribeStackDriftDetectionStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns all stack related events for a specified stack in reverse chronological order. For more information about a stack's event history, see CloudFormation stack creation events in the CloudFormation User Guide.  You can list events for stacks that have failed to create or have been deleted by specifying the unique stack identifier (stack ID).
    @Sendable
    public func describeStackEvents(_ input: DescribeStackEventsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeStackEventsOutput {
        return try await self.client.execute(
            operation: "DescribeStackEvents", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the stack instance that's associated with the specified StackSet, Amazon Web Services account, and Amazon Web Services Region. For a list of stack instances that are associated with a specific StackSet, use ListStackInstances.
    @Sendable
    public func describeStackInstance(_ input: DescribeStackInstanceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeStackInstanceOutput {
        return try await self.client.execute(
            operation: "DescribeStackInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a description of the specified resource in the specified stack. For deleted stacks, DescribeStackResource returns resource information for up to 90 days after the stack has been deleted.
    @Sendable
    public func describeStackResource(_ input: DescribeStackResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeStackResourceOutput {
        return try await self.client.execute(
            operation: "DescribeStackResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns drift information for the resources that have been checked for drift in the specified stack. This includes actual and expected configuration values for resources where CloudFormation detects configuration drift. For a given stack, there will be one StackResourceDrift for each stack resource that has been checked for drift. Resources that haven't yet been checked for drift aren't included. Resources that don't currently support drift detection aren't checked, and so not included. For a list of resources that support drift detection, see Resources that Support Drift Detection. Use DetectStackResourceDrift to detect drift on individual resources, or DetectStackDrift to detect drift on all supported resources for a given stack.
    @Sendable
    public func describeStackResourceDrifts(_ input: DescribeStackResourceDriftsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeStackResourceDriftsOutput {
        return try await self.client.execute(
            operation: "DescribeStackResourceDrifts", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns Amazon Web Services resource descriptions for running and deleted stacks. If StackName is specified, all the associated resources that are part of the stack are returned. If PhysicalResourceId is specified, the associated resources of the stack that the resource belongs to are returned.  Only the first 100 resources will be returned. If your stack has more resources than this, you should use ListStackResources instead.  For deleted stacks, DescribeStackResources returns resource information for up to 90 days after the stack has been deleted. You must specify either StackName or PhysicalResourceId, but not both. In addition, you can specify LogicalResourceId to filter the returned result. For more information about resources, the LogicalResourceId and PhysicalResourceId, go to the CloudFormation User Guide.  A ValidationError is returned if you specify both StackName and PhysicalResourceId in the same request.
    @Sendable
    public func describeStackResources(_ input: DescribeStackResourcesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeStackResourcesOutput {
        return try await self.client.execute(
            operation: "DescribeStackResources", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the description of the specified StackSet.
    @Sendable
    public func describeStackSet(_ input: DescribeStackSetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeStackSetOutput {
        return try await self.client.execute(
            operation: "DescribeStackSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the description of the specified StackSet operation.
    @Sendable
    public func describeStackSetOperation(_ input: DescribeStackSetOperationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeStackSetOperationOutput {
        return try await self.client.execute(
            operation: "DescribeStackSetOperation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the description for the specified stack; if no stack name was specified, then it returns the description for all the stacks created. For more information about a stack's event history, see CloudFormation stack creation events in the CloudFormation User Guide.  If the stack doesn't exist, a ValidationError is returned.
    @Sendable
    public func describeStacks(_ input: DescribeStacksInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeStacksOutput {
        return try await self.client.execute(
            operation: "DescribeStacks", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns detailed information about an extension that has been registered. If you specify a VersionId, DescribeType returns information about that specific extension version. Otherwise, it returns information about the default extension version.
    @Sendable
    public func describeType(_ input: DescribeTypeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTypeOutput {
        return try await self.client.execute(
            operation: "DescribeType", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about an extension's registration, including its current status and type and version identifiers. When you initiate a registration request using RegisterType, you can then use DescribeTypeRegistration to monitor the progress of that registration request. Once the registration request has completed, use DescribeType to return detailed information about an extension.
    @Sendable
    public func describeTypeRegistration(_ input: DescribeTypeRegistrationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTypeRegistrationOutput {
        return try await self.client.execute(
            operation: "DescribeTypeRegistration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Detects whether a stack's actual configuration differs, or has drifted, from its expected configuration, as defined in the stack template and any values specified as template parameters. For each resource in the stack that supports drift detection, CloudFormation compares the actual configuration of the resource with its expected template configuration. Only resource properties explicitly defined in the stack template are checked for drift. A stack is considered to have drifted if one or more of its resources differ from their expected template configurations. For more information, see Detecting Unregulated Configuration Changes to Stacks and Resources. Use DetectStackDrift to detect drift on all supported resources for a given stack, or DetectStackResourceDrift to detect drift on individual resources. For a list of stack resources that currently support drift detection, see Resources that Support Drift Detection.  DetectStackDrift can take up to several minutes, depending on the number of resources contained within the stack. Use DescribeStackDriftDetectionStatus to monitor the progress of a detect stack drift operation. Once the drift detection operation has completed, use DescribeStackResourceDrifts to return drift information about the stack and its resources. When detecting drift on a stack, CloudFormation doesn't detect drift on any nested stacks belonging to that stack. Perform DetectStackDrift directly on the nested stack itself.
    @Sendable
    public func detectStackDrift(_ input: DetectStackDriftInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DetectStackDriftOutput {
        return try await self.client.execute(
            operation: "DetectStackDrift", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about whether a resource's actual configuration differs, or has drifted, from its expected configuration, as defined in the stack template and any values specified as template parameters. This information includes actual and expected property values for resources in which CloudFormation detects drift. Only resource properties explicitly defined in the stack template are checked for drift. For more information about stack and resource drift, see Detecting Unregulated Configuration Changes to Stacks and Resources. Use DetectStackResourceDrift to detect drift on individual resources, or DetectStackDrift to detect drift on all resources in a given stack that support drift detection. Resources that don't currently support drift detection can't be checked. For a list of resources that support drift detection, see Resources that Support Drift Detection.
    @Sendable
    public func detectStackResourceDrift(_ input: DetectStackResourceDriftInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DetectStackResourceDriftOutput {
        return try await self.client.execute(
            operation: "DetectStackResourceDrift", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Detect drift on a stack set. When CloudFormation performs drift detection on a stack set, it performs drift detection on the stack associated with each stack instance in the stack set. For more information, see How CloudFormation performs drift detection on a stack set.  DetectStackSetDrift returns the OperationId of the stack set drift detection operation. Use this operation id with DescribeStackSetOperation to monitor the progress of the drift detection operation. The drift detection operation may take some time, depending on the number of stack instances included in the stack set, in addition to the number of resources included in each stack. Once the operation has completed, use the following actions to return drift information:   Use DescribeStackSet to return detailed information about the stack set, including detailed information about the last completed drift operation performed on the stack set. (Information about drift operations that are in progress isn't included.)   Use ListStackInstances to return a list of stack instances belonging to the stack set, including the drift status and last drift time checked of each instance.   Use DescribeStackInstance to return detailed information about a specific stack instance, including its drift status and last drift time checked.   For more information about performing a drift detection operation on a stack set, see Detecting unmanaged changes in stack sets. You can only run a single drift detection operation on a given stack set at one time. To stop a drift detection stack set operation, use StopStackSetOperation.
    @Sendable
    public func detectStackSetDrift(_ input: DetectStackSetDriftInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DetectStackSetDriftOutput {
        return try await self.client.execute(
            operation: "DetectStackSetDrift", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the estimated monthly cost of a template. The return value is an Amazon Web Services Simple Monthly Calculator URL with a query string that describes the resources required to run the template.
    @Sendable
    public func estimateTemplateCost(_ input: EstimateTemplateCostInput, logger: Logger = AWSClient.loggingDisabled) async throws -> EstimateTemplateCostOutput {
        return try await self.client.execute(
            operation: "EstimateTemplateCost", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a stack using the input information that was provided when the specified change set was created. After the call successfully completes, CloudFormation starts updating the stack. Use the DescribeStacks action to view the status of the update. When you execute a change set, CloudFormation deletes all other change sets associated with the stack because they aren't valid for the updated stack. If a stack policy is associated with the stack, CloudFormation enforces the policy during the update. You can't specify a temporary stack policy that overrides the current policy. To create a change set for the entire stack hierarchy, IncludeNestedStacks must have been set to True.
    @Sendable
    public func executeChangeSet(_ input: ExecuteChangeSetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ExecuteChangeSetOutput {
        return try await self.client.execute(
            operation: "ExecuteChangeSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves a generated template. If the template is in an InProgress or Pending status then the template returned will be the template when the template was last in a Complete status. If the template has not yet been in a Complete status then an empty template will be returned.
    @Sendable
    public func getGeneratedTemplate(_ input: GetGeneratedTemplateInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetGeneratedTemplateOutput {
        return try await self.client.execute(
            operation: "GetGeneratedTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the stack policy for a specified stack. If a stack doesn't have a policy, a null value is returned.
    @Sendable
    public func getStackPolicy(_ input: GetStackPolicyInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetStackPolicyOutput {
        return try await self.client.execute(
            operation: "GetStackPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the template body for a specified stack. You can get the template for running or deleted stacks. For deleted stacks, GetTemplate returns the template for up to 90 days after the stack has been deleted.  If the template doesn't exist, a ValidationError is returned.
    @Sendable
    public func getTemplate(_ input: GetTemplateInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTemplateOutput {
        return try await self.client.execute(
            operation: "GetTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a new or existing template. The GetTemplateSummary action is useful for viewing parameter information, such as default parameter values and parameter types, before you create or update a stack or stack set. You can use the GetTemplateSummary action when you submit a template, or you can get template information for a stack set, or a running or deleted stack. For deleted stacks, GetTemplateSummary returns the template information for up to 90 days after the stack has been deleted. If the template doesn't exist, a ValidationError is returned.
    @Sendable
    public func getTemplateSummary(_ input: GetTemplateSummaryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTemplateSummaryOutput {
        return try await self.client.execute(
            operation: "GetTemplateSummary", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Import existing stacks into a new stack sets. Use the stack import operation to import up to 10 stacks into a new stack set in the same account as the source stack or in a different administrator account and Region, by specifying the stack ID of the stack you intend to import.
    @Sendable
    public func importStacksToStackSet(_ input: ImportStacksToStackSetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ImportStacksToStackSetOutput {
        return try await self.client.execute(
            operation: "ImportStacksToStackSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the ID and status of each active change set for a stack. For example, CloudFormation lists change sets that are in the CREATE_IN_PROGRESS or CREATE_PENDING state.
    @Sendable
    public func listChangeSets(_ input: ListChangeSetsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListChangeSetsOutput {
        return try await self.client.execute(
            operation: "ListChangeSets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all exported output values in the account and Region in which you call this action. Use this action to see the exported output values that you can import into other stacks. To import values, use the  Fn::ImportValue function. For more information, see  CloudFormation export stack output values.
    @Sendable
    public func listExports(_ input: ListExportsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListExportsOutput {
        return try await self.client.execute(
            operation: "ListExports", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists your generated templates in this Region.
    @Sendable
    public func listGeneratedTemplates(_ input: ListGeneratedTemplatesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListGeneratedTemplatesOutput {
        return try await self.client.execute(
            operation: "ListGeneratedTemplates", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all stacks that are importing an exported output value. To modify or remove an exported output value, first use this action to see which stacks are using it. To see the exported output values in your account, see ListExports. For more information about importing an exported output value, see the Fn::ImportValue function.
    @Sendable
    public func listImports(_ input: ListImportsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListImportsOutput {
        return try await self.client.execute(
            operation: "ListImports", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the related resources for a list of resources from a resource scan. The response indicates whether each returned resource is already managed by CloudFormation.
    @Sendable
    public func listResourceScanRelatedResources(_ input: ListResourceScanRelatedResourcesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListResourceScanRelatedResourcesOutput {
        return try await self.client.execute(
            operation: "ListResourceScanRelatedResources", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the resources from a resource scan. The results can be filtered by resource identifier, resource type prefix, tag key, and tag value. Only resources that match all specified filters are returned. The response indicates whether each returned resource is already managed by CloudFormation.
    @Sendable
    public func listResourceScanResources(_ input: ListResourceScanResourcesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListResourceScanResourcesOutput {
        return try await self.client.execute(
            operation: "ListResourceScanResources", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List the resource scans from newest to oldest. By default it will return up to 10 resource scans.
    @Sendable
    public func listResourceScans(_ input: ListResourceScansInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListResourceScansOutput {
        return try await self.client.execute(
            operation: "ListResourceScans", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns drift information for resources in a stack instance.   ListStackInstanceResourceDrifts returns drift information for the most recent drift detection operation. If an operation is in progress, it may only return partial results.
    @Sendable
    public func listStackInstanceResourceDrifts(_ input: ListStackInstanceResourceDriftsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStackInstanceResourceDriftsOutput {
        return try await self.client.execute(
            operation: "ListStackInstanceResourceDrifts", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns summary information about stack instances that are associated with the specified stack set. You can filter for stack instances that are associated with a specific Amazon Web Services account name or Region, or that have a specific status.
    @Sendable
    public func listStackInstances(_ input: ListStackInstancesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStackInstancesOutput {
        return try await self.client.execute(
            operation: "ListStackInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns descriptions of all resources of the specified stack. For deleted stacks, ListStackResources returns resource information for up to 90 days after the stack has been deleted.
    @Sendable
    public func listStackResources(_ input: ListStackResourcesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStackResourcesOutput {
        return try await self.client.execute(
            operation: "ListStackResources", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns summary information about deployment targets for a stack set.
    @Sendable
    public func listStackSetAutoDeploymentTargets(_ input: ListStackSetAutoDeploymentTargetsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStackSetAutoDeploymentTargetsOutput {
        return try await self.client.execute(
            operation: "ListStackSetAutoDeploymentTargets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns summary information about the results of a stack set operation.
    @Sendable
    public func listStackSetOperationResults(_ input: ListStackSetOperationResultsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStackSetOperationResultsOutput {
        return try await self.client.execute(
            operation: "ListStackSetOperationResults", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns summary information about operations performed on a stack set.
    @Sendable
    public func listStackSetOperations(_ input: ListStackSetOperationsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStackSetOperationsOutput {
        return try await self.client.execute(
            operation: "ListStackSetOperations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns summary information about stack sets that are associated with the user.   [Self-managed permissions] If you set the CallAs parameter to SELF while signed in to your Amazon Web Services account, ListStackSets returns all self-managed stack sets in your Amazon Web Services account.   [Service-managed permissions] If you set the CallAs parameter to SELF while signed in to the organization's management account, ListStackSets returns all stack sets in the management account.   [Service-managed permissions] If you set the CallAs parameter to DELEGATED_ADMIN while signed in to your member account, ListStackSets returns all stack sets with service-managed permissions in the management account.
    @Sendable
    public func listStackSets(_ input: ListStackSetsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStackSetsOutput {
        return try await self.client.execute(
            operation: "ListStackSets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the summary information for stacks whose status matches the specified StackStatusFilter. Summary information for stacks that have been deleted is kept for 90 days after the stack is deleted. If no StackStatusFilter is specified, summary information for all stacks is returned (including existing stacks and stacks that have been deleted).
    @Sendable
    public func listStacks(_ input: ListStacksInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStacksOutput {
        return try await self.client.execute(
            operation: "ListStacks", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of registration tokens for the specified extension(s).
    @Sendable
    public func listTypeRegistrations(_ input: ListTypeRegistrationsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTypeRegistrationsOutput {
        return try await self.client.execute(
            operation: "ListTypeRegistrations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns summary information about the versions of an extension.
    @Sendable
    public func listTypeVersions(_ input: ListTypeVersionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTypeVersionsOutput {
        return try await self.client.execute(
            operation: "ListTypeVersions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns summary information about extension that have been registered with CloudFormation.
    @Sendable
    public func listTypes(_ input: ListTypesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTypesOutput {
        return try await self.client.execute(
            operation: "ListTypes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Publishes the specified extension to the CloudFormation registry as a public extension in this Region. Public extensions are available for use by all CloudFormation users. For more information about publishing extensions, see Publishing extensions to make them available for public use in the CloudFormation CLI User Guide. To publish an extension, you must be registered as a publisher with CloudFormation. For more information, see RegisterPublisher.
    @Sendable
    public func publishType(_ input: PublishTypeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> PublishTypeOutput {
        return try await self.client.execute(
            operation: "PublishType", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Reports progress of a resource handler to CloudFormation. Reserved for use by the CloudFormation CLI. Don't use this API in your code.
    @Sendable
    public func recordHandlerProgress(_ input: RecordHandlerProgressInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RecordHandlerProgressOutput {
        return try await self.client.execute(
            operation: "RecordHandlerProgress", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Registers your account as a publisher of public extensions in the CloudFormation registry. Public extensions are available for use by all CloudFormation users. This publisher ID applies to your account in all Amazon Web Services Regions. For information about requirements for registering as a public extension publisher, see Registering your account to publish CloudFormation extensions in the CloudFormation CLI User Guide.
    @Sendable
    public func registerPublisher(_ input: RegisterPublisherInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RegisterPublisherOutput {
        return try await self.client.execute(
            operation: "RegisterPublisher", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Registers an extension with the CloudFormation service. Registering an extension makes it available for use in CloudFormation templates in your Amazon Web Services account, and includes:   Validating the extension schema.   Determining which handlers, if any, have been specified for the extension.   Making the extension available for use in your account.   For more information about how to develop extensions and ready them for registration, see Creating Resource Providers in the CloudFormation CLI User Guide. You can have a maximum of 50 resource extension versions registered at a time. This maximum is per account and per Region. Use DeregisterType to deregister specific extension versions if necessary. Once you have initiated a registration request using RegisterType, you can use DescribeTypeRegistration to monitor the progress of the registration request. Once you have registered a private extension in your account and Region, use SetTypeConfiguration to specify configuration properties for the extension. For more information, see Configuring extensions at the account level in the CloudFormation User Guide.
    @Sendable
    public func registerType(_ input: RegisterTypeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RegisterTypeOutput {
        return try await self.client.execute(
            operation: "RegisterType", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// When specifying RollbackStack, you preserve the state of previously provisioned resources when an operation fails. You can check the status of the stack through the DescribeStacks operation. Rolls back the specified stack to the last known stable state from CREATE_FAILED or UPDATE_FAILED stack statuses. This operation will delete a stack if it doesn't contain a last known stable state. A last known stable state includes any status in a *_COMPLETE. This includes the following stack statuses.    CREATE_COMPLETE     UPDATE_COMPLETE     UPDATE_ROLLBACK_COMPLETE     IMPORT_COMPLETE     IMPORT_ROLLBACK_COMPLETE
    @Sendable
    public func rollbackStack(_ input: RollbackStackInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RollbackStackOutput {
        return try await self.client.execute(
            operation: "RollbackStack", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Sets a stack policy for a specified stack.
    @Sendable
    public func setStackPolicy(_ input: SetStackPolicyInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "SetStackPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Specifies the configuration data for a registered CloudFormation extension, in the given account and Region. To view the current configuration data for an extension, refer to the ConfigurationSchema element of DescribeType. For more information, see Configuring extensions at the account level in the CloudFormation User Guide.  It's strongly recommended that you use dynamic references to restrict sensitive configuration definitions, such as third-party credentials. For more details on dynamic references, see Using dynamic references to specify template values in the CloudFormation User Guide.
    @Sendable
    public func setTypeConfiguration(_ input: SetTypeConfigurationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> SetTypeConfigurationOutput {
        return try await self.client.execute(
            operation: "SetTypeConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Specify the default version of an extension. The default version of an extension will be used in CloudFormation operations.
    @Sendable
    public func setTypeDefaultVersion(_ input: SetTypeDefaultVersionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> SetTypeDefaultVersionOutput {
        return try await self.client.execute(
            operation: "SetTypeDefaultVersion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Sends a signal to the specified resource with a success or failure status. You can use the SignalResource operation in conjunction with a creation policy or update policy. CloudFormation doesn't proceed with a stack creation or update until resources receive the required number of signals or the timeout period is exceeded. The SignalResource operation is useful in cases where you want to send signals from anywhere other than an Amazon EC2 instance.
    @Sendable
    public func signalResource(_ input: SignalResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "SignalResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts a scan of the resources in this account in this Region. You can the status of a scan using the ListResourceScans API action.
    @Sendable
    public func startResourceScan(_ input: StartResourceScanInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StartResourceScanOutput {
        return try await self.client.execute(
            operation: "StartResourceScan", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stops an in-progress operation on a stack set and its associated stack instances. StackSets will cancel all the unstarted stack instance deployments and wait for those are in-progress to complete.
    @Sendable
    public func stopStackSetOperation(_ input: StopStackSetOperationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StopStackSetOperationOutput {
        return try await self.client.execute(
            operation: "StopStackSetOperation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Tests a registered extension to make sure it meets all necessary requirements for being published in the CloudFormation registry.   For resource types, this includes passing all contracts tests defined for the type.   For modules, this includes determining if the module's model meets all necessary requirements.   For more information, see Testing your public extension prior to publishing in the CloudFormation CLI User Guide. If you don't specify a version, CloudFormation uses the default version of the extension in your account and Region for testing. To perform testing, CloudFormation assumes the execution role specified when the type was registered. For more information, see RegisterType. Once you've initiated testing on an extension using TestType, you can pass the returned TypeVersionArn into DescribeType to monitor the current test status and test status description for the extension. An extension must have a test status of PASSED before it can be published. For more information, see Publishing extensions to make them available for public use in the CloudFormation CLI User Guide.
    @Sendable
    public func testType(_ input: TestTypeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> TestTypeOutput {
        return try await self.client.execute(
            operation: "TestType", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a generated template. This can be used to change the name, add and remove resources, refresh resources, and change the DeletionPolicy and UpdateReplacePolicy settings. You can check the status of the update to the generated template using the DescribeGeneratedTemplate API action.
    @Sendable
    public func updateGeneratedTemplate(_ input: UpdateGeneratedTemplateInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateGeneratedTemplateOutput {
        return try await self.client.execute(
            operation: "UpdateGeneratedTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a stack as specified in the template. After the call completes successfully, the stack update starts. You can check the status of the stack through the DescribeStacks action. To get a copy of the template for an existing stack, you can use the GetTemplate action. For more information about creating an update template, updating a stack, and monitoring the progress of the update, see Updating a Stack.
    @Sendable
    public func updateStack(_ input: UpdateStackInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateStackOutput {
        return try await self.client.execute(
            operation: "UpdateStack", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the parameter values for stack instances for the specified accounts, within the specified Amazon Web Services Regions. A stack instance refers to a stack in a specific account and Region. You can only update stack instances in Amazon Web Services Regions and accounts where they already exist; to create additional stack instances, use CreateStackInstances. During stack set updates, any parameters overridden for a stack instance aren't updated, but retain their overridden value. You can only update the parameter values that are specified in the stack set; to add or delete a parameter itself, use UpdateStackSet to update the stack set template. If you add a parameter to a template, before you can override the parameter value specified in the stack set you must first use UpdateStackSet to update all stack instances with the updated template and parameter value specified in the stack set. Once a stack instance has been updated with the new parameter, you can then override the parameter value using UpdateStackInstances.
    @Sendable
    public func updateStackInstances(_ input: UpdateStackInstancesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateStackInstancesOutput {
        return try await self.client.execute(
            operation: "UpdateStackInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the stack set, and associated stack instances in the specified accounts and Amazon Web Services Regions. Even if the stack set operation created by updating the stack set fails (completely or partially, below or above a specified failure tolerance), the stack set is updated with your changes. Subsequent CreateStackInstances calls on the specified stack set use the updated stack set.
    @Sendable
    public func updateStackSet(_ input: UpdateStackSetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateStackSetOutput {
        return try await self.client.execute(
            operation: "UpdateStackSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates termination protection for the specified stack. If a user attempts to delete a stack with termination protection enabled, the operation fails and the stack remains unchanged. For more information, see Protecting a Stack From Being Deleted in the CloudFormation User Guide. For nested stacks, termination protection is set on the root stack and can't be changed directly on the nested stack.
    @Sendable
    public func updateTerminationProtection(_ input: UpdateTerminationProtectionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateTerminationProtectionOutput {
        return try await self.client.execute(
            operation: "UpdateTerminationProtection", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Validates a specified template. CloudFormation first checks if the template is valid JSON. If it isn't, CloudFormation checks if the template is valid YAML. If both these checks fail, CloudFormation returns a template validation error.
    @Sendable
    public func validateTemplate(_ input: ValidateTemplateInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ValidateTemplateOutput {
        return try await self.client.execute(
            operation: "ValidateTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension CloudFormation {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: CloudFormation, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension CloudFormation {
    /// Retrieves your account's CloudFormation limits, such as the maximum number of stacks that you can create in your account. For more information about account limits, see CloudFormation Quotas in the CloudFormation User Guide.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeAccountLimitsPaginator(
        _ input: DescribeAccountLimitsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeAccountLimitsInput, DescribeAccountLimitsOutput> {
        return .init(
            input: input,
            command: self.describeAccountLimits,
            inputKey: \DescribeAccountLimitsInput.nextToken,
            outputKey: \DescribeAccountLimitsOutput.nextToken,
            logger: logger
        )
    }

    /// Returns all stack related events for a specified stack in reverse chronological order. For more information about a stack's event history, see CloudFormation stack creation events in the CloudFormation User Guide.  You can list events for stacks that have failed to create or have been deleted by specifying the unique stack identifier (stack ID).
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeStackEventsPaginator(
        _ input: DescribeStackEventsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeStackEventsInput, DescribeStackEventsOutput> {
        return .init(
            input: input,
            command: self.describeStackEvents,
            inputKey: \DescribeStackEventsInput.nextToken,
            outputKey: \DescribeStackEventsOutput.nextToken,
            logger: logger
        )
    }

    /// Returns drift information for the resources that have been checked for drift in the specified stack. This includes actual and expected configuration values for resources where CloudFormation detects configuration drift. For a given stack, there will be one StackResourceDrift for each stack resource that has been checked for drift. Resources that haven't yet been checked for drift aren't included. Resources that don't currently support drift detection aren't checked, and so not included. For a list of resources that support drift detection, see Resources that Support Drift Detection. Use DetectStackResourceDrift to detect drift on individual resources, or DetectStackDrift to detect drift on all supported resources for a given stack.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeStackResourceDriftsPaginator(
        _ input: DescribeStackResourceDriftsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeStackResourceDriftsInput, DescribeStackResourceDriftsOutput> {
        return .init(
            input: input,
            command: self.describeStackResourceDrifts,
            inputKey: \DescribeStackResourceDriftsInput.nextToken,
            outputKey: \DescribeStackResourceDriftsOutput.nextToken,
            logger: logger
        )
    }

    /// Returns the description for the specified stack; if no stack name was specified, then it returns the description for all the stacks created. For more information about a stack's event history, see CloudFormation stack creation events in the CloudFormation User Guide.  If the stack doesn't exist, a ValidationError is returned.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeStacksPaginator(
        _ input: DescribeStacksInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeStacksInput, DescribeStacksOutput> {
        return .init(
            input: input,
            command: self.describeStacks,
            inputKey: \DescribeStacksInput.nextToken,
            outputKey: \DescribeStacksOutput.nextToken,
            logger: logger
        )
    }

    /// Returns the ID and status of each active change set for a stack. For example, CloudFormation lists change sets that are in the CREATE_IN_PROGRESS or CREATE_PENDING state.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listChangeSetsPaginator(
        _ input: ListChangeSetsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListChangeSetsInput, ListChangeSetsOutput> {
        return .init(
            input: input,
            command: self.listChangeSets,
            inputKey: \ListChangeSetsInput.nextToken,
            outputKey: \ListChangeSetsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists all exported output values in the account and Region in which you call this action. Use this action to see the exported output values that you can import into other stacks. To import values, use the  Fn::ImportValue function. For more information, see  CloudFormation export stack output values.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listExportsPaginator(
        _ input: ListExportsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListExportsInput, ListExportsOutput> {
        return .init(
            input: input,
            command: self.listExports,
            inputKey: \ListExportsInput.nextToken,
            outputKey: \ListExportsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists your generated templates in this Region.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listGeneratedTemplatesPaginator(
        _ input: ListGeneratedTemplatesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListGeneratedTemplatesInput, ListGeneratedTemplatesOutput> {
        return .init(
            input: input,
            command: self.listGeneratedTemplates,
            inputKey: \ListGeneratedTemplatesInput.nextToken,
            outputKey: \ListGeneratedTemplatesOutput.nextToken,
            logger: logger
        )
    }

    /// Lists all stacks that are importing an exported output value. To modify or remove an exported output value, first use this action to see which stacks are using it. To see the exported output values in your account, see ListExports. For more information about importing an exported output value, see the Fn::ImportValue function.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listImportsPaginator(
        _ input: ListImportsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListImportsInput, ListImportsOutput> {
        return .init(
            input: input,
            command: self.listImports,
            inputKey: \ListImportsInput.nextToken,
            outputKey: \ListImportsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists the related resources for a list of resources from a resource scan. The response indicates whether each returned resource is already managed by CloudFormation.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listResourceScanRelatedResourcesPaginator(
        _ input: ListResourceScanRelatedResourcesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListResourceScanRelatedResourcesInput, ListResourceScanRelatedResourcesOutput> {
        return .init(
            input: input,
            command: self.listResourceScanRelatedResources,
            inputKey: \ListResourceScanRelatedResourcesInput.nextToken,
            outputKey: \ListResourceScanRelatedResourcesOutput.nextToken,
            logger: logger
        )
    }

    /// Lists the resources from a resource scan. The results can be filtered by resource identifier, resource type prefix, tag key, and tag value. Only resources that match all specified filters are returned. The response indicates whether each returned resource is already managed by CloudFormation.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listResourceScanResourcesPaginator(
        _ input: ListResourceScanResourcesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListResourceScanResourcesInput, ListResourceScanResourcesOutput> {
        return .init(
            input: input,
            command: self.listResourceScanResources,
            inputKey: \ListResourceScanResourcesInput.nextToken,
            outputKey: \ListResourceScanResourcesOutput.nextToken,
            logger: logger
        )
    }

    /// List the resource scans from newest to oldest. By default it will return up to 10 resource scans.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listResourceScansPaginator(
        _ input: ListResourceScansInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListResourceScansInput, ListResourceScansOutput> {
        return .init(
            input: input,
            command: self.listResourceScans,
            inputKey: \ListResourceScansInput.nextToken,
            outputKey: \ListResourceScansOutput.nextToken,
            logger: logger
        )
    }

    /// Returns summary information about stack instances that are associated with the specified stack set. You can filter for stack instances that are associated with a specific Amazon Web Services account name or Region, or that have a specific status.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listStackInstancesPaginator(
        _ input: ListStackInstancesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListStackInstancesInput, ListStackInstancesOutput> {
        return .init(
            input: input,
            command: self.listStackInstances,
            inputKey: \ListStackInstancesInput.nextToken,
            outputKey: \ListStackInstancesOutput.nextToken,
            logger: logger
        )
    }

    /// Returns descriptions of all resources of the specified stack. For deleted stacks, ListStackResources returns resource information for up to 90 days after the stack has been deleted.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listStackResourcesPaginator(
        _ input: ListStackResourcesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListStackResourcesInput, ListStackResourcesOutput> {
        return .init(
            input: input,
            command: self.listStackResources,
            inputKey: \ListStackResourcesInput.nextToken,
            outputKey: \ListStackResourcesOutput.nextToken,
            logger: logger
        )
    }

    /// Returns summary information about the results of a stack set operation.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listStackSetOperationResultsPaginator(
        _ input: ListStackSetOperationResultsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListStackSetOperationResultsInput, ListStackSetOperationResultsOutput> {
        return .init(
            input: input,
            command: self.listStackSetOperationResults,
            inputKey: \ListStackSetOperationResultsInput.nextToken,
            outputKey: \ListStackSetOperationResultsOutput.nextToken,
            logger: logger
        )
    }

    /// Returns summary information about operations performed on a stack set.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listStackSetOperationsPaginator(
        _ input: ListStackSetOperationsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListStackSetOperationsInput, ListStackSetOperationsOutput> {
        return .init(
            input: input,
            command: self.listStackSetOperations,
            inputKey: \ListStackSetOperationsInput.nextToken,
            outputKey: \ListStackSetOperationsOutput.nextToken,
            logger: logger
        )
    }

    /// Returns summary information about stack sets that are associated with the user.   [Self-managed permissions] If you set the CallAs parameter to SELF while signed in to your Amazon Web Services account, ListStackSets returns all self-managed stack sets in your Amazon Web Services account.   [Service-managed permissions] If you set the CallAs parameter to SELF while signed in to the organization's management account, ListStackSets returns all stack sets in the management account.   [Service-managed permissions] If you set the CallAs parameter to DELEGATED_ADMIN while signed in to your member account, ListStackSets returns all stack sets with service-managed permissions in the management account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listStackSetsPaginator(
        _ input: ListStackSetsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListStackSetsInput, ListStackSetsOutput> {
        return .init(
            input: input,
            command: self.listStackSets,
            inputKey: \ListStackSetsInput.nextToken,
            outputKey: \ListStackSetsOutput.nextToken,
            logger: logger
        )
    }

    /// Returns the summary information for stacks whose status matches the specified StackStatusFilter. Summary information for stacks that have been deleted is kept for 90 days after the stack is deleted. If no StackStatusFilter is specified, summary information for all stacks is returned (including existing stacks and stacks that have been deleted).
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listStacksPaginator(
        _ input: ListStacksInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListStacksInput, ListStacksOutput> {
        return .init(
            input: input,
            command: self.listStacks,
            inputKey: \ListStacksInput.nextToken,
            outputKey: \ListStacksOutput.nextToken,
            logger: logger
        )
    }

    /// Returns a list of registration tokens for the specified extension(s).
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTypeRegistrationsPaginator(
        _ input: ListTypeRegistrationsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTypeRegistrationsInput, ListTypeRegistrationsOutput> {
        return .init(
            input: input,
            command: self.listTypeRegistrations,
            inputKey: \ListTypeRegistrationsInput.nextToken,
            outputKey: \ListTypeRegistrationsOutput.nextToken,
            logger: logger
        )
    }

    /// Returns summary information about the versions of an extension.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTypeVersionsPaginator(
        _ input: ListTypeVersionsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTypeVersionsInput, ListTypeVersionsOutput> {
        return .init(
            input: input,
            command: self.listTypeVersions,
            inputKey: \ListTypeVersionsInput.nextToken,
            outputKey: \ListTypeVersionsOutput.nextToken,
            logger: logger
        )
    }

    /// Returns summary information about extension that have been registered with CloudFormation.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTypesPaginator(
        _ input: ListTypesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTypesInput, ListTypesOutput> {
        return .init(
            input: input,
            command: self.listTypes,
            inputKey: \ListTypesInput.nextToken,
            outputKey: \ListTypesOutput.nextToken,
            logger: logger
        )
    }
}

extension CloudFormation.DescribeAccountLimitsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CloudFormation.DescribeAccountLimitsInput {
        return .init(
            nextToken: token
        )
    }
}

extension CloudFormation.DescribeStackEventsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CloudFormation.DescribeStackEventsInput {
        return .init(
            nextToken: token,
            stackName: self.stackName
        )
    }
}

extension CloudFormation.DescribeStackResourceDriftsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CloudFormation.DescribeStackResourceDriftsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            stackName: self.stackName,
            stackResourceDriftStatusFilters: self.stackResourceDriftStatusFilters
        )
    }
}

extension CloudFormation.DescribeStacksInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CloudFormation.DescribeStacksInput {
        return .init(
            nextToken: token,
            stackName: self.stackName
        )
    }
}

extension CloudFormation.ListChangeSetsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CloudFormation.ListChangeSetsInput {
        return .init(
            nextToken: token,
            stackName: self.stackName
        )
    }
}

extension CloudFormation.ListExportsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CloudFormation.ListExportsInput {
        return .init(
            nextToken: token
        )
    }
}

extension CloudFormation.ListGeneratedTemplatesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CloudFormation.ListGeneratedTemplatesInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension CloudFormation.ListImportsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CloudFormation.ListImportsInput {
        return .init(
            exportName: self.exportName,
            nextToken: token
        )
    }
}

extension CloudFormation.ListResourceScanRelatedResourcesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CloudFormation.ListResourceScanRelatedResourcesInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            resources: self.resources,
            resourceScanId: self.resourceScanId
        )
    }
}

extension CloudFormation.ListResourceScanResourcesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CloudFormation.ListResourceScanResourcesInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            resourceIdentifier: self.resourceIdentifier,
            resourceScanId: self.resourceScanId,
            resourceTypePrefix: self.resourceTypePrefix,
            tagKey: self.tagKey,
            tagValue: self.tagValue
        )
    }
}

extension CloudFormation.ListResourceScansInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CloudFormation.ListResourceScansInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension CloudFormation.ListStackInstancesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CloudFormation.ListStackInstancesInput {
        return .init(
            callAs: self.callAs,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            stackInstanceAccount: self.stackInstanceAccount,
            stackInstanceRegion: self.stackInstanceRegion,
            stackSetName: self.stackSetName
        )
    }
}

extension CloudFormation.ListStackResourcesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CloudFormation.ListStackResourcesInput {
        return .init(
            nextToken: token,
            stackName: self.stackName
        )
    }
}

extension CloudFormation.ListStackSetOperationResultsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CloudFormation.ListStackSetOperationResultsInput {
        return .init(
            callAs: self.callAs,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            operationId: self.operationId,
            stackSetName: self.stackSetName
        )
    }
}

extension CloudFormation.ListStackSetOperationsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CloudFormation.ListStackSetOperationsInput {
        return .init(
            callAs: self.callAs,
            maxResults: self.maxResults,
            nextToken: token,
            stackSetName: self.stackSetName
        )
    }
}

extension CloudFormation.ListStackSetsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CloudFormation.ListStackSetsInput {
        return .init(
            callAs: self.callAs,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )
    }
}

extension CloudFormation.ListStacksInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CloudFormation.ListStacksInput {
        return .init(
            nextToken: token,
            stackStatusFilter: self.stackStatusFilter
        )
    }
}

extension CloudFormation.ListTypeRegistrationsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CloudFormation.ListTypeRegistrationsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            registrationStatusFilter: self.registrationStatusFilter,
            type: self.type,
            typeArn: self.typeArn,
            typeName: self.typeName
        )
    }
}

extension CloudFormation.ListTypeVersionsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CloudFormation.ListTypeVersionsInput {
        return .init(
            arn: self.arn,
            deprecatedStatus: self.deprecatedStatus,
            maxResults: self.maxResults,
            nextToken: token,
            publisherId: self.publisherId,
            type: self.type,
            typeName: self.typeName
        )
    }
}

extension CloudFormation.ListTypesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> CloudFormation.ListTypesInput {
        return .init(
            deprecatedStatus: self.deprecatedStatus,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            provisioningType: self.provisioningType,
            type: self.type,
            visibility: self.visibility
        )
    }
}

// MARK: Waiters

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension CloudFormation {
    public func waitUntilChangeSetCreateComplete(
        _ input: DescribeChangeSetInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("status", expected: "CREATE_COMPLETE")),
                .init(state: .failure, matcher: try! JMESPathMatcher("status", expected: "FAILED")),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("ValidationError")),
            ],
            minDelayTime: .seconds(30),
            command: self.describeChangeSet
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilStackCreateComplete(
        _ input: DescribeStacksInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("stacks[].stackStatus", expected: "CREATE_COMPLETE")),
                .init(state: .success, matcher: try! JMESAllPathMatcher("stacks[].stackStatus", expected: "UPDATE_COMPLETE")),
                .init(state: .success, matcher: try! JMESAllPathMatcher("stacks[].stackStatus", expected: "UPDATE_IN_PROGRESS")),
                .init(state: .success, matcher: try! JMESAllPathMatcher("stacks[].stackStatus", expected: "UPDATE_COMPLETE_CLEANUP_IN_PROGRESS")),
                .init(state: .success, matcher: try! JMESAllPathMatcher("stacks[].stackStatus", expected: "UPDATE_FAILED")),
                .init(state: .success, matcher: try! JMESAllPathMatcher("stacks[].stackStatus", expected: "UPDATE_ROLLBACK_IN_PROGRESS")),
                .init(state: .success, matcher: try! JMESAllPathMatcher("stacks[].stackStatus", expected: "UPDATE_ROLLBACK_FAILED")),
                .init(state: .success, matcher: try! JMESAllPathMatcher("stacks[].stackStatus", expected: "UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS")),
                .init(state: .success, matcher: try! JMESAllPathMatcher("stacks[].stackStatus", expected: "UPDATE_ROLLBACK_COMPLETE")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "CREATE_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "DELETE_COMPLETE")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "DELETE_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "ROLLBACK_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "ROLLBACK_COMPLETE")),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("ValidationError")),
            ],
            minDelayTime: .seconds(30),
            command: self.describeStacks
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilStackDeleteComplete(
        _ input: DescribeStacksInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("stacks[].stackStatus", expected: "DELETE_COMPLETE")),
                .init(state: .success, matcher: AWSErrorCodeMatcher("ValidationError")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "DELETE_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "CREATE_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "ROLLBACK_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "UPDATE_ROLLBACK_IN_PROGRESS")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "UPDATE_ROLLBACK_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "UPDATE_ROLLBACK_COMPLETE")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "UPDATE_COMPLETE")),
            ],
            minDelayTime: .seconds(30),
            command: self.describeStacks
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilStackExists(
        _ input: DescribeStacksInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSSuccessMatcher()),
                .init(state: .retry, matcher: AWSErrorCodeMatcher("ValidationError")),
            ],
            minDelayTime: .seconds(5),
            command: self.describeStacks
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilStackImportComplete(
        _ input: DescribeStacksInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("stacks[].stackStatus", expected: "IMPORT_COMPLETE")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "ROLLBACK_COMPLETE")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "ROLLBACK_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "IMPORT_ROLLBACK_IN_PROGRESS")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "IMPORT_ROLLBACK_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "IMPORT_ROLLBACK_COMPLETE")),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("ValidationError")),
            ],
            minDelayTime: .seconds(30),
            command: self.describeStacks
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilStackRollbackComplete(
        _ input: DescribeStacksInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("stacks[].stackStatus", expected: "UPDATE_ROLLBACK_COMPLETE")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "UPDATE_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "UPDATE_ROLLBACK_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "DELETE_FAILED")),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("ValidationError")),
            ],
            minDelayTime: .seconds(30),
            command: self.describeStacks
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilStackUpdateComplete(
        _ input: DescribeStacksInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("stacks[].stackStatus", expected: "UPDATE_COMPLETE")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "UPDATE_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "UPDATE_ROLLBACK_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "UPDATE_ROLLBACK_COMPLETE")),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("ValidationError")),
            ],
            minDelayTime: .seconds(30),
            command: self.describeStacks
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilTypeRegistrationComplete(
        _ input: DescribeTypeRegistrationInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("progressStatus", expected: "COMPLETE")),
                .init(state: .failure, matcher: try! JMESPathMatcher("progressStatus", expected: "FAILED")),
            ],
            minDelayTime: .seconds(30),
            command: self.describeTypeRegistration
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
}
