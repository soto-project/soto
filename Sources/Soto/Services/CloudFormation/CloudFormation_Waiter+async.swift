//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto/tree/main/CodeGenerator. DO NOT EDIT.

#if compiler(>=5.5)

import SotoCore

// MARK: Waiters

@available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
extension CloudFormation {
    public func waitUntilChangeSetCreateComplete(
        _ input: DescribeChangeSetInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("status", expected: "CREATE_COMPLETE")),
                .init(state: .failure, matcher: try! JMESPathMatcher("status", expected: "FAILED")),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("ValidationError")),
            ],
            minDelayTime: .seconds(30),
            command: describeChangeSet
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    public func waitUntilStackCreateComplete(
        _ input: DescribeStacksInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("stacks[].stackStatus", expected: "CREATE_COMPLETE")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "CREATE_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "DELETE_COMPLETE")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "DELETE_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "ROLLBACK_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "ROLLBACK_COMPLETE")),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("ValidationError")),
            ],
            minDelayTime: .seconds(30),
            command: describeStacks
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    public func waitUntilStackDeleteComplete(
        _ input: DescribeStacksInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("stacks[].stackStatus", expected: "DELETE_COMPLETE")),
                .init(state: .success, matcher: AWSErrorCodeMatcher("ValidationError")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "DELETE_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "CREATE_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "ROLLBACK_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "UPDATE_ROLLBACK_IN_PROGRESS")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "UPDATE_ROLLBACK_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "UPDATE_ROLLBACK_COMPLETE")),
            ],
            minDelayTime: .seconds(30),
            command: describeStacks
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    public func waitUntilStackExists(
        _ input: DescribeStacksInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSSuccessMatcher()),
                .init(state: .retry, matcher: AWSErrorCodeMatcher("ValidationError")),
            ],
            minDelayTime: .seconds(5),
            command: describeStacks
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    public func waitUntilStackImportComplete(
        _ input: DescribeStacksInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("stacks[].stackStatus", expected: "IMPORT_COMPLETE")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "ROLLBACK_COMPLETE")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "ROLLBACK_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "IMPORT_ROLLBACK_IN_PROGRESS")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "IMPORT_ROLLBACK_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "IMPORT_ROLLBACK_COMPLETE")),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("ValidationError")),
            ],
            minDelayTime: .seconds(30),
            command: describeStacks
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    public func waitUntilStackRollbackComplete(
        _ input: DescribeStacksInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("stacks[].stackStatus", expected: "UPDATE_ROLLBACK_COMPLETE")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "UPDATE_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "UPDATE_ROLLBACK_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "DELETE_FAILED")),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("ValidationError")),
            ],
            minDelayTime: .seconds(30),
            command: describeStacks
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    public func waitUntilStackUpdateComplete(
        _ input: DescribeStacksInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("stacks[].stackStatus", expected: "UPDATE_COMPLETE")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "UPDATE_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "UPDATE_ROLLBACK_FAILED")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("stacks[].stackStatus", expected: "UPDATE_ROLLBACK_COMPLETE")),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("ValidationError")),
            ],
            minDelayTime: .seconds(30),
            command: describeStacks
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }

    public func waitUntilTypeRegistrationComplete(
        _ input: DescribeTypeRegistrationInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("progressStatus", expected: "COMPLETE")),
                .init(state: .failure, matcher: try! JMESPathMatcher("progressStatus", expected: "FAILED")),
            ],
            minDelayTime: .seconds(30),
            command: describeTypeRegistration
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger, on: eventLoop)
    }
}

#endif // compiler(>=5.5)
