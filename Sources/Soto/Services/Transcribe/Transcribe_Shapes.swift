//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2022 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

import Foundation
import SotoCore

extension Transcribe {
    // MARK: Enums

    public enum BaseModelName: String, CustomStringConvertible, Codable, _SotoSendable {
        case narrowBand = "NarrowBand"
        case wideBand = "WideBand"
        public var description: String { return self.rawValue }
    }

    public enum CLMLanguageCode: String, CustomStringConvertible, Codable, _SotoSendable {
        case enAU = "en-AU"
        case enGB = "en-GB"
        case enUS = "en-US"
        case esUS = "es-US"
        case hiIN = "hi-IN"
        public var description: String { return self.rawValue }
    }

    public enum CallAnalyticsJobStatus: String, CustomStringConvertible, Codable, _SotoSendable {
        case completed = "COMPLETED"
        case failed = "FAILED"
        case inProgress = "IN_PROGRESS"
        case queued = "QUEUED"
        public var description: String { return self.rawValue }
    }

    public enum LanguageCode: String, CustomStringConvertible, Codable, _SotoSendable {
        case afZA = "af-ZA"
        case arAE = "ar-AE"
        case arSA = "ar-SA"
        case daDK = "da-DK"
        case deCH = "de-CH"
        case deDE = "de-DE"
        case enAB = "en-AB"
        case enAU = "en-AU"
        case enGB = "en-GB"
        case enIE = "en-IE"
        case enIN = "en-IN"
        case enNZ = "en-NZ"
        case enUS = "en-US"
        case enWL = "en-WL"
        case enZA = "en-ZA"
        case esES = "es-ES"
        case esUS = "es-US"
        case faIR = "fa-IR"
        case frCA = "fr-CA"
        case frFR = "fr-FR"
        case heIL = "he-IL"
        case hiIN = "hi-IN"
        case idID = "id-ID"
        case itIT = "it-IT"
        case jaJP = "ja-JP"
        case koKR = "ko-KR"
        case msMY = "ms-MY"
        case nlNL = "nl-NL"
        case ptBR = "pt-BR"
        case ptPT = "pt-PT"
        case ruRU = "ru-RU"
        case taIN = "ta-IN"
        case teIN = "te-IN"
        case thTH = "th-TH"
        case trTR = "tr-TR"
        case zhCN = "zh-CN"
        case zhTW = "zh-TW"
        public var description: String { return self.rawValue }
    }

    public enum MediaFormat: String, CustomStringConvertible, Codable, _SotoSendable {
        case amr
        case flac
        case mp3
        case mp4
        case ogg
        case wav
        case webm
        public var description: String { return self.rawValue }
    }

    public enum MedicalContentIdentificationType: String, CustomStringConvertible, Codable, _SotoSendable {
        case phi = "PHI"
        public var description: String { return self.rawValue }
    }

    public enum ModelStatus: String, CustomStringConvertible, Codable, _SotoSendable {
        case completed = "COMPLETED"
        case failed = "FAILED"
        case inProgress = "IN_PROGRESS"
        public var description: String { return self.rawValue }
    }

    public enum OutputLocationType: String, CustomStringConvertible, Codable, _SotoSendable {
        case customerBucket = "CUSTOMER_BUCKET"
        case serviceBucket = "SERVICE_BUCKET"
        public var description: String { return self.rawValue }
    }

    public enum ParticipantRole: String, CustomStringConvertible, Codable, _SotoSendable {
        case agent = "AGENT"
        case customer = "CUSTOMER"
        public var description: String { return self.rawValue }
    }

    public enum PiiEntityType: String, CustomStringConvertible, Codable, _SotoSendable {
        case address = "ADDRESS"
        case all = "ALL"
        case bankAccountNumber = "BANK_ACCOUNT_NUMBER"
        case bankRouting = "BANK_ROUTING"
        case creditDebitCvv = "CREDIT_DEBIT_CVV"
        case creditDebitExpiry = "CREDIT_DEBIT_EXPIRY"
        case creditDebitNumber = "CREDIT_DEBIT_NUMBER"
        case email = "EMAIL"
        case name = "NAME"
        case phone = "PHONE"
        case pin = "PIN"
        case ssn = "SSN"
        public var description: String { return self.rawValue }
    }

    public enum RedactionOutput: String, CustomStringConvertible, Codable, _SotoSendable {
        case redacted
        case redactedAndUnredacted = "redacted_and_unredacted"
        public var description: String { return self.rawValue }
    }

    public enum RedactionType: String, CustomStringConvertible, Codable, _SotoSendable {
        case pii = "PII"
        public var description: String { return self.rawValue }
    }

    public enum SentimentValue: String, CustomStringConvertible, Codable, _SotoSendable {
        case mixed = "MIXED"
        case negative = "NEGATIVE"
        case neutral = "NEUTRAL"
        case positive = "POSITIVE"
        public var description: String { return self.rawValue }
    }

    public enum Specialty: String, CustomStringConvertible, Codable, _SotoSendable {
        case primarycare = "PRIMARYCARE"
        public var description: String { return self.rawValue }
    }

    public enum SubtitleFormat: String, CustomStringConvertible, Codable, _SotoSendable {
        case srt
        case vtt
        public var description: String { return self.rawValue }
    }

    public enum TranscriptFilterType: String, CustomStringConvertible, Codable, _SotoSendable {
        case exact = "EXACT"
        public var description: String { return self.rawValue }
    }

    public enum TranscriptionJobStatus: String, CustomStringConvertible, Codable, _SotoSendable {
        case completed = "COMPLETED"
        case failed = "FAILED"
        case inProgress = "IN_PROGRESS"
        case queued = "QUEUED"
        public var description: String { return self.rawValue }
    }

    public enum `Type`: String, CustomStringConvertible, Codable, _SotoSendable {
        case conversation = "CONVERSATION"
        case dictation = "DICTATION"
        public var description: String { return self.rawValue }
    }

    public enum VocabularyFilterMethod: String, CustomStringConvertible, Codable, _SotoSendable {
        case mask
        case remove
        case tag
        public var description: String { return self.rawValue }
    }

    public enum VocabularyState: String, CustomStringConvertible, Codable, _SotoSendable {
        case failed = "FAILED"
        case pending = "PENDING"
        case ready = "READY"
        public var description: String { return self.rawValue }
    }

    public enum Rule: AWSEncodableShape & AWSDecodableShape, _SotoSendable {
        /// Flag the presence or absence of interruptions in your Call Analytics transcription output. Refer to  for more detail.
        case interruptionFilter(InterruptionFilter)
        /// Flag the presence or absence of periods of silence in your Call Analytics transcription  output. Refer to  for more detail.
        case nonTalkTimeFilter(NonTalkTimeFilter)
        /// Flag the presence or absence of specific sentiments in your Call Analytics transcription output.  Refer to  for more detail.
        case sentimentFilter(SentimentFilter)
        /// Flag the presence or absence of specific words or phrases in your Call Analytics transcription  output. Refer to  for more detail.
        case transcriptFilter(TranscriptFilter)

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            guard container.allKeys.count == 1, let key = container.allKeys.first else {
                let context = DecodingError.Context(
                    codingPath: container.codingPath,
                    debugDescription: "Expected exactly one key, but got \(container.allKeys.count)"
                )
                throw DecodingError.dataCorrupted(context)
            }
            switch key {
            case .interruptionFilter:
                let value = try container.decode(InterruptionFilter.self, forKey: .interruptionFilter)
                self = .interruptionFilter(value)
            case .nonTalkTimeFilter:
                let value = try container.decode(NonTalkTimeFilter.self, forKey: .nonTalkTimeFilter)
                self = .nonTalkTimeFilter(value)
            case .sentimentFilter:
                let value = try container.decode(SentimentFilter.self, forKey: .sentimentFilter)
                self = .sentimentFilter(value)
            case .transcriptFilter:
                let value = try container.decode(TranscriptFilter.self, forKey: .transcriptFilter)
                self = .transcriptFilter(value)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case .interruptionFilter(let value):
                try container.encode(value, forKey: .interruptionFilter)
            case .nonTalkTimeFilter(let value):
                try container.encode(value, forKey: .nonTalkTimeFilter)
            case .sentimentFilter(let value):
                try container.encode(value, forKey: .sentimentFilter)
            case .transcriptFilter(let value):
                try container.encode(value, forKey: .transcriptFilter)
            }
        }

        public func validate(name: String) throws {
            switch self {
            case .interruptionFilter(let value):
                try value.validate(name: "\(name).interruptionFilter")
            case .nonTalkTimeFilter(let value):
                try value.validate(name: "\(name).nonTalkTimeFilter")
            case .sentimentFilter(let value):
                try value.validate(name: "\(name).sentimentFilter")
            case .transcriptFilter(let value):
                try value.validate(name: "\(name).transcriptFilter")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case interruptionFilter = "InterruptionFilter"
            case nonTalkTimeFilter = "NonTalkTimeFilter"
            case sentimentFilter = "SentimentFilter"
            case transcriptFilter = "TranscriptFilter"
        }
    }

    // MARK: Shapes

    public struct AbsoluteTimeRange: AWSEncodableShape & AWSDecodableShape {
        /// The time, in milliseconds, when Amazon Transcribe stops searching for the specified criteria in your audio. If you include EndTime in your request, you must also include StartTime.
        public let endTime: Int64?
        /// The time, in milliseconds, from the start of your media file until the value you specify in which Amazon Transcribe searches for your specified criteria.
        public let first: Int64?
        /// The time, in milliseconds, from the value you specify until the end of your media file in which Amazon Transcribe searches for your specified criteria.
        public let last: Int64?
        /// The time, in milliseconds, when Amazon Transcribe starts searching for the specified  criteria in your audio. If you include StartTime in your request, you must also  include EndTime.
        public let startTime: Int64?

        public init(endTime: Int64? = nil, first: Int64? = nil, last: Int64? = nil, startTime: Int64? = nil) {
            self.endTime = endTime
            self.first = first
            self.last = last
            self.startTime = startTime
        }

        public func validate(name: String) throws {
            try self.validate(self.endTime, name: "endTime", parent: name, max: 14_400_000)
            try self.validate(self.endTime, name: "endTime", parent: name, min: 0)
            try self.validate(self.first, name: "first", parent: name, max: 14_400_000)
            try self.validate(self.first, name: "first", parent: name, min: 0)
            try self.validate(self.last, name: "last", parent: name, max: 14_400_000)
            try self.validate(self.last, name: "last", parent: name, min: 0)
            try self.validate(self.startTime, name: "startTime", parent: name, max: 14_400_000)
            try self.validate(self.startTime, name: "startTime", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case first = "First"
            case last = "Last"
            case startTime = "StartTime"
        }
    }

    public struct CallAnalyticsJob: AWSDecodableShape {
        /// The name of the Call Analytics job. Job names are case sensitive and must be unique  within an Amazon Web Services account.
        public let callAnalyticsJobName: String?
        /// Provides the status of the specified Call Analytics job. If the status is COMPLETED, the job is finished and you can find the results at the location specified in TranscriptFileUri (or RedactedTranscriptFileUri, if you requested transcript redaction). If the status is  FAILED, FailureReason provides details on why your transcription job failed.
        public let callAnalyticsJobStatus: CallAnalyticsJobStatus?
        /// Allows you to specify which speaker is on which channel in your Call Analytics job request. For example, if your agent is the first participant to speak, you would set  ChannelId to 0 (to indicate the first channel) and  ParticipantRole to AGENT (to indicate that it's the agent  speaking).
        public let channelDefinitions: [ChannelDefinition]?
        /// The date and time the specified Call Analytics job finished processing. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:33:13.922000-07:00 represents a transcription job that started processing at 12:33 PM UTC-7 on May 4, 2022.
        public let completionTime: Date?
        /// The date and time the specified Call Analytics job request was made. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.761000-07:00 represents a transcription job that started processing at 12:32 PM UTC-7 on May 4, 2022.
        public let creationTime: Date?
        /// The Amazon Resource Name (ARN) of an IAM role that has permissions to access the Amazon S3 bucket that contains your input files. If the role you specify doesn’t  have the appropriate permissions to access the specified Amazon S3 location, your request  fails.         IAM role ARNs have the format arn:partition:iam::account:role/role-name-with-path. For example: arn:aws:iam::111122223333:role/Admin. For more information, see IAM ARNs.
        public let dataAccessRoleArn: String?
        /// If CallAnalyticsJobStatus is FAILED,  FailureReason contains information about why the Call Analytics job request failed. The FailureReason field contains one of the following values:    Unsupported media format. The media format specified in MediaFormat isn't valid. Refer to MediaFormat for a list of supported formats.    The media format provided does not match the detected media  format. The media format specified in MediaFormat doesn't match the  format of the input file. Check the media format of your media file and correct the  specified value.    Invalid sample rate for audio file. The sample rate specified in MediaSampleRateHertz isn't valid. The sample rate must be between 8,000 and 48,000 Hertz.    The sample rate provided does not match the detected sample  rate. The sample rate specified in MediaSampleRateHertz doesn't  match the sample rate detected in your input media file. Check the sample rate of  your media file and correct the specified value.    Invalid file size: file size too large. The size of your media file is larger than what Amazon Transcribe can process.  For more information, refer to Guidelines and quotas.    Invalid number of channels: number of channels too large. Your audio contains more channels than Amazon Transcribe is able to process.  For more information, refer to Guidelines and  quotas.
        public let failureReason: String?
        /// The confidence score associated with the language identified in your media file. Confidence scores are values between 0 and 1; a larger value indicates a higher  probability that the identified language correctly matches the language spoken in your media.
        public let identifiedLanguageScore: Float?
        /// The language code used to create your Call Analytics job. For a list of supported languages and their associated language codes, refer to the  Supported languages table. If you don't know the language spoken in your media file, you can omit this field and let Amazon Transcribe automatically identify the language of your media. To improve the accuracy  of language identification, you can include several language codes and Amazon Transcribe chooses the closest match for your transcription.
        public let languageCode: LanguageCode?
        public let media: Media?
        /// The format of the input media file.
        public let mediaFormat: MediaFormat?
        /// The sample rate, in Hertz, of the audio track in your input media file.
        public let mediaSampleRateHertz: Int?
        /// Allows additional optional settings in your   request, including content redaction; allows you to apply custom language models, vocabulary filters, and custom vocabularies to your Call Analytics job.
        public let settings: CallAnalyticsJobSettings?
        /// The date and time the specified Call Analytics job began processing. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.789000-07:00 represents a transcription job that started processing at 12:32 PM UTC-7 on May 4, 2022.
        public let startTime: Date?
        public let transcript: Transcript?

        public init(callAnalyticsJobName: String? = nil, callAnalyticsJobStatus: CallAnalyticsJobStatus? = nil, channelDefinitions: [ChannelDefinition]? = nil, completionTime: Date? = nil, creationTime: Date? = nil, dataAccessRoleArn: String? = nil, failureReason: String? = nil, identifiedLanguageScore: Float? = nil, languageCode: LanguageCode? = nil, media: Media? = nil, mediaFormat: MediaFormat? = nil, mediaSampleRateHertz: Int? = nil, settings: CallAnalyticsJobSettings? = nil, startTime: Date? = nil, transcript: Transcript? = nil) {
            self.callAnalyticsJobName = callAnalyticsJobName
            self.callAnalyticsJobStatus = callAnalyticsJobStatus
            self.channelDefinitions = channelDefinitions
            self.completionTime = completionTime
            self.creationTime = creationTime
            self.dataAccessRoleArn = dataAccessRoleArn
            self.failureReason = failureReason
            self.identifiedLanguageScore = identifiedLanguageScore
            self.languageCode = languageCode
            self.media = media
            self.mediaFormat = mediaFormat
            self.mediaSampleRateHertz = mediaSampleRateHertz
            self.settings = settings
            self.startTime = startTime
            self.transcript = transcript
        }

        private enum CodingKeys: String, CodingKey {
            case callAnalyticsJobName = "CallAnalyticsJobName"
            case callAnalyticsJobStatus = "CallAnalyticsJobStatus"
            case channelDefinitions = "ChannelDefinitions"
            case completionTime = "CompletionTime"
            case creationTime = "CreationTime"
            case dataAccessRoleArn = "DataAccessRoleArn"
            case failureReason = "FailureReason"
            case identifiedLanguageScore = "IdentifiedLanguageScore"
            case languageCode = "LanguageCode"
            case media = "Media"
            case mediaFormat = "MediaFormat"
            case mediaSampleRateHertz = "MediaSampleRateHertz"
            case settings = "Settings"
            case startTime = "StartTime"
            case transcript = "Transcript"
        }
    }

    public struct CallAnalyticsJobSettings: AWSEncodableShape & AWSDecodableShape {
        public let contentRedaction: ContentRedaction?
        /// If using automatic language identification (IdentifyLanguage) in your request  and you want to apply a custom language model, a custom vocabulary, or a custom vocabulary filter, include LanguageIdSettings with the relevant sub-parameters  (VocabularyName, LanguageModelName, and  VocabularyFilterName). You can specify two or more language codes that represent the languages you think may  be present in your media; including more than five is not recommended. Each language code you include can have an associated custom language model, custom vocabulary, and custom  vocabulary filter. The languages you specify must match the languages of the specified custom language models, custom vocabularies, and custom vocabulary filters. To include language options using IdentifyLanguage  without including a custom language model, a custom  vocabulary, or a custom vocabulary filter, use LanguageOptions instead of LanguageIdSettings. Including language options can improve the accuracy of  automatic language identification. If you want to include a custom language model with your request but  do not want to use automatic language identification, use instead the  parameter with the LanguageModelName sub-parameter. If you want to include a custom vocabulary or a custom vocabulary filter (or both) with your request but do not want to use automatic  language identification, use instead the   parameter with the VocabularyName or  VocabularyFilterName (or both) sub-parameter.
        public let languageIdSettings: [LanguageCode: LanguageIdSettings]?
        /// The name of the custom language model you want to use when processing your  Call Analytics job. Note that language model names are case sensitive. The language of the specified language model must match the language code you specify in your transcription request. If the languages don't match, the language model isn't applied.  There are no errors or warnings associated with a language mismatch.
        public let languageModelName: String?
        /// You can specify two or more language codes that represent the languages you think may  be present in your media; including more than five is not recommended. If you're unsure what languages are present, do not include this parameter. Including language options can improve the accuracy of language identification. For a list of languages supported with Call Analytics, refer to the Supported languages table.
        public let languageOptions: [LanguageCode]?
        /// Specify how you want your vocabulary filter applied to your transcript. To replace words with ***, choose mask. To delete words, choose remove. To flag words without changing them, choose tag.
        public let vocabularyFilterMethod: VocabularyFilterMethod?
        /// The name of the custom vocabulary filter you want to include in your Call Analytics  transcription request. Vocabulary filter names are case sensitive. Note that if you include VocabularyFilterName in your request, you must  also include VocabularyFilterMethod.
        public let vocabularyFilterName: String?
        /// The name of the custom vocabulary you want to include in your Call Analytics  transcription request. Vocabulary names are case sensitive.
        public let vocabularyName: String?

        public init(contentRedaction: ContentRedaction? = nil, languageIdSettings: [LanguageCode: LanguageIdSettings]? = nil, languageModelName: String? = nil, languageOptions: [LanguageCode]? = nil, vocabularyFilterMethod: VocabularyFilterMethod? = nil, vocabularyFilterName: String? = nil, vocabularyName: String? = nil) {
            self.contentRedaction = contentRedaction
            self.languageIdSettings = languageIdSettings
            self.languageModelName = languageModelName
            self.languageOptions = languageOptions
            self.vocabularyFilterMethod = vocabularyFilterMethod
            self.vocabularyFilterName = vocabularyFilterName
            self.vocabularyName = vocabularyName
        }

        public func validate(name: String) throws {
            try self.contentRedaction?.validate(name: "\(name).contentRedaction")
            try self.languageIdSettings?.forEach {
                try $0.value.validate(name: "\(name).languageIdSettings[\"\($0.key)\"]")
            }
            try self.validate(self.languageIdSettings, name: "languageIdSettings", parent: name, max: 5)
            try self.validate(self.languageIdSettings, name: "languageIdSettings", parent: name, min: 1)
            try self.validate(self.languageModelName, name: "languageModelName", parent: name, max: 200)
            try self.validate(self.languageModelName, name: "languageModelName", parent: name, min: 1)
            try self.validate(self.languageModelName, name: "languageModelName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.validate(self.languageOptions, name: "languageOptions", parent: name, min: 1)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, max: 200)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, min: 1)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, max: 200)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, min: 1)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case contentRedaction = "ContentRedaction"
            case languageIdSettings = "LanguageIdSettings"
            case languageModelName = "LanguageModelName"
            case languageOptions = "LanguageOptions"
            case vocabularyFilterMethod = "VocabularyFilterMethod"
            case vocabularyFilterName = "VocabularyFilterName"
            case vocabularyName = "VocabularyName"
        }
    }

    public struct CallAnalyticsJobSummary: AWSDecodableShape {
        /// The name of the Call Analytics job. Job names are case sensitive and must be unique  within an Amazon Web Services account.
        public let callAnalyticsJobName: String?
        /// Provides the status of your Call Analytics job.         If the status is COMPLETED, the job is finished and you can find the results at the location specified in TranscriptFileUri (or RedactedTranscriptFileUri, if you requested transcript redaction). If the status is  FAILED, FailureReason provides details on why your transcription job failed.
        public let callAnalyticsJobStatus: CallAnalyticsJobStatus?
        /// The date and time the specified Call Analytics job finished processing. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:33:13.922000-07:00 represents a transcription job that started processing at 12:33 PM UTC-7 on May 4, 2022.
        public let completionTime: Date?
        /// The date and time the specified Call Analytics job request was made. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.761000-07:00 represents a transcription job that started processing at 12:32 PM UTC-7 on May 4, 2022.
        public let creationTime: Date?
        /// If CallAnalyticsJobStatus is FAILED,  FailureReason contains information about why the Call Analytics job  failed. See also: Common Errors.
        public let failureReason: String?
        /// The language code used to create your Call Analytics transcription.
        public let languageCode: LanguageCode?
        /// The date and time your Call Analytics job began processing. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.789000-07:00 represents a transcription job that started processing at 12:32 PM UTC-7 on May 4, 2022.
        public let startTime: Date?

        public init(callAnalyticsJobName: String? = nil, callAnalyticsJobStatus: CallAnalyticsJobStatus? = nil, completionTime: Date? = nil, creationTime: Date? = nil, failureReason: String? = nil, languageCode: LanguageCode? = nil, startTime: Date? = nil) {
            self.callAnalyticsJobName = callAnalyticsJobName
            self.callAnalyticsJobStatus = callAnalyticsJobStatus
            self.completionTime = completionTime
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.languageCode = languageCode
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case callAnalyticsJobName = "CallAnalyticsJobName"
            case callAnalyticsJobStatus = "CallAnalyticsJobStatus"
            case completionTime = "CompletionTime"
            case creationTime = "CreationTime"
            case failureReason = "FailureReason"
            case languageCode = "LanguageCode"
            case startTime = "StartTime"
        }
    }

    public struct CategoryProperties: AWSDecodableShape {
        /// The name of the Call Analytics category. Category names are case sensitive and must be  unique within an Amazon Web Services account.
        public let categoryName: String?
        /// The date and time the specified Call Analytics category was created. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.761000-07:00 represents 12:32 PM UTC-7  on May 4, 2022.
        public let createTime: Date?
        /// The date and time the specified Call Analytics category was last updated. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-05T12:45:32.691000-07:00 represents 12:45 PM UTC-7  on May 5, 2022.
        public let lastUpdateTime: Date?
        /// The rules used to define a Call Analytics category. Each category can have between 1 and 20  rules.
        public let rules: [Rule]?

        public init(categoryName: String? = nil, createTime: Date? = nil, lastUpdateTime: Date? = nil, rules: [Rule]? = nil) {
            self.categoryName = categoryName
            self.createTime = createTime
            self.lastUpdateTime = lastUpdateTime
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case categoryName = "CategoryName"
            case createTime = "CreateTime"
            case lastUpdateTime = "LastUpdateTime"
            case rules = "Rules"
        }
    }

    public struct ChannelDefinition: AWSEncodableShape & AWSDecodableShape {
        /// Specify the audio channel you want to define.
        public let channelId: Int?
        /// Specify the speaker you want to define. Omitting this parameter is equivalent to specifying both participants.
        public let participantRole: ParticipantRole?

        public init(channelId: Int? = nil, participantRole: ParticipantRole? = nil) {
            self.channelId = channelId
            self.participantRole = participantRole
        }

        public func validate(name: String) throws {
            try self.validate(self.channelId, name: "channelId", parent: name, max: 1)
            try self.validate(self.channelId, name: "channelId", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case channelId = "ChannelId"
            case participantRole = "ParticipantRole"
        }
    }

    public struct ContentRedaction: AWSEncodableShape & AWSDecodableShape {
        /// Specify which types of personally identifiable information (PII) you want to redact in your transcript. You can include as many types as you'd like, or you can select  ALL.
        public let piiEntityTypes: [PiiEntityType]?
        /// Specify if you want only a redacted transcript, or if you want a redacted and an unredacted transcript. When you choose redacted Amazon Transcribe creates only a redacted  transcript. When you choose redacted_and_unredacted Amazon Transcribe creates  a redacted and an unredacted transcript (as two separate files).
        public let redactionOutput: RedactionOutput
        /// Specify the category of information you want to redact; PII (personally  identifiable information) is the only valid value. You can use PiiEntityTypes to  choose which types of PII you want to redact.
        public let redactionType: RedactionType

        public init(piiEntityTypes: [PiiEntityType]? = nil, redactionOutput: RedactionOutput, redactionType: RedactionType) {
            self.piiEntityTypes = piiEntityTypes
            self.redactionOutput = redactionOutput
            self.redactionType = redactionType
        }

        public func validate(name: String) throws {
            try self.validate(self.piiEntityTypes, name: "piiEntityTypes", parent: name, max: 11)
        }

        private enum CodingKeys: String, CodingKey {
            case piiEntityTypes = "PiiEntityTypes"
            case redactionOutput = "RedactionOutput"
            case redactionType = "RedactionType"
        }
    }

    public struct CreateCallAnalyticsCategoryRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "categoryName", location: .uri("CategoryName"))
        ]

        /// A unique name, chosen by you, for your Call Analytics category. It's helpful to use a detailed naming system that will make sense to you in the future. For example, it's better to use  sentiment-positive-last30seconds for a category over a generic name like  test-category. Category names are case sensitive.
        public let categoryName: String
        /// Rules define a Call Analytics category. When creating a new Call Analytics category, you must  create between 1 and 20 rules for that category. For each rule, you specify a filter you want  applied to the attributes of a call. For example, you can choose a sentiment filter that detects if a customer's sentiment was positive during the last 30 seconds of the call.
        public let rules: [Rule]

        public init(categoryName: String, rules: [Rule]) {
            self.categoryName = categoryName
            self.rules = rules
        }

        public func validate(name: String) throws {
            try self.validate(self.categoryName, name: "categoryName", parent: name, max: 200)
            try self.validate(self.categoryName, name: "categoryName", parent: name, min: 1)
            try self.validate(self.categoryName, name: "categoryName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.rules.forEach {
                try $0.validate(name: "\(name).rules[]")
            }
            try self.validate(self.rules, name: "rules", parent: name, max: 20)
            try self.validate(self.rules, name: "rules", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rules"
        }
    }

    public struct CreateCallAnalyticsCategoryResponse: AWSDecodableShape {
        /// Provides you with the properties of your new category, including its associated rules.
        public let categoryProperties: CategoryProperties?

        public init(categoryProperties: CategoryProperties? = nil) {
            self.categoryProperties = categoryProperties
        }

        private enum CodingKeys: String, CodingKey {
            case categoryProperties = "CategoryProperties"
        }
    }

    public struct CreateLanguageModelRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "modelName", location: .uri("ModelName"))
        ]

        /// The Amazon Transcribe standard language model, or base model, used to create your custom language model. Amazon Transcribe offers two options for base models: Wideband and  Narrowband. If the audio you want to transcribe has a sample rate of 16,000 Hz or greater, choose  WideBand. To transcribe audio with a sample rate less than 16,000 Hz, choose NarrowBand.
        public let baseModelName: BaseModelName
        /// Contains the Amazon S3 location of the training data you want to use to create a new  custom language model, and permissions to access this location. When using InputDataConfig, you must include these sub-parameters: S3Uri, which is the Amazon S3 location of your training data, and  DataAccessRoleArn, which is the Amazon Resource Name (ARN) of the role that  has permission to access your specified Amazon S3 location. You can optionally include  TuningDataS3Uri, which is the Amazon S3 location of your tuning data. If  you specify different Amazon S3 locations for training and tuning data, the ARN you use  must have permissions to access both locations.
        public let inputDataConfig: InputDataConfig
        /// The language code that represents the language of your model. Each language model must contain terms in only one language, and the language you select for your model must match the  language of your training and tuning data. For a list of supported languages and their associated language codes, refer to the  Supported languages table. Note that U.S. English (en-US) is the only language   supported with Amazon Transcribe Medical. A custom language model can only be used to transcribe files in the same language as the  model. For example, if you create a language model using US English (en-US), you can only apply this model to files that contain English audio.
        public let languageCode: CLMLanguageCode
        /// A unique name, chosen by you, for your custom language model. This name is case sensitive, cannot contain spaces, and must be unique within an  Amazon Web Services account. If you try to create a new language model with the same name  as an existing language model, you get a ConflictException error.
        public let modelName: String
        /// Adds one or more custom tags, each in the form of a key:value pair, to a new custom language model at the time you create this new model. To learn more about using tags with Amazon Transcribe, refer to Tagging resources.
        public let tags: [Tag]?

        public init(baseModelName: BaseModelName, inputDataConfig: InputDataConfig, languageCode: CLMLanguageCode, modelName: String, tags: [Tag]? = nil) {
            self.baseModelName = baseModelName
            self.inputDataConfig = inputDataConfig
            self.languageCode = languageCode
            self.modelName = modelName
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.inputDataConfig.validate(name: "\(name).inputDataConfig")
            try self.validate(self.modelName, name: "modelName", parent: name, max: 200)
            try self.validate(self.modelName, name: "modelName", parent: name, min: 1)
            try self.validate(self.modelName, name: "modelName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case baseModelName = "BaseModelName"
            case inputDataConfig = "InputDataConfig"
            case languageCode = "LanguageCode"
            case tags = "Tags"
        }
    }

    public struct CreateLanguageModelResponse: AWSDecodableShape {
        /// The Amazon Transcribe standard language model, or base model, you specified when creating  your custom language model.
        public let baseModelName: BaseModelName?
        /// Lists your data access role ARN (Amazon Resource Name) and the Amazon S3  locations you provided for your training (S3Uri) and tuning  (TuningDataS3Uri) data.
        public let inputDataConfig: InputDataConfig?
        /// The language code you selected for your custom language model.
        public let languageCode: CLMLanguageCode?
        /// The name of your custom language model.
        public let modelName: String?
        /// The status of your custom language model. When the status displays as  COMPLETED, your model is ready to use.
        public let modelStatus: ModelStatus?

        public init(baseModelName: BaseModelName? = nil, inputDataConfig: InputDataConfig? = nil, languageCode: CLMLanguageCode? = nil, modelName: String? = nil, modelStatus: ModelStatus? = nil) {
            self.baseModelName = baseModelName
            self.inputDataConfig = inputDataConfig
            self.languageCode = languageCode
            self.modelName = modelName
            self.modelStatus = modelStatus
        }

        private enum CodingKeys: String, CodingKey {
            case baseModelName = "BaseModelName"
            case inputDataConfig = "InputDataConfig"
            case languageCode = "LanguageCode"
            case modelName = "ModelName"
            case modelStatus = "ModelStatus"
        }
    }

    public struct CreateMedicalVocabularyRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "vocabularyName", location: .uri("VocabularyName"))
        ]

        /// The language code that represents the language of the entries in your custom vocabulary. US English (en-US) is the only language supported with  Amazon Transcribe Medical.
        public let languageCode: LanguageCode
        /// Adds one or more custom tags, each in the form of a key:value pair, to a new medical  vocabulary at the time you create this new vocabulary. To learn more about using tags with Amazon Transcribe, refer to Tagging resources.
        public let tags: [Tag]?
        /// The Amazon S3 location (URI) of the text file that contains your custom medical  vocabulary. The URI must be in the same Amazon Web Services Region as the resource you're calling.  Here's an example URI path:  s3://DOC-EXAMPLE-BUCKET/my-vocab-file.txt
        public let vocabularyFileUri: String
        /// A unique name, chosen by you, for your new custom medical vocabulary.         This name is case sensitive, cannot contain spaces, and must be unique within an  Amazon Web Services account. If you try to create a new medical vocabulary with the same name as an existing medical vocabulary, you get a ConflictException error.
        public let vocabularyName: String

        public init(languageCode: LanguageCode, tags: [Tag]? = nil, vocabularyFileUri: String, vocabularyName: String) {
            self.languageCode = languageCode
            self.tags = tags
            self.vocabularyFileUri = vocabularyFileUri
            self.vocabularyName = vocabularyName
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
            try self.validate(self.vocabularyFileUri, name: "vocabularyFileUri", parent: name, max: 2000)
            try self.validate(self.vocabularyFileUri, name: "vocabularyFileUri", parent: name, min: 1)
            try self.validate(self.vocabularyFileUri, name: "vocabularyFileUri", parent: name, pattern: "^(s3://|http(s*)://).+$")
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, max: 200)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, min: 1)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case tags = "Tags"
            case vocabularyFileUri = "VocabularyFileUri"
        }
    }

    public struct CreateMedicalVocabularyResponse: AWSDecodableShape {
        /// If VocabularyState is FAILED,  FailureReason contains information about why the medical transcription job request failed. See also: Common Errors.
        public let failureReason: String?
        /// The language code you selected for your medical vocabulary. US English  (en-US) is the only language supported with Amazon Transcribe Medical.
        public let languageCode: LanguageCode?
        /// The date and time you created your custom medical vocabulary. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.761000-07:00 represents 12:32 PM UTC-7  on May 4, 2022.
        public let lastModifiedTime: Date?
        /// The name you chose for your custom medical vocabulary.
        public let vocabularyName: String?
        /// The processing state of your custom medical vocabulary. If the state is  READY, you can use the vocabulary in a   StartMedicalTranscriptionJob request.
        public let vocabularyState: VocabularyState?

        public init(failureReason: String? = nil, languageCode: LanguageCode? = nil, lastModifiedTime: Date? = nil, vocabularyName: String? = nil, vocabularyState: VocabularyState? = nil) {
            self.failureReason = failureReason
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.vocabularyName = vocabularyName
            self.vocabularyState = vocabularyState
        }

        private enum CodingKeys: String, CodingKey {
            case failureReason = "FailureReason"
            case languageCode = "LanguageCode"
            case lastModifiedTime = "LastModifiedTime"
            case vocabularyName = "VocabularyName"
            case vocabularyState = "VocabularyState"
        }
    }

    public struct CreateVocabularyFilterRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "vocabularyFilterName", location: .uri("VocabularyFilterName"))
        ]

        /// The language code that represents the language of the entries in your vocabulary  filter. Each vocabulary filter must contain terms in only one language. A vocabulary filter can only be used to transcribe files in the same language as the  filter. For example, if you create a vocabulary filter using US English (en-US), you can only apply this filter to files that contain English audio. For a list of supported languages and their associated language codes, refer to the  Supported languages table.
        public let languageCode: LanguageCode
        /// Adds one or more custom tags, each in the form of a key:value pair, to a new custom  vocabulary filter at the time you create this new filter. To learn more about using tags with Amazon Transcribe, refer to Tagging resources.
        public let tags: [Tag]?
        /// The Amazon S3 location of the text file that contains your custom vocabulary filter  terms. The URI must be located in the same Amazon Web Services Region as the resource you're  calling. Here's an example URI path: s3://DOC-EXAMPLE-BUCKET/my-vocab-filter-file.txt  Note that if you include VocabularyFilterFileUri in your request, you  cannot use Words; you must choose one or the other.
        public let vocabularyFilterFileUri: String?
        /// A unique name, chosen by you, for your new custom vocabulary filter.         This name is case sensitive, cannot contain spaces, and must be unique within an  Amazon Web Services account. If you try to create a new vocabulary filter with the same name as an existing vocabulary filter, you get a ConflictException error.
        public let vocabularyFilterName: String
        /// Use this parameter if you want to create your vocabulary filter by including all desired terms,  as comma-separated values, within your request. The other option for creating your vocabulary  filter is to save your entries in a text file and upload them to an Amazon S3 bucket, then specify the location of your file using the VocabularyFilterFileUri  parameter. Note that if you include Words in your request, you cannot use VocabularyFilterFileUri; you must choose one or the other.         Each language has a character set that contains all allowed characters for that specific  language. If you use unsupported characters, your vocabulary filter request fails. Refer to  Character Sets for  Custom Vocabularies to get the character set for your language.
        public let words: [String]?

        public init(languageCode: LanguageCode, tags: [Tag]? = nil, vocabularyFilterFileUri: String? = nil, vocabularyFilterName: String, words: [String]? = nil) {
            self.languageCode = languageCode
            self.tags = tags
            self.vocabularyFilterFileUri = vocabularyFilterFileUri
            self.vocabularyFilterName = vocabularyFilterName
            self.words = words
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
            try self.validate(self.vocabularyFilterFileUri, name: "vocabularyFilterFileUri", parent: name, max: 2000)
            try self.validate(self.vocabularyFilterFileUri, name: "vocabularyFilterFileUri", parent: name, min: 1)
            try self.validate(self.vocabularyFilterFileUri, name: "vocabularyFilterFileUri", parent: name, pattern: "^(s3://|http(s*)://).+$")
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, max: 200)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, min: 1)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.words?.forEach {
                try validate($0, name: "words[]", parent: name, max: 256)
                try validate($0, name: "words[]", parent: name, min: 1)
            }
            try self.validate(self.words, name: "words", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case tags = "Tags"
            case vocabularyFilterFileUri = "VocabularyFilterFileUri"
            case words = "Words"
        }
    }

    public struct CreateVocabularyFilterResponse: AWSDecodableShape {
        /// The language code you selected for your vocabulary filter.
        public let languageCode: LanguageCode?
        /// The date and time you created your vocabulary filter. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.761000-07:00 represents 12:32 PM UTC-7  on May 4, 2022.
        public let lastModifiedTime: Date?
        /// The name you chose for your custom vocabulary filter.
        public let vocabularyFilterName: String?

        public init(languageCode: LanguageCode? = nil, lastModifiedTime: Date? = nil, vocabularyFilterName: String? = nil) {
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.vocabularyFilterName = vocabularyFilterName
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case lastModifiedTime = "LastModifiedTime"
            case vocabularyFilterName = "VocabularyFilterName"
        }
    }

    public struct CreateVocabularyRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "vocabularyName", location: .uri("VocabularyName"))
        ]

        /// The language code that represents the language of the entries in your custom vocabulary. Each vocabulary must contain terms in only one language. A custom vocabulary can only be used to transcribe files in the same language as the  vocabulary. For example, if you create a vocabulary using US English (en-US),  you can only apply this vocabulary to files that contain English audio. For a list of supported languages and their associated language codes, refer to the  Supported languages table.
        public let languageCode: LanguageCode
        /// Use this parameter if you want to create your vocabulary by including all desired terms, as comma-separated values, within your request. The other option for creating your vocabulary is to save your entries in a text file and upload them to an Amazon S3 bucket, then specify  the location of your file using the VocabularyFileUri parameter. Note that if you include Phrases in your request, you cannot use VocabularyFileUri; you must choose one or the other.         Each language has a character set that contains all allowed characters for that specific  language. If you use unsupported characters, your vocabulary filter request fails. Refer to  Character Sets for  Custom Vocabularies to get the character set for your language.
        public let phrases: [String]?
        /// Adds one or more custom tags, each in the form of a key:value pair, to a new custom  vocabulary at the time you create this new vocabulary. To learn more about using tags with Amazon Transcribe, refer to Tagging resources.
        public let tags: [Tag]?
        /// The Amazon S3 location of the text file that contains your custom vocabulary. The URI must be located in the same Amazon Web Services Region as the resource you're  calling. Here's an example URI path: s3://DOC-EXAMPLE-BUCKET/my-vocab-file.txt  Note that if you include VocabularyFileUri in your request, you  cannot use the Phrases flag; you must choose one or the other.
        public let vocabularyFileUri: String?
        /// A unique name, chosen by you, for your new custom vocabulary.         This name is case sensitive, cannot contain spaces, and must be unique within an  Amazon Web Services account. If you try to create a new vocabulary with the same name as an existing vocabulary, you get a ConflictException error.
        public let vocabularyName: String

        public init(languageCode: LanguageCode, phrases: [String]? = nil, tags: [Tag]? = nil, vocabularyFileUri: String? = nil, vocabularyName: String) {
            self.languageCode = languageCode
            self.phrases = phrases
            self.tags = tags
            self.vocabularyFileUri = vocabularyFileUri
            self.vocabularyName = vocabularyName
        }

        public func validate(name: String) throws {
            try self.phrases?.forEach {
                try validate($0, name: "phrases[]", parent: name, max: 256)
                try validate($0, name: "phrases[]", parent: name, pattern: "^.+$")
            }
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
            try self.validate(self.vocabularyFileUri, name: "vocabularyFileUri", parent: name, max: 2000)
            try self.validate(self.vocabularyFileUri, name: "vocabularyFileUri", parent: name, min: 1)
            try self.validate(self.vocabularyFileUri, name: "vocabularyFileUri", parent: name, pattern: "^(s3://|http(s*)://).+$")
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, max: 200)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, min: 1)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case phrases = "Phrases"
            case tags = "Tags"
            case vocabularyFileUri = "VocabularyFileUri"
        }
    }

    public struct CreateVocabularyResponse: AWSDecodableShape {
        /// If VocabularyState is FAILED, FailureReason contains information about why the vocabulary request failed. See also: Common Errors.
        public let failureReason: String?
        /// The language code you selected for your custom vocabulary.
        public let languageCode: LanguageCode?
        /// The date and time you created your custom vocabulary. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.761000-07:00 represents 12:32 PM UTC-7  on May 4, 2022.
        public let lastModifiedTime: Date?
        /// The name you chose for your custom vocabulary.
        public let vocabularyName: String?
        /// The processing state of your custom vocabulary. If the state is READY, you can use the vocabulary in a StartTranscriptionJob request.
        public let vocabularyState: VocabularyState?

        public init(failureReason: String? = nil, languageCode: LanguageCode? = nil, lastModifiedTime: Date? = nil, vocabularyName: String? = nil, vocabularyState: VocabularyState? = nil) {
            self.failureReason = failureReason
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.vocabularyName = vocabularyName
            self.vocabularyState = vocabularyState
        }

        private enum CodingKeys: String, CodingKey {
            case failureReason = "FailureReason"
            case languageCode = "LanguageCode"
            case lastModifiedTime = "LastModifiedTime"
            case vocabularyName = "VocabularyName"
            case vocabularyState = "VocabularyState"
        }
    }

    public struct DeleteCallAnalyticsCategoryRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "categoryName", location: .uri("CategoryName"))
        ]

        /// The name of the Call Analytics category you want to delete. Category names are case sensitive.
        public let categoryName: String

        public init(categoryName: String) {
            self.categoryName = categoryName
        }

        public func validate(name: String) throws {
            try self.validate(self.categoryName, name: "categoryName", parent: name, max: 200)
            try self.validate(self.categoryName, name: "categoryName", parent: name, min: 1)
            try self.validate(self.categoryName, name: "categoryName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteCallAnalyticsCategoryResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteCallAnalyticsJobRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "callAnalyticsJobName", location: .uri("CallAnalyticsJobName"))
        ]

        /// The name of the Call Analytics job you want to delete. Job names are case sensitive.
        public let callAnalyticsJobName: String

        public init(callAnalyticsJobName: String) {
            self.callAnalyticsJobName = callAnalyticsJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.callAnalyticsJobName, name: "callAnalyticsJobName", parent: name, max: 200)
            try self.validate(self.callAnalyticsJobName, name: "callAnalyticsJobName", parent: name, min: 1)
            try self.validate(self.callAnalyticsJobName, name: "callAnalyticsJobName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteCallAnalyticsJobResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteLanguageModelRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "modelName", location: .uri("ModelName"))
        ]

        /// The name of the custom language model you want to delete. Model names are  case sensitive.
        public let modelName: String

        public init(modelName: String) {
            self.modelName = modelName
        }

        public func validate(name: String) throws {
            try self.validate(self.modelName, name: "modelName", parent: name, max: 200)
            try self.validate(self.modelName, name: "modelName", parent: name, min: 1)
            try self.validate(self.modelName, name: "modelName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteMedicalTranscriptionJobRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "medicalTranscriptionJobName", location: .uri("MedicalTranscriptionJobName"))
        ]

        /// The name of the medical transcription job you want to delete. Job names are case  sensitive.
        public let medicalTranscriptionJobName: String

        public init(medicalTranscriptionJobName: String) {
            self.medicalTranscriptionJobName = medicalTranscriptionJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.medicalTranscriptionJobName, name: "medicalTranscriptionJobName", parent: name, max: 200)
            try self.validate(self.medicalTranscriptionJobName, name: "medicalTranscriptionJobName", parent: name, min: 1)
            try self.validate(self.medicalTranscriptionJobName, name: "medicalTranscriptionJobName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteMedicalVocabularyRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "vocabularyName", location: .uri("VocabularyName"))
        ]

        /// The name of the custom medical vocabulary you want to delete. Vocabulary names are case sensitive.
        public let vocabularyName: String

        public init(vocabularyName: String) {
            self.vocabularyName = vocabularyName
        }

        public func validate(name: String) throws {
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, max: 200)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, min: 1)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteTranscriptionJobRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "transcriptionJobName", location: .uri("TranscriptionJobName"))
        ]

        /// The name of the transcription job you want to delete. Job names are case sensitive.
        public let transcriptionJobName: String

        public init(transcriptionJobName: String) {
            self.transcriptionJobName = transcriptionJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.transcriptionJobName, name: "transcriptionJobName", parent: name, max: 200)
            try self.validate(self.transcriptionJobName, name: "transcriptionJobName", parent: name, min: 1)
            try self.validate(self.transcriptionJobName, name: "transcriptionJobName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteVocabularyFilterRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "vocabularyFilterName", location: .uri("VocabularyFilterName"))
        ]

        /// The name of the custom vocabulary filter you want to delete. Vocabulary filter names  are case sensitive.
        public let vocabularyFilterName: String

        public init(vocabularyFilterName: String) {
            self.vocabularyFilterName = vocabularyFilterName
        }

        public func validate(name: String) throws {
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, max: 200)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, min: 1)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteVocabularyRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "vocabularyName", location: .uri("VocabularyName"))
        ]

        /// The name of the custom vocabulary you want to delete. Vocabulary names are case sensitive.
        public let vocabularyName: String

        public init(vocabularyName: String) {
            self.vocabularyName = vocabularyName
        }

        public func validate(name: String) throws {
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, max: 200)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, min: 1)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeLanguageModelRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "modelName", location: .uri("ModelName"))
        ]

        /// The name of the custom language model you want information about. Model names are case sensitive.
        public let modelName: String

        public init(modelName: String) {
            self.modelName = modelName
        }

        public func validate(name: String) throws {
            try self.validate(self.modelName, name: "modelName", parent: name, max: 200)
            try self.validate(self.modelName, name: "modelName", parent: name, min: 1)
            try self.validate(self.modelName, name: "modelName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeLanguageModelResponse: AWSDecodableShape {
        /// Provides information about the specified custom language model. This parameter also shows if the base language model you used to create your custom language model has been updated. If Amazon Transcribe has updated the base model, you can  create a new custom language model using the updated base model. If you tried to create a new custom language model and the request wasn't successful, you can use this DescribeLanguageModel to help identify the reason for this  failure.
        public let languageModel: LanguageModel?

        public init(languageModel: LanguageModel? = nil) {
            self.languageModel = languageModel
        }

        private enum CodingKeys: String, CodingKey {
            case languageModel = "LanguageModel"
        }
    }

    public struct GetCallAnalyticsCategoryRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "categoryName", location: .uri("CategoryName"))
        ]

        /// The name of the Call Analytics category you want information about. Category names are  case sensitive.
        public let categoryName: String

        public init(categoryName: String) {
            self.categoryName = categoryName
        }

        public func validate(name: String) throws {
            try self.validate(self.categoryName, name: "categoryName", parent: name, max: 200)
            try self.validate(self.categoryName, name: "categoryName", parent: name, min: 1)
            try self.validate(self.categoryName, name: "categoryName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetCallAnalyticsCategoryResponse: AWSDecodableShape {
        /// Provides you with the properties of the Call Analytics category you specified in your GetCallAnalyticsCategory request.
        public let categoryProperties: CategoryProperties?

        public init(categoryProperties: CategoryProperties? = nil) {
            self.categoryProperties = categoryProperties
        }

        private enum CodingKeys: String, CodingKey {
            case categoryProperties = "CategoryProperties"
        }
    }

    public struct GetCallAnalyticsJobRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "callAnalyticsJobName", location: .uri("CallAnalyticsJobName"))
        ]

        /// The name of the Call Analytics job you want information about. Job names are case  sensitive.
        public let callAnalyticsJobName: String

        public init(callAnalyticsJobName: String) {
            self.callAnalyticsJobName = callAnalyticsJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.callAnalyticsJobName, name: "callAnalyticsJobName", parent: name, max: 200)
            try self.validate(self.callAnalyticsJobName, name: "callAnalyticsJobName", parent: name, min: 1)
            try self.validate(self.callAnalyticsJobName, name: "callAnalyticsJobName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetCallAnalyticsJobResponse: AWSDecodableShape {
        /// Provides detailed information about the specified Call Analytics job, including job status and, if applicable, failure reason.
        public let callAnalyticsJob: CallAnalyticsJob?

        public init(callAnalyticsJob: CallAnalyticsJob? = nil) {
            self.callAnalyticsJob = callAnalyticsJob
        }

        private enum CodingKeys: String, CodingKey {
            case callAnalyticsJob = "CallAnalyticsJob"
        }
    }

    public struct GetMedicalTranscriptionJobRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "medicalTranscriptionJobName", location: .uri("MedicalTranscriptionJobName"))
        ]

        /// The name of the medical transcription job you want information about. Job names are case sensitive.
        public let medicalTranscriptionJobName: String

        public init(medicalTranscriptionJobName: String) {
            self.medicalTranscriptionJobName = medicalTranscriptionJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.medicalTranscriptionJobName, name: "medicalTranscriptionJobName", parent: name, max: 200)
            try self.validate(self.medicalTranscriptionJobName, name: "medicalTranscriptionJobName", parent: name, min: 1)
            try self.validate(self.medicalTranscriptionJobName, name: "medicalTranscriptionJobName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetMedicalTranscriptionJobResponse: AWSDecodableShape {
        /// Provides detailed information about the specified medical transcription job, including job status and, if applicable, failure reason.
        public let medicalTranscriptionJob: MedicalTranscriptionJob?

        public init(medicalTranscriptionJob: MedicalTranscriptionJob? = nil) {
            self.medicalTranscriptionJob = medicalTranscriptionJob
        }

        private enum CodingKeys: String, CodingKey {
            case medicalTranscriptionJob = "MedicalTranscriptionJob"
        }
    }

    public struct GetMedicalVocabularyRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "vocabularyName", location: .uri("VocabularyName"))
        ]

        /// The name of the custom medical vocabulary you want information about. Vocabulary names are case sensitive.
        public let vocabularyName: String

        public init(vocabularyName: String) {
            self.vocabularyName = vocabularyName
        }

        public func validate(name: String) throws {
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, max: 200)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, min: 1)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetMedicalVocabularyResponse: AWSDecodableShape {
        /// The S3 location where the specified medical vocabulary is stored; use this URI to view or  download the vocabulary.
        public let downloadUri: String?
        /// If VocabularyState is FAILED,  FailureReason contains information about why the medical vocabulary  request failed. See also: Common Errors.
        public let failureReason: String?
        /// The language code you selected for your medical vocabulary. US English  (en-US) is the only language supported with Amazon Transcribe Medical.
        public let languageCode: LanguageCode?
        /// The date and time the specified custom medical vocabulary was last modified. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.761000-07:00 represents 12:32 PM UTC-7  on May 4, 2022.
        public let lastModifiedTime: Date?
        /// The name of the custom medical vocabulary you requested information about.
        public let vocabularyName: String?
        /// The processing state of your custom medical vocabulary. If the state is  READY, you can use the vocabulary in a   StartMedicalTranscriptionJob request.
        public let vocabularyState: VocabularyState?

        public init(downloadUri: String? = nil, failureReason: String? = nil, languageCode: LanguageCode? = nil, lastModifiedTime: Date? = nil, vocabularyName: String? = nil, vocabularyState: VocabularyState? = nil) {
            self.downloadUri = downloadUri
            self.failureReason = failureReason
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.vocabularyName = vocabularyName
            self.vocabularyState = vocabularyState
        }

        private enum CodingKeys: String, CodingKey {
            case downloadUri = "DownloadUri"
            case failureReason = "FailureReason"
            case languageCode = "LanguageCode"
            case lastModifiedTime = "LastModifiedTime"
            case vocabularyName = "VocabularyName"
            case vocabularyState = "VocabularyState"
        }
    }

    public struct GetTranscriptionJobRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "transcriptionJobName", location: .uri("TranscriptionJobName"))
        ]

        /// The name of the transcription job you want information about. Job names are case sensitive.
        public let transcriptionJobName: String

        public init(transcriptionJobName: String) {
            self.transcriptionJobName = transcriptionJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.transcriptionJobName, name: "transcriptionJobName", parent: name, max: 200)
            try self.validate(self.transcriptionJobName, name: "transcriptionJobName", parent: name, min: 1)
            try self.validate(self.transcriptionJobName, name: "transcriptionJobName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetTranscriptionJobResponse: AWSDecodableShape {
        /// Provides detailed information about the specified transcription job, including job status and, if applicable, failure reason.
        public let transcriptionJob: TranscriptionJob?

        public init(transcriptionJob: TranscriptionJob? = nil) {
            self.transcriptionJob = transcriptionJob
        }

        private enum CodingKeys: String, CodingKey {
            case transcriptionJob = "TranscriptionJob"
        }
    }

    public struct GetVocabularyFilterRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "vocabularyFilterName", location: .uri("VocabularyFilterName"))
        ]

        /// The name of the custom vocabulary filter you want information about. Vocabulary filter  names are case sensitive.
        public let vocabularyFilterName: String

        public init(vocabularyFilterName: String) {
            self.vocabularyFilterName = vocabularyFilterName
        }

        public func validate(name: String) throws {
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, max: 200)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, min: 1)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetVocabularyFilterResponse: AWSDecodableShape {
        /// The Amazon S3 location where the vocabulary filter is stored; use this URI to view or  download the vocabulary filter.
        public let downloadUri: String?
        /// The language code you selected for your vocabulary filter.
        public let languageCode: LanguageCode?
        /// The date and time the specified vocabulary filter was last modified. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.761000-07:00 represents 12:32 PM UTC-7  on May 4, 2022.
        public let lastModifiedTime: Date?
        /// The name of the custom vocabulary filter you requested information about.
        public let vocabularyFilterName: String?

        public init(downloadUri: String? = nil, languageCode: LanguageCode? = nil, lastModifiedTime: Date? = nil, vocabularyFilterName: String? = nil) {
            self.downloadUri = downloadUri
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.vocabularyFilterName = vocabularyFilterName
        }

        private enum CodingKeys: String, CodingKey {
            case downloadUri = "DownloadUri"
            case languageCode = "LanguageCode"
            case lastModifiedTime = "LastModifiedTime"
            case vocabularyFilterName = "VocabularyFilterName"
        }
    }

    public struct GetVocabularyRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "vocabularyName", location: .uri("VocabularyName"))
        ]

        /// The name of the custom vocabulary you want information about. Vocabulary names are case sensitive.
        public let vocabularyName: String

        public init(vocabularyName: String) {
            self.vocabularyName = vocabularyName
        }

        public func validate(name: String) throws {
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, max: 200)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, min: 1)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetVocabularyResponse: AWSDecodableShape {
        /// The S3 location where the vocabulary is stored; use this URI to view or download the  vocabulary.
        public let downloadUri: String?
        /// If VocabularyState is FAILED,  FailureReason contains information about why the vocabulary request failed. See also: Common Errors.
        public let failureReason: String?
        /// The language code you selected for your custom vocabulary.
        public let languageCode: LanguageCode?
        /// The date and time the specified vocabulary was last modified. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.761000-07:00 represents 12:32 PM UTC-7  on May 4, 2022.
        public let lastModifiedTime: Date?
        /// The name of the custom vocabulary you requested information about.
        public let vocabularyName: String?
        /// The processing state of your custom vocabulary. If the state is READY, you can use the vocabulary in a StartTranscriptionJob request.
        public let vocabularyState: VocabularyState?

        public init(downloadUri: String? = nil, failureReason: String? = nil, languageCode: LanguageCode? = nil, lastModifiedTime: Date? = nil, vocabularyName: String? = nil, vocabularyState: VocabularyState? = nil) {
            self.downloadUri = downloadUri
            self.failureReason = failureReason
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.vocabularyName = vocabularyName
            self.vocabularyState = vocabularyState
        }

        private enum CodingKeys: String, CodingKey {
            case downloadUri = "DownloadUri"
            case failureReason = "FailureReason"
            case languageCode = "LanguageCode"
            case lastModifiedTime = "LastModifiedTime"
            case vocabularyName = "VocabularyName"
            case vocabularyState = "VocabularyState"
        }
    }

    public struct InputDataConfig: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of an IAM role that has permissions to access the Amazon S3 bucket that contains your input files. If the role you specify doesn’t  have the appropriate permissions to access the specified Amazon S3 location, your request fails.         IAM role ARNs have the format arn:partition:iam::account:role/role-name-with-path. For example: arn:aws:iam::111122223333:role/Admin. For more information, see IAM ARNs.
        public let dataAccessRoleArn: String
        /// The Amazon S3 location (URI) of the text files you want to use to train your custom language model. Here's an example URI path:  s3://DOC-EXAMPLE-BUCKET/my-model-training-data/
        public let s3Uri: String
        /// The Amazon S3 location (URI) of the text files you want to use to tune your custom language model. Here's an example URI path:  s3://DOC-EXAMPLE-BUCKET/my-model-tuning-data/
        public let tuningDataS3Uri: String?

        public init(dataAccessRoleArn: String, s3Uri: String, tuningDataS3Uri: String? = nil) {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.s3Uri = s3Uri
            self.tuningDataS3Uri = tuningDataS3Uri
        }

        public func validate(name: String) throws {
            try self.validate(self.dataAccessRoleArn, name: "dataAccessRoleArn", parent: name, max: 2048)
            try self.validate(self.dataAccessRoleArn, name: "dataAccessRoleArn", parent: name, min: 20)
            try self.validate(self.dataAccessRoleArn, name: "dataAccessRoleArn", parent: name, pattern: "^arn:(aws|aws-cn|aws-us-gov|aws-iso-{0,1}[a-z]{0,1}):iam::[0-9]{0,63}:role/[A-Za-z0-9:_/+=,@.-]{0,1024}$")
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, max: 2000)
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, min: 1)
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, pattern: "^(s3://|http(s*)://).+$")
            try self.validate(self.tuningDataS3Uri, name: "tuningDataS3Uri", parent: name, max: 2000)
            try self.validate(self.tuningDataS3Uri, name: "tuningDataS3Uri", parent: name, min: 1)
            try self.validate(self.tuningDataS3Uri, name: "tuningDataS3Uri", parent: name, pattern: "^(s3://|http(s*)://).+$")
        }

        private enum CodingKeys: String, CodingKey {
            case dataAccessRoleArn = "DataAccessRoleArn"
            case s3Uri = "S3Uri"
            case tuningDataS3Uri = "TuningDataS3Uri"
        }
    }

    public struct InterruptionFilter: AWSEncodableShape & AWSDecodableShape {
        /// Allows you to specify a time range (in milliseconds) in your audio, during which you want to search for an interruption. See  for more  detail.
        public let absoluteTimeRange: AbsoluteTimeRange?
        /// Set to TRUE to flag speech that does not contain interruptions. Set to  FALSE to flag speech that contains interruptions.
        public let negate: Bool?
        /// Specify the interrupter you want to flag. Omitting this parameter is equivalent to specifying  both participants.
        public let participantRole: ParticipantRole?
        /// Allows you to specify a time range (in percentage) in your media file, during which you want to search for an interruption. See  for more  detail.
        public let relativeTimeRange: RelativeTimeRange?
        /// Specify the duration of the interruptions in milliseconds. For example, you can flag speech that  contains more than 10000 milliseconds of interruptions.
        public let threshold: Int64?

        public init(absoluteTimeRange: AbsoluteTimeRange? = nil, negate: Bool? = nil, participantRole: ParticipantRole? = nil, relativeTimeRange: RelativeTimeRange? = nil, threshold: Int64? = nil) {
            self.absoluteTimeRange = absoluteTimeRange
            self.negate = negate
            self.participantRole = participantRole
            self.relativeTimeRange = relativeTimeRange
            self.threshold = threshold
        }

        public func validate(name: String) throws {
            try self.absoluteTimeRange?.validate(name: "\(name).absoluteTimeRange")
            try self.relativeTimeRange?.validate(name: "\(name).relativeTimeRange")
            try self.validate(self.threshold, name: "threshold", parent: name, max: 14_400_000)
            try self.validate(self.threshold, name: "threshold", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case absoluteTimeRange = "AbsoluteTimeRange"
            case negate = "Negate"
            case participantRole = "ParticipantRole"
            case relativeTimeRange = "RelativeTimeRange"
            case threshold = "Threshold"
        }
    }

    public struct JobExecutionSettings: AWSEncodableShape & AWSDecodableShape {
        /// Allows you to enable job queuing when your concurrent request limit is exceeded. When  AllowDeferredExecution is set to true, transcription job requests are placed in a queue until the number of jobs falls below the concurrent request limit. If AllowDeferredExecution is set to false and the number of transcription job requests exceed the concurrent request limit, you get a LimitExceededException  error. Note that job queuing is enabled by default for Call Analytics jobs. If you include AllowDeferredExecution in your request, you must also include DataAccessRoleArn.
        public let allowDeferredExecution: Bool?
        /// The Amazon Resource Name (ARN) of an IAM role that has permissions to access the Amazon S3 bucket that contains your input files. If the role you specify doesn’t  have the appropriate permissions to access the specified Amazon S3 location, your request  fails.         IAM role ARNs have the format arn:partition:iam::account:role/role-name-with-path. For example: arn:aws:iam::111122223333:role/Admin. For more information, see  IAM ARNs. Note that if you include DataAccessRoleArn in your request, you must also include AllowDeferredExecution.
        public let dataAccessRoleArn: String?

        public init(allowDeferredExecution: Bool? = nil, dataAccessRoleArn: String? = nil) {
            self.allowDeferredExecution = allowDeferredExecution
            self.dataAccessRoleArn = dataAccessRoleArn
        }

        public func validate(name: String) throws {
            try self.validate(self.dataAccessRoleArn, name: "dataAccessRoleArn", parent: name, max: 2048)
            try self.validate(self.dataAccessRoleArn, name: "dataAccessRoleArn", parent: name, min: 20)
            try self.validate(self.dataAccessRoleArn, name: "dataAccessRoleArn", parent: name, pattern: "^arn:(aws|aws-cn|aws-us-gov|aws-iso-{0,1}[a-z]{0,1}):iam::[0-9]{0,63}:role/[A-Za-z0-9:_/+=,@.-]{0,1024}$")
        }

        private enum CodingKeys: String, CodingKey {
            case allowDeferredExecution = "AllowDeferredExecution"
            case dataAccessRoleArn = "DataAccessRoleArn"
        }
    }

    public struct LanguageCodeItem: AWSDecodableShape {
        /// Provides the total time, in seconds, each identified language is spoken in your media.
        public let durationInSeconds: Float?
        /// Provides the language code for each language identified in your media.
        public let languageCode: LanguageCode?

        public init(durationInSeconds: Float? = nil, languageCode: LanguageCode? = nil) {
            self.durationInSeconds = durationInSeconds
            self.languageCode = languageCode
        }

        private enum CodingKeys: String, CodingKey {
            case durationInSeconds = "DurationInSeconds"
            case languageCode = "LanguageCode"
        }
    }

    public struct LanguageIdSettings: AWSEncodableShape & AWSDecodableShape {
        /// The name of the custom language model you want to use when processing your  transcription job. Note that language model names are case sensitive. The language of the specified language model must match the language code you specify in your transcription request. If the languages don't match, the language model isn't applied.  There are no errors or warnings associated with a language mismatch.
        public let languageModelName: String?
        /// The name of the custom vocabulary filter you want to use when processing your  transcription job. Vocabulary filter names are case sensitive. The language of the specified vocabulary filter must match the language code you specify in your transcription request. If the languages don't match, the vocabulary filter isn't applied.  There are no errors or warnings associated with a language mismatch. Note that if you include VocabularyFilterName in your request, you must  also include VocabularyFilterMethod.
        public let vocabularyFilterName: String?
        /// The name of the custom vocabulary you want to use when processing your transcription job.  Vocabulary names are case sensitive. The language of the specified vocabulary must match the language code you specify in your transcription request. If the languages don't match, the vocabulary isn't applied. There are no errors or warnings associated with a language mismatch.
        public let vocabularyName: String?

        public init(languageModelName: String? = nil, vocabularyFilterName: String? = nil, vocabularyName: String? = nil) {
            self.languageModelName = languageModelName
            self.vocabularyFilterName = vocabularyFilterName
            self.vocabularyName = vocabularyName
        }

        public func validate(name: String) throws {
            try self.validate(self.languageModelName, name: "languageModelName", parent: name, max: 200)
            try self.validate(self.languageModelName, name: "languageModelName", parent: name, min: 1)
            try self.validate(self.languageModelName, name: "languageModelName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, max: 200)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, min: 1)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, max: 200)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, min: 1)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case languageModelName = "LanguageModelName"
            case vocabularyFilterName = "VocabularyFilterName"
            case vocabularyName = "VocabularyName"
        }
    }

    public struct LanguageModel: AWSDecodableShape {
        /// The Amazon Transcribe standard language model, or base model, used to create your custom language model.
        public let baseModelName: BaseModelName?
        /// The date and time the specified custom language model was created. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.761000-07:00 represents 12:32 PM UTC-7  on May 4, 2022.
        public let createTime: Date?
        /// If ModelStatus is FAILED, FailureReason contains information about why the custom language model request failed. See also:  Common Errors.
        public let failureReason: String?
        /// The Amazon S3 location of the input files used to train and tune your custom language  model, in addition to the data access role ARN (Amazon Resource Name) that has permissions to  access these data.
        public let inputDataConfig: InputDataConfig?
        /// The language code used to create your custom language model. Each language model must contain terms in only one language, and the language you select for your model must match  the language of your training and tuning data. For a list of supported languages and their associated language codes, refer to the  Supported languages table. Note that U.S. English (en-US) is the only language   supported with Amazon Transcribe Medical.
        public let languageCode: CLMLanguageCode?
        /// The date and time the specified language model was last modified. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.761000-07:00 represents 12:32 PM UTC-7  on May 4, 2022.
        public let lastModifiedTime: Date?
        /// A unique name, chosen by you, for your custom language model. This name is case sensitive, cannot contain spaces, and must be unique within an  Amazon Web Services account.
        public let modelName: String?
        /// The status of the specified custom language model. When the status displays as  COMPLETED the model is ready for use.
        public let modelStatus: ModelStatus?
        /// Shows if a more current base model is available for use with the specified custom language  model.  If false, your language model is using the most up-to-date base model. If true, there is a newer base model available than the one your language  model is using. Note that to update a base model, you must recreate the custom language model using the new base model. Base model upgrades for existing custom language models are not  supported.
        public let upgradeAvailability: Bool?

        public init(baseModelName: BaseModelName? = nil, createTime: Date? = nil, failureReason: String? = nil, inputDataConfig: InputDataConfig? = nil, languageCode: CLMLanguageCode? = nil, lastModifiedTime: Date? = nil, modelName: String? = nil, modelStatus: ModelStatus? = nil, upgradeAvailability: Bool? = nil) {
            self.baseModelName = baseModelName
            self.createTime = createTime
            self.failureReason = failureReason
            self.inputDataConfig = inputDataConfig
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.modelName = modelName
            self.modelStatus = modelStatus
            self.upgradeAvailability = upgradeAvailability
        }

        private enum CodingKeys: String, CodingKey {
            case baseModelName = "BaseModelName"
            case createTime = "CreateTime"
            case failureReason = "FailureReason"
            case inputDataConfig = "InputDataConfig"
            case languageCode = "LanguageCode"
            case lastModifiedTime = "LastModifiedTime"
            case modelName = "ModelName"
            case modelStatus = "ModelStatus"
            case upgradeAvailability = "UpgradeAvailability"
        }
    }

    public struct ListCallAnalyticsCategoriesRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring("MaxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring("NextToken"))
        ]

        /// The maximum number of Call Analytics categories to return in each page of results. If there are fewer results than the value you specify, only the actual results are returned. If you don't  specify a value, a default of 5 is used.
        public let maxResults: Int?
        /// If your ListCallAnalyticsCategories request returns more results than can  be displayed, NextToken is displayed in the response with an associated string. To get the next page of results, copy this string and repeat your request, including  NextToken with the value of the copied string. Repeat as needed to view all your  results.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^.+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListCallAnalyticsCategoriesResponse: AWSDecodableShape {
        /// Provides detailed information about your Call Analytics categories, including all the rules  associated with each category.
        public let categories: [CategoryProperties]?
        /// If NextToken is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the  NextToken parameter in your results output, then run your request again  including NextToken with the value of the copied string. Repeat as needed to  view all your results.
        public let nextToken: String?

        public init(categories: [CategoryProperties]? = nil, nextToken: String? = nil) {
            self.categories = categories
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case categories = "Categories"
            case nextToken = "NextToken"
        }
    }

    public struct ListCallAnalyticsJobsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "jobNameContains", location: .querystring("JobNameContains")),
            AWSMemberEncoding(label: "maxResults", location: .querystring("MaxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring("NextToken")),
            AWSMemberEncoding(label: "status", location: .querystring("Status"))
        ]

        /// Returns only the Call Analytics jobs that contain the specified string. The search is not case sensitive.
        public let jobNameContains: String?
        /// The maximum number of Call Analytics jobs to return in each page of results. If there are fewer results than the value you specify, only the actual results are returned. If you don't  specify a value, a default of 5 is used.
        public let maxResults: Int?
        /// If your ListCallAnalyticsJobs request returns more results than can be  displayed, NextToken is displayed in the response with an associated string. To  get the next page of results, copy this string and repeat your request, including  NextToken with the value of the copied string. Repeat as needed to view all your  results.
        public let nextToken: String?
        /// Returns only Call Analytics jobs with the specified status. Jobs are ordered by creation  date, with the newest job first. If you don't include Status, all Call Analytics jobs are returned.
        public let status: CallAnalyticsJobStatus?

        public init(jobNameContains: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, status: CallAnalyticsJobStatus? = nil) {
            self.jobNameContains = jobNameContains
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.status = status
        }

        public func validate(name: String) throws {
            try self.validate(self.jobNameContains, name: "jobNameContains", parent: name, max: 200)
            try self.validate(self.jobNameContains, name: "jobNameContains", parent: name, min: 1)
            try self.validate(self.jobNameContains, name: "jobNameContains", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^.+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListCallAnalyticsJobsResponse: AWSDecodableShape {
        /// Provides a summary of information about each result.
        public let callAnalyticsJobSummaries: [CallAnalyticsJobSummary]?
        /// If NextToken is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the  NextToken parameter in your results output, then run your request again  including NextToken with the value of the copied string. Repeat as needed to  view all your results.
        public let nextToken: String?
        /// Lists all Call Analytics jobs that have the status specified in your request. Jobs are ordered by creation date, with the newest job first.
        public let status: CallAnalyticsJobStatus?

        public init(callAnalyticsJobSummaries: [CallAnalyticsJobSummary]? = nil, nextToken: String? = nil, status: CallAnalyticsJobStatus? = nil) {
            self.callAnalyticsJobSummaries = callAnalyticsJobSummaries
            self.nextToken = nextToken
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case callAnalyticsJobSummaries = "CallAnalyticsJobSummaries"
            case nextToken = "NextToken"
            case status = "Status"
        }
    }

    public struct ListLanguageModelsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring("MaxResults")),
            AWSMemberEncoding(label: "nameContains", location: .querystring("NameContains")),
            AWSMemberEncoding(label: "nextToken", location: .querystring("NextToken")),
            AWSMemberEncoding(label: "statusEquals", location: .querystring("         StatusEquals"))
        ]

        /// The maximum number of custom language models to return in each page of results. If there are fewer results than the value you specify, only the actual results are returned. If you don't  specify a value, a default of 5 is used.
        public let maxResults: Int?
        /// Returns only the custom language models that contain the specified string. The search  is not case sensitive.
        public let nameContains: String?
        /// If your ListLanguageModels request returns more results than can be  displayed, NextToken is displayed in the response with an associated string. To get the next page of results, copy this string and repeat your request, including  NextToken with the value of the copied string. Repeat as needed to view all your  results.
        public let nextToken: String?
        /// Returns only custom language models with the specified status. Language models are ordered by creation date, with the newest model first. If you don't include StatusEquals, all custom language models are returned.
        public let statusEquals: ModelStatus?

        public init(maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil, statusEquals: ModelStatus? = nil) {
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.statusEquals = statusEquals
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 200)
            try self.validate(self.nameContains, name: "nameContains", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^.+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListLanguageModelsResponse: AWSDecodableShape {
        /// Provides information about the custom language models that match the criteria specified in your request.
        public let models: [LanguageModel]?
        /// If NextToken is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the  NextToken parameter in your results output, then run your request again  including NextToken with the value of the copied string.  Repeat as needed to view all your results.
        public let nextToken: String?

        public init(models: [LanguageModel]? = nil, nextToken: String? = nil) {
            self.models = models
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case models = "Models"
            case nextToken = "NextToken"
        }
    }

    public struct ListMedicalTranscriptionJobsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "jobNameContains", location: .querystring("JobNameContains")),
            AWSMemberEncoding(label: "maxResults", location: .querystring("MaxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring("NextToken")),
            AWSMemberEncoding(label: "status", location: .querystring("Status"))
        ]

        /// Returns only the medical transcription jobs that contain the specified string. The search  is not case sensitive.
        public let jobNameContains: String?
        /// The maximum number of medical transcription jobs to return in each page of results. If there are fewer results than the value you specify, only the actual results are returned. If you don't  specify a value, a default of 5 is used.
        public let maxResults: Int?
        /// If your ListMedicalTranscriptionJobs request returns more results than can  be displayed, NextToken is displayed in the response with an associated string.  To get the next page of results, copy this string and repeat your request, including  NextToken with the value of the copied string. Repeat as needed to view all your  results.
        public let nextToken: String?
        /// Returns only medical transcription jobs with the specified status. Jobs are ordered by  creation date, with the newest job first. If you don't include Status, all medical transcription jobs are returned.
        public let status: TranscriptionJobStatus?

        public init(jobNameContains: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, status: TranscriptionJobStatus? = nil) {
            self.jobNameContains = jobNameContains
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.status = status
        }

        public func validate(name: String) throws {
            try self.validate(self.jobNameContains, name: "jobNameContains", parent: name, max: 200)
            try self.validate(self.jobNameContains, name: "jobNameContains", parent: name, min: 1)
            try self.validate(self.jobNameContains, name: "jobNameContains", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^.+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListMedicalTranscriptionJobsResponse: AWSDecodableShape {
        /// Provides a summary of information about each result.
        public let medicalTranscriptionJobSummaries: [MedicalTranscriptionJobSummary]?
        /// If NextToken is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the  NextToken parameter in your results output, then run your request again  including NextToken with the value of the copied string. Repeat as needed to  view all your results.
        public let nextToken: String?
        /// Lists all medical transcription jobs that have the status specified in your request. Jobs are ordered by creation date, with the newest job first.
        public let status: TranscriptionJobStatus?

        public init(medicalTranscriptionJobSummaries: [MedicalTranscriptionJobSummary]? = nil, nextToken: String? = nil, status: TranscriptionJobStatus? = nil) {
            self.medicalTranscriptionJobSummaries = medicalTranscriptionJobSummaries
            self.nextToken = nextToken
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case medicalTranscriptionJobSummaries = "MedicalTranscriptionJobSummaries"
            case nextToken = "NextToken"
            case status = "Status"
        }
    }

    public struct ListMedicalVocabulariesRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring("MaxResults")),
            AWSMemberEncoding(label: "nameContains", location: .querystring("NameContains")),
            AWSMemberEncoding(label: "nextToken", location: .querystring("NextToken")),
            AWSMemberEncoding(label: "stateEquals", location: .querystring("StateEquals"))
        ]

        /// The maximum number of custom medical vocabularies to return in each page of results. If  there are fewer results than the value you specify, only the actual results are returned. If you  don't specify a value, a default of 5 is used.
        public let maxResults: Int?
        /// Returns only the custom medical vocabularies that contain the specified string. The search  is not case sensitive.
        public let nameContains: String?
        /// If your ListMedicalVocabularies request returns more results than can be  displayed, NextToken is displayed in the response with an associated string. To get the next page of results, copy this string and repeat your request, including  NextToken with the value of the copied string. Repeat as needed to view all your  results.
        public let nextToken: String?
        /// Returns only custom medical vocabularies with the specified state. Vocabularies are  ordered by creation date, with the newest vocabulary first. If you don't include  StateEquals, all custom medical vocabularies are returned.
        public let stateEquals: VocabularyState?

        public init(maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil, stateEquals: VocabularyState? = nil) {
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.stateEquals = stateEquals
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 200)
            try self.validate(self.nameContains, name: "nameContains", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^.+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListMedicalVocabulariesResponse: AWSDecodableShape {
        /// If NextToken is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the  NextToken parameter in your results output, then run your request again  including NextToken with the value of the copied string. Repeat as needed to view all your results.
        public let nextToken: String?
        /// Lists all custom medical vocabularies that have the status specified in your request.  Vocabularies are ordered by creation date, with the newest vocabulary first.
        public let status: VocabularyState?
        /// Provides information about the custom medical vocabularies that match the criteria specified in your request.
        public let vocabularies: [VocabularyInfo]?

        public init(nextToken: String? = nil, status: VocabularyState? = nil, vocabularies: [VocabularyInfo]? = nil) {
            self.nextToken = nextToken
            self.status = status
            self.vocabularies = vocabularies
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case status = "Status"
            case vocabularies = "Vocabularies"
        }
    }

    public struct ListTagsForResourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .uri("ResourceArn"))
        ]

        /// Returns a list of all tags associated with the specified Amazon Resource Name (ARN). ARNs  have the format arn:partition:service:region:account-id:resource-type/resource-id. For example,  arn:aws:transcribe:us-west-2:account-id:transcription-job/transcription-job-name. Valid values for resource-type are: transcription-job, medical-transcription-job, vocabulary,  medical-vocabulary, vocabulary-filter, and  language-model.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1011)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "^arn:aws(-[^:]+)?:transcribe:[a-zA-Z0-9-]*:[0-9]{12}:[a-zA-Z-]*/[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListTagsForResourceResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) specified in your request.
        public let resourceArn: String?
        /// Lists all tags associated with the given transcription job, vocabulary, model, or  resource.
        public let tags: [Tag]?

        public init(resourceArn: String? = nil, tags: [Tag]? = nil) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tags = "Tags"
        }
    }

    public struct ListTranscriptionJobsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "jobNameContains", location: .querystring("JobNameContains")),
            AWSMemberEncoding(label: "maxResults", location: .querystring("MaxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring("NextToken")),
            AWSMemberEncoding(label: "status", location: .querystring("Status"))
        ]

        /// Returns only the transcription jobs that contain the specified string. The search is not case sensitive.
        public let jobNameContains: String?
        /// The maximum number of transcription jobs to return in each page of results. If there are fewer results than the value you specify, only the actual results are returned. If you don't  specify a value, a default of 5 is used.
        public let maxResults: Int?
        /// If your ListTranscriptionJobs request returns more results than can be  displayed, NextToken is displayed in the response with an associated string. To  get the next page of results, copy this string and repeat your request, including  NextToken with the value of the copied string. Repeat as needed to view all your  results.
        public let nextToken: String?
        /// Returns only transcription jobs with the specified status. Jobs are ordered by creation  date, with the newest job first. If you don't include Status, all transcription  jobs are returned.
        public let status: TranscriptionJobStatus?

        public init(jobNameContains: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, status: TranscriptionJobStatus? = nil) {
            self.jobNameContains = jobNameContains
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.status = status
        }

        public func validate(name: String) throws {
            try self.validate(self.jobNameContains, name: "jobNameContains", parent: name, max: 200)
            try self.validate(self.jobNameContains, name: "jobNameContains", parent: name, min: 1)
            try self.validate(self.jobNameContains, name: "jobNameContains", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^.+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListTranscriptionJobsResponse: AWSDecodableShape {
        /// If NextToken is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the  NextToken parameter in your results output, then run your request again  including NextToken with the value of the copied string. Repeat as needed to  view all your results.
        public let nextToken: String?
        /// Lists all transcription jobs that have the status specified in your request. Jobs are ordered by creation date, with the newest job first.
        public let status: TranscriptionJobStatus?
        /// Provides a summary of information about each result.
        public let transcriptionJobSummaries: [TranscriptionJobSummary]?

        public init(nextToken: String? = nil, status: TranscriptionJobStatus? = nil, transcriptionJobSummaries: [TranscriptionJobSummary]? = nil) {
            self.nextToken = nextToken
            self.status = status
            self.transcriptionJobSummaries = transcriptionJobSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case status = "Status"
            case transcriptionJobSummaries = "TranscriptionJobSummaries"
        }
    }

    public struct ListVocabulariesRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring("MaxResults")),
            AWSMemberEncoding(label: "nameContains", location: .querystring("NameContains")),
            AWSMemberEncoding(label: "nextToken", location: .querystring("NextToken")),
            AWSMemberEncoding(label: "stateEquals", location: .querystring("StateEquals"))
        ]

        /// The maximum number of custom vocabularies to return in each page of results. If there  are fewer results than the value you specify, only the actual results are returned. If you  don't specify a value, a default of 5 is used.
        public let maxResults: Int?
        /// Returns only the custom vocabularies that contain the specified string. The search is not case sensitive.
        public let nameContains: String?
        /// If your ListVocabularies request returns more results than can be displayed, NextToken is displayed in the response with an associated string. To get the  next page of results, copy this string and repeat your request, including  NextToken with the value of the copied string. Repeat as needed to view all your  results.
        public let nextToken: String?
        /// Returns only custom vocabularies with the specified state. Vocabularies are ordered by creation date, with the newest vocabulary first. If you don't include  StateEquals, all custom medical vocabularies are returned.
        public let stateEquals: VocabularyState?

        public init(maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil, stateEquals: VocabularyState? = nil) {
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.stateEquals = stateEquals
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 200)
            try self.validate(self.nameContains, name: "nameContains", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^.+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListVocabulariesResponse: AWSDecodableShape {
        /// If NextToken is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the  NextToken parameter in your results output, then run your request again  including NextToken with the value of the copied string. Repeat as needed to  view all your results.
        public let nextToken: String?
        /// Lists all custom vocabularies that have the status specified in your request. Vocabularies  are ordered by creation date, with the newest vocabulary first.
        public let status: VocabularyState?
        /// Provides information about the custom vocabularies that match the criteria specified in your request.
        public let vocabularies: [VocabularyInfo]?

        public init(nextToken: String? = nil, status: VocabularyState? = nil, vocabularies: [VocabularyInfo]? = nil) {
            self.nextToken = nextToken
            self.status = status
            self.vocabularies = vocabularies
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case status = "Status"
            case vocabularies = "Vocabularies"
        }
    }

    public struct ListVocabularyFiltersRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring("MaxResults")),
            AWSMemberEncoding(label: "nameContains", location: .querystring("NameContains")),
            AWSMemberEncoding(label: "nextToken", location: .querystring("NextToken"))
        ]

        /// The maximum number of custom vocabulary filters to return in each page of results. If  there are fewer results than the value you specify, only the actual results are returned. If you  don't specify a value, a default of 5 is used.
        public let maxResults: Int?
        /// Returns only the custom vocabulary filters that contain the specified string. The search  is not case sensitive.
        public let nameContains: String?
        /// If your ListVocabularyFilters request returns more results than can  be displayed, NextToken is displayed in the response with an associated string.  To get the next page of results, copy this string and repeat your request, including  NextToken with the value of the copied string. Repeat as needed to view all your  results.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 200)
            try self.validate(self.nameContains, name: "nameContains", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^.+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListVocabularyFiltersResponse: AWSDecodableShape {
        /// If NextToken is present in your response, it indicates that not all results are displayed. To view the next set of results, copy the string associated with the  NextToken parameter in your results output, then run your request again  including NextToken with the value of the copied string. Repeat as needed to  view all your results.
        public let nextToken: String?
        /// Provides information about the custom vocabulary filters that match the criteria specified in your request.
        public let vocabularyFilters: [VocabularyFilterInfo]?

        public init(nextToken: String? = nil, vocabularyFilters: [VocabularyFilterInfo]? = nil) {
            self.nextToken = nextToken
            self.vocabularyFilters = vocabularyFilters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case vocabularyFilters = "VocabularyFilters"
        }
    }

    public struct Media: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon S3 location of the media file you want to transcribe. For example:    s3://DOC-EXAMPLE-BUCKET/my-media-file.flac     s3://DOC-EXAMPLE-BUCKET/media-files/my-media-file.flac    Note that the Amazon S3 bucket that contains your input media must be located in the same Amazon Web Services Region where you're making your transcription  request.
        public let mediaFileUri: String?
        /// The Amazon S3 location of the media file you want to redact. For example:    s3://DOC-EXAMPLE-BUCKET/my-media-file.flac     s3://DOC-EXAMPLE-BUCKET/media-files/my-media-file.flac    Note that the Amazon S3 bucket that contains your input media must be located in the same Amazon Web Services Region where you're making your transcription  request.   RedactedMediaFileUri is only supported for Call Analytics (StartCallAnalyticsJob) transcription requests.
        public let redactedMediaFileUri: String?

        public init(mediaFileUri: String? = nil, redactedMediaFileUri: String? = nil) {
            self.mediaFileUri = mediaFileUri
            self.redactedMediaFileUri = redactedMediaFileUri
        }

        public func validate(name: String) throws {
            try self.validate(self.mediaFileUri, name: "mediaFileUri", parent: name, max: 2000)
            try self.validate(self.mediaFileUri, name: "mediaFileUri", parent: name, min: 1)
            try self.validate(self.mediaFileUri, name: "mediaFileUri", parent: name, pattern: "^(s3://|http(s*)://).+$")
            try self.validate(self.redactedMediaFileUri, name: "redactedMediaFileUri", parent: name, max: 2000)
            try self.validate(self.redactedMediaFileUri, name: "redactedMediaFileUri", parent: name, min: 1)
            try self.validate(self.redactedMediaFileUri, name: "redactedMediaFileUri", parent: name, pattern: "^(s3://|http(s*)://).+$")
        }

        private enum CodingKeys: String, CodingKey {
            case mediaFileUri = "MediaFileUri"
            case redactedMediaFileUri = "RedactedMediaFileUri"
        }
    }

    public struct MedicalTranscript: AWSDecodableShape {
        /// The Amazon S3 location of your transcript. You can use this URI to access or  download your transcript. If you included OutputBucketName in your transcription job request, this is  the URI of that bucket. If you also included OutputKey in your request, your  output is located in the path you specified in your request. If you didn't include OutputBucketName in your transcription job request, your transcript is stored in a service-managed bucket, and TranscriptFileUri provides you with a temporary URI you can use for secure access to your transcript.  Temporary URIs for service-managed Amazon S3 buckets are only valid for 15  minutes. If you get an AccesDenied error, you can get a new temporary  URI by running a GetTranscriptionJob or  ListTranscriptionJob request.
        public let transcriptFileUri: String?

        public init(transcriptFileUri: String? = nil) {
            self.transcriptFileUri = transcriptFileUri
        }

        private enum CodingKeys: String, CodingKey {
            case transcriptFileUri = "TranscriptFileUri"
        }
    }

    public struct MedicalTranscriptionJob: AWSDecodableShape {
        /// The date and time the specified medical transcription job finished processing. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:33:13.922000-07:00 represents a transcription job that started processing at 12:33 PM UTC-7 on May 4, 2022.
        public let completionTime: Date?
        /// Labels all personal health information (PHI) identified in your transcript. For more information,  see Identifying personal health  information (PHI) in a transcription.
        public let contentIdentificationType: MedicalContentIdentificationType?
        /// The date and time the specified medical transcription job request was made. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.761000-07:00 represents a transcription job that started processing at 12:32 PM UTC-7 on May 4, 2022.
        public let creationTime: Date?
        /// If TranscriptionJobStatus is FAILED,  FailureReason contains information about why the transcription job request failed. The FailureReason field contains one of the following values:    Unsupported media format. The media format specified in MediaFormat isn't valid. Refer to MediaFormat for a list of supported formats.    The media format provided does not match the detected media  format. The media format specified in MediaFormat doesn't match the  format of the input file. Check the media format of your media file and correct the  specified value.    Invalid sample rate for audio file. The sample rate specified in MediaSampleRateHertz isn't valid. The sample rate must be between 16,000 and 48,000 Hertz.    The sample rate provided does not match the detected sample  rate. The sample rate specified in MediaSampleRateHertz doesn't  match the sample rate detected in your input media file. Check the sample rate of  your media file and correct the specified value.    Invalid file size: file size too large. The size of your media file is larger than what Amazon Transcribe can process.  For more information, refer to Guidelines and quotas.    Invalid number of channels: number of channels too large. Your audio contains more channels than Amazon Transcribe is able to process.  For more information, refer to Guidelines and  quotas.
        public let failureReason: String?
        /// The language code used to create your medical transcription job. US English  (en-US) is the only supported language for medical transcriptions.
        public let languageCode: LanguageCode?
        public let media: Media?
        /// The format of the input media file.
        public let mediaFormat: MediaFormat?
        /// The sample rate, in Hertz, of the audio track in your input media file.
        public let mediaSampleRateHertz: Int?
        /// The name of the medical transcription job. Job names are case sensitive and must be unique  within an Amazon Web Services account.
        public let medicalTranscriptionJobName: String?
        /// Specify additional optional settings in your   request, including channel identification, alternative transcriptions, and speaker labeling; allows  you to apply custom vocabularies to your medical transcription job.
        public let settings: MedicalTranscriptionSetting?
        /// Describes the medical specialty represented in your media.
        public let specialty: Specialty?
        /// The date and time the specified medical transcription job began processing. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.789000-07:00 represents a transcription job that started processing at 12:32 PM UTC-7 on May 4, 2022.
        public let startTime: Date?
        /// The tags, each in the form of a key:value pair, assigned to the specified medical transcription job.
        public let tags: [Tag]?
        /// Provides you with the Amazon S3 URI you can use to access your transcript.
        public let transcript: MedicalTranscript?
        /// Provides the status of the specified medical transcription job. If the status is COMPLETED, the job is finished and you can find the results at the location specified in TranscriptFileUri. If the status is  FAILED, FailureReason provides details on why your transcription job failed.
        public let transcriptionJobStatus: TranscriptionJobStatus?
        /// Indicates whether the input media is a dictation or a conversation, as specified in the  StartMedicalTranscriptionJob request.
        public let type: `Type`?

        public init(completionTime: Date? = nil, contentIdentificationType: MedicalContentIdentificationType? = nil, creationTime: Date? = nil, failureReason: String? = nil, languageCode: LanguageCode? = nil, media: Media? = nil, mediaFormat: MediaFormat? = nil, mediaSampleRateHertz: Int? = nil, medicalTranscriptionJobName: String? = nil, settings: MedicalTranscriptionSetting? = nil, specialty: Specialty? = nil, startTime: Date? = nil, tags: [Tag]? = nil, transcript: MedicalTranscript? = nil, transcriptionJobStatus: TranscriptionJobStatus? = nil, type: `Type`? = nil) {
            self.completionTime = completionTime
            self.contentIdentificationType = contentIdentificationType
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.languageCode = languageCode
            self.media = media
            self.mediaFormat = mediaFormat
            self.mediaSampleRateHertz = mediaSampleRateHertz
            self.medicalTranscriptionJobName = medicalTranscriptionJobName
            self.settings = settings
            self.specialty = specialty
            self.startTime = startTime
            self.tags = tags
            self.transcript = transcript
            self.transcriptionJobStatus = transcriptionJobStatus
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case completionTime = "CompletionTime"
            case contentIdentificationType = "ContentIdentificationType"
            case creationTime = "CreationTime"
            case failureReason = "FailureReason"
            case languageCode = "LanguageCode"
            case media = "Media"
            case mediaFormat = "MediaFormat"
            case mediaSampleRateHertz = "MediaSampleRateHertz"
            case medicalTranscriptionJobName = "MedicalTranscriptionJobName"
            case settings = "Settings"
            case specialty = "Specialty"
            case startTime = "StartTime"
            case tags = "Tags"
            case transcript = "Transcript"
            case transcriptionJobStatus = "TranscriptionJobStatus"
            case type = "Type"
        }
    }

    public struct MedicalTranscriptionJobSummary: AWSDecodableShape {
        /// The date and time the specified medical transcription job finished processing. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:33:13.922000-07:00 represents a transcription job that started processing at 12:33 PM UTC-7 on May 4, 2022.
        public let completionTime: Date?
        /// Labels all personal health information (PHI) identified in your transcript. For more information,  see Identifying personal health  information (PHI) in a transcription.
        public let contentIdentificationType: MedicalContentIdentificationType?
        /// The date and time the specified medical transcription job request was made. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.761000-07:00 represents a transcription job that started processing at 12:32 PM UTC-7 on May 4, 2022.
        public let creationTime: Date?
        /// If TranscriptionJobStatus is FAILED, FailureReason contains information about why the transcription job  failed. See also: Common Errors.
        public let failureReason: String?
        /// The language code used to create your medical transcription. US English  (en-US) is the only supported language for medical transcriptions.
        public let languageCode: LanguageCode?
        /// The name of the medical transcription job. Job names are case sensitive and must be unique  within an Amazon Web Services account.
        public let medicalTranscriptionJobName: String?
        /// Indicates where the specified medical transcription output is stored. If the value is CUSTOMER_BUCKET, the location is the Amazon S3 bucket you specified using the OutputBucketName parameter in your  request. If you also included  OutputKey in your request, your output is located in the path you specified in your request. If the value is SERVICE_BUCKET, the location is a service-managed  Amazon S3 bucket. To access a transcript stored in a service-managed bucket, use the URI shown in the TranscriptFileUri field.
        public let outputLocationType: OutputLocationType?
        /// Provides the medical specialty represented in your media.
        public let specialty: Specialty?
        /// The date and time your medical transcription job began processing. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.789000-07:00 represents a transcription job that started processing at 12:32 PM UTC-7 on May 4, 2022.
        public let startTime: Date?
        /// Provides the status of your medical transcription job. If the status is COMPLETED, the job is finished and you can find the results at the location specified in TranscriptFileUri. If the status is  FAILED, FailureReason provides details on why your transcription job failed.
        public let transcriptionJobStatus: TranscriptionJobStatus?
        /// Indicates whether the input media is a dictation or a conversation, as specified in the  StartMedicalTranscriptionJob request.
        public let type: `Type`?

        public init(completionTime: Date? = nil, contentIdentificationType: MedicalContentIdentificationType? = nil, creationTime: Date? = nil, failureReason: String? = nil, languageCode: LanguageCode? = nil, medicalTranscriptionJobName: String? = nil, outputLocationType: OutputLocationType? = nil, specialty: Specialty? = nil, startTime: Date? = nil, transcriptionJobStatus: TranscriptionJobStatus? = nil, type: `Type`? = nil) {
            self.completionTime = completionTime
            self.contentIdentificationType = contentIdentificationType
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.languageCode = languageCode
            self.medicalTranscriptionJobName = medicalTranscriptionJobName
            self.outputLocationType = outputLocationType
            self.specialty = specialty
            self.startTime = startTime
            self.transcriptionJobStatus = transcriptionJobStatus
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case completionTime = "CompletionTime"
            case contentIdentificationType = "ContentIdentificationType"
            case creationTime = "CreationTime"
            case failureReason = "FailureReason"
            case languageCode = "LanguageCode"
            case medicalTranscriptionJobName = "MedicalTranscriptionJobName"
            case outputLocationType = "OutputLocationType"
            case specialty = "Specialty"
            case startTime = "StartTime"
            case transcriptionJobStatus = "TranscriptionJobStatus"
            case type = "Type"
        }
    }

    public struct MedicalTranscriptionSetting: AWSEncodableShape & AWSDecodableShape {
        /// Enables channel identification in multi-channel audio. Channel identification transcribes the audio on each channel independently, then appends the  output for each channel into one transcript. If you have multi-channel audio and do not enable channel identification, your audio is  transcribed in a continuous manner and your transcript does not separate the speech by channel. You can't include both ShowSpeakerLabels and  ChannelIdentification in the same request. Including both parameters  returns a BadRequestException. For more information, see Transcribing multi-channel audio.
        public let channelIdentification: Bool?
        /// Indicate the maximum number of alternative transcriptions you want Amazon Transcribe  Medical to include in your transcript. If you select a number greater than the number of alternative transcriptions generated by  Amazon Transcribe Medical, only the actual number of alternative transcriptions are included. If you include MaxAlternatives in your request, you must also include ShowAlternatives with a value of true. For more information, see Alternative transcriptions.
        public let maxAlternatives: Int?
        /// Specify the maximum number of speakers you want to identify in your media. Note that if your media contains more speakers than the specified number, multiple speakers will be identified as a single speaker. If you specify the MaxSpeakerLabels field, you must set the ShowSpeakerLabels field to true.
        public let maxSpeakerLabels: Int?
        /// To include alternative transcriptions within your transcription output, include ShowAlternatives in your transcription request. If you include ShowAlternatives, you must also include  MaxAlternatives, which is the maximum number of alternative transcriptions  you want Amazon Transcribe Medical to generate. For more information, see Alternative transcriptions.
        public let showAlternatives: Bool?
        /// Enables speaker identification (diarization) in your transcription output. Speaker identification  labels the speech from individual speakers in your media file.  If you enable ShowSpeakerLabels in your request, you must also include MaxSpeakerLabels. You can't include both ShowSpeakerLabels and  ChannelIdentification in the same request. Including both parameters  returns a BadRequestException. For more information, see Identifying speakers (diarization).
        public let showSpeakerLabels: Bool?
        /// The name of the custom vocabulary you want to use when processing your medical  transcription job. Vocabulary names are case sensitive. The language of the specified vocabulary must match the language code you specify in your transcription request. If the languages don't match, the vocabulary isn't applied. There are no errors or warnings associated with a language mismatch. US English  (en-US) is the only valid language for Amazon Transcribe Medical.
        public let vocabularyName: String?

        public init(channelIdentification: Bool? = nil, maxAlternatives: Int? = nil, maxSpeakerLabels: Int? = nil, showAlternatives: Bool? = nil, showSpeakerLabels: Bool? = nil, vocabularyName: String? = nil) {
            self.channelIdentification = channelIdentification
            self.maxAlternatives = maxAlternatives
            self.maxSpeakerLabels = maxSpeakerLabels
            self.showAlternatives = showAlternatives
            self.showSpeakerLabels = showSpeakerLabels
            self.vocabularyName = vocabularyName
        }

        public func validate(name: String) throws {
            try self.validate(self.maxAlternatives, name: "maxAlternatives", parent: name, max: 10)
            try self.validate(self.maxAlternatives, name: "maxAlternatives", parent: name, min: 2)
            try self.validate(self.maxSpeakerLabels, name: "maxSpeakerLabels", parent: name, max: 10)
            try self.validate(self.maxSpeakerLabels, name: "maxSpeakerLabels", parent: name, min: 2)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, max: 200)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, min: 1)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case channelIdentification = "ChannelIdentification"
            case maxAlternatives = "MaxAlternatives"
            case maxSpeakerLabels = "MaxSpeakerLabels"
            case showAlternatives = "ShowAlternatives"
            case showSpeakerLabels = "ShowSpeakerLabels"
            case vocabularyName = "VocabularyName"
        }
    }

    public struct ModelSettings: AWSEncodableShape & AWSDecodableShape {
        /// The name of the custom language model you want to use when processing your  transcription job. Note that language model names are case sensitive. The language of the specified language model must match the language code you specify in your transcription request. If the languages don't match, the language model isn't applied.  There are no errors or warnings associated with a language mismatch.
        public let languageModelName: String?

        public init(languageModelName: String? = nil) {
            self.languageModelName = languageModelName
        }

        public func validate(name: String) throws {
            try self.validate(self.languageModelName, name: "languageModelName", parent: name, max: 200)
            try self.validate(self.languageModelName, name: "languageModelName", parent: name, min: 1)
            try self.validate(self.languageModelName, name: "languageModelName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case languageModelName = "LanguageModelName"
        }
    }

    public struct NonTalkTimeFilter: AWSEncodableShape & AWSDecodableShape {
        /// Allows you to specify a time range (in milliseconds) in your audio, during which you want  to search for a period of silence. See  for more  detail.
        public let absoluteTimeRange: AbsoluteTimeRange?
        /// Set to TRUE to flag periods of speech. Set to FALSE to flag  periods of silence
        public let negate: Bool?
        /// Allows you to specify a time range (in percentage) in your media file, during which you want to search for a period of silence. See  for more detail.
        public let relativeTimeRange: RelativeTimeRange?
        /// Specify the duration, in milliseconds, of the period of silence you want to flag. For  example, you can flag a silent period that lasts 30000 milliseconds.
        public let threshold: Int64?

        public init(absoluteTimeRange: AbsoluteTimeRange? = nil, negate: Bool? = nil, relativeTimeRange: RelativeTimeRange? = nil, threshold: Int64? = nil) {
            self.absoluteTimeRange = absoluteTimeRange
            self.negate = negate
            self.relativeTimeRange = relativeTimeRange
            self.threshold = threshold
        }

        public func validate(name: String) throws {
            try self.absoluteTimeRange?.validate(name: "\(name).absoluteTimeRange")
            try self.relativeTimeRange?.validate(name: "\(name).relativeTimeRange")
            try self.validate(self.threshold, name: "threshold", parent: name, max: 14_400_000)
            try self.validate(self.threshold, name: "threshold", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case absoluteTimeRange = "AbsoluteTimeRange"
            case negate = "Negate"
            case relativeTimeRange = "RelativeTimeRange"
            case threshold = "Threshold"
        }
    }

    public struct RelativeTimeRange: AWSEncodableShape & AWSDecodableShape {
        /// The time, in percentage, when Amazon Transcribe stops searching for the specified criteria in your media file. If you include EndPercentage in your request, you must also include StartPercentage.
        public let endPercentage: Int?
        /// The time, in percentage, from the start of your media file until the value you specify in which Amazon Transcribe searches for your specified criteria.
        public let first: Int?
        /// The time, in percentage, from the value you specify until the end of your media file in which Amazon Transcribe searches for your specified criteria.
        public let last: Int?
        /// The time, in percentage, when Amazon Transcribe starts searching for the specified  criteria in your media file. If you include StartPercentage in your request, you must also include EndPercentage.
        public let startPercentage: Int?

        public init(endPercentage: Int? = nil, first: Int? = nil, last: Int? = nil, startPercentage: Int? = nil) {
            self.endPercentage = endPercentage
            self.first = first
            self.last = last
            self.startPercentage = startPercentage
        }

        public func validate(name: String) throws {
            try self.validate(self.endPercentage, name: "endPercentage", parent: name, max: 100)
            try self.validate(self.endPercentage, name: "endPercentage", parent: name, min: 0)
            try self.validate(self.first, name: "first", parent: name, max: 100)
            try self.validate(self.first, name: "first", parent: name, min: 0)
            try self.validate(self.last, name: "last", parent: name, max: 100)
            try self.validate(self.last, name: "last", parent: name, min: 0)
            try self.validate(self.startPercentage, name: "startPercentage", parent: name, max: 100)
            try self.validate(self.startPercentage, name: "startPercentage", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case endPercentage = "EndPercentage"
            case first = "First"
            case last = "Last"
            case startPercentage = "StartPercentage"
        }
    }

    public struct SentimentFilter: AWSEncodableShape & AWSDecodableShape {
        /// Allows you to specify a time range (in milliseconds) in your audio, during which you want to search for the specified sentiments. See  for more detail.
        public let absoluteTimeRange: AbsoluteTimeRange?
        /// Set to TRUE to flag the sentiments you didn't include in your request. Set to FALSE to flag the sentiments you specified in your request.
        public let negate: Bool?
        /// Specify the participant you want to flag. Omitting this parameter is equivalent to specifying both participants.
        public let participantRole: ParticipantRole?
        /// Allows you to specify a time range (in percentage) in your media file, during which you want to search for the specified sentiments. See   for more detail.
        public let relativeTimeRange: RelativeTimeRange?
        /// Specify the sentiments you want to flag.
        public let sentiments: [SentimentValue]

        public init(absoluteTimeRange: AbsoluteTimeRange? = nil, negate: Bool? = nil, participantRole: ParticipantRole? = nil, relativeTimeRange: RelativeTimeRange? = nil, sentiments: [SentimentValue]) {
            self.absoluteTimeRange = absoluteTimeRange
            self.negate = negate
            self.participantRole = participantRole
            self.relativeTimeRange = relativeTimeRange
            self.sentiments = sentiments
        }

        public func validate(name: String) throws {
            try self.absoluteTimeRange?.validate(name: "\(name).absoluteTimeRange")
            try self.relativeTimeRange?.validate(name: "\(name).relativeTimeRange")
            try self.validate(self.sentiments, name: "sentiments", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case absoluteTimeRange = "AbsoluteTimeRange"
            case negate = "Negate"
            case participantRole = "ParticipantRole"
            case relativeTimeRange = "RelativeTimeRange"
            case sentiments = "Sentiments"
        }
    }

    public struct Settings: AWSEncodableShape & AWSDecodableShape {
        /// Enables channel identification in multi-channel audio. Channel identification transcribes the audio on each channel independently, then appends the  output for each channel into one transcript. You can't include both ShowSpeakerLabels and  ChannelIdentification in the same request. Including both parameters  returns a BadRequestException. For more information, see Transcribing multi-channel audio.
        public let channelIdentification: Bool?
        /// Indicate the maximum number of alternative transcriptions you want Amazon Transcribe  to include in your transcript. If you select a number greater than the number of alternative transcriptions generated by  Amazon Transcribe, only the actual number of alternative transcriptions are included. If you include MaxAlternatives in your request, you must also include ShowAlternatives with a value of true. For more information, see Alternative transcriptions.
        public let maxAlternatives: Int?
        /// Specify the maximum number of speakers you want to identify in your media. Note that if your media contains more speakers than the specified number, multiple speakers will be identified as a single speaker. If you specify the MaxSpeakerLabels field, you must set the ShowSpeakerLabels field to true.
        public let maxSpeakerLabels: Int?
        /// To include alternative transcriptions within your transcription output, include ShowAlternatives in your transcription request.            If you have multi-channel audio and do not enable channel identification, your audio is  transcribed in a continuous manner and your transcript does not separate the speech by channel. If you include ShowAlternatives, you must also include  MaxAlternatives, which is the maximum number of alternative transcriptions you want Amazon Transcribe to generate. For more information, see Alternative transcriptions.
        public let showAlternatives: Bool?
        /// Enables speaker identification (diarization) in your transcription output. Speaker identification  labels the speech from individual speakers in your media file. If you enable ShowSpeakerLabels in your request, you must also include MaxSpeakerLabels. You can't include both ShowSpeakerLabels and  ChannelIdentification in the same request. Including both parameters  returns a BadRequestException. For more information, see Identifying speakers (diarization).
        public let showSpeakerLabels: Bool?
        /// Specify how you want your vocabulary filter applied to your transcript. To replace words with ***, choose mask. To delete words, choose remove. To flag words without changing them, choose tag.
        public let vocabularyFilterMethod: VocabularyFilterMethod?
        /// The name of the custom vocabulary filter you want to use in your transcription job request. This name is case sensitive, cannot contain spaces, and must be unique within an  Amazon Web Services account.    Note that if you include VocabularyFilterName in your request, you must  also include VocabularyFilterMethod.
        public let vocabularyFilterName: String?
        /// The name of the custom vocabulary you want to use in your transcription job request. This  name is case sensitive, cannot contain spaces, and must be unique within an  Amazon Web Services account.
        public let vocabularyName: String?

        public init(channelIdentification: Bool? = nil, maxAlternatives: Int? = nil, maxSpeakerLabels: Int? = nil, showAlternatives: Bool? = nil, showSpeakerLabels: Bool? = nil, vocabularyFilterMethod: VocabularyFilterMethod? = nil, vocabularyFilterName: String? = nil, vocabularyName: String? = nil) {
            self.channelIdentification = channelIdentification
            self.maxAlternatives = maxAlternatives
            self.maxSpeakerLabels = maxSpeakerLabels
            self.showAlternatives = showAlternatives
            self.showSpeakerLabels = showSpeakerLabels
            self.vocabularyFilterMethod = vocabularyFilterMethod
            self.vocabularyFilterName = vocabularyFilterName
            self.vocabularyName = vocabularyName
        }

        public func validate(name: String) throws {
            try self.validate(self.maxAlternatives, name: "maxAlternatives", parent: name, max: 10)
            try self.validate(self.maxAlternatives, name: "maxAlternatives", parent: name, min: 2)
            try self.validate(self.maxSpeakerLabels, name: "maxSpeakerLabels", parent: name, max: 10)
            try self.validate(self.maxSpeakerLabels, name: "maxSpeakerLabels", parent: name, min: 2)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, max: 200)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, min: 1)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, max: 200)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, min: 1)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case channelIdentification = "ChannelIdentification"
            case maxAlternatives = "MaxAlternatives"
            case maxSpeakerLabels = "MaxSpeakerLabels"
            case showAlternatives = "ShowAlternatives"
            case showSpeakerLabels = "ShowSpeakerLabels"
            case vocabularyFilterMethod = "VocabularyFilterMethod"
            case vocabularyFilterName = "VocabularyFilterName"
            case vocabularyName = "VocabularyName"
        }
    }

    public struct StartCallAnalyticsJobRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "callAnalyticsJobName", location: .uri("CallAnalyticsJobName"))
        ]

        /// A unique name, chosen by you, for your Call Analytics job. This name is case sensitive, cannot contain spaces, and must be unique within an  Amazon Web Services account. If you try to create a new job with the same name as an  existing job, you get a ConflictException error.
        public let callAnalyticsJobName: String
        /// Allows you to specify which speaker is on which channel. For example, if your agent is the  first participant to speak, you would set ChannelId to 0 (to indicate the first channel) and ParticipantRole to AGENT (to  indicate that it's the agent speaking).
        public let channelDefinitions: [ChannelDefinition]?
        /// The Amazon Resource Name (ARN) of an IAM role that has permissions to access the Amazon S3 bucket that contains your input files. If the role you specify doesn’t  have the appropriate permissions to access the specified Amazon S3 location, your request  fails.         IAM role ARNs have the format arn:partition:iam::account:role/role-name-with-path. For example: arn:aws:iam::111122223333:role/Admin. For more information, see IAM ARNs.
        public let dataAccessRoleArn: String?
        public let media: Media
        /// The KMS key you want to use to encrypt your Call Analytics output. If using a key located in the current  Amazon Web Services account, you can specify your KMS key in one of  four ways:   Use the KMS key ID itself. For example,  1234abcd-12ab-34cd-56ef-1234567890ab.   Use an alias for the KMS key ID. For example, alias/ExampleAlias.   Use the Amazon Resource Name (ARN) for the KMS key ID. For  example, arn:aws:kms:region:account-ID:key/1234abcd-12ab-34cd-56ef-1234567890ab.   Use the ARN for the KMS key alias. For example,  arn:aws:kms:region:account-ID:alias/ExampleAlias.   If using a key located in a different  Amazon Web Services account than the current Amazon Web Services account, you can  specify your KMS key in one of two ways:   Use the ARN for the KMS key ID. For example,  arn:aws:kms:region:account-ID:key/1234abcd-12ab-34cd-56ef-1234567890ab.               Use the ARN for the KMS key alias. For example,  arn:aws:kms:region:account-ID:alias/ExampleAlias.   If you don't specify an encryption key, your output is encrypted with the default  Amazon S3 key (SSE-S3).  If you specify a KMS key to encrypt your output, you must also specify  an output location using the OutputLocation parameter. Note that the user making the   request must have permission to use the specified KMS key.
        public let outputEncryptionKMSKeyId: String?
        /// The Amazon S3 location where you want your Call Analytics transcription output  stored. You can use any of the following formats to specify the output location:   s3://DOC-EXAMPLE-BUCKET   s3://DOC-EXAMPLE-BUCKET/my-output-folder/   s3://DOC-EXAMPLE-BUCKET/my-output-folder/my-call-analytics-job.json   Unless you specify a file name (option 3), the name of your output file has a default  value that matches the name you specified for your transcription job using the  CallAnalyticsJobName parameter. You can specify a KMS key to encrypt your output using the OutputEncryptionKMSKeyId parameter. If you don't specify a  KMS key, Amazon Transcribe uses the default Amazon S3 key for  server-side encryption. If you don't specify OutputLocation, your transcript is placed in a  service-managed Amazon S3 bucket and you are provided with a URI to access your  transcript.
        public let outputLocation: String?
        /// Specify additional optional settings in your   request, including content redaction; allows you to apply custom language models, vocabulary  filters, and custom vocabularies to your Call Analytics job.
        public let settings: CallAnalyticsJobSettings?

        public init(callAnalyticsJobName: String, channelDefinitions: [ChannelDefinition]? = nil, dataAccessRoleArn: String? = nil, media: Media, outputEncryptionKMSKeyId: String? = nil, outputLocation: String? = nil, settings: CallAnalyticsJobSettings? = nil) {
            self.callAnalyticsJobName = callAnalyticsJobName
            self.channelDefinitions = channelDefinitions
            self.dataAccessRoleArn = dataAccessRoleArn
            self.media = media
            self.outputEncryptionKMSKeyId = outputEncryptionKMSKeyId
            self.outputLocation = outputLocation
            self.settings = settings
        }

        public func validate(name: String) throws {
            try self.validate(self.callAnalyticsJobName, name: "callAnalyticsJobName", parent: name, max: 200)
            try self.validate(self.callAnalyticsJobName, name: "callAnalyticsJobName", parent: name, min: 1)
            try self.validate(self.callAnalyticsJobName, name: "callAnalyticsJobName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.channelDefinitions?.forEach {
                try $0.validate(name: "\(name).channelDefinitions[]")
            }
            try self.validate(self.channelDefinitions, name: "channelDefinitions", parent: name, max: 2)
            try self.validate(self.channelDefinitions, name: "channelDefinitions", parent: name, min: 2)
            try self.validate(self.dataAccessRoleArn, name: "dataAccessRoleArn", parent: name, max: 2048)
            try self.validate(self.dataAccessRoleArn, name: "dataAccessRoleArn", parent: name, min: 20)
            try self.validate(self.dataAccessRoleArn, name: "dataAccessRoleArn", parent: name, pattern: "^arn:(aws|aws-cn|aws-us-gov|aws-iso-{0,1}[a-z]{0,1}):iam::[0-9]{0,63}:role/[A-Za-z0-9:_/+=,@.-]{0,1024}$")
            try self.media.validate(name: "\(name).media")
            try self.validate(self.outputEncryptionKMSKeyId, name: "outputEncryptionKMSKeyId", parent: name, max: 2048)
            try self.validate(self.outputEncryptionKMSKeyId, name: "outputEncryptionKMSKeyId", parent: name, min: 1)
            try self.validate(self.outputEncryptionKMSKeyId, name: "outputEncryptionKMSKeyId", parent: name, pattern: "^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$")
            try self.validate(self.outputLocation, name: "outputLocation", parent: name, max: 2000)
            try self.validate(self.outputLocation, name: "outputLocation", parent: name, min: 1)
            try self.validate(self.outputLocation, name: "outputLocation", parent: name, pattern: "^(s3://|http(s*)://).+$")
            try self.settings?.validate(name: "\(name).settings")
        }

        private enum CodingKeys: String, CodingKey {
            case channelDefinitions = "ChannelDefinitions"
            case dataAccessRoleArn = "DataAccessRoleArn"
            case media = "Media"
            case outputEncryptionKMSKeyId = "OutputEncryptionKMSKeyId"
            case outputLocation = "OutputLocation"
            case settings = "Settings"
        }
    }

    public struct StartCallAnalyticsJobResponse: AWSDecodableShape {
        /// Provides detailed information about the current Call Analytics job, including job status and, if applicable, failure reason.
        public let callAnalyticsJob: CallAnalyticsJob?

        public init(callAnalyticsJob: CallAnalyticsJob? = nil) {
            self.callAnalyticsJob = callAnalyticsJob
        }

        private enum CodingKeys: String, CodingKey {
            case callAnalyticsJob = "CallAnalyticsJob"
        }
    }

    public struct StartMedicalTranscriptionJobRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "medicalTranscriptionJobName", location: .uri("MedicalTranscriptionJobName"))
        ]

        /// Labels all personal health information (PHI) identified in your transcript. For more information,  see Identifying personal health  information (PHI) in a transcription.
        public let contentIdentificationType: MedicalContentIdentificationType?
        /// A map of plain text, non-secret key:value pairs, known as encryption context pairs, that  provide an added layer of security for your data. For more information, see  KMS  encryption context and Asymmetric keys in  KMS.
        public let kmsEncryptionContext: [String: String]?
        /// The language code that represents the language spoken in the input media file. US English (en-US) is the only valid value for medical transcription jobs. Any other value  you enter for language code results in a BadRequestException error.
        public let languageCode: LanguageCode
        public let media: Media
        /// Specify the format of your input media file.
        public let mediaFormat: MediaFormat?
        /// The sample rate, in Hertz, of the audio track in your input media file. If you don't specify the media sample rate, Amazon Transcribe Medical determines it for you. If you specify the sample rate, it must match the rate detected by Amazon Transcribe  Medical; if there's a mismatch between the value you specify and the value detected, your job  fails. Therefore, in most cases, it's advised to omit MediaSampleRateHertz and let Amazon Transcribe Medical determine the sample rate.
        public let mediaSampleRateHertz: Int?
        /// A unique name, chosen by you, for your medical transcription job. The name you specify is  also used as the default name of your transcription output file. If you want to specify a different  name for your transcription output, use the OutputKey parameter. This name is case sensitive, cannot contain spaces, and must be unique within an  Amazon Web Services account. If you try to create a new job with the same name as an  existing job, you get a ConflictException error.
        public let medicalTranscriptionJobName: String
        /// The name of the Amazon S3 bucket where you want your medical transcription  output stored. Do not include the S3:// prefix of the specified bucket. If you want your output to go to a sub-folder of this bucket, specify it using the OutputKey parameter; OutputBucketName only accepts the  name of a bucket. For example, if you want your output stored in S3://DOC-EXAMPLE-BUCKET, set OutputBucketName to DOC-EXAMPLE-BUCKET. However, if  you want your output stored in S3://DOC-EXAMPLE-BUCKET/test-files/, set OutputBucketName to DOC-EXAMPLE-BUCKET and OutputKey to test-files/. Note that Amazon Transcribe must have permission to use the specified location. You can change Amazon S3 permissions using the Amazon Web Services Management Console. See also Permissions Required for IAM User Roles. If you don't specify OutputBucketName, your transcript is placed in a  service-managed Amazon S3 bucket and you are provided with a URI to access your  transcript.
        public let outputBucketName: String
        /// The KMS key you want to use to encrypt your medical transcription output. If using a key located in the current  Amazon Web Services account, you can specify your KMS key in one of  four ways:   Use the KMS key ID itself. For example,  1234abcd-12ab-34cd-56ef-1234567890ab.   Use an alias for the KMS key ID. For example, alias/ExampleAlias.   Use the Amazon Resource Name (ARN) for the KMS key ID. For  example,                    arn:aws:kms:region:account-ID:key/1234abcd-12ab-34cd-56ef-1234567890ab.   Use the ARN for the KMS key alias. For example,  arn:aws:kms:region:account-ID:alias/ExampleAlias.   If using a key located in a different  Amazon Web Services account than the current Amazon Web Services account, you can  specify your KMS key in one of two ways:   Use the ARN for the KMS key ID. For example,                     arn:aws:kms:region:account-ID:key/1234abcd-12ab-34cd-56ef-1234567890ab.   Use the ARN for the KMS key alias. For example,  arn:aws:kms:region:account-ID:alias/ExampleAlias.   If you don't specify an encryption key, your output is encrypted with the default  Amazon S3 key (SSE-S3).  If you specify a KMS key to encrypt your output, you must also specify  an output location using the OutputLocation parameter. Note that the user making the   request must have permission to use the specified KMS key.
        public let outputEncryptionKMSKeyId: String?
        /// Use in combination with OutputBucketName to specify the output location of your transcript and, optionally, a unique name for your output file. The default name for your  transcription output is the same as the name you specified for your medical transcription job  (MedicalTranscriptionJobName). Here are some examples of how you can use OutputKey:   If you specify 'DOC-EXAMPLE-BUCKET' as the OutputBucketName and 'my-transcript.json' as the OutputKey, your transcription output  path is s3://DOC-EXAMPLE-BUCKET/my-transcript.json.      If you specify 'my-first-transcription' as the MedicalTranscriptionJobName, 'DOC-EXAMPLE-BUCKET' as the OutputBucketName, and  'my-transcript' as the OutputKey, your transcription output path is  s3://DOC-EXAMPLE-BUCKET/my-transcript/my-first-transcription.json.      If you specify 'DOC-EXAMPLE-BUCKET' as the OutputBucketName and 'test-files/my-transcript.json' as the OutputKey, your transcription output  path is s3://DOC-EXAMPLE-BUCKET/test-files/my-transcript.json.      If you specify 'my-first-transcription' as the MedicalTranscriptionJobName, 'DOC-EXAMPLE-BUCKET' as the OutputBucketName, and  'test-files/my-transcript' as the OutputKey, your transcription output path is  s3://DOC-EXAMPLE-BUCKET/test-files/my-transcript/my-first-transcription.json.    If you specify the name of an Amazon S3 bucket sub-folder that doesn't exist, one is  created for you.
        public let outputKey: String?
        /// Specify additional optional settings in your   request, including channel identification, alternative transcriptions, and speaker labeling; allows  you to apply custom vocabularies to your transcription job.
        public let settings: MedicalTranscriptionSetting?
        /// Specify the predominant medical specialty represented in your media. For batch  transcriptions, PRIMARYCARE is the only valid value. If you require additional  specialties, refer to .
        public let specialty: Specialty
        /// Adds one or more custom tags, each in the form of a key:value pair, to a new medical  transcription job at the time you start this new job. To learn more about using tags with Amazon Transcribe, refer to Tagging resources.
        public let tags: [Tag]?
        /// Specify whether your input media contains only one person (DICTATION) or  contains a conversation between two people (CONVERSATION). For example, DICTATION could be used for a medical professional wanting to transcribe voice memos; CONVERSATION could be used for transcribing the  doctor-patient dialogue during the patient's office visit.
        public let type: `Type`

        public init(contentIdentificationType: MedicalContentIdentificationType? = nil, kmsEncryptionContext: [String: String]? = nil, languageCode: LanguageCode, media: Media, mediaFormat: MediaFormat? = nil, mediaSampleRateHertz: Int? = nil, medicalTranscriptionJobName: String, outputBucketName: String, outputEncryptionKMSKeyId: String? = nil, outputKey: String? = nil, settings: MedicalTranscriptionSetting? = nil, specialty: Specialty, tags: [Tag]? = nil, type: `Type`) {
            self.contentIdentificationType = contentIdentificationType
            self.kmsEncryptionContext = kmsEncryptionContext
            self.languageCode = languageCode
            self.media = media
            self.mediaFormat = mediaFormat
            self.mediaSampleRateHertz = mediaSampleRateHertz
            self.medicalTranscriptionJobName = medicalTranscriptionJobName
            self.outputBucketName = outputBucketName
            self.outputEncryptionKMSKeyId = outputEncryptionKMSKeyId
            self.outputKey = outputKey
            self.settings = settings
            self.specialty = specialty
            self.tags = tags
            self.type = type
        }

        public func validate(name: String) throws {
            try self.kmsEncryptionContext?.forEach {
                try validate($0.key, name: "kmsEncryptionContext.key", parent: name, max: 2000)
                try validate($0.key, name: "kmsEncryptionContext.key", parent: name, min: 1)
                try validate($0.key, name: "kmsEncryptionContext.key", parent: name, pattern: "\\S")
                try validate($0.value, name: "kmsEncryptionContext[\"\($0.key)\"]", parent: name, max: 2000)
                try validate($0.value, name: "kmsEncryptionContext[\"\($0.key)\"]", parent: name, min: 1)
                try validate($0.value, name: "kmsEncryptionContext[\"\($0.key)\"]", parent: name, pattern: "\\S")
            }
            try self.validate(self.kmsEncryptionContext, name: "kmsEncryptionContext", parent: name, max: 10)
            try self.validate(self.kmsEncryptionContext, name: "kmsEncryptionContext", parent: name, min: 1)
            try self.media.validate(name: "\(name).media")
            try self.validate(self.mediaSampleRateHertz, name: "mediaSampleRateHertz", parent: name, max: 48000)
            try self.validate(self.mediaSampleRateHertz, name: "mediaSampleRateHertz", parent: name, min: 16000)
            try self.validate(self.medicalTranscriptionJobName, name: "medicalTranscriptionJobName", parent: name, max: 200)
            try self.validate(self.medicalTranscriptionJobName, name: "medicalTranscriptionJobName", parent: name, min: 1)
            try self.validate(self.medicalTranscriptionJobName, name: "medicalTranscriptionJobName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.validate(self.outputBucketName, name: "outputBucketName", parent: name, max: 64)
            try self.validate(self.outputBucketName, name: "outputBucketName", parent: name, pattern: "^[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]$")
            try self.validate(self.outputEncryptionKMSKeyId, name: "outputEncryptionKMSKeyId", parent: name, max: 2048)
            try self.validate(self.outputEncryptionKMSKeyId, name: "outputEncryptionKMSKeyId", parent: name, min: 1)
            try self.validate(self.outputEncryptionKMSKeyId, name: "outputEncryptionKMSKeyId", parent: name, pattern: "^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$")
            try self.validate(self.outputKey, name: "outputKey", parent: name, max: 1024)
            try self.validate(self.outputKey, name: "outputKey", parent: name, min: 1)
            try self.validate(self.outputKey, name: "outputKey", parent: name, pattern: "^[a-zA-Z0-9-_.!*'()/]{1,1024}$")
            try self.settings?.validate(name: "\(name).settings")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case contentIdentificationType = "ContentIdentificationType"
            case kmsEncryptionContext = "KMSEncryptionContext"
            case languageCode = "LanguageCode"
            case media = "Media"
            case mediaFormat = "MediaFormat"
            case mediaSampleRateHertz = "MediaSampleRateHertz"
            case outputBucketName = "OutputBucketName"
            case outputEncryptionKMSKeyId = "OutputEncryptionKMSKeyId"
            case outputKey = "OutputKey"
            case settings = "Settings"
            case specialty = "Specialty"
            case tags = "Tags"
            case type = "Type"
        }
    }

    public struct StartMedicalTranscriptionJobResponse: AWSDecodableShape {
        /// Provides detailed information about the current medical transcription job, including job status and, if applicable, failure reason.
        public let medicalTranscriptionJob: MedicalTranscriptionJob?

        public init(medicalTranscriptionJob: MedicalTranscriptionJob? = nil) {
            self.medicalTranscriptionJob = medicalTranscriptionJob
        }

        private enum CodingKeys: String, CodingKey {
            case medicalTranscriptionJob = "MedicalTranscriptionJob"
        }
    }

    public struct StartTranscriptionJobRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "transcriptionJobName", location: .uri("TranscriptionJobName"))
        ]

        /// Allows you to redact or flag specified personally identifiable information (PII) in your transcript. If  you use ContentRedaction, you must also include the sub-parameters: PiiEntityTypes, RedactionOutput, and  RedactionType.
        public let contentRedaction: ContentRedaction?
        /// Enables automatic language identification in your transcription job request. If you include IdentifyLanguage, you can optionally include a list of  language codes, using LanguageOptions, that you think may be present in  your media file. Including language options can improve transcription accuracy. If you want to apply a custom language model, a custom vocabulary, or a custom  vocabulary filter to your automatic language identification request, include LanguageIdSettings with the relevant sub-parameters  (VocabularyName, LanguageModelName, and  VocabularyFilterName). Note that you must include one of LanguageCode,  IdentifyLanguage, or IdentifyMultipleLanguages in your  request. If you include more than one of these parameters, your transcription job  fails.
        public let identifyLanguage: Bool?
        /// Enables automatic multi-language identification in your transcription job request. Use this parameter if your media file contains more than one language. If you include IdentifyMultipleLanguages, you can optionally include a list  of language codes, using LanguageOptions, that you think may be present in  your media file. Including language options can improve transcription accuracy. If you want to apply a custom vocabulary or a custom vocabulary filter to your automatic language identification request, include LanguageIdSettings with the relevant sub-parameters (VocabularyName and  VocabularyFilterName). Note that you must include one of LanguageCode,  IdentifyLanguage, or IdentifyMultipleLanguages in your  request. If you include more than one of these parameters, your transcription job fails.
        public let identifyMultipleLanguages: Bool?
        /// Allows you to control how your transcription job is processed. Currently, the only JobExecutionSettings modification you can choose is enabling job queueing using  the AllowDeferredExecution sub-parameter. If you include JobExecutionSettings in your request, you must also include the sub-parameters: AllowDeferredExecution and  DataAccessRoleArn.
        public let jobExecutionSettings: JobExecutionSettings?
        /// A map of plain text, non-secret key:value pairs, known as encryption context pairs, that  provide an added layer of security for your data. For more information, see  KMS  encryption context and Asymmetric keys in  KMS.
        public let kmsEncryptionContext: [String: String]?
        /// The language code that represents the language spoken in the input media file. If you're unsure of the language spoken in your media file, consider using  IdentifyLanguage or IdentifyMultipleLanguages to enable  automatic language identification. Note that you must include one of LanguageCode,  IdentifyLanguage, or IdentifyMultipleLanguages in your  request. If you include more than one of these parameters, your transcription job  fails. For a list of supported languages and their associated language codes, refer to the  Supported languages table.    To transcribe speech in Modern Standard Arabic (ar-SA), your media file  must be encoded at a sample rate of 16,000 Hz or higher.
        public let languageCode: LanguageCode?
        /// If using automatic language identification (IdentifyLanguage) in your request  and you want to apply a custom language model, a custom vocabulary, or a custom vocabulary filter, include LanguageIdSettings with the relevant sub-parameters  (VocabularyName, LanguageModelName, and  VocabularyFilterName). You can specify two or more language codes that represent the languages you think may be  present in your media; including more than five is not recommended. Each language code you  include can have an associated custom language model, custom vocabulary, and custom  vocabulary filter. The languages you specify must match the languages of the specified custom language models, custom vocabularies, and custom vocabulary filters. To include language options using IdentifyLanguage  without including a custom language model, a custom  vocabulary, or a custom vocabulary filter, use LanguageOptions instead of LanguageIdSettings. Including language options can improve the accuracy of  automatic language identification. If you want to include a custom language model with your request but  do not want to use automatic language identification, use instead the  parameter with the LanguageModelName sub-parameter. If you want to include a custom vocabulary or a custom vocabulary filter (or both) with your request but do not want to use automatic  language identification, use instead the   parameter with the VocabularyName or  VocabularyFilterName (or both) sub-parameter.
        public let languageIdSettings: [LanguageCode: LanguageIdSettings]?
        /// You can specify two or more language codes that represent the languages you think may  be present in your media; including more than five is not recommended. If you're unsure what languages are present, do not include this parameter. If you include LanguageOptions in your request, you must also include  IdentifyLanguage. For more information, refer to Supported languages. To transcribe speech in Modern Standard Arabic (ar-SA), your media file  must be encoded at a sample rate of 16,000 Hz or higher.
        public let languageOptions: [LanguageCode]?
        /// Describes the Amazon S3 location of the media file you want to use in your  request.
        public let media: Media
        /// Specify the format of your input media file.
        public let mediaFormat: MediaFormat?
        /// The sample rate, in Hertz, of the audio track in your input media file. If you don't specify the media sample rate, Amazon Transcribe determines it for you. If you specify the sample rate, it must match the rate detected by Amazon Transcribe; if there's a mismatch between the value you specify and the value detected, your job fails. Therefore, in most  cases, it's advised to omit MediaSampleRateHertz and let Amazon Transcribe  determine the sample rate.
        public let mediaSampleRateHertz: Int?
        /// Specify the custom language model you want to include with your transcription job. If you  include ModelSettings in your request, you must include the  LanguageModelName sub-parameter. For more information, see Custom language  models.
        public let modelSettings: ModelSettings?
        /// The name of the Amazon S3 bucket where you want your transcription output  stored. Do not include the S3:// prefix of the specified bucket. If you want your output to go to a sub-folder of this bucket, specify it using the OutputKey parameter; OutputBucketName only accepts the  name of a bucket. For example, if you want your output stored in S3://DOC-EXAMPLE-BUCKET, set OutputBucketName to DOC-EXAMPLE-BUCKET. However, if  you want your output stored in S3://DOC-EXAMPLE-BUCKET/test-files/, set OutputBucketName to DOC-EXAMPLE-BUCKET and OutputKey to test-files/. Note that Amazon Transcribe must have permission to use the specified location. You can change Amazon S3 permissions using the Amazon Web Services Management Console. See also Permissions Required for IAM User Roles. If you don't specify OutputBucketName, your transcript is placed in a  service-managed Amazon S3 bucket and you are provided with a URI to access your  transcript.
        public let outputBucketName: String?
        /// The KMS key you want to use to encrypt your transcription output. If using a key located in the current  Amazon Web Services account, you can specify your KMS key in one of  four ways:   Use the KMS key ID itself. For example,  1234abcd-12ab-34cd-56ef-1234567890ab.   Use an alias for the KMS key ID. For example, alias/ExampleAlias.   Use the Amazon Resource Name (ARN) for the KMS key ID. For  example,                    arn:aws:kms:region:account-ID:key/1234abcd-12ab-34cd-56ef-1234567890ab.   Use the ARN for the KMS key alias. For example,  arn:aws:kms:region:account-ID:alias/ExampleAlias.   If using a key located in a different  Amazon Web Services account than the current Amazon Web Services account, you can  specify your KMS key in one of two ways:   Use the ARN for the KMS key ID. For example,                     arn:aws:kms:region:account-ID:key/1234abcd-12ab-34cd-56ef-1234567890ab.     Use the ARN for the KMS key alias. For example,  arn:aws:kms:region:account-ID:alias/ExampleAlias.   If you don't specify an encryption key, your output is encrypted with the default  Amazon S3 key (SSE-S3).  If you specify a KMS key to encrypt your output, you must also specify  an output location using the OutputLocation parameter. Note that the user making the   request must have permission to use the specified KMS key.
        public let outputEncryptionKMSKeyId: String?
        /// Use in combination with OutputBucketName to specify the output location of your transcript and, optionally, a unique name for your output file. The default name for your  transcription output is the same as the name you specified for your transcription job  (TranscriptionJobName). Here are some examples of how you can use OutputKey:   If you specify 'DOC-EXAMPLE-BUCKET' as the OutputBucketName and 'my-transcript.json' as the OutputKey, your transcription output  path is s3://DOC-EXAMPLE-BUCKET/my-transcript.json.      If you specify 'my-first-transcription' as the TranscriptionJobName, 'DOC-EXAMPLE-BUCKET' as the OutputBucketName, and  'my-transcript' as the OutputKey, your transcription output path is  s3://DOC-EXAMPLE-BUCKET/my-transcript/my-first-transcription.json.      If you specify 'DOC-EXAMPLE-BUCKET' as the OutputBucketName and 'test-files/my-transcript.json' as the OutputKey, your transcription  output path is  s3://DOC-EXAMPLE-BUCKET/test-files/my-transcript.json.      If you specify 'my-first-transcription' as the TranscriptionJobName, 'DOC-EXAMPLE-BUCKET' as the OutputBucketName, and  'test-files/my-transcript' as the OutputKey, your transcription output  path is  s3://DOC-EXAMPLE-BUCKET/test-files/my-transcript/my-first-transcription.json.   If you specify the name of an Amazon S3 bucket sub-folder that doesn't exist, one is  created for you.
        public let outputKey: String?
        /// Specify additional optional settings in your   request, including channel identification, alternative transcriptions, speaker labeling; allows  you to apply custom vocabularies and vocabulary filters. If you want to include a custom vocabulary or a custom vocabulary filter (or both) with  your request but do not want to use automatic language identification, use Settings with the VocabularyName or VocabularyFilterName (or both) sub-parameter. If you're using automatic language identification with your request and want to include a custom language model, a custom vocabulary, or a custom vocabulary filter, use instead the  parameter with the LanguageModelName, VocabularyName  or VocabularyFilterName sub-parameters.
        public let settings: Settings?
        /// Produces subtitle files for your input media. You can specify WebVTT (*.vtt) and SubRip (*.srt) formats.
        public let subtitles: Subtitles?
        /// Adds one or more custom tags, each in the form of a key:value pair, to a new transcription  job at the time you start this new job. To learn more about using tags with Amazon Transcribe, refer to Tagging resources.
        public let tags: [Tag]?
        /// A unique name, chosen by you, for your transcription job. The name you specify is  also used as the default name of your transcription output file. If you want to specify a different  name for your transcription output, use the OutputKey parameter. This name is case sensitive, cannot contain spaces, and must be unique within an  Amazon Web Services account. If you try to create a new job with the same name as an  existing job, you get a ConflictException error.
        public let transcriptionJobName: String

        public init(contentRedaction: ContentRedaction? = nil, identifyLanguage: Bool? = nil, identifyMultipleLanguages: Bool? = nil, jobExecutionSettings: JobExecutionSettings? = nil, kmsEncryptionContext: [String: String]? = nil, languageCode: LanguageCode? = nil, languageIdSettings: [LanguageCode: LanguageIdSettings]? = nil, languageOptions: [LanguageCode]? = nil, media: Media, mediaFormat: MediaFormat? = nil, mediaSampleRateHertz: Int? = nil, modelSettings: ModelSettings? = nil, outputBucketName: String? = nil, outputEncryptionKMSKeyId: String? = nil, outputKey: String? = nil, settings: Settings? = nil, subtitles: Subtitles? = nil, tags: [Tag]? = nil, transcriptionJobName: String) {
            self.contentRedaction = contentRedaction
            self.identifyLanguage = identifyLanguage
            self.identifyMultipleLanguages = identifyMultipleLanguages
            self.jobExecutionSettings = jobExecutionSettings
            self.kmsEncryptionContext = kmsEncryptionContext
            self.languageCode = languageCode
            self.languageIdSettings = languageIdSettings
            self.languageOptions = languageOptions
            self.media = media
            self.mediaFormat = mediaFormat
            self.mediaSampleRateHertz = mediaSampleRateHertz
            self.modelSettings = modelSettings
            self.outputBucketName = outputBucketName
            self.outputEncryptionKMSKeyId = outputEncryptionKMSKeyId
            self.outputKey = outputKey
            self.settings = settings
            self.subtitles = subtitles
            self.tags = tags
            self.transcriptionJobName = transcriptionJobName
        }

        public func validate(name: String) throws {
            try self.contentRedaction?.validate(name: "\(name).contentRedaction")
            try self.jobExecutionSettings?.validate(name: "\(name).jobExecutionSettings")
            try self.kmsEncryptionContext?.forEach {
                try validate($0.key, name: "kmsEncryptionContext.key", parent: name, max: 2000)
                try validate($0.key, name: "kmsEncryptionContext.key", parent: name, min: 1)
                try validate($0.key, name: "kmsEncryptionContext.key", parent: name, pattern: "\\S")
                try validate($0.value, name: "kmsEncryptionContext[\"\($0.key)\"]", parent: name, max: 2000)
                try validate($0.value, name: "kmsEncryptionContext[\"\($0.key)\"]", parent: name, min: 1)
                try validate($0.value, name: "kmsEncryptionContext[\"\($0.key)\"]", parent: name, pattern: "\\S")
            }
            try self.validate(self.kmsEncryptionContext, name: "kmsEncryptionContext", parent: name, max: 10)
            try self.validate(self.kmsEncryptionContext, name: "kmsEncryptionContext", parent: name, min: 1)
            try self.languageIdSettings?.forEach {
                try $0.value.validate(name: "\(name).languageIdSettings[\"\($0.key)\"]")
            }
            try self.validate(self.languageIdSettings, name: "languageIdSettings", parent: name, max: 5)
            try self.validate(self.languageIdSettings, name: "languageIdSettings", parent: name, min: 1)
            try self.validate(self.languageOptions, name: "languageOptions", parent: name, min: 1)
            try self.media.validate(name: "\(name).media")
            try self.validate(self.mediaSampleRateHertz, name: "mediaSampleRateHertz", parent: name, max: 48000)
            try self.validate(self.mediaSampleRateHertz, name: "mediaSampleRateHertz", parent: name, min: 8000)
            try self.modelSettings?.validate(name: "\(name).modelSettings")
            try self.validate(self.outputBucketName, name: "outputBucketName", parent: name, max: 64)
            try self.validate(self.outputBucketName, name: "outputBucketName", parent: name, pattern: "^[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]$")
            try self.validate(self.outputEncryptionKMSKeyId, name: "outputEncryptionKMSKeyId", parent: name, max: 2048)
            try self.validate(self.outputEncryptionKMSKeyId, name: "outputEncryptionKMSKeyId", parent: name, min: 1)
            try self.validate(self.outputEncryptionKMSKeyId, name: "outputEncryptionKMSKeyId", parent: name, pattern: "^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$")
            try self.validate(self.outputKey, name: "outputKey", parent: name, max: 1024)
            try self.validate(self.outputKey, name: "outputKey", parent: name, min: 1)
            try self.validate(self.outputKey, name: "outputKey", parent: name, pattern: "^[a-zA-Z0-9-_.!*'()/]{1,1024}$")
            try self.settings?.validate(name: "\(name).settings")
            try self.subtitles?.validate(name: "\(name).subtitles")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
            try self.validate(self.transcriptionJobName, name: "transcriptionJobName", parent: name, max: 200)
            try self.validate(self.transcriptionJobName, name: "transcriptionJobName", parent: name, min: 1)
            try self.validate(self.transcriptionJobName, name: "transcriptionJobName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case contentRedaction = "ContentRedaction"
            case identifyLanguage = "IdentifyLanguage"
            case identifyMultipleLanguages = "IdentifyMultipleLanguages"
            case jobExecutionSettings = "JobExecutionSettings"
            case kmsEncryptionContext = "KMSEncryptionContext"
            case languageCode = "LanguageCode"
            case languageIdSettings = "LanguageIdSettings"
            case languageOptions = "LanguageOptions"
            case media = "Media"
            case mediaFormat = "MediaFormat"
            case mediaSampleRateHertz = "MediaSampleRateHertz"
            case modelSettings = "ModelSettings"
            case outputBucketName = "OutputBucketName"
            case outputEncryptionKMSKeyId = "OutputEncryptionKMSKeyId"
            case outputKey = "OutputKey"
            case settings = "Settings"
            case subtitles = "Subtitles"
            case tags = "Tags"
        }
    }

    public struct StartTranscriptionJobResponse: AWSDecodableShape {
        /// Provides detailed information about the current transcription job, including job status and, if applicable, failure reason.
        public let transcriptionJob: TranscriptionJob?

        public init(transcriptionJob: TranscriptionJob? = nil) {
            self.transcriptionJob = transcriptionJob
        }

        private enum CodingKeys: String, CodingKey {
            case transcriptionJob = "TranscriptionJob"
        }
    }

    public struct Subtitles: AWSEncodableShape {
        /// Specify the output format for your subtitle file; if you select both WebVTT  (vtt) and SubRip (srt) formats, two output files are  generated.
        public let formats: [SubtitleFormat]?
        /// Specify the starting value that is assigned to the first subtitle segment. The default start index for Amazon Transcribe is 0, which differs from the more widely used standard of 1. If you're uncertain which value to use, we recommend choosing 1, as this may improve compatibility with other services.
        public let outputStartIndex: Int?

        public init(formats: [SubtitleFormat]? = nil, outputStartIndex: Int? = nil) {
            self.formats = formats
            self.outputStartIndex = outputStartIndex
        }

        public func validate(name: String) throws {
            try self.validate(self.outputStartIndex, name: "outputStartIndex", parent: name, max: 1)
            try self.validate(self.outputStartIndex, name: "outputStartIndex", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case formats = "Formats"
            case outputStartIndex = "OutputStartIndex"
        }
    }

    public struct SubtitlesOutput: AWSDecodableShape {
        /// Provides the format of your subtitle files. If your request included both WebVTT  (vtt) and SubRip (srt) formats, both formats are  shown.
        public let formats: [SubtitleFormat]?
        /// Provides the start index value for your subtitle files. If you did not specify a value in your request, the default value of 0 is used.
        public let outputStartIndex: Int?
        /// The Amazon S3 location of your transcript. You can use this URI to access or  download your subtitle file. Your subtitle file is stored in the same location as your  transcript. If you specified both WebVTT and SubRip subtitle formats, two URIs are  provided. If you included OutputBucketName in your transcription job request, this is the URI of that bucket. If you also included OutputKey in your request, your  output is located in the path you specified in your request. If you didn't include OutputBucketName in your transcription job request, your subtitle file is stored in a service-managed bucket, and TranscriptFileUri provides you with a temporary URI you can use for secure access to your subtitle file.  Temporary URIs for service-managed Amazon S3 buckets are only valid for 15  minutes. If you get an AccesDenied error, you can get a new temporary  URI by running a GetTranscriptionJob or  ListTranscriptionJob request.
        public let subtitleFileUris: [String]?

        public init(formats: [SubtitleFormat]? = nil, outputStartIndex: Int? = nil, subtitleFileUris: [String]? = nil) {
            self.formats = formats
            self.outputStartIndex = outputStartIndex
            self.subtitleFileUris = subtitleFileUris
        }

        private enum CodingKeys: String, CodingKey {
            case formats = "Formats"
            case outputStartIndex = "OutputStartIndex"
            case subtitleFileUris = "SubtitleFileUris"
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        /// The first part of a key:value pair that forms a tag associated with a given resource. For example, in the tag Department:Sales, the key is 'Department'.
        public let key: String
        /// The second part of a key:value pair that forms a tag associated with a given resource. For example, in the tag Department:Sales, the value is 'Sales'. Note that you can set the value of a tag to an empty string, but you can't set the value of a tag to null. Omitting the tag value is the same as using an empty string.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.key, name: "key", parent: name, max: 128)
            try self.validate(self.key, name: "key", parent: name, min: 1)
            try self.validate(self.value, name: "value", parent: name, max: 256)
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct TagResourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .uri("ResourceArn"))
        ]

        /// The Amazon Resource Name (ARN) of the resource you want to tag. ARNs have the format arn:partition:service:region:account-id:resource-type/resource-id. For example,  arn:aws:transcribe:us-west-2:account-id:transcription-job/transcription-job-name. Valid values for resource-type are: transcription-job, medical-transcription-job, vocabulary,  medical-vocabulary, vocabulary-filter, and  language-model.
        public let resourceArn: String
        /// Adds one or more custom tags, each in the form of a key:value pair, to the specified  resource. To learn more about using tags with Amazon Transcribe, refer to Tagging resources.
        public let tags: [Tag]

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1011)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "^arn:aws(-[^:]+)?:transcribe:[a-zA-Z0-9-]*:[0-9]{12}:[a-zA-Z-]*/[0-9a-zA-Z._-]+$")
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct TagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct Transcript: AWSDecodableShape {
        /// The Amazon S3 location of your redacted transcript. You can use this URI to access or download your transcript. If you included OutputBucketName in your transcription job request, this is the URI of that bucket. If you also included OutputKey in your request, your  output is located in the path you specified in your request. If you didn't include OutputBucketName in your transcription job request, your transcript is stored in a service-managed bucket, and  RedactedTranscriptFileUri provides you with a temporary URI you can use for  secure access to your transcript.  Temporary URIs for service-managed Amazon S3 buckets are only valid for 15  minutes. If you get an AccesDenied error, you can get a new temporary  URI by running a GetTranscriptionJob or  ListTranscriptionJob request.
        public let redactedTranscriptFileUri: String?
        /// The Amazon S3 location of your transcript. You can use this URI to access or  download your transcript. If you included OutputBucketName in your transcription job request, this is the URI of that bucket. If you also included OutputKey in your request, your  output is located in the path you specified in your request. If you didn't include OutputBucketName in your transcription job request, your transcript is stored in a service-managed bucket, and TranscriptFileUri provides you with a temporary URI you can use for secure access to your transcript.  Temporary URIs for service-managed Amazon S3 buckets are only valid for 15  minutes. If you get an AccesDenied error, you can get a new temporary  URI by running a GetTranscriptionJob or  ListTranscriptionJob request.
        public let transcriptFileUri: String?

        public init(redactedTranscriptFileUri: String? = nil, transcriptFileUri: String? = nil) {
            self.redactedTranscriptFileUri = redactedTranscriptFileUri
            self.transcriptFileUri = transcriptFileUri
        }

        private enum CodingKeys: String, CodingKey {
            case redactedTranscriptFileUri = "RedactedTranscriptFileUri"
            case transcriptFileUri = "TranscriptFileUri"
        }
    }

    public struct TranscriptFilter: AWSEncodableShape & AWSDecodableShape {
        /// Allows you to specify a time range (in milliseconds) in your audio, during which you want to search for the specified key words or phrases. See   for more detail.
        public let absoluteTimeRange: AbsoluteTimeRange?
        /// Set to TRUE to flag the absence of the phrase you specified in your request. Set to FALSE to flag the presence of the phrase you specified in your request.
        public let negate: Bool?
        /// Specify the participant you want to flag. Omitting this parameter is equivalent to specifying both participants.
        public let participantRole: ParticipantRole?
        /// Allows you to specify a time range (in percentage) in your media file, during which you want to search for the specified key words or phrases. See  for more detail.
        public let relativeTimeRange: RelativeTimeRange?
        /// Specify the phrases you want to flag.
        public let targets: [String]
        /// Flag the presence or absence of an exact match to the phrases you specify. For example, if you specify the phrase "speak to a manager" as your Targets value, only that exact phrase is flagged. Note that semantic matching is not supported. For example, if your customer says "speak to  the manager", instead of "speak to a manager", your content is not flagged.
        public let transcriptFilterType: TranscriptFilterType

        public init(absoluteTimeRange: AbsoluteTimeRange? = nil, negate: Bool? = nil, participantRole: ParticipantRole? = nil, relativeTimeRange: RelativeTimeRange? = nil, targets: [String], transcriptFilterType: TranscriptFilterType) {
            self.absoluteTimeRange = absoluteTimeRange
            self.negate = negate
            self.participantRole = participantRole
            self.relativeTimeRange = relativeTimeRange
            self.targets = targets
            self.transcriptFilterType = transcriptFilterType
        }

        public func validate(name: String) throws {
            try self.absoluteTimeRange?.validate(name: "\(name).absoluteTimeRange")
            try self.relativeTimeRange?.validate(name: "\(name).relativeTimeRange")
            try self.targets.forEach {
                try validate($0, name: "targets[]", parent: name, max: 2000)
                try validate($0, name: "targets[]", parent: name, min: 1)
                try validate($0, name: "targets[]", parent: name, pattern: "\\S")
            }
            try self.validate(self.targets, name: "targets", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case absoluteTimeRange = "AbsoluteTimeRange"
            case negate = "Negate"
            case participantRole = "ParticipantRole"
            case relativeTimeRange = "RelativeTimeRange"
            case targets = "Targets"
            case transcriptFilterType = "TranscriptFilterType"
        }
    }

    public struct TranscriptionJob: AWSDecodableShape {
        /// The date and time the specified transcription job finished processing. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:33:13.922000-07:00 represents a transcription job that started processing at 12:33 PM UTC-7 on May 4, 2022.
        public let completionTime: Date?
        /// Redacts or flags specified personally identifiable information (PII) in your transcript.
        public let contentRedaction: ContentRedaction?
        /// The date and time the specified transcription job request was made. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.761000-07:00 represents a transcription job that started processing at 12:32 PM UTC-7 on May 4, 2022.
        public let creationTime: Date?
        /// If TranscriptionJobStatus is FAILED,  FailureReason contains information about why the transcription job request failed. The FailureReason field contains one of the following values:    Unsupported media format. The media format specified in MediaFormat isn't valid. Refer to MediaFormat for a list of supported formats.    The media format provided does not match the detected media  format. The media format specified in MediaFormat doesn't match the  format of the input file. Check the media format of your media file and correct the  specified value.    Invalid sample rate for audio file. The sample rate specified in MediaSampleRateHertz isn't valid. The sample rate must be between 8,000 and 48,000 Hertz.    The sample rate provided does not match the detected sample  rate. The sample rate specified in MediaSampleRateHertz doesn't  match the sample rate detected in your input media file. Check the sample rate of  your media file and correct the specified value.    Invalid file size: file size too large. The size of your media file is larger than what Amazon Transcribe can process.  For more information, refer to Guidelines and quotas.    Invalid number of channels: number of channels too large. Your audio contains more channels than Amazon Transcribe is able to process.  For more information, refer to Guidelines and  quotas.
        public let failureReason: String?
        /// The confidence score associated with the language identified in your media file. Confidence scores are values between 0 and 1; a larger value indicates a higher  probability that the identified language correctly matches the language spoken in your media.
        public let identifiedLanguageScore: Float?
        /// Indicates whether automatic language identification was enabled (TRUE) for the specified transcription job.
        public let identifyLanguage: Bool?
        /// Indicates whether automatic multi-language identification was enabled  (TRUE) for the specified transcription job.
        public let identifyMultipleLanguages: Bool?
        /// Provides information about how your transcription job is being processed. This parameter shows  if your request is queued and what data access role is being used.
        public let jobExecutionSettings: JobExecutionSettings?
        /// The language code used to create your transcription job. For a list of supported languages and their associated language codes, refer to the Supported languages table. Note that you must include one of LanguageCode,  IdentifyLanguage, or IdentifyMultipleLanguages in your  request. If you include more than one of these parameters, your transcription job  fails.
        public let languageCode: LanguageCode?
        /// The language codes used to create your transcription job. This parameter is used with multi-language identification. For single-language identification requests, refer to the singular  version of this parameter, LanguageCode. For a list of supported languages and their associated language codes, refer to the  Supported languages table.
        public let languageCodes: [LanguageCodeItem]?
        /// If using automatic language identification (IdentifyLanguage) in your request  and you want to apply a custom language model, a custom vocabulary, or a custom vocabulary filter, include LanguageIdSettings with the relevant sub-parameters  (VocabularyName, LanguageModelName, and  VocabularyFilterName). You can specify two or more language codes that represent the languages you think may be  present in your media; including more than five is not recommended. Each language code you include can have an associated custom language model, custom vocabulary, and custom  vocabulary filter. The languages you specify must match the languages of the specified custom language models, custom vocabularies, and custom vocabulary filters. To include language options using IdentifyLanguage  without including a custom language model, a custom  vocabulary, or a custom vocabulary filter, use LanguageOptions instead of LanguageIdSettings. Including language options can improve the accuracy of  automatic language identification. If you want to include a custom language model with your request but  do not want to use automatic language identification, use instead the  parameter with the LanguageModelName sub-parameter. If you want to include a custom vocabulary or a custom vocabulary filter (or both) with your request but do not want to use automatic  language identification, use instead the   parameter with the VocabularyName or  VocabularyFilterName (or both) sub-parameter.
        public let languageIdSettings: [LanguageCode: LanguageIdSettings]?
        /// You can specify two or more language codes that represent the languages you think may  be present in your media; including more than five is not recommended. If you're unsure what languages are present, do not include this parameter. If you include LanguageOptions in your request, you must also include  IdentifyLanguage. For more information, refer to Supported languages. To transcribe speech in Modern Standard Arabic (ar-SA), your media file  must be encoded at a sample rate of 16,000 Hz or higher.
        public let languageOptions: [LanguageCode]?
        /// Describes the Amazon S3 location of the media file you want to use in your  request.
        public let media: Media?
        /// The format of the input media file.
        public let mediaFormat: MediaFormat?
        /// The sample rate, in Hertz, of the audio track in your input media file.
        public let mediaSampleRateHertz: Int?
        /// The custom language model you want to include with your transcription job. If you include ModelSettings in your request, you must include the  LanguageModelName sub-parameter.
        public let modelSettings: ModelSettings?
        /// Specify additional optional settings in your   request, including channel identification, alternative transcriptions, speaker labeling; allows you to apply custom vocabularies and vocabulary filters.         If you want to include a custom vocabulary or a custom vocabulary filter (or both) with  your request but do not want to use automatic language identification, use Settings with the VocabularyName or VocabularyFilterName (or both) sub-parameter. If you're using automatic language identification with your request and want to include a custom language model, a custom vocabulary, or a custom vocabulary filter, do not use the  Settings parameter; use instead the   parameter with the LanguageModelName, VocabularyName  or VocabularyFilterName sub-parameters.
        public let settings: Settings?
        /// The date and time the specified transcription job began processing. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.789000-07:00 represents a transcription job that started processing at 12:32 PM UTC-7 on May 4, 2022.
        public let startTime: Date?
        /// Generate subtitles for your media file with your transcription request.
        public let subtitles: SubtitlesOutput?
        /// Adds one or more custom tags, each in the form of a key:value pair, to a new transcription job at the time you start this new job. To learn more about using tags with Amazon Transcribe, refer to Tagging resources.
        public let tags: [Tag]?
        /// Provides you with the Amazon S3 URI you can use to access your transcript.
        public let transcript: Transcript?
        /// The name of the transcription job. Job names are case sensitive and must be unique  within an Amazon Web Services account.
        public let transcriptionJobName: String?
        /// Provides the status of the specified transcription job. If the status is COMPLETED, the job is finished and you can find the results at the location specified in TranscriptFileUri (or RedactedTranscriptFileUri, if you requested transcript redaction). If the status is  FAILED, FailureReason provides details on why your transcription job failed.
        public let transcriptionJobStatus: TranscriptionJobStatus?

        public init(completionTime: Date? = nil, contentRedaction: ContentRedaction? = nil, creationTime: Date? = nil, failureReason: String? = nil, identifiedLanguageScore: Float? = nil, identifyLanguage: Bool? = nil, identifyMultipleLanguages: Bool? = nil, jobExecutionSettings: JobExecutionSettings? = nil, languageCode: LanguageCode? = nil, languageCodes: [LanguageCodeItem]? = nil, languageIdSettings: [LanguageCode: LanguageIdSettings]? = nil, languageOptions: [LanguageCode]? = nil, media: Media? = nil, mediaFormat: MediaFormat? = nil, mediaSampleRateHertz: Int? = nil, modelSettings: ModelSettings? = nil, settings: Settings? = nil, startTime: Date? = nil, subtitles: SubtitlesOutput? = nil, tags: [Tag]? = nil, transcript: Transcript? = nil, transcriptionJobName: String? = nil, transcriptionJobStatus: TranscriptionJobStatus? = nil) {
            self.completionTime = completionTime
            self.contentRedaction = contentRedaction
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.identifiedLanguageScore = identifiedLanguageScore
            self.identifyLanguage = identifyLanguage
            self.identifyMultipleLanguages = identifyMultipleLanguages
            self.jobExecutionSettings = jobExecutionSettings
            self.languageCode = languageCode
            self.languageCodes = languageCodes
            self.languageIdSettings = languageIdSettings
            self.languageOptions = languageOptions
            self.media = media
            self.mediaFormat = mediaFormat
            self.mediaSampleRateHertz = mediaSampleRateHertz
            self.modelSettings = modelSettings
            self.settings = settings
            self.startTime = startTime
            self.subtitles = subtitles
            self.tags = tags
            self.transcript = transcript
            self.transcriptionJobName = transcriptionJobName
            self.transcriptionJobStatus = transcriptionJobStatus
        }

        private enum CodingKeys: String, CodingKey {
            case completionTime = "CompletionTime"
            case contentRedaction = "ContentRedaction"
            case creationTime = "CreationTime"
            case failureReason = "FailureReason"
            case identifiedLanguageScore = "IdentifiedLanguageScore"
            case identifyLanguage = "IdentifyLanguage"
            case identifyMultipleLanguages = "IdentifyMultipleLanguages"
            case jobExecutionSettings = "JobExecutionSettings"
            case languageCode = "LanguageCode"
            case languageCodes = "LanguageCodes"
            case languageIdSettings = "LanguageIdSettings"
            case languageOptions = "LanguageOptions"
            case media = "Media"
            case mediaFormat = "MediaFormat"
            case mediaSampleRateHertz = "MediaSampleRateHertz"
            case modelSettings = "ModelSettings"
            case settings = "Settings"
            case startTime = "StartTime"
            case subtitles = "Subtitles"
            case tags = "Tags"
            case transcript = "Transcript"
            case transcriptionJobName = "TranscriptionJobName"
            case transcriptionJobStatus = "TranscriptionJobStatus"
        }
    }

    public struct TranscriptionJobSummary: AWSDecodableShape {
        /// The date and time the specified transcription job finished processing. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:33:13.922000-07:00 represents a transcription job that started processing at 12:33 PM UTC-7 on May 4, 2022.
        public let completionTime: Date?
        /// The content redaction settings of the transcription job.
        public let contentRedaction: ContentRedaction?
        /// The date and time the specified transcription job request was made. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.761000-07:00 represents a transcription job that started processing at 12:32 PM UTC-7 on May 4, 2022.
        public let creationTime: Date?
        /// If TranscriptionJobStatus is FAILED, FailureReason contains information about why the transcription job  failed. See also: Common Errors.
        public let failureReason: String?
        /// The confidence score associated with the language identified in your media file. Confidence scores are values between 0 and 1; a larger value indicates a higher  probability that the identified language correctly matches the language spoken in your media.
        public let identifiedLanguageScore: Float?
        /// Indicates whether automatic language identification was enabled (TRUE) for the specified transcription job.
        public let identifyLanguage: Bool?
        /// Indicates whether automatic multi-language identification was enabled  (TRUE) for the specified transcription job.
        public let identifyMultipleLanguages: Bool?
        /// The language code used to create your transcription.
        public let languageCode: LanguageCode?
        /// The language codes used to create your transcription job. This parameter is used with multi-language identification. For single-language identification, the singular version of this  parameter, LanguageCode, is present.
        public let languageCodes: [LanguageCodeItem]?
        public let modelSettings: ModelSettings?
        /// Indicates where the specified transcription output is stored. If the value is CUSTOMER_BUCKET, the location is the Amazon S3 bucket you specified using the OutputBucketName parameter in your  request. If you also included  OutputKey in your request, your output is located in the path you specified in your request. If the value is SERVICE_BUCKET, the location is a service-managed  Amazon S3 bucket. To access a transcript stored in a service-managed bucket, use the URI shown in the TranscriptFileUri or RedactedTranscriptFileUri  field.
        public let outputLocationType: OutputLocationType?
        /// The date and time your transcription job began processing. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.789000-07:00 represents a transcription job that started processing at 12:32 PM UTC-7 on May 4, 2022.
        public let startTime: Date?
        /// The name of the transcription job. Job names are case sensitive and must be unique  within an Amazon Web Services account.
        public let transcriptionJobName: String?
        /// Provides the status of your transcription job. If the status is COMPLETED, the job is finished and you can find the results at the location specified in TranscriptFileUri (or RedactedTranscriptFileUri, if you requested transcript redaction). If the status is  FAILED, FailureReason provides details on why your transcription job failed.
        public let transcriptionJobStatus: TranscriptionJobStatus?

        public init(completionTime: Date? = nil, contentRedaction: ContentRedaction? = nil, creationTime: Date? = nil, failureReason: String? = nil, identifiedLanguageScore: Float? = nil, identifyLanguage: Bool? = nil, identifyMultipleLanguages: Bool? = nil, languageCode: LanguageCode? = nil, languageCodes: [LanguageCodeItem]? = nil, modelSettings: ModelSettings? = nil, outputLocationType: OutputLocationType? = nil, startTime: Date? = nil, transcriptionJobName: String? = nil, transcriptionJobStatus: TranscriptionJobStatus? = nil) {
            self.completionTime = completionTime
            self.contentRedaction = contentRedaction
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.identifiedLanguageScore = identifiedLanguageScore
            self.identifyLanguage = identifyLanguage
            self.identifyMultipleLanguages = identifyMultipleLanguages
            self.languageCode = languageCode
            self.languageCodes = languageCodes
            self.modelSettings = modelSettings
            self.outputLocationType = outputLocationType
            self.startTime = startTime
            self.transcriptionJobName = transcriptionJobName
            self.transcriptionJobStatus = transcriptionJobStatus
        }

        private enum CodingKeys: String, CodingKey {
            case completionTime = "CompletionTime"
            case contentRedaction = "ContentRedaction"
            case creationTime = "CreationTime"
            case failureReason = "FailureReason"
            case identifiedLanguageScore = "IdentifiedLanguageScore"
            case identifyLanguage = "IdentifyLanguage"
            case identifyMultipleLanguages = "IdentifyMultipleLanguages"
            case languageCode = "LanguageCode"
            case languageCodes = "LanguageCodes"
            case modelSettings = "ModelSettings"
            case outputLocationType = "OutputLocationType"
            case startTime = "StartTime"
            case transcriptionJobName = "TranscriptionJobName"
            case transcriptionJobStatus = "TranscriptionJobStatus"
        }
    }

    public struct UntagResourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .uri("ResourceArn"))
        ]

        /// The Amazon Resource Name (ARN) of the Amazon Transcribe resource you want to remove tags from. ARNs have the format arn:partition:service:region:account-id:resource-type/resource-id. For example,  arn:aws:transcribe:us-west-2:account-id:transcription-job/transcription-job-name. Valid values for resource-type are: transcription-job, medical-transcription-job, vocabulary,  medical-vocabulary, vocabulary-filter, and  language-model.
        public let resourceArn: String
        /// Removes the specified tag keys from the specified Amazon Transcribe resource.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1011)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "^arn:aws(-[^:]+)?:transcribe:[a-zA-Z0-9-]*:[0-9]{12}:[a-zA-Z-]*/[0-9a-zA-Z._-]+$")
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
            }
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, max: 200)
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case tagKeys = "TagKeys"
        }
    }

    public struct UntagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct UpdateCallAnalyticsCategoryRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "categoryName", location: .uri("CategoryName"))
        ]

        /// The name of the Call Analytics category you want to update. Category names are case sensitive.
        public let categoryName: String
        /// The rules used for the updated Call Analytics category. The rules you provide in this field replace the ones that are currently being used in the specified category.
        public let rules: [Rule]

        public init(categoryName: String, rules: [Rule]) {
            self.categoryName = categoryName
            self.rules = rules
        }

        public func validate(name: String) throws {
            try self.validate(self.categoryName, name: "categoryName", parent: name, max: 200)
            try self.validate(self.categoryName, name: "categoryName", parent: name, min: 1)
            try self.validate(self.categoryName, name: "categoryName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.rules.forEach {
                try $0.validate(name: "\(name).rules[]")
            }
            try self.validate(self.rules, name: "rules", parent: name, max: 20)
            try self.validate(self.rules, name: "rules", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rules"
        }
    }

    public struct UpdateCallAnalyticsCategoryResponse: AWSDecodableShape {
        /// Provides you with the properties of the Call Analytics category you specified in your UpdateCallAnalyticsCategory request.
        public let categoryProperties: CategoryProperties?

        public init(categoryProperties: CategoryProperties? = nil) {
            self.categoryProperties = categoryProperties
        }

        private enum CodingKeys: String, CodingKey {
            case categoryProperties = "CategoryProperties"
        }
    }

    public struct UpdateMedicalVocabularyRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "vocabularyName", location: .uri("VocabularyName"))
        ]

        /// The language code that represents the language of the entries in the custom vocabulary  you want to update. US English (en-US) is the only language supported with  Amazon Transcribe Medical.
        public let languageCode: LanguageCode
        /// The Amazon S3 location of the text file that contains your custom medical  vocabulary. The URI must be located in the same Amazon Web Services Region as the resource  you're calling. Here's an example URI path: s3://DOC-EXAMPLE-BUCKET/my-vocab-file.txt
        public let vocabularyFileUri: String
        /// The name of the custom medical vocabulary you want to update. Vocabulary names are case sensitive.
        public let vocabularyName: String

        public init(languageCode: LanguageCode, vocabularyFileUri: String, vocabularyName: String) {
            self.languageCode = languageCode
            self.vocabularyFileUri = vocabularyFileUri
            self.vocabularyName = vocabularyName
        }

        public func validate(name: String) throws {
            try self.validate(self.vocabularyFileUri, name: "vocabularyFileUri", parent: name, max: 2000)
            try self.validate(self.vocabularyFileUri, name: "vocabularyFileUri", parent: name, min: 1)
            try self.validate(self.vocabularyFileUri, name: "vocabularyFileUri", parent: name, pattern: "^(s3://|http(s*)://).+$")
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, max: 200)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, min: 1)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case vocabularyFileUri = "VocabularyFileUri"
        }
    }

    public struct UpdateMedicalVocabularyResponse: AWSDecodableShape {
        /// The language code you selected for your medical vocabulary. US English  (en-US) is the only language supported with Amazon Transcribe Medical.
        public let languageCode: LanguageCode?
        /// The date and time the specified custom medical vocabulary was last updated. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.761000-07:00 represents 12:32 PM UTC-7  on May 4, 2022.
        public let lastModifiedTime: Date?
        /// The name of the updated custom medical vocabulary.
        public let vocabularyName: String?
        /// The processing state of your custom medical vocabulary. If the state is  READY, you can use the vocabulary in a   StartMedicalTranscriptionJob request.
        public let vocabularyState: VocabularyState?

        public init(languageCode: LanguageCode? = nil, lastModifiedTime: Date? = nil, vocabularyName: String? = nil, vocabularyState: VocabularyState? = nil) {
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.vocabularyName = vocabularyName
            self.vocabularyState = vocabularyState
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case lastModifiedTime = "LastModifiedTime"
            case vocabularyName = "VocabularyName"
            case vocabularyState = "VocabularyState"
        }
    }

    public struct UpdateVocabularyFilterRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "vocabularyFilterName", location: .uri("VocabularyFilterName"))
        ]

        /// The Amazon S3 location of the text file that contains your custom vocabulary filter  terms. The URI must be located in the same Amazon Web Services Region as the resource you're  calling. Here's an example URI path: s3://DOC-EXAMPLE-BUCKET/my-vocab-filter-file.txt  Note that if you include VocabularyFilterFileUri in your request, you  cannot use Words; you must choose one or the other.
        public let vocabularyFilterFileUri: String?
        /// The name of the custom vocabulary filter you want to update. Vocabulary filter names  are case sensitive.
        public let vocabularyFilterName: String
        /// Use this parameter if you want to update your vocabulary filter by including all desired terms,  as comma-separated values, within your request. The other option for updating your vocabulary  filter is to save your entries in a text file and upload them to an Amazon S3 bucket, then specify the location of your file using the VocabularyFilterFileUri  parameter. Note that if you include Words in your request, you cannot use VocabularyFilterFileUri; you must choose one or the other.         Each language has a character set that contains all allowed characters for that specific  language. If you use unsupported characters, your vocabulary filter request fails. Refer to  Character Sets for  Custom Vocabularies to get the character set for your language.
        public let words: [String]?

        public init(vocabularyFilterFileUri: String? = nil, vocabularyFilterName: String, words: [String]? = nil) {
            self.vocabularyFilterFileUri = vocabularyFilterFileUri
            self.vocabularyFilterName = vocabularyFilterName
            self.words = words
        }

        public func validate(name: String) throws {
            try self.validate(self.vocabularyFilterFileUri, name: "vocabularyFilterFileUri", parent: name, max: 2000)
            try self.validate(self.vocabularyFilterFileUri, name: "vocabularyFilterFileUri", parent: name, min: 1)
            try self.validate(self.vocabularyFilterFileUri, name: "vocabularyFilterFileUri", parent: name, pattern: "^(s3://|http(s*)://).+$")
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, max: 200)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, min: 1)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.words?.forEach {
                try validate($0, name: "words[]", parent: name, max: 256)
                try validate($0, name: "words[]", parent: name, min: 1)
            }
            try self.validate(self.words, name: "words", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case vocabularyFilterFileUri = "VocabularyFilterFileUri"
            case words = "Words"
        }
    }

    public struct UpdateVocabularyFilterResponse: AWSDecodableShape {
        /// The language code you selected for your vocabulary filter.
        public let languageCode: LanguageCode?
        /// The date and time the specified vocabulary filter was last updated. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.761000-07:00 represents 12:32 PM UTC-7  on May 4, 2022.
        public let lastModifiedTime: Date?
        /// The name of the updated custom vocabulary filter.
        public let vocabularyFilterName: String?

        public init(languageCode: LanguageCode? = nil, lastModifiedTime: Date? = nil, vocabularyFilterName: String? = nil) {
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.vocabularyFilterName = vocabularyFilterName
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case lastModifiedTime = "LastModifiedTime"
            case vocabularyFilterName = "VocabularyFilterName"
        }
    }

    public struct UpdateVocabularyRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "vocabularyName", location: .uri("VocabularyName"))
        ]

        /// The language code that represents the language of the entries in the custom vocabulary  you want to update. Each vocabulary must contain terms in only one language. A custom vocabulary can only be used to transcribe files in the same language as the  vocabulary. For example, if you create a vocabulary using US English (en-US),  you can only apply this vocabulary to files that contain English audio. For a list of supported languages and their associated language codes, refer to the  Supported languages table.
        public let languageCode: LanguageCode
        /// Use this parameter if you want to update your vocabulary by including all desired terms, as comma-separated values, within your request. The other option for updating your vocabulary is to save your entries in a text file and upload them to an Amazon S3 bucket, then specify  the location of your file using the VocabularyFileUri parameter. Note that if you include Phrases in your request, you cannot use VocabularyFileUri; you must choose one or the other.         Each language has a character set that contains all allowed characters for that specific  language. If you use unsupported characters, your vocabulary filter request fails. Refer to  Character Sets for  Custom Vocabularies to get the character set for your language.
        public let phrases: [String]?
        /// The Amazon S3 location of the text file that contains your custom vocabulary. The URI must be located in the same Amazon Web Services Region as the resource you're  calling. Here's an example URI path: s3://DOC-EXAMPLE-BUCKET/my-vocab-file.txt  Note that if you include VocabularyFileUri in your request, you  cannot use the Phrases flag; you must choose one or the other.
        public let vocabularyFileUri: String?
        /// The name of the custom vocabulary you want to update. Vocabulary names are case sensitive.
        public let vocabularyName: String

        public init(languageCode: LanguageCode, phrases: [String]? = nil, vocabularyFileUri: String? = nil, vocabularyName: String) {
            self.languageCode = languageCode
            self.phrases = phrases
            self.vocabularyFileUri = vocabularyFileUri
            self.vocabularyName = vocabularyName
        }

        public func validate(name: String) throws {
            try self.phrases?.forEach {
                try validate($0, name: "phrases[]", parent: name, max: 256)
                try validate($0, name: "phrases[]", parent: name, pattern: "^.+$")
            }
            try self.validate(self.vocabularyFileUri, name: "vocabularyFileUri", parent: name, max: 2000)
            try self.validate(self.vocabularyFileUri, name: "vocabularyFileUri", parent: name, min: 1)
            try self.validate(self.vocabularyFileUri, name: "vocabularyFileUri", parent: name, pattern: "^(s3://|http(s*)://).+$")
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, max: 200)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, min: 1)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case phrases = "Phrases"
            case vocabularyFileUri = "VocabularyFileUri"
        }
    }

    public struct UpdateVocabularyResponse: AWSDecodableShape {
        /// The language code you selected for your custom vocabulary.
        public let languageCode: LanguageCode?
        /// The date and time the specified vocabulary was last updated. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.761000-07:00 represents 12:32 PM UTC-7  on May 4, 2022.
        public let lastModifiedTime: Date?
        /// The name of the updated custom vocabulary.
        public let vocabularyName: String?
        /// The processing state of your custom vocabulary. If the state is READY, you can use the vocabulary in a StartTranscriptionJob request.
        public let vocabularyState: VocabularyState?

        public init(languageCode: LanguageCode? = nil, lastModifiedTime: Date? = nil, vocabularyName: String? = nil, vocabularyState: VocabularyState? = nil) {
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.vocabularyName = vocabularyName
            self.vocabularyState = vocabularyState
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case lastModifiedTime = "LastModifiedTime"
            case vocabularyName = "VocabularyName"
            case vocabularyState = "VocabularyState"
        }
    }

    public struct VocabularyFilterInfo: AWSDecodableShape {
        /// The language code that represents the language of the entries in your vocabulary  filter. Each vocabulary filter must contain terms in only one language. A vocabulary filter can only be used to transcribe files in the same language as the  filter. For example, if you create a vocabulary filter using US English (en-US), you can only apply this filter to files that contain English audio.     For a list of supported languages and their associated language codes, refer to the  Supported languages table.
        public let languageCode: LanguageCode?
        /// The date and time the specified vocabulary filter was last modified. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.761000-07:00 represents 12:32 PM UTC-7  on May 4, 2022.
        public let lastModifiedTime: Date?
        /// A unique name, chosen by you, for your custom vocabulary filter. This name is case  sensitive, cannot contain spaces, and must be unique within an  Amazon Web Services account.
        public let vocabularyFilterName: String?

        public init(languageCode: LanguageCode? = nil, lastModifiedTime: Date? = nil, vocabularyFilterName: String? = nil) {
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.vocabularyFilterName = vocabularyFilterName
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case lastModifiedTime = "LastModifiedTime"
            case vocabularyFilterName = "VocabularyFilterName"
        }
    }

    public struct VocabularyInfo: AWSDecodableShape {
        /// The language code used to create your custom vocabulary. Each vocabulary must contain terms in only one language. A custom vocabulary can only be used to transcribe files in the same language as the  vocabulary. For example, if you create a vocabulary using US English (en-US),  you can only apply this vocabulary to files that contain English audio.
        public let languageCode: LanguageCode?
        /// The date and time the specified vocabulary was last modified. Timestamps are in the format YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC. For example, 2022-05-04T12:32:58.761000-07:00 represents 12:32 PM UTC-7  on May 4, 2022.
        public let lastModifiedTime: Date?
        /// A unique name, chosen by you, for your custom vocabulary. This name is case sensitive,  cannot contain spaces, and must be unique within an Amazon Web Services account.
        public let vocabularyName: String?
        /// The processing state of your custom vocabulary. If the state is READY, you can use the vocabulary in a StartTranscriptionJob request.
        public let vocabularyState: VocabularyState?

        public init(languageCode: LanguageCode? = nil, lastModifiedTime: Date? = nil, vocabularyName: String? = nil, vocabularyState: VocabularyState? = nil) {
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.vocabularyName = vocabularyName
            self.vocabularyState = vocabularyState
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case lastModifiedTime = "LastModifiedTime"
            case vocabularyName = "VocabularyName"
            case vocabularyState = "VocabularyState"
        }
    }
}
