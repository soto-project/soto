//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

import Foundation
import SotoCore

extension Transcribe {
    // MARK: Enums

    public enum BaseModelName: String, CustomStringConvertible, Codable {
        case narrowband = "NarrowBand"
        case wideband = "WideBand"
        public var description: String { return self.rawValue }
    }

    public enum CLMLanguageCode: String, CustomStringConvertible, Codable {
        case enAu = "en-AU"
        case enGb = "en-GB"
        case enUs = "en-US"
        case esUs = "es-US"
        case hiIn = "hi-IN"
        public var description: String { return self.rawValue }
    }

    public enum CallAnalyticsJobStatus: String, CustomStringConvertible, Codable {
        case completed = "COMPLETED"
        case failed = "FAILED"
        case inProgress = "IN_PROGRESS"
        case queued = "QUEUED"
        public var description: String { return self.rawValue }
    }

    public enum LanguageCode: String, CustomStringConvertible, Codable {
        case afZa = "af-ZA"
        case arAe = "ar-AE"
        case arSa = "ar-SA"
        case cyGb = "cy-GB"
        case daDk = "da-DK"
        case deCh = "de-CH"
        case deDe = "de-DE"
        case enAb = "en-AB"
        case enAu = "en-AU"
        case enGb = "en-GB"
        case enIe = "en-IE"
        case enIn = "en-IN"
        case enNz = "en-NZ"
        case enUs = "en-US"
        case enWl = "en-WL"
        case enZa = "en-ZA"
        case esEs = "es-ES"
        case esUs = "es-US"
        case faIr = "fa-IR"
        case frCa = "fr-CA"
        case frFr = "fr-FR"
        case gaIe = "ga-IE"
        case gdGb = "gd-GB"
        case heIl = "he-IL"
        case hiIn = "hi-IN"
        case idId = "id-ID"
        case itIt = "it-IT"
        case jaJp = "ja-JP"
        case koKr = "ko-KR"
        case msMy = "ms-MY"
        case nlNl = "nl-NL"
        case ptBr = "pt-BR"
        case ptPt = "pt-PT"
        case ruRu = "ru-RU"
        case taIn = "ta-IN"
        case teIn = "te-IN"
        case thTh = "th-TH"
        case trTr = "tr-TR"
        case zhCn = "zh-CN"
        case zhTw = "zh-TW"
        public var description: String { return self.rawValue }
    }

    public enum MediaFormat: String, CustomStringConvertible, Codable {
        case amr
        case flac
        case mp3
        case mp4
        case ogg
        case wav
        case webm
        public var description: String { return self.rawValue }
    }

    public enum MedicalContentIdentificationType: String, CustomStringConvertible, Codable {
        case phi = "PHI"
        public var description: String { return self.rawValue }
    }

    public enum ModelStatus: String, CustomStringConvertible, Codable {
        case completed = "COMPLETED"
        case failed = "FAILED"
        case inProgress = "IN_PROGRESS"
        public var description: String { return self.rawValue }
    }

    public enum OutputLocationType: String, CustomStringConvertible, Codable {
        case customerBucket = "CUSTOMER_BUCKET"
        case serviceBucket = "SERVICE_BUCKET"
        public var description: String { return self.rawValue }
    }

    public enum ParticipantRole: String, CustomStringConvertible, Codable {
        case agent = "AGENT"
        case customer = "CUSTOMER"
        public var description: String { return self.rawValue }
    }

    public enum RedactionOutput: String, CustomStringConvertible, Codable {
        case redacted
        case redactedAndUnredacted = "redacted_and_unredacted"
        public var description: String { return self.rawValue }
    }

    public enum RedactionType: String, CustomStringConvertible, Codable {
        case pii = "PII"
        public var description: String { return self.rawValue }
    }

    public enum SentimentValue: String, CustomStringConvertible, Codable {
        case mixed = "MIXED"
        case negative = "NEGATIVE"
        case neutral = "NEUTRAL"
        case positive = "POSITIVE"
        public var description: String { return self.rawValue }
    }

    public enum Specialty: String, CustomStringConvertible, Codable {
        case primarycare = "PRIMARYCARE"
        public var description: String { return self.rawValue }
    }

    public enum SubtitleFormat: String, CustomStringConvertible, Codable {
        case srt
        case vtt
        public var description: String { return self.rawValue }
    }

    public enum TranscriptFilterType: String, CustomStringConvertible, Codable {
        case exact = "EXACT"
        public var description: String { return self.rawValue }
    }

    public enum TranscriptionJobStatus: String, CustomStringConvertible, Codable {
        case completed = "COMPLETED"
        case failed = "FAILED"
        case inProgress = "IN_PROGRESS"
        case queued = "QUEUED"
        public var description: String { return self.rawValue }
    }

    public enum `Type`: String, CustomStringConvertible, Codable {
        case conversation = "CONVERSATION"
        case dictation = "DICTATION"
        public var description: String { return self.rawValue }
    }

    public enum VocabularyFilterMethod: String, CustomStringConvertible, Codable {
        case mask
        case remove
        case tag
        public var description: String { return self.rawValue }
    }

    public enum VocabularyState: String, CustomStringConvertible, Codable {
        case failed = "FAILED"
        case pending = "PENDING"
        case ready = "READY"
        public var description: String { return self.rawValue }
    }

    public enum Rule: AWSEncodableShape & AWSDecodableShape {
        /// A condition for a time period when either the customer or agent was interrupting the other person.
        case interruptionFilter(InterruptionFilter)
        /// A condition for a time period when neither the customer nor the agent was talking.
        case nonTalkTimeFilter(NonTalkTimeFilter)
        /// A condition that is applied to a particular customer sentiment.
        case sentimentFilter(SentimentFilter)
        /// A condition that catches particular words or phrases based on a exact match. For example, if you set the phrase "I want to speak to the manager", only that exact phrase will be returned.
        case transcriptFilter(TranscriptFilter)

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            guard container.allKeys.count == 1, let key = container.allKeys.first else {
                let context = DecodingError.Context(
                    codingPath: container.codingPath,
                    debugDescription: "Expected exactly one key, but got \(container.allKeys.count)"
                )
                throw DecodingError.dataCorrupted(context)
            }
            switch key {
            case .interruptionFilter:
                let value = try container.decode(InterruptionFilter.self, forKey: .interruptionFilter)
                self = .interruptionFilter(value)
            case .nonTalkTimeFilter:
                let value = try container.decode(NonTalkTimeFilter.self, forKey: .nonTalkTimeFilter)
                self = .nonTalkTimeFilter(value)
            case .sentimentFilter:
                let value = try container.decode(SentimentFilter.self, forKey: .sentimentFilter)
                self = .sentimentFilter(value)
            case .transcriptFilter:
                let value = try container.decode(TranscriptFilter.self, forKey: .transcriptFilter)
                self = .transcriptFilter(value)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case .interruptionFilter(let value):
                try container.encode(value, forKey: .interruptionFilter)
            case .nonTalkTimeFilter(let value):
                try container.encode(value, forKey: .nonTalkTimeFilter)
            case .sentimentFilter(let value):
                try container.encode(value, forKey: .sentimentFilter)
            case .transcriptFilter(let value):
                try container.encode(value, forKey: .transcriptFilter)
            }
        }

        public func validate(name: String) throws {
            switch self {
            case .interruptionFilter(let value):
                try value.validate(name: "\(name).interruptionFilter")
            case .nonTalkTimeFilter(let value):
                try value.validate(name: "\(name).nonTalkTimeFilter")
            case .sentimentFilter(let value):
                try value.validate(name: "\(name).sentimentFilter")
            case .transcriptFilter(let value):
                try value.validate(name: "\(name).transcriptFilter")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case interruptionFilter = "InterruptionFilter"
            case nonTalkTimeFilter = "NonTalkTimeFilter"
            case sentimentFilter = "SentimentFilter"
            case transcriptFilter = "TranscriptFilter"
        }
    }

    // MARK: Shapes

    public struct AbsoluteTimeRange: AWSEncodableShape & AWSDecodableShape {
        /// A value that indicates the end of the time range in milliseconds. To set absolute time range, you must specify a start  time and an end time. For example, if you specify the following values:   StartTime - 10000   Endtime - 50000   The time range is set between 10,000 milliseconds and 50,000 milliseconds into the call.
        public let endTime: Int64?
        /// A time range from the beginning of the call to the value that you've specified. For example, if you specify 100000, the  time range is set to the first 100,000 milliseconds of the call.
        public let first: Int64?
        /// A time range from the value that you've specified to the end of the call. For example, if you specify 100000, the time range is set to the last 100,000 milliseconds of the call.
        public let last: Int64?
        /// A value that indicates the beginning of the time range in seconds. To set absolute time range, you must specify a  start time and an end time. For example, if you specify the following values:    StartTime - 10000   Endtime - 50000   The time range is set between 10,000 milliseconds and 50,000 milliseconds into the call.
        public let startTime: Int64?

        public init(endTime: Int64? = nil, first: Int64? = nil, last: Int64? = nil, startTime: Int64? = nil) {
            self.endTime = endTime
            self.first = first
            self.last = last
            self.startTime = startTime
        }

        public func validate(name: String) throws {
            try self.validate(self.endTime, name: "endTime", parent: name, max: 14_400_000)
            try self.validate(self.endTime, name: "endTime", parent: name, min: 0)
            try self.validate(self.first, name: "first", parent: name, max: 14_400_000)
            try self.validate(self.first, name: "first", parent: name, min: 0)
            try self.validate(self.last, name: "last", parent: name, max: 14_400_000)
            try self.validate(self.last, name: "last", parent: name, min: 0)
            try self.validate(self.startTime, name: "startTime", parent: name, max: 14_400_000)
            try self.validate(self.startTime, name: "startTime", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case first = "First"
            case last = "Last"
            case startTime = "StartTime"
        }
    }

    public struct CallAnalyticsJob: AWSDecodableShape {
        /// The name of the call analytics job.
        public let callAnalyticsJobName: String?
        /// The status of the analytics job.
        public let callAnalyticsJobStatus: CallAnalyticsJobStatus?
        /// Shows numeric values to indicate the channel assigned to the agent's audio and the channel assigned to the  customer's audio.
        public let channelDefinitions: [ChannelDefinition]?
        /// A timestamp that shows when the analytics job was completed.
        public let completionTime: Date?
        /// A timestamp that shows when the analytics job was created.
        public let creationTime: Date?
        /// The Amazon Resource Number (ARN) that you use to get access to the analytics job.
        public let dataAccessRoleArn: String?
        /// If the AnalyticsJobStatus is FAILED, this field contains information about why the job failed. The FailureReason field can contain one of the following values:    Unsupported media format: The media format specified in the MediaFormat field of the request isn't valid. See the description of the MediaFormat field for a list of valid values.    The media format provided does not match the detected media format: The media  format of the audio file doesn't match the format specified in the MediaFormat field in the request.  Check the media format of your media file and make sure the two values match.    Invalid sample rate for audio file: The sample rate specified in the MediaSampleRateHertz of the request isn't valid. The sample rate must be between 8,000 and 48,000 Hertz.    The sample rate provided does not match the detected sample rate: The sample rate  in the audio file doesn't match the sample rate specified in the MediaSampleRateHertz field in the  request. Check the sample rate of your media file and make sure that the two values match.    Invalid file size: file size too large: The size of your audio file is larger than what Amazon Transcribe Medical can process. For more information, see Guidelines and Quotas in the Amazon Transcribe Medical  Guide.    Invalid number of channels: number of channels too large: Your audio contains more channels than Amazon Transcribe Medical is configured to process. To request additional channels, see Amazon Transcribe Medical Endpoints and Quotas in the Amazon Web Services General  Reference.
        public let failureReason: String?
        /// A value between zero and one that Amazon Transcribe assigned to the language that it identified in the source audio. This value  appears only when you don't provide a single language code. Larger values indicate that Amazon Transcribe has higher confidence in the language that it identified
        public let identifiedLanguageScore: Float?
        /// If you know the language spoken between the customer and the agent, specify a language code for this field. If you don't know the language, you can leave this field blank, and Amazon Transcribe will use machine learning to automatically identify the language. To improve the accuracy of language identification, you can provide an array containing the  possible language codes for the language spoken in your audio. Refer to Supported languages and language-specific features for  additional information.
        public let languageCode: LanguageCode?
        public let media: Media?
        /// The format of the input audio file. Note: for call analytics jobs, only the following media formats are supported: MP3,  MP4, WAV, FLAC, OGG, and WebM.
        public let mediaFormat: MediaFormat?
        /// The sample rate, in Hertz, of the audio.
        public let mediaSampleRateHertz: Int?
        /// Provides information about the settings used to run a transcription job.
        public let settings: CallAnalyticsJobSettings?
        /// A timestamp that shows when the analytics job started processing.
        public let startTime: Date?
        public let transcript: Transcript?

        public init(callAnalyticsJobName: String? = nil, callAnalyticsJobStatus: CallAnalyticsJobStatus? = nil, channelDefinitions: [ChannelDefinition]? = nil, completionTime: Date? = nil, creationTime: Date? = nil, dataAccessRoleArn: String? = nil, failureReason: String? = nil, identifiedLanguageScore: Float? = nil, languageCode: LanguageCode? = nil, media: Media? = nil, mediaFormat: MediaFormat? = nil, mediaSampleRateHertz: Int? = nil, settings: CallAnalyticsJobSettings? = nil, startTime: Date? = nil, transcript: Transcript? = nil) {
            self.callAnalyticsJobName = callAnalyticsJobName
            self.callAnalyticsJobStatus = callAnalyticsJobStatus
            self.channelDefinitions = channelDefinitions
            self.completionTime = completionTime
            self.creationTime = creationTime
            self.dataAccessRoleArn = dataAccessRoleArn
            self.failureReason = failureReason
            self.identifiedLanguageScore = identifiedLanguageScore
            self.languageCode = languageCode
            self.media = media
            self.mediaFormat = mediaFormat
            self.mediaSampleRateHertz = mediaSampleRateHertz
            self.settings = settings
            self.startTime = startTime
            self.transcript = transcript
        }

        private enum CodingKeys: String, CodingKey {
            case callAnalyticsJobName = "CallAnalyticsJobName"
            case callAnalyticsJobStatus = "CallAnalyticsJobStatus"
            case channelDefinitions = "ChannelDefinitions"
            case completionTime = "CompletionTime"
            case creationTime = "CreationTime"
            case dataAccessRoleArn = "DataAccessRoleArn"
            case failureReason = "FailureReason"
            case identifiedLanguageScore = "IdentifiedLanguageScore"
            case languageCode = "LanguageCode"
            case media = "Media"
            case mediaFormat = "MediaFormat"
            case mediaSampleRateHertz = "MediaSampleRateHertz"
            case settings = "Settings"
            case startTime = "StartTime"
            case transcript = "Transcript"
        }
    }

    public struct CallAnalyticsJobSettings: AWSEncodableShape & AWSDecodableShape {
        public let contentRedaction: ContentRedaction?
        /// The structure used to describe a custom language model.
        public let languageModelName: String?
        /// When you run a call analytics job, you can specify the language spoken in the audio, or you can have Amazon Transcribe identify the language for you. To specify a language, specify an array with one language code. If you don't know the language, you can leave this  field blank and Amazon Transcribe will use machine learning to identify the language for you. To improve the ability of Amazon Transcribe to  correctly identify the language, you can provide an array of the languages that can be present in the audio. Refer to  Supported languages and language-specific features for additional information.
        public let languageOptions: [LanguageCode]?
        /// Set to mask to remove filtered text from the transcript and replace it with three asterisks ("***") as placeholder text.  Set to remove to remove filtered text from the transcript without using placeholder text. Set to  tag to mark the word in the transcription output that matches the vocabulary filter. When you set the  filter method to tag, the words matching your vocabulary filter are not masked or removed.
        public let vocabularyFilterMethod: VocabularyFilterMethod?
        /// The name of the vocabulary filter to use when running a call analytics job. The filter that you specify must have the same language code as the analytics job.
        public let vocabularyFilterName: String?
        /// The name of a vocabulary to use when processing the call analytics job.
        public let vocabularyName: String?

        public init(contentRedaction: ContentRedaction? = nil, languageModelName: String? = nil, languageOptions: [LanguageCode]? = nil, vocabularyFilterMethod: VocabularyFilterMethod? = nil, vocabularyFilterName: String? = nil, vocabularyName: String? = nil) {
            self.contentRedaction = contentRedaction
            self.languageModelName = languageModelName
            self.languageOptions = languageOptions
            self.vocabularyFilterMethod = vocabularyFilterMethod
            self.vocabularyFilterName = vocabularyFilterName
            self.vocabularyName = vocabularyName
        }

        public func validate(name: String) throws {
            try self.validate(self.languageModelName, name: "languageModelName", parent: name, max: 200)
            try self.validate(self.languageModelName, name: "languageModelName", parent: name, min: 1)
            try self.validate(self.languageModelName, name: "languageModelName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.validate(self.languageOptions, name: "languageOptions", parent: name, min: 1)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, max: 200)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, min: 1)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, max: 200)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, min: 1)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case contentRedaction = "ContentRedaction"
            case languageModelName = "LanguageModelName"
            case languageOptions = "LanguageOptions"
            case vocabularyFilterMethod = "VocabularyFilterMethod"
            case vocabularyFilterName = "VocabularyFilterName"
            case vocabularyName = "VocabularyName"
        }
    }

    public struct CallAnalyticsJobSummary: AWSDecodableShape {
        /// The name of the call analytics job.
        public let callAnalyticsJobName: String?
        /// The status of the call analytics job.
        public let callAnalyticsJobStatus: CallAnalyticsJobStatus?
        /// A timestamp that shows when the job was completed.
        public let completionTime: Date?
        /// A timestamp that shows when the call analytics job was created.
        public let creationTime: Date?
        /// If the CallAnalyticsJobStatus is FAILED, a description of the error.
        public let failureReason: String?
        /// The language of the transcript in the source audio file.
        public let languageCode: LanguageCode?
        /// A timestamp that shows when the job began processing.
        public let startTime: Date?

        public init(callAnalyticsJobName: String? = nil, callAnalyticsJobStatus: CallAnalyticsJobStatus? = nil, completionTime: Date? = nil, creationTime: Date? = nil, failureReason: String? = nil, languageCode: LanguageCode? = nil, startTime: Date? = nil) {
            self.callAnalyticsJobName = callAnalyticsJobName
            self.callAnalyticsJobStatus = callAnalyticsJobStatus
            self.completionTime = completionTime
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.languageCode = languageCode
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case callAnalyticsJobName = "CallAnalyticsJobName"
            case callAnalyticsJobStatus = "CallAnalyticsJobStatus"
            case completionTime = "CompletionTime"
            case creationTime = "CreationTime"
            case failureReason = "FailureReason"
            case languageCode = "LanguageCode"
            case startTime = "StartTime"
        }
    }

    public struct CategoryProperties: AWSDecodableShape {
        /// The name of the call analytics category.
        public let categoryName: String?
        /// A timestamp that shows when the call analytics category was created.
        public let createTime: Date?
        /// A timestamp that shows when the call analytics category was most recently updated.
        public let lastUpdateTime: Date?
        /// The rules used to create a call analytics category.
        public let rules: [Rule]?

        public init(categoryName: String? = nil, createTime: Date? = nil, lastUpdateTime: Date? = nil, rules: [Rule]? = nil) {
            self.categoryName = categoryName
            self.createTime = createTime
            self.lastUpdateTime = lastUpdateTime
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case categoryName = "CategoryName"
            case createTime = "CreateTime"
            case lastUpdateTime = "LastUpdateTime"
            case rules = "Rules"
        }
    }

    public struct ChannelDefinition: AWSEncodableShape & AWSDecodableShape {
        /// A value that indicates the audio channel.
        public let channelId: Int?
        /// Indicates whether the person speaking on the audio channel is the agent or customer.
        public let participantRole: ParticipantRole?

        public init(channelId: Int? = nil, participantRole: ParticipantRole? = nil) {
            self.channelId = channelId
            self.participantRole = participantRole
        }

        public func validate(name: String) throws {
            try self.validate(self.channelId, name: "channelId", parent: name, max: 1)
            try self.validate(self.channelId, name: "channelId", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case channelId = "ChannelId"
            case participantRole = "ParticipantRole"
        }
    }

    public struct ContentRedaction: AWSEncodableShape & AWSDecodableShape {
        /// The output transcript file stored in either the default S3 bucket or in a bucket you specify. When you choose redacted Amazon Transcribe outputs only the redacted transcript. When you choose redacted_and_unredacted Amazon Transcribe outputs both the redacted and  unredacted transcripts.
        public let redactionOutput: RedactionOutput
        /// Request parameter that defines the entities to be redacted. The only accepted value is PII.
        public let redactionType: RedactionType

        public init(redactionOutput: RedactionOutput, redactionType: RedactionType) {
            self.redactionOutput = redactionOutput
            self.redactionType = redactionType
        }

        private enum CodingKeys: String, CodingKey {
            case redactionOutput = "RedactionOutput"
            case redactionType = "RedactionType"
        }
    }

    public struct CreateCallAnalyticsCategoryRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "categoryName", location: .uri(locationName: "CategoryName"))
        ]

        /// The name that you choose for your category when you create it.
        public let categoryName: String
        /// To create a category, you must specify between 1 and 20 rules. For each rule, you specify a filter to be applied to the attributes of the call. For example, you can specify a sentiment filter to detect if the customer's sentiment was negative or neutral.
        public let rules: [Rule]

        public init(categoryName: String, rules: [Rule]) {
            self.categoryName = categoryName
            self.rules = rules
        }

        public func validate(name: String) throws {
            try self.validate(self.categoryName, name: "categoryName", parent: name, max: 200)
            try self.validate(self.categoryName, name: "categoryName", parent: name, min: 1)
            try self.validate(self.categoryName, name: "categoryName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.rules.forEach {
                try $0.validate(name: "\(name).rules[]")
            }
            try self.validate(self.rules, name: "rules", parent: name, max: 20)
            try self.validate(self.rules, name: "rules", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rules"
        }
    }

    public struct CreateCallAnalyticsCategoryResponse: AWSDecodableShape {
        /// The rules and associated metadata used to create a category.
        public let categoryProperties: CategoryProperties?

        public init(categoryProperties: CategoryProperties? = nil) {
            self.categoryProperties = categoryProperties
        }

        private enum CodingKeys: String, CodingKey {
            case categoryProperties = "CategoryProperties"
        }
    }

    public struct CreateLanguageModelRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "modelName", location: .uri(locationName: "ModelName"))
        ]

        /// The Amazon Transcribe standard language model, or base model used to create your custom language model. If you want to use your custom language model to transcribe audio with a sample rate of 16,000 Hz or greater,  choose Wideband. If you want to use your custom language model to transcribe audio with a sample rate that is less than  16,000 Hz, choose Narrowband.
        public let baseModelName: BaseModelName
        /// Contains the data access role and the Amazon S3 prefixes to read the required input files to create a custom  language model.
        public let inputDataConfig: InputDataConfig
        /// The language of the input text you're using to train your custom language model.
        public let languageCode: CLMLanguageCode
        /// The name you choose for your custom language model when you create it.
        public let modelName: String
        /// Adds one or more tags, each in the form of a key:value pair, to a new language model at the time you create  this new model.
        public let tags: [Tag]?

        public init(baseModelName: BaseModelName, inputDataConfig: InputDataConfig, languageCode: CLMLanguageCode, modelName: String, tags: [Tag]? = nil) {
            self.baseModelName = baseModelName
            self.inputDataConfig = inputDataConfig
            self.languageCode = languageCode
            self.modelName = modelName
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.inputDataConfig.validate(name: "\(name).inputDataConfig")
            try self.validate(self.modelName, name: "modelName", parent: name, max: 200)
            try self.validate(self.modelName, name: "modelName", parent: name, min: 1)
            try self.validate(self.modelName, name: "modelName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case baseModelName = "BaseModelName"
            case inputDataConfig = "InputDataConfig"
            case languageCode = "LanguageCode"
            case tags = "Tags"
        }
    }

    public struct CreateLanguageModelResponse: AWSDecodableShape {
        /// The Amazon Transcribe standard language model, or base model you've used to create a custom language model.
        public let baseModelName: BaseModelName?
        /// The data access role and Amazon S3 prefixes you've chosen to create your custom language model.
        public let inputDataConfig: InputDataConfig?
        /// The language code of the text you've used to create a custom language model.
        public let languageCode: CLMLanguageCode?
        /// The name you've chosen for your custom language model.
        public let modelName: String?
        /// The status of the custom language model. When the status is COMPLETED the model is ready to use.
        public let modelStatus: ModelStatus?

        public init(baseModelName: BaseModelName? = nil, inputDataConfig: InputDataConfig? = nil, languageCode: CLMLanguageCode? = nil, modelName: String? = nil, modelStatus: ModelStatus? = nil) {
            self.baseModelName = baseModelName
            self.inputDataConfig = inputDataConfig
            self.languageCode = languageCode
            self.modelName = modelName
            self.modelStatus = modelStatus
        }

        private enum CodingKeys: String, CodingKey {
            case baseModelName = "BaseModelName"
            case inputDataConfig = "InputDataConfig"
            case languageCode = "LanguageCode"
            case modelName = "ModelName"
            case modelStatus = "ModelStatus"
        }
    }

    public struct CreateMedicalVocabularyRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "vocabularyName", location: .uri(locationName: "VocabularyName"))
        ]

        /// The language code for the language used for the entries in your custom vocabulary. The language code of your  custom vocabulary must match the language code of your transcription job. US English (en-US) is the only language code available for Amazon Transcribe Medical.
        public let languageCode: LanguageCode
        /// Adds one or more tags, each in the form of a key:value pair, to a new medical vocabulary at the time you  create this new vocabulary.
        public let tags: [Tag]?
        /// The location in Amazon S3 of the text file you use to define your custom vocabulary. The URI must be in the same  Amazon Web Services Region as the resource that you're calling. Enter information about your  VocabularyFileUri in the following format:   https://s3..amazonaws.com///   The following is an example URI for a vocabulary file that is stored in Amazon S3:  https://s3.us-east-1.amazonaws.com/AWSDOC-EXAMPLE-BUCKET/vocab.txt  For more information about Amazon S3 object names, see Object Keys in the Amazon S3  Developer Guide. For more information about custom vocabularies, see Medical Custom Vocabularies.
        public let vocabularyFileUri: String
        /// The name of the custom vocabulary. This case-sensitive name must be unique within an Amazon Web Services account. If you try to create a vocabulary with the same name as a previous vocabulary, you get a  ConflictException error.
        public let vocabularyName: String

        public init(languageCode: LanguageCode, tags: [Tag]? = nil, vocabularyFileUri: String, vocabularyName: String) {
            self.languageCode = languageCode
            self.tags = tags
            self.vocabularyFileUri = vocabularyFileUri
            self.vocabularyName = vocabularyName
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
            try self.validate(self.vocabularyFileUri, name: "vocabularyFileUri", parent: name, max: 2000)
            try self.validate(self.vocabularyFileUri, name: "vocabularyFileUri", parent: name, min: 1)
            try self.validate(self.vocabularyFileUri, name: "vocabularyFileUri", parent: name, pattern: "^(s3://|http(s*)://).+$")
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, max: 200)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, min: 1)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case tags = "Tags"
            case vocabularyFileUri = "VocabularyFileUri"
        }
    }

    public struct CreateMedicalVocabularyResponse: AWSDecodableShape {
        /// If the VocabularyState field is FAILED, this field contains information about why the job failed.
        public let failureReason: String?
        /// The language code for the entries in your custom vocabulary. US English (en-US) is the only valid language  code for Amazon Transcribe Medical.
        public let languageCode: LanguageCode?
        /// The date and time that you created the vocabulary.
        public let lastModifiedTime: Date?
        /// The name of the vocabulary. The name must be unique within an Amazon Web Services account and is case sensitive.
        public let vocabularyName: String?
        /// The processing state of your custom vocabulary in Amazon Transcribe Medical. If the state is READY, you can use the vocabulary in a StartMedicalTranscriptionJob request.
        public let vocabularyState: VocabularyState?

        public init(failureReason: String? = nil, languageCode: LanguageCode? = nil, lastModifiedTime: Date? = nil, vocabularyName: String? = nil, vocabularyState: VocabularyState? = nil) {
            self.failureReason = failureReason
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.vocabularyName = vocabularyName
            self.vocabularyState = vocabularyState
        }

        private enum CodingKeys: String, CodingKey {
            case failureReason = "FailureReason"
            case languageCode = "LanguageCode"
            case lastModifiedTime = "LastModifiedTime"
            case vocabularyName = "VocabularyName"
            case vocabularyState = "VocabularyState"
        }
    }

    public struct CreateVocabularyFilterRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "vocabularyFilterName", location: .uri(locationName: "VocabularyFilterName"))
        ]

        /// The language code of the words in the vocabulary filter. All words in the filter must be in the same language.  The vocabulary filter can only be used with transcription jobs in the specified language.
        public let languageCode: LanguageCode
        /// Adds one or more tags, each in the form of a key:value pair, to a new Amazon Transcribe vocabulary filter at the time you  create this new vocabulary filter.
        public let tags: [Tag]?
        /// The Amazon S3 location of a text file used as input to create the vocabulary filter. Only use characters from  the character set defined for custom vocabularies. For a list of character sets, see Character Sets for Custom Vocabularies. The specified file must be less than 50 KB of UTF-8 characters. If you provide the location of a list of words in the VocabularyFilterFileUri parameter, you can't  use the Words parameter.
        public let vocabularyFilterFileUri: String?
        /// The vocabulary filter name. The name must be unique within the account that contains it. If you try to create a vocabulary filter with the same name as another vocabulary filter, you get a ConflictException  error.
        public let vocabularyFilterName: String
        /// The words to use in the vocabulary filter. Only use characters from the character set defined for custom  vocabularies. For a list of character sets, see Character Sets for Custom Vocabularies. If you provide a list of words in the Words parameter, you can't use the VocabularyFilterFileUri parameter.
        public let words: [String]?

        public init(languageCode: LanguageCode, tags: [Tag]? = nil, vocabularyFilterFileUri: String? = nil, vocabularyFilterName: String, words: [String]? = nil) {
            self.languageCode = languageCode
            self.tags = tags
            self.vocabularyFilterFileUri = vocabularyFilterFileUri
            self.vocabularyFilterName = vocabularyFilterName
            self.words = words
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
            try self.validate(self.vocabularyFilterFileUri, name: "vocabularyFilterFileUri", parent: name, max: 2000)
            try self.validate(self.vocabularyFilterFileUri, name: "vocabularyFilterFileUri", parent: name, min: 1)
            try self.validate(self.vocabularyFilterFileUri, name: "vocabularyFilterFileUri", parent: name, pattern: "^(s3://|http(s*)://).+$")
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, max: 200)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, min: 1)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.words?.forEach {
                try validate($0, name: "words[]", parent: name, max: 256)
                try validate($0, name: "words[]", parent: name, min: 1)
            }
            try self.validate(self.words, name: "words", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case tags = "Tags"
            case vocabularyFilterFileUri = "VocabularyFilterFileUri"
            case words = "Words"
        }
    }

    public struct CreateVocabularyFilterResponse: AWSDecodableShape {
        /// The language code of the words in the collection.
        public let languageCode: LanguageCode?
        /// The date and time that the vocabulary filter was modified.
        public let lastModifiedTime: Date?
        /// The name of the vocabulary filter.
        public let vocabularyFilterName: String?

        public init(languageCode: LanguageCode? = nil, lastModifiedTime: Date? = nil, vocabularyFilterName: String? = nil) {
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.vocabularyFilterName = vocabularyFilterName
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case lastModifiedTime = "LastModifiedTime"
            case vocabularyFilterName = "VocabularyFilterName"
        }
    }

    public struct CreateVocabularyRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "vocabularyName", location: .uri(locationName: "VocabularyName"))
        ]

        /// The language code of the vocabulary entries. For a list of languages and their corresponding language  codes, see transcribe-whatis.
        public let languageCode: LanguageCode
        /// An array of strings that contains the vocabulary entries.
        public let phrases: [String]?
        /// Adds one or more tags, each in the form of a key:value pair, to a new Amazon Transcribe vocabulary at the time you create  this new vocabulary.
        public let tags: [Tag]?
        /// The S3 location of the text file that contains the definition of the custom vocabulary. The URI must be in the same region as the API endpoint that you are calling. The general form is:    For more information about S3 object names, see Object Keys in the  Amazon S3 Developer Guide. For more information about custom vocabularies, see Custom vocabularies.
        public let vocabularyFileUri: String?
        /// The name of the vocabulary. The name must be unique within an Amazon Web Services account. The name  is case sensitive. If you try to create a vocabulary with the same name as a previous vocabulary you will receive a ConflictException error.
        public let vocabularyName: String

        public init(languageCode: LanguageCode, phrases: [String]? = nil, tags: [Tag]? = nil, vocabularyFileUri: String? = nil, vocabularyName: String) {
            self.languageCode = languageCode
            self.phrases = phrases
            self.tags = tags
            self.vocabularyFileUri = vocabularyFileUri
            self.vocabularyName = vocabularyName
        }

        public func validate(name: String) throws {
            try self.phrases?.forEach {
                try validate($0, name: "phrases[]", parent: name, max: 256)
                try validate($0, name: "phrases[]", parent: name, pattern: "^.+$")
            }
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
            try self.validate(self.vocabularyFileUri, name: "vocabularyFileUri", parent: name, max: 2000)
            try self.validate(self.vocabularyFileUri, name: "vocabularyFileUri", parent: name, min: 1)
            try self.validate(self.vocabularyFileUri, name: "vocabularyFileUri", parent: name, pattern: "^(s3://|http(s*)://).+$")
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, max: 200)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, min: 1)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case phrases = "Phrases"
            case tags = "Tags"
            case vocabularyFileUri = "VocabularyFileUri"
        }
    }

    public struct CreateVocabularyResponse: AWSDecodableShape {
        /// If the VocabularyState field is FAILED, this field contains information about why the job failed.
        public let failureReason: String?
        /// The language code of the vocabulary entries.
        public let languageCode: LanguageCode?
        /// The date and time that the vocabulary was created.
        public let lastModifiedTime: Date?
        /// The name of the vocabulary.
        public let vocabularyName: String?
        /// The processing state of the vocabulary. When the VocabularyState field contains  READY the vocabulary is ready to be used in a StartTranscriptionJob  request.
        public let vocabularyState: VocabularyState?

        public init(failureReason: String? = nil, languageCode: LanguageCode? = nil, lastModifiedTime: Date? = nil, vocabularyName: String? = nil, vocabularyState: VocabularyState? = nil) {
            self.failureReason = failureReason
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.vocabularyName = vocabularyName
            self.vocabularyState = vocabularyState
        }

        private enum CodingKeys: String, CodingKey {
            case failureReason = "FailureReason"
            case languageCode = "LanguageCode"
            case lastModifiedTime = "LastModifiedTime"
            case vocabularyName = "VocabularyName"
            case vocabularyState = "VocabularyState"
        }
    }

    public struct DeleteCallAnalyticsCategoryRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "categoryName", location: .uri(locationName: "CategoryName"))
        ]

        /// The name of the call analytics category that you're choosing to delete. The value is case sensitive.
        public let categoryName: String

        public init(categoryName: String) {
            self.categoryName = categoryName
        }

        public func validate(name: String) throws {
            try self.validate(self.categoryName, name: "categoryName", parent: name, max: 200)
            try self.validate(self.categoryName, name: "categoryName", parent: name, min: 1)
            try self.validate(self.categoryName, name: "categoryName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteCallAnalyticsCategoryResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteCallAnalyticsJobRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "callAnalyticsJobName", location: .uri(locationName: "CallAnalyticsJobName"))
        ]

        /// The name of the call analytics job you want to delete.
        public let callAnalyticsJobName: String

        public init(callAnalyticsJobName: String) {
            self.callAnalyticsJobName = callAnalyticsJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.callAnalyticsJobName, name: "callAnalyticsJobName", parent: name, max: 200)
            try self.validate(self.callAnalyticsJobName, name: "callAnalyticsJobName", parent: name, min: 1)
            try self.validate(self.callAnalyticsJobName, name: "callAnalyticsJobName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteCallAnalyticsJobResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteLanguageModelRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "modelName", location: .uri(locationName: "ModelName"))
        ]

        /// The name of the model you're choosing to delete.
        public let modelName: String

        public init(modelName: String) {
            self.modelName = modelName
        }

        public func validate(name: String) throws {
            try self.validate(self.modelName, name: "modelName", parent: name, max: 200)
            try self.validate(self.modelName, name: "modelName", parent: name, min: 1)
            try self.validate(self.modelName, name: "modelName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteMedicalTranscriptionJobRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "medicalTranscriptionJobName", location: .uri(locationName: "MedicalTranscriptionJobName"))
        ]

        /// The name you provide to the DeleteMedicalTranscriptionJob object to delete a transcription job.
        public let medicalTranscriptionJobName: String

        public init(medicalTranscriptionJobName: String) {
            self.medicalTranscriptionJobName = medicalTranscriptionJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.medicalTranscriptionJobName, name: "medicalTranscriptionJobName", parent: name, max: 200)
            try self.validate(self.medicalTranscriptionJobName, name: "medicalTranscriptionJobName", parent: name, min: 1)
            try self.validate(self.medicalTranscriptionJobName, name: "medicalTranscriptionJobName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteMedicalVocabularyRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "vocabularyName", location: .uri(locationName: "VocabularyName"))
        ]

        /// The name of the vocabulary that you want to delete.
        public let vocabularyName: String

        public init(vocabularyName: String) {
            self.vocabularyName = vocabularyName
        }

        public func validate(name: String) throws {
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, max: 200)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, min: 1)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteTranscriptionJobRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "transcriptionJobName", location: .uri(locationName: "TranscriptionJobName"))
        ]

        /// The name of the transcription job to be deleted.
        public let transcriptionJobName: String

        public init(transcriptionJobName: String) {
            self.transcriptionJobName = transcriptionJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.transcriptionJobName, name: "transcriptionJobName", parent: name, max: 200)
            try self.validate(self.transcriptionJobName, name: "transcriptionJobName", parent: name, min: 1)
            try self.validate(self.transcriptionJobName, name: "transcriptionJobName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteVocabularyFilterRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "vocabularyFilterName", location: .uri(locationName: "VocabularyFilterName"))
        ]

        /// The name of the vocabulary filter to remove.
        public let vocabularyFilterName: String

        public init(vocabularyFilterName: String) {
            self.vocabularyFilterName = vocabularyFilterName
        }

        public func validate(name: String) throws {
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, max: 200)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, min: 1)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteVocabularyRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "vocabularyName", location: .uri(locationName: "VocabularyName"))
        ]

        /// The name of the vocabulary to delete.
        public let vocabularyName: String

        public init(vocabularyName: String) {
            self.vocabularyName = vocabularyName
        }

        public func validate(name: String) throws {
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, max: 200)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, min: 1)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeLanguageModelRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "modelName", location: .uri(locationName: "ModelName"))
        ]

        /// The name of the custom language model you submit to get more information.
        public let modelName: String

        public init(modelName: String) {
            self.modelName = modelName
        }

        public func validate(name: String) throws {
            try self.validate(self.modelName, name: "modelName", parent: name, max: 200)
            try self.validate(self.modelName, name: "modelName", parent: name, min: 1)
            try self.validate(self.modelName, name: "modelName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DescribeLanguageModelResponse: AWSDecodableShape {
        /// The name of the custom language model you requested more information about.
        public let languageModel: LanguageModel?

        public init(languageModel: LanguageModel? = nil) {
            self.languageModel = languageModel
        }

        private enum CodingKeys: String, CodingKey {
            case languageModel = "LanguageModel"
        }
    }

    public struct GetCallAnalyticsCategoryRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "categoryName", location: .uri(locationName: "CategoryName"))
        ]

        /// The name of the category you want information about. This value is case sensitive.
        public let categoryName: String

        public init(categoryName: String) {
            self.categoryName = categoryName
        }

        public func validate(name: String) throws {
            try self.validate(self.categoryName, name: "categoryName", parent: name, max: 200)
            try self.validate(self.categoryName, name: "categoryName", parent: name, min: 1)
            try self.validate(self.categoryName, name: "categoryName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetCallAnalyticsCategoryResponse: AWSDecodableShape {
        /// The rules you've defined for a category.
        public let categoryProperties: CategoryProperties?

        public init(categoryProperties: CategoryProperties? = nil) {
            self.categoryProperties = categoryProperties
        }

        private enum CodingKeys: String, CodingKey {
            case categoryProperties = "CategoryProperties"
        }
    }

    public struct GetCallAnalyticsJobRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "callAnalyticsJobName", location: .uri(locationName: "CallAnalyticsJobName"))
        ]

        /// The name of the analytics job you want information about. This value is case sensitive.
        public let callAnalyticsJobName: String

        public init(callAnalyticsJobName: String) {
            self.callAnalyticsJobName = callAnalyticsJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.callAnalyticsJobName, name: "callAnalyticsJobName", parent: name, max: 200)
            try self.validate(self.callAnalyticsJobName, name: "callAnalyticsJobName", parent: name, min: 1)
            try self.validate(self.callAnalyticsJobName, name: "callAnalyticsJobName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetCallAnalyticsJobResponse: AWSDecodableShape {
        /// An object that contains the results of your call analytics job.
        public let callAnalyticsJob: CallAnalyticsJob?

        public init(callAnalyticsJob: CallAnalyticsJob? = nil) {
            self.callAnalyticsJob = callAnalyticsJob
        }

        private enum CodingKeys: String, CodingKey {
            case callAnalyticsJob = "CallAnalyticsJob"
        }
    }

    public struct GetMedicalTranscriptionJobRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "medicalTranscriptionJobName", location: .uri(locationName: "MedicalTranscriptionJobName"))
        ]

        /// The name of the medical transcription job.
        public let medicalTranscriptionJobName: String

        public init(medicalTranscriptionJobName: String) {
            self.medicalTranscriptionJobName = medicalTranscriptionJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.medicalTranscriptionJobName, name: "medicalTranscriptionJobName", parent: name, max: 200)
            try self.validate(self.medicalTranscriptionJobName, name: "medicalTranscriptionJobName", parent: name, min: 1)
            try self.validate(self.medicalTranscriptionJobName, name: "medicalTranscriptionJobName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetMedicalTranscriptionJobResponse: AWSDecodableShape {
        /// An object that contains the results of the medical transcription job.
        public let medicalTranscriptionJob: MedicalTranscriptionJob?

        public init(medicalTranscriptionJob: MedicalTranscriptionJob? = nil) {
            self.medicalTranscriptionJob = medicalTranscriptionJob
        }

        private enum CodingKeys: String, CodingKey {
            case medicalTranscriptionJob = "MedicalTranscriptionJob"
        }
    }

    public struct GetMedicalVocabularyRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "vocabularyName", location: .uri(locationName: "VocabularyName"))
        ]

        /// The name of the vocabulary that you want information about. The value is case sensitive.
        public let vocabularyName: String

        public init(vocabularyName: String) {
            self.vocabularyName = vocabularyName
        }

        public func validate(name: String) throws {
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, max: 200)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, min: 1)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetMedicalVocabularyResponse: AWSDecodableShape {
        /// The location in Amazon S3 where the vocabulary is stored. Use this URI to get the contents of the vocabulary. You  can download your vocabulary from the URI for a limited time.
        public let downloadUri: String?
        /// If the VocabularyState is FAILED, this field contains information about why the job failed.
        public let failureReason: String?
        /// The valid language code for your vocabulary entries.
        public let languageCode: LanguageCode?
        /// The date and time that the vocabulary was last modified with a text file different from the one that was  previously used.
        public let lastModifiedTime: Date?
        /// The name of the vocabulary returned by Amazon Transcribe Medical.
        public let vocabularyName: String?
        /// The processing state of the vocabulary. If the VocabularyState is READY  then you can use it in the StartMedicalTranscriptionJob operation.
        public let vocabularyState: VocabularyState?

        public init(downloadUri: String? = nil, failureReason: String? = nil, languageCode: LanguageCode? = nil, lastModifiedTime: Date? = nil, vocabularyName: String? = nil, vocabularyState: VocabularyState? = nil) {
            self.downloadUri = downloadUri
            self.failureReason = failureReason
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.vocabularyName = vocabularyName
            self.vocabularyState = vocabularyState
        }

        private enum CodingKeys: String, CodingKey {
            case downloadUri = "DownloadUri"
            case failureReason = "FailureReason"
            case languageCode = "LanguageCode"
            case lastModifiedTime = "LastModifiedTime"
            case vocabularyName = "VocabularyName"
            case vocabularyState = "VocabularyState"
        }
    }

    public struct GetTranscriptionJobRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "transcriptionJobName", location: .uri(locationName: "TranscriptionJobName"))
        ]

        /// The name of the job.
        public let transcriptionJobName: String

        public init(transcriptionJobName: String) {
            self.transcriptionJobName = transcriptionJobName
        }

        public func validate(name: String) throws {
            try self.validate(self.transcriptionJobName, name: "transcriptionJobName", parent: name, max: 200)
            try self.validate(self.transcriptionJobName, name: "transcriptionJobName", parent: name, min: 1)
            try self.validate(self.transcriptionJobName, name: "transcriptionJobName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetTranscriptionJobResponse: AWSDecodableShape {
        /// An object that contains the results of the transcription job.
        public let transcriptionJob: TranscriptionJob?

        public init(transcriptionJob: TranscriptionJob? = nil) {
            self.transcriptionJob = transcriptionJob
        }

        private enum CodingKeys: String, CodingKey {
            case transcriptionJob = "TranscriptionJob"
        }
    }

    public struct GetVocabularyFilterRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "vocabularyFilterName", location: .uri(locationName: "VocabularyFilterName"))
        ]

        /// The name of the vocabulary filter for which to return information.
        public let vocabularyFilterName: String

        public init(vocabularyFilterName: String) {
            self.vocabularyFilterName = vocabularyFilterName
        }

        public func validate(name: String) throws {
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, max: 200)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, min: 1)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetVocabularyFilterResponse: AWSDecodableShape {
        /// The URI of the list of words in the vocabulary filter. You can use this URI to get the list of words.
        public let downloadUri: String?
        /// The language code of the words in the vocabulary filter.
        public let languageCode: LanguageCode?
        /// The date and time that the contents of the vocabulary filter were updated.
        public let lastModifiedTime: Date?
        /// The name of the vocabulary filter.
        public let vocabularyFilterName: String?

        public init(downloadUri: String? = nil, languageCode: LanguageCode? = nil, lastModifiedTime: Date? = nil, vocabularyFilterName: String? = nil) {
            self.downloadUri = downloadUri
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.vocabularyFilterName = vocabularyFilterName
        }

        private enum CodingKeys: String, CodingKey {
            case downloadUri = "DownloadUri"
            case languageCode = "LanguageCode"
            case lastModifiedTime = "LastModifiedTime"
            case vocabularyFilterName = "VocabularyFilterName"
        }
    }

    public struct GetVocabularyRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "vocabularyName", location: .uri(locationName: "VocabularyName"))
        ]

        /// The name of the vocabulary to return information about. The name is case sensitive.
        public let vocabularyName: String

        public init(vocabularyName: String) {
            self.vocabularyName = vocabularyName
        }

        public func validate(name: String) throws {
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, max: 200)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, min: 1)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetVocabularyResponse: AWSDecodableShape {
        /// The S3 location where the vocabulary is stored. Use this URI to get the contents of the vocabulary. The URI is available for a limited time.
        public let downloadUri: String?
        /// If the VocabularyState field is FAILED, this field contains information about why the job failed.
        public let failureReason: String?
        /// The language code of the vocabulary entries.
        public let languageCode: LanguageCode?
        /// The date and time that the vocabulary was last modified.
        public let lastModifiedTime: Date?
        /// The name of the vocabulary to return.
        public let vocabularyName: String?
        /// The processing state of the vocabulary.
        public let vocabularyState: VocabularyState?

        public init(downloadUri: String? = nil, failureReason: String? = nil, languageCode: LanguageCode? = nil, lastModifiedTime: Date? = nil, vocabularyName: String? = nil, vocabularyState: VocabularyState? = nil) {
            self.downloadUri = downloadUri
            self.failureReason = failureReason
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.vocabularyName = vocabularyName
            self.vocabularyState = vocabularyState
        }

        private enum CodingKeys: String, CodingKey {
            case downloadUri = "DownloadUri"
            case failureReason = "FailureReason"
            case languageCode = "LanguageCode"
            case lastModifiedTime = "LastModifiedTime"
            case vocabularyName = "VocabularyName"
            case vocabularyState = "VocabularyState"
        }
    }

    public struct InputDataConfig: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Resource Name (ARN) that uniquely identifies the permissions you've given Amazon Transcribe to access your  Amazon S3 buckets containing your media files or text data.
        public let dataAccessRoleArn: String
        /// The Amazon S3 prefix you specify to access the plain text files that you use to train your custom language model.
        public let s3Uri: String
        /// The Amazon S3 prefix you specify to access the plain text files that you use to tune your custom language model.
        public let tuningDataS3Uri: String?

        public init(dataAccessRoleArn: String, s3Uri: String, tuningDataS3Uri: String? = nil) {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.s3Uri = s3Uri
            self.tuningDataS3Uri = tuningDataS3Uri
        }

        public func validate(name: String) throws {
            try self.validate(self.dataAccessRoleArn, name: "dataAccessRoleArn", parent: name, max: 2048)
            try self.validate(self.dataAccessRoleArn, name: "dataAccessRoleArn", parent: name, min: 20)
            try self.validate(self.dataAccessRoleArn, name: "dataAccessRoleArn", parent: name, pattern: "^arn:(aws|aws-cn|aws-us-gov|aws-iso-{0,1}[a-z]{0,1}):iam::[0-9]{0,63}:role/[A-Za-z0-9:_/+=,@.-]{0,1024}$")
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, max: 2000)
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, min: 1)
            try self.validate(self.s3Uri, name: "s3Uri", parent: name, pattern: "^(s3://|http(s*)://).+$")
            try self.validate(self.tuningDataS3Uri, name: "tuningDataS3Uri", parent: name, max: 2000)
            try self.validate(self.tuningDataS3Uri, name: "tuningDataS3Uri", parent: name, min: 1)
            try self.validate(self.tuningDataS3Uri, name: "tuningDataS3Uri", parent: name, pattern: "^(s3://|http(s*)://).+$")
        }

        private enum CodingKeys: String, CodingKey {
            case dataAccessRoleArn = "DataAccessRoleArn"
            case s3Uri = "S3Uri"
            case tuningDataS3Uri = "TuningDataS3Uri"
        }
    }

    public struct InterruptionFilter: AWSEncodableShape & AWSDecodableShape {
        /// An object you can use to specify a time range (in milliseconds) for when you'd want to find the interruption. For  example, you could search for an interruption between the 30,000 millisecond mark and the 45,000 millisecond mark.  You could also specify the time period as the first 15,000 milliseconds or the last 15,000 milliseconds.
        public let absoluteTimeRange: AbsoluteTimeRange?
        /// Set to TRUE to look for a time period where there was no interruption.
        public let negate: Bool?
        /// Indicates whether the caller or customer was interrupting.
        public let participantRole: ParticipantRole?
        /// An object that allows percentages to specify the proportion of the call where there was a interruption. For  example, you can specify the first half of the call. You can also specify the period of time between halfway through to three-quarters of the way through the call. Because the length of conversation can vary between calls, you can apply relative time ranges across all calls.
        public let relativeTimeRange: RelativeTimeRange?
        /// The duration of the interruption.
        public let threshold: Int64?

        public init(absoluteTimeRange: AbsoluteTimeRange? = nil, negate: Bool? = nil, participantRole: ParticipantRole? = nil, relativeTimeRange: RelativeTimeRange? = nil, threshold: Int64? = nil) {
            self.absoluteTimeRange = absoluteTimeRange
            self.negate = negate
            self.participantRole = participantRole
            self.relativeTimeRange = relativeTimeRange
            self.threshold = threshold
        }

        public func validate(name: String) throws {
            try self.absoluteTimeRange?.validate(name: "\(name).absoluteTimeRange")
            try self.relativeTimeRange?.validate(name: "\(name).relativeTimeRange")
            try self.validate(self.threshold, name: "threshold", parent: name, max: 14_400_000)
            try self.validate(self.threshold, name: "threshold", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case absoluteTimeRange = "AbsoluteTimeRange"
            case negate = "Negate"
            case participantRole = "ParticipantRole"
            case relativeTimeRange = "RelativeTimeRange"
            case threshold = "Threshold"
        }
    }

    public struct JobExecutionSettings: AWSEncodableShape & AWSDecodableShape {
        /// Indicates whether a job should be queued by Amazon Transcribe when the concurrent execution limit is exceeded. When the AllowDeferredExecution field is true, jobs are queued and executed when the number of executing jobs falls below the concurrent execution limit. If the field is false, Amazon Transcribe returns a  LimitExceededException exception. Note that job queuing is enabled by default for call analytics jobs. If you specify the AllowDeferredExecution field, you must specify the  DataAccessRoleArn field.
        public let allowDeferredExecution: Bool?
        /// The Amazon Resource Name (ARN) of a role that has access to the S3 bucket that contains the input files. Amazon Transcribe assumes this role to read queued media files. If you have specified an output S3 bucket for the transcription results, this role should have access to the output bucket as well. If you specify the AllowDeferredExecution field, you must specify the DataAccessRoleArn field.
        public let dataAccessRoleArn: String?

        public init(allowDeferredExecution: Bool? = nil, dataAccessRoleArn: String? = nil) {
            self.allowDeferredExecution = allowDeferredExecution
            self.dataAccessRoleArn = dataAccessRoleArn
        }

        public func validate(name: String) throws {
            try self.validate(self.dataAccessRoleArn, name: "dataAccessRoleArn", parent: name, max: 2048)
            try self.validate(self.dataAccessRoleArn, name: "dataAccessRoleArn", parent: name, min: 20)
            try self.validate(self.dataAccessRoleArn, name: "dataAccessRoleArn", parent: name, pattern: "^arn:(aws|aws-cn|aws-us-gov|aws-iso-{0,1}[a-z]{0,1}):iam::[0-9]{0,63}:role/[A-Za-z0-9:_/+=,@.-]{0,1024}$")
        }

        private enum CodingKeys: String, CodingKey {
            case allowDeferredExecution = "AllowDeferredExecution"
            case dataAccessRoleArn = "DataAccessRoleArn"
        }
    }

    public struct LanguageModel: AWSDecodableShape {
        /// The Amazon Transcribe standard language model, or base model used to create the custom language model.
        public let baseModelName: BaseModelName?
        /// The time the custom language model was created.
        public let createTime: Date?
        /// The reason why the custom language model couldn't be created.
        public let failureReason: String?
        /// The data access role and Amazon S3 prefixes for the input files used to train the custom language model.
        public let inputDataConfig: InputDataConfig?
        /// The language code you used to create your custom language model.
        public let languageCode: CLMLanguageCode?
        /// The most recent time the custom language model was modified.
        public let lastModifiedTime: Date?
        /// The name of the custom language model.
        public let modelName: String?
        /// The creation status of a custom language model. When the status is COMPLETED the model is  ready for use.
        public let modelStatus: ModelStatus?
        /// Whether the base model used for the custom language model is up to date. If this field is true  then you are running the most up-to-date version of the base model in your custom language model.
        public let upgradeAvailability: Bool?

        public init(baseModelName: BaseModelName? = nil, createTime: Date? = nil, failureReason: String? = nil, inputDataConfig: InputDataConfig? = nil, languageCode: CLMLanguageCode? = nil, lastModifiedTime: Date? = nil, modelName: String? = nil, modelStatus: ModelStatus? = nil, upgradeAvailability: Bool? = nil) {
            self.baseModelName = baseModelName
            self.createTime = createTime
            self.failureReason = failureReason
            self.inputDataConfig = inputDataConfig
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.modelName = modelName
            self.modelStatus = modelStatus
            self.upgradeAvailability = upgradeAvailability
        }

        private enum CodingKeys: String, CodingKey {
            case baseModelName = "BaseModelName"
            case createTime = "CreateTime"
            case failureReason = "FailureReason"
            case inputDataConfig = "InputDataConfig"
            case languageCode = "LanguageCode"
            case lastModifiedTime = "LastModifiedTime"
            case modelName = "ModelName"
            case modelStatus = "ModelStatus"
            case upgradeAvailability = "UpgradeAvailability"
        }
    }

    public struct ListCallAnalyticsCategoriesRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "MaxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "NextToken"))
        ]

        /// The maximum number of categories to return in each page of results. If there are fewer  results than the value you specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.
        public let maxResults: Int?
        /// When included, NextTokenfetches the next set of categories if the result  of the previous request was truncated.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^.+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListCallAnalyticsCategoriesResponse: AWSDecodableShape {
        /// A list of objects containing information about analytics categories.
        public let categories: [CategoryProperties]?
        /// The  operation returns a page of jobs at a time. The maximum size of the list is set by the MaxResults parameter. If there are  more categories in the list than the page size, Amazon Transcribe returns the NextPage  token. Include the token in the next request to the  operation to return the next page of analytics categories.
        public let nextToken: String?

        public init(categories: [CategoryProperties]? = nil, nextToken: String? = nil) {
            self.categories = categories
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case categories = "Categories"
            case nextToken = "NextToken"
        }
    }

    public struct ListCallAnalyticsJobsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "jobNameContains", location: .querystring(locationName: "JobNameContains")),
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "MaxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "NextToken")),
            AWSMemberEncoding(label: "status", location: .querystring(locationName: "Status"))
        ]

        /// When specified, the jobs returned in the list are limited to jobs whose name contains the specified string.
        public let jobNameContains: String?
        ///   The maximum number of call analytics jobs to return in each page of results. If there are  fewer results than the value you specify, only the actual results are returned. If you do not  specify a value, the default of 5 is used.
        public let maxResults: Int?
        /// If you receive a truncated result in the previous request of  ,  include NextToken to fetch the next set of jobs.
        public let nextToken: String?
        /// When specified, returns only call analytics jobs with the specified status. Jobs are ordered by creation date, with the most recent jobs returned first. If you don't specify a status, Amazon Transcribe  returns all analytics jobs ordered by creation date.
        public let status: CallAnalyticsJobStatus?

        public init(jobNameContains: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, status: CallAnalyticsJobStatus? = nil) {
            self.jobNameContains = jobNameContains
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.status = status
        }

        public func validate(name: String) throws {
            try self.validate(self.jobNameContains, name: "jobNameContains", parent: name, max: 200)
            try self.validate(self.jobNameContains, name: "jobNameContains", parent: name, min: 1)
            try self.validate(self.jobNameContains, name: "jobNameContains", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^.+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListCallAnalyticsJobsResponse: AWSDecodableShape {
        /// A list of objects containing summary information for a transcription job.
        public let callAnalyticsJobSummaries: [CallAnalyticsJobSummary]?
        /// The  operation returns a page of jobs at a time. The  maximum size of the page is set by the MaxResults parameter. If there are more jobs in the list than the page size, Amazon Transcribe returns the NextPage token. Include the  token in your next request to the  operation to return next page of jobs.
        public let nextToken: String?
        /// When specified, returns only call analytics jobs with that status. Jobs are ordered by creation date, with the most recent jobs returned first. If you don't specify a status, Amazon Transcribe returns all transcription jobs ordered by creation date.
        public let status: CallAnalyticsJobStatus?

        public init(callAnalyticsJobSummaries: [CallAnalyticsJobSummary]? = nil, nextToken: String? = nil, status: CallAnalyticsJobStatus? = nil) {
            self.callAnalyticsJobSummaries = callAnalyticsJobSummaries
            self.nextToken = nextToken
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case callAnalyticsJobSummaries = "CallAnalyticsJobSummaries"
            case nextToken = "NextToken"
            case status = "Status"
        }
    }

    public struct ListLanguageModelsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "MaxResults")),
            AWSMemberEncoding(label: "nameContains", location: .querystring(locationName: "NameContains")),
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "NextToken")),
            AWSMemberEncoding(label: "statusEquals", location: .querystring(locationName: "         StatusEquals"))
        ]

        ///  The maximum number of language models to return in each page of results. If there are fewer results than the  value you specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.
        public let maxResults: Int?
        /// When specified, the custom language model names returned contain the substring you've specified.
        public let nameContains: String?
        /// When included, fetches the next set of jobs if the result of the previous request was truncated.
        public let nextToken: String?
        /// When specified, returns only custom language models with the specified status. Language models are ordered by creation date, with the newest models first. If you don't specify a status, Amazon Transcribe returns all custom language models ordered by date.
        public let statusEquals: ModelStatus?

        public init(maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil, statusEquals: ModelStatus? = nil) {
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.statusEquals = statusEquals
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 200)
            try self.validate(self.nameContains, name: "nameContains", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^.+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListLanguageModelsResponse: AWSDecodableShape {
        /// A list of objects containing information about custom language models.
        public let models: [LanguageModel]?
        /// The  operation returns a page of jobs at a time. The maximum size of the list is set by the MaxResults parameter. If there are more language models in the list than the page size, Amazon Transcribe returns the NextPage token. Include the token in the next request to the  operation to return the next page of language models.
        public let nextToken: String?

        public init(models: [LanguageModel]? = nil, nextToken: String? = nil) {
            self.models = models
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case models = "Models"
            case nextToken = "NextToken"
        }
    }

    public struct ListMedicalTranscriptionJobsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "jobNameContains", location: .querystring(locationName: "JobNameContains")),
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "MaxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "NextToken")),
            AWSMemberEncoding(label: "status", location: .querystring(locationName: "Status"))
        ]

        /// When specified, the jobs returned in the list are limited to jobs whose name contains the specified string.
        public let jobNameContains: String?
        ///  The maximum number of medical transcription jobs to return in each page of results. If there are fewer  results than the value you specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.
        public let maxResults: Int?
        /// If you a receive a truncated result in the previous request of ListMedicalTranscriptionJobs,  include NextToken to fetch the next set of jobs.
        public let nextToken: String?
        /// When specified, returns only medical transcription jobs with the specified status. Jobs are ordered by creation  date, with the newest jobs returned first. If you don't specify a status, Amazon Transcribe Medical returns all transcription jobs ordered by creation date.
        public let status: TranscriptionJobStatus?

        public init(jobNameContains: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, status: TranscriptionJobStatus? = nil) {
            self.jobNameContains = jobNameContains
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.status = status
        }

        public func validate(name: String) throws {
            try self.validate(self.jobNameContains, name: "jobNameContains", parent: name, max: 200)
            try self.validate(self.jobNameContains, name: "jobNameContains", parent: name, min: 1)
            try self.validate(self.jobNameContains, name: "jobNameContains", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^.+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListMedicalTranscriptionJobsResponse: AWSDecodableShape {
        /// A list of objects containing summary information for a transcription job.
        public let medicalTranscriptionJobSummaries: [MedicalTranscriptionJobSummary]?
        /// The ListMedicalTranscriptionJobs operation returns a page of jobs at a time. The maximum  size of the page is set by the MaxResults parameter. If the number of jobs exceeds what can fit on a page, Amazon Transcribe Medical returns the NextPage token. Include the token in the next request to the ListMedicalTranscriptionJobs operation to return in the next page of jobs.
        public let nextToken: String?
        /// The requested status of the medical transcription jobs returned.
        public let status: TranscriptionJobStatus?

        public init(medicalTranscriptionJobSummaries: [MedicalTranscriptionJobSummary]? = nil, nextToken: String? = nil, status: TranscriptionJobStatus? = nil) {
            self.medicalTranscriptionJobSummaries = medicalTranscriptionJobSummaries
            self.nextToken = nextToken
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case medicalTranscriptionJobSummaries = "MedicalTranscriptionJobSummaries"
            case nextToken = "NextToken"
            case status = "Status"
        }
    }

    public struct ListMedicalVocabulariesRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "MaxResults")),
            AWSMemberEncoding(label: "nameContains", location: .querystring(locationName: "NameContains")),
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "NextToken")),
            AWSMemberEncoding(label: "stateEquals", location: .querystring(locationName: "StateEquals"))
        ]

        /// The maximum number of vocabularies to return in each page of results. If there are fewer results than the  value you specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.
        public let maxResults: Int?
        /// Returns vocabularies whose names contain the specified string. The search is not case sensitive. ListMedicalVocabularies returns both "vocabularyname" and  "VocabularyName".
        public let nameContains: String?
        /// If the result of your previous request to ListMedicalVocabularies was truncated, include the  NextToken to fetch the next set of vocabularies.
        public let nextToken: String?
        /// When specified, returns only vocabularies with the VocabularyState equal to the specified  vocabulary state. Use this field to see which vocabularies are ready for your medical transcription jobs.
        public let stateEquals: VocabularyState?

        public init(maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil, stateEquals: VocabularyState? = nil) {
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.stateEquals = stateEquals
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 200)
            try self.validate(self.nameContains, name: "nameContains", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^.+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListMedicalVocabulariesResponse: AWSDecodableShape {
        /// The ListMedicalVocabularies operation returns a page of vocabularies at a time. You set the maximum number of vocabularies to return on a page with the MaxResults parameter. If there  are more jobs in the list will fit on a page, Amazon Transcribe Medical returns the NextPage token. To return the next  page of vocabularies, include the token in the next request to the ListMedicalVocabularies  operation .
        public let nextToken: String?
        /// The requested vocabulary state.
        public let status: VocabularyState?
        /// A list of objects that describe the vocabularies that match your search criteria.
        public let vocabularies: [VocabularyInfo]?

        public init(nextToken: String? = nil, status: VocabularyState? = nil, vocabularies: [VocabularyInfo]? = nil) {
            self.nextToken = nextToken
            self.status = status
            self.vocabularies = vocabularies
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case status = "Status"
            case vocabularies = "Vocabularies"
        }
    }

    public struct ListTagsForResourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .uri(locationName: "ResourceArn"))
        ]

        /// Lists all tags associated with a given Amazon Resource Name (ARN).
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1011)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "^arn:aws(-[^:]+)?:transcribe:[a-zA-Z0-9-]*:[0-9]{12}:[a-zA-Z-]*/[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListTagsForResourceResponse: AWSDecodableShape {
        /// Lists all tags associated with the given Amazon Resource Name (ARN).
        public let resourceArn: String?
        /// Lists all tags associated with the given transcription job, vocabulary, or resource.
        public let tags: [Tag]?

        public init(resourceArn: String? = nil, tags: [Tag]? = nil) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tags = "Tags"
        }
    }

    public struct ListTranscriptionJobsRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "jobNameContains", location: .querystring(locationName: "JobNameContains")),
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "MaxResults")),
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "NextToken")),
            AWSMemberEncoding(label: "status", location: .querystring(locationName: "Status"))
        ]

        /// When specified, the jobs returned in the list are limited to jobs whose name contains the specified string.
        public let jobNameContains: String?
        /// The maximum number of jobs to return in each page of results. If there are fewer results than the value you specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.
        public let maxResults: Int?
        /// If the result of the previous request to ListTranscriptionJobs is truncated, include the  NextToken to fetch the next set of jobs.
        public let nextToken: String?
        /// When specified, returns only transcription jobs with the specified status. Jobs are ordered by creation date, with the newest jobs returned first. If you don’t specify a status, Amazon Transcribe returns all transcription jobs ordered by creation  date.
        public let status: TranscriptionJobStatus?

        public init(jobNameContains: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, status: TranscriptionJobStatus? = nil) {
            self.jobNameContains = jobNameContains
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.status = status
        }

        public func validate(name: String) throws {
            try self.validate(self.jobNameContains, name: "jobNameContains", parent: name, max: 200)
            try self.validate(self.jobNameContains, name: "jobNameContains", parent: name, min: 1)
            try self.validate(self.jobNameContains, name: "jobNameContains", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^.+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListTranscriptionJobsResponse: AWSDecodableShape {
        /// The ListTranscriptionJobs operation returns a page of jobs at a time. The maximum size of the  page is set by the MaxResults parameter. If there are more jobs in the list than the page size, Amazon Transcribe  returns the NextPage token. Include the token in the next request to the  ListTranscriptionJobs operation to return in the next page of jobs.
        public let nextToken: String?
        /// The requested status of the jobs returned.
        public let status: TranscriptionJobStatus?
        /// A list of objects containing summary information for a transcription job.
        public let transcriptionJobSummaries: [TranscriptionJobSummary]?

        public init(nextToken: String? = nil, status: TranscriptionJobStatus? = nil, transcriptionJobSummaries: [TranscriptionJobSummary]? = nil) {
            self.nextToken = nextToken
            self.status = status
            self.transcriptionJobSummaries = transcriptionJobSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case status = "Status"
            case transcriptionJobSummaries = "TranscriptionJobSummaries"
        }
    }

    public struct ListVocabulariesRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "MaxResults")),
            AWSMemberEncoding(label: "nameContains", location: .querystring(locationName: "NameContains")),
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "NextToken")),
            AWSMemberEncoding(label: "stateEquals", location: .querystring(locationName: "StateEquals"))
        ]

        /// The maximum number of vocabularies to return in each page of results. If there are fewer results than the  value you specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.
        public let maxResults: Int?
        /// When specified, the vocabularies returned in the list are limited to vocabularies whose name contains the  specified string. The search is not case sensitive, ListVocabularies returns both "vocabularyname"  and "VocabularyName" in the response list.
        public let nameContains: String?
        /// If the result of the previous request to ListVocabularies was truncated, include the  NextToken to fetch the next set of jobs.
        public let nextToken: String?
        /// When specified, only returns vocabularies with the VocabularyState field equal to the  specified state.
        public let stateEquals: VocabularyState?

        public init(maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil, stateEquals: VocabularyState? = nil) {
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
            self.stateEquals = stateEquals
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 200)
            try self.validate(self.nameContains, name: "nameContains", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^.+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListVocabulariesResponse: AWSDecodableShape {
        /// The ListVocabularies operation returns a page of vocabularies at a time. The maximum size of  the page is set in the MaxResults parameter. If there are more jobs in the list than will fit on the  page, Amazon Transcribe returns the NextPage token. To return in the next page of jobs, include the token in the next request to the ListVocabularies operation.
        public let nextToken: String?
        /// The requested vocabulary state.
        public let status: VocabularyState?
        /// A list of objects that describe the vocabularies that match the search criteria in the request.
        public let vocabularies: [VocabularyInfo]?

        public init(nextToken: String? = nil, status: VocabularyState? = nil, vocabularies: [VocabularyInfo]? = nil) {
            self.nextToken = nextToken
            self.status = status
            self.vocabularies = vocabularies
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case status = "Status"
            case vocabularies = "Vocabularies"
        }
    }

    public struct ListVocabularyFiltersRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "maxResults", location: .querystring(locationName: "MaxResults")),
            AWSMemberEncoding(label: "nameContains", location: .querystring(locationName: "NameContains")),
            AWSMemberEncoding(label: "nextToken", location: .querystring(locationName: "NextToken"))
        ]

        /// The maximum number of filters to return in each page of results. If there are fewer results than the value you specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.
        public let maxResults: Int?
        /// Filters the response so that it only contains vocabulary filters whose name contains the specified string.
        public let nameContains: String?
        /// If the result of the previous request to ListVocabularyFilters was truncated, include the  NextToken to fetch the next set of collections.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nameContains: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nameContains = nameContains
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, max: 200)
            try self.validate(self.nameContains, name: "nameContains", parent: name, min: 1)
            try self.validate(self.nameContains, name: "nameContains", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 8192)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^.+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListVocabularyFiltersResponse: AWSDecodableShape {
        /// The ListVocabularyFilters operation returns a page of collections at a time. The maximum size  of the page is set by the MaxResults parameter. If there are more jobs in the list than the page size,  Amazon Transcribe returns the NextPage token. Include the token in the next request to the ListVocabularyFilters operation to return in the next page of jobs.
        public let nextToken: String?
        /// The list of vocabulary filters. It contains at most MaxResults number of filters. If there are more filters, call the ListVocabularyFilters operation again with the NextToken parameter  in the request set to the value of the NextToken field in the response.
        public let vocabularyFilters: [VocabularyFilterInfo]?

        public init(nextToken: String? = nil, vocabularyFilters: [VocabularyFilterInfo]? = nil) {
            self.nextToken = nextToken
            self.vocabularyFilters = vocabularyFilters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case vocabularyFilters = "VocabularyFilters"
        }
    }

    public struct Media: AWSEncodableShape & AWSDecodableShape {
        /// The S3 object location of the input media file. The URI must be in the same region as the API endpoint that you  are calling. The general form is:  For example:   For more information about S3 object names, see Object Keys in the Amazon S3  Developer Guide.
        public let mediaFileUri: String?
        ///  The S3 object location for your redacted output media file. This is only supported for call analytics jobs.
        public let redactedMediaFileUri: String?

        public init(mediaFileUri: String? = nil, redactedMediaFileUri: String? = nil) {
            self.mediaFileUri = mediaFileUri
            self.redactedMediaFileUri = redactedMediaFileUri
        }

        public func validate(name: String) throws {
            try self.validate(self.mediaFileUri, name: "mediaFileUri", parent: name, max: 2000)
            try self.validate(self.mediaFileUri, name: "mediaFileUri", parent: name, min: 1)
            try self.validate(self.mediaFileUri, name: "mediaFileUri", parent: name, pattern: "^(s3://|http(s*)://).+$")
            try self.validate(self.redactedMediaFileUri, name: "redactedMediaFileUri", parent: name, max: 2000)
            try self.validate(self.redactedMediaFileUri, name: "redactedMediaFileUri", parent: name, min: 1)
            try self.validate(self.redactedMediaFileUri, name: "redactedMediaFileUri", parent: name, pattern: "^(s3://|http(s*)://).+$")
        }

        private enum CodingKeys: String, CodingKey {
            case mediaFileUri = "MediaFileUri"
            case redactedMediaFileUri = "RedactedMediaFileUri"
        }
    }

    public struct MedicalTranscript: AWSDecodableShape {
        /// The S3 object location of the medical transcript. Use this URI to access the medical transcript. This URI points to the S3 bucket you created to store the medical transcript.
        public let transcriptFileUri: String?

        public init(transcriptFileUri: String? = nil) {
            self.transcriptFileUri = transcriptFileUri
        }

        private enum CodingKeys: String, CodingKey {
            case transcriptFileUri = "TranscriptFileUri"
        }
    }

    public struct MedicalTranscriptionJob: AWSDecodableShape {
        /// A timestamp that shows when the job was completed.
        public let completionTime: Date?
        /// Shows the type of content that you've configured Amazon Transcribe Medical to identify in a transcription job. If the value is  PHI, you've configured the job to identify personal health information (PHI) in the transcription output.
        public let contentIdentificationType: MedicalContentIdentificationType?
        /// A timestamp that shows when the job was created.
        public let creationTime: Date?
        /// If the TranscriptionJobStatus field is FAILED, this field contains information  about why the job failed. The FailureReason field contains one of the following values:    Unsupported media format- The media format specified in the MediaFormat field of the request isn't valid. See the description of the  MediaFormat field for a list of valid values.    The media format provided does not match the detected media format- The media format of the audio file doesn't match the format specified in the MediaFormat field in the request.  Check the media format of your media file and make sure the two values match.    Invalid sample rate for audio file- The sample rate specified in the  MediaSampleRateHertz of the request isn't valid. The sample rate must be between 8,000 and  48,000 Hertz.    The sample rate provided does not match the detected sample rate- The sample rate in the  audio file doesn't match the sample rate specified in the MediaSampleRateHertz field in the request.  Check the sample rate of your media file and make sure that the two values match.    Invalid file size: file size too large- The size of your audio file is larger than what Amazon Transcribe Medical can  process. For more information, see Guidelines and Quotas in the Amazon Transcribe Medical Guide     Invalid number of channels: number of channels too large- Your audio contains more channels than Amazon Transcribe Medical is configured to process. To request additional channels, see Amazon Transcribe Medical Endpoints and Quotas in the Amazon Web Services General Reference
        public let failureReason: String?
        /// The language code for the language spoken in the source audio file. US English (en-US) is the only supported language for medical transcriptions. Any other value you enter for language code results in a  BadRequestException error.
        public let languageCode: LanguageCode?
        public let media: Media?
        /// The format of the input media file.
        public let mediaFormat: MediaFormat?
        /// The sample rate, in Hertz, of the source audio containing medical information. If you don't specify the sample rate, Amazon Transcribe Medical determines it for you. If you choose to specify the sample rate, it  must match the rate detected by Amazon Transcribe Medical. In most cases, you should leave the  MedicalMediaSampleHertz blank and let Amazon Transcribe Medical determine the sample rate.
        public let mediaSampleRateHertz: Int?
        /// The name for a given medical transcription job.
        public let medicalTranscriptionJobName: String?
        /// Object that contains  object.
        public let settings: MedicalTranscriptionSetting?
        /// The medical specialty of any clinicians providing a dictation or having a conversation. Refer to Transcribing a medical conversationfor a  list of supported specialties.
        public let specialty: Specialty?
        /// A timestamp that shows when the job started processing.
        public let startTime: Date?
        /// A key:value pair assigned to a given medical transcription job.
        public let tags: [Tag]?
        /// An object that contains the MedicalTranscript. The MedicalTranscript contains the TranscriptFileUri.
        public let transcript: MedicalTranscript?
        /// The completion status of a medical transcription job.
        public let transcriptionJobStatus: TranscriptionJobStatus?
        /// The type of speech in the transcription job. CONVERSATION is generally used for patient-physician dialogues. DICTATION is the setting for physicians speaking their notes after seeing a patient. For more information, see What is Amazon Transcribe Medical?.
        public let type: `Type`?

        public init(completionTime: Date? = nil, contentIdentificationType: MedicalContentIdentificationType? = nil, creationTime: Date? = nil, failureReason: String? = nil, languageCode: LanguageCode? = nil, media: Media? = nil, mediaFormat: MediaFormat? = nil, mediaSampleRateHertz: Int? = nil, medicalTranscriptionJobName: String? = nil, settings: MedicalTranscriptionSetting? = nil, specialty: Specialty? = nil, startTime: Date? = nil, tags: [Tag]? = nil, transcript: MedicalTranscript? = nil, transcriptionJobStatus: TranscriptionJobStatus? = nil, type: `Type`? = nil) {
            self.completionTime = completionTime
            self.contentIdentificationType = contentIdentificationType
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.languageCode = languageCode
            self.media = media
            self.mediaFormat = mediaFormat
            self.mediaSampleRateHertz = mediaSampleRateHertz
            self.medicalTranscriptionJobName = medicalTranscriptionJobName
            self.settings = settings
            self.specialty = specialty
            self.startTime = startTime
            self.tags = tags
            self.transcript = transcript
            self.transcriptionJobStatus = transcriptionJobStatus
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case completionTime = "CompletionTime"
            case contentIdentificationType = "ContentIdentificationType"
            case creationTime = "CreationTime"
            case failureReason = "FailureReason"
            case languageCode = "LanguageCode"
            case media = "Media"
            case mediaFormat = "MediaFormat"
            case mediaSampleRateHertz = "MediaSampleRateHertz"
            case medicalTranscriptionJobName = "MedicalTranscriptionJobName"
            case settings = "Settings"
            case specialty = "Specialty"
            case startTime = "StartTime"
            case tags = "Tags"
            case transcript = "Transcript"
            case transcriptionJobStatus = "TranscriptionJobStatus"
            case type = "Type"
        }
    }

    public struct MedicalTranscriptionJobSummary: AWSDecodableShape {
        /// A timestamp that shows when the job was completed.
        public let completionTime: Date?
        /// Shows the type of information you've configured Amazon Transcribe Medical to identify in a transcription job. If the value is  PHI, you've configured the transcription job to identify personal health information (PHI).
        public let contentIdentificationType: MedicalContentIdentificationType?
        /// A timestamp that shows when the medical transcription job was created.
        public let creationTime: Date?
        /// If the TranscriptionJobStatus field is FAILED, a description of the error.
        public let failureReason: String?
        /// The language of the transcript in the source audio file.
        public let languageCode: LanguageCode?
        /// The name of a medical transcription job.
        public let medicalTranscriptionJobName: String?
        /// Indicates the location of the transcription job's output. This field must be the path of an S3 bucket; if you don't  already have an S3 bucket, one is created based on the path you add.
        public let outputLocationType: OutputLocationType?
        /// The medical specialty of the transcription job. Refer to Transcribing a medical conversationfor a  list of supported specialties.
        public let specialty: Specialty?
        /// A timestamp that shows when the job began processing.
        public let startTime: Date?
        /// The status of the medical transcription job.
        public let transcriptionJobStatus: TranscriptionJobStatus?
        /// The speech of the clinician in the input audio.
        public let type: `Type`?

        public init(completionTime: Date? = nil, contentIdentificationType: MedicalContentIdentificationType? = nil, creationTime: Date? = nil, failureReason: String? = nil, languageCode: LanguageCode? = nil, medicalTranscriptionJobName: String? = nil, outputLocationType: OutputLocationType? = nil, specialty: Specialty? = nil, startTime: Date? = nil, transcriptionJobStatus: TranscriptionJobStatus? = nil, type: `Type`? = nil) {
            self.completionTime = completionTime
            self.contentIdentificationType = contentIdentificationType
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.languageCode = languageCode
            self.medicalTranscriptionJobName = medicalTranscriptionJobName
            self.outputLocationType = outputLocationType
            self.specialty = specialty
            self.startTime = startTime
            self.transcriptionJobStatus = transcriptionJobStatus
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case completionTime = "CompletionTime"
            case contentIdentificationType = "ContentIdentificationType"
            case creationTime = "CreationTime"
            case failureReason = "FailureReason"
            case languageCode = "LanguageCode"
            case medicalTranscriptionJobName = "MedicalTranscriptionJobName"
            case outputLocationType = "OutputLocationType"
            case specialty = "Specialty"
            case startTime = "StartTime"
            case transcriptionJobStatus = "TranscriptionJobStatus"
            case type = "Type"
        }
    }

    public struct MedicalTranscriptionSetting: AWSEncodableShape & AWSDecodableShape {
        /// Instructs Amazon Transcribe Medical to process each audio channel separately and then merge the transcription output of each  channel into a single transcription. Amazon Transcribe Medical also produces a transcription of each item detected on an audio channel, including the start time and end  time of the item and alternative transcriptions of item. The alternative transcriptions also come with confidence scores  provided by Amazon Transcribe Medical. You can't set both ShowSpeakerLabels and ChannelIdentification in the same  request. If you set both, your request returns a BadRequestException
        public let channelIdentification: Bool?
        /// The maximum number of alternatives that you tell the service to return. If you specify the MaxAlternatives field, you must set the ShowAlternatives field to true.
        public let maxAlternatives: Int?
        /// The maximum number of speakers to identify in the input audio. If there are more speakers in the audio than this number, multiple speakers are identified as a single speaker. If you specify the MaxSpeakerLabels field,  you must set the ShowSpeakerLabels field to true.
        public let maxSpeakerLabels: Int?
        /// Determines whether alternative transcripts are generated along with the transcript that has the highest confidence.  If you set ShowAlternatives field to true, you must also set the maximum number of alternatives to return in the MaxAlternatives field.
        public let showAlternatives: Bool?
        /// Determines whether the transcription job uses speaker recognition to identify different speakers in the input  audio. Speaker recognition labels individual speakers in the audio file. If you set the ShowSpeakerLabels field to true, you must also set the maximum number of speaker labels in the MaxSpeakerLabels field. You can't set both ShowSpeakerLabels and ChannelIdentification in the same request. If you set both, your request returns a BadRequestException.
        public let showSpeakerLabels: Bool?
        /// The name of the vocabulary to use when processing a medical transcription job.
        public let vocabularyName: String?

        public init(channelIdentification: Bool? = nil, maxAlternatives: Int? = nil, maxSpeakerLabels: Int? = nil, showAlternatives: Bool? = nil, showSpeakerLabels: Bool? = nil, vocabularyName: String? = nil) {
            self.channelIdentification = channelIdentification
            self.maxAlternatives = maxAlternatives
            self.maxSpeakerLabels = maxSpeakerLabels
            self.showAlternatives = showAlternatives
            self.showSpeakerLabels = showSpeakerLabels
            self.vocabularyName = vocabularyName
        }

        public func validate(name: String) throws {
            try self.validate(self.maxAlternatives, name: "maxAlternatives", parent: name, max: 10)
            try self.validate(self.maxAlternatives, name: "maxAlternatives", parent: name, min: 2)
            try self.validate(self.maxSpeakerLabels, name: "maxSpeakerLabels", parent: name, max: 10)
            try self.validate(self.maxSpeakerLabels, name: "maxSpeakerLabels", parent: name, min: 2)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, max: 200)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, min: 1)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case channelIdentification = "ChannelIdentification"
            case maxAlternatives = "MaxAlternatives"
            case maxSpeakerLabels = "MaxSpeakerLabels"
            case showAlternatives = "ShowAlternatives"
            case showSpeakerLabels = "ShowSpeakerLabels"
            case vocabularyName = "VocabularyName"
        }
    }

    public struct ModelSettings: AWSEncodableShape & AWSDecodableShape {
        /// The name of your custom language model.
        public let languageModelName: String?

        public init(languageModelName: String? = nil) {
            self.languageModelName = languageModelName
        }

        public func validate(name: String) throws {
            try self.validate(self.languageModelName, name: "languageModelName", parent: name, max: 200)
            try self.validate(self.languageModelName, name: "languageModelName", parent: name, min: 1)
            try self.validate(self.languageModelName, name: "languageModelName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case languageModelName = "LanguageModelName"
        }
    }

    public struct NonTalkTimeFilter: AWSEncodableShape & AWSDecodableShape {
        /// An object you can use to specify a time range (in milliseconds) for when no one is talking. For example, you  could specify a time period between the 30,000 millisecond mark and the 45,000 millisecond mark. You could also  specify the time period as the first 15,000 milliseconds or the last 15,000 milliseconds.
        public let absoluteTimeRange: AbsoluteTimeRange?
        /// Set to TRUE to look for a time period when people were talking.
        public let negate: Bool?
        /// An object that allows percentages to specify the proportion of the call where there was silence. For example, you  can specify the first half of the call. You can also specify the period of time between halfway through to three-quarters  of the way through the call. Because the length of conversation can vary between calls, you can apply relative time ranges across all calls.
        public let relativeTimeRange: RelativeTimeRange?
        /// The duration of the period when neither the customer nor agent was talking.
        public let threshold: Int64?

        public init(absoluteTimeRange: AbsoluteTimeRange? = nil, negate: Bool? = nil, relativeTimeRange: RelativeTimeRange? = nil, threshold: Int64? = nil) {
            self.absoluteTimeRange = absoluteTimeRange
            self.negate = negate
            self.relativeTimeRange = relativeTimeRange
            self.threshold = threshold
        }

        public func validate(name: String) throws {
            try self.absoluteTimeRange?.validate(name: "\(name).absoluteTimeRange")
            try self.relativeTimeRange?.validate(name: "\(name).relativeTimeRange")
            try self.validate(self.threshold, name: "threshold", parent: name, max: 14_400_000)
            try self.validate(self.threshold, name: "threshold", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case absoluteTimeRange = "AbsoluteTimeRange"
            case negate = "Negate"
            case relativeTimeRange = "RelativeTimeRange"
            case threshold = "Threshold"
        }
    }

    public struct RelativeTimeRange: AWSEncodableShape & AWSDecodableShape {
        /// A value that indicates the percentage of the end of the time range. To set a relative time range, you must specify a start percentage and an end percentage. For example, if you specify the following values:   StartPercentage - 10   EndPercentage - 50   This looks at the time range starting from 10% of the way into the call to 50% of the way through the call. For a  call that lasts 100,000 milliseconds, this example range would apply from the 10,000 millisecond mark to the 50,000  millisecond mark.
        public let endPercentage: Int?
        /// A range that takes the portion of the call up to the time in milliseconds set by the value that you've specified. For  example, if you specify 120000, the time range is set for the first 120,000 milliseconds of the call.
        public let first: Int?
        /// A range that takes the portion of the call from the time in milliseconds set by the value that you've specified to the end of the call. For example, if you specify 120000, the time range is set for the last 120,000  milliseconds of the call.
        public let last: Int?
        /// A value that indicates the percentage of the beginning of the time range. To set a relative time range, you must  specify a start percentage and an end percentage. For example, if you specify the following values:          StartPercentage - 10   EndPercentage - 50   This looks at the time range starting from 10% of the way into the call to 50% of the way through the call. For  a call that lasts 100,000 milliseconds, this example range would apply from the 10,000 millisecond mark to the 50,000 millisecond mark.
        public let startPercentage: Int?

        public init(endPercentage: Int? = nil, first: Int? = nil, last: Int? = nil, startPercentage: Int? = nil) {
            self.endPercentage = endPercentage
            self.first = first
            self.last = last
            self.startPercentage = startPercentage
        }

        public func validate(name: String) throws {
            try self.validate(self.endPercentage, name: "endPercentage", parent: name, max: 100)
            try self.validate(self.endPercentage, name: "endPercentage", parent: name, min: 0)
            try self.validate(self.first, name: "first", parent: name, max: 100)
            try self.validate(self.first, name: "first", parent: name, min: 0)
            try self.validate(self.last, name: "last", parent: name, max: 100)
            try self.validate(self.last, name: "last", parent: name, min: 0)
            try self.validate(self.startPercentage, name: "startPercentage", parent: name, max: 100)
            try self.validate(self.startPercentage, name: "startPercentage", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case endPercentage = "EndPercentage"
            case first = "First"
            case last = "Last"
            case startPercentage = "StartPercentage"
        }
    }

    public struct SentimentFilter: AWSEncodableShape & AWSDecodableShape {
        /// The time range, measured in seconds, of the sentiment.
        public let absoluteTimeRange: AbsoluteTimeRange?
        /// Set to TRUE to look for sentiments that weren't specified in the request.
        public let negate: Bool?
        /// A value that determines whether the sentiment belongs to the customer or the agent.
        public let participantRole: ParticipantRole?
        /// The time range, set in percentages, that correspond to proportion of the call.
        public let relativeTimeRange: RelativeTimeRange?
        /// An array that enables you to specify sentiments for the customer or agent. You can specify one or more values.
        public let sentiments: [SentimentValue]

        public init(absoluteTimeRange: AbsoluteTimeRange? = nil, negate: Bool? = nil, participantRole: ParticipantRole? = nil, relativeTimeRange: RelativeTimeRange? = nil, sentiments: [SentimentValue]) {
            self.absoluteTimeRange = absoluteTimeRange
            self.negate = negate
            self.participantRole = participantRole
            self.relativeTimeRange = relativeTimeRange
            self.sentiments = sentiments
        }

        public func validate(name: String) throws {
            try self.absoluteTimeRange?.validate(name: "\(name).absoluteTimeRange")
            try self.relativeTimeRange?.validate(name: "\(name).relativeTimeRange")
            try self.validate(self.sentiments, name: "sentiments", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case absoluteTimeRange = "AbsoluteTimeRange"
            case negate = "Negate"
            case participantRole = "ParticipantRole"
            case relativeTimeRange = "RelativeTimeRange"
            case sentiments = "Sentiments"
        }
    }

    public struct Settings: AWSEncodableShape & AWSDecodableShape {
        /// Instructs Amazon Transcribe to process each audio channel separately and then merge the transcription output of each  channel into a single transcription.  Amazon Transcribe also produces a transcription of each item detected on an audio channel, including the start time and  end time of the item and alternative transcriptions of the item including the confidence that Amazon Transcribe has in the transcription. You can't set both ShowSpeakerLabels and ChannelIdentification in the same  request. If you set both, your request returns a BadRequestException.
        public let channelIdentification: Bool?
        /// The number of alternative transcriptions that the service should return. If you specify the MaxAlternatives field, you must set the ShowAlternatives field to true.
        public let maxAlternatives: Int?
        /// The maximum number of speakers to identify in the input audio. If there are more speakers in the audio than this number, multiple speakers are identified as a single speaker. If you specify the MaxSpeakerLabels field, you must set the ShowSpeakerLabels field to true.
        public let maxSpeakerLabels: Int?
        /// Determines whether the transcription contains alternative transcriptions. If you set the  ShowAlternatives field to true, you must also set the maximum number of alternatives to return in the MaxAlternatives field.
        public let showAlternatives: Bool?
        /// Determines whether the transcription job uses speaker recognition to identify different speakers in the input  audio. Speaker recognition labels individual speakers in the audio file. If you set the ShowSpeakerLabels field to true, you must also set the maximum number of speaker labels MaxSpeakerLabels field. You can't set both ShowSpeakerLabels and ChannelIdentification in the same  request. If you set both, your request returns a BadRequestException.
        public let showSpeakerLabels: Bool?
        /// Set to mask to remove filtered text from the transcript and replace it with three asterisks ("***")  as placeholder text. Set to remove to remove filtered text from the transcript without using  placeholder text. Set to tag to mark the word in the transcription output that matches the vocabulary filter. When you set the filter method to tag, the words matching your vocabulary filter  are not masked or removed.
        public let vocabularyFilterMethod: VocabularyFilterMethod?
        /// The name of the vocabulary filter to use when transcribing the audio. The filter that you specify must have the same language code as the transcription job.
        public let vocabularyFilterName: String?
        /// The name of a vocabulary to use when processing the transcription job.
        public let vocabularyName: String?

        public init(channelIdentification: Bool? = nil, maxAlternatives: Int? = nil, maxSpeakerLabels: Int? = nil, showAlternatives: Bool? = nil, showSpeakerLabels: Bool? = nil, vocabularyFilterMethod: VocabularyFilterMethod? = nil, vocabularyFilterName: String? = nil, vocabularyName: String? = nil) {
            self.channelIdentification = channelIdentification
            self.maxAlternatives = maxAlternatives
            self.maxSpeakerLabels = maxSpeakerLabels
            self.showAlternatives = showAlternatives
            self.showSpeakerLabels = showSpeakerLabels
            self.vocabularyFilterMethod = vocabularyFilterMethod
            self.vocabularyFilterName = vocabularyFilterName
            self.vocabularyName = vocabularyName
        }

        public func validate(name: String) throws {
            try self.validate(self.maxAlternatives, name: "maxAlternatives", parent: name, max: 10)
            try self.validate(self.maxAlternatives, name: "maxAlternatives", parent: name, min: 2)
            try self.validate(self.maxSpeakerLabels, name: "maxSpeakerLabels", parent: name, max: 10)
            try self.validate(self.maxSpeakerLabels, name: "maxSpeakerLabels", parent: name, min: 2)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, max: 200)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, min: 1)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, max: 200)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, min: 1)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case channelIdentification = "ChannelIdentification"
            case maxAlternatives = "MaxAlternatives"
            case maxSpeakerLabels = "MaxSpeakerLabels"
            case showAlternatives = "ShowAlternatives"
            case showSpeakerLabels = "ShowSpeakerLabels"
            case vocabularyFilterMethod = "VocabularyFilterMethod"
            case vocabularyFilterName = "VocabularyFilterName"
            case vocabularyName = "VocabularyName"
        }
    }

    public struct StartCallAnalyticsJobRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "callAnalyticsJobName", location: .uri(locationName: "CallAnalyticsJobName"))
        ]

        /// The name of the call analytics job. You can't use the string "." or ".." by themselves as the job name. The name must also be unique within an Amazon Web Services account. If you try to create a call analytics job with the same  name as a previous call analytics job, you get a ConflictException error.
        public let callAnalyticsJobName: String
        /// When you start a call analytics job, you must pass an array that maps the agent and the customer to specific  audio channels. The values you can assign to a channel are 0 and 1. The agent and the customer must each have their own channel. You can't assign more than one channel to an agent or customer.
        public let channelDefinitions: [ChannelDefinition]?
        /// The Amazon Resource Name (ARN) of a role that has access to the S3 bucket that contains your input files.  Amazon Transcribe assumes this role to read queued audio files. If you have specified an output S3 bucket for your transcription  results, this role should have access to the output bucket as well.
        public let dataAccessRoleArn: String
        public let media: Media
        /// The Amazon Resource Name (ARN) of the Amazon Web Services Key Management Service key used to encrypt  the output of the call analytics job. The user calling the  operation must have permission to use the specified KMS key. You use either of the following to identify an Amazon Web Services KMS key in the current account:   KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"   KMS Key Alias: "alias/ExampleAlias"   You can use either of the following to identify a KMS key in the current account or another account:   Amazon Resource Name (ARN) of a KMS key in the current account or another account:  "arn:aws:kms:region:account ID:key/1234abcd-12ab-34cd-56ef1234567890ab"   ARN of a KMS Key Alias: "arn:aws:kms:region:account ID:alias/ExampleAlias"   If you don't specify an encryption key, the output of the call analytics job is encrypted with the default Amazon  S3 key (SSE-S3).  If you specify a KMS key to encrypt your output, you must also specify an output location in the  OutputLocation parameter.
        public let outputEncryptionKMSKeyId: String?
        /// The Amazon S3 location where the output of the call analytics job is stored. You can provide the following  location types to store the output of call analytics job:   s3://DOC-EXAMPLE-BUCKET1 If you specify a bucket, Amazon Transcribe saves the output of the analytics job as a JSON file at the root level of the bucket.   s3://DOC-EXAMPLE-BUCKET1/folder/ f you specify a path, Amazon Transcribe saves the output of the analytics job as s3://DOC-EXAMPLE-BUCKET1/folder/your-transcription-job-name.json If you specify a folder, you must provide a trailing slash.   s3://DOC-EXAMPLE-BUCKET1/folder/filename.json If you provide a path that has the filename specified, Amazon Transcribe saves the output of the analytics job as s3://DOC-EXAMPLEBUCKET1/folder/filename.json   You can specify an Amazon Web Services Key Management Service (KMS) key to encrypt the output of our  analytics job using the OutputEncryptionKMSKeyId parameter. If you don't specify a KMS key,  Amazon Transcribe uses the default Amazon S3 key for server-side encryption of the analytics job output that is placed in your S3 bucket.
        public let outputLocation: String?
        /// A Settings object that provides optional settings for a call analytics job.
        public let settings: CallAnalyticsJobSettings?

        public init(callAnalyticsJobName: String, channelDefinitions: [ChannelDefinition]? = nil, dataAccessRoleArn: String, media: Media, outputEncryptionKMSKeyId: String? = nil, outputLocation: String? = nil, settings: CallAnalyticsJobSettings? = nil) {
            self.callAnalyticsJobName = callAnalyticsJobName
            self.channelDefinitions = channelDefinitions
            self.dataAccessRoleArn = dataAccessRoleArn
            self.media = media
            self.outputEncryptionKMSKeyId = outputEncryptionKMSKeyId
            self.outputLocation = outputLocation
            self.settings = settings
        }

        public func validate(name: String) throws {
            try self.validate(self.callAnalyticsJobName, name: "callAnalyticsJobName", parent: name, max: 200)
            try self.validate(self.callAnalyticsJobName, name: "callAnalyticsJobName", parent: name, min: 1)
            try self.validate(self.callAnalyticsJobName, name: "callAnalyticsJobName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.channelDefinitions?.forEach {
                try $0.validate(name: "\(name).channelDefinitions[]")
            }
            try self.validate(self.channelDefinitions, name: "channelDefinitions", parent: name, max: 2)
            try self.validate(self.channelDefinitions, name: "channelDefinitions", parent: name, min: 2)
            try self.validate(self.dataAccessRoleArn, name: "dataAccessRoleArn", parent: name, max: 2048)
            try self.validate(self.dataAccessRoleArn, name: "dataAccessRoleArn", parent: name, min: 20)
            try self.validate(self.dataAccessRoleArn, name: "dataAccessRoleArn", parent: name, pattern: "^arn:(aws|aws-cn|aws-us-gov|aws-iso-{0,1}[a-z]{0,1}):iam::[0-9]{0,63}:role/[A-Za-z0-9:_/+=,@.-]{0,1024}$")
            try self.media.validate(name: "\(name).media")
            try self.validate(self.outputEncryptionKMSKeyId, name: "outputEncryptionKMSKeyId", parent: name, max: 2048)
            try self.validate(self.outputEncryptionKMSKeyId, name: "outputEncryptionKMSKeyId", parent: name, min: 1)
            try self.validate(self.outputEncryptionKMSKeyId, name: "outputEncryptionKMSKeyId", parent: name, pattern: "^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$")
            try self.validate(self.outputLocation, name: "outputLocation", parent: name, max: 2000)
            try self.validate(self.outputLocation, name: "outputLocation", parent: name, min: 1)
            try self.validate(self.outputLocation, name: "outputLocation", parent: name, pattern: "^(s3://|http(s*)://).+$")
            try self.settings?.validate(name: "\(name).settings")
        }

        private enum CodingKeys: String, CodingKey {
            case channelDefinitions = "ChannelDefinitions"
            case dataAccessRoleArn = "DataAccessRoleArn"
            case media = "Media"
            case outputEncryptionKMSKeyId = "OutputEncryptionKMSKeyId"
            case outputLocation = "OutputLocation"
            case settings = "Settings"
        }
    }

    public struct StartCallAnalyticsJobResponse: AWSDecodableShape {
        /// An object containing the details of the asynchronous call analytics job.
        public let callAnalyticsJob: CallAnalyticsJob?

        public init(callAnalyticsJob: CallAnalyticsJob? = nil) {
            self.callAnalyticsJob = callAnalyticsJob
        }

        private enum CodingKeys: String, CodingKey {
            case callAnalyticsJob = "CallAnalyticsJob"
        }
    }

    public struct StartMedicalTranscriptionJobRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "medicalTranscriptionJobName", location: .uri(locationName: "MedicalTranscriptionJobName"))
        ]

        /// You can configure Amazon Transcribe Medical to label content in the transcription output. If you specify PHI,  Amazon Transcribe Medical labels the personal health information (PHI) that it identifies in the transcription output.
        public let contentIdentificationType: MedicalContentIdentificationType?
        /// A map of plain text, non-secret key:value pairs, known as encryption context pairs, that provide an added layer of security for your data.
        public let kMSEncryptionContext: [String: String]?
        /// The language code for the language spoken in the input media file. US English (en-US) is the valid value for  medical transcription jobs. Any other value you enter for language code results in a  BadRequestException error.
        public let languageCode: LanguageCode
        public let media: Media
        /// The audio format of the input media file.
        public let mediaFormat: MediaFormat?
        /// The sample rate, in Hertz, of the audio track in the input media file. If you do not specify the media sample rate, Amazon Transcribe Medical determines the sample rate. If you specify the sample rate,  it must match the rate detected by Amazon Transcribe Medical. In most cases, you should leave the  MediaSampleRateHertz field blank and let Amazon Transcribe Medical determine the sample rate.
        public let mediaSampleRateHertz: Int?
        /// The name of the medical transcription job. You can't use the strings "." or ".."  by themselves as the job name. The name must also be unique within an Amazon Web Services account. If you try to  create a medical transcription job with the same name as a previous medical transcription job, you get a ConflictException error.
        public let medicalTranscriptionJobName: String
        /// The Amazon S3 location where the transcription is stored. You must set OutputBucketName for Amazon Transcribe Medical to store the transcription results. Your transcript  appears in the S3 location you specify. When you call the GetMedicalTranscriptionJob, the operation  returns this location in the TranscriptFileUri field. The S3 bucket must have permissions that allow Amazon Transcribe Medical to put files in the bucket. For more information, see Permissions Required for IAM User Roles. You can specify an Amazon Web Services Key Management Service (KMS) key to encrypt the output of your  transcription using the OutputEncryptionKMSKeyId parameter. If you don't specify a KMS key, Amazon Transcribe Medical  uses the default Amazon S3 key for server-side encryption of transcripts that are placed in your S3 bucket.
        public let outputBucketName: String
        /// The Amazon Resource Name (ARN) of the Amazon Web Services Key Management Service (KMS) key used to  encrypt the output of the transcription job. The user calling the StartMedicalTranscriptionJob  operation must have permission to use the specified KMS key. You use either of the following to identify a KMS key in the current account:   KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"   KMS Key Alias: "alias/ExampleAlias"   You can use either of the following to identify a KMS key in the current account or another account:   Amazon Resource Name (ARN) of a KMS key in the current account or another account: "arn:aws:kms:region:account ID:key/1234abcd-12ab-34cd-56ef-1234567890ab"   ARN of a KMS Key Alias: "arn:aws:kms:region:account ID:alias/ExampleAlias"   If you don't specify an encryption key, the output of the medical transcription job is encrypted with the default Amazon S3  key (SSE-S3). If you specify a KMS key to encrypt your output, you must also specify an output location in the  OutputBucketName parameter.
        public let outputEncryptionKMSKeyId: String?
        /// You can specify a location in an Amazon S3 bucket to store the output of your medical transcription job. If you don't specify an output key, Amazon Transcribe Medical stores the output of your transcription job in the Amazon S3 bucket you  specified. By default, the object key is "your-transcription-job-name.json". You can use output keys to specify the Amazon S3 prefix and file name of the transcription output. For example,  specifying the Amazon S3 prefix, "folder1/folder2/", as an output key would lead to the output being stored as "folder1/folder2/your-transcription-job-name.json". If you specify "my-other-job-name.json" as the output key, the object key is changed to "my-other-job-name.json". You can use an output key to change both the prefix and the file name, for example "folder/my-other-job-name.json". If you specify an output key, you must also specify an S3 bucket in the OutputBucketName  parameter.
        public let outputKey: String?
        /// Optional settings for the medical transcription job.
        public let settings: MedicalTranscriptionSetting?
        /// The medical specialty of any clinician speaking in the input media.
        public let specialty: Specialty
        /// Add tags to an Amazon Transcribe medical transcription job.
        public let tags: [Tag]?
        /// The type of speech in the input audio. CONVERSATION refers to conversations between two or more speakers, e.g., a conversations between doctors and patients. DICTATION refers to  single-speaker dictated speech, such as clinical notes.
        public let type: `Type`

        public init(contentIdentificationType: MedicalContentIdentificationType? = nil, kMSEncryptionContext: [String: String]? = nil, languageCode: LanguageCode, media: Media, mediaFormat: MediaFormat? = nil, mediaSampleRateHertz: Int? = nil, medicalTranscriptionJobName: String, outputBucketName: String, outputEncryptionKMSKeyId: String? = nil, outputKey: String? = nil, settings: MedicalTranscriptionSetting? = nil, specialty: Specialty, tags: [Tag]? = nil, type: `Type`) {
            self.contentIdentificationType = contentIdentificationType
            self.kMSEncryptionContext = kMSEncryptionContext
            self.languageCode = languageCode
            self.media = media
            self.mediaFormat = mediaFormat
            self.mediaSampleRateHertz = mediaSampleRateHertz
            self.medicalTranscriptionJobName = medicalTranscriptionJobName
            self.outputBucketName = outputBucketName
            self.outputEncryptionKMSKeyId = outputEncryptionKMSKeyId
            self.outputKey = outputKey
            self.settings = settings
            self.specialty = specialty
            self.tags = tags
            self.type = type
        }

        public func validate(name: String) throws {
            try self.kMSEncryptionContext?.forEach {
                try validate($0.key, name: "kMSEncryptionContext.key", parent: name, max: 2000)
                try validate($0.key, name: "kMSEncryptionContext.key", parent: name, min: 1)
                try validate($0.key, name: "kMSEncryptionContext.key", parent: name, pattern: "\\S")
                try validate($0.value, name: "kMSEncryptionContext[\"\($0.key)\"]", parent: name, max: 2000)
                try validate($0.value, name: "kMSEncryptionContext[\"\($0.key)\"]", parent: name, min: 1)
                try validate($0.value, name: "kMSEncryptionContext[\"\($0.key)\"]", parent: name, pattern: "\\S")
            }
            try self.validate(self.kMSEncryptionContext, name: "kMSEncryptionContext", parent: name, max: 10)
            try self.validate(self.kMSEncryptionContext, name: "kMSEncryptionContext", parent: name, min: 1)
            try self.media.validate(name: "\(name).media")
            try self.validate(self.mediaSampleRateHertz, name: "mediaSampleRateHertz", parent: name, max: 48000)
            try self.validate(self.mediaSampleRateHertz, name: "mediaSampleRateHertz", parent: name, min: 8000)
            try self.validate(self.medicalTranscriptionJobName, name: "medicalTranscriptionJobName", parent: name, max: 200)
            try self.validate(self.medicalTranscriptionJobName, name: "medicalTranscriptionJobName", parent: name, min: 1)
            try self.validate(self.medicalTranscriptionJobName, name: "medicalTranscriptionJobName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.validate(self.outputBucketName, name: "outputBucketName", parent: name, max: 64)
            try self.validate(self.outputBucketName, name: "outputBucketName", parent: name, pattern: "^[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]$")
            try self.validate(self.outputEncryptionKMSKeyId, name: "outputEncryptionKMSKeyId", parent: name, max: 2048)
            try self.validate(self.outputEncryptionKMSKeyId, name: "outputEncryptionKMSKeyId", parent: name, min: 1)
            try self.validate(self.outputEncryptionKMSKeyId, name: "outputEncryptionKMSKeyId", parent: name, pattern: "^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$")
            try self.validate(self.outputKey, name: "outputKey", parent: name, max: 1024)
            try self.validate(self.outputKey, name: "outputKey", parent: name, min: 1)
            try self.validate(self.outputKey, name: "outputKey", parent: name, pattern: "^[a-zA-Z0-9-_.!*'()/]{1,1024}$")
            try self.settings?.validate(name: "\(name).settings")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case contentIdentificationType = "ContentIdentificationType"
            case kMSEncryptionContext = "KMSEncryptionContext"
            case languageCode = "LanguageCode"
            case media = "Media"
            case mediaFormat = "MediaFormat"
            case mediaSampleRateHertz = "MediaSampleRateHertz"
            case outputBucketName = "OutputBucketName"
            case outputEncryptionKMSKeyId = "OutputEncryptionKMSKeyId"
            case outputKey = "OutputKey"
            case settings = "Settings"
            case specialty = "Specialty"
            case tags = "Tags"
            case type = "Type"
        }
    }

    public struct StartMedicalTranscriptionJobResponse: AWSDecodableShape {
        /// A batch job submitted to transcribe medical speech to text.
        public let medicalTranscriptionJob: MedicalTranscriptionJob?

        public init(medicalTranscriptionJob: MedicalTranscriptionJob? = nil) {
            self.medicalTranscriptionJob = medicalTranscriptionJob
        }

        private enum CodingKeys: String, CodingKey {
            case medicalTranscriptionJob = "MedicalTranscriptionJob"
        }
    }

    public struct StartTranscriptionJobRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "transcriptionJobName", location: .uri(locationName: "TranscriptionJobName"))
        ]

        /// An object that contains the request parameters for content redaction.
        public let contentRedaction: ContentRedaction?
        /// Set this field to true to enable automatic language identification. Automatic language identification  is disabled by default. You receive a BadRequestException error if you enter a value for a LanguageCode.
        public let identifyLanguage: Bool?
        /// Provides information about how a transcription job is executed. Use this field to indicate that the job can be  queued for deferred execution if the concurrency limit is reached and there are no slots available to immediately run  the job.
        public let jobExecutionSettings: JobExecutionSettings?
        /// A map of plain text, non-secret key:value pairs, known as encryption context pairs, that provide an added layer of security for your data.
        public let kMSEncryptionContext: [String: String]?
        /// The language code for the language used in the input media file. To transcribe speech in Modern Standard Arabic (ar-SA), your audio or video file must be encoded at a sample  rate of 16,000 Hz or higher.
        public let languageCode: LanguageCode?
        /// An object containing a list of languages that might be present in your collection of audio files. Automatic language identification chooses a language that best matches the source audio from that list. To transcribe speech in Modern Standard Arabic (ar-SA), your audio or video file must be encoded at a sample  rate of 16,000 Hz or higher.
        public let languageOptions: [LanguageCode]?
        /// An object that describes the input media for a transcription job.
        public let media: Media
        /// The format of the input media file.
        public let mediaFormat: MediaFormat?
        /// The sample rate, in Hertz, of the audio track in the input media file.  If you do not specify the media sample rate, Amazon Transcribe determines the sample rate. If you specify the sample rate, it  must match the sample rate detected by Amazon Transcribe. In most cases, you should leave the  MediaSampleRateHertz field blank and let Amazon Transcribe determine the sample rate.
        public let mediaSampleRateHertz: Int?
        /// Choose the custom language model you use for your transcription job in this parameter.
        public let modelSettings: ModelSettings?
        /// The location where the transcription is stored. If you set the OutputBucketName, Amazon Transcribe puts the transcript in the specified S3 bucket. When  you call the GetTranscriptionJob operation, the operation returns this location in the  TranscriptFileUri field. If you enable content redaction, the redacted transcript appears in RedactedTranscriptFileUri. If you enable content redaction and choose to output an unredacted transcript, that transcript's location still appears in the TranscriptFileUri. The S3 bucket must have  permissions that allow Amazon Transcribe to put files in the bucket. For more information, see Permissions Required for  IAM User Roles. You can specify an Amazon Web Services Key Management Service (KMS) key to encrypt the output of your  transcription using the OutputEncryptionKMSKeyId parameter. If you don't specify a KMS key, Amazon Transcribe  uses the default Amazon S3 key for server-side encryption of transcripts that are placed in your S3 bucket. If you don't set the OutputBucketName, Amazon Transcribe generates a pre-signed URL, a shareable URL that  provides secure access to your transcription, and returns it in the TranscriptFileUri field. Use this URL  to download the transcription.
        public let outputBucketName: String?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services Key Management Service (KMS) key used to  encrypt the output of the transcription job. The user calling the StartTranscriptionJob  operation must have permission to use the specified KMS key. You can use either of the following to identify a KMS key in the current account:   KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"   KMS Key Alias: "alias/ExampleAlias"   You can use either of the following to identify a KMS key in the current account or another account:   Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:region:account ID:key/1234abcd-12ab-34cd-56ef-1234567890ab"   ARN of a KMS Key Alias: "arn:aws:kms:region:account ID:alias/ExampleAlias"   If you don't specify an encryption key, the output of the transcription job is encrypted with the default  Amazon S3 key (SSE-S3). If you specify a KMS key to encrypt your output, you must also specify an output location in the  OutputBucketName parameter.
        public let outputEncryptionKMSKeyId: String?
        /// You can specify a location in an Amazon S3 bucket to store the output of your transcription job. If you don't specify an output key, Amazon Transcribe stores the output of your transcription job in the Amazon S3 bucket you specified. By default, the object key is "your-transcription-job-name.json". You can use output keys to specify the Amazon S3 prefix and file name of the transcription output. For example,  specifying the Amazon S3 prefix, "folder1/folder2/", as an output key would lead to the output being stored as "folder1/folder2/your-transcription-job-name.json". If you specify "my-other-job-name.json" as the output key, the  object key is changed to "my-other-job-name.json". You can use an output key to change both the prefix and the file  name, for example "folder/my-other-job-name.json". If you specify an output key, you must also specify an S3 bucket in the OutputBucketName  parameter.
        public let outputKey: String?
        /// A Settings object that provides optional settings for a transcription job.
        public let settings: Settings?
        /// Add subtitles to your batch transcription job.
        public let subtitles: Subtitles?
        /// Add tags to an Amazon Transcribe transcription job.
        public let tags: [Tag]?
        /// The name of the job. You can't use the strings "." or ".." by themselves as the job name. The name must also be unique within an Amazon Web Services account. If you try to create a transcription job with the same name as a previous transcription job, you get a ConflictException error.
        public let transcriptionJobName: String

        public init(contentRedaction: ContentRedaction? = nil, identifyLanguage: Bool? = nil, jobExecutionSettings: JobExecutionSettings? = nil, kMSEncryptionContext: [String: String]? = nil, languageCode: LanguageCode? = nil, languageOptions: [LanguageCode]? = nil, media: Media, mediaFormat: MediaFormat? = nil, mediaSampleRateHertz: Int? = nil, modelSettings: ModelSettings? = nil, outputBucketName: String? = nil, outputEncryptionKMSKeyId: String? = nil, outputKey: String? = nil, settings: Settings? = nil, subtitles: Subtitles? = nil, tags: [Tag]? = nil, transcriptionJobName: String) {
            self.contentRedaction = contentRedaction
            self.identifyLanguage = identifyLanguage
            self.jobExecutionSettings = jobExecutionSettings
            self.kMSEncryptionContext = kMSEncryptionContext
            self.languageCode = languageCode
            self.languageOptions = languageOptions
            self.media = media
            self.mediaFormat = mediaFormat
            self.mediaSampleRateHertz = mediaSampleRateHertz
            self.modelSettings = modelSettings
            self.outputBucketName = outputBucketName
            self.outputEncryptionKMSKeyId = outputEncryptionKMSKeyId
            self.outputKey = outputKey
            self.settings = settings
            self.subtitles = subtitles
            self.tags = tags
            self.transcriptionJobName = transcriptionJobName
        }

        public func validate(name: String) throws {
            try self.jobExecutionSettings?.validate(name: "\(name).jobExecutionSettings")
            try self.kMSEncryptionContext?.forEach {
                try validate($0.key, name: "kMSEncryptionContext.key", parent: name, max: 2000)
                try validate($0.key, name: "kMSEncryptionContext.key", parent: name, min: 1)
                try validate($0.key, name: "kMSEncryptionContext.key", parent: name, pattern: "\\S")
                try validate($0.value, name: "kMSEncryptionContext[\"\($0.key)\"]", parent: name, max: 2000)
                try validate($0.value, name: "kMSEncryptionContext[\"\($0.key)\"]", parent: name, min: 1)
                try validate($0.value, name: "kMSEncryptionContext[\"\($0.key)\"]", parent: name, pattern: "\\S")
            }
            try self.validate(self.kMSEncryptionContext, name: "kMSEncryptionContext", parent: name, max: 10)
            try self.validate(self.kMSEncryptionContext, name: "kMSEncryptionContext", parent: name, min: 1)
            try self.validate(self.languageOptions, name: "languageOptions", parent: name, min: 1)
            try self.media.validate(name: "\(name).media")
            try self.validate(self.mediaSampleRateHertz, name: "mediaSampleRateHertz", parent: name, max: 48000)
            try self.validate(self.mediaSampleRateHertz, name: "mediaSampleRateHertz", parent: name, min: 8000)
            try self.modelSettings?.validate(name: "\(name).modelSettings")
            try self.validate(self.outputBucketName, name: "outputBucketName", parent: name, max: 64)
            try self.validate(self.outputBucketName, name: "outputBucketName", parent: name, pattern: "^[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]$")
            try self.validate(self.outputEncryptionKMSKeyId, name: "outputEncryptionKMSKeyId", parent: name, max: 2048)
            try self.validate(self.outputEncryptionKMSKeyId, name: "outputEncryptionKMSKeyId", parent: name, min: 1)
            try self.validate(self.outputEncryptionKMSKeyId, name: "outputEncryptionKMSKeyId", parent: name, pattern: "^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$")
            try self.validate(self.outputKey, name: "outputKey", parent: name, max: 1024)
            try self.validate(self.outputKey, name: "outputKey", parent: name, min: 1)
            try self.validate(self.outputKey, name: "outputKey", parent: name, pattern: "^[a-zA-Z0-9-_.!*'()/]{1,1024}$")
            try self.settings?.validate(name: "\(name).settings")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
            try self.validate(self.transcriptionJobName, name: "transcriptionJobName", parent: name, max: 200)
            try self.validate(self.transcriptionJobName, name: "transcriptionJobName", parent: name, min: 1)
            try self.validate(self.transcriptionJobName, name: "transcriptionJobName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case contentRedaction = "ContentRedaction"
            case identifyLanguage = "IdentifyLanguage"
            case jobExecutionSettings = "JobExecutionSettings"
            case kMSEncryptionContext = "KMSEncryptionContext"
            case languageCode = "LanguageCode"
            case languageOptions = "LanguageOptions"
            case media = "Media"
            case mediaFormat = "MediaFormat"
            case mediaSampleRateHertz = "MediaSampleRateHertz"
            case modelSettings = "ModelSettings"
            case outputBucketName = "OutputBucketName"
            case outputEncryptionKMSKeyId = "OutputEncryptionKMSKeyId"
            case outputKey = "OutputKey"
            case settings = "Settings"
            case subtitles = "Subtitles"
            case tags = "Tags"
        }
    }

    public struct StartTranscriptionJobResponse: AWSDecodableShape {
        /// An object containing details of the asynchronous transcription job.
        public let transcriptionJob: TranscriptionJob?

        public init(transcriptionJob: TranscriptionJob? = nil) {
            self.transcriptionJob = transcriptionJob
        }

        private enum CodingKeys: String, CodingKey {
            case transcriptionJob = "TranscriptionJob"
        }
    }

    public struct Subtitles: AWSEncodableShape {
        /// Specify the output format for your subtitle file.
        public let formats: [SubtitleFormat]?

        public init(formats: [SubtitleFormat]? = nil) {
            self.formats = formats
        }

        private enum CodingKeys: String, CodingKey {
            case formats = "Formats"
        }
    }

    public struct SubtitlesOutput: AWSDecodableShape {
        /// Specify the output format for your subtitle file; if you select both SRT and VTT formats, two output files are genereated.
        public let formats: [SubtitleFormat]?
        /// Choose the output location for your subtitle file. This location must be an S3 bucket.
        public let subtitleFileUris: [String]?

        public init(formats: [SubtitleFormat]? = nil, subtitleFileUris: [String]? = nil) {
            self.formats = formats
            self.subtitleFileUris = subtitleFileUris
        }

        private enum CodingKeys: String, CodingKey {
            case formats = "Formats"
            case subtitleFileUris = "SubtitleFileUris"
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        /// The first part of a key:value pair that forms a tag associated with a given resource. For example, in the tag ‘Department’:’Sales’, the key is 'Department'.
        public let key: String
        /// The second part of a key:value pair that forms a tag associated with a given resource. For example, in the tag ‘Department’:’Sales’, the value is 'Sales'.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.key, name: "key", parent: name, max: 128)
            try self.validate(self.key, name: "key", parent: name, min: 1)
            try self.validate(self.value, name: "value", parent: name, max: 256)
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct TagResourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .uri(locationName: "ResourceArn"))
        ]

        /// The Amazon Resource Name (ARN) of the Amazon Transcribe resource you want to tag.
        public let resourceArn: String
        /// The tags you are assigning to a given Amazon Transcribe resource.
        public let tags: [Tag]

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1011)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "^arn:aws(-[^:]+)?:transcribe:[a-zA-Z0-9-]*:[0-9]{12}:[a-zA-Z-]*/[0-9a-zA-Z._-]+$")
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
            try self.validate(self.tags, name: "tags", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct TagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct Transcript: AWSDecodableShape {
        /// The S3 object location of the redacted transcript. Use this URI to access the redacted transcript. If you specified an S3 bucket in the  OutputBucketName field when you created the job, this is the URI of that bucket. If you chose to store  the transcript in Amazon Transcribe, this is a shareable URL that provides secure access to that location.
        public let redactedTranscriptFileUri: String?
        /// The S3 object location of the transcript. Use this URI to access the transcript. If you specified an S3 bucket in the OutputBucketName field when you created the job, this is the URI of that bucket. If you chose to store the transcript in Amazon Transcribe, this is a  shareable URL that provides secure access to that location.
        public let transcriptFileUri: String?

        public init(redactedTranscriptFileUri: String? = nil, transcriptFileUri: String? = nil) {
            self.redactedTranscriptFileUri = redactedTranscriptFileUri
            self.transcriptFileUri = transcriptFileUri
        }

        private enum CodingKeys: String, CodingKey {
            case redactedTranscriptFileUri = "RedactedTranscriptFileUri"
            case transcriptFileUri = "TranscriptFileUri"
        }
    }

    public struct TranscriptFilter: AWSEncodableShape & AWSDecodableShape {
        /// A time range, set in seconds, between two points in the call.
        public let absoluteTimeRange: AbsoluteTimeRange?
        /// If TRUE, the rule that you specify is applied to everything except for the phrases that you specify.
        public let negate: Bool?
        /// Determines whether the customer or the agent is speaking the phrases that you've specified.
        public let participantRole: ParticipantRole?
        /// An object that allows percentages to specify the proportion of the call where you would like to apply a filter. For example, you can specify the first half of the call. You can also specify the period of time between halfway through to three-quarters of the way through the call. Because the length of conversation can vary between calls, you can apply relative time ranges across all calls.
        public let relativeTimeRange: RelativeTimeRange?
        /// The phrases that you're specifying for the transcript filter to match.
        public let targets: [String]
        /// Matches the phrase to the transcription output in a word for word fashion. For example, if you specify the phrase "I want to speak to the manager." Amazon Transcribe attempts to match that specific  phrase to the transcription.
        public let transcriptFilterType: TranscriptFilterType

        public init(absoluteTimeRange: AbsoluteTimeRange? = nil, negate: Bool? = nil, participantRole: ParticipantRole? = nil, relativeTimeRange: RelativeTimeRange? = nil, targets: [String], transcriptFilterType: TranscriptFilterType) {
            self.absoluteTimeRange = absoluteTimeRange
            self.negate = negate
            self.participantRole = participantRole
            self.relativeTimeRange = relativeTimeRange
            self.targets = targets
            self.transcriptFilterType = transcriptFilterType
        }

        public func validate(name: String) throws {
            try self.absoluteTimeRange?.validate(name: "\(name).absoluteTimeRange")
            try self.relativeTimeRange?.validate(name: "\(name).relativeTimeRange")
            try self.targets.forEach {
                try validate($0, name: "targets[]", parent: name, max: 2000)
                try validate($0, name: "targets[]", parent: name, min: 1)
                try validate($0, name: "targets[]", parent: name, pattern: "\\S")
            }
            try self.validate(self.targets, name: "targets", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case absoluteTimeRange = "AbsoluteTimeRange"
            case negate = "Negate"
            case participantRole = "ParticipantRole"
            case relativeTimeRange = "RelativeTimeRange"
            case targets = "Targets"
            case transcriptFilterType = "TranscriptFilterType"
        }
    }

    public struct TranscriptionJob: AWSDecodableShape {
        /// A timestamp that shows when the job completed.
        public let completionTime: Date?
        /// An object that describes content redaction settings for the transcription job.
        public let contentRedaction: ContentRedaction?
        /// A timestamp that shows when the job was created.
        public let creationTime: Date?
        /// If the TranscriptionJobStatus field is FAILED, this field contains information about why the job failed. The FailureReason field can contain one of the following values:    Unsupported media format - The media format specified in the MediaFormat  field of the request isn't valid. See the description of the MediaFormat field for a list of valid values.    The media format provided does not match the detected media format - The media format  of the audio file doesn't match the format specified in the MediaFormat field in the request. Check  the media format of your media file and make sure that the two values match.    Invalid sample rate for audio file - The sample rate specified in the  MediaSampleRateHertz of the request isn't valid. The sample rate must be between 8,000 and  48,000 Hertz.    The sample rate provided does not match the detected sample rate - The sample rate in the audio file doesn't match the sample rate specified in the MediaSampleRateHertz field in the request. Check the sample rate of your media file and make sure that the two values match.    Invalid file size: file size too large - The size of your audio file is larger than Amazon Transcribe can process.  For more information, see Limits in the Amazon Transcribe Developer Guide.    Invalid number of channels: number of channels too large - Your audio contains more  channels than Amazon Transcribe is configured to process. To request additional channels, see Amazon Transcribe Limits in  the Amazon Web Services General Reference.
        public let failureReason: String?
        /// A value between zero and one that Amazon Transcribe assigned to the language that it identified in the source audio. Larger  values indicate that Amazon Transcribe has higher confidence in the language it identified.
        public let identifiedLanguageScore: Float?
        /// A value that shows if automatic language identification was enabled for a transcription job.
        public let identifyLanguage: Bool?
        /// Provides information about how a transcription job is executed.
        public let jobExecutionSettings: JobExecutionSettings?
        /// The language code for the input speech.
        public let languageCode: LanguageCode?
        /// An object that shows the optional array of languages inputted for transcription jobs  with automatic language identification enabled.
        public let languageOptions: [LanguageCode]?
        /// An object that describes the input media for the transcription job.
        public let media: Media?
        /// The format of the input media file.
        public let mediaFormat: MediaFormat?
        /// The sample rate, in Hertz, of the audio track in the input media file.
        public let mediaSampleRateHertz: Int?
        /// An object containing the details of your custom language model.
        public let modelSettings: ModelSettings?
        /// Optional settings for the transcription job. Use these settings to turn on speaker recognition, to set the  maximum number of speakers that should be identified and to specify a custom vocabulary to use when processing the transcription job.
        public let settings: Settings?
        /// A timestamp that shows when the job started processing.
        public let startTime: Date?
        /// Generate subtitles for your batch transcription job.
        public let subtitles: SubtitlesOutput?
        /// A key:value pair assigned to a given transcription job.
        public let tags: [Tag]?
        /// An object that describes the output of the transcription job.
        public let transcript: Transcript?
        /// The name of the transcription job.
        public let transcriptionJobName: String?
        /// The status of the transcription job.
        public let transcriptionJobStatus: TranscriptionJobStatus?

        public init(completionTime: Date? = nil, contentRedaction: ContentRedaction? = nil, creationTime: Date? = nil, failureReason: String? = nil, identifiedLanguageScore: Float? = nil, identifyLanguage: Bool? = nil, jobExecutionSettings: JobExecutionSettings? = nil, languageCode: LanguageCode? = nil, languageOptions: [LanguageCode]? = nil, media: Media? = nil, mediaFormat: MediaFormat? = nil, mediaSampleRateHertz: Int? = nil, modelSettings: ModelSettings? = nil, settings: Settings? = nil, startTime: Date? = nil, subtitles: SubtitlesOutput? = nil, tags: [Tag]? = nil, transcript: Transcript? = nil, transcriptionJobName: String? = nil, transcriptionJobStatus: TranscriptionJobStatus? = nil) {
            self.completionTime = completionTime
            self.contentRedaction = contentRedaction
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.identifiedLanguageScore = identifiedLanguageScore
            self.identifyLanguage = identifyLanguage
            self.jobExecutionSettings = jobExecutionSettings
            self.languageCode = languageCode
            self.languageOptions = languageOptions
            self.media = media
            self.mediaFormat = mediaFormat
            self.mediaSampleRateHertz = mediaSampleRateHertz
            self.modelSettings = modelSettings
            self.settings = settings
            self.startTime = startTime
            self.subtitles = subtitles
            self.tags = tags
            self.transcript = transcript
            self.transcriptionJobName = transcriptionJobName
            self.transcriptionJobStatus = transcriptionJobStatus
        }

        private enum CodingKeys: String, CodingKey {
            case completionTime = "CompletionTime"
            case contentRedaction = "ContentRedaction"
            case creationTime = "CreationTime"
            case failureReason = "FailureReason"
            case identifiedLanguageScore = "IdentifiedLanguageScore"
            case identifyLanguage = "IdentifyLanguage"
            case jobExecutionSettings = "JobExecutionSettings"
            case languageCode = "LanguageCode"
            case languageOptions = "LanguageOptions"
            case media = "Media"
            case mediaFormat = "MediaFormat"
            case mediaSampleRateHertz = "MediaSampleRateHertz"
            case modelSettings = "ModelSettings"
            case settings = "Settings"
            case startTime = "StartTime"
            case subtitles = "Subtitles"
            case tags = "Tags"
            case transcript = "Transcript"
            case transcriptionJobName = "TranscriptionJobName"
            case transcriptionJobStatus = "TranscriptionJobStatus"
        }
    }

    public struct TranscriptionJobSummary: AWSDecodableShape {
        /// A timestamp that shows when the job was completed.
        public let completionTime: Date?
        /// The content redaction settings of the transcription job.
        public let contentRedaction: ContentRedaction?
        /// A timestamp that shows when the job was created.
        public let creationTime: Date?
        /// If the TranscriptionJobStatus field is FAILED, a description of the error.
        public let failureReason: String?
        /// A value between zero and one that Amazon Transcribe assigned to the language it identified in the source audio. A higher score indicates that Amazon Transcribe is more confident in the language it identified.
        public let identifiedLanguageScore: Float?
        /// Whether automatic language identification was enabled for a transcription job.
        public let identifyLanguage: Bool?
        /// The language code for the input speech.
        public let languageCode: LanguageCode?
        public let modelSettings: ModelSettings?
        /// Indicates the location of the output of the transcription job. If the value is CUSTOMER_BUCKET then the location is the S3 bucket specified in the outputBucketName field when the transcription job was started with the StartTranscriptionJob operation. If the value is SERVICE_BUCKET then the output is stored by Amazon Transcribe and can be retrieved using the URI in the GetTranscriptionJob response's TranscriptFileUri field.
        public let outputLocationType: OutputLocationType?
        /// A timestamp that shows when the job started processing.
        public let startTime: Date?
        /// The name of the transcription job.
        public let transcriptionJobName: String?
        /// The status of the transcription job. When the status is COMPLETED, use the GetTranscriptionJob operation to get the results of the transcription.
        public let transcriptionJobStatus: TranscriptionJobStatus?

        public init(completionTime: Date? = nil, contentRedaction: ContentRedaction? = nil, creationTime: Date? = nil, failureReason: String? = nil, identifiedLanguageScore: Float? = nil, identifyLanguage: Bool? = nil, languageCode: LanguageCode? = nil, modelSettings: ModelSettings? = nil, outputLocationType: OutputLocationType? = nil, startTime: Date? = nil, transcriptionJobName: String? = nil, transcriptionJobStatus: TranscriptionJobStatus? = nil) {
            self.completionTime = completionTime
            self.contentRedaction = contentRedaction
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.identifiedLanguageScore = identifiedLanguageScore
            self.identifyLanguage = identifyLanguage
            self.languageCode = languageCode
            self.modelSettings = modelSettings
            self.outputLocationType = outputLocationType
            self.startTime = startTime
            self.transcriptionJobName = transcriptionJobName
            self.transcriptionJobStatus = transcriptionJobStatus
        }

        private enum CodingKeys: String, CodingKey {
            case completionTime = "CompletionTime"
            case contentRedaction = "ContentRedaction"
            case creationTime = "CreationTime"
            case failureReason = "FailureReason"
            case identifiedLanguageScore = "IdentifiedLanguageScore"
            case identifyLanguage = "IdentifyLanguage"
            case languageCode = "LanguageCode"
            case modelSettings = "ModelSettings"
            case outputLocationType = "OutputLocationType"
            case startTime = "StartTime"
            case transcriptionJobName = "TranscriptionJobName"
            case transcriptionJobStatus = "TranscriptionJobStatus"
        }
    }

    public struct UntagResourceRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "resourceArn", location: .uri(locationName: "ResourceArn"))
        ]

        /// The Amazon Resource Name (ARN) of the Amazon Transcribe resource you want to remove tags from.
        public let resourceArn: String
        /// A list of tag keys you want to remove from a specified Amazon Transcribe resource.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1011)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "^arn:aws(-[^:]+)?:transcribe:[a-zA-Z0-9-]*:[0-9]{12}:[a-zA-Z-]*/[0-9a-zA-Z._-]+$")
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
            }
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, max: 200)
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case tagKeys = "TagKeys"
        }
    }

    public struct UntagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct UpdateCallAnalyticsCategoryRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "categoryName", location: .uri(locationName: "CategoryName"))
        ]

        /// The name of the analytics category to update. The name is case sensitive. If you try to update a call analytics category with the same name as a previous category you will receive a ConflictException error.
        public let categoryName: String
        /// The rules used for the updated analytics category. The rules that you provide in this field replace the ones that are currently being used.
        public let rules: [Rule]

        public init(categoryName: String, rules: [Rule]) {
            self.categoryName = categoryName
            self.rules = rules
        }

        public func validate(name: String) throws {
            try self.validate(self.categoryName, name: "categoryName", parent: name, max: 200)
            try self.validate(self.categoryName, name: "categoryName", parent: name, min: 1)
            try self.validate(self.categoryName, name: "categoryName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.rules.forEach {
                try $0.validate(name: "\(name).rules[]")
            }
            try self.validate(self.rules, name: "rules", parent: name, max: 20)
            try self.validate(self.rules, name: "rules", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rules"
        }
    }

    public struct UpdateCallAnalyticsCategoryResponse: AWSDecodableShape {
        /// The attributes describing the analytics category. You can see information such as the rules that you've used  to update the category and when the category was originally created.
        public let categoryProperties: CategoryProperties?

        public init(categoryProperties: CategoryProperties? = nil) {
            self.categoryProperties = categoryProperties
        }

        private enum CodingKeys: String, CodingKey {
            case categoryProperties = "CategoryProperties"
        }
    }

    public struct UpdateMedicalVocabularyRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "vocabularyName", location: .uri(locationName: "VocabularyName"))
        ]

        /// The language code of the language used for the entries in the updated vocabulary. US English (en-US) is the  only valid language code in Amazon Transcribe Medical.
        public let languageCode: LanguageCode
        /// The location in Amazon S3 of the text file that contains your custom vocabulary. The URI must be in the same Amazon Web Services Region as the resource that you are calling. The following is the format for a  URI:   https://s3..amazonaws.com///   For example:  https://s3.us-east-1.amazonaws.com/AWSDOC-EXAMPLE-BUCKET/vocab.txt  For more information about Amazon S3 object names, see Object Keys in the Amazon S3  Developer Guide. For more information about custom vocabularies in Amazon Transcribe Medical, see Medical Custom Vocabularies.
        public let vocabularyFileUri: String?
        /// The name of the vocabulary to update. The name is case sensitive. If you try to update a vocabulary with the same name as a vocabulary you've already made, you get a ConflictException error.
        public let vocabularyName: String

        public init(languageCode: LanguageCode, vocabularyFileUri: String? = nil, vocabularyName: String) {
            self.languageCode = languageCode
            self.vocabularyFileUri = vocabularyFileUri
            self.vocabularyName = vocabularyName
        }

        public func validate(name: String) throws {
            try self.validate(self.vocabularyFileUri, name: "vocabularyFileUri", parent: name, max: 2000)
            try self.validate(self.vocabularyFileUri, name: "vocabularyFileUri", parent: name, min: 1)
            try self.validate(self.vocabularyFileUri, name: "vocabularyFileUri", parent: name, pattern: "^(s3://|http(s*)://).+$")
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, max: 200)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, min: 1)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case vocabularyFileUri = "VocabularyFileUri"
        }
    }

    public struct UpdateMedicalVocabularyResponse: AWSDecodableShape {
        /// The language code for the language of the text file used to update the custom vocabulary. US English (en-US)  is the only language supported in Amazon Transcribe Medical.
        public let languageCode: LanguageCode?
        /// The date and time that the vocabulary was updated.
        public let lastModifiedTime: Date?
        /// The name of the updated vocabulary.
        public let vocabularyName: String?
        /// The processing state of the update to the vocabulary. When the VocabularyState field is  READY, the vocabulary is ready to be used in a StartMedicalTranscriptionJob  request.
        public let vocabularyState: VocabularyState?

        public init(languageCode: LanguageCode? = nil, lastModifiedTime: Date? = nil, vocabularyName: String? = nil, vocabularyState: VocabularyState? = nil) {
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.vocabularyName = vocabularyName
            self.vocabularyState = vocabularyState
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case lastModifiedTime = "LastModifiedTime"
            case vocabularyName = "VocabularyName"
            case vocabularyState = "VocabularyState"
        }
    }

    public struct UpdateVocabularyFilterRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "vocabularyFilterName", location: .uri(locationName: "VocabularyFilterName"))
        ]

        /// The Amazon S3 location of a text file used as input to create the vocabulary filter. Only use characters from  the character set defined for custom vocabularies. For a list of character sets, see Character Sets for Custom Vocabularies. The specified file must be less than 50 KB of UTF-8 characters. If you provide the location of a list of words in the VocabularyFilterFileUri parameter, you can't use the Words parameter.
        public let vocabularyFilterFileUri: String?
        /// The name of the vocabulary filter to update. If you try to update a vocabulary filter with the same name as  another vocabulary filter, you get a ConflictException error.
        public let vocabularyFilterName: String
        /// The words to use in the vocabulary filter. Only use characters from the character set defined for custom  vocabularies. For a list of character sets, see Character Sets for Custom Vocabularies. If you provide a list of words in the Words parameter, you can't use the  VocabularyFilterFileUri parameter.
        public let words: [String]?

        public init(vocabularyFilterFileUri: String? = nil, vocabularyFilterName: String, words: [String]? = nil) {
            self.vocabularyFilterFileUri = vocabularyFilterFileUri
            self.vocabularyFilterName = vocabularyFilterName
            self.words = words
        }

        public func validate(name: String) throws {
            try self.validate(self.vocabularyFilterFileUri, name: "vocabularyFilterFileUri", parent: name, max: 2000)
            try self.validate(self.vocabularyFilterFileUri, name: "vocabularyFilterFileUri", parent: name, min: 1)
            try self.validate(self.vocabularyFilterFileUri, name: "vocabularyFilterFileUri", parent: name, pattern: "^(s3://|http(s*)://).+$")
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, max: 200)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, min: 1)
            try self.validate(self.vocabularyFilterName, name: "vocabularyFilterName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
            try self.words?.forEach {
                try validate($0, name: "words[]", parent: name, max: 256)
                try validate($0, name: "words[]", parent: name, min: 1)
            }
            try self.validate(self.words, name: "words", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case vocabularyFilterFileUri = "VocabularyFilterFileUri"
            case words = "Words"
        }
    }

    public struct UpdateVocabularyFilterResponse: AWSDecodableShape {
        /// The language code of the words in the vocabulary filter.
        public let languageCode: LanguageCode?
        /// The date and time that the vocabulary filter was updated.
        public let lastModifiedTime: Date?
        /// The name of the updated vocabulary filter.
        public let vocabularyFilterName: String?

        public init(languageCode: LanguageCode? = nil, lastModifiedTime: Date? = nil, vocabularyFilterName: String? = nil) {
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.vocabularyFilterName = vocabularyFilterName
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case lastModifiedTime = "LastModifiedTime"
            case vocabularyFilterName = "VocabularyFilterName"
        }
    }

    public struct UpdateVocabularyRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "vocabularyName", location: .uri(locationName: "VocabularyName"))
        ]

        /// The language code of the vocabulary entries. For a list of languages and their corresponding language codes,  see transcribe-whatis.
        public let languageCode: LanguageCode
        /// An array of strings containing the vocabulary entries.
        public let phrases: [String]?
        /// The S3 location of the text file that contains the definition of the custom vocabulary. The URI must be in the  same region as the API endpoint that you are calling. The general form is   For example:  For more information about S3 object names, see Object Keys in the Amazon S3  Developer Guide. For more information about custom vocabularies, see Custom Vocabularies.
        public let vocabularyFileUri: String?
        /// The name of the vocabulary to update. The name is case sensitive. If you try to update a vocabulary with the  same name as a previous vocabulary you will receive a ConflictException error.
        public let vocabularyName: String

        public init(languageCode: LanguageCode, phrases: [String]? = nil, vocabularyFileUri: String? = nil, vocabularyName: String) {
            self.languageCode = languageCode
            self.phrases = phrases
            self.vocabularyFileUri = vocabularyFileUri
            self.vocabularyName = vocabularyName
        }

        public func validate(name: String) throws {
            try self.phrases?.forEach {
                try validate($0, name: "phrases[]", parent: name, max: 256)
                try validate($0, name: "phrases[]", parent: name, pattern: "^.+$")
            }
            try self.validate(self.vocabularyFileUri, name: "vocabularyFileUri", parent: name, max: 2000)
            try self.validate(self.vocabularyFileUri, name: "vocabularyFileUri", parent: name, min: 1)
            try self.validate(self.vocabularyFileUri, name: "vocabularyFileUri", parent: name, pattern: "^(s3://|http(s*)://).+$")
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, max: 200)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, min: 1)
            try self.validate(self.vocabularyName, name: "vocabularyName", parent: name, pattern: "^[0-9a-zA-Z._-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case phrases = "Phrases"
            case vocabularyFileUri = "VocabularyFileUri"
        }
    }

    public struct UpdateVocabularyResponse: AWSDecodableShape {
        /// The language code of the vocabulary entries.
        public let languageCode: LanguageCode?
        /// The date and time that the vocabulary was updated.
        public let lastModifiedTime: Date?
        /// The name of the vocabulary that was updated.
        public let vocabularyName: String?
        /// The processing state of the vocabulary. When the VocabularyState field contains  READY the vocabulary is ready to be used in a StartTranscriptionJob  request.
        public let vocabularyState: VocabularyState?

        public init(languageCode: LanguageCode? = nil, lastModifiedTime: Date? = nil, vocabularyName: String? = nil, vocabularyState: VocabularyState? = nil) {
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.vocabularyName = vocabularyName
            self.vocabularyState = vocabularyState
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case lastModifiedTime = "LastModifiedTime"
            case vocabularyName = "VocabularyName"
            case vocabularyState = "VocabularyState"
        }
    }

    public struct VocabularyFilterInfo: AWSDecodableShape {
        /// The language code of the words in the vocabulary filter.
        public let languageCode: LanguageCode?
        /// The date and time that the vocabulary was last updated.
        public let lastModifiedTime: Date?
        /// The name of the vocabulary filter. The name must be unique in the account that holds the filter.
        public let vocabularyFilterName: String?

        public init(languageCode: LanguageCode? = nil, lastModifiedTime: Date? = nil, vocabularyFilterName: String? = nil) {
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.vocabularyFilterName = vocabularyFilterName
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case lastModifiedTime = "LastModifiedTime"
            case vocabularyFilterName = "VocabularyFilterName"
        }
    }

    public struct VocabularyInfo: AWSDecodableShape {
        /// The language code of the vocabulary entries.
        public let languageCode: LanguageCode?
        /// The date and time that the vocabulary was last modified.
        public let lastModifiedTime: Date?
        /// The name of the vocabulary.
        public let vocabularyName: String?
        /// The processing state of the vocabulary. If the state is READY you can use the vocabulary in a StartTranscriptionJob request.
        public let vocabularyState: VocabularyState?

        public init(languageCode: LanguageCode? = nil, lastModifiedTime: Date? = nil, vocabularyName: String? = nil, vocabularyState: VocabularyState? = nil) {
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.vocabularyName = vocabularyName
            self.vocabularyState = vocabularyState
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case lastModifiedTime = "LastModifiedTime"
            case vocabularyName = "VocabularyName"
            case vocabularyState = "VocabularyState"
        }
    }
}
