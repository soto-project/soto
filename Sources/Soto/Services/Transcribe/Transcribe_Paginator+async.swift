//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if compiler(>=5.5) && canImport(_Concurrency)

import SotoCore

// MARK: Paginators

@available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
extension Transcribe {
    ///  Provides more information about the call analytics categories that you've created. You  can use the information in this list to find a specific category. You can then use the operation to get more information about it.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listCallAnalyticsCategoriesPaginator(
        _ input: ListCallAnalyticsCategoriesRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListCallAnalyticsCategoriesRequest, ListCallAnalyticsCategoriesResponse> {
        return .init(
            input: input,
            command: listCallAnalyticsCategories,
            inputKey: \ListCallAnalyticsCategoriesRequest.nextToken,
            outputKey: \ListCallAnalyticsCategoriesResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  List call analytics jobs with a specified status or substring that matches their names.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listCallAnalyticsJobsPaginator(
        _ input: ListCallAnalyticsJobsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListCallAnalyticsJobsRequest, ListCallAnalyticsJobsResponse> {
        return .init(
            input: input,
            command: listCallAnalyticsJobs,
            inputKey: \ListCallAnalyticsJobsRequest.nextToken,
            outputKey: \ListCallAnalyticsJobsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Provides more information about the custom language models you've created. You can use the information in  this list to find a specific custom language model. You can then use the  operation to get more information about it.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listLanguageModelsPaginator(
        _ input: ListLanguageModelsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListLanguageModelsRequest, ListLanguageModelsResponse> {
        return .init(
            input: input,
            command: listLanguageModels,
            inputKey: \ListLanguageModelsRequest.nextToken,
            outputKey: \ListLanguageModelsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists medical transcription jobs with a specified status or substring that matches their names.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listMedicalTranscriptionJobsPaginator(
        _ input: ListMedicalTranscriptionJobsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListMedicalTranscriptionJobsRequest, ListMedicalTranscriptionJobsResponse> {
        return .init(
            input: input,
            command: listMedicalTranscriptionJobs,
            inputKey: \ListMedicalTranscriptionJobsRequest.nextToken,
            outputKey: \ListMedicalTranscriptionJobsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns a list of vocabularies that match the specified criteria. If you don't enter a value in any of the request parameters, returns the entire list of vocabularies.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listMedicalVocabulariesPaginator(
        _ input: ListMedicalVocabulariesRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListMedicalVocabulariesRequest, ListMedicalVocabulariesResponse> {
        return .init(
            input: input,
            command: listMedicalVocabularies,
            inputKey: \ListMedicalVocabulariesRequest.nextToken,
            outputKey: \ListMedicalVocabulariesResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists transcription jobs with the specified status.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listTranscriptionJobsPaginator(
        _ input: ListTranscriptionJobsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListTranscriptionJobsRequest, ListTranscriptionJobsResponse> {
        return .init(
            input: input,
            command: listTranscriptionJobs,
            inputKey: \ListTranscriptionJobsRequest.nextToken,
            outputKey: \ListTranscriptionJobsResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns a list of vocabularies that match the specified criteria. If no criteria are specified, returns the entire list  of vocabularies.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listVocabulariesPaginator(
        _ input: ListVocabulariesRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListVocabulariesRequest, ListVocabulariesResponse> {
        return .init(
            input: input,
            command: listVocabularies,
            inputKey: \ListVocabulariesRequest.nextToken,
            outputKey: \ListVocabulariesResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Gets information about vocabulary filters.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listVocabularyFiltersPaginator(
        _ input: ListVocabularyFiltersRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListVocabularyFiltersRequest, ListVocabularyFiltersResponse> {
        return .init(
            input: input,
            command: listVocabularyFilters,
            inputKey: \ListVocabularyFiltersRequest.nextToken,
            outputKey: \ListVocabularyFiltersResponse.nextToken,
            logger: logger,
            on: eventLoop
        )
    }
}

#endif // compiler(>=5.5) && canImport(_Concurrency)
