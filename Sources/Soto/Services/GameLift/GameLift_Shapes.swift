//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

import Foundation
import SotoCore

extension GameLift {
    // MARK: Enums

    public enum AcceptanceType: String, CustomStringConvertible, Codable {
        case accept = "ACCEPT"
        case reject = "REJECT"
        public var description: String { return self.rawValue }
    }

    public enum BackfillMode: String, CustomStringConvertible, Codable {
        case automatic = "AUTOMATIC"
        case manual = "MANUAL"
        public var description: String { return self.rawValue }
    }

    public enum BalancingStrategy: String, CustomStringConvertible, Codable {
        case onDemandOnly = "ON_DEMAND_ONLY"
        case spotOnly = "SPOT_ONLY"
        case spotPreferred = "SPOT_PREFERRED"
        public var description: String { return self.rawValue }
    }

    public enum BuildStatus: String, CustomStringConvertible, Codable {
        case failed = "FAILED"
        case initialized = "INITIALIZED"
        case ready = "READY"
        public var description: String { return self.rawValue }
    }

    public enum CertificateType: String, CustomStringConvertible, Codable {
        case disabled = "DISABLED"
        case generated = "GENERATED"
        public var description: String { return self.rawValue }
    }

    public enum ComparisonOperatorType: String, CustomStringConvertible, Codable {
        case greaterthanorequaltothreshold = "GreaterThanOrEqualToThreshold"
        case greaterthanthreshold = "GreaterThanThreshold"
        case lessthanorequaltothreshold = "LessThanOrEqualToThreshold"
        case lessthanthreshold = "LessThanThreshold"
        public var description: String { return self.rawValue }
    }

    public enum EC2InstanceType: String, CustomStringConvertible, Codable {
        case c32Xlarge = "c3.2xlarge"
        case c34Xlarge = "c3.4xlarge"
        case c38Xlarge = "c3.8xlarge"
        case c3Large = "c3.large"
        case c3Xlarge = "c3.xlarge"
        case c42Xlarge = "c4.2xlarge"
        case c44Xlarge = "c4.4xlarge"
        case c48Xlarge = "c4.8xlarge"
        case c4Large = "c4.large"
        case c4Xlarge = "c4.xlarge"
        case c512Xlarge = "c5.12xlarge"
        case c518Xlarge = "c5.18xlarge"
        case c524Xlarge = "c5.24xlarge"
        case c52Xlarge = "c5.2xlarge"
        case c54Xlarge = "c5.4xlarge"
        case c59Xlarge = "c5.9xlarge"
        case c5Large = "c5.large"
        case c5Xlarge = "c5.xlarge"
        case c5a12Xlarge = "c5a.12xlarge"
        case c5a16Xlarge = "c5a.16xlarge"
        case c5a24Xlarge = "c5a.24xlarge"
        case c5a2Xlarge = "c5a.2xlarge"
        case c5a4Xlarge = "c5a.4xlarge"
        case c5a8Xlarge = "c5a.8xlarge"
        case c5aLarge = "c5a.large"
        case c5aXlarge = "c5a.xlarge"
        case m32Xlarge = "m3.2xlarge"
        case m3Large = "m3.large"
        case m3Medium = "m3.medium"
        case m3Xlarge = "m3.xlarge"
        case m410Xlarge = "m4.10xlarge"
        case m42Xlarge = "m4.2xlarge"
        case m44Xlarge = "m4.4xlarge"
        case m4Large = "m4.large"
        case m4Xlarge = "m4.xlarge"
        case m512Xlarge = "m5.12xlarge"
        case m516Xlarge = "m5.16xlarge"
        case m524Xlarge = "m5.24xlarge"
        case m52Xlarge = "m5.2xlarge"
        case m54Xlarge = "m5.4xlarge"
        case m58Xlarge = "m5.8xlarge"
        case m5Large = "m5.large"
        case m5Xlarge = "m5.xlarge"
        case m5a12Xlarge = "m5a.12xlarge"
        case m5a16Xlarge = "m5a.16xlarge"
        case m5a24Xlarge = "m5a.24xlarge"
        case m5a2Xlarge = "m5a.2xlarge"
        case m5a4Xlarge = "m5a.4xlarge"
        case m5a8Xlarge = "m5a.8xlarge"
        case m5aLarge = "m5a.large"
        case m5aXlarge = "m5a.xlarge"
        case r32Xlarge = "r3.2xlarge"
        case r34Xlarge = "r3.4xlarge"
        case r38Xlarge = "r3.8xlarge"
        case r3Large = "r3.large"
        case r3Xlarge = "r3.xlarge"
        case r416Xlarge = "r4.16xlarge"
        case r42Xlarge = "r4.2xlarge"
        case r44Xlarge = "r4.4xlarge"
        case r48Xlarge = "r4.8xlarge"
        case r4Large = "r4.large"
        case r4Xlarge = "r4.xlarge"
        case r512Xlarge = "r5.12xlarge"
        case r516Xlarge = "r5.16xlarge"
        case r524Xlarge = "r5.24xlarge"
        case r52Xlarge = "r5.2xlarge"
        case r54Xlarge = "r5.4xlarge"
        case r58Xlarge = "r5.8xlarge"
        case r5Large = "r5.large"
        case r5Xlarge = "r5.xlarge"
        case r5a12Xlarge = "r5a.12xlarge"
        case r5a16Xlarge = "r5a.16xlarge"
        case r5a24Xlarge = "r5a.24xlarge"
        case r5a2Xlarge = "r5a.2xlarge"
        case r5a4Xlarge = "r5a.4xlarge"
        case r5a8Xlarge = "r5a.8xlarge"
        case r5aLarge = "r5a.large"
        case r5aXlarge = "r5a.xlarge"
        case t2Large = "t2.large"
        case t2Medium = "t2.medium"
        case t2Micro = "t2.micro"
        case t2Small = "t2.small"
        public var description: String { return self.rawValue }
    }

    public enum EventCode: String, CustomStringConvertible, Codable {
        case fleetActivationFailed = "FLEET_ACTIVATION_FAILED"
        case fleetActivationFailedNoInstances = "FLEET_ACTIVATION_FAILED_NO_INSTANCES"
        case fleetBinaryDownloadFailed = "FLEET_BINARY_DOWNLOAD_FAILED"
        case fleetCreated = "FLEET_CREATED"
        case fleetCreationExtractingBuild = "FLEET_CREATION_EXTRACTING_BUILD"
        case fleetCreationRunningInstaller = "FLEET_CREATION_RUNNING_INSTALLER"
        case fleetCreationValidatingRuntimeConfig = "FLEET_CREATION_VALIDATING_RUNTIME_CONFIG"
        case fleetDeleted = "FLEET_DELETED"
        case fleetInitializationFailed = "FLEET_INITIALIZATION_FAILED"
        case fleetNewGameSessionProtectionPolicyUpdated = "FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED"
        case fleetScalingEvent = "FLEET_SCALING_EVENT"
        case fleetStateActivating = "FLEET_STATE_ACTIVATING"
        case fleetStateActive = "FLEET_STATE_ACTIVE"
        case fleetStateBuilding = "FLEET_STATE_BUILDING"
        case fleetStateDownloading = "FLEET_STATE_DOWNLOADING"
        case fleetStateError = "FLEET_STATE_ERROR"
        case fleetStateValidating = "FLEET_STATE_VALIDATING"
        case fleetValidationExecutableRuntimeFailure = "FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE"
        case fleetValidationLaunchPathNotFound = "FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND"
        case fleetValidationTimedOut = "FLEET_VALIDATION_TIMED_OUT"
        case fleetVpcPeeringDeleted = "FLEET_VPC_PEERING_DELETED"
        case fleetVpcPeeringFailed = "FLEET_VPC_PEERING_FAILED"
        case fleetVpcPeeringSucceeded = "FLEET_VPC_PEERING_SUCCEEDED"
        case gameSessionActivationTimeout = "GAME_SESSION_ACTIVATION_TIMEOUT"
        case genericEvent = "GENERIC_EVENT"
        case instanceInterrupted = "INSTANCE_INTERRUPTED"
        case serverProcessCrashed = "SERVER_PROCESS_CRASHED"
        case serverProcessForceTerminated = "SERVER_PROCESS_FORCE_TERMINATED"
        case serverProcessInvalidPath = "SERVER_PROCESS_INVALID_PATH"
        case serverProcessProcessExitTimeout = "SERVER_PROCESS_PROCESS_EXIT_TIMEOUT"
        case serverProcessProcessReadyTimeout = "SERVER_PROCESS_PROCESS_READY_TIMEOUT"
        case serverProcessSdkInitializationTimeout = "SERVER_PROCESS_SDK_INITIALIZATION_TIMEOUT"
        case serverProcessTerminatedUnhealthy = "SERVER_PROCESS_TERMINATED_UNHEALTHY"
        public var description: String { return self.rawValue }
    }

    public enum FleetAction: String, CustomStringConvertible, Codable {
        case autoScaling = "AUTO_SCALING"
        public var description: String { return self.rawValue }
    }

    public enum FleetStatus: String, CustomStringConvertible, Codable {
        case activating = "ACTIVATING"
        case active = "ACTIVE"
        case building = "BUILDING"
        case deleting = "DELETING"
        case downloading = "DOWNLOADING"
        case error = "ERROR"
        case new = "NEW"
        case terminated = "TERMINATED"
        case validating = "VALIDATING"
        public var description: String { return self.rawValue }
    }

    public enum FleetType: String, CustomStringConvertible, Codable {
        case onDemand = "ON_DEMAND"
        case spot = "SPOT"
        public var description: String { return self.rawValue }
    }

    public enum FlexMatchMode: String, CustomStringConvertible, Codable {
        case standalone = "STANDALONE"
        case withQueue = "WITH_QUEUE"
        public var description: String { return self.rawValue }
    }

    public enum GameServerClaimStatus: String, CustomStringConvertible, Codable {
        case claimed = "CLAIMED"
        public var description: String { return self.rawValue }
    }

    public enum GameServerGroupAction: String, CustomStringConvertible, Codable {
        case replaceInstanceTypes = "REPLACE_INSTANCE_TYPES"
        public var description: String { return self.rawValue }
    }

    public enum GameServerGroupDeleteOption: String, CustomStringConvertible, Codable {
        case forceDelete = "FORCE_DELETE"
        case retain = "RETAIN"
        case safeDelete = "SAFE_DELETE"
        public var description: String { return self.rawValue }
    }

    public enum GameServerGroupInstanceType: String, CustomStringConvertible, Codable {
        case c42Xlarge = "c4.2xlarge"
        case c44Xlarge = "c4.4xlarge"
        case c48Xlarge = "c4.8xlarge"
        case c4Large = "c4.large"
        case c4Xlarge = "c4.xlarge"
        case c512Xlarge = "c5.12xlarge"
        case c518Xlarge = "c5.18xlarge"
        case c524Xlarge = "c5.24xlarge"
        case c52Xlarge = "c5.2xlarge"
        case c54Xlarge = "c5.4xlarge"
        case c59Xlarge = "c5.9xlarge"
        case c5Large = "c5.large"
        case c5Xlarge = "c5.xlarge"
        case c5a12Xlarge = "c5a.12xlarge"
        case c5a16Xlarge = "c5a.16xlarge"
        case c5a24Xlarge = "c5a.24xlarge"
        case c5a2Xlarge = "c5a.2xlarge"
        case c5a4Xlarge = "c5a.4xlarge"
        case c5a8Xlarge = "c5a.8xlarge"
        case c5aLarge = "c5a.large"
        case c5aXlarge = "c5a.xlarge"
        case m410Xlarge = "m4.10xlarge"
        case m42Xlarge = "m4.2xlarge"
        case m44Xlarge = "m4.4xlarge"
        case m4Large = "m4.large"
        case m4Xlarge = "m4.xlarge"
        case m512Xlarge = "m5.12xlarge"
        case m516Xlarge = "m5.16xlarge"
        case m524Xlarge = "m5.24xlarge"
        case m52Xlarge = "m5.2xlarge"
        case m54Xlarge = "m5.4xlarge"
        case m58Xlarge = "m5.8xlarge"
        case m5Large = "m5.large"
        case m5Xlarge = "m5.xlarge"
        case m5a12Xlarge = "m5a.12xlarge"
        case m5a16Xlarge = "m5a.16xlarge"
        case m5a24Xlarge = "m5a.24xlarge"
        case m5a2Xlarge = "m5a.2xlarge"
        case m5a4Xlarge = "m5a.4xlarge"
        case m5a8Xlarge = "m5a.8xlarge"
        case m5aLarge = "m5a.large"
        case m5aXlarge = "m5a.xlarge"
        case r416Xlarge = "r4.16xlarge"
        case r42Xlarge = "r4.2xlarge"
        case r44Xlarge = "r4.4xlarge"
        case r48Xlarge = "r4.8xlarge"
        case r4Large = "r4.large"
        case r4Xlarge = "r4.xlarge"
        case r512Xlarge = "r5.12xlarge"
        case r516Xlarge = "r5.16xlarge"
        case r524Xlarge = "r5.24xlarge"
        case r52Xlarge = "r5.2xlarge"
        case r54Xlarge = "r5.4xlarge"
        case r58Xlarge = "r5.8xlarge"
        case r5Large = "r5.large"
        case r5Xlarge = "r5.xlarge"
        case r5a12Xlarge = "r5a.12xlarge"
        case r5a16Xlarge = "r5a.16xlarge"
        case r5a24Xlarge = "r5a.24xlarge"
        case r5a2Xlarge = "r5a.2xlarge"
        case r5a4Xlarge = "r5a.4xlarge"
        case r5a8Xlarge = "r5a.8xlarge"
        case r5aLarge = "r5a.large"
        case r5aXlarge = "r5a.xlarge"
        public var description: String { return self.rawValue }
    }

    public enum GameServerGroupStatus: String, CustomStringConvertible, Codable {
        case activating = "ACTIVATING"
        case active = "ACTIVE"
        case deleted = "DELETED"
        case deleteScheduled = "DELETE_SCHEDULED"
        case deleting = "DELETING"
        case error = "ERROR"
        case new = "NEW"
        public var description: String { return self.rawValue }
    }

    public enum GameServerHealthCheck: String, CustomStringConvertible, Codable {
        case healthy = "HEALTHY"
        public var description: String { return self.rawValue }
    }

    public enum GameServerInstanceStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case draining = "DRAINING"
        case spotTerminating = "SPOT_TERMINATING"
        public var description: String { return self.rawValue }
    }

    public enum GameServerProtectionPolicy: String, CustomStringConvertible, Codable {
        case fullProtection = "FULL_PROTECTION"
        case noProtection = "NO_PROTECTION"
        public var description: String { return self.rawValue }
    }

    public enum GameServerUtilizationStatus: String, CustomStringConvertible, Codable {
        case available = "AVAILABLE"
        case utilized = "UTILIZED"
        public var description: String { return self.rawValue }
    }

    public enum GameSessionPlacementState: String, CustomStringConvertible, Codable {
        case cancelled = "CANCELLED"
        case failed = "FAILED"
        case fulfilled = "FULFILLED"
        case pending = "PENDING"
        case timedOut = "TIMED_OUT"
        public var description: String { return self.rawValue }
    }

    public enum GameSessionStatus: String, CustomStringConvertible, Codable {
        case activating = "ACTIVATING"
        case active = "ACTIVE"
        case error = "ERROR"
        case terminated = "TERMINATED"
        case terminating = "TERMINATING"
        public var description: String { return self.rawValue }
    }

    public enum GameSessionStatusReason: String, CustomStringConvertible, Codable {
        case interrupted = "INTERRUPTED"
        public var description: String { return self.rawValue }
    }

    public enum InstanceStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case pending = "PENDING"
        case terminating = "TERMINATING"
        public var description: String { return self.rawValue }
    }

    public enum IpProtocol: String, CustomStringConvertible, Codable {
        case tcp = "TCP"
        case udp = "UDP"
        public var description: String { return self.rawValue }
    }

    public enum LocationUpdateStatus: String, CustomStringConvertible, Codable {
        case pendingUpdate = "PENDING_UPDATE"
        public var description: String { return self.rawValue }
    }

    public enum MatchmakingConfigurationStatus: String, CustomStringConvertible, Codable {
        case cancelled = "CANCELLED"
        case completed = "COMPLETED"
        case failed = "FAILED"
        case placing = "PLACING"
        case queued = "QUEUED"
        case requiresAcceptance = "REQUIRES_ACCEPTANCE"
        case searching = "SEARCHING"
        case timedOut = "TIMED_OUT"
        public var description: String { return self.rawValue }
    }

    public enum MetricName: String, CustomStringConvertible, Codable {
        case activatinggamesessions = "ActivatingGameSessions"
        case activegamesessions = "ActiveGameSessions"
        case activeinstances = "ActiveInstances"
        case availablegamesessions = "AvailableGameSessions"
        case availableplayersessions = "AvailablePlayerSessions"
        case currentplayersessions = "CurrentPlayerSessions"
        case idleinstances = "IdleInstances"
        case percentavailablegamesessions = "PercentAvailableGameSessions"
        case percentidleinstances = "PercentIdleInstances"
        case queuedepth = "QueueDepth"
        case waittime = "WaitTime"
        public var description: String { return self.rawValue }
    }

    public enum OperatingSystem: String, CustomStringConvertible, Codable {
        case amazonLinux = "AMAZON_LINUX"
        case amazonLinux2 = "AMAZON_LINUX_2"
        case windows2012 = "WINDOWS_2012"
        public var description: String { return self.rawValue }
    }

    public enum PlayerSessionCreationPolicy: String, CustomStringConvertible, Codable {
        case acceptAll = "ACCEPT_ALL"
        case denyAll = "DENY_ALL"
        public var description: String { return self.rawValue }
    }

    public enum PlayerSessionStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case completed = "COMPLETED"
        case reserved = "RESERVED"
        case timedout = "TIMEDOUT"
        public var description: String { return self.rawValue }
    }

    public enum PolicyType: String, CustomStringConvertible, Codable {
        case rulebased = "RuleBased"
        case targetbased = "TargetBased"
        public var description: String { return self.rawValue }
    }

    public enum PriorityType: String, CustomStringConvertible, Codable {
        case cost = "COST"
        case destination = "DESTINATION"
        case latency = "LATENCY"
        case location = "LOCATION"
        public var description: String { return self.rawValue }
    }

    public enum ProtectionPolicy: String, CustomStringConvertible, Codable {
        case fullprotection = "FullProtection"
        case noprotection = "NoProtection"
        public var description: String { return self.rawValue }
    }

    public enum RoutingStrategyType: String, CustomStringConvertible, Codable {
        case simple = "SIMPLE"
        case terminal = "TERMINAL"
        public var description: String { return self.rawValue }
    }

    public enum ScalingAdjustmentType: String, CustomStringConvertible, Codable {
        case changeincapacity = "ChangeInCapacity"
        case exactcapacity = "ExactCapacity"
        case percentchangeincapacity = "PercentChangeInCapacity"
        public var description: String { return self.rawValue }
    }

    public enum ScalingStatusType: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case deleted = "DELETED"
        case deleteRequested = "DELETE_REQUESTED"
        case deleting = "DELETING"
        case error = "ERROR"
        case updateRequested = "UPDATE_REQUESTED"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public enum SortOrder: String, CustomStringConvertible, Codable {
        case ascending = "ASCENDING"
        case descending = "DESCENDING"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct AcceptMatchInput: AWSEncodableShape {
        /// Player response to the proposed match.
        public let acceptanceType: AcceptanceType
        /// A unique identifier for a player delivering the response. This parameter can include one or multiple player IDs.
        public let playerIds: [String]
        /// A unique identifier for a matchmaking ticket. The ticket must be in status REQUIRES_ACCEPTANCE; otherwise this request will fail.
        public let ticketId: String

        public init(acceptanceType: AcceptanceType, playerIds: [String], ticketId: String) {
            self.acceptanceType = acceptanceType
            self.playerIds = playerIds
            self.ticketId = ticketId
        }

        public func validate(name: String) throws {
            try self.playerIds.forEach {
                try validate($0, name: "playerIds[]", parent: name, max: 1024)
                try validate($0, name: "playerIds[]", parent: name, min: 1)
            }
            try self.validate(self.ticketId, name: "ticketId", parent: name, max: 128)
            try self.validate(self.ticketId, name: "ticketId", parent: name, pattern: "[a-zA-Z0-9-\\.]*")
        }

        private enum CodingKeys: String, CodingKey {
            case acceptanceType = "AcceptanceType"
            case playerIds = "PlayerIds"
            case ticketId = "TicketId"
        }
    }

    public struct AcceptMatchOutput: AWSDecodableShape {
        public init() {}
    }

    public struct Alias: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) that is assigned to a GameLift alias resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::alias/alias-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912. In a GameLift alias ARN, the resource ID matches the alias ID value.
        public let aliasArn: String?
        /// A unique identifier for the alias. Alias IDs are unique within a Region.
        public let aliasId: String?
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: Date?
        /// A human-readable description of an alias.
        public let description: String?
        /// The time that this data object was last modified. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let lastUpdatedTime: Date?
        /// A descriptive label that is associated with an alias. Alias names do not need to be unique.
        public let name: String?
        /// The routing configuration, including routing type and fleet target, for the alias.
        public let routingStrategy: RoutingStrategy?

        public init(aliasArn: String? = nil, aliasId: String? = nil, creationTime: Date? = nil, description: String? = nil, lastUpdatedTime: Date? = nil, name: String? = nil, routingStrategy: RoutingStrategy? = nil) {
            self.aliasArn = aliasArn
            self.aliasId = aliasId
            self.creationTime = creationTime
            self.description = description
            self.lastUpdatedTime = lastUpdatedTime
            self.name = name
            self.routingStrategy = routingStrategy
        }

        private enum CodingKeys: String, CodingKey {
            case aliasArn = "AliasArn"
            case aliasId = "AliasId"
            case creationTime = "CreationTime"
            case description = "Description"
            case lastUpdatedTime = "LastUpdatedTime"
            case name = "Name"
            case routingStrategy = "RoutingStrategy"
        }
    }

    public struct AttributeValue: AWSEncodableShape & AWSDecodableShape {
        /// For number values, expressed as double.
        public let n: Double?
        /// For single string values. Maximum string length is 100 characters.
        public let s: String?
        /// For a map of up to 10 data type:value pairs. Maximum length for each string value is 100 characters.
        public let sdm: [String: Double]?
        /// For a list of up to 10 strings. Maximum length for each string is 100 characters. Duplicate values are not recognized; all occurrences of the repeated value after the first of a repeated value are ignored.
        public let sl: [String]?

        public init(n: Double? = nil, s: String? = nil, sdm: [String: Double]? = nil, sl: [String]? = nil) {
            self.n = n
            self.s = s
            self.sdm = sdm
            self.sl = sl
        }

        public func validate(name: String) throws {
            try self.validate(self.s, name: "s", parent: name, max: 1024)
            try self.validate(self.s, name: "s", parent: name, min: 1)
            try self.sdm?.forEach {
                try validate($0.key, name: "sdm.key", parent: name, max: 1024)
                try validate($0.key, name: "sdm.key", parent: name, min: 1)
            }
            try self.sl?.forEach {
                try validate($0, name: "sl[]", parent: name, max: 1024)
                try validate($0, name: "sl[]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case n = "N"
            case s = "S"
            case sdm = "SDM"
            case sl = "SL"
        }
    }

    public struct AwsCredentials: AWSDecodableShape {
        /// Temporary key allowing access to the Amazon GameLift S3 account.
        public let accessKeyId: String?
        /// Temporary secret key allowing access to the Amazon GameLift S3 account.
        public let secretAccessKey: String?
        /// Token used to associate a specific build ID with the files uploaded using these credentials.
        public let sessionToken: String?

        public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, sessionToken: String? = nil) {
            self.accessKeyId = accessKeyId
            self.secretAccessKey = secretAccessKey
            self.sessionToken = sessionToken
        }

        private enum CodingKeys: String, CodingKey {
            case accessKeyId = "AccessKeyId"
            case secretAccessKey = "SecretAccessKey"
            case sessionToken = "SessionToken"
        }
    }

    public struct Build: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) that is assigned to a GameLift build resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::build/build-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912. In a GameLift build ARN, the resource ID matches the BuildId value.
        public let buildArn: String?
        /// A unique identifier for the build.
        public let buildId: String?
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: Date?
        /// A descriptive label that is associated with a build. Build names do not need to be unique. It can be set using CreateBuild or UpdateBuild.
        public let name: String?
        /// Operating system that the game server binaries are built to run on. This value determines the type of fleet resources that you can use for this build.
        public let operatingSystem: OperatingSystem?
        /// File size of the uploaded game build, expressed in bytes. When the build status is INITIALIZED, this value is 0.
        public let sizeOnDisk: Int64?
        /// Current status of the build. Possible build statuses include the following:    INITIALIZED -- A new build has been defined, but no files have been uploaded. You cannot create fleets for builds that are in this status. When a build is successfully created, the build status is set to this value.     READY -- The game build has been successfully uploaded. You can now create new fleets for this build.    FAILED -- The game build upload failed. You cannot create new fleets for this build.
        public let status: BuildStatus?
        /// Version information that is associated with a build or script. Version strings do not need to be unique. This value can be set using CreateBuild or UpdateBuild.
        public let version: String?

        public init(buildArn: String? = nil, buildId: String? = nil, creationTime: Date? = nil, name: String? = nil, operatingSystem: OperatingSystem? = nil, sizeOnDisk: Int64? = nil, status: BuildStatus? = nil, version: String? = nil) {
            self.buildArn = buildArn
            self.buildId = buildId
            self.creationTime = creationTime
            self.name = name
            self.operatingSystem = operatingSystem
            self.sizeOnDisk = sizeOnDisk
            self.status = status
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case buildArn = "BuildArn"
            case buildId = "BuildId"
            case creationTime = "CreationTime"
            case name = "Name"
            case operatingSystem = "OperatingSystem"
            case sizeOnDisk = "SizeOnDisk"
            case status = "Status"
            case version = "Version"
        }
    }

    public struct CertificateConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// Indicates whether a TLS/SSL certificate is generated for a fleet.  Valid values include:     GENERATED - Generate a TLS/SSL certificate for this fleet.    DISABLED - (default) Do not generate a TLS/SSL certificate for this fleet.
        public let certificateType: CertificateType

        public init(certificateType: CertificateType) {
            self.certificateType = certificateType
        }

        private enum CodingKeys: String, CodingKey {
            case certificateType = "CertificateType"
        }
    }

    public struct ClaimGameServerInput: AWSEncodableShape {
        /// A set of custom game server properties, formatted as a single string value. This data  is passed to a game client or service when it requests information on game servers using ListGameServers or ClaimGameServer.
        public let gameServerData: String?
        /// A unique identifier for the game server group where the game server is running.  Use either the GameServerGroup name or ARN value. If you are not specifying a game server to claim, this value identifies where you want GameLift FleetIQ to look for an available game server to claim.
        public let gameServerGroupName: String
        /// A custom string that uniquely identifies the game server to claim. If this parameter is left empty, GameLift FleetIQ searches for an available game server in the specified game server group.
        public let gameServerId: String?

        public init(gameServerData: String? = nil, gameServerGroupName: String, gameServerId: String? = nil) {
            self.gameServerData = gameServerData
            self.gameServerGroupName = gameServerGroupName
            self.gameServerId = gameServerId
        }

        public func validate(name: String) throws {
            try self.validate(self.gameServerData, name: "gameServerData", parent: name, max: 1024)
            try self.validate(self.gameServerData, name: "gameServerData", parent: name, min: 1)
            try self.validate(self.gameServerData, name: "gameServerData", parent: name, pattern: ".*\\S.*")
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, max: 256)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, min: 1)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, pattern: "[a-zA-Z0-9-\\.]+|^arn:.*:gameservergroup\\/[a-zA-Z0-9-\\.]+")
            try self.validate(self.gameServerId, name: "gameServerId", parent: name, max: 128)
            try self.validate(self.gameServerId, name: "gameServerId", parent: name, min: 3)
            try self.validate(self.gameServerId, name: "gameServerId", parent: name, pattern: "[a-zA-Z0-9-\\.]+")
        }

        private enum CodingKeys: String, CodingKey {
            case gameServerData = "GameServerData"
            case gameServerGroupName = "GameServerGroupName"
            case gameServerId = "GameServerId"
        }
    }

    public struct ClaimGameServerOutput: AWSDecodableShape {
        /// Object that describes the newly claimed game server.
        public let gameServer: GameServer?

        public init(gameServer: GameServer? = nil) {
            self.gameServer = gameServer
        }

        private enum CodingKeys: String, CodingKey {
            case gameServer = "GameServer"
        }
    }

    public struct CreateAliasInput: AWSEncodableShape {
        /// A human-readable description of the alias.
        public let description: String?
        /// A descriptive label that is associated with an alias. Alias names do not need to be unique.
        public let name: String
        /// The routing configuration, including routing type and fleet target, for the alias.
        public let routingStrategy: RoutingStrategy
        /// A list of labels to assign to the new alias resource. Tags are developer-defined  key-value pairs. Tagging AWS resources are useful for resource management, access management and cost allocation. For more information, see  Tagging AWS Resources in the AWS General Reference. Once the resource is created, you can use TagResource, UntagResource, and  ListTagsForResource to add, remove, and view tags. The maximum tag limit may be lower than stated. See the AWS General Reference for actual  tagging limits.
        public let tags: [Tag]?

        public init(description: String? = nil, name: String, routingStrategy: RoutingStrategy, tags: [Tag]? = nil) {
            self.description = description
            self.name = name
            self.routingStrategy = routingStrategy
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 1024)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, max: 1024)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: ".*\\S.*")
            try self.routingStrategy.validate(name: "\(name).routingStrategy")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case name = "Name"
            case routingStrategy = "RoutingStrategy"
            case tags = "Tags"
        }
    }

    public struct CreateAliasOutput: AWSDecodableShape {
        /// The newly created alias resource.
        public let alias: Alias?

        public init(alias: Alias? = nil) {
            self.alias = alias
        }

        private enum CodingKeys: String, CodingKey {
            case alias = "Alias"
        }
    }

    public struct CreateBuildInput: AWSEncodableShape {
        /// A descriptive label that is associated with a build. Build names do not need to be unique. You can use UpdateBuild to change this value later.
        public let name: String?
        /// The operating system that the game server binaries are built to run on. This value determines the type of fleet resources that you can use for this build. If your game build contains multiple executables, they all must run on the same operating system. If an operating system is not specified when creating a build, Amazon GameLift uses the default value (WINDOWS_2012). This value cannot be changed later.
        public let operatingSystem: OperatingSystem?
        /// Information indicating where your game build files are stored. Use this parameter only when creating a build with files stored in an Amazon S3 bucket that you own. The storage location must specify an Amazon S3 bucket name and key. The location must also specify a role ARN that you set up to allow Amazon GameLift to access your Amazon S3 bucket. The S3 bucket and your new build must be in the same Region.
        public let storageLocation: S3Location?
        /// A list of labels to assign to the new build resource. Tags are developer-defined  key-value pairs. Tagging AWS resources are useful for resource management, access management and cost allocation. For more information, see  Tagging AWS Resources in the AWS General Reference. Once the resource is created, you can use TagResource, UntagResource, and  ListTagsForResource to add, remove, and view tags. The maximum tag limit may be lower than stated. See the AWS General Reference for actual  tagging limits.
        public let tags: [Tag]?
        /// Version information that is associated with a build or script. Version strings do not need to be unique. You can use UpdateBuild to change this value later.
        public let version: String?

        public init(name: String? = nil, operatingSystem: OperatingSystem? = nil, storageLocation: S3Location? = nil, tags: [Tag]? = nil, version: String? = nil) {
            self.name = name
            self.operatingSystem = operatingSystem
            self.storageLocation = storageLocation
            self.tags = tags
            self.version = version
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 1024)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.storageLocation?.validate(name: "\(name).storageLocation")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
            try self.validate(self.version, name: "version", parent: name, max: 1024)
            try self.validate(self.version, name: "version", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case operatingSystem = "OperatingSystem"
            case storageLocation = "StorageLocation"
            case tags = "Tags"
            case version = "Version"
        }
    }

    public struct CreateBuildOutput: AWSDecodableShape {
        /// The newly created build resource, including a unique build IDs and status.
        public let build: Build?
        /// Amazon S3 location for your game build file, including bucket name and key.
        public let storageLocation: S3Location?
        /// This element is returned only when the operation is called without a storage location. It contains credentials to use when you are uploading a build file to an Amazon S3 bucket that is owned by Amazon GameLift. Credentials have a limited life span. To refresh these credentials, call RequestUploadCredentials.
        public let uploadCredentials: AwsCredentials?

        public init(build: Build? = nil, storageLocation: S3Location? = nil, uploadCredentials: AwsCredentials? = nil) {
            self.build = build
            self.storageLocation = storageLocation
            self.uploadCredentials = uploadCredentials
        }

        private enum CodingKeys: String, CodingKey {
            case build = "Build"
            case storageLocation = "StorageLocation"
            case uploadCredentials = "UploadCredentials"
        }
    }

    public struct CreateFleetInput: AWSEncodableShape {
        /// The unique identifier for a custom game server build to be deployed on fleet instances. You can use either the build ID or ARN. The build must be uploaded to GameLift and in READY status. This fleet property cannot be changed later.
        public let buildId: String?
        /// Prompts GameLift to generate a TLS/SSL certificate for the fleet. TLS certificates are used for encrypting traffic between game clients and the game servers that are running on GameLift. By default, the CertificateConfiguration is set to DISABLED. Learn more at Securing Client/Server Communication. This property cannot be changed after the fleet is created.  Note: This feature requires the AWS Certificate Manager (ACM) service, which is not available in all AWS regions. When working in a region that does not support this feature, a fleet creation request with certificate generation fails with a 4xx error.
        public let certificateConfiguration: CertificateConfiguration?
        /// A human-readable description of the fleet.
        public let description: String?
        /// The allowed IP address ranges and port settings that allow inbound traffic to access game sessions on this fleet. If the fleet is hosting a custom game build, this property must be set before players can connect to game sessions. For Realtime Servers fleets, GameLift automatically sets TCP and UDP ranges.
        public let eC2InboundPermissions: [IpPermission]?
        /// The GameLift-supported EC2 instance type to use for all fleet instances. Instance type determines the computing resources that will be used to host your game servers, including CPU, memory, storage, and networking capacity. See Amazon EC2 Instance Types for detailed descriptions of EC2 instance types.
        public let eC2InstanceType: EC2InstanceType
        /// Indicates whether to use On-Demand or Spot instances for this fleet. By default, this property is set to ON_DEMAND. Learn more about when to use  On-Demand versus Spot Instances. This property cannot be changed after the fleet is created.
        public let fleetType: FleetType?
        /// A unique identifier for an AWS IAM role that manages access to your AWS services.  With an instance role ARN set, any application that runs on an instance in this fleet can assume the role,  including install scripts, server processes, and daemons (background processes). Create a role or look up a role's  ARN by using the IAM dashboard in the AWS Management Console. Learn more about using on-box credentials for your game servers at   Access external resources from a game server.  This property cannot be changed after the fleet is created.
        public let instanceRoleArn: String?
        /// A set of remote locations to deploy additional instances to and manage as part of the fleet. This parameter can only be used when creating fleets in AWS Regions that support multiple locations. You can add any GameLift-supported AWS Region as a remote location, in the form of an AWS Region code such as us-west-2. To create a fleet with instances in the home Region only, omit this parameter.
        public let locations: [LocationConfiguration]?
        ///  This parameter is no longer used. To specify where GameLift should store log files once a server process shuts down, use the GameLift server API ProcessReady() and specify one or more directory paths in logParameters. See more information in the Server API Reference.
        public let logPaths: [String]?
        /// The name of an AWS CloudWatch metric group to add this fleet to. A metric group is used to aggregate the metrics for multiple fleets. You can specify an existing metric group name or set a new name to create a new metric group. A fleet can be included in only one metric group at a time.
        public let metricGroups: [String]?
        /// A descriptive label that is associated with a fleet. Fleet names do not need to be unique.
        public let name: String
        /// The status of termination protection for active game sessions on the fleet. By default, this property is set to NoProtection. You can also set game session protection for an individual game session by calling UpdateGameSession.    NoProtection - Game sessions can be terminated during active gameplay as a result of a scale-down event.     FullProtection - Game sessions in ACTIVE status cannot be terminated during a scale-down event.
        public let newGameSessionProtectionPolicy: ProtectionPolicy?
        /// Used when peering your GameLift fleet with a VPC, the unique identifier for the AWS account that owns the VPC. You can find your account ID in the AWS Management Console under account settings.
        public let peerVpcAwsAccountId: String?
        /// A unique identifier for a VPC with resources to be accessed by your GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the  VPC Dashboard in the AWS Management Console.  Learn more about VPC peering in VPC Peering with GameLift Fleets.
        public let peerVpcId: String?
        /// A policy that limits the number of game sessions that an individual player can create on instances in this fleet within a specified span of time.
        public let resourceCreationLimitPolicy: ResourceCreationLimitPolicy?
        /// Instructions for how to launch and maintain server processes on instances in the fleet. The runtime configuration defines one or more server process configurations, each identifying a build executable or Realtime script file and the number of processes of that type to run concurrently.   The RuntimeConfiguration parameter is required unless the fleet is being configured using the older parameters ServerLaunchPath and ServerLaunchParameters, which are still supported for backward compatibility.
        public let runtimeConfiguration: RuntimeConfiguration?
        /// The unique identifier for a Realtime configuration script to be deployed on fleet instances. You can use either the script ID or ARN. Scripts must be uploaded to GameLift prior to creating the fleet. This fleet property cannot be changed later.
        public let scriptId: String?
        ///  This parameter is no longer used. Specify server launch parameters using the RuntimeConfiguration parameter. Requests that use this parameter instead continue to be valid.
        public let serverLaunchParameters: String?
        ///  This parameter is no longer used. Specify a server launch path using the RuntimeConfiguration parameter. Requests that use this parameter instead continue to be valid.
        public let serverLaunchPath: String?
        /// A list of labels to assign to the new fleet resource. Tags are developer-defined key-value pairs. Tagging AWS resources are useful for resource management, access management and cost allocation. For more information, see  Tagging AWS Resources in the AWS General Reference. Once the fleet is created, you can use TagResource, UntagResource, and ListTagsForResource to add, remove, and view tags. The maximum tag limit may be lower than stated. See the AWS General Reference for actual tagging limits.
        public let tags: [Tag]?

        public init(buildId: String? = nil, certificateConfiguration: CertificateConfiguration? = nil, description: String? = nil, eC2InboundPermissions: [IpPermission]? = nil, eC2InstanceType: EC2InstanceType, fleetType: FleetType? = nil, instanceRoleArn: String? = nil, locations: [LocationConfiguration]? = nil, logPaths: [String]? = nil, metricGroups: [String]? = nil, name: String, newGameSessionProtectionPolicy: ProtectionPolicy? = nil, peerVpcAwsAccountId: String? = nil, peerVpcId: String? = nil, resourceCreationLimitPolicy: ResourceCreationLimitPolicy? = nil, runtimeConfiguration: RuntimeConfiguration? = nil, scriptId: String? = nil, serverLaunchParameters: String? = nil, serverLaunchPath: String? = nil, tags: [Tag]? = nil) {
            self.buildId = buildId
            self.certificateConfiguration = certificateConfiguration
            self.description = description
            self.eC2InboundPermissions = eC2InboundPermissions
            self.eC2InstanceType = eC2InstanceType
            self.fleetType = fleetType
            self.instanceRoleArn = instanceRoleArn
            self.locations = locations
            self.logPaths = logPaths
            self.metricGroups = metricGroups
            self.name = name
            self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
            self.peerVpcAwsAccountId = peerVpcAwsAccountId
            self.peerVpcId = peerVpcId
            self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
            self.runtimeConfiguration = runtimeConfiguration
            self.scriptId = scriptId
            self.serverLaunchParameters = serverLaunchParameters
            self.serverLaunchPath = serverLaunchPath
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.buildId, name: "buildId", parent: name, pattern: "^build-\\S+|^arn:.*:build\\/build-\\S+")
            try self.validate(self.description, name: "description", parent: name, max: 1024)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.eC2InboundPermissions?.forEach {
                try $0.validate(name: "\(name).eC2InboundPermissions[]")
            }
            try self.validate(self.eC2InboundPermissions, name: "eC2InboundPermissions", parent: name, max: 50)
            try self.validate(self.instanceRoleArn, name: "instanceRoleArn", parent: name, min: 1)
            try self.locations?.forEach {
                try $0.validate(name: "\(name).locations[]")
            }
            try self.validate(self.locations, name: "locations", parent: name, max: 100)
            try self.validate(self.locations, name: "locations", parent: name, min: 1)
            try self.logPaths?.forEach {
                try validate($0, name: "logPaths[]", parent: name, max: 1024)
                try validate($0, name: "logPaths[]", parent: name, min: 1)
            }
            try self.metricGroups?.forEach {
                try validate($0, name: "metricGroups[]", parent: name, max: 255)
                try validate($0, name: "metricGroups[]", parent: name, min: 1)
            }
            try self.validate(self.metricGroups, name: "metricGroups", parent: name, max: 1)
            try self.validate(self.name, name: "name", parent: name, max: 1024)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.peerVpcAwsAccountId, name: "peerVpcAwsAccountId", parent: name, max: 1024)
            try self.validate(self.peerVpcAwsAccountId, name: "peerVpcAwsAccountId", parent: name, min: 1)
            try self.validate(self.peerVpcId, name: "peerVpcId", parent: name, max: 1024)
            try self.validate(self.peerVpcId, name: "peerVpcId", parent: name, min: 1)
            try self.resourceCreationLimitPolicy?.validate(name: "\(name).resourceCreationLimitPolicy")
            try self.runtimeConfiguration?.validate(name: "\(name).runtimeConfiguration")
            try self.validate(self.scriptId, name: "scriptId", parent: name, pattern: "^script-\\S+|^arn:.*:script\\/script-\\S+")
            try self.validate(self.serverLaunchParameters, name: "serverLaunchParameters", parent: name, max: 1024)
            try self.validate(self.serverLaunchParameters, name: "serverLaunchParameters", parent: name, min: 1)
            try self.validate(self.serverLaunchPath, name: "serverLaunchPath", parent: name, max: 1024)
            try self.validate(self.serverLaunchPath, name: "serverLaunchPath", parent: name, min: 1)
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
        }

        private enum CodingKeys: String, CodingKey {
            case buildId = "BuildId"
            case certificateConfiguration = "CertificateConfiguration"
            case description = "Description"
            case eC2InboundPermissions = "EC2InboundPermissions"
            case eC2InstanceType = "EC2InstanceType"
            case fleetType = "FleetType"
            case instanceRoleArn = "InstanceRoleArn"
            case locations = "Locations"
            case logPaths = "LogPaths"
            case metricGroups = "MetricGroups"
            case name = "Name"
            case newGameSessionProtectionPolicy = "NewGameSessionProtectionPolicy"
            case peerVpcAwsAccountId = "PeerVpcAwsAccountId"
            case peerVpcId = "PeerVpcId"
            case resourceCreationLimitPolicy = "ResourceCreationLimitPolicy"
            case runtimeConfiguration = "RuntimeConfiguration"
            case scriptId = "ScriptId"
            case serverLaunchParameters = "ServerLaunchParameters"
            case serverLaunchPath = "ServerLaunchPath"
            case tags = "Tags"
        }
    }

    public struct CreateFleetLocationsInput: AWSEncodableShape {
        /// A unique identifier for the fleet to add locations to. You can use either the fleet ID or ARN value.
        public let fleetId: String
        /// A list of locations to deploy additional instances to and manage as part of the fleet. You can add any GameLift-supported AWS Region as a remote location, in the form of an AWS Region code such as us-west-2.
        public let locations: [LocationConfiguration]

        public init(fleetId: String, locations: [LocationConfiguration]) {
            self.fleetId = fleetId
            self.locations = locations
        }

        public func validate(name: String) throws {
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            try self.locations.forEach {
                try $0.validate(name: "\(name).locations[]")
            }
            try self.validate(self.locations, name: "locations", parent: name, max: 100)
            try self.validate(self.locations, name: "locations", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case locations = "Locations"
        }
    }

    public struct CreateFleetLocationsOutput: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
        public let fleetArn: String?
        /// A unique identifier for the fleet that was updated with new locations.
        public let fleetId: String?
        /// The remote locations that are being added to the fleet, and the life-cycle status of each location.  For new locations, the status is set to NEW. During location creation, GameLift updates each location's status as instances  are deployed there and prepared for game hosting. This list does not include the fleet home Region or any remote locations that were already  added to the fleet.
        public let locationStates: [LocationState]?

        public init(fleetArn: String? = nil, fleetId: String? = nil, locationStates: [LocationState]? = nil) {
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.locationStates = locationStates
        }

        private enum CodingKeys: String, CodingKey {
            case fleetArn = "FleetArn"
            case fleetId = "FleetId"
            case locationStates = "LocationStates"
        }
    }

    public struct CreateFleetOutput: AWSDecodableShape {
        /// The properties for the new fleet, including the current status. All fleets are placed in NEW status on creation.
        public let fleetAttributes: FleetAttributes?
        /// The fleet's locations and life-cycle status of each location. For new fleets, the status of all locations is set to NEW. During fleet creation, GameLift updates each location status as instances are deployed there and prepared for game hosting. This list includes an entry for the fleet's home Region. For fleets with no remote locations, only one entry, representing the home Region, is returned.
        public let locationStates: [LocationState]?

        public init(fleetAttributes: FleetAttributes? = nil, locationStates: [LocationState]? = nil) {
            self.fleetAttributes = fleetAttributes
            self.locationStates = locationStates
        }

        private enum CodingKeys: String, CodingKey {
            case fleetAttributes = "FleetAttributes"
            case locationStates = "LocationStates"
        }
    }

    public struct CreateGameServerGroupInput: AWSEncodableShape {
        /// Configuration settings to define a scaling policy for the Auto Scaling group that is optimized for game hosting. The scaling policy uses the metric "PercentUtilizedGameServers" to maintain a buffer of idle game servers that can immediately accommodate new games and players. After the Auto Scaling group is created, update this value directly in the Auto Scaling group using the AWS console or APIs.
        public let autoScalingPolicy: GameServerGroupAutoScalingPolicy?
        /// Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances in the game server group. Method options include the following:    SPOT_ONLY - Only Spot Instances are used in the game server group. If Spot Instances are unavailable or not viable for game hosting, the game server group provides no hosting capacity until Spot Instances can again be used. Until then, no new instances are started, and the existing nonviable Spot Instances are terminated (after current gameplay ends) and are not replaced.    SPOT_PREFERRED - (default value) Spot Instances are used whenever available in the game server group. If Spot Instances are unavailable, the game server group continues to provide hosting capacity by falling back to On-Demand Instances. Existing nonviable Spot Instances are terminated (after current gameplay ends) and are replaced with new On-Demand Instances.    ON_DEMAND_ONLY - Only On-Demand Instances are used in the game server group. No Spot Instances are used, even when available, while this balancing strategy is in force.
        public let balancingStrategy: BalancingStrategy?
        /// An identifier for the new game server group. This value is used to generate unique ARN identifiers for the EC2 Auto Scaling group and the GameLift FleetIQ game server group. The name must be unique per Region per AWS account.
        public let gameServerGroupName: String
        /// A flag that indicates whether instances in the game server group are protected  from early termination. Unprotected instances that have active game servers running might  be terminated during a scale-down event, causing players to be dropped from the game.  Protected instances cannot be terminated while there are active game servers running except  in the event of a forced game server group deletion (see ). An exception to this is with Spot  Instances, which can be terminated by AWS regardless of protection status. This property is set to NO_PROTECTION by default.
        public let gameServerProtectionPolicy: GameServerProtectionPolicy?
        /// The EC2 instance types and sizes to use in the Auto Scaling group. The instance definitions must specify at least two different instance types that are supported by GameLift FleetIQ. For more information on instance types, see EC2 Instance Types in the Amazon EC2 User Guide. You can optionally specify capacity weighting for each instance type. If no weight value is specified for an instance type, it is set to the default value "1". For more information about capacity weighting, see Instance Weighting for Amazon EC2 Auto Scaling in the Amazon EC2 Auto Scaling User Guide.
        public let instanceDefinitions: [InstanceDefinition]
        /// The EC2 launch template that contains configuration settings and game server code to be deployed to all instances in the game server group. You can specify the template using either the template name or ID. For help with creating a launch template, see Creating a Launch Template for an Auto Scaling Group in the Amazon EC2 Auto Scaling User Guide. After the Auto Scaling group is created, update this value directly in the Auto Scaling group using the AWS console or APIs.  If you specify network interfaces in your launch template, you must explicitly set the property AssociatePublicIpAddress to "true". If no network interface is specified in the launch template,  GameLift FleetIQ uses your account's default VPC.
        public let launchTemplate: LaunchTemplateSpecification
        /// The maximum number of instances allowed in the EC2 Auto Scaling group. During automatic scaling events, GameLift FleetIQ and EC2 do not scale up the group above this maximum. After the Auto Scaling group is created, update this value directly in the Auto Scaling group using the AWS console or APIs.
        public let maxSize: Int
        /// The minimum number of instances allowed in the EC2 Auto Scaling group. During automatic scaling events, GameLift FleetIQ and EC2 do not scale down the group below this minimum. In production, this value should be set to at least 1. After the Auto Scaling group is created, update this value directly in the Auto Scaling group using the AWS console or APIs.
        public let minSize: Int
        /// The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
        public let roleArn: String
        /// A list of labels to assign to the new game server group resource. Tags are developer-defined key-value pairs. Tagging AWS resources is useful for resource management, access management, and cost allocation. For more information, see  Tagging AWS Resources in the AWS General Reference. Once the resource is created, you can use TagResource, UntagResource, and ListTagsForResource to add, remove, and view tags, respectively. The maximum tag limit may be lower than stated. See the AWS General Reference for actual tagging limits.
        public let tags: [Tag]?
        /// A list of virtual private cloud (VPC) subnets to use with instances in the game server group. By default, all GameLift FleetIQ-supported Availability Zones are used. You can use this parameter to specify VPCs that you've set up. This property cannot be updated after the game server group is created, and the corresponding Auto Scaling group will always use the property value that is set with this request, even if the Auto Scaling group is updated directly.
        public let vpcSubnets: [String]?

        public init(autoScalingPolicy: GameServerGroupAutoScalingPolicy? = nil, balancingStrategy: BalancingStrategy? = nil, gameServerGroupName: String, gameServerProtectionPolicy: GameServerProtectionPolicy? = nil, instanceDefinitions: [InstanceDefinition], launchTemplate: LaunchTemplateSpecification, maxSize: Int, minSize: Int, roleArn: String, tags: [Tag]? = nil, vpcSubnets: [String]? = nil) {
            self.autoScalingPolicy = autoScalingPolicy
            self.balancingStrategy = balancingStrategy
            self.gameServerGroupName = gameServerGroupName
            self.gameServerProtectionPolicy = gameServerProtectionPolicy
            self.instanceDefinitions = instanceDefinitions
            self.launchTemplate = launchTemplate
            self.maxSize = maxSize
            self.minSize = minSize
            self.roleArn = roleArn
            self.tags = tags
            self.vpcSubnets = vpcSubnets
        }

        public func validate(name: String) throws {
            try self.autoScalingPolicy?.validate(name: "\(name).autoScalingPolicy")
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, max: 128)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, min: 1)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, pattern: "[a-zA-Z0-9-\\.]+")
            try self.instanceDefinitions.forEach {
                try $0.validate(name: "\(name).instanceDefinitions[]")
            }
            try self.validate(self.instanceDefinitions, name: "instanceDefinitions", parent: name, max: 20)
            try self.validate(self.instanceDefinitions, name: "instanceDefinitions", parent: name, min: 2)
            try self.launchTemplate.validate(name: "\(name).launchTemplate")
            try self.validate(self.maxSize, name: "maxSize", parent: name, min: 1)
            try self.validate(self.minSize, name: "minSize", parent: name, min: 0)
            try self.validate(self.roleArn, name: "roleArn", parent: name, max: 256)
            try self.validate(self.roleArn, name: "roleArn", parent: name, min: 1)
            try self.validate(self.roleArn, name: "roleArn", parent: name, pattern: "^arn:.*:role\\/[\\w+=,.@-]+")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
            try self.vpcSubnets?.forEach {
                try validate($0, name: "vpcSubnets[]", parent: name, max: 24)
                try validate($0, name: "vpcSubnets[]", parent: name, min: 15)
                try validate($0, name: "vpcSubnets[]", parent: name, pattern: "^subnet-[0-9a-z]+$")
            }
            try self.validate(self.vpcSubnets, name: "vpcSubnets", parent: name, max: 20)
            try self.validate(self.vpcSubnets, name: "vpcSubnets", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingPolicy = "AutoScalingPolicy"
            case balancingStrategy = "BalancingStrategy"
            case gameServerGroupName = "GameServerGroupName"
            case gameServerProtectionPolicy = "GameServerProtectionPolicy"
            case instanceDefinitions = "InstanceDefinitions"
            case launchTemplate = "LaunchTemplate"
            case maxSize = "MaxSize"
            case minSize = "MinSize"
            case roleArn = "RoleArn"
            case tags = "Tags"
            case vpcSubnets = "VpcSubnets"
        }
    }

    public struct CreateGameServerGroupOutput: AWSDecodableShape {
        /// The newly created game server group object, including the new ARN value for the GameLift FleetIQ game server group and the object's status. The EC2 Auto Scaling group ARN is initially null, since the group has not yet been created. This value is added once the game server group status reaches ACTIVE.
        public let gameServerGroup: GameServerGroup?

        public init(gameServerGroup: GameServerGroup? = nil) {
            self.gameServerGroup = gameServerGroup
        }

        private enum CodingKeys: String, CodingKey {
            case gameServerGroup = "GameServerGroup"
        }
    }

    public struct CreateGameSessionInput: AWSEncodableShape {
        /// A unique identifier for the alias associated with the fleet to create a game session in. You can use either the alias ID or ARN value. Each request must reference either a fleet ID or alias ID, but not both.
        public let aliasId: String?
        /// A unique identifier for a player or entity creating the game session. This parameter is required when requesting a new game session on a fleet with a resource creation limit policy. This type of policy limits the number of concurrent active game sessions that one player can create within a certain time span. GameLift uses the CreatorId to evaluate the new request against the policy.
        public let creatorId: String?
        /// A unique identifier for the fleet to create a game session in. You can use either the fleet ID or ARN value. Each request must reference either a fleet ID or alias ID, but not both.
        public let fleetId: String?
        /// A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the  GameSession object with a request to start a new game session.
        public let gameProperties: [GameProperty]?
        /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the  GameSession object with a request to start a new game session.
        public let gameSessionData: String?
        ///  This parameter is no longer preferred. Please use IdempotencyToken instead. Custom string that uniquely identifies a request for a new game session. Maximum token length is 48 characters. If provided, this string is included in the new game session's ID.
        public let gameSessionId: String?
        /// Custom string that uniquely identifies the new game session request.  This is useful for ensuring that game session requests with the same idempotency token are processed only once. Subsequent requests with the same string return the original GameSession object, with an updated status. Maximum token length is 48 characters. If provided, this string is included in the new game session's ID. A game session ARN has the following format:  arn:aws:gamelift:::gamesession//. Idempotency tokens remain in use for 30 days after a game session has ended; game session objects are retained for this time period and then deleted.
        public let idempotencyToken: String?
        /// A fleet's remote location to place the new game session in. If this parameter is not set, the new game session is placed in the fleet's home Region. Specify a remote location with an AWS Region code such as us-west-2.
        public let location: String?
        /// The maximum number of players that can be connected simultaneously to the game session.
        public let maximumPlayerSessionCount: Int
        /// A descriptive label that is associated with a game session. Session names do not need to be unique.
        public let name: String?

        public init(aliasId: String? = nil, creatorId: String? = nil, fleetId: String? = nil, gameProperties: [GameProperty]? = nil, gameSessionData: String? = nil, gameSessionId: String? = nil, idempotencyToken: String? = nil, location: String? = nil, maximumPlayerSessionCount: Int, name: String? = nil) {
            self.aliasId = aliasId
            self.creatorId = creatorId
            self.fleetId = fleetId
            self.gameProperties = gameProperties
            self.gameSessionData = gameSessionData
            self.gameSessionId = gameSessionId
            self.idempotencyToken = idempotencyToken
            self.location = location
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.aliasId, name: "aliasId", parent: name, pattern: "^alias-\\S+|^arn:.*:alias\\/alias-\\S+")
            try self.validate(self.creatorId, name: "creatorId", parent: name, max: 1024)
            try self.validate(self.creatorId, name: "creatorId", parent: name, min: 1)
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            try self.gameProperties?.forEach {
                try $0.validate(name: "\(name).gameProperties[]")
            }
            try self.validate(self.gameProperties, name: "gameProperties", parent: name, max: 16)
            try self.validate(self.gameSessionData, name: "gameSessionData", parent: name, max: 262_144)
            try self.validate(self.gameSessionData, name: "gameSessionData", parent: name, min: 1)
            try self.validate(self.gameSessionId, name: "gameSessionId", parent: name, max: 48)
            try self.validate(self.gameSessionId, name: "gameSessionId", parent: name, min: 1)
            try self.validate(self.gameSessionId, name: "gameSessionId", parent: name, pattern: "[a-zA-Z0-9-]+")
            try self.validate(self.idempotencyToken, name: "idempotencyToken", parent: name, max: 48)
            try self.validate(self.idempotencyToken, name: "idempotencyToken", parent: name, min: 1)
            try self.validate(self.idempotencyToken, name: "idempotencyToken", parent: name, pattern: "[a-zA-Z0-9-]+")
            try self.validate(self.location, name: "location", parent: name, max: 64)
            try self.validate(self.location, name: "location", parent: name, min: 1)
            try self.validate(self.location, name: "location", parent: name, pattern: "^[a-z]+(-([a-z]+|\\d))*")
            try self.validate(self.maximumPlayerSessionCount, name: "maximumPlayerSessionCount", parent: name, min: 0)
            try self.validate(self.name, name: "name", parent: name, max: 1024)
            try self.validate(self.name, name: "name", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case aliasId = "AliasId"
            case creatorId = "CreatorId"
            case fleetId = "FleetId"
            case gameProperties = "GameProperties"
            case gameSessionData = "GameSessionData"
            case gameSessionId = "GameSessionId"
            case idempotencyToken = "IdempotencyToken"
            case location = "Location"
            case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
            case name = "Name"
        }
    }

    public struct CreateGameSessionOutput: AWSDecodableShape {
        /// Object that describes the newly created game session record.
        public let gameSession: GameSession?

        public init(gameSession: GameSession? = nil) {
            self.gameSession = gameSession
        }

        private enum CodingKeys: String, CodingKey {
            case gameSession = "GameSession"
        }
    }

    public struct CreateGameSessionQueueInput: AWSEncodableShape {
        ///  Information to be added to all events that are related to this game session queue.
        public let customEventData: String?
        /// A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue.  Destinations are identified by either a fleet ARN or a fleet alias ARN, and are listed in order of placement preference.
        public let destinations: [GameSessionQueueDestination]?
        /// A list of locations where a queue is allowed to place new game sessions. Locations  are specified in the form of AWS Region codes, such as us-west-2. If this parameter is  not set, game sessions can be placed in any queue location.
        public let filterConfiguration: FilterConfiguration?
        /// A descriptive label that is associated with game session queue. Queue names must be unique within each Region.
        public let name: String
        /// An SNS topic ARN that is set up to receive game session placement notifications. See  Setting up notifications for game session placement.
        public let notificationTarget: String?
        /// A set of policies that act as a sliding cap on player latency. FleetIQ works to deliver low latency for most players in a game session. These policies ensure that no individual player can be placed into a game with unreasonably high latency. Use multiple policies to gradually relax latency requirements a step at a time. Multiple policies are applied based on their maximum allowed latency, starting with the lowest value.
        public let playerLatencyPolicies: [PlayerLatencyPolicy]?
        /// Custom settings to use when prioritizing destinations and locations for game session placements. This  configuration replaces the FleetIQ default prioritization process. Priority types that are not explicitly  named will be automatically applied at the end of the prioritization process.
        public let priorityConfiguration: PriorityConfiguration?
        /// A list of labels to assign to the new game session queue resource. Tags are developer-defined  key-value pairs. Tagging AWS resources are useful for resource management, access management and cost allocation. For more information, see  Tagging AWS Resources in the AWS General Reference. Once the resource is created, you can use TagResource, UntagResource, and  ListTagsForResource to add, remove, and view tags. The maximum tag limit may be lower than stated. See the AWS General Reference for actual  tagging limits.
        public let tags: [Tag]?
        /// The maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a TIMED_OUT status.
        public let timeoutInSeconds: Int?

        public init(customEventData: String? = nil, destinations: [GameSessionQueueDestination]? = nil, filterConfiguration: FilterConfiguration? = nil, name: String, notificationTarget: String? = nil, playerLatencyPolicies: [PlayerLatencyPolicy]? = nil, priorityConfiguration: PriorityConfiguration? = nil, tags: [Tag]? = nil, timeoutInSeconds: Int? = nil) {
            self.customEventData = customEventData
            self.destinations = destinations
            self.filterConfiguration = filterConfiguration
            self.name = name
            self.notificationTarget = notificationTarget
            self.playerLatencyPolicies = playerLatencyPolicies
            self.priorityConfiguration = priorityConfiguration
            self.tags = tags
            self.timeoutInSeconds = timeoutInSeconds
        }

        public func validate(name: String) throws {
            try self.validate(self.customEventData, name: "customEventData", parent: name, max: 256)
            try self.validate(self.customEventData, name: "customEventData", parent: name, pattern: "[\\s\\S]*")
            try self.destinations?.forEach {
                try $0.validate(name: "\(name).destinations[]")
            }
            try self.filterConfiguration?.validate(name: "\(name).filterConfiguration")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "[a-zA-Z0-9-]+")
            try self.validate(self.notificationTarget, name: "notificationTarget", parent: name, max: 300)
            try self.validate(self.notificationTarget, name: "notificationTarget", parent: name, pattern: "[a-zA-Z0-9:_-]*(\\.fifo)?")
            try self.playerLatencyPolicies?.forEach {
                try $0.validate(name: "\(name).playerLatencyPolicies[]")
            }
            try self.priorityConfiguration?.validate(name: "\(name).priorityConfiguration")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
            try self.validate(self.timeoutInSeconds, name: "timeoutInSeconds", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case customEventData = "CustomEventData"
            case destinations = "Destinations"
            case filterConfiguration = "FilterConfiguration"
            case name = "Name"
            case notificationTarget = "NotificationTarget"
            case playerLatencyPolicies = "PlayerLatencyPolicies"
            case priorityConfiguration = "PriorityConfiguration"
            case tags = "Tags"
            case timeoutInSeconds = "TimeoutInSeconds"
        }
    }

    public struct CreateGameSessionQueueOutput: AWSDecodableShape {
        /// An object that describes the newly created game session queue.
        public let gameSessionQueue: GameSessionQueue?

        public init(gameSessionQueue: GameSessionQueue? = nil) {
            self.gameSessionQueue = gameSessionQueue
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionQueue = "GameSessionQueue"
        }
    }

    public struct CreateMatchmakingConfigurationInput: AWSEncodableShape {
        /// A flag that determines whether a match that was created with this configuration must be accepted by the matched players. To require acceptance, set to TRUE. With this option enabled, matchmaking tickets use the status REQUIRES_ACCEPTANCE to indicate when a completed potential match is waiting for player acceptance.
        public let acceptanceRequired: Bool
        /// The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
        public let acceptanceTimeoutSeconds: Int?
        /// The number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies  a match for a single 12-person team, and the additional player count is set to 2, only 10 players are selected for the match. This parameter is not used if FlexMatchMode is set to STANDALONE.
        public let additionalPlayerCount: Int?
        /// The method used to backfill game sessions that are created with this matchmaking configuration. Specify MANUAL when your game manages backfill requests manually or does not use the match backfill feature. Specify AUTOMATIC to have GameLift create a StartMatchBackfill request whenever a game session has one or more open slots. Learn more about manual and automatic backfill in Backfill Existing Games with FlexMatch. Automatic backfill is not available when FlexMatchMode is set to STANDALONE.
        public let backfillMode: BackfillMode?
        /// Information to be added to all events related to this matchmaking configuration.
        public let customEventData: String?
        /// A human-readable description of the matchmaking configuration.
        public let description: String?
        /// Indicates whether this matchmaking configuration is being used with GameLift hosting or as a standalone matchmaking solution.     STANDALONE - FlexMatch forms matches and returns match information, including players and team assignments, in a   MatchmakingSucceeded event.    WITH_QUEUE - FlexMatch forms matches and uses the specified GameLift queue to start a game session for the match.
        public let flexMatchMode: FlexMatchMode?
        /// A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the  GameSession object with a request to start a new game session (see Start a Game Session). This information is added to the new GameSession object that is created for a successful match. This parameter is not used if FlexMatchMode is set to STANDALONE.
        public let gameProperties: [GameProperty]?
        /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the  GameSession object with a request to start a new game session (see Start a Game Session). This information is added to the new GameSession object that is created for a successful match. This parameter is not used if FlexMatchMode is set to STANDALONE.
        public let gameSessionData: String?
        /// The Amazon Resource Name (ARN) that is assigned to a GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::gamesessionqueue/. Queues can be located in any Region. Queues are used to start new GameLift-hosted game sessions for matches that are created with this matchmaking configuration. If FlexMatchMode is set to STANDALONE, do not set this parameter.
        public let gameSessionQueueArns: [String]?
        /// A unique identifier for the matchmaking configuration. This name is used to identify the configuration associated with a matchmaking request or ticket.
        public let name: String
        /// An SNS topic ARN that is set up to receive matchmaking notifications. See  Setting up notifications for matchmaking for more information.
        public let notificationTarget: String?
        /// The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out. Requests that fail due to timing out can be resubmitted as needed.
        public let requestTimeoutSeconds: Int
        /// A unique identifier for the matchmaking rule set to use with this configuration. You can use either the rule set name or ARN value. A matchmaking configuration can only use rule sets that are defined in the same Region.
        public let ruleSetName: String
        /// A list of labels to assign to the new matchmaking configuration resource. Tags are developer-defined  key-value pairs. Tagging AWS resources are useful for resource management, access management and cost allocation. For more information, see  Tagging AWS Resources in the AWS General Reference. Once the resource is created, you can use TagResource, UntagResource, and  ListTagsForResource to add, remove, and view tags. The maximum tag limit may be lower than stated. See the AWS General Reference for actual  tagging limits.
        public let tags: [Tag]?

        public init(acceptanceRequired: Bool, acceptanceTimeoutSeconds: Int? = nil, additionalPlayerCount: Int? = nil, backfillMode: BackfillMode? = nil, customEventData: String? = nil, description: String? = nil, flexMatchMode: FlexMatchMode? = nil, gameProperties: [GameProperty]? = nil, gameSessionData: String? = nil, gameSessionQueueArns: [String]? = nil, name: String, notificationTarget: String? = nil, requestTimeoutSeconds: Int, ruleSetName: String, tags: [Tag]? = nil) {
            self.acceptanceRequired = acceptanceRequired
            self.acceptanceTimeoutSeconds = acceptanceTimeoutSeconds
            self.additionalPlayerCount = additionalPlayerCount
            self.backfillMode = backfillMode
            self.customEventData = customEventData
            self.description = description
            self.flexMatchMode = flexMatchMode
            self.gameProperties = gameProperties
            self.gameSessionData = gameSessionData
            self.gameSessionQueueArns = gameSessionQueueArns
            self.name = name
            self.notificationTarget = notificationTarget
            self.requestTimeoutSeconds = requestTimeoutSeconds
            self.ruleSetName = ruleSetName
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.acceptanceTimeoutSeconds, name: "acceptanceTimeoutSeconds", parent: name, max: 600)
            try self.validate(self.acceptanceTimeoutSeconds, name: "acceptanceTimeoutSeconds", parent: name, min: 1)
            try self.validate(self.additionalPlayerCount, name: "additionalPlayerCount", parent: name, min: 0)
            try self.validate(self.customEventData, name: "customEventData", parent: name, max: 256)
            try self.validate(self.description, name: "description", parent: name, max: 1024)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.gameProperties?.forEach {
                try $0.validate(name: "\(name).gameProperties[]")
            }
            try self.validate(self.gameProperties, name: "gameProperties", parent: name, max: 16)
            try self.validate(self.gameSessionData, name: "gameSessionData", parent: name, max: 4096)
            try self.validate(self.gameSessionData, name: "gameSessionData", parent: name, min: 1)
            try self.gameSessionQueueArns?.forEach {
                try validate($0, name: "gameSessionQueueArns[]", parent: name, max: 256)
                try validate($0, name: "gameSessionQueueArns[]", parent: name, min: 1)
                try validate($0, name: "gameSessionQueueArns[]", parent: name, pattern: "[a-zA-Z0-9:/-]+")
            }
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, pattern: "[a-zA-Z0-9-\\.]*")
            try self.validate(self.notificationTarget, name: "notificationTarget", parent: name, max: 300)
            try self.validate(self.notificationTarget, name: "notificationTarget", parent: name, pattern: "[a-zA-Z0-9:_/-]*(.fifo)?")
            try self.validate(self.requestTimeoutSeconds, name: "requestTimeoutSeconds", parent: name, max: 43200)
            try self.validate(self.requestTimeoutSeconds, name: "requestTimeoutSeconds", parent: name, min: 1)
            try self.validate(self.ruleSetName, name: "ruleSetName", parent: name, max: 256)
            try self.validate(self.ruleSetName, name: "ruleSetName", parent: name, min: 1)
            try self.validate(self.ruleSetName, name: "ruleSetName", parent: name, pattern: "[a-zA-Z0-9-\\.]*|^arn:.*:matchmakingruleset\\/[a-zA-Z0-9-\\.]*")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
        }

        private enum CodingKeys: String, CodingKey {
            case acceptanceRequired = "AcceptanceRequired"
            case acceptanceTimeoutSeconds = "AcceptanceTimeoutSeconds"
            case additionalPlayerCount = "AdditionalPlayerCount"
            case backfillMode = "BackfillMode"
            case customEventData = "CustomEventData"
            case description = "Description"
            case flexMatchMode = "FlexMatchMode"
            case gameProperties = "GameProperties"
            case gameSessionData = "GameSessionData"
            case gameSessionQueueArns = "GameSessionQueueArns"
            case name = "Name"
            case notificationTarget = "NotificationTarget"
            case requestTimeoutSeconds = "RequestTimeoutSeconds"
            case ruleSetName = "RuleSetName"
            case tags = "Tags"
        }
    }

    public struct CreateMatchmakingConfigurationOutput: AWSDecodableShape {
        /// Object that describes the newly created matchmaking configuration.
        public let configuration: MatchmakingConfiguration?

        public init(configuration: MatchmakingConfiguration? = nil) {
            self.configuration = configuration
        }

        private enum CodingKeys: String, CodingKey {
            case configuration = "Configuration"
        }
    }

    public struct CreateMatchmakingRuleSetInput: AWSEncodableShape {
        /// A unique identifier for the matchmaking rule set. A matchmaking configuration identifies the rule set it uses by this name value. Note that the rule set name is different from the optional name field in the rule set body.
        public let name: String
        /// A collection of matchmaking rules, formatted as a JSON string. Comments are not allowed in JSON, but most elements support a description field.
        public let ruleSetBody: String
        /// A list of labels to assign to the new matchmaking rule set resource. Tags are developer-defined  key-value pairs. Tagging AWS resources are useful for resource management, access management and cost allocation. For more information, see  Tagging AWS Resources in the AWS General Reference. Once the resource is created, you can use TagResource, UntagResource, and  ListTagsForResource to add, remove, and view tags. The maximum tag limit may be lower than stated. See the AWS General Reference for actual  tagging limits.
        public let tags: [Tag]?

        public init(name: String, ruleSetBody: String, tags: [Tag]? = nil) {
            self.name = name
            self.ruleSetBody = ruleSetBody
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, pattern: "[a-zA-Z0-9-\\.]*")
            try self.validate(self.ruleSetBody, name: "ruleSetBody", parent: name, max: 65535)
            try self.validate(self.ruleSetBody, name: "ruleSetBody", parent: name, min: 1)
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case ruleSetBody = "RuleSetBody"
            case tags = "Tags"
        }
    }

    public struct CreateMatchmakingRuleSetOutput: AWSDecodableShape {
        /// The newly created matchmaking rule set.
        public let ruleSet: MatchmakingRuleSet

        public init(ruleSet: MatchmakingRuleSet) {
            self.ruleSet = ruleSet
        }

        private enum CodingKeys: String, CodingKey {
            case ruleSet = "RuleSet"
        }
    }

    public struct CreatePlayerSessionInput: AWSEncodableShape {
        /// A unique identifier for the game session to add a player to.
        public let gameSessionId: String
        /// Developer-defined information related to a player. GameLift does not use this data, so it can be formatted as needed for use in the game.
        public let playerData: String?
        /// A unique identifier for a player. Player IDs are developer-defined.
        public let playerId: String

        public init(gameSessionId: String, playerData: String? = nil, playerId: String) {
            self.gameSessionId = gameSessionId
            self.playerData = playerData
            self.playerId = playerId
        }

        public func validate(name: String) throws {
            try self.validate(self.gameSessionId, name: "gameSessionId", parent: name, max: 256)
            try self.validate(self.gameSessionId, name: "gameSessionId", parent: name, min: 1)
            try self.validate(self.gameSessionId, name: "gameSessionId", parent: name, pattern: "[a-zA-Z0-9:/-]+")
            try self.validate(self.playerData, name: "playerData", parent: name, max: 2048)
            try self.validate(self.playerData, name: "playerData", parent: name, min: 1)
            try self.validate(self.playerId, name: "playerId", parent: name, max: 1024)
            try self.validate(self.playerId, name: "playerId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionId = "GameSessionId"
            case playerData = "PlayerData"
            case playerId = "PlayerId"
        }
    }

    public struct CreatePlayerSessionOutput: AWSDecodableShape {
        /// Object that describes the newly created player session record.
        public let playerSession: PlayerSession?

        public init(playerSession: PlayerSession? = nil) {
            self.playerSession = playerSession
        }

        private enum CodingKeys: String, CodingKey {
            case playerSession = "PlayerSession"
        }
    }

    public struct CreatePlayerSessionsInput: AWSEncodableShape {
        /// A unique identifier for the game session to add players to.
        public let gameSessionId: String
        /// Map of string pairs, each specifying a player ID and a set of developer-defined information related to the player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game. Any player data strings for player IDs that are not included in the PlayerIds parameter are ignored.
        public let playerDataMap: [String: String]?
        /// List of unique identifiers for the players to be added.
        public let playerIds: [String]

        public init(gameSessionId: String, playerDataMap: [String: String]? = nil, playerIds: [String]) {
            self.gameSessionId = gameSessionId
            self.playerDataMap = playerDataMap
            self.playerIds = playerIds
        }

        public func validate(name: String) throws {
            try self.validate(self.gameSessionId, name: "gameSessionId", parent: name, max: 256)
            try self.validate(self.gameSessionId, name: "gameSessionId", parent: name, min: 1)
            try self.validate(self.gameSessionId, name: "gameSessionId", parent: name, pattern: "[a-zA-Z0-9:/-]+")
            try self.playerDataMap?.forEach {
                try validate($0.key, name: "playerDataMap.key", parent: name, max: 1024)
                try validate($0.key, name: "playerDataMap.key", parent: name, min: 1)
                try validate($0.value, name: "playerDataMap[\"\($0.key)\"]", parent: name, max: 2048)
                try validate($0.value, name: "playerDataMap[\"\($0.key)\"]", parent: name, min: 1)
            }
            try self.playerIds.forEach {
                try validate($0, name: "playerIds[]", parent: name, max: 1024)
                try validate($0, name: "playerIds[]", parent: name, min: 1)
            }
            try self.validate(self.playerIds, name: "playerIds", parent: name, max: 25)
            try self.validate(self.playerIds, name: "playerIds", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionId = "GameSessionId"
            case playerDataMap = "PlayerDataMap"
            case playerIds = "PlayerIds"
        }
    }

    public struct CreatePlayerSessionsOutput: AWSDecodableShape {
        /// A collection of player session objects created for the added players.
        public let playerSessions: [PlayerSession]?

        public init(playerSessions: [PlayerSession]? = nil) {
            self.playerSessions = playerSessions
        }

        private enum CodingKeys: String, CodingKey {
            case playerSessions = "PlayerSessions"
        }
    }

    public struct CreateScriptInput: AWSEncodableShape {
        /// A descriptive label that is associated with a script. Script names do not need to be unique. You can use UpdateScript to change this value later.
        public let name: String?
        /// The location of the Amazon S3 bucket where a zipped file containing your Realtime scripts is stored. The storage location must specify the Amazon S3 bucket name, the zip file name (the "key"), and a role ARN that allows Amazon GameLift to access the Amazon S3 storage location. The S3 bucket must be in the same Region where you want to create a new script. By default, Amazon GameLift uploads the latest version of the zip file; if you have S3 object versioning turned on, you can use the ObjectVersion parameter to specify an earlier version.
        public let storageLocation: S3Location?
        /// A list of labels to assign to the new script resource. Tags are developer-defined  key-value pairs. Tagging AWS resources are useful for resource management, access management and cost allocation. For more information, see  Tagging AWS Resources in the AWS General Reference. Once the resource is created, you can use TagResource, UntagResource, and  ListTagsForResource to add, remove, and view tags. The maximum tag limit may be lower than stated. See the AWS General Reference for actual  tagging limits.
        public let tags: [Tag]?
        /// Version information that is associated with a build or script. Version strings do not need to be unique. You can use UpdateScript to change this value later.
        public let version: String?
        /// A data object containing your Realtime scripts and dependencies as a zip file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB. When using the AWS CLI tool to create a script, this parameter is set to the zip file name. It must be prepended with the  string "fileb://" to indicate that the file data is a binary object. For example: --zip-file fileb://myRealtimeScript.zip.
        public let zipFile: Data?

        public init(name: String? = nil, storageLocation: S3Location? = nil, tags: [Tag]? = nil, version: String? = nil, zipFile: Data? = nil) {
            self.name = name
            self.storageLocation = storageLocation
            self.tags = tags
            self.version = version
            self.zipFile = zipFile
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 1024)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.storageLocation?.validate(name: "\(name).storageLocation")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
            try self.validate(self.version, name: "version", parent: name, max: 1024)
            try self.validate(self.version, name: "version", parent: name, min: 1)
            try self.validate(self.zipFile, name: "zipFile", parent: name, max: 5_000_000)
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case storageLocation = "StorageLocation"
            case tags = "Tags"
            case version = "Version"
            case zipFile = "ZipFile"
        }
    }

    public struct CreateScriptOutput: AWSDecodableShape {
        /// The newly created script record with a unique script ID and ARN. The new script's storage location reflects an Amazon S3 location: (1) If the script was uploaded from an S3 bucket under your account, the storage location reflects the information that was provided in the CreateScript request; (2) If the script file was uploaded from a local zip file, the storage location reflects an S3 location controls by the Amazon GameLift service.
        public let script: Script?

        public init(script: Script? = nil) {
            self.script = script
        }

        private enum CodingKeys: String, CodingKey {
            case script = "Script"
        }
    }

    public struct CreateVpcPeeringAuthorizationInput: AWSEncodableShape {
        /// A unique identifier for the AWS account that you use to manage your GameLift fleet.  You can find your Account ID in the AWS Management Console under account settings.
        public let gameLiftAwsAccountId: String
        /// A unique identifier for a VPC with resources to be accessed by your GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the  VPC Dashboard in the AWS Management Console.  Learn more about VPC peering in VPC Peering with GameLift Fleets.
        public let peerVpcId: String

        public init(gameLiftAwsAccountId: String, peerVpcId: String) {
            self.gameLiftAwsAccountId = gameLiftAwsAccountId
            self.peerVpcId = peerVpcId
        }

        public func validate(name: String) throws {
            try self.validate(self.gameLiftAwsAccountId, name: "gameLiftAwsAccountId", parent: name, max: 1024)
            try self.validate(self.gameLiftAwsAccountId, name: "gameLiftAwsAccountId", parent: name, min: 1)
            try self.validate(self.peerVpcId, name: "peerVpcId", parent: name, max: 1024)
            try self.validate(self.peerVpcId, name: "peerVpcId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case gameLiftAwsAccountId = "GameLiftAwsAccountId"
            case peerVpcId = "PeerVpcId"
        }
    }

    public struct CreateVpcPeeringAuthorizationOutput: AWSDecodableShape {
        /// Details on the requested VPC peering authorization, including expiration.
        public let vpcPeeringAuthorization: VpcPeeringAuthorization?

        public init(vpcPeeringAuthorization: VpcPeeringAuthorization? = nil) {
            self.vpcPeeringAuthorization = vpcPeeringAuthorization
        }

        private enum CodingKeys: String, CodingKey {
            case vpcPeeringAuthorization = "VpcPeeringAuthorization"
        }
    }

    public struct CreateVpcPeeringConnectionInput: AWSEncodableShape {
        /// A unique identifier for the fleet. You can use either the fleet ID or ARN value. This tells Amazon GameLift which GameLift VPC to peer with.
        public let fleetId: String
        /// A unique identifier for the AWS account with the VPC that you want to peer your Amazon GameLift fleet with. You can find your Account ID in the AWS Management Console under account settings.
        public let peerVpcAwsAccountId: String
        /// A unique identifier for a VPC with resources to be accessed by your GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the  VPC Dashboard in the AWS Management Console.  Learn more about VPC peering in VPC Peering with GameLift Fleets.
        public let peerVpcId: String

        public init(fleetId: String, peerVpcAwsAccountId: String, peerVpcId: String) {
            self.fleetId = fleetId
            self.peerVpcAwsAccountId = peerVpcAwsAccountId
            self.peerVpcId = peerVpcId
        }

        public func validate(name: String) throws {
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+")
            try self.validate(self.peerVpcAwsAccountId, name: "peerVpcAwsAccountId", parent: name, max: 1024)
            try self.validate(self.peerVpcAwsAccountId, name: "peerVpcAwsAccountId", parent: name, min: 1)
            try self.validate(self.peerVpcId, name: "peerVpcId", parent: name, max: 1024)
            try self.validate(self.peerVpcId, name: "peerVpcId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case peerVpcAwsAccountId = "PeerVpcAwsAccountId"
            case peerVpcId = "PeerVpcId"
        }
    }

    public struct CreateVpcPeeringConnectionOutput: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteAliasInput: AWSEncodableShape {
        /// A unique identifier of the alias that you want to delete. You can use either the alias ID or ARN value.
        public let aliasId: String

        public init(aliasId: String) {
            self.aliasId = aliasId
        }

        public func validate(name: String) throws {
            try self.validate(self.aliasId, name: "aliasId", parent: name, pattern: "^alias-\\S+|^arn:.*:alias\\/alias-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case aliasId = "AliasId"
        }
    }

    public struct DeleteBuildInput: AWSEncodableShape {
        /// A unique identifier for the build to delete. You can use either the build ID or ARN value.
        public let buildId: String

        public init(buildId: String) {
            self.buildId = buildId
        }

        public func validate(name: String) throws {
            try self.validate(self.buildId, name: "buildId", parent: name, pattern: "^build-\\S+|^arn:.*:build\\/build-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case buildId = "BuildId"
        }
    }

    public struct DeleteFleetInput: AWSEncodableShape {
        /// A unique identifier for the fleet to be deleted. You can use either the fleet ID or ARN value.
        public let fleetId: String

        public init(fleetId: String) {
            self.fleetId = fleetId
        }

        public func validate(name: String) throws {
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
        }
    }

    public struct DeleteFleetLocationsInput: AWSEncodableShape {
        /// A unique identifier for the fleet to delete locations for. You can use either the fleet ID or ARN value.
        public let fleetId: String
        /// The list of fleet locations to delete. Specify locations in the form of an AWS Region code, such as us-west-2.
        public let locations: [String]

        public init(fleetId: String, locations: [String]) {
            self.fleetId = fleetId
            self.locations = locations
        }

        public func validate(name: String) throws {
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            try self.locations.forEach {
                try validate($0, name: "locations[]", parent: name, max: 64)
                try validate($0, name: "locations[]", parent: name, min: 1)
                try validate($0, name: "locations[]", parent: name, pattern: "^[a-z]+(-([a-z]+|\\d))*")
            }
            try self.validate(self.locations, name: "locations", parent: name, max: 100)
            try self.validate(self.locations, name: "locations", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case locations = "Locations"
        }
    }

    public struct DeleteFleetLocationsOutput: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
        public let fleetArn: String?
        /// A unique identifier for the fleet that location attributes are being deleted for.
        public let fleetId: String?
        /// The remote locations that are being deleted, with each location status set to DELETING.
        public let locationStates: [LocationState]?

        public init(fleetArn: String? = nil, fleetId: String? = nil, locationStates: [LocationState]? = nil) {
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.locationStates = locationStates
        }

        private enum CodingKeys: String, CodingKey {
            case fleetArn = "FleetArn"
            case fleetId = "FleetId"
            case locationStates = "LocationStates"
        }
    }

    public struct DeleteGameServerGroupInput: AWSEncodableShape {
        /// The type of delete to perform. Options include the following:    SAFE_DELETE – (default) Terminates the game server group and EC2 Auto Scaling group only when it has no game servers that are in UTILIZED status.    FORCE_DELETE – Terminates the game server group, including all active game servers regardless of their utilization status, and the EC2 Auto Scaling group.     RETAIN – Does a safe delete of the game server group but retains the EC2 Auto Scaling group as is.
        public let deleteOption: GameServerGroupDeleteOption?
        /// A unique identifier for the game server group. Use either the GameServerGroup name or ARN value.
        public let gameServerGroupName: String

        public init(deleteOption: GameServerGroupDeleteOption? = nil, gameServerGroupName: String) {
            self.deleteOption = deleteOption
            self.gameServerGroupName = gameServerGroupName
        }

        public func validate(name: String) throws {
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, max: 256)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, min: 1)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, pattern: "[a-zA-Z0-9-\\.]+|^arn:.*:gameservergroup\\/[a-zA-Z0-9-\\.]+")
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOption = "DeleteOption"
            case gameServerGroupName = "GameServerGroupName"
        }
    }

    public struct DeleteGameServerGroupOutput: AWSDecodableShape {
        /// An object that describes the deleted game server group resource, with status updated to DELETE_SCHEDULED.
        public let gameServerGroup: GameServerGroup?

        public init(gameServerGroup: GameServerGroup? = nil) {
            self.gameServerGroup = gameServerGroup
        }

        private enum CodingKeys: String, CodingKey {
            case gameServerGroup = "GameServerGroup"
        }
    }

    public struct DeleteGameSessionQueueInput: AWSEncodableShape {
        /// A descriptive label that is associated with game session queue. Queue names must be unique within each Region. You can use either the queue ID or ARN value.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 256)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "[a-zA-Z0-9-]+|^arn:.*:gamesessionqueue\\/[a-zA-Z0-9-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct DeleteGameSessionQueueOutput: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteMatchmakingConfigurationInput: AWSEncodableShape {
        /// A unique identifier for the matchmaking configuration.  You can use either the configuration name or ARN value.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 256)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "[a-zA-Z0-9-\\.]*|^arn:.*:matchmakingconfiguration\\/[a-zA-Z0-9-\\.]*")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct DeleteMatchmakingConfigurationOutput: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteMatchmakingRuleSetInput: AWSEncodableShape {
        /// A unique identifier for the matchmaking rule set to be deleted. (Note: The rule set name is different from the optional "name" field in the rule set body.)  You can use either the rule set name or ARN value.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 256)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "[a-zA-Z0-9-\\.]*|^arn:.*:matchmakingruleset\\/[a-zA-Z0-9-\\.]*")
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct DeleteMatchmakingRuleSetOutput: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteScalingPolicyInput: AWSEncodableShape {
        /// A unique identifier for the fleet to be deleted. You can use either the fleet ID or ARN value.
        public let fleetId: String
        /// A descriptive label that is associated with a fleet's scaling policy. Policy names do not need to be unique.
        public let name: String

        public init(fleetId: String, name: String) {
            self.fleetId = fleetId
            self.name = name
        }

        public func validate(name: String) throws {
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            try self.validate(self.name, name: "name", parent: name, max: 1024)
            try self.validate(self.name, name: "name", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case name = "Name"
        }
    }

    public struct DeleteScriptInput: AWSEncodableShape {
        /// A unique identifier for the Realtime script to delete. You can use either the script ID or ARN value.
        public let scriptId: String

        public init(scriptId: String) {
            self.scriptId = scriptId
        }

        public func validate(name: String) throws {
            try self.validate(self.scriptId, name: "scriptId", parent: name, pattern: "^script-\\S+|^arn:.*:script\\/script-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case scriptId = "ScriptId"
        }
    }

    public struct DeleteVpcPeeringAuthorizationInput: AWSEncodableShape {
        /// A unique identifier for the AWS account that you use to manage your GameLift fleet.  You can find your Account ID in the AWS Management Console under account settings.
        public let gameLiftAwsAccountId: String
        /// A unique identifier for a VPC with resources to be accessed by your GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the  VPC Dashboard in the AWS Management Console.  Learn more about VPC peering in VPC Peering with GameLift Fleets.
        public let peerVpcId: String

        public init(gameLiftAwsAccountId: String, peerVpcId: String) {
            self.gameLiftAwsAccountId = gameLiftAwsAccountId
            self.peerVpcId = peerVpcId
        }

        public func validate(name: String) throws {
            try self.validate(self.gameLiftAwsAccountId, name: "gameLiftAwsAccountId", parent: name, max: 1024)
            try self.validate(self.gameLiftAwsAccountId, name: "gameLiftAwsAccountId", parent: name, min: 1)
            try self.validate(self.peerVpcId, name: "peerVpcId", parent: name, max: 1024)
            try self.validate(self.peerVpcId, name: "peerVpcId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case gameLiftAwsAccountId = "GameLiftAwsAccountId"
            case peerVpcId = "PeerVpcId"
        }
    }

    public struct DeleteVpcPeeringAuthorizationOutput: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteVpcPeeringConnectionInput: AWSEncodableShape {
        /// A unique identifier for the fleet. This fleet specified must match the fleet referenced in the VPC peering connection record. You can use either the fleet ID or ARN value.
        public let fleetId: String
        /// A unique identifier for a VPC peering connection. This value is included in the VpcPeeringConnection object, which can be retrieved by calling DescribeVpcPeeringConnections.
        public let vpcPeeringConnectionId: String

        public init(fleetId: String, vpcPeeringConnectionId: String) {
            self.fleetId = fleetId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        public func validate(name: String) throws {
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+")
            try self.validate(self.vpcPeeringConnectionId, name: "vpcPeeringConnectionId", parent: name, max: 1024)
            try self.validate(self.vpcPeeringConnectionId, name: "vpcPeeringConnectionId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case vpcPeeringConnectionId = "VpcPeeringConnectionId"
        }
    }

    public struct DeleteVpcPeeringConnectionOutput: AWSDecodableShape {
        public init() {}
    }

    public struct DeregisterGameServerInput: AWSEncodableShape {
        /// A unique identifier for the game server group where the game server is running.  Use either the GameServerGroup name or ARN value.
        public let gameServerGroupName: String
        /// A custom string that uniquely identifies the game server to deregister.
        public let gameServerId: String

        public init(gameServerGroupName: String, gameServerId: String) {
            self.gameServerGroupName = gameServerGroupName
            self.gameServerId = gameServerId
        }

        public func validate(name: String) throws {
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, max: 256)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, min: 1)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, pattern: "[a-zA-Z0-9-\\.]+|^arn:.*:gameservergroup\\/[a-zA-Z0-9-\\.]+")
            try self.validate(self.gameServerId, name: "gameServerId", parent: name, max: 128)
            try self.validate(self.gameServerId, name: "gameServerId", parent: name, min: 3)
            try self.validate(self.gameServerId, name: "gameServerId", parent: name, pattern: "[a-zA-Z0-9-\\.]+")
        }

        private enum CodingKeys: String, CodingKey {
            case gameServerGroupName = "GameServerGroupName"
            case gameServerId = "GameServerId"
        }
    }

    public struct DescribeAliasInput: AWSEncodableShape {
        /// The unique identifier for the fleet alias that you want to retrieve. You can use either the alias ID or ARN value.
        public let aliasId: String

        public init(aliasId: String) {
            self.aliasId = aliasId
        }

        public func validate(name: String) throws {
            try self.validate(self.aliasId, name: "aliasId", parent: name, pattern: "^alias-\\S+|^arn:.*:alias\\/alias-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case aliasId = "AliasId"
        }
    }

    public struct DescribeAliasOutput: AWSDecodableShape {
        /// The requested alias resource.
        public let alias: Alias?

        public init(alias: Alias? = nil) {
            self.alias = alias
        }

        private enum CodingKeys: String, CodingKey {
            case alias = "Alias"
        }
    }

    public struct DescribeBuildInput: AWSEncodableShape {
        /// A unique identifier for the build to retrieve properties for. You can use either the build ID or ARN value.
        public let buildId: String

        public init(buildId: String) {
            self.buildId = buildId
        }

        public func validate(name: String) throws {
            try self.validate(self.buildId, name: "buildId", parent: name, pattern: "^build-\\S+|^arn:.*:build\\/build-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case buildId = "BuildId"
        }
    }

    public struct DescribeBuildOutput: AWSDecodableShape {
        /// Set of properties describing the requested build.
        public let build: Build?

        public init(build: Build? = nil) {
            self.build = build
        }

        private enum CodingKeys: String, CodingKey {
            case build = "Build"
        }
    }

    public struct DescribeEC2InstanceLimitsInput: AWSEncodableShape {
        /// Name of an EC2 instance type that is supported in GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Do not specify a value for this parameter to retrieve limits for all instance types.
        public let eC2InstanceType: EC2InstanceType?
        /// The name of a remote location to request instance limits for, in the form of an AWS Region code such as us-west-2.
        public let location: String?

        public init(eC2InstanceType: EC2InstanceType? = nil, location: String? = nil) {
            self.eC2InstanceType = eC2InstanceType
            self.location = location
        }

        public func validate(name: String) throws {
            try self.validate(self.location, name: "location", parent: name, max: 64)
            try self.validate(self.location, name: "location", parent: name, min: 1)
            try self.validate(self.location, name: "location", parent: name, pattern: "^[a-z]+(-([a-z]+|\\d))*")
        }

        private enum CodingKeys: String, CodingKey {
            case eC2InstanceType = "EC2InstanceType"
            case location = "Location"
        }
    }

    public struct DescribeEC2InstanceLimitsOutput: AWSDecodableShape {
        /// The maximum number of instances for the specified instance type.
        public let eC2InstanceLimits: [EC2InstanceLimit]?

        public init(eC2InstanceLimits: [EC2InstanceLimit]? = nil) {
            self.eC2InstanceLimits = eC2InstanceLimits
        }

        private enum CodingKeys: String, CodingKey {
            case eC2InstanceLimits = "EC2InstanceLimits"
        }
    }

    public struct DescribeFleetAttributesInput: AWSEncodableShape {
        /// A list of unique fleet identifiers to retrieve attributes for. You can use either the fleet ID or ARN value. To retrieve attributes for all current fleets, do not include this parameter.
        public let fleetIds: [String]?
        /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.
        public let limit: Int?
        /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.
        public let nextToken: String?

        public init(fleetIds: [String]? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.fleetIds = fleetIds
            self.limit = limit
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.fleetIds?.forEach {
                try validate($0, name: "fleetIds[]", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            }
            try self.validate(self.fleetIds, name: "fleetIds", parent: name, min: 1)
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1024)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fleetIds = "FleetIds"
            case limit = "Limit"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFleetAttributesOutput: AWSDecodableShape {
        /// A collection of objects containing attribute metadata for each requested fleet ID. Attribute objects are returned only for fleets that currently exist.
        public let fleetAttributes: [FleetAttributes]?
        /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(fleetAttributes: [FleetAttributes]? = nil, nextToken: String? = nil) {
            self.fleetAttributes = fleetAttributes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fleetAttributes = "FleetAttributes"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFleetCapacityInput: AWSEncodableShape {
        /// A unique identifier for the fleet(s) to retrieve capacity information for. You can use either the fleet ID or ARN value. Leave this parameter empty to retrieve capacity information for all fleets.
        public let fleetIds: [String]?
        /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.
        public let limit: Int?
        /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.
        public let nextToken: String?

        public init(fleetIds: [String]? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.fleetIds = fleetIds
            self.limit = limit
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.fleetIds?.forEach {
                try validate($0, name: "fleetIds[]", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            }
            try self.validate(self.fleetIds, name: "fleetIds", parent: name, min: 1)
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1024)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fleetIds = "FleetIds"
            case limit = "Limit"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFleetCapacityOutput: AWSDecodableShape {
        /// A collection of objects that contains capacity information for each requested fleet ID. Capacity objects are returned only for fleets that currently exist.
        public let fleetCapacity: [FleetCapacity]?
        /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(fleetCapacity: [FleetCapacity]? = nil, nextToken: String? = nil) {
            self.fleetCapacity = fleetCapacity
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fleetCapacity = "FleetCapacity"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFleetEventsInput: AWSEncodableShape {
        /// The most recent date to retrieve event logs for. If no end time is specified, this call returns entries from the specified start time up to the present. Format is a number expressed in Unix time as milliseconds (ex: "1469498468.057").
        public let endTime: Date?
        /// A unique identifier for the fleet to get event logs for.  You can use either the fleet ID or ARN value.
        public let fleetId: String
        /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int?
        /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?
        /// The earliest date to retrieve event logs for. If no start time is specified, this call returns entries starting from when the fleet was created to the specified end time. Format is a number expressed in Unix time as milliseconds (ex: "1469498468.057").
        public let startTime: Date?

        public init(endTime: Date? = nil, fleetId: String, limit: Int? = nil, nextToken: String? = nil, startTime: Date? = nil) {
            self.endTime = endTime
            self.fleetId = fleetId
            self.limit = limit
            self.nextToken = nextToken
            self.startTime = startTime
        }

        public func validate(name: String) throws {
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1024)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case fleetId = "FleetId"
            case limit = "Limit"
            case nextToken = "NextToken"
            case startTime = "StartTime"
        }
    }

    public struct DescribeFleetEventsOutput: AWSDecodableShape {
        /// A collection of objects containing event log entries for the specified fleet.
        public let events: [Event]?
        /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(events: [Event]? = nil, nextToken: String? = nil) {
            self.events = events
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Events"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFleetLocationAttributesInput: AWSEncodableShape {
        /// A unique identifier for the fleet to retrieve remote locations for. You can use either the fleet ID or ARN value.
        public let fleetId: String
        /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This limit is not currently enforced.
        public let limit: Int?
        /// A list of fleet locations to retrieve information for. Specify locations in the form of an AWS Region code, such as us-west-2.
        public let locations: [String]?
        /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?

        public init(fleetId: String, limit: Int? = nil, locations: [String]? = nil, nextToken: String? = nil) {
            self.fleetId = fleetId
            self.limit = limit
            self.locations = locations
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.locations?.forEach {
                try validate($0, name: "locations[]", parent: name, max: 64)
                try validate($0, name: "locations[]", parent: name, min: 1)
                try validate($0, name: "locations[]", parent: name, pattern: "^[a-z]+(-([a-z]+|\\d))*")
            }
            try self.validate(self.locations, name: "locations", parent: name, max: 100)
            try self.validate(self.locations, name: "locations", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1024)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case limit = "Limit"
            case locations = "Locations"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFleetLocationAttributesOutput: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
        public let fleetArn: String?
        /// A unique identifier for the fleet that location attributes were requested for.
        public let fleetId: String?
        ///  Location-specific information on the requested fleet's remote locations.
        public let locationAttributes: [LocationAttributes]?
        /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(fleetArn: String? = nil, fleetId: String? = nil, locationAttributes: [LocationAttributes]? = nil, nextToken: String? = nil) {
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.locationAttributes = locationAttributes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fleetArn = "FleetArn"
            case fleetId = "FleetId"
            case locationAttributes = "LocationAttributes"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFleetLocationCapacityInput: AWSEncodableShape {
        /// A unique identifier for the fleet to request location capacity for. You can use either the fleet ID or ARN value.
        public let fleetId: String
        /// The fleet location to retrieve capacity information for. Specify a location in the form of an AWS Region code, such as us-west-2.
        public let location: String

        public init(fleetId: String, location: String) {
            self.fleetId = fleetId
            self.location = location
        }

        public func validate(name: String) throws {
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            try self.validate(self.location, name: "location", parent: name, max: 64)
            try self.validate(self.location, name: "location", parent: name, min: 1)
            try self.validate(self.location, name: "location", parent: name, pattern: "^[a-z]+(-([a-z]+|\\d))*")
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case location = "Location"
        }
    }

    public struct DescribeFleetLocationCapacityOutput: AWSDecodableShape {
        /// Resource capacity information for the requested fleet location. Capacity objects are returned only for fleets and locations that currently exist.
        public let fleetCapacity: FleetCapacity?

        public init(fleetCapacity: FleetCapacity? = nil) {
            self.fleetCapacity = fleetCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case fleetCapacity = "FleetCapacity"
        }
    }

    public struct DescribeFleetLocationUtilizationInput: AWSEncodableShape {
        /// A unique identifier for the fleet to request location utilization for. You can use either the fleet ID or ARN value.
        public let fleetId: String
        /// The fleet location to retrieve utilization information for. Specify a location in the form of an AWS Region code, such as us-west-2.
        public let location: String

        public init(fleetId: String, location: String) {
            self.fleetId = fleetId
            self.location = location
        }

        public func validate(name: String) throws {
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            try self.validate(self.location, name: "location", parent: name, max: 64)
            try self.validate(self.location, name: "location", parent: name, min: 1)
            try self.validate(self.location, name: "location", parent: name, pattern: "^[a-z]+(-([a-z]+|\\d))*")
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case location = "Location"
        }
    }

    public struct DescribeFleetLocationUtilizationOutput: AWSDecodableShape {
        /// Utilization information for the requested fleet location. Utilization objects are returned only for fleets and locations that currently exist.
        public let fleetUtilization: FleetUtilization?

        public init(fleetUtilization: FleetUtilization? = nil) {
            self.fleetUtilization = fleetUtilization
        }

        private enum CodingKeys: String, CodingKey {
            case fleetUtilization = "FleetUtilization"
        }
    }

    public struct DescribeFleetPortSettingsInput: AWSEncodableShape {
        /// A unique identifier for the fleet to retrieve port settings for. You can use either the fleet ID or ARN value.
        public let fleetId: String
        /// A remote location to check for status of port setting updates. Use the AWS Region code format, such as us-west-2.
        public let location: String?

        public init(fleetId: String, location: String? = nil) {
            self.fleetId = fleetId
            self.location = location
        }

        public func validate(name: String) throws {
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            try self.validate(self.location, name: "location", parent: name, max: 64)
            try self.validate(self.location, name: "location", parent: name, min: 1)
            try self.validate(self.location, name: "location", parent: name, pattern: "^[a-z]+(-([a-z]+|\\d))*")
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case location = "Location"
        }
    }

    public struct DescribeFleetPortSettingsOutput: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
        public let fleetArn: String?
        /// A unique identifier for the fleet that was requested.
        public let fleetId: String?
        /// The port settings for the requested fleet ID.
        public let inboundPermissions: [IpPermission]?
        /// The requested fleet location, expressed as an AWS Region code,  such as us-west-2.
        public let location: String?
        /// The current status of updates to the fleet's port settings in the requested fleet location. A status of PENDING_UPDATE indicates that an update was requested for the fleet but has not yet been completed for the location.
        public let updateStatus: LocationUpdateStatus?

        public init(fleetArn: String? = nil, fleetId: String? = nil, inboundPermissions: [IpPermission]? = nil, location: String? = nil, updateStatus: LocationUpdateStatus? = nil) {
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.inboundPermissions = inboundPermissions
            self.location = location
            self.updateStatus = updateStatus
        }

        private enum CodingKeys: String, CodingKey {
            case fleetArn = "FleetArn"
            case fleetId = "FleetId"
            case inboundPermissions = "InboundPermissions"
            case location = "Location"
            case updateStatus = "UpdateStatus"
        }
    }

    public struct DescribeFleetUtilizationInput: AWSEncodableShape {
        /// A unique identifier for the fleet(s) to retrieve utilization data for. You can use either the fleet ID or ARN value. To retrieve attributes for all current fleets, do not include this parameter.
        public let fleetIds: [String]?
        /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.
        public let limit: Int?
        /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.
        public let nextToken: String?

        public init(fleetIds: [String]? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.fleetIds = fleetIds
            self.limit = limit
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.fleetIds?.forEach {
                try validate($0, name: "fleetIds[]", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            }
            try self.validate(self.fleetIds, name: "fleetIds", parent: name, min: 1)
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1024)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fleetIds = "FleetIds"
            case limit = "Limit"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFleetUtilizationOutput: AWSDecodableShape {
        /// A collection of objects containing utilization information for each requested fleet ID. Utilization objects are returned only for fleets that currently exist.
        public let fleetUtilization: [FleetUtilization]?
        /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(fleetUtilization: [FleetUtilization]? = nil, nextToken: String? = nil) {
            self.fleetUtilization = fleetUtilization
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fleetUtilization = "FleetUtilization"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeGameServerGroupInput: AWSEncodableShape {
        /// A unique identifier for the game server group. Use either the GameServerGroup name or ARN value.
        public let gameServerGroupName: String

        public init(gameServerGroupName: String) {
            self.gameServerGroupName = gameServerGroupName
        }

        public func validate(name: String) throws {
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, max: 256)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, min: 1)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, pattern: "[a-zA-Z0-9-\\.]+|^arn:.*:gameservergroup\\/[a-zA-Z0-9-\\.]+")
        }

        private enum CodingKeys: String, CodingKey {
            case gameServerGroupName = "GameServerGroupName"
        }
    }

    public struct DescribeGameServerGroupOutput: AWSDecodableShape {
        /// An object with the property settings for the requested game server group resource.
        public let gameServerGroup: GameServerGroup?

        public init(gameServerGroup: GameServerGroup? = nil) {
            self.gameServerGroup = gameServerGroup
        }

        private enum CodingKeys: String, CodingKey {
            case gameServerGroup = "GameServerGroup"
        }
    }

    public struct DescribeGameServerInput: AWSEncodableShape {
        /// A unique identifier for the game server group where the game server is running.  Use either the GameServerGroup name or ARN value.
        public let gameServerGroupName: String
        /// A custom string that uniquely identifies the game server information to be retrieved.
        public let gameServerId: String

        public init(gameServerGroupName: String, gameServerId: String) {
            self.gameServerGroupName = gameServerGroupName
            self.gameServerId = gameServerId
        }

        public func validate(name: String) throws {
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, max: 256)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, min: 1)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, pattern: "[a-zA-Z0-9-\\.]+|^arn:.*:gameservergroup\\/[a-zA-Z0-9-\\.]+")
            try self.validate(self.gameServerId, name: "gameServerId", parent: name, max: 128)
            try self.validate(self.gameServerId, name: "gameServerId", parent: name, min: 3)
            try self.validate(self.gameServerId, name: "gameServerId", parent: name, pattern: "[a-zA-Z0-9-\\.]+")
        }

        private enum CodingKeys: String, CodingKey {
            case gameServerGroupName = "GameServerGroupName"
            case gameServerId = "GameServerId"
        }
    }

    public struct DescribeGameServerInstancesInput: AWSEncodableShape {
        /// A unique identifier for the game server group. Use either the GameServerGroup name or ARN value.
        public let gameServerGroupName: String
        /// The EC2 instance IDs that you want to retrieve status on. EC2 instance IDs use a 17-character format, for example: i-1234567890abcdef0. To retrieve all instances in the game server group, leave this parameter empty.
        public let instanceIds: [String]?
        ///  The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int?
        ///  A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?

        public init(gameServerGroupName: String, instanceIds: [String]? = nil, limit: Int? = nil, nextToken: String? = nil) {
            self.gameServerGroupName = gameServerGroupName
            self.instanceIds = instanceIds
            self.limit = limit
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, max: 256)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, min: 1)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, pattern: "[a-zA-Z0-9-\\.]+|^arn:.*:gameservergroup\\/[a-zA-Z0-9-\\.]+")
            try self.instanceIds?.forEach {
                try validate($0, name: "instanceIds[]", parent: name, max: 19)
                try validate($0, name: "instanceIds[]", parent: name, min: 19)
                try validate($0, name: "instanceIds[]", parent: name, pattern: "^i-[0-9a-zA-Z]{17}$")
            }
            try self.validate(self.instanceIds, name: "instanceIds", parent: name, max: 20)
            try self.validate(self.instanceIds, name: "instanceIds", parent: name, min: 1)
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1024)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case gameServerGroupName = "GameServerGroupName"
            case instanceIds = "InstanceIds"
            case limit = "Limit"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeGameServerInstancesOutput: AWSDecodableShape {
        ///  The collection of requested game server instances.
        public let gameServerInstances: [GameServerInstance]?
        ///  A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(gameServerInstances: [GameServerInstance]? = nil, nextToken: String? = nil) {
            self.gameServerInstances = gameServerInstances
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case gameServerInstances = "GameServerInstances"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeGameServerOutput: AWSDecodableShape {
        /// Object that describes the requested game server.
        public let gameServer: GameServer?

        public init(gameServer: GameServer? = nil) {
            self.gameServer = gameServer
        }

        private enum CodingKeys: String, CodingKey {
            case gameServer = "GameServer"
        }
    }

    public struct DescribeGameSessionDetailsInput: AWSEncodableShape {
        /// A unique identifier for the alias associated with the fleet to retrieve all game sessions for. You can use either the alias ID or ARN value.
        public let aliasId: String?
        /// A unique identifier for the fleet to retrieve all game sessions active on the fleet. You can use either the fleet ID or ARN value.
        public let fleetId: String?
        /// A unique identifier for the game session to retrieve.
        public let gameSessionId: String?
        /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int?
        /// A fleet location to get game sessions for. You can specify a fleet's home Region or a remote location. Use the AWS Region code format, such as us-west-2.
        public let location: String?
        /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?
        /// Game session status to filter results on. Possible game session statuses include ACTIVE, TERMINATED, ACTIVATING and TERMINATING (the last two are transitory).
        public let statusFilter: String?

        public init(aliasId: String? = nil, fleetId: String? = nil, gameSessionId: String? = nil, limit: Int? = nil, location: String? = nil, nextToken: String? = nil, statusFilter: String? = nil) {
            self.aliasId = aliasId
            self.fleetId = fleetId
            self.gameSessionId = gameSessionId
            self.limit = limit
            self.location = location
            self.nextToken = nextToken
            self.statusFilter = statusFilter
        }

        public func validate(name: String) throws {
            try self.validate(self.aliasId, name: "aliasId", parent: name, pattern: "^alias-\\S+|^arn:.*:alias\\/alias-\\S+")
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            try self.validate(self.gameSessionId, name: "gameSessionId", parent: name, max: 256)
            try self.validate(self.gameSessionId, name: "gameSessionId", parent: name, min: 1)
            try self.validate(self.gameSessionId, name: "gameSessionId", parent: name, pattern: "[a-zA-Z0-9:/-]+")
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.location, name: "location", parent: name, max: 64)
            try self.validate(self.location, name: "location", parent: name, min: 1)
            try self.validate(self.location, name: "location", parent: name, pattern: "^[a-z]+(-([a-z]+|\\d))*")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1024)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.statusFilter, name: "statusFilter", parent: name, max: 1024)
            try self.validate(self.statusFilter, name: "statusFilter", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case aliasId = "AliasId"
            case fleetId = "FleetId"
            case gameSessionId = "GameSessionId"
            case limit = "Limit"
            case location = "Location"
            case nextToken = "NextToken"
            case statusFilter = "StatusFilter"
        }
    }

    public struct DescribeGameSessionDetailsOutput: AWSDecodableShape {
        /// A collection of properties for each game session that matches the request.
        public let gameSessionDetails: [GameSessionDetail]?
        /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(gameSessionDetails: [GameSessionDetail]? = nil, nextToken: String? = nil) {
            self.gameSessionDetails = gameSessionDetails
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionDetails = "GameSessionDetails"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeGameSessionPlacementInput: AWSEncodableShape {
        /// A unique identifier for a game session placement to retrieve.
        public let placementId: String

        public init(placementId: String) {
            self.placementId = placementId
        }

        public func validate(name: String) throws {
            try self.validate(self.placementId, name: "placementId", parent: name, max: 48)
            try self.validate(self.placementId, name: "placementId", parent: name, min: 1)
            try self.validate(self.placementId, name: "placementId", parent: name, pattern: "[a-zA-Z0-9-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case placementId = "PlacementId"
        }
    }

    public struct DescribeGameSessionPlacementOutput: AWSDecodableShape {
        /// Object that describes the requested game session placement.
        public let gameSessionPlacement: GameSessionPlacement?

        public init(gameSessionPlacement: GameSessionPlacement? = nil) {
            self.gameSessionPlacement = gameSessionPlacement
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionPlacement = "GameSessionPlacement"
        }
    }

    public struct DescribeGameSessionQueuesInput: AWSEncodableShape {
        /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. You can request up to 50 results.
        public let limit: Int?
        /// A list of queue names to retrieve information for. You can use either the queue ID or ARN value. To request settings for all queues, leave this parameter empty.
        public let names: [String]?
        /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?

        public init(limit: Int? = nil, names: [String]? = nil, nextToken: String? = nil) {
            self.limit = limit
            self.names = names
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.names?.forEach {
                try validate($0, name: "names[]", parent: name, max: 256)
                try validate($0, name: "names[]", parent: name, min: 1)
                try validate($0, name: "names[]", parent: name, pattern: "[a-zA-Z0-9-]+|^arn:.*:gamesessionqueue\\/[a-zA-Z0-9-]+")
            }
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1024)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case names = "Names"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeGameSessionQueuesOutput: AWSDecodableShape {
        /// A collection of objects that describe the requested game session queues.
        public let gameSessionQueues: [GameSessionQueue]?
        /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(gameSessionQueues: [GameSessionQueue]? = nil, nextToken: String? = nil) {
            self.gameSessionQueues = gameSessionQueues
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionQueues = "GameSessionQueues"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeGameSessionsInput: AWSEncodableShape {
        /// A unique identifier for the alias associated with the fleet to retrieve game sessions for. You can use either the alias ID or ARN value.
        public let aliasId: String?
        /// A unique identifier for the fleet to retrieve game sessions for. You can use either the fleet ID or ARN value.
        public let fleetId: String?
        /// A unique identifier for the game session to retrieve.
        public let gameSessionId: String?
        /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int?
        /// A fleet location to get game session details for. You can specify a fleet's home Region or a remote location. Use the AWS Region code format, such as us-west-2.
        public let location: String?
        /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?
        /// Game session status to filter results on. You can filter on the following states: ACTIVE, TERMINATED, ACTIVATING, and TERMINATING. The last two are transitory and used for only very brief periods of time.
        public let statusFilter: String?

        public init(aliasId: String? = nil, fleetId: String? = nil, gameSessionId: String? = nil, limit: Int? = nil, location: String? = nil, nextToken: String? = nil, statusFilter: String? = nil) {
            self.aliasId = aliasId
            self.fleetId = fleetId
            self.gameSessionId = gameSessionId
            self.limit = limit
            self.location = location
            self.nextToken = nextToken
            self.statusFilter = statusFilter
        }

        public func validate(name: String) throws {
            try self.validate(self.aliasId, name: "aliasId", parent: name, pattern: "^alias-\\S+|^arn:.*:alias\\/alias-\\S+")
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            try self.validate(self.gameSessionId, name: "gameSessionId", parent: name, max: 256)
            try self.validate(self.gameSessionId, name: "gameSessionId", parent: name, min: 1)
            try self.validate(self.gameSessionId, name: "gameSessionId", parent: name, pattern: "[a-zA-Z0-9:/-]+")
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.location, name: "location", parent: name, max: 64)
            try self.validate(self.location, name: "location", parent: name, min: 1)
            try self.validate(self.location, name: "location", parent: name, pattern: "^[a-z]+(-([a-z]+|\\d))*")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1024)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.statusFilter, name: "statusFilter", parent: name, max: 1024)
            try self.validate(self.statusFilter, name: "statusFilter", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case aliasId = "AliasId"
            case fleetId = "FleetId"
            case gameSessionId = "GameSessionId"
            case limit = "Limit"
            case location = "Location"
            case nextToken = "NextToken"
            case statusFilter = "StatusFilter"
        }
    }

    public struct DescribeGameSessionsOutput: AWSDecodableShape {
        /// A collection of properties for each game session that matches the request.
        public let gameSessions: [GameSession]?
        /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(gameSessions: [GameSession]? = nil, nextToken: String? = nil) {
            self.gameSessions = gameSessions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessions = "GameSessions"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInstancesInput: AWSEncodableShape {
        /// A unique identifier for the fleet to retrieve instance information for.  You can use either the fleet ID or ARN value.
        public let fleetId: String
        /// A unique identifier for an instance to retrieve. Specify an instance ID or leave blank to retrieve all instances in the fleet.
        public let instanceId: String?
        /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int?
        /// The name of a location to retrieve instance information for, in the form of an AWS Region code such as us-west-2.
        public let location: String?
        /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?

        public init(fleetId: String, instanceId: String? = nil, limit: Int? = nil, location: String? = nil, nextToken: String? = nil) {
            self.fleetId = fleetId
            self.instanceId = instanceId
            self.limit = limit
            self.location = location
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            try self.validate(self.instanceId, name: "instanceId", parent: name, pattern: "[a-zA-Z0-9\\.-]+")
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.location, name: "location", parent: name, max: 64)
            try self.validate(self.location, name: "location", parent: name, min: 1)
            try self.validate(self.location, name: "location", parent: name, pattern: "^[a-z]+(-([a-z]+|\\d))*")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1024)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case instanceId = "InstanceId"
            case limit = "Limit"
            case location = "Location"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInstancesOutput: AWSDecodableShape {
        /// A collection of objects containing properties for each instance returned.
        public let instances: [Instance]?
        /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(instances: [Instance]? = nil, nextToken: String? = nil) {
            self.instances = instances
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instances = "Instances"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeMatchmakingConfigurationsInput: AWSEncodableShape {
        /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is limited to 10.
        public let limit: Int?
        /// A unique identifier for the matchmaking configuration(s) to retrieve. You can use either the configuration name or ARN value. To request all existing configurations, leave this parameter empty.
        public let names: [String]?
        /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?
        /// A unique identifier for the matchmaking rule set. You can use either the rule set name or ARN value. Use this parameter to retrieve all matchmaking configurations that use this rule set.
        public let ruleSetName: String?

        public init(limit: Int? = nil, names: [String]? = nil, nextToken: String? = nil, ruleSetName: String? = nil) {
            self.limit = limit
            self.names = names
            self.nextToken = nextToken
            self.ruleSetName = ruleSetName
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.names?.forEach {
                try validate($0, name: "names[]", parent: name, max: 256)
                try validate($0, name: "names[]", parent: name, min: 1)
                try validate($0, name: "names[]", parent: name, pattern: "[a-zA-Z0-9-\\.]*|^arn:.*:matchmakingconfiguration\\/[a-zA-Z0-9-\\.]*")
            }
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1024)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.ruleSetName, name: "ruleSetName", parent: name, max: 256)
            try self.validate(self.ruleSetName, name: "ruleSetName", parent: name, min: 1)
            try self.validate(self.ruleSetName, name: "ruleSetName", parent: name, pattern: "[a-zA-Z0-9-\\.]*|^arn:.*:matchmakingruleset\\/[a-zA-Z0-9-\\.]*")
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case names = "Names"
            case nextToken = "NextToken"
            case ruleSetName = "RuleSetName"
        }
    }

    public struct DescribeMatchmakingConfigurationsOutput: AWSDecodableShape {
        /// A collection of requested matchmaking configurations.
        public let configurations: [MatchmakingConfiguration]?
        /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(configurations: [MatchmakingConfiguration]? = nil, nextToken: String? = nil) {
            self.configurations = configurations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case configurations = "Configurations"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeMatchmakingInput: AWSEncodableShape {
        /// A unique identifier for a matchmaking ticket. You can include up to 10 ID values.
        public let ticketIds: [String]

        public init(ticketIds: [String]) {
            self.ticketIds = ticketIds
        }

        public func validate(name: String) throws {
            try self.ticketIds.forEach {
                try validate($0, name: "ticketIds[]", parent: name, max: 128)
                try validate($0, name: "ticketIds[]", parent: name, pattern: "[a-zA-Z0-9-\\.]*")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case ticketIds = "TicketIds"
        }
    }

    public struct DescribeMatchmakingOutput: AWSDecodableShape {
        /// A collection of existing matchmaking ticket objects matching the request.
        public let ticketList: [MatchmakingTicket]?

        public init(ticketList: [MatchmakingTicket]? = nil) {
            self.ticketList = ticketList
        }

        private enum CodingKeys: String, CodingKey {
            case ticketList = "TicketList"
        }
    }

    public struct DescribeMatchmakingRuleSetsInput: AWSEncodableShape {
        /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int?
        /// A list of one or more matchmaking rule set names to retrieve details for. (Note: The rule set name is different from the optional "name" field in the rule set body.) You can use either the rule set name or ARN value.
        public let names: [String]?
        /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?

        public init(limit: Int? = nil, names: [String]? = nil, nextToken: String? = nil) {
            self.limit = limit
            self.names = names
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, max: 10)
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.names?.forEach {
                try validate($0, name: "names[]", parent: name, max: 256)
                try validate($0, name: "names[]", parent: name, min: 1)
                try validate($0, name: "names[]", parent: name, pattern: "[a-zA-Z0-9-\\.]*|^arn:.*:matchmakingruleset\\/[a-zA-Z0-9-\\.]*")
            }
            try self.validate(self.names, name: "names", parent: name, max: 10)
            try self.validate(self.names, name: "names", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1024)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case names = "Names"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeMatchmakingRuleSetsOutput: AWSDecodableShape {
        /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
        public let nextToken: String?
        /// A collection of requested matchmaking rule set objects.
        public let ruleSets: [MatchmakingRuleSet]

        public init(nextToken: String? = nil, ruleSets: [MatchmakingRuleSet]) {
            self.nextToken = nextToken
            self.ruleSets = ruleSets
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case ruleSets = "RuleSets"
        }
    }

    public struct DescribePlayerSessionsInput: AWSEncodableShape {
        /// A unique identifier for the game session to retrieve player sessions for.
        public let gameSessionId: String?
        /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. If a player session ID is specified, this parameter is ignored.
        public let limit: Int?
        /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value. If a player session ID is specified, this parameter is ignored.
        public let nextToken: String?
        /// A unique identifier for a player to retrieve player sessions for.
        public let playerId: String?
        /// A unique identifier for a player session to retrieve.
        public let playerSessionId: String?
        /// Player session status to filter results on. Possible player session statuses include the following:    RESERVED -- The player session request has been received, but the player has not yet connected to the server process and/or been validated.     ACTIVE -- The player has been validated by the server process and is currently connected.    COMPLETED -- The player connection has been dropped.    TIMEDOUT -- A player session request was received, but the player did not connect and/or was not validated within the timeout limit (60 seconds).
        public let playerSessionStatusFilter: String?

        public init(gameSessionId: String? = nil, limit: Int? = nil, nextToken: String? = nil, playerId: String? = nil, playerSessionId: String? = nil, playerSessionStatusFilter: String? = nil) {
            self.gameSessionId = gameSessionId
            self.limit = limit
            self.nextToken = nextToken
            self.playerId = playerId
            self.playerSessionId = playerSessionId
            self.playerSessionStatusFilter = playerSessionStatusFilter
        }

        public func validate(name: String) throws {
            try self.validate(self.gameSessionId, name: "gameSessionId", parent: name, max: 256)
            try self.validate(self.gameSessionId, name: "gameSessionId", parent: name, min: 1)
            try self.validate(self.gameSessionId, name: "gameSessionId", parent: name, pattern: "[a-zA-Z0-9:/-]+")
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1024)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.playerId, name: "playerId", parent: name, max: 1024)
            try self.validate(self.playerId, name: "playerId", parent: name, min: 1)
            try self.validate(self.playerSessionId, name: "playerSessionId", parent: name, pattern: "^psess-\\S+")
            try self.validate(self.playerSessionStatusFilter, name: "playerSessionStatusFilter", parent: name, max: 1024)
            try self.validate(self.playerSessionStatusFilter, name: "playerSessionStatusFilter", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionId = "GameSessionId"
            case limit = "Limit"
            case nextToken = "NextToken"
            case playerId = "PlayerId"
            case playerSessionId = "PlayerSessionId"
            case playerSessionStatusFilter = "PlayerSessionStatusFilter"
        }
    }

    public struct DescribePlayerSessionsOutput: AWSDecodableShape {
        /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
        public let nextToken: String?
        /// A collection of objects containing properties for each player session that matches the request.
        public let playerSessions: [PlayerSession]?

        public init(nextToken: String? = nil, playerSessions: [PlayerSession]? = nil) {
            self.nextToken = nextToken
            self.playerSessions = playerSessions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case playerSessions = "PlayerSessions"
        }
    }

    public struct DescribeRuntimeConfigurationInput: AWSEncodableShape {
        /// A unique identifier for the fleet to get the runtime configuration for. You can use either the fleet ID or ARN value.
        public let fleetId: String

        public init(fleetId: String) {
            self.fleetId = fleetId
        }

        public func validate(name: String) throws {
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
        }
    }

    public struct DescribeRuntimeConfigurationOutput: AWSDecodableShape {
        /// Instructions that describe how server processes should be launched and maintained on each instance in the fleet.
        public let runtimeConfiguration: RuntimeConfiguration?

        public init(runtimeConfiguration: RuntimeConfiguration? = nil) {
            self.runtimeConfiguration = runtimeConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case runtimeConfiguration = "RuntimeConfiguration"
        }
    }

    public struct DescribeScalingPoliciesInput: AWSEncodableShape {
        /// A unique identifier for the fleet to retrieve scaling policies for. You can use either the fleet ID or ARN value.
        public let fleetId: String
        /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int?
        ///  CONTENT TODO
        public let location: String?
        /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?
        /// Scaling policy status to filter results on. A scaling policy is only in force when in an ACTIVE status.    ACTIVE -- The scaling policy is currently in force.    UPDATEREQUESTED -- A request to update the scaling policy has been received.    UPDATING -- A change is being made to the scaling policy.    DELETEREQUESTED -- A request to delete the scaling policy has been received.    DELETING -- The scaling policy is being deleted.    DELETED -- The scaling policy has been deleted.    ERROR -- An error occurred in creating the policy. It should be removed and recreated.
        public let statusFilter: ScalingStatusType?

        public init(fleetId: String, limit: Int? = nil, location: String? = nil, nextToken: String? = nil, statusFilter: ScalingStatusType? = nil) {
            self.fleetId = fleetId
            self.limit = limit
            self.location = location
            self.nextToken = nextToken
            self.statusFilter = statusFilter
        }

        public func validate(name: String) throws {
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.location, name: "location", parent: name, max: 64)
            try self.validate(self.location, name: "location", parent: name, min: 1)
            try self.validate(self.location, name: "location", parent: name, pattern: "^[a-z]+(-([a-z]+|\\d))*")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1024)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case limit = "Limit"
            case location = "Location"
            case nextToken = "NextToken"
            case statusFilter = "StatusFilter"
        }
    }

    public struct DescribeScalingPoliciesOutput: AWSDecodableShape {
        /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
        public let nextToken: String?
        /// A collection of objects containing the scaling policies matching the request.
        public let scalingPolicies: [ScalingPolicy]?

        public init(nextToken: String? = nil, scalingPolicies: [ScalingPolicy]? = nil) {
            self.nextToken = nextToken
            self.scalingPolicies = scalingPolicies
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case scalingPolicies = "ScalingPolicies"
        }
    }

    public struct DescribeScriptInput: AWSEncodableShape {
        /// A unique identifier for the Realtime script to retrieve properties for. You can use either the script ID or ARN value.
        public let scriptId: String

        public init(scriptId: String) {
            self.scriptId = scriptId
        }

        public func validate(name: String) throws {
            try self.validate(self.scriptId, name: "scriptId", parent: name, pattern: "^script-\\S+|^arn:.*:script\\/script-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case scriptId = "ScriptId"
        }
    }

    public struct DescribeScriptOutput: AWSDecodableShape {
        /// A set of properties describing the requested script.
        public let script: Script?

        public init(script: Script? = nil) {
            self.script = script
        }

        private enum CodingKeys: String, CodingKey {
            case script = "Script"
        }
    }

    public struct DescribeVpcPeeringAuthorizationsInput: AWSEncodableShape {
        public init() {}
    }

    public struct DescribeVpcPeeringAuthorizationsOutput: AWSDecodableShape {
        /// A collection of objects that describe all valid VPC peering operations for the current AWS account.
        public let vpcPeeringAuthorizations: [VpcPeeringAuthorization]?

        public init(vpcPeeringAuthorizations: [VpcPeeringAuthorization]? = nil) {
            self.vpcPeeringAuthorizations = vpcPeeringAuthorizations
        }

        private enum CodingKeys: String, CodingKey {
            case vpcPeeringAuthorizations = "VpcPeeringAuthorizations"
        }
    }

    public struct DescribeVpcPeeringConnectionsInput: AWSEncodableShape {
        /// A unique identifier for the fleet. You can use either the fleet ID or ARN value.
        public let fleetId: String?

        public init(fleetId: String? = nil) {
            self.fleetId = fleetId
        }

        public func validate(name: String) throws {
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
        }
    }

    public struct DescribeVpcPeeringConnectionsOutput: AWSDecodableShape {
        /// A collection of VPC peering connection records that match the request.
        public let vpcPeeringConnections: [VpcPeeringConnection]?

        public init(vpcPeeringConnections: [VpcPeeringConnection]? = nil) {
            self.vpcPeeringConnections = vpcPeeringConnections
        }

        private enum CodingKeys: String, CodingKey {
            case vpcPeeringConnections = "VpcPeeringConnections"
        }
    }

    public struct DesiredPlayerSession: AWSEncodableShape {
        /// Developer-defined information related to a player. GameLift does not use this data, so it can be formatted as needed for use in the game.
        public let playerData: String?
        /// A unique identifier for a player to associate with the player session.
        public let playerId: String?

        public init(playerData: String? = nil, playerId: String? = nil) {
            self.playerData = playerData
            self.playerId = playerId
        }

        public func validate(name: String) throws {
            try self.validate(self.playerData, name: "playerData", parent: name, max: 2048)
            try self.validate(self.playerData, name: "playerData", parent: name, min: 1)
            try self.validate(self.playerId, name: "playerId", parent: name, max: 1024)
            try self.validate(self.playerId, name: "playerId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case playerData = "PlayerData"
            case playerId = "PlayerId"
        }
    }

    public struct EC2InstanceCounts: AWSDecodableShape {
        /// Actual number of instances that are ready to host game sessions.
        public let active: Int?
        /// Ideal number of active instances. GameLift will always try to maintain the desired number of instances. Capacity is scaled up or down by changing the desired instances.
        public let desired: Int?
        /// Number of active instances that are not currently hosting a game session.
        public let idle: Int?
        /// The maximum instance count value allowed.
        public let maximum: Int?
        /// The minimum instance count value allowed.
        public let minimum: Int?
        /// Number of instances that are starting but not yet active.
        public let pending: Int?
        /// Number of instances that are no longer active but haven't yet been terminated.
        public let terminating: Int?

        public init(active: Int? = nil, desired: Int? = nil, idle: Int? = nil, maximum: Int? = nil, minimum: Int? = nil, pending: Int? = nil, terminating: Int? = nil) {
            self.active = active
            self.desired = desired
            self.idle = idle
            self.maximum = maximum
            self.minimum = minimum
            self.pending = pending
            self.terminating = terminating
        }

        private enum CodingKeys: String, CodingKey {
            case active = "ACTIVE"
            case desired = "DESIRED"
            case idle = "IDLE"
            case maximum = "MAXIMUM"
            case minimum = "MINIMUM"
            case pending = "PENDING"
            case terminating = "TERMINATING"
        }
    }

    public struct EC2InstanceLimit: AWSDecodableShape {
        /// The number of instances for the specified type and location that are currently being used by the AWS account.
        public let currentInstances: Int?
        /// The name of an EC2 instance type. See Amazon EC2 Instance Types for detailed descriptions.
        public let eC2InstanceType: EC2InstanceType?
        /// The number of instances that is allowed for the specified instance type and location.
        public let instanceLimit: Int?
        /// An AWS Region code, such as us-west-2.
        public let location: String?

        public init(currentInstances: Int? = nil, eC2InstanceType: EC2InstanceType? = nil, instanceLimit: Int? = nil, location: String? = nil) {
            self.currentInstances = currentInstances
            self.eC2InstanceType = eC2InstanceType
            self.instanceLimit = instanceLimit
            self.location = location
        }

        private enum CodingKeys: String, CodingKey {
            case currentInstances = "CurrentInstances"
            case eC2InstanceType = "EC2InstanceType"
            case instanceLimit = "InstanceLimit"
            case location = "Location"
        }
    }

    public struct Event: AWSDecodableShape {
        /// The type of event being logged.   Fleet creation events (ordered by fleet creation activity):    FLEET_CREATED -- A fleet resource was successfully created with a status of NEW. Event messaging includes the fleet ID.   FLEET_STATE_DOWNLOADING -- Fleet status changed from NEW to DOWNLOADING. The compressed build has started downloading to a fleet instance for installation.   FLEET_BINARY_DOWNLOAD_FAILED -- The build failed to download to the fleet instance.   FLEET_CREATION_EXTRACTING_BUILD – The game server build was successfully downloaded to an instance, and the build files are now being extracted from the uploaded build and saved to an instance. Failure at this stage prevents a fleet from moving to ACTIVE status. Logs for this stage display a list of the files that are extracted and saved on the instance. Access the logs by using the URL in PreSignedLogUrl.   FLEET_CREATION_RUNNING_INSTALLER – The game server build files were successfully extracted, and the GameLift is now running the build's install script (if one is included). Failure in this stage prevents a fleet from moving to ACTIVE status. Logs for this stage list the installation steps and whether or not the install completed successfully. Access the logs by using the URL in PreSignedLogUrl.    FLEET_CREATION_VALIDATING_RUNTIME_CONFIG -- The build process was successful, and the GameLift is now verifying that the game server launch paths, which are specified in the fleet's runtime configuration, exist. If any listed launch path exists, GameLift tries to launch a game server process and waits for the process to report ready. Failures in this stage prevent a fleet from moving to ACTIVE status. Logs for this stage list the launch paths in the runtime configuration and indicate whether each is found. Access the logs by using the URL in PreSignedLogUrl.     FLEET_STATE_VALIDATING -- Fleet status changed from DOWNLOADING to VALIDATING.   FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND -- Validation of the runtime configuration failed because the executable specified in a launch path does not exist on the instance.   FLEET_STATE_BUILDING -- Fleet status changed from VALIDATING to BUILDING.   FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE -- Validation of the runtime configuration failed because the executable specified in a launch path failed to run on the fleet instance.   FLEET_STATE_ACTIVATING -- Fleet status changed from BUILDING to ACTIVATING.    FLEET_ACTIVATION_FAILED - The fleet failed to successfully complete one of the steps in the fleet activation process. This event code indicates that the game build was successfully downloaded to a fleet instance, built, and validated, but was not able to start a server process. Learn more at  Debug Fleet Creation Issues    FLEET_STATE_ACTIVE -- The fleet's status changed from ACTIVATING to ACTIVE. The fleet is now ready to host game sessions.    VPC peering events:    FLEET_VPC_PEERING_SUCCEEDED -- A VPC peering connection has been established between the VPC for an GameLift fleet and a VPC in your AWS account.   FLEET_VPC_PEERING_FAILED -- A requested VPC peering connection has failed. Event details and status information (see DescribeVpcPeeringConnections) provide additional detail. A common reason for peering failure is that the two VPCs have overlapping CIDR blocks of IPv4 addresses. To resolve this, change the CIDR block for the VPC in your AWS account. For more information on VPC peering failures, see https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/invalid-peering-configurations.html    FLEET_VPC_PEERING_DELETED -- A VPC peering connection has been successfully deleted.    Spot instance events:    INSTANCE_INTERRUPTED -- A spot instance was interrupted by EC2 with a two-minute notification.    Other fleet events:    FLEET_SCALING_EVENT -- A change was made to the fleet's capacity settings (desired instances, minimum/maximum scaling limits). Event messaging includes the new capacity settings.   FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED -- A change was made to the fleet's game session protection policy setting. Event messaging includes both the old and new policy setting.    FLEET_DELETED -- A request to delete a fleet was initiated.   GENERIC_EVENT -- An unspecified event has occurred.
        public let eventCode: EventCode?
        /// A unique identifier for a fleet event.
        public let eventId: String?
        /// Time stamp indicating when this event occurred. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let eventTime: Date?
        /// Additional information related to the event.
        public let message: String?
        /// Location of stored logs with additional detail that is related to the event. This is useful for debugging issues. The URL is valid for 15 minutes. You can also access fleet creation logs through the GameLift console.
        public let preSignedLogUrl: String?
        /// A unique identifier for an event resource, such as a fleet ID.
        public let resourceId: String?

        public init(eventCode: EventCode? = nil, eventId: String? = nil, eventTime: Date? = nil, message: String? = nil, preSignedLogUrl: String? = nil, resourceId: String? = nil) {
            self.eventCode = eventCode
            self.eventId = eventId
            self.eventTime = eventTime
            self.message = message
            self.preSignedLogUrl = preSignedLogUrl
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case eventCode = "EventCode"
            case eventId = "EventId"
            case eventTime = "EventTime"
            case message = "Message"
            case preSignedLogUrl = "PreSignedLogUrl"
            case resourceId = "ResourceId"
        }
    }

    public struct FilterConfiguration: AWSEncodableShape & AWSDecodableShape {
        ///  A list of locations to allow game session placement in, in the form of AWS Region codes such as us-west-2.
        public let allowedLocations: [String]?

        public init(allowedLocations: [String]? = nil) {
            self.allowedLocations = allowedLocations
        }

        public func validate(name: String) throws {
            try self.allowedLocations?.forEach {
                try validate($0, name: "allowedLocations[]", parent: name, max: 64)
                try validate($0, name: "allowedLocations[]", parent: name, min: 1)
                try validate($0, name: "allowedLocations[]", parent: name, pattern: "^[a-z]+(-([a-z]+|\\d))*")
            }
            try self.validate(self.allowedLocations, name: "allowedLocations", parent: name, max: 100)
            try self.validate(self.allowedLocations, name: "allowedLocations", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case allowedLocations = "AllowedLocations"
        }
    }

    public struct FleetAttributes: AWSDecodableShape {
        ///  The Amazon Resource Name (ARN) associated with the GameLift build resource that is deployed on instances in this fleet. In a GameLift build ARN, the resource ID matches the BuildId value.
        public let buildArn: String?
        /// A unique identifier for the build resource that is deployed on instances in this fleet.
        public let buildId: String?
        /// Indicates whether a TLS/SSL certificate was generated for the fleet.
        public let certificateConfiguration: CertificateConfiguration?
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: Date?
        /// A human-readable description of the fleet.
        public let description: String?
        /// The Amazon Resource Name (ARN) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912. In a GameLift fleet ARN, the resource ID matches the FleetId value.
        public let fleetArn: String?
        /// A unique identifier for the fleet.
        public let fleetId: String?
        /// The kind of instances, On-Demand or Spot, that this fleet uses.
        public let fleetType: FleetType?
        /// A unique identifier for an AWS IAM role that manages access to your AWS services.  With an instance role ARN set, any application that runs on an instance in this fleet can assume the role,  including install scripts, server processes, and daemons (background processes). Create a role or look up a role's  ARN by using the IAM dashboard in the AWS Management Console. Learn more about using on-box credentials for your game servers at   Access external resources from a game server.
        public let instanceRoleArn: String?
        /// The EC2 instance type that determines the computing resources of each instance in the fleet. Instance type defines the CPU, memory, storage, and networking capacity. See Amazon EC2 Instance Types for detailed descriptions.
        public let instanceType: EC2InstanceType?
        ///  This parameter is no longer used. Game session log paths are now defined using the GameLift server API ProcessReady() logParameters. See more information in the Server API Reference.
        public let logPaths: [String]?
        /// Name of a metric group that metrics for this fleet are added to. In Amazon CloudWatch, you can view aggregated metrics for fleets that are in a metric group. A fleet can be included in only one metric group at a time.
        public let metricGroups: [String]?
        /// A descriptive label that is associated with a fleet. Fleet names do not need to be unique.
        public let name: String?
        /// The type of game session protection to set on all new instances that are started in the fleet.    NoProtection -- The game session can be terminated during a scale-down event.    FullProtection -- If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.
        public let newGameSessionProtectionPolicy: ProtectionPolicy?
        /// The operating system of the fleet's computing resources. A fleet's operating system is determined by the OS of the build or script that is deployed on this fleet.
        public let operatingSystem: OperatingSystem?
        /// The fleet policy that limits the number of game sessions an individual player can create over a span of time.
        public let resourceCreationLimitPolicy: ResourceCreationLimitPolicy?
        ///  The Amazon Resource Name (ARN) associated with the GameLift script resource that is deployed on instances in this fleet. In a GameLift script ARN, the resource ID matches the ScriptId value.
        public let scriptArn: String?
        /// A unique identifier for the Realtime script resource that is deployed on instances in this fleet.
        public let scriptId: String?
        ///  This parameter is no longer used. Server launch parameters are now defined  using the fleet's RuntimeConfiguration parameter. Requests that use this parameter instead continue to be valid.
        public let serverLaunchParameters: String?
        ///  This parameter is no longer used. Server launch paths are now defined  using the fleet's RuntimeConfiguration parameter. Requests that use this parameter instead continue to be valid.
        public let serverLaunchPath: String?
        /// Current status of the fleet. Possible fleet statuses include the following:    NEW -- A new fleet has been defined and desired instances is set to 1.     DOWNLOADING/VALIDATING/BUILDING/ACTIVATING -- GameLift is setting up the new fleet, creating new instances with the game build or Realtime script and starting server processes.    ACTIVE -- Hosts can now accept game sessions.    ERROR -- An error occurred when downloading, validating, building, or activating the fleet.    DELETING -- Hosts are responding to a delete fleet request.    TERMINATED -- The fleet no longer exists.
        public let status: FleetStatus?
        /// A list of fleet activity that has been suspended using StopFleetActions. This includes fleet auto-scaling.
        public let stoppedActions: [FleetAction]?
        /// A time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let terminationTime: Date?

        public init(buildArn: String? = nil, buildId: String? = nil, certificateConfiguration: CertificateConfiguration? = nil, creationTime: Date? = nil, description: String? = nil, fleetArn: String? = nil, fleetId: String? = nil, fleetType: FleetType? = nil, instanceRoleArn: String? = nil, instanceType: EC2InstanceType? = nil, logPaths: [String]? = nil, metricGroups: [String]? = nil, name: String? = nil, newGameSessionProtectionPolicy: ProtectionPolicy? = nil, operatingSystem: OperatingSystem? = nil, resourceCreationLimitPolicy: ResourceCreationLimitPolicy? = nil, scriptArn: String? = nil, scriptId: String? = nil, serverLaunchParameters: String? = nil, serverLaunchPath: String? = nil, status: FleetStatus? = nil, stoppedActions: [FleetAction]? = nil, terminationTime: Date? = nil) {
            self.buildArn = buildArn
            self.buildId = buildId
            self.certificateConfiguration = certificateConfiguration
            self.creationTime = creationTime
            self.description = description
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.fleetType = fleetType
            self.instanceRoleArn = instanceRoleArn
            self.instanceType = instanceType
            self.logPaths = logPaths
            self.metricGroups = metricGroups
            self.name = name
            self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
            self.operatingSystem = operatingSystem
            self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
            self.scriptArn = scriptArn
            self.scriptId = scriptId
            self.serverLaunchParameters = serverLaunchParameters
            self.serverLaunchPath = serverLaunchPath
            self.status = status
            self.stoppedActions = stoppedActions
            self.terminationTime = terminationTime
        }

        private enum CodingKeys: String, CodingKey {
            case buildArn = "BuildArn"
            case buildId = "BuildId"
            case certificateConfiguration = "CertificateConfiguration"
            case creationTime = "CreationTime"
            case description = "Description"
            case fleetArn = "FleetArn"
            case fleetId = "FleetId"
            case fleetType = "FleetType"
            case instanceRoleArn = "InstanceRoleArn"
            case instanceType = "InstanceType"
            case logPaths = "LogPaths"
            case metricGroups = "MetricGroups"
            case name = "Name"
            case newGameSessionProtectionPolicy = "NewGameSessionProtectionPolicy"
            case operatingSystem = "OperatingSystem"
            case resourceCreationLimitPolicy = "ResourceCreationLimitPolicy"
            case scriptArn = "ScriptArn"
            case scriptId = "ScriptId"
            case serverLaunchParameters = "ServerLaunchParameters"
            case serverLaunchPath = "ServerLaunchPath"
            case status = "Status"
            case stoppedActions = "StoppedActions"
            case terminationTime = "TerminationTime"
        }
    }

    public struct FleetCapacity: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
        public let fleetArn: String?
        /// A unique identifier for the fleet associated with the location.
        public let fleetId: String?
        /// The current instance count and capacity settings for the fleet location.
        public let instanceCounts: EC2InstanceCounts?
        /// The EC2 instance type that is used for all instances in a fleet. The instance type determines the computing resources in use, including CPU, memory, storage, and networking capacity. See Amazon EC2 Instance Types for detailed descriptions.
        public let instanceType: EC2InstanceType?
        /// The fleet location for the instance count information, expressed as an AWS Region code, such as us-west-2.
        public let location: String?

        public init(fleetArn: String? = nil, fleetId: String? = nil, instanceCounts: EC2InstanceCounts? = nil, instanceType: EC2InstanceType? = nil, location: String? = nil) {
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.instanceCounts = instanceCounts
            self.instanceType = instanceType
            self.location = location
        }

        private enum CodingKeys: String, CodingKey {
            case fleetArn = "FleetArn"
            case fleetId = "FleetId"
            case instanceCounts = "InstanceCounts"
            case instanceType = "InstanceType"
            case location = "Location"
        }
    }

    public struct FleetUtilization: AWSDecodableShape {
        /// The number of active game sessions that are currently being hosted across all instances in the fleet location.
        public let activeGameSessionCount: Int?
        /// The number of server processes in ACTIVE status that are currently running across all instances in the fleet location.
        public let activeServerProcessCount: Int?
        /// The number of active player sessions that are currently being hosted across all instances in the fleet location.
        public let currentPlayerSessionCount: Int?
        /// The Amazon Resource Name (ARN) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
        public let fleetArn: String?
        /// A unique identifier for the fleet associated with the location.
        public let fleetId: String?
        /// The fleet location for the fleet utilization information, expressed as an AWS Region code, such as us-west-2.
        public let location: String?
        /// The maximum number of players allowed across all game sessions that are currently being hosted across all instances in the fleet location.
        public let maximumPlayerSessionCount: Int?

        public init(activeGameSessionCount: Int? = nil, activeServerProcessCount: Int? = nil, currentPlayerSessionCount: Int? = nil, fleetArn: String? = nil, fleetId: String? = nil, location: String? = nil, maximumPlayerSessionCount: Int? = nil) {
            self.activeGameSessionCount = activeGameSessionCount
            self.activeServerProcessCount = activeServerProcessCount
            self.currentPlayerSessionCount = currentPlayerSessionCount
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.location = location
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
        }

        private enum CodingKeys: String, CodingKey {
            case activeGameSessionCount = "ActiveGameSessionCount"
            case activeServerProcessCount = "ActiveServerProcessCount"
            case currentPlayerSessionCount = "CurrentPlayerSessionCount"
            case fleetArn = "FleetArn"
            case fleetId = "FleetId"
            case location = "Location"
            case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        }
    }

    public struct GameProperty: AWSEncodableShape & AWSDecodableShape {
        /// The game property identifier.
        public let key: String
        /// The game property value.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.key, name: "key", parent: name, max: 32)
            try self.validate(self.value, name: "value", parent: name, max: 96)
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct GameServer: AWSDecodableShape {
        /// Indicates when an available game server has been reserved for gameplay but has not yet started hosting a game. Once it is claimed, the game server remains in CLAIMED status for a maximum of one minute. During this time, game clients connect to the game server to start the game and trigger the game server to update its utilization status. After one minute, the game server claim status reverts to null.
        public let claimStatus: GameServerClaimStatus?
        /// The port and IP address that must be used to establish a client connection to the game server.
        public let connectionInfo: String?
        /// A set of custom game server properties, formatted as a single string value. This data  is passed to a game client or service when it requests information on game servers using ListGameServers or ClaimGameServer.
        public let gameServerData: String?
        /// The ARN identifier for the game server group where the game server is located.
        public let gameServerGroupArn: String?
        /// A unique identifier for the game server group where the game server is running.  Use either the GameServerGroup name or ARN value.
        public let gameServerGroupName: String?
        /// A custom string that uniquely identifies the game server. Game server IDs are developer-defined and are unique across all game server groups in an AWS account.
        public let gameServerId: String?
        /// The unique identifier for the instance where the game server is running. This ID is available in the instance metadata. EC2 instance IDs  use a 17-character format, for example: i-1234567890abcdef0.
        public let instanceId: String?
        /// Timestamp that indicates the last time the game server was claimed with a ClaimGameServer request. The format is a number expressed in Unix time as milliseconds (for example "1469498468.057"). This value is used to calculate when a claimed game server's status should revert to null.
        public let lastClaimTime: Date?
        /// Timestamp that indicates the last time the game server was updated with health status using an UpdateGameServer request. The format is a number expressed in Unix time as milliseconds (for example "1469498468.057"). After game server registration, this property is only changed when a game server update specifies a health check value.
        public let lastHealthCheckTime: Date?
        /// Timestamp that indicates when the game server was created with a RegisterGameServer request. The format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let registrationTime: Date?
        /// Indicates whether the game server is currently available for new games or is busy. Possible statuses include:    AVAILABLE - The game server is available to be claimed. A game server that has been claimed remains in this status until it reports game hosting activity.     UTILIZED - The game server is currently hosting a game session with players.
        public let utilizationStatus: GameServerUtilizationStatus?

        public init(claimStatus: GameServerClaimStatus? = nil, connectionInfo: String? = nil, gameServerData: String? = nil, gameServerGroupArn: String? = nil, gameServerGroupName: String? = nil, gameServerId: String? = nil, instanceId: String? = nil, lastClaimTime: Date? = nil, lastHealthCheckTime: Date? = nil, registrationTime: Date? = nil, utilizationStatus: GameServerUtilizationStatus? = nil) {
            self.claimStatus = claimStatus
            self.connectionInfo = connectionInfo
            self.gameServerData = gameServerData
            self.gameServerGroupArn = gameServerGroupArn
            self.gameServerGroupName = gameServerGroupName
            self.gameServerId = gameServerId
            self.instanceId = instanceId
            self.lastClaimTime = lastClaimTime
            self.lastHealthCheckTime = lastHealthCheckTime
            self.registrationTime = registrationTime
            self.utilizationStatus = utilizationStatus
        }

        private enum CodingKeys: String, CodingKey {
            case claimStatus = "ClaimStatus"
            case connectionInfo = "ConnectionInfo"
            case gameServerData = "GameServerData"
            case gameServerGroupArn = "GameServerGroupArn"
            case gameServerGroupName = "GameServerGroupName"
            case gameServerId = "GameServerId"
            case instanceId = "InstanceId"
            case lastClaimTime = "LastClaimTime"
            case lastHealthCheckTime = "LastHealthCheckTime"
            case registrationTime = "RegistrationTime"
            case utilizationStatus = "UtilizationStatus"
        }
    }

    public struct GameServerGroup: AWSDecodableShape {
        /// A generated unique ID for the EC2 Auto Scaling group that is associated with this game server group.
        public let autoScalingGroupArn: String?
        /// Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances in the game server group. Method options include the following:    SPOT_ONLY - Only Spot Instances are used in the game server group. If Spot Instances are unavailable or not viable for game hosting, the game server group provides no hosting capacity until Spot Instances can again be used. Until then, no new instances are started, and the existing nonviable Spot Instances are terminated (after current gameplay ends) and are not replaced.    SPOT_PREFERRED - (default value) Spot Instances are used whenever available in the game server group. If Spot Instances are unavailable, the game server group continues to provide hosting capacity by falling back to On-Demand Instances. Existing nonviable Spot Instances are terminated (after current gameplay ends) and are replaced with new On-Demand Instances.    ON_DEMAND_ONLY - Only On-Demand Instances are used in the game server group. No Spot Instances are used, even when available, while this balancing strategy is in force.
        public let balancingStrategy: BalancingStrategy?
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: Date?
        /// A generated unique ID for the game server group.
        public let gameServerGroupArn: String?
        /// A developer-defined identifier for the game server group. The name is unique for each Region in each AWS account.
        public let gameServerGroupName: String?
        /// A flag that indicates whether instances in the game server group are protected  from early termination. Unprotected instances that have active game servers running might  be terminated during a scale-down event, causing players to be dropped from the game.  Protected instances cannot be terminated while there are active game servers running except  in the event of a forced game server group deletion (see ). An exception to this is with Spot  Instances, which can be terminated by AWS regardless of protection status.
        public let gameServerProtectionPolicy: GameServerProtectionPolicy?
        /// The set of EC2 instance types that GameLift FleetIQ can use when balancing and automatically scaling instances in the corresponding Auto Scaling group.
        public let instanceDefinitions: [InstanceDefinition]?
        /// A timestamp that indicates when this game server group was last updated.
        public let lastUpdatedTime: Date?
        /// The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
        public let roleArn: String?
        /// The current status of the game server group. Possible statuses include:    NEW - GameLift FleetIQ has validated the CreateGameServerGroup() request.     ACTIVATING - GameLift FleetIQ is setting up a game server group, which includes creating an Auto Scaling group in your AWS account.     ACTIVE - The game server group has been successfully created.     DELETE_SCHEDULED - A request to delete the game server group has been received.     DELETING - GameLift FleetIQ has received a valid DeleteGameServerGroup() request and is processing it. GameLift FleetIQ must first complete and release hosts before it deletes the Auto Scaling group and the game server group.     DELETED - The game server group has been successfully deleted.     ERROR - The asynchronous processes of activating or deleting a game server group has failed, resulting in an error state.
        public let status: GameServerGroupStatus?
        /// Additional information about the current game server group status. This information might provide additional insight on groups that are in ERROR status.
        public let statusReason: String?
        /// A list of activities that are currently suspended for this game server group. If this property is empty, all activities are occurring.
        public let suspendedActions: [GameServerGroupAction]?

        public init(autoScalingGroupArn: String? = nil, balancingStrategy: BalancingStrategy? = nil, creationTime: Date? = nil, gameServerGroupArn: String? = nil, gameServerGroupName: String? = nil, gameServerProtectionPolicy: GameServerProtectionPolicy? = nil, instanceDefinitions: [InstanceDefinition]? = nil, lastUpdatedTime: Date? = nil, roleArn: String? = nil, status: GameServerGroupStatus? = nil, statusReason: String? = nil, suspendedActions: [GameServerGroupAction]? = nil) {
            self.autoScalingGroupArn = autoScalingGroupArn
            self.balancingStrategy = balancingStrategy
            self.creationTime = creationTime
            self.gameServerGroupArn = gameServerGroupArn
            self.gameServerGroupName = gameServerGroupName
            self.gameServerProtectionPolicy = gameServerProtectionPolicy
            self.instanceDefinitions = instanceDefinitions
            self.lastUpdatedTime = lastUpdatedTime
            self.roleArn = roleArn
            self.status = status
            self.statusReason = statusReason
            self.suspendedActions = suspendedActions
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupArn = "AutoScalingGroupArn"
            case balancingStrategy = "BalancingStrategy"
            case creationTime = "CreationTime"
            case gameServerGroupArn = "GameServerGroupArn"
            case gameServerGroupName = "GameServerGroupName"
            case gameServerProtectionPolicy = "GameServerProtectionPolicy"
            case instanceDefinitions = "InstanceDefinitions"
            case lastUpdatedTime = "LastUpdatedTime"
            case roleArn = "RoleArn"
            case status = "Status"
            case statusReason = "StatusReason"
            case suspendedActions = "SuspendedActions"
        }
    }

    public struct GameServerGroupAutoScalingPolicy: AWSEncodableShape {
        /// Length of time, in seconds, it takes for a new instance to start new game server processes and register with GameLift FleetIQ. Specifying a warm-up time can be useful, particularly with game servers that take a long time to start up, because it avoids prematurely starting new instances.
        public let estimatedInstanceWarmup: Int?
        /// Settings for a target-based scaling policy applied to Auto Scaling group. These settings are used to create a target-based policy that tracks the GameLift FleetIQ metric "PercentUtilizedGameServers" and specifies a target value for the metric. As player usage changes, the policy triggers to adjust the game server group capacity so that the metric returns to the target value.
        public let targetTrackingConfiguration: TargetTrackingConfiguration

        public init(estimatedInstanceWarmup: Int? = nil, targetTrackingConfiguration: TargetTrackingConfiguration) {
            self.estimatedInstanceWarmup = estimatedInstanceWarmup
            self.targetTrackingConfiguration = targetTrackingConfiguration
        }

        public func validate(name: String) throws {
            try self.validate(self.estimatedInstanceWarmup, name: "estimatedInstanceWarmup", parent: name, min: 1)
            try self.targetTrackingConfiguration.validate(name: "\(name).targetTrackingConfiguration")
        }

        private enum CodingKeys: String, CodingKey {
            case estimatedInstanceWarmup = "EstimatedInstanceWarmup"
            case targetTrackingConfiguration = "TargetTrackingConfiguration"
        }
    }

    public struct GameServerInstance: AWSDecodableShape {
        /// A generated unique identifier for the game server group that includes the game server instance.
        public let gameServerGroupArn: String?
        /// A developer-defined identifier for the game server group that includes the game server instance. The name is unique for each Region in each AWS account.
        public let gameServerGroupName: String?
        /// The unique identifier for the instance where the game server is running. This ID is available in the instance metadata. EC2 instance IDs  use a 17-character format, for example: i-1234567890abcdef0.
        public let instanceId: String?
        ///  Current status of the game server instance.      ACTIVE -- The instance is viable for hosting  game servers.     DRAINING -- The instance is not viable for hosting game servers. Existing game servers are in the process of ending, and new game servers are not started on this instance unless no other resources are available. When the instance is put in DRAINING, a new instance is started up to  replace it. Once the instance has no UTILIZED game servers, it will be terminated  in favor of the new instance.    SPOT_TERMINATING -- The instance is in the process of shutting down due to a Spot instance interruption. No new game servers are started on this instance.
        public let instanceStatus: GameServerInstanceStatus?

        public init(gameServerGroupArn: String? = nil, gameServerGroupName: String? = nil, instanceId: String? = nil, instanceStatus: GameServerInstanceStatus? = nil) {
            self.gameServerGroupArn = gameServerGroupArn
            self.gameServerGroupName = gameServerGroupName
            self.instanceId = instanceId
            self.instanceStatus = instanceStatus
        }

        private enum CodingKeys: String, CodingKey {
            case gameServerGroupArn = "GameServerGroupArn"
            case gameServerGroupName = "GameServerGroupName"
            case instanceId = "InstanceId"
            case instanceStatus = "InstanceStatus"
        }
    }

    public struct GameSession: AWSDecodableShape {
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: Date?
        /// A unique identifier for a player. This ID is used to enforce a resource protection policy (if one exists), that limits the number of game sessions a player can create.
        public let creatorId: String?
        /// Number of players currently in the game session.
        public let currentPlayerSessionCount: Int?
        /// The DNS identifier assigned to the instance that is running the game session. Values have the following format:    TLS-enabled fleets: ..amazongamelift.com.   Non-TLS-enabled fleets: ec2-.compute.amazonaws.com. (See Amazon EC2 Instance IP Addressing.)   When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.
        public let dnsName: String?
        ///  The Amazon Resource Name (ARN) associated with the GameLift fleet that this game session is running on.
        public let fleetArn: String?
        /// A unique identifier for the fleet that the game session is running on.
        public let fleetId: String?
        /// A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the  GameSession object with a request to start a new game session. You can search for active game sessions based on this custom data with SearchGameSessions.
        public let gameProperties: [GameProperty]?
        /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the  GameSession object with a request to start a new game session.
        public let gameSessionData: String?
        /// A unique identifier for the game session. A game session ARN has the following format:  arn:aws:gamelift:::gamesession//.
        public let gameSessionId: String?
        /// The IP address of the game session. To connect to a GameLift game server, an app needs both the IP address and port number.
        public let ipAddress: String?
        /// The fleet location where the game session is running. This value might specify the fleet's home Region or a remote location. Location is expressed as an AWS Region code such as us-west-2.
        public let location: String?
        /// Information about the matchmaking process that was used to create the game session. It is in JSON syntax, formatted as a string. In addition the matchmaking configuration used, it contains data on all players assigned to the match, including player attributes and team assignments. For more details on matchmaker data, see Match Data. Matchmaker data is useful when requesting match backfills, and is updated whenever new players are added during a successful backfill (see StartMatchBackfill).
        public let matchmakerData: String?
        /// The maximum number of players that can be connected simultaneously to the game session.
        public let maximumPlayerSessionCount: Int?
        /// A descriptive label that is associated with a game session. Session names do not need to be unique.
        public let name: String?
        /// Indicates whether or not the game session is accepting new players.
        public let playerSessionCreationPolicy: PlayerSessionCreationPolicy?
        /// The port number for the game session. To connect to a GameLift game server, an app needs both the IP address and port number.
        public let port: Int?
        /// Current status of the game session. A game session must have an ACTIVE status to have player sessions.
        public let status: GameSessionStatus?
        /// Provides additional information about game session status. INTERRUPTED indicates that the game session was hosted on a spot instance that was reclaimed, causing the active game session to be terminated.
        public let statusReason: GameSessionStatusReason?
        /// A time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let terminationTime: Date?

        public init(creationTime: Date? = nil, creatorId: String? = nil, currentPlayerSessionCount: Int? = nil, dnsName: String? = nil, fleetArn: String? = nil, fleetId: String? = nil, gameProperties: [GameProperty]? = nil, gameSessionData: String? = nil, gameSessionId: String? = nil, ipAddress: String? = nil, location: String? = nil, matchmakerData: String? = nil, maximumPlayerSessionCount: Int? = nil, name: String? = nil, playerSessionCreationPolicy: PlayerSessionCreationPolicy? = nil, port: Int? = nil, status: GameSessionStatus? = nil, statusReason: GameSessionStatusReason? = nil, terminationTime: Date? = nil) {
            self.creationTime = creationTime
            self.creatorId = creatorId
            self.currentPlayerSessionCount = currentPlayerSessionCount
            self.dnsName = dnsName
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.gameProperties = gameProperties
            self.gameSessionData = gameSessionData
            self.gameSessionId = gameSessionId
            self.ipAddress = ipAddress
            self.location = location
            self.matchmakerData = matchmakerData
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.name = name
            self.playerSessionCreationPolicy = playerSessionCreationPolicy
            self.port = port
            self.status = status
            self.statusReason = statusReason
            self.terminationTime = terminationTime
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case creatorId = "CreatorId"
            case currentPlayerSessionCount = "CurrentPlayerSessionCount"
            case dnsName = "DnsName"
            case fleetArn = "FleetArn"
            case fleetId = "FleetId"
            case gameProperties = "GameProperties"
            case gameSessionData = "GameSessionData"
            case gameSessionId = "GameSessionId"
            case ipAddress = "IpAddress"
            case location = "Location"
            case matchmakerData = "MatchmakerData"
            case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
            case name = "Name"
            case playerSessionCreationPolicy = "PlayerSessionCreationPolicy"
            case port = "Port"
            case status = "Status"
            case statusReason = "StatusReason"
            case terminationTime = "TerminationTime"
        }
    }

    public struct GameSessionConnectionInfo: AWSDecodableShape {
        /// The DNS identifier assigned to the instance that is running the game session. Values have the following format:    TLS-enabled fleets: ..amazongamelift.com.   Non-TLS-enabled fleets: ec2-.compute.amazonaws.com. (See Amazon EC2 Instance IP Addressing.)   When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.
        public let dnsName: String?
        /// A unique identifier for the game session. Use the game session ID.
        public let gameSessionArn: String?
        /// The IP address of the game session. To connect to a GameLift game server, an app needs both the IP address and port number.
        public let ipAddress: String?
        /// A collection of player session IDs, one for each player ID that was included in the original matchmaking request.
        public let matchedPlayerSessions: [MatchedPlayerSession]?
        /// The port number for the game session. To connect to a GameLift game server, an app needs both the IP address and port number.
        public let port: Int?

        public init(dnsName: String? = nil, gameSessionArn: String? = nil, ipAddress: String? = nil, matchedPlayerSessions: [MatchedPlayerSession]? = nil, port: Int? = nil) {
            self.dnsName = dnsName
            self.gameSessionArn = gameSessionArn
            self.ipAddress = ipAddress
            self.matchedPlayerSessions = matchedPlayerSessions
            self.port = port
        }

        private enum CodingKeys: String, CodingKey {
            case dnsName = "DnsName"
            case gameSessionArn = "GameSessionArn"
            case ipAddress = "IpAddress"
            case matchedPlayerSessions = "MatchedPlayerSessions"
            case port = "Port"
        }
    }

    public struct GameSessionDetail: AWSDecodableShape {
        /// Object that describes a game session.
        public let gameSession: GameSession?
        /// Current status of protection for the game session.    NoProtection -- The game session can be terminated during a scale-down event.    FullProtection -- If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.
        public let protectionPolicy: ProtectionPolicy?

        public init(gameSession: GameSession? = nil, protectionPolicy: ProtectionPolicy? = nil) {
            self.gameSession = gameSession
            self.protectionPolicy = protectionPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case gameSession = "GameSession"
            case protectionPolicy = "ProtectionPolicy"
        }
    }

    public struct GameSessionPlacement: AWSDecodableShape {
        /// The DNS identifier assigned to the instance that is running the game session. Values have the following format:    TLS-enabled fleets: ..amazongamelift.com.   Non-TLS-enabled fleets: ec2-.compute.amazonaws.com. (See Amazon EC2 Instance IP Addressing.)   When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.
        public let dnsName: String?
        /// Time stamp indicating when this request was completed, canceled, or timed out.
        public let endTime: Date?
        /// A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the  GameSession object with a request to start a new game session (see Start a Game Session).
        public let gameProperties: [GameProperty]?
        /// Identifier for the game session created by this placement request. This value is set once the new game session is placed (placement status is FULFILLED). This identifier is unique across all Regions. You can use this value as a GameSessionId value as needed.
        public let gameSessionArn: String?
        /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the  GameSession object with a request to start a new game session (see Start a Game Session).
        public let gameSessionData: String?
        /// A unique identifier for the game session. This value is set once the new game session is placed (placement status is FULFILLED).
        public let gameSessionId: String?
        /// A descriptive label that is associated with a game session. Session names do not need to be unique.
        public let gameSessionName: String?
        /// A descriptive label that is associated with game session queue. Queue names must be unique within each Region.
        public let gameSessionQueueName: String?
        /// Name of the Region where the game session created by this placement request is running. This value is set once the new game session is placed (placement status is FULFILLED).
        public let gameSessionRegion: String?
        /// The IP address of the game session. To connect to a GameLift game server, an app needs both the IP address and port number. This value is set once the new game session is placed (placement status is FULFILLED).
        public let ipAddress: String?
        /// Information on the matchmaking process for this game. Data is in JSON syntax, formatted as a string. It identifies the matchmaking configuration used to create the match, and contains data on all players assigned to the match, including player attributes and team assignments. For more details on matchmaker data, see Match Data.
        public let matchmakerData: String?
        /// The maximum number of players that can be connected simultaneously to the game session.
        public let maximumPlayerSessionCount: Int?
        /// A collection of information on player sessions created in response to the game session placement request. These player sessions are created only once a new game session is successfully placed (placement status is FULFILLED). This information includes the player ID (as provided in the placement request) and the corresponding player session ID. Retrieve full player sessions by calling DescribePlayerSessions with the player session ID.
        public let placedPlayerSessions: [PlacedPlayerSession]?
        /// A unique identifier for a game session placement.
        public let placementId: String?
        /// A set of values, expressed in milliseconds, that indicates the amount of latency that a player experiences when connected to AWS Regions.
        public let playerLatencies: [PlayerLatency]?
        /// The port number for the game session. To connect to a GameLift game server, an app needs both the IP address and port number. This value is set once the new game session is placed (placement status is FULFILLED).
        public let port: Int?
        /// Time stamp indicating when this request was placed in the queue. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let startTime: Date?
        /// Current status of the game session placement request.    PENDING -- The placement request is currently in the queue waiting to be processed.    FULFILLED -- A new game session and player sessions (if requested) have been successfully created. Values for GameSessionArn and GameSessionRegion are available.     CANCELLED -- The placement request was canceled with a call to StopGameSessionPlacement.    TIMED_OUT -- A new game session was not successfully created before the time limit expired. You can resubmit the placement request as needed.    FAILED -- GameLift is not able to complete the  process of placing the game session. Common reasons are the  game session terminated before the placement process was completed, or an unexpected internal error.
        public let status: GameSessionPlacementState?

        public init(dnsName: String? = nil, endTime: Date? = nil, gameProperties: [GameProperty]? = nil, gameSessionArn: String? = nil, gameSessionData: String? = nil, gameSessionId: String? = nil, gameSessionName: String? = nil, gameSessionQueueName: String? = nil, gameSessionRegion: String? = nil, ipAddress: String? = nil, matchmakerData: String? = nil, maximumPlayerSessionCount: Int? = nil, placedPlayerSessions: [PlacedPlayerSession]? = nil, placementId: String? = nil, playerLatencies: [PlayerLatency]? = nil, port: Int? = nil, startTime: Date? = nil, status: GameSessionPlacementState? = nil) {
            self.dnsName = dnsName
            self.endTime = endTime
            self.gameProperties = gameProperties
            self.gameSessionArn = gameSessionArn
            self.gameSessionData = gameSessionData
            self.gameSessionId = gameSessionId
            self.gameSessionName = gameSessionName
            self.gameSessionQueueName = gameSessionQueueName
            self.gameSessionRegion = gameSessionRegion
            self.ipAddress = ipAddress
            self.matchmakerData = matchmakerData
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.placedPlayerSessions = placedPlayerSessions
            self.placementId = placementId
            self.playerLatencies = playerLatencies
            self.port = port
            self.startTime = startTime
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case dnsName = "DnsName"
            case endTime = "EndTime"
            case gameProperties = "GameProperties"
            case gameSessionArn = "GameSessionArn"
            case gameSessionData = "GameSessionData"
            case gameSessionId = "GameSessionId"
            case gameSessionName = "GameSessionName"
            case gameSessionQueueName = "GameSessionQueueName"
            case gameSessionRegion = "GameSessionRegion"
            case ipAddress = "IpAddress"
            case matchmakerData = "MatchmakerData"
            case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
            case placedPlayerSessions = "PlacedPlayerSessions"
            case placementId = "PlacementId"
            case playerLatencies = "PlayerLatencies"
            case port = "Port"
            case startTime = "StartTime"
            case status = "Status"
        }
    }

    public struct GameSessionQueue: AWSDecodableShape {
        ///  Information that is added to all events that are related to this game session queue.
        public let customEventData: String?
        /// A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue.  Destinations are identified by either a fleet ARN or a fleet alias ARN, and are listed in order of placement preference.
        public let destinations: [GameSessionQueueDestination]?
        /// A list of locations where a queue is allowed to place new game sessions. Locations  are specified in the form of AWS Region codes, such as us-west-2. If this parameter is  not set, game sessions can be placed in any queue location.
        public let filterConfiguration: FilterConfiguration?
        /// The Amazon Resource Name (ARN) that is assigned to a GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::gamesessionqueue/.   In a GameLift game session queue ARN, the resource ID matches the Name value.
        public let gameSessionQueueArn: String?
        /// A descriptive label that is associated with game session queue. Queue names must be unique within each Region.
        public let name: String?
        /// An SNS topic ARN that is set up to receive game session placement notifications. See  Setting up notifications for game session placement.
        public let notificationTarget: String?
        /// A set of policies that act as a sliding cap on player latency. FleetIQ works to deliver low latency for most players in a game session. These policies ensure that no individual player can be placed into a game with unreasonably high latency. Use multiple policies to gradually relax latency requirements a step at a time. Multiple policies are applied based on their maximum allowed latency, starting with the lowest value.
        public let playerLatencyPolicies: [PlayerLatencyPolicy]?
        /// Custom settings to use when prioritizing destinations and locations for game session placements. This  configuration replaces the FleetIQ default prioritization process. Priority types that are not explicitly  named will be automatically applied at the end of the prioritization process.
        public let priorityConfiguration: PriorityConfiguration?
        /// The maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a TIMED_OUT status.
        public let timeoutInSeconds: Int?

        public init(customEventData: String? = nil, destinations: [GameSessionQueueDestination]? = nil, filterConfiguration: FilterConfiguration? = nil, gameSessionQueueArn: String? = nil, name: String? = nil, notificationTarget: String? = nil, playerLatencyPolicies: [PlayerLatencyPolicy]? = nil, priorityConfiguration: PriorityConfiguration? = nil, timeoutInSeconds: Int? = nil) {
            self.customEventData = customEventData
            self.destinations = destinations
            self.filterConfiguration = filterConfiguration
            self.gameSessionQueueArn = gameSessionQueueArn
            self.name = name
            self.notificationTarget = notificationTarget
            self.playerLatencyPolicies = playerLatencyPolicies
            self.priorityConfiguration = priorityConfiguration
            self.timeoutInSeconds = timeoutInSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case customEventData = "CustomEventData"
            case destinations = "Destinations"
            case filterConfiguration = "FilterConfiguration"
            case gameSessionQueueArn = "GameSessionQueueArn"
            case name = "Name"
            case notificationTarget = "NotificationTarget"
            case playerLatencyPolicies = "PlayerLatencyPolicies"
            case priorityConfiguration = "PriorityConfiguration"
            case timeoutInSeconds = "TimeoutInSeconds"
        }
    }

    public struct GameSessionQueueDestination: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Resource Name (ARN) that is assigned to fleet or fleet alias. ARNs, which include a fleet ID or alias ID and a Region name, provide a unique identifier across all Regions.
        public let destinationArn: String?

        public init(destinationArn: String? = nil) {
            self.destinationArn = destinationArn
        }

        public func validate(name: String) throws {
            try self.validate(self.destinationArn, name: "destinationArn", parent: name, max: 256)
            try self.validate(self.destinationArn, name: "destinationArn", parent: name, min: 1)
            try self.validate(self.destinationArn, name: "destinationArn", parent: name, pattern: "[a-zA-Z0-9:/-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case destinationArn = "DestinationArn"
        }
    }

    public struct GetGameSessionLogUrlInput: AWSEncodableShape {
        /// A unique identifier for the game session to get logs for.
        public let gameSessionId: String

        public init(gameSessionId: String) {
            self.gameSessionId = gameSessionId
        }

        public func validate(name: String) throws {
            try self.validate(self.gameSessionId, name: "gameSessionId", parent: name, max: 256)
            try self.validate(self.gameSessionId, name: "gameSessionId", parent: name, min: 1)
            try self.validate(self.gameSessionId, name: "gameSessionId", parent: name, pattern: "[a-zA-Z0-9:/-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionId = "GameSessionId"
        }
    }

    public struct GetGameSessionLogUrlOutput: AWSDecodableShape {
        /// Location of the requested game session logs, available for download. This URL is valid for 15 minutes, after which S3 will reject any download request using this URL. You can request a new URL any time within the 14-day period that the logs are retained.
        public let preSignedUrl: String?

        public init(preSignedUrl: String? = nil) {
            self.preSignedUrl = preSignedUrl
        }

        private enum CodingKeys: String, CodingKey {
            case preSignedUrl = "PreSignedUrl"
        }
    }

    public struct GetInstanceAccessInput: AWSEncodableShape {
        /// A unique identifier for the fleet that contains the instance you want access to. You can use either the fleet ID or ARN value. The fleet can be in any of the following statuses: ACTIVATING, ACTIVE, or ERROR. Fleets with an ERROR status may be accessible for a short time before they are deleted.
        public let fleetId: String
        /// A unique identifier for the instance you want to get access to. You can access an instance in any status.
        public let instanceId: String

        public init(fleetId: String, instanceId: String) {
            self.fleetId = fleetId
            self.instanceId = instanceId
        }

        public func validate(name: String) throws {
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            try self.validate(self.instanceId, name: "instanceId", parent: name, pattern: "[a-zA-Z0-9\\.-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case instanceId = "InstanceId"
        }
    }

    public struct GetInstanceAccessOutput: AWSDecodableShape {
        /// The connection information for a fleet instance, including IP address and access credentials.
        public let instanceAccess: InstanceAccess?

        public init(instanceAccess: InstanceAccess? = nil) {
            self.instanceAccess = instanceAccess
        }

        private enum CodingKeys: String, CodingKey {
            case instanceAccess = "InstanceAccess"
        }
    }

    public struct Instance: AWSDecodableShape {
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: Date?
        /// The DNS identifier assigned to the instance that is running the game session. Values have the following format:    TLS-enabled fleets: ..amazongamelift.com.   Non-TLS-enabled fleets: ec2-.compute.amazonaws.com. (See Amazon EC2 Instance IP Addressing.)   When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.
        public let dnsName: String?
        /// The Amazon Resource Name (ARN) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
        public let fleetArn: String?
        /// A unique identifier for the fleet that the instance is in.
        public let fleetId: String?
        /// A unique identifier for the instance.
        public let instanceId: String?
        /// IP address that is assigned to the instance.
        public let ipAddress: String?
        /// The fleet location of the instance, expressed as an AWS Region code, such as us-west-2.
        public let location: String?
        /// Operating system that is running on this instance.
        public let operatingSystem: OperatingSystem?
        /// Current status of the instance. Possible statuses include the following:    PENDING -- The instance is in the process of being created and launching server processes as defined in the fleet's run-time configuration.     ACTIVE -- The instance has been successfully created and at least one server process has successfully launched and reported back to GameLift that it is ready to host a game session. The instance is now considered ready to host game sessions.     TERMINATING -- The instance is in the process of shutting down. This may happen to reduce capacity during a scaling down event or to recycle resources in the event of a problem.
        public let status: InstanceStatus?
        /// EC2 instance type that defines the computing resources of this instance.
        public let type: EC2InstanceType?

        public init(creationTime: Date? = nil, dnsName: String? = nil, fleetArn: String? = nil, fleetId: String? = nil, instanceId: String? = nil, ipAddress: String? = nil, location: String? = nil, operatingSystem: OperatingSystem? = nil, status: InstanceStatus? = nil, type: EC2InstanceType? = nil) {
            self.creationTime = creationTime
            self.dnsName = dnsName
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.instanceId = instanceId
            self.ipAddress = ipAddress
            self.location = location
            self.operatingSystem = operatingSystem
            self.status = status
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case dnsName = "DnsName"
            case fleetArn = "FleetArn"
            case fleetId = "FleetId"
            case instanceId = "InstanceId"
            case ipAddress = "IpAddress"
            case location = "Location"
            case operatingSystem = "OperatingSystem"
            case status = "Status"
            case type = "Type"
        }
    }

    public struct InstanceAccess: AWSDecodableShape {
        /// Credentials required to access the instance.
        public let credentials: InstanceCredentials?
        /// A unique identifier for the fleet containing the instance being accessed.
        public let fleetId: String?
        /// A unique identifier for the instance being accessed.
        public let instanceId: String?
        /// IP address that is assigned to the instance.
        public let ipAddress: String?
        /// Operating system that is running on the instance.
        public let operatingSystem: OperatingSystem?

        public init(credentials: InstanceCredentials? = nil, fleetId: String? = nil, instanceId: String? = nil, ipAddress: String? = nil, operatingSystem: OperatingSystem? = nil) {
            self.credentials = credentials
            self.fleetId = fleetId
            self.instanceId = instanceId
            self.ipAddress = ipAddress
            self.operatingSystem = operatingSystem
        }

        private enum CodingKeys: String, CodingKey {
            case credentials = "Credentials"
            case fleetId = "FleetId"
            case instanceId = "InstanceId"
            case ipAddress = "IpAddress"
            case operatingSystem = "OperatingSystem"
        }
    }

    public struct InstanceCredentials: AWSDecodableShape {
        /// Secret string. For Windows instances, the secret is a password for use with Windows Remote Desktop. For Linux instances, it is a private key (which must be saved as a .pem file) for use with SSH.
        public let secret: String?
        /// User login string.
        public let userName: String?

        public init(secret: String? = nil, userName: String? = nil) {
            self.secret = secret
            self.userName = userName
        }

        private enum CodingKeys: String, CodingKey {
            case secret = "Secret"
            case userName = "UserName"
        }
    }

    public struct InstanceDefinition: AWSEncodableShape & AWSDecodableShape {
        /// An EC2 instance type designation.
        public let instanceType: GameServerGroupInstanceType
        /// Instance weighting that indicates how much this instance type contributes to the total capacity of a game server group. Instance weights are used by GameLift FleetIQ to calculate the instance type's cost per unit hour and better identify the most cost-effective options. For detailed information on weighting instance capacity, see Instance Weighting in the Amazon EC2 Auto Scaling User Guide. Default value is "1".
        public let weightedCapacity: String?

        public init(instanceType: GameServerGroupInstanceType, weightedCapacity: String? = nil) {
            self.instanceType = instanceType
            self.weightedCapacity = weightedCapacity
        }

        public func validate(name: String) throws {
            try self.validate(self.weightedCapacity, name: "weightedCapacity", parent: name, max: 3)
            try self.validate(self.weightedCapacity, name: "weightedCapacity", parent: name, min: 1)
            try self.validate(self.weightedCapacity, name: "weightedCapacity", parent: name, pattern: "^[\\u0031-\\u0039][\\u0030-\\u0039]{0,2}$")
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "InstanceType"
            case weightedCapacity = "WeightedCapacity"
        }
    }

    public struct IpPermission: AWSEncodableShape & AWSDecodableShape {
        /// A starting value for a range of allowed port numbers.
        public let fromPort: Int
        /// A range of allowed IP addresses. This value must be expressed in CIDR notation. Example: "000.000.000.000/[subnet mask]" or optionally the shortened version "0.0.0.0/[subnet mask]".
        public let ipRange: String
        /// The network communication protocol used by the fleet.
        public let `protocol`: IpProtocol
        /// An ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than FromPort.
        public let toPort: Int

        public init(fromPort: Int, ipRange: String, protocol: IpProtocol, toPort: Int) {
            self.fromPort = fromPort
            self.ipRange = ipRange
            self.`protocol` = `protocol`
            self.toPort = toPort
        }

        public func validate(name: String) throws {
            try self.validate(self.fromPort, name: "fromPort", parent: name, max: 60000)
            try self.validate(self.fromPort, name: "fromPort", parent: name, min: 1)
            try self.validate(self.ipRange, name: "ipRange", parent: name, pattern: "[^\\s]+")
            try self.validate(self.toPort, name: "toPort", parent: name, max: 60000)
            try self.validate(self.toPort, name: "toPort", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case fromPort = "FromPort"
            case ipRange = "IpRange"
            case `protocol` = "Protocol"
            case toPort = "ToPort"
        }
    }

    public struct LaunchTemplateSpecification: AWSEncodableShape {
        /// A unique identifier for an existing EC2 launch template.
        public let launchTemplateId: String?
        /// A readable identifier for an existing EC2 launch template.
        public let launchTemplateName: String?
        /// The version of the EC2 launch template to use. If no version is specified, the default version will be used. With Amazon EC2, you can specify a default version for a launch template. If none is set, the default is the first version created.
        public let version: String?

        public init(launchTemplateId: String? = nil, launchTemplateName: String? = nil, version: String? = nil) {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.version = version
        }

        public func validate(name: String) throws {
            try self.validate(self.launchTemplateId, name: "launchTemplateId", parent: name, max: 255)
            try self.validate(self.launchTemplateId, name: "launchTemplateId", parent: name, min: 1)
            try self.validate(self.launchTemplateId, name: "launchTemplateId", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]+")
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, max: 128)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, min: 3)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, pattern: "[a-zA-Z0-9\\(\\)\\.\\-/_]+")
            try self.validate(self.version, name: "version", parent: name, max: 128)
            try self.validate(self.version, name: "version", parent: name, min: 1)
            try self.validate(self.version, name: "version", parent: name, pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]+")
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
            case version = "Version"
        }
    }

    public struct ListAliasesInput: AWSEncodableShape {
        /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int?
        /// A descriptive label that is associated with an alias. Alias names do not need to be unique.
        public let name: String?
        /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?
        /// The routing type to filter results on. Use this parameter to retrieve only aliases with a certain routing type. To retrieve all aliases, leave this parameter empty. Possible routing types include the following:    SIMPLE -- The alias resolves to one specific fleet. Use this type when routing to active fleets.    TERMINAL -- The alias does not resolve to a fleet but instead can be used to display a message to the user. A terminal alias throws a TerminalRoutingStrategyException with the RoutingStrategy message embedded.
        public let routingStrategyType: RoutingStrategyType?

        public init(limit: Int? = nil, name: String? = nil, nextToken: String? = nil, routingStrategyType: RoutingStrategyType? = nil) {
            self.limit = limit
            self.name = name
            self.nextToken = nextToken
            self.routingStrategyType = routingStrategyType
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case name = "Name"
            case nextToken = "NextToken"
            case routingStrategyType = "RoutingStrategyType"
        }
    }

    public struct ListAliasesOutput: AWSDecodableShape {
        /// A collection of alias resources that match the request parameters.
        public let aliases: [Alias]?
        /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(aliases: [Alias]? = nil, nextToken: String? = nil) {
            self.aliases = aliases
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case aliases = "Aliases"
            case nextToken = "NextToken"
        }
    }

    public struct ListBuildsInput: AWSEncodableShape {
        /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int?
        /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?
        /// Build status to filter results by. To retrieve all builds, leave this parameter empty. Possible build statuses include the following:    INITIALIZED -- A new build has been defined, but no files have been uploaded. You cannot create fleets for builds that are in this status. When a build is successfully created, the build status is set to this value.     READY -- The game build has been successfully uploaded. You can now create new fleets for this build.    FAILED -- The game build upload failed. You cannot create new fleets for this build.
        public let status: BuildStatus?

        public init(limit: Int? = nil, nextToken: String? = nil, status: BuildStatus? = nil) {
            self.limit = limit
            self.nextToken = nextToken
            self.status = status
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextToken = "NextToken"
            case status = "Status"
        }
    }

    public struct ListBuildsOutput: AWSDecodableShape {
        /// A collection of build resources that match the request.
        public let builds: [Build]?
        /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(builds: [Build]? = nil, nextToken: String? = nil) {
            self.builds = builds
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case builds = "Builds"
            case nextToken = "NextToken"
        }
    }

    public struct ListFleetsInput: AWSEncodableShape {
        /// A unique identifier for the build to request fleets for. Use this parameter to return only fleets using a specified build. Use either the build ID or ARN value.
        public let buildId: String?
        /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int?
        /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?
        /// A unique identifier for the Realtime script to request fleets for. Use this parameter to return only fleets using a specified script. Use either the script ID or ARN value.
        public let scriptId: String?

        public init(buildId: String? = nil, limit: Int? = nil, nextToken: String? = nil, scriptId: String? = nil) {
            self.buildId = buildId
            self.limit = limit
            self.nextToken = nextToken
            self.scriptId = scriptId
        }

        public func validate(name: String) throws {
            try self.validate(self.buildId, name: "buildId", parent: name, pattern: "^build-\\S+|^arn:.*:build\\/build-\\S+")
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1024)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.scriptId, name: "scriptId", parent: name, pattern: "^script-\\S+|^arn:.*:script\\/script-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case buildId = "BuildId"
            case limit = "Limit"
            case nextToken = "NextToken"
            case scriptId = "ScriptId"
        }
    }

    public struct ListFleetsOutput: AWSDecodableShape {
        /// A set of fleet IDs that match the list request.  You can retrieve additional information about all  returned fleets by passing this result set to a DescribeFleetAttributes, DescribeFleetCapacity, or DescribeFleetUtilization call.
        public let fleetIds: [String]?
        /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(fleetIds: [String]? = nil, nextToken: String? = nil) {
            self.fleetIds = fleetIds
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fleetIds = "FleetIds"
            case nextToken = "NextToken"
        }
    }

    public struct ListGameServerGroupsInput: AWSEncodableShape {
        /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int?
        /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?

        public init(limit: Int? = nil, nextToken: String? = nil) {
            self.limit = limit
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1024)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextToken = "NextToken"
        }
    }

    public struct ListGameServerGroupsOutput: AWSDecodableShape {
        /// A collection of game server group objects that match the request.
        public let gameServerGroups: [GameServerGroup]?
        /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(gameServerGroups: [GameServerGroup]? = nil, nextToken: String? = nil) {
            self.gameServerGroups = gameServerGroups
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case gameServerGroups = "GameServerGroups"
            case nextToken = "NextToken"
        }
    }

    public struct ListGameServersInput: AWSEncodableShape {
        /// An identifier for the game server group to retrieve a list of game servers from.  Use either the GameServerGroup name or ARN value.
        public let gameServerGroupName: String
        /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int?
        /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?
        /// Indicates how to sort the returned data based on game server registration timestamp. Use ASCENDING to retrieve oldest game servers first, or use DESCENDING to retrieve newest game servers first. If this parameter is left empty, game servers are returned in no particular order.
        public let sortOrder: SortOrder?

        public init(gameServerGroupName: String, limit: Int? = nil, nextToken: String? = nil, sortOrder: SortOrder? = nil) {
            self.gameServerGroupName = gameServerGroupName
            self.limit = limit
            self.nextToken = nextToken
            self.sortOrder = sortOrder
        }

        public func validate(name: String) throws {
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, max: 256)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, min: 1)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, pattern: "[a-zA-Z0-9-\\.]+|^arn:.*:gameservergroup\\/[a-zA-Z0-9-\\.]+")
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1024)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case gameServerGroupName = "GameServerGroupName"
            case limit = "Limit"
            case nextToken = "NextToken"
            case sortOrder = "SortOrder"
        }
    }

    public struct ListGameServersOutput: AWSDecodableShape {
        /// A collection of game server objects that match the request.
        public let gameServers: [GameServer]?
        /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(gameServers: [GameServer]? = nil, nextToken: String? = nil) {
            self.gameServers = gameServers
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case gameServers = "GameServers"
            case nextToken = "NextToken"
        }
    }

    public struct ListScriptsInput: AWSEncodableShape {
        /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int?
        /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?

        public init(limit: Int? = nil, nextToken: String? = nil) {
            self.limit = limit
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextToken = "NextToken"
        }
    }

    public struct ListScriptsOutput: AWSDecodableShape {
        /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
        public let nextToken: String?
        /// A set of properties describing the requested script.
        public let scripts: [Script]?

        public init(nextToken: String? = nil, scripts: [Script]? = nil) {
            self.nextToken = nextToken
            self.scripts = scripts
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case scripts = "Scripts"
        }
    }

    public struct ListTagsForResourceRequest: AWSEncodableShape {
        ///  The Amazon Resource Name  (ARN) that is assigned to and uniquely identifies the GameLift resource that you want to retrieve tags for. GameLift resource ARNs are included in the data object for the resource, which  can be retrieved by calling a List or Describe operation for the resource type.
        public let resourceARN: String

        public init(resourceARN: String) {
            self.resourceARN = resourceARN
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, max: 1011)
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
        }
    }

    public struct ListTagsForResourceResponse: AWSDecodableShape {
        ///  The collection of tags that have been assigned to the specified resource.
        public let tags: [Tag]?

        public init(tags: [Tag]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct LocationAttributes: AWSDecodableShape {
        /// A fleet location and its current life-cycle state.
        public let locationState: LocationState?
        /// A list of fleet actions that have been suspended in the fleet location.
        public let stoppedActions: [FleetAction]?
        /// The status of fleet activity updates to the location. The status PENDING_UPDATE indicates that StopFleetActions or StartFleetActions has been requested but the update has not yet been completed for the location.
        public let updateStatus: LocationUpdateStatus?

        public init(locationState: LocationState? = nil, stoppedActions: [FleetAction]? = nil, updateStatus: LocationUpdateStatus? = nil) {
            self.locationState = locationState
            self.stoppedActions = stoppedActions
            self.updateStatus = updateStatus
        }

        private enum CodingKeys: String, CodingKey {
            case locationState = "LocationState"
            case stoppedActions = "StoppedActions"
            case updateStatus = "UpdateStatus"
        }
    }

    public struct LocationConfiguration: AWSEncodableShape {
        /// An AWS Region code, such as us-west-2.
        public let location: String?

        public init(location: String? = nil) {
            self.location = location
        }

        public func validate(name: String) throws {
            try self.validate(self.location, name: "location", parent: name, max: 64)
            try self.validate(self.location, name: "location", parent: name, min: 1)
            try self.validate(self.location, name: "location", parent: name, pattern: "^[a-z]+(-([a-z]+|\\d))*")
        }

        private enum CodingKeys: String, CodingKey {
            case location = "Location"
        }
    }

    public struct LocationState: AWSDecodableShape {
        /// The fleet location, expressed as an AWS Region code such as us-west-2.
        public let location: String?
        /// The life-cycle status of a fleet location.
        public let status: FleetStatus?

        public init(location: String? = nil, status: FleetStatus? = nil) {
            self.location = location
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case location = "Location"
            case status = "Status"
        }
    }

    public struct MatchedPlayerSession: AWSDecodableShape {
        /// A unique identifier for a player
        public let playerId: String?
        /// A unique identifier for a player session
        public let playerSessionId: String?

        public init(playerId: String? = nil, playerSessionId: String? = nil) {
            self.playerId = playerId
            self.playerSessionId = playerSessionId
        }

        private enum CodingKeys: String, CodingKey {
            case playerId = "PlayerId"
            case playerSessionId = "PlayerSessionId"
        }
    }

    public struct MatchmakingConfiguration: AWSDecodableShape {
        /// A flag that indicates whether a match that was created with this configuration must be accepted by the matched players. To require acceptance, set to TRUE. When this option is enabled, matchmaking tickets use the status REQUIRES_ACCEPTANCE to indicate when a completed potential match is waiting for player acceptance.
        public let acceptanceRequired: Bool?
        /// The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required. If any player rejects the match or fails to accept before the timeout, the ticket continues to look for an acceptable match.
        public let acceptanceTimeoutSeconds: Int?
        /// The number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies  a match for a single 12-person team, and the additional player count is set to 2, only 10 players are selected for the match. This parameter is not used when FlexMatchMode is set to STANDALONE.
        public let additionalPlayerCount: Int?
        /// The method used to backfill game sessions created with this matchmaking configuration. MANUAL indicates that the game makes backfill requests or does not use the match backfill feature. AUTOMATIC indicates that GameLift creates StartMatchBackfill requests whenever a game session has one or more open slots. Learn more about manual and automatic backfill in Backfill existing games with FlexMatch. Automatic backfill is not available when FlexMatchMode is set to STANDALONE.
        public let backfillMode: BackfillMode?
        /// The Amazon Resource Name (ARN) that is assigned to a GameLift matchmaking configuration resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::matchmakingconfiguration/. In a GameLift configuration ARN, the resource ID matches the Name value.
        public let configurationArn: String?
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: Date?
        /// Information to attach to all events related to the matchmaking configuration.
        public let customEventData: String?
        /// A descriptive label that is associated with matchmaking configuration.
        public let description: String?
        /// Indicates whether this matchmaking configuration is being used with GameLift hosting or as a standalone matchmaking solution.     STANDALONE - FlexMatch forms matches and returns match information, including players and team assignments, in a   MatchmakingSucceeded event.    WITH_QUEUE - FlexMatch forms matches and uses the specified GameLift queue to start a game session for the match.
        public let flexMatchMode: FlexMatchMode?
        /// A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the  GameSession object with a request to start a new game session (see Start a Game Session). This information is added to the new GameSession object that is created for a successful match. This parameter is not used when FlexMatchMode is set to STANDALONE.
        public let gameProperties: [GameProperty]?
        /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the  GameSession object with a request to start a new game session (see Start a Game Session). This information is added to the new GameSession object that is created for a successful match. This parameter is not used when FlexMatchMode is set to STANDALONE.
        public let gameSessionData: String?
        /// The Amazon Resource Name (ARN) that is assigned to a GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::gamesessionqueue/. Queues can be located in any Region. Queues are used to start new GameLift-hosted game sessions for matches that are created with this matchmaking configuration. This property is not set when FlexMatchMode is set to STANDALONE.
        public let gameSessionQueueArns: [String]?
        /// A unique identifier for the matchmaking configuration. This name is used to identify the configuration associated with a matchmaking request or ticket.
        public let name: String?
        /// An SNS topic ARN that is set up to receive matchmaking notifications.
        public let notificationTarget: String?
        /// The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out. Requests that fail due to timing out can be resubmitted as needed.
        public let requestTimeoutSeconds: Int?
        /// The Amazon Resource Name (ARN) associated with the GameLift matchmaking rule set resource that this configuration uses.
        public let ruleSetArn: String?
        /// A unique identifier for the matchmaking rule set to use with this configuration. A matchmaking configuration can only use rule sets that are defined in the same Region.
        public let ruleSetName: String?

        public init(acceptanceRequired: Bool? = nil, acceptanceTimeoutSeconds: Int? = nil, additionalPlayerCount: Int? = nil, backfillMode: BackfillMode? = nil, configurationArn: String? = nil, creationTime: Date? = nil, customEventData: String? = nil, description: String? = nil, flexMatchMode: FlexMatchMode? = nil, gameProperties: [GameProperty]? = nil, gameSessionData: String? = nil, gameSessionQueueArns: [String]? = nil, name: String? = nil, notificationTarget: String? = nil, requestTimeoutSeconds: Int? = nil, ruleSetArn: String? = nil, ruleSetName: String? = nil) {
            self.acceptanceRequired = acceptanceRequired
            self.acceptanceTimeoutSeconds = acceptanceTimeoutSeconds
            self.additionalPlayerCount = additionalPlayerCount
            self.backfillMode = backfillMode
            self.configurationArn = configurationArn
            self.creationTime = creationTime
            self.customEventData = customEventData
            self.description = description
            self.flexMatchMode = flexMatchMode
            self.gameProperties = gameProperties
            self.gameSessionData = gameSessionData
            self.gameSessionQueueArns = gameSessionQueueArns
            self.name = name
            self.notificationTarget = notificationTarget
            self.requestTimeoutSeconds = requestTimeoutSeconds
            self.ruleSetArn = ruleSetArn
            self.ruleSetName = ruleSetName
        }

        private enum CodingKeys: String, CodingKey {
            case acceptanceRequired = "AcceptanceRequired"
            case acceptanceTimeoutSeconds = "AcceptanceTimeoutSeconds"
            case additionalPlayerCount = "AdditionalPlayerCount"
            case backfillMode = "BackfillMode"
            case configurationArn = "ConfigurationArn"
            case creationTime = "CreationTime"
            case customEventData = "CustomEventData"
            case description = "Description"
            case flexMatchMode = "FlexMatchMode"
            case gameProperties = "GameProperties"
            case gameSessionData = "GameSessionData"
            case gameSessionQueueArns = "GameSessionQueueArns"
            case name = "Name"
            case notificationTarget = "NotificationTarget"
            case requestTimeoutSeconds = "RequestTimeoutSeconds"
            case ruleSetArn = "RuleSetArn"
            case ruleSetName = "RuleSetName"
        }
    }

    public struct MatchmakingRuleSet: AWSDecodableShape {
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: Date?
        /// The Amazon Resource Name (ARN) that is assigned to a GameLift matchmaking rule set resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::matchmakingruleset/.  In a GameLift rule set ARN, the resource ID matches the RuleSetName value.
        public let ruleSetArn: String?
        /// A collection of matchmaking rules, formatted as a JSON string. Comments are not allowed in JSON, but most elements support a description field.
        public let ruleSetBody: String
        /// A unique identifier for the matchmaking rule set
        public let ruleSetName: String?

        public init(creationTime: Date? = nil, ruleSetArn: String? = nil, ruleSetBody: String, ruleSetName: String? = nil) {
            self.creationTime = creationTime
            self.ruleSetArn = ruleSetArn
            self.ruleSetBody = ruleSetBody
            self.ruleSetName = ruleSetName
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case ruleSetArn = "RuleSetArn"
            case ruleSetBody = "RuleSetBody"
            case ruleSetName = "RuleSetName"
        }
    }

    public struct MatchmakingTicket: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) associated with the GameLift matchmaking configuration resource that is used with this ticket.
        public let configurationArn: String?
        /// Name of the MatchmakingConfiguration that is used with this ticket. Matchmaking configurations determine how players are grouped into a match and how a new game session is created for the match.
        public let configurationName: String?
        /// Time stamp indicating when this matchmaking request stopped being processed due to success, failure, or cancellation. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let endTime: Date?
        /// Average amount of time (in seconds) that players are currently waiting for a match. If there is not enough recent data, this property may be empty.
        public let estimatedWaitTime: Int?
        /// Identifier and connection information of the game session created for the match. This information is added to the ticket only after the matchmaking request has been successfully completed. This parameter is not set when FlexMatch is being used without GameLift hosting.
        public let gameSessionConnectionInfo: GameSessionConnectionInfo?
        /// A set of Player objects, each representing a player to find matches for. Players are identified by a unique player ID and may include latency data for use during matchmaking. If the ticket is in status COMPLETED, the Player objects include the team the players were assigned to in the resulting match.
        public let players: [Player]?
        /// Time stamp indicating when this matchmaking request was received. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let startTime: Date?
        /// Current status of the matchmaking request.    QUEUED -- The matchmaking request has been received and is currently waiting to be processed.    SEARCHING -- The matchmaking request is currently being processed.     REQUIRES_ACCEPTANCE -- A match has been proposed and the players must accept the match (see AcceptMatch). This status is used only with requests that use a matchmaking configuration with a player acceptance requirement.    PLACING -- The FlexMatch engine has matched players and is in the process of placing a new game session for the match.    COMPLETED -- Players have been matched and a game session is ready to host the players. A ticket in this state contains the necessary connection information for players.    FAILED -- The matchmaking request was not completed.    CANCELLED -- The matchmaking request was canceled. This may be the result of a call to StopMatchmaking or a proposed match that one or more players failed to accept.    TIMED_OUT -- The matchmaking request was not successful within the duration specified in the matchmaking configuration.     Matchmaking requests that fail to successfully complete (statuses FAILED, CANCELLED, TIMED_OUT) can be resubmitted as new requests with new ticket IDs.
        public let status: MatchmakingConfigurationStatus?
        /// Additional information about the current status.
        public let statusMessage: String?
        /// Code to explain the current status. For example, a status reason may indicate when a ticket has returned to SEARCHING status after a proposed match fails to receive player acceptances.
        public let statusReason: String?
        /// A unique identifier for a matchmaking ticket.
        public let ticketId: String?

        public init(configurationArn: String? = nil, configurationName: String? = nil, endTime: Date? = nil, estimatedWaitTime: Int? = nil, gameSessionConnectionInfo: GameSessionConnectionInfo? = nil, players: [Player]? = nil, startTime: Date? = nil, status: MatchmakingConfigurationStatus? = nil, statusMessage: String? = nil, statusReason: String? = nil, ticketId: String? = nil) {
            self.configurationArn = configurationArn
            self.configurationName = configurationName
            self.endTime = endTime
            self.estimatedWaitTime = estimatedWaitTime
            self.gameSessionConnectionInfo = gameSessionConnectionInfo
            self.players = players
            self.startTime = startTime
            self.status = status
            self.statusMessage = statusMessage
            self.statusReason = statusReason
            self.ticketId = ticketId
        }

        private enum CodingKeys: String, CodingKey {
            case configurationArn = "ConfigurationArn"
            case configurationName = "ConfigurationName"
            case endTime = "EndTime"
            case estimatedWaitTime = "EstimatedWaitTime"
            case gameSessionConnectionInfo = "GameSessionConnectionInfo"
            case players = "Players"
            case startTime = "StartTime"
            case status = "Status"
            case statusMessage = "StatusMessage"
            case statusReason = "StatusReason"
            case ticketId = "TicketId"
        }
    }

    public struct PlacedPlayerSession: AWSDecodableShape {
        /// A unique identifier for a player that is associated with this player session.
        public let playerId: String?
        /// A unique identifier for a player session.
        public let playerSessionId: String?

        public init(playerId: String? = nil, playerSessionId: String? = nil) {
            self.playerId = playerId
            self.playerSessionId = playerSessionId
        }

        private enum CodingKeys: String, CodingKey {
            case playerId = "PlayerId"
            case playerSessionId = "PlayerSessionId"
        }
    }

    public struct Player: AWSEncodableShape & AWSDecodableShape {
        /// A set of values, expressed in milliseconds, that indicates the amount of latency that a player experiences when connected to AWS Regions. If this property is present, FlexMatch considers placing the match only in Regions for which latency is reported.  If a matchmaker has a rule that evaluates player latency, players must report latency in order to be matched. If no latency is reported in this scenario, FlexMatch assumes that no Regions are available to the player and the ticket is not matchable.
        public let latencyInMs: [String: Int]?
        /// A collection of key:value pairs containing player information for use in matchmaking. Player attribute keys must match the playerAttributes used in a matchmaking rule set. Example: "PlayerAttributes": {"skill": {"N": "23"}, "gameMode": {"S": "deathmatch"}}.
        public let playerAttributes: [String: AttributeValue]?
        /// A unique identifier for a player
        public let playerId: String?
        /// Name of the team that the player is assigned to in a match. Team names are defined in a matchmaking rule set.
        public let team: String?

        public init(latencyInMs: [String: Int]? = nil, playerAttributes: [String: AttributeValue]? = nil, playerId: String? = nil, team: String? = nil) {
            self.latencyInMs = latencyInMs
            self.playerAttributes = playerAttributes
            self.playerId = playerId
            self.team = team
        }

        public func validate(name: String) throws {
            try self.latencyInMs?.forEach {
                try validate($0.key, name: "latencyInMs.key", parent: name, min: 1)
                try validate($0.value, name: "latencyInMs[\"\($0.key)\"]", parent: name, min: 1)
            }
            try self.playerAttributes?.forEach {
                try validate($0.key, name: "playerAttributes.key", parent: name, max: 1024)
                try validate($0.key, name: "playerAttributes.key", parent: name, min: 1)
                try $0.value.validate(name: "\(name).playerAttributes[\"\($0.key)\"]")
            }
            try self.validate(self.playerId, name: "playerId", parent: name, max: 1024)
            try self.validate(self.playerId, name: "playerId", parent: name, min: 1)
            try self.validate(self.team, name: "team", parent: name, max: 1024)
            try self.validate(self.team, name: "team", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case latencyInMs = "LatencyInMs"
            case playerAttributes = "PlayerAttributes"
            case playerId = "PlayerId"
            case team = "Team"
        }
    }

    public struct PlayerLatency: AWSEncodableShape & AWSDecodableShape {
        /// Amount of time that represents the time lag experienced by the player when connected to the specified Region.
        public let latencyInMilliseconds: Float?
        /// A unique identifier for a player associated with the latency data.
        public let playerId: String?
        /// Name of the Region that is associated with the latency value.
        public let regionIdentifier: String?

        public init(latencyInMilliseconds: Float? = nil, playerId: String? = nil, regionIdentifier: String? = nil) {
            self.latencyInMilliseconds = latencyInMilliseconds
            self.playerId = playerId
            self.regionIdentifier = regionIdentifier
        }

        public func validate(name: String) throws {
            try self.validate(self.playerId, name: "playerId", parent: name, max: 1024)
            try self.validate(self.playerId, name: "playerId", parent: name, min: 1)
            try self.validate(self.regionIdentifier, name: "regionIdentifier", parent: name, max: 1024)
            try self.validate(self.regionIdentifier, name: "regionIdentifier", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case latencyInMilliseconds = "LatencyInMilliseconds"
            case playerId = "PlayerId"
            case regionIdentifier = "RegionIdentifier"
        }
    }

    public struct PlayerLatencyPolicy: AWSEncodableShape & AWSDecodableShape {
        /// The maximum latency value that is allowed for any player, in milliseconds. All policies must have a value set for this property.
        public let maximumIndividualPlayerLatencyMilliseconds: Int?
        /// The length of time, in seconds, that the policy is enforced while placing a new game session. A null value for this property means that the policy is enforced until the queue times out.
        public let policyDurationSeconds: Int?

        public init(maximumIndividualPlayerLatencyMilliseconds: Int? = nil, policyDurationSeconds: Int? = nil) {
            self.maximumIndividualPlayerLatencyMilliseconds = maximumIndividualPlayerLatencyMilliseconds
            self.policyDurationSeconds = policyDurationSeconds
        }

        public func validate(name: String) throws {
            try self.validate(self.maximumIndividualPlayerLatencyMilliseconds, name: "maximumIndividualPlayerLatencyMilliseconds", parent: name, min: 0)
            try self.validate(self.policyDurationSeconds, name: "policyDurationSeconds", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case maximumIndividualPlayerLatencyMilliseconds = "MaximumIndividualPlayerLatencyMilliseconds"
            case policyDurationSeconds = "PolicyDurationSeconds"
        }
    }

    public struct PlayerSession: AWSDecodableShape {
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: Date?
        /// The DNS identifier assigned to the instance that is running the game session. Values have the following format:    TLS-enabled fleets: ..amazongamelift.com.   Non-TLS-enabled fleets: ec2-.compute.amazonaws.com. (See Amazon EC2 Instance IP Addressing.)   When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.
        public let dnsName: String?
        ///  The Amazon Resource Name (ARN) associated with the GameLift fleet that the player's game session is running on.
        public let fleetArn: String?
        /// A unique identifier for the fleet that the player's game session is running on.
        public let fleetId: String?
        /// A unique identifier for the game session that the player session is connected to.
        public let gameSessionId: String?
        /// The IP address of the game session. To connect to a GameLift game server, an app needs both the IP address and port number.
        public let ipAddress: String?
        /// Developer-defined information related to a player. GameLift does not use this data, so it can be formatted as needed for use in the game.
        public let playerData: String?
        /// A unique identifier for a player that is associated with this player session.
        public let playerId: String?
        /// A unique identifier for a player session.
        public let playerSessionId: String?
        /// Port number for the game session. To connect to a Amazon GameLift server process, an app needs both the IP address and port number.
        public let port: Int?
        /// Current status of the player session. Possible player session statuses include the following:    RESERVED -- The player session request has been received, but the player has not yet connected to the server process and/or been validated.     ACTIVE -- The player has been validated by the server process and is currently connected.    COMPLETED -- The player connection has been dropped.    TIMEDOUT -- A player session request was received, but the player did not connect and/or was not validated within the timeout limit (60 seconds).
        public let status: PlayerSessionStatus?
        /// A time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let terminationTime: Date?

        public init(creationTime: Date? = nil, dnsName: String? = nil, fleetArn: String? = nil, fleetId: String? = nil, gameSessionId: String? = nil, ipAddress: String? = nil, playerData: String? = nil, playerId: String? = nil, playerSessionId: String? = nil, port: Int? = nil, status: PlayerSessionStatus? = nil, terminationTime: Date? = nil) {
            self.creationTime = creationTime
            self.dnsName = dnsName
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.gameSessionId = gameSessionId
            self.ipAddress = ipAddress
            self.playerData = playerData
            self.playerId = playerId
            self.playerSessionId = playerSessionId
            self.port = port
            self.status = status
            self.terminationTime = terminationTime
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case dnsName = "DnsName"
            case fleetArn = "FleetArn"
            case fleetId = "FleetId"
            case gameSessionId = "GameSessionId"
            case ipAddress = "IpAddress"
            case playerData = "PlayerData"
            case playerId = "PlayerId"
            case playerSessionId = "PlayerSessionId"
            case port = "Port"
            case status = "Status"
            case terminationTime = "TerminationTime"
        }
    }

    public struct PriorityConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The prioritization order to use for fleet locations, when the PriorityOrder property includes LOCATION. Locations are identified by AWS Region codes such as us-west-2. Each location can only be listed once.
        public let locationOrder: [String]?
        /// The recommended sequence to use when prioritizing where to place new game sessions. Each type can only be listed once.    LATENCY -- FleetIQ prioritizes locations where the average player latency (provided in each game session request) is lowest.     COST -- FleetIQ prioritizes destinations with the lowest current hosting costs. Cost is evaluated based on the location, instance type, and fleet type (Spot or On-Demand) for each destination in the queue.    DESTINATION -- FleetIQ prioritizes based on the order that destinations are listed in the queue configuration.    LOCATION -- FleetIQ prioritizes based on the provided order of locations, as defined in LocationOrder.
        public let priorityOrder: [PriorityType]?

        public init(locationOrder: [String]? = nil, priorityOrder: [PriorityType]? = nil) {
            self.locationOrder = locationOrder
            self.priorityOrder = priorityOrder
        }

        public func validate(name: String) throws {
            try self.locationOrder?.forEach {
                try validate($0, name: "locationOrder[]", parent: name, max: 64)
                try validate($0, name: "locationOrder[]", parent: name, min: 1)
                try validate($0, name: "locationOrder[]", parent: name, pattern: "^[a-z]+(-([a-z]+|\\d))*")
            }
            try self.validate(self.locationOrder, name: "locationOrder", parent: name, max: 100)
            try self.validate(self.locationOrder, name: "locationOrder", parent: name, min: 1)
            try self.validate(self.priorityOrder, name: "priorityOrder", parent: name, max: 4)
            try self.validate(self.priorityOrder, name: "priorityOrder", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case locationOrder = "LocationOrder"
            case priorityOrder = "PriorityOrder"
        }
    }

    public struct PutScalingPolicyInput: AWSEncodableShape {
        /// Comparison operator to use when measuring the metric against the threshold value.
        public let comparisonOperator: ComparisonOperatorType?
        /// Length of time (in minutes) the metric must be at or beyond the threshold before a scaling event is triggered.
        public let evaluationPeriods: Int?
        /// A unique identifier for the fleet to apply this policy to. You can use either the fleet ID or ARN value. The fleet cannot be in any of the following statuses: ERROR or DELETING.
        public let fleetId: String
        /// Name of the Amazon GameLift-defined metric that is used to trigger a scaling adjustment. For detailed descriptions of fleet metrics, see Monitor Amazon GameLift with Amazon CloudWatch.     ActivatingGameSessions -- Game sessions in the process of being created.    ActiveGameSessions -- Game sessions that are currently running.    ActiveInstances -- Fleet instances that are currently running at least one game session.    AvailableGameSessions -- Additional game sessions that fleet could host simultaneously, given current capacity.    AvailablePlayerSessions -- Empty player slots in currently active game sessions. This includes game sessions that are not currently accepting players. Reserved player slots are not included.    CurrentPlayerSessions -- Player slots in active game sessions that are being used by a player or are reserved for a player.     IdleInstances -- Active instances that are currently hosting zero game sessions.     PercentAvailableGameSessions -- Unused percentage of the total number of game sessions that a fleet could host simultaneously, given current capacity. Use this metric for a target-based scaling policy.    PercentIdleInstances -- Percentage of the total number of active instances that are hosting zero game sessions.    QueueDepth -- Pending game session placement requests, in any queue, where the current fleet is the top-priority destination.    WaitTime -- Current wait time for pending game session placement requests, in any queue, where the current fleet is the top-priority destination.
        public let metricName: MetricName
        /// A descriptive label that is associated with a fleet's scaling policy. Policy names do not need to be unique. A fleet can have only one scaling policy with the same name.
        public let name: String
        /// The type of scaling policy to create. For a target-based policy, set the parameter MetricName to 'PercentAvailableGameSessions' and specify a TargetConfiguration. For a rule-based policy set the following parameters: MetricName, ComparisonOperator, Threshold, EvaluationPeriods, ScalingAdjustmentType, and ScalingAdjustment.
        public let policyType: PolicyType?
        /// Amount of adjustment to make, based on the scaling adjustment type.
        public let scalingAdjustment: Int?
        /// The type of adjustment to make to a fleet's instance count (see FleetCapacity):    ChangeInCapacity -- add (or subtract) the scaling adjustment value from the current instance count. Positive values scale up while negative values scale down.    ExactCapacity -- set the instance count to the scaling adjustment value.    PercentChangeInCapacity -- increase or reduce the current instance count by the scaling adjustment, read as a percentage. Positive values scale up while negative values scale down; for example, a value of "-10" scales the fleet down by 10%.
        public let scalingAdjustmentType: ScalingAdjustmentType?
        /// An object that contains settings for a target-based scaling policy.
        public let targetConfiguration: TargetConfiguration?
        /// Metric value used to trigger a scaling event.
        public let threshold: Double?

        public init(comparisonOperator: ComparisonOperatorType? = nil, evaluationPeriods: Int? = nil, fleetId: String, metricName: MetricName, name: String, policyType: PolicyType? = nil, scalingAdjustment: Int? = nil, scalingAdjustmentType: ScalingAdjustmentType? = nil, targetConfiguration: TargetConfiguration? = nil, threshold: Double? = nil) {
            self.comparisonOperator = comparisonOperator
            self.evaluationPeriods = evaluationPeriods
            self.fleetId = fleetId
            self.metricName = metricName
            self.name = name
            self.policyType = policyType
            self.scalingAdjustment = scalingAdjustment
            self.scalingAdjustmentType = scalingAdjustmentType
            self.targetConfiguration = targetConfiguration
            self.threshold = threshold
        }

        public func validate(name: String) throws {
            try self.validate(self.evaluationPeriods, name: "evaluationPeriods", parent: name, min: 1)
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            try self.validate(self.name, name: "name", parent: name, max: 1024)
            try self.validate(self.name, name: "name", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case comparisonOperator = "ComparisonOperator"
            case evaluationPeriods = "EvaluationPeriods"
            case fleetId = "FleetId"
            case metricName = "MetricName"
            case name = "Name"
            case policyType = "PolicyType"
            case scalingAdjustment = "ScalingAdjustment"
            case scalingAdjustmentType = "ScalingAdjustmentType"
            case targetConfiguration = "TargetConfiguration"
            case threshold = "Threshold"
        }
    }

    public struct PutScalingPolicyOutput: AWSDecodableShape {
        /// A descriptive label that is associated with a fleet's scaling policy. Policy names do not need to be unique.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct RegisterGameServerInput: AWSEncodableShape {
        /// Information that is needed to make inbound client connections to the game server. This might include the IP address and port, DNS name, and other information.
        public let connectionInfo: String?
        /// A set of custom game server properties, formatted as a single string value. This data  is passed to a game client or service when it requests information on game servers using ListGameServers or ClaimGameServer.
        public let gameServerData: String?
        /// A unique identifier for the game server group where the game server is running.  Use either the GameServerGroup name or ARN value.
        public let gameServerGroupName: String
        /// A custom string that uniquely identifies the game server to register.   Game server IDs are developer-defined and must be unique across all game server groups in your AWS account.
        public let gameServerId: String
        /// The unique identifier for the instance where the game server is running. This ID is available in the instance metadata. EC2 instance IDs  use a 17-character format, for example: i-1234567890abcdef0.
        public let instanceId: String

        public init(connectionInfo: String? = nil, gameServerData: String? = nil, gameServerGroupName: String, gameServerId: String, instanceId: String) {
            self.connectionInfo = connectionInfo
            self.gameServerData = gameServerData
            self.gameServerGroupName = gameServerGroupName
            self.gameServerId = gameServerId
            self.instanceId = instanceId
        }

        public func validate(name: String) throws {
            try self.validate(self.connectionInfo, name: "connectionInfo", parent: name, max: 512)
            try self.validate(self.connectionInfo, name: "connectionInfo", parent: name, min: 1)
            try self.validate(self.connectionInfo, name: "connectionInfo", parent: name, pattern: ".*\\S.*")
            try self.validate(self.gameServerData, name: "gameServerData", parent: name, max: 1024)
            try self.validate(self.gameServerData, name: "gameServerData", parent: name, min: 1)
            try self.validate(self.gameServerData, name: "gameServerData", parent: name, pattern: ".*\\S.*")
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, max: 256)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, min: 1)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, pattern: "[a-zA-Z0-9-\\.]+|^arn:.*:gameservergroup\\/[a-zA-Z0-9-\\.]+")
            try self.validate(self.gameServerId, name: "gameServerId", parent: name, max: 128)
            try self.validate(self.gameServerId, name: "gameServerId", parent: name, min: 3)
            try self.validate(self.gameServerId, name: "gameServerId", parent: name, pattern: "[a-zA-Z0-9-\\.]+")
            try self.validate(self.instanceId, name: "instanceId", parent: name, max: 19)
            try self.validate(self.instanceId, name: "instanceId", parent: name, min: 19)
            try self.validate(self.instanceId, name: "instanceId", parent: name, pattern: "^i-[0-9a-zA-Z]{17}$")
        }

        private enum CodingKeys: String, CodingKey {
            case connectionInfo = "ConnectionInfo"
            case gameServerData = "GameServerData"
            case gameServerGroupName = "GameServerGroupName"
            case gameServerId = "GameServerId"
            case instanceId = "InstanceId"
        }
    }

    public struct RegisterGameServerOutput: AWSDecodableShape {
        /// Object that describes the newly registered game server.
        public let gameServer: GameServer?

        public init(gameServer: GameServer? = nil) {
            self.gameServer = gameServer
        }

        private enum CodingKeys: String, CodingKey {
            case gameServer = "GameServer"
        }
    }

    public struct RequestUploadCredentialsInput: AWSEncodableShape {
        /// A unique identifier for the build to get credentials for. You can use either the build ID or ARN value.
        public let buildId: String

        public init(buildId: String) {
            self.buildId = buildId
        }

        public func validate(name: String) throws {
            try self.validate(self.buildId, name: "buildId", parent: name, pattern: "^build-\\S+|^arn:.*:build\\/build-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case buildId = "BuildId"
        }
    }

    public struct RequestUploadCredentialsOutput: AWSDecodableShape {
        /// Amazon S3 path and key, identifying where the game build files are stored.
        public let storageLocation: S3Location?
        /// AWS credentials required when uploading a game build to the storage location. These credentials have a limited lifespan and are valid only for the build they were issued for.
        public let uploadCredentials: AwsCredentials?

        public init(storageLocation: S3Location? = nil, uploadCredentials: AwsCredentials? = nil) {
            self.storageLocation = storageLocation
            self.uploadCredentials = uploadCredentials
        }

        private enum CodingKeys: String, CodingKey {
            case storageLocation = "StorageLocation"
            case uploadCredentials = "UploadCredentials"
        }
    }

    public struct ResolveAliasInput: AWSEncodableShape {
        /// The unique identifier of the alias that you want to retrieve a fleet ID for. You can use either the alias ID or ARN value.
        public let aliasId: String

        public init(aliasId: String) {
            self.aliasId = aliasId
        }

        public func validate(name: String) throws {
            try self.validate(self.aliasId, name: "aliasId", parent: name, pattern: "^alias-\\S+|^arn:.*:alias\\/alias-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case aliasId = "AliasId"
        }
    }

    public struct ResolveAliasOutput: AWSDecodableShape {
        ///  The Amazon Resource Name (ARN) associated with the GameLift fleet resource that this alias points to.
        public let fleetArn: String?
        /// The fleet identifier that the alias is pointing to.
        public let fleetId: String?

        public init(fleetArn: String? = nil, fleetId: String? = nil) {
            self.fleetArn = fleetArn
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case fleetArn = "FleetArn"
            case fleetId = "FleetId"
        }
    }

    public struct ResourceCreationLimitPolicy: AWSEncodableShape & AWSDecodableShape {
        /// The maximum number of game sessions that an individual can create during the policy period.
        public let newGameSessionsPerCreator: Int?
        /// The time span used in evaluating the resource creation limit policy.
        public let policyPeriodInMinutes: Int?

        public init(newGameSessionsPerCreator: Int? = nil, policyPeriodInMinutes: Int? = nil) {
            self.newGameSessionsPerCreator = newGameSessionsPerCreator
            self.policyPeriodInMinutes = policyPeriodInMinutes
        }

        public func validate(name: String) throws {
            try self.validate(self.newGameSessionsPerCreator, name: "newGameSessionsPerCreator", parent: name, min: 0)
            try self.validate(self.policyPeriodInMinutes, name: "policyPeriodInMinutes", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case newGameSessionsPerCreator = "NewGameSessionsPerCreator"
            case policyPeriodInMinutes = "PolicyPeriodInMinutes"
        }
    }

    public struct ResumeGameServerGroupInput: AWSEncodableShape {
        /// A unique identifier for the game server group. Use either the GameServerGroup name or ARN value.
        public let gameServerGroupName: String
        /// The activity to resume for this game server group.
        public let resumeActions: [GameServerGroupAction]

        public init(gameServerGroupName: String, resumeActions: [GameServerGroupAction]) {
            self.gameServerGroupName = gameServerGroupName
            self.resumeActions = resumeActions
        }

        public func validate(name: String) throws {
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, max: 256)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, min: 1)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, pattern: "[a-zA-Z0-9-\\.]+|^arn:.*:gameservergroup\\/[a-zA-Z0-9-\\.]+")
            try self.validate(self.resumeActions, name: "resumeActions", parent: name, max: 1)
            try self.validate(self.resumeActions, name: "resumeActions", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case gameServerGroupName = "GameServerGroupName"
            case resumeActions = "ResumeActions"
        }
    }

    public struct ResumeGameServerGroupOutput: AWSDecodableShape {
        /// An object that describes the game server group resource, with the SuspendedActions property updated to reflect the resumed activity.
        public let gameServerGroup: GameServerGroup?

        public init(gameServerGroup: GameServerGroup? = nil) {
            self.gameServerGroup = gameServerGroup
        }

        private enum CodingKeys: String, CodingKey {
            case gameServerGroup = "GameServerGroup"
        }
    }

    public struct RoutingStrategy: AWSEncodableShape & AWSDecodableShape {
        /// A unique identifier for the fleet that the alias points to. This value is the fleet ID, not the fleet ARN.
        public let fleetId: String?
        /// The message text to be used with a terminal routing strategy.
        public let message: String?
        /// The type of routing strategy for the alias. Possible routing types include the following:    SIMPLE - The alias resolves to one specific fleet. Use this type when routing to active fleets.    TERMINAL - The alias does not resolve to a fleet but instead can be used to display a message to the user. A terminal alias throws a TerminalRoutingStrategyException with the RoutingStrategy message embedded.
        public let type: RoutingStrategyType?

        public init(fleetId: String? = nil, message: String? = nil, type: RoutingStrategyType? = nil) {
            self.fleetId = fleetId
            self.message = message
            self.type = type
        }

        public func validate(name: String) throws {
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+")
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case message = "Message"
            case type = "Type"
        }
    }

    public struct RuntimeConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The maximum amount of time (in seconds) allowed to launch a new game session and have it report ready to host players. During this time, the game session is in status ACTIVATING. If the game session does not become active before the timeout, it is ended and the game session status is changed to TERMINATED.
        public let gameSessionActivationTimeoutSeconds: Int?
        /// The number of game sessions in status ACTIVATING to allow on an instance. This setting limits the instance resources that can be used for new game activations at any one time.
        public let maxConcurrentGameSessionActivations: Int?
        /// A collection of server process configurations that identify what server processes to run on each instance in a fleet.
        public let serverProcesses: [ServerProcess]?

        public init(gameSessionActivationTimeoutSeconds: Int? = nil, maxConcurrentGameSessionActivations: Int? = nil, serverProcesses: [ServerProcess]? = nil) {
            self.gameSessionActivationTimeoutSeconds = gameSessionActivationTimeoutSeconds
            self.maxConcurrentGameSessionActivations = maxConcurrentGameSessionActivations
            self.serverProcesses = serverProcesses
        }

        public func validate(name: String) throws {
            try self.validate(self.gameSessionActivationTimeoutSeconds, name: "gameSessionActivationTimeoutSeconds", parent: name, max: 600)
            try self.validate(self.gameSessionActivationTimeoutSeconds, name: "gameSessionActivationTimeoutSeconds", parent: name, min: 1)
            try self.validate(self.maxConcurrentGameSessionActivations, name: "maxConcurrentGameSessionActivations", parent: name, max: 2_147_483_647)
            try self.validate(self.maxConcurrentGameSessionActivations, name: "maxConcurrentGameSessionActivations", parent: name, min: 1)
            try self.serverProcesses?.forEach {
                try $0.validate(name: "\(name).serverProcesses[]")
            }
            try self.validate(self.serverProcesses, name: "serverProcesses", parent: name, max: 50)
            try self.validate(self.serverProcesses, name: "serverProcesses", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionActivationTimeoutSeconds = "GameSessionActivationTimeoutSeconds"
            case maxConcurrentGameSessionActivations = "MaxConcurrentGameSessionActivations"
            case serverProcesses = "ServerProcesses"
        }
    }

    public struct S3Location: AWSEncodableShape & AWSDecodableShape {
        /// An Amazon S3 bucket identifier. This is the name of the S3 bucket.  GameLift currently does not support uploading from Amazon S3 buckets with names that contain a dot (.).
        public let bucket: String?
        /// The name of the zip file that contains the build files or script files.
        public let key: String?
        /// The version of the file, if object versioning is turned on for the bucket. Amazon GameLift uses this information when retrieving files from an S3 bucket that you own. Use this parameter to specify a specific version of the file. If not set, the latest version of the file is retrieved.
        public let objectVersion: String?
        /// The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access the S3 bucket.
        public let roleArn: String?

        public init(bucket: String? = nil, key: String? = nil, objectVersion: String? = nil, roleArn: String? = nil) {
            self.bucket = bucket
            self.key = key
            self.objectVersion = objectVersion
            self.roleArn = roleArn
        }

        public func validate(name: String) throws {
            try self.validate(self.bucket, name: "bucket", parent: name, min: 1)
            try self.validate(self.key, name: "key", parent: name, min: 1)
            try self.validate(self.objectVersion, name: "objectVersion", parent: name, min: 1)
            try self.validate(self.roleArn, name: "roleArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case key = "Key"
            case objectVersion = "ObjectVersion"
            case roleArn = "RoleArn"
        }
    }

    public struct ScalingPolicy: AWSDecodableShape {
        /// Comparison operator to use when measuring a metric against the threshold value.
        public let comparisonOperator: ComparisonOperatorType?
        /// Length of time (in minutes) the metric must be at or beyond the threshold before a scaling event is triggered.
        public let evaluationPeriods: Int?
        /// The Amazon Resource Name (ARN) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
        public let fleetArn: String?
        /// A unique identifier for the fleet that is associated with this scaling policy.
        public let fleetId: String?
        ///
        public let location: String?
        /// Name of the Amazon GameLift-defined metric that is used to trigger a scaling adjustment. For detailed descriptions of fleet metrics, see Monitor Amazon GameLift with Amazon CloudWatch.     ActivatingGameSessions -- Game sessions in the process of being created.    ActiveGameSessions -- Game sessions that are currently running.    ActiveInstances -- Fleet instances that are currently running at least one game session.    AvailableGameSessions -- Additional game sessions that fleet could host simultaneously, given current capacity.    AvailablePlayerSessions -- Empty player slots in currently active game sessions. This includes game sessions that are not currently accepting players. Reserved player slots are not included.    CurrentPlayerSessions -- Player slots in active game sessions that are being used by a player or are reserved for a player.     IdleInstances -- Active instances that are currently hosting zero game sessions.     PercentAvailableGameSessions -- Unused percentage of the total number of game sessions that a fleet could host simultaneously, given current capacity. Use this metric for a target-based scaling policy.    PercentIdleInstances -- Percentage of the total number of active instances that are hosting zero game sessions.    QueueDepth -- Pending game session placement requests, in any queue, where the current fleet is the top-priority destination.    WaitTime -- Current wait time for pending game session placement requests, in any queue, where the current fleet is the top-priority destination.
        public let metricName: MetricName?
        /// A descriptive label that is associated with a fleet's scaling policy. Policy names do not need to be unique.
        public let name: String?
        /// The type of scaling policy to create. For a target-based policy, set the parameter MetricName to 'PercentAvailableGameSessions' and specify a TargetConfiguration. For a rule-based policy set the following parameters: MetricName, ComparisonOperator, Threshold, EvaluationPeriods, ScalingAdjustmentType, and ScalingAdjustment.
        public let policyType: PolicyType?
        /// Amount of adjustment to make, based on the scaling adjustment type.
        public let scalingAdjustment: Int?
        /// The type of adjustment to make to a fleet's instance count (see FleetCapacity):    ChangeInCapacity -- add (or subtract) the scaling adjustment value from the current instance count. Positive values scale up while negative values scale down.    ExactCapacity -- set the instance count to the scaling adjustment value.    PercentChangeInCapacity -- increase or reduce the current instance count by the scaling adjustment, read as a percentage. Positive values scale up while negative values scale down.
        public let scalingAdjustmentType: ScalingAdjustmentType?
        /// Current status of the scaling policy. The scaling policy can be in force only when in an ACTIVE status. Scaling policies can be suspended for individual fleets (see StopFleetActions; if suspended for a fleet, the policy status does not change. View a fleet's stopped actions by calling DescribeFleetCapacity.    ACTIVE -- The scaling policy can be used for auto-scaling a fleet.    UPDATE_REQUESTED -- A request to update the scaling policy has been received.    UPDATING -- A change is being made to the scaling policy.    DELETE_REQUESTED -- A request to delete the scaling policy has been received.    DELETING -- The scaling policy is being deleted.    DELETED -- The scaling policy has been deleted.    ERROR -- An error occurred in creating the policy. It should be removed and recreated.
        public let status: ScalingStatusType?
        /// An object that contains settings for a target-based scaling policy.
        public let targetConfiguration: TargetConfiguration?
        /// Metric value used to trigger a scaling event.
        public let threshold: Double?
        /// The current status of the fleet's scaling policies in a requested fleet location. The status PENDING_UPDATE indicates that an update was requested for the fleet  but has not yet been completed for the location.
        public let updateStatus: LocationUpdateStatus?

        public init(comparisonOperator: ComparisonOperatorType? = nil, evaluationPeriods: Int? = nil, fleetArn: String? = nil, fleetId: String? = nil, location: String? = nil, metricName: MetricName? = nil, name: String? = nil, policyType: PolicyType? = nil, scalingAdjustment: Int? = nil, scalingAdjustmentType: ScalingAdjustmentType? = nil, status: ScalingStatusType? = nil, targetConfiguration: TargetConfiguration? = nil, threshold: Double? = nil, updateStatus: LocationUpdateStatus? = nil) {
            self.comparisonOperator = comparisonOperator
            self.evaluationPeriods = evaluationPeriods
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.location = location
            self.metricName = metricName
            self.name = name
            self.policyType = policyType
            self.scalingAdjustment = scalingAdjustment
            self.scalingAdjustmentType = scalingAdjustmentType
            self.status = status
            self.targetConfiguration = targetConfiguration
            self.threshold = threshold
            self.updateStatus = updateStatus
        }

        private enum CodingKeys: String, CodingKey {
            case comparisonOperator = "ComparisonOperator"
            case evaluationPeriods = "EvaluationPeriods"
            case fleetArn = "FleetArn"
            case fleetId = "FleetId"
            case location = "Location"
            case metricName = "MetricName"
            case name = "Name"
            case policyType = "PolicyType"
            case scalingAdjustment = "ScalingAdjustment"
            case scalingAdjustmentType = "ScalingAdjustmentType"
            case status = "Status"
            case targetConfiguration = "TargetConfiguration"
            case threshold = "Threshold"
            case updateStatus = "UpdateStatus"
        }
    }

    public struct Script: AWSDecodableShape {
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: Date?
        /// A descriptive label that is associated with a script. Script names do not need to be unique.
        public let name: String?
        /// The Amazon Resource Name (ARN) that is assigned to a GameLift script resource and uniquely identifies it. ARNs are unique across all Regions.  In a GameLift script ARN, the resource ID matches the ScriptId value.
        public let scriptArn: String?
        /// A unique identifier for the Realtime script
        public let scriptId: String?
        /// The file size of the uploaded Realtime script, expressed in bytes. When files are uploaded from an S3 location, this value remains at "0".
        public let sizeOnDisk: Int64?
        public let storageLocation: S3Location?
        /// Version information that is associated with a build or script. Version strings do not need to be unique.
        public let version: String?

        public init(creationTime: Date? = nil, name: String? = nil, scriptArn: String? = nil, scriptId: String? = nil, sizeOnDisk: Int64? = nil, storageLocation: S3Location? = nil, version: String? = nil) {
            self.creationTime = creationTime
            self.name = name
            self.scriptArn = scriptArn
            self.scriptId = scriptId
            self.sizeOnDisk = sizeOnDisk
            self.storageLocation = storageLocation
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case name = "Name"
            case scriptArn = "ScriptArn"
            case scriptId = "ScriptId"
            case sizeOnDisk = "SizeOnDisk"
            case storageLocation = "StorageLocation"
            case version = "Version"
        }
    }

    public struct SearchGameSessionsInput: AWSEncodableShape {
        /// A unique identifier for the alias associated with the fleet to search for active game sessions. You can use either the alias ID or ARN value. Each request must reference either a fleet ID or alias ID, but not both.
        public let aliasId: String?
        /// String containing the search criteria for the session search. If no filter expression is included, the request returns results for all game sessions in the fleet that are in ACTIVE status. A filter expression can contain one or multiple conditions. Each condition consists of the following:    Operand -- Name of a game session attribute. Valid values are gameSessionName, gameSessionId, gameSessionProperties, maximumSessions, creationTimeMillis, playerSessionCount, hasAvailablePlayerSessions.    Comparator -- Valid comparators are: =, <>, , >, , >=.     Value -- Value to be searched for. Values may be numbers, boolean values (true/false) or strings depending on the operand. String values are case sensitive and must be enclosed in single quotes. Special characters must be escaped. Boolean and string values can only be used with the comparators = and <>. For example, the following filter expression searches on gameSessionName: "FilterExpression": "gameSessionName = 'Matt\\'s Awesome Game 1'".    To chain multiple conditions in a single expression, use the logical keywords AND, OR, and NOT and parentheses as needed. For example: x AND y AND NOT z, NOT (x OR y). Session search evaluates conditions from left to right using the following precedence rules:    =, <>, , >, , >=    Parentheses   NOT   AND   OR   For example, this filter expression retrieves game sessions hosting at least ten players that have an open player slot: "maximumSessions>=10 AND hasAvailablePlayerSessions=true".
        public let filterExpression: String?
        /// A unique identifier for the fleet to search for active game sessions. You can use either the fleet ID or ARN value. Each request must reference either a fleet ID or alias ID, but not both.
        public let fleetId: String?
        /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. The maximum number of results returned is 20, even if this value is not set or is set higher than 20.
        public let limit: Int?
        /// A fleet location to search for game sessions. You can specify a fleet's home Region or a remote location. Use the AWS Region code format, such as us-west-2.
        public let location: String?
        /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
        public let nextToken: String?
        /// Instructions on how to sort the search results. If no sort expression is included, the request returns results in random order. A sort expression consists of the following elements:    Operand -- Name of a game session attribute. Valid values are gameSessionName, gameSessionId, gameSessionProperties, maximumSessions, creationTimeMillis, playerSessionCount, hasAvailablePlayerSessions.    Order -- Valid sort orders are ASC (ascending) and DESC (descending).   For example, this sort expression returns the oldest active sessions first: "SortExpression": "creationTimeMillis ASC". Results with a null value for the sort operand are returned at the end of the list.
        public let sortExpression: String?

        public init(aliasId: String? = nil, filterExpression: String? = nil, fleetId: String? = nil, limit: Int? = nil, location: String? = nil, nextToken: String? = nil, sortExpression: String? = nil) {
            self.aliasId = aliasId
            self.filterExpression = filterExpression
            self.fleetId = fleetId
            self.limit = limit
            self.location = location
            self.nextToken = nextToken
            self.sortExpression = sortExpression
        }

        public func validate(name: String) throws {
            try self.validate(self.aliasId, name: "aliasId", parent: name, pattern: "^alias-\\S+|^arn:.*:alias\\/alias-\\S+")
            try self.validate(self.filterExpression, name: "filterExpression", parent: name, max: 1024)
            try self.validate(self.filterExpression, name: "filterExpression", parent: name, min: 1)
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            try self.validate(self.limit, name: "limit", parent: name, min: 1)
            try self.validate(self.location, name: "location", parent: name, max: 64)
            try self.validate(self.location, name: "location", parent: name, min: 1)
            try self.validate(self.location, name: "location", parent: name, pattern: "^[a-z]+(-([a-z]+|\\d))*")
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1024)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
            try self.validate(self.sortExpression, name: "sortExpression", parent: name, max: 1024)
            try self.validate(self.sortExpression, name: "sortExpression", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case aliasId = "AliasId"
            case filterExpression = "FilterExpression"
            case fleetId = "FleetId"
            case limit = "Limit"
            case location = "Location"
            case nextToken = "NextToken"
            case sortExpression = "SortExpression"
        }
    }

    public struct SearchGameSessionsOutput: AWSDecodableShape {
        /// A collection of objects containing game session properties for each session that matches the request.
        public let gameSessions: [GameSession]?
        /// A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(gameSessions: [GameSession]? = nil, nextToken: String? = nil) {
            self.gameSessions = gameSessions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessions = "GameSessions"
            case nextToken = "NextToken"
        }
    }

    public struct ServerProcess: AWSEncodableShape & AWSDecodableShape {
        /// The number of server processes using this configuration that run concurrently on each instance.
        public let concurrentExecutions: Int
        /// The location of a game build executable or the Realtime script file that contains the Init() function. Game builds and Realtime scripts are installed on instances at the root:    Windows (custom game builds only): C:\game. Example: "C:\game\MyGame\server.exe"    Linux: /local/game. Examples: "/local/game/MyGame/server.exe" or "/local/game/MyRealtimeScript.js"
        public let launchPath: String
        /// An optional list of parameters to pass to the server executable or Realtime script on launch.
        public let parameters: String?

        public init(concurrentExecutions: Int, launchPath: String, parameters: String? = nil) {
            self.concurrentExecutions = concurrentExecutions
            self.launchPath = launchPath
            self.parameters = parameters
        }

        public func validate(name: String) throws {
            try self.validate(self.concurrentExecutions, name: "concurrentExecutions", parent: name, min: 1)
            try self.validate(self.launchPath, name: "launchPath", parent: name, max: 1024)
            try self.validate(self.launchPath, name: "launchPath", parent: name, min: 1)
            try self.validate(self.parameters, name: "parameters", parent: name, max: 1024)
            try self.validate(self.parameters, name: "parameters", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case concurrentExecutions = "ConcurrentExecutions"
            case launchPath = "LaunchPath"
            case parameters = "Parameters"
        }
    }

    public struct StartFleetActionsInput: AWSEncodableShape {
        /// List of actions to restart on the fleet.
        public let actions: [FleetAction]
        /// A unique identifier for the fleet to restart actions on.  You can use either the fleet ID or ARN value.
        public let fleetId: String
        /// The fleet location to restart fleet actions for. Specify a location in the form of an AWS Region code, such as us-west-2.
        public let location: String?

        public init(actions: [FleetAction], fleetId: String, location: String? = nil) {
            self.actions = actions
            self.fleetId = fleetId
            self.location = location
        }

        public func validate(name: String) throws {
            try self.validate(self.actions, name: "actions", parent: name, max: 1)
            try self.validate(self.actions, name: "actions", parent: name, min: 1)
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            try self.validate(self.location, name: "location", parent: name, max: 64)
            try self.validate(self.location, name: "location", parent: name, min: 1)
            try self.validate(self.location, name: "location", parent: name, pattern: "^[a-z]+(-([a-z]+|\\d))*")
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "Actions"
            case fleetId = "FleetId"
            case location = "Location"
        }
    }

    public struct StartFleetActionsOutput: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
        public let fleetArn: String?
        /// A unique identifier for the fleet to restart actions on.
        public let fleetId: String?

        public init(fleetArn: String? = nil, fleetId: String? = nil) {
            self.fleetArn = fleetArn
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case fleetArn = "FleetArn"
            case fleetId = "FleetId"
        }
    }

    public struct StartGameSessionPlacementInput: AWSEncodableShape {
        /// Set of information on each player to create a player session for.
        public let desiredPlayerSessions: [DesiredPlayerSession]?
        /// A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the  GameSession object with a request to start a new game session (see Start a Game Session).
        public let gameProperties: [GameProperty]?
        /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the  GameSession object with a request to start a new game session (see Start a Game Session).
        public let gameSessionData: String?
        /// A descriptive label that is associated with a game session. Session names do not need to be unique.
        public let gameSessionName: String?
        /// Name of the queue to use to place the new game session. You can use either the queue name or ARN value.
        public let gameSessionQueueName: String
        /// The maximum number of players that can be connected simultaneously to the game session.
        public let maximumPlayerSessionCount: Int
        /// A unique identifier to assign to the new game session placement. This value is developer-defined. The value must be unique across all Regions and cannot be reused unless you are resubmitting a canceled or timed-out placement request.
        public let placementId: String
        /// A set of values, expressed in milliseconds, that indicates the amount of latency that a player experiences when connected to AWS Regions. This information is used to try to place the new game session where it can offer the best possible gameplay experience for the players.
        public let playerLatencies: [PlayerLatency]?

        public init(desiredPlayerSessions: [DesiredPlayerSession]? = nil, gameProperties: [GameProperty]? = nil, gameSessionData: String? = nil, gameSessionName: String? = nil, gameSessionQueueName: String, maximumPlayerSessionCount: Int, placementId: String, playerLatencies: [PlayerLatency]? = nil) {
            self.desiredPlayerSessions = desiredPlayerSessions
            self.gameProperties = gameProperties
            self.gameSessionData = gameSessionData
            self.gameSessionName = gameSessionName
            self.gameSessionQueueName = gameSessionQueueName
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.placementId = placementId
            self.playerLatencies = playerLatencies
        }

        public func validate(name: String) throws {
            try self.desiredPlayerSessions?.forEach {
                try $0.validate(name: "\(name).desiredPlayerSessions[]")
            }
            try self.gameProperties?.forEach {
                try $0.validate(name: "\(name).gameProperties[]")
            }
            try self.validate(self.gameProperties, name: "gameProperties", parent: name, max: 16)
            try self.validate(self.gameSessionData, name: "gameSessionData", parent: name, max: 262_144)
            try self.validate(self.gameSessionData, name: "gameSessionData", parent: name, min: 1)
            try self.validate(self.gameSessionName, name: "gameSessionName", parent: name, max: 1024)
            try self.validate(self.gameSessionName, name: "gameSessionName", parent: name, min: 1)
            try self.validate(self.gameSessionQueueName, name: "gameSessionQueueName", parent: name, max: 256)
            try self.validate(self.gameSessionQueueName, name: "gameSessionQueueName", parent: name, min: 1)
            try self.validate(self.gameSessionQueueName, name: "gameSessionQueueName", parent: name, pattern: "[a-zA-Z0-9-]+|^arn:.*:gamesessionqueue\\/[a-zA-Z0-9-]+")
            try self.validate(self.maximumPlayerSessionCount, name: "maximumPlayerSessionCount", parent: name, min: 0)
            try self.validate(self.placementId, name: "placementId", parent: name, max: 48)
            try self.validate(self.placementId, name: "placementId", parent: name, min: 1)
            try self.validate(self.placementId, name: "placementId", parent: name, pattern: "[a-zA-Z0-9-]+")
            try self.playerLatencies?.forEach {
                try $0.validate(name: "\(name).playerLatencies[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case desiredPlayerSessions = "DesiredPlayerSessions"
            case gameProperties = "GameProperties"
            case gameSessionData = "GameSessionData"
            case gameSessionName = "GameSessionName"
            case gameSessionQueueName = "GameSessionQueueName"
            case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
            case placementId = "PlacementId"
            case playerLatencies = "PlayerLatencies"
        }
    }

    public struct StartGameSessionPlacementOutput: AWSDecodableShape {
        /// Object that describes the newly created game session placement. This object includes all the information provided in the request, as well as start/end time stamps and placement status.
        public let gameSessionPlacement: GameSessionPlacement?

        public init(gameSessionPlacement: GameSessionPlacement? = nil) {
            self.gameSessionPlacement = gameSessionPlacement
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionPlacement = "GameSessionPlacement"
        }
    }

    public struct StartMatchBackfillInput: AWSEncodableShape {
        /// Name of the matchmaker to use for this request. You can use either the configuration name or ARN value. The ARN of the matchmaker that was used with the original game session is listed in the GameSession object, MatchmakerData property.
        public let configurationName: String
        /// A unique identifier for the game session. Use the game session ID. When using FlexMatch as a standalone matchmaking solution, this parameter is not needed.
        public let gameSessionArn: String?
        /// Match information on all players that are currently assigned to the game session. This information is used by the matchmaker to find new players and add them to the existing game.   PlayerID, PlayerAttributes, Team -- This information is maintained in the GameSession object, MatchmakerData property, for all players who are currently assigned to the game session. The matchmaker data is in JSON syntax, formatted as a string. For more details, see  Match Data.    LatencyInMs -- If the matchmaker uses player latency, include a latency value, in milliseconds, for the Region that the game session is currently in. Do not include latency values for any other Region.
        public let players: [Player]
        /// A unique identifier for a matchmaking ticket. If no ticket ID is specified here, Amazon GameLift will generate one in the form of a UUID. Use this identifier to track the match backfill ticket status and retrieve match results.
        public let ticketId: String?

        public init(configurationName: String, gameSessionArn: String? = nil, players: [Player], ticketId: String? = nil) {
            self.configurationName = configurationName
            self.gameSessionArn = gameSessionArn
            self.players = players
            self.ticketId = ticketId
        }

        public func validate(name: String) throws {
            try self.validate(self.configurationName, name: "configurationName", parent: name, max: 256)
            try self.validate(self.configurationName, name: "configurationName", parent: name, min: 1)
            try self.validate(self.configurationName, name: "configurationName", parent: name, pattern: "[a-zA-Z0-9-\\.]*|^arn:.*:matchmakingconfiguration\\/[a-zA-Z0-9-\\.]*")
            try self.validate(self.gameSessionArn, name: "gameSessionArn", parent: name, max: 256)
            try self.validate(self.gameSessionArn, name: "gameSessionArn", parent: name, min: 1)
            try self.validate(self.gameSessionArn, name: "gameSessionArn", parent: name, pattern: "[a-zA-Z0-9:/-]+")
            try self.players.forEach {
                try $0.validate(name: "\(name).players[]")
            }
            try self.validate(self.ticketId, name: "ticketId", parent: name, max: 128)
            try self.validate(self.ticketId, name: "ticketId", parent: name, pattern: "[a-zA-Z0-9-\\.]*")
        }

        private enum CodingKeys: String, CodingKey {
            case configurationName = "ConfigurationName"
            case gameSessionArn = "GameSessionArn"
            case players = "Players"
            case ticketId = "TicketId"
        }
    }

    public struct StartMatchBackfillOutput: AWSDecodableShape {
        /// Ticket representing the backfill matchmaking request. This object includes the information in the request, ticket status, and match results as generated during the matchmaking process.
        public let matchmakingTicket: MatchmakingTicket?

        public init(matchmakingTicket: MatchmakingTicket? = nil) {
            self.matchmakingTicket = matchmakingTicket
        }

        private enum CodingKeys: String, CodingKey {
            case matchmakingTicket = "MatchmakingTicket"
        }
    }

    public struct StartMatchmakingInput: AWSEncodableShape {
        /// Name of the matchmaking configuration to use for this request. Matchmaking configurations must exist in the same Region as this request. You can use either the configuration name or ARN value.
        public let configurationName: String
        /// Information on each player to be matched. This information must include a player ID, and may contain player attributes and latency data to be used in the matchmaking process. After a successful match, Player objects contain the name of the team the player is assigned to.
        public let players: [Player]
        /// A unique identifier for a matchmaking ticket. If no ticket ID is specified here, Amazon GameLift will generate one in the form of a UUID. Use this identifier to track the matchmaking ticket status and retrieve match results.
        public let ticketId: String?

        public init(configurationName: String, players: [Player], ticketId: String? = nil) {
            self.configurationName = configurationName
            self.players = players
            self.ticketId = ticketId
        }

        public func validate(name: String) throws {
            try self.validate(self.configurationName, name: "configurationName", parent: name, max: 256)
            try self.validate(self.configurationName, name: "configurationName", parent: name, min: 1)
            try self.validate(self.configurationName, name: "configurationName", parent: name, pattern: "[a-zA-Z0-9-\\.]*|^arn:.*:matchmakingconfiguration\\/[a-zA-Z0-9-\\.]*")
            try self.players.forEach {
                try $0.validate(name: "\(name).players[]")
            }
            try self.validate(self.ticketId, name: "ticketId", parent: name, max: 128)
            try self.validate(self.ticketId, name: "ticketId", parent: name, pattern: "[a-zA-Z0-9-\\.]*")
        }

        private enum CodingKeys: String, CodingKey {
            case configurationName = "ConfigurationName"
            case players = "Players"
            case ticketId = "TicketId"
        }
    }

    public struct StartMatchmakingOutput: AWSDecodableShape {
        /// Ticket representing the matchmaking request. This object include the information included in the request, ticket status, and match results as generated during the matchmaking process.
        public let matchmakingTicket: MatchmakingTicket?

        public init(matchmakingTicket: MatchmakingTicket? = nil) {
            self.matchmakingTicket = matchmakingTicket
        }

        private enum CodingKeys: String, CodingKey {
            case matchmakingTicket = "MatchmakingTicket"
        }
    }

    public struct StopFleetActionsInput: AWSEncodableShape {
        /// List of actions to suspend on the fleet.
        public let actions: [FleetAction]
        /// A unique identifier for the fleet to stop actions on.  You can use either the fleet ID or ARN value.
        public let fleetId: String
        /// The fleet location to stop fleet actions for. Specify a location in the form of an AWS Region code, such as us-west-2.
        public let location: String?

        public init(actions: [FleetAction], fleetId: String, location: String? = nil) {
            self.actions = actions
            self.fleetId = fleetId
            self.location = location
        }

        public func validate(name: String) throws {
            try self.validate(self.actions, name: "actions", parent: name, max: 1)
            try self.validate(self.actions, name: "actions", parent: name, min: 1)
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            try self.validate(self.location, name: "location", parent: name, max: 64)
            try self.validate(self.location, name: "location", parent: name, min: 1)
            try self.validate(self.location, name: "location", parent: name, pattern: "^[a-z]+(-([a-z]+|\\d))*")
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "Actions"
            case fleetId = "FleetId"
            case location = "Location"
        }
    }

    public struct StopFleetActionsOutput: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
        public let fleetArn: String?
        /// A unique identifier for the fleet to stop actions on.
        public let fleetId: String?

        public init(fleetArn: String? = nil, fleetId: String? = nil) {
            self.fleetArn = fleetArn
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case fleetArn = "FleetArn"
            case fleetId = "FleetId"
        }
    }

    public struct StopGameSessionPlacementInput: AWSEncodableShape {
        /// A unique identifier for a game session placement to cancel.
        public let placementId: String

        public init(placementId: String) {
            self.placementId = placementId
        }

        public func validate(name: String) throws {
            try self.validate(self.placementId, name: "placementId", parent: name, max: 48)
            try self.validate(self.placementId, name: "placementId", parent: name, min: 1)
            try self.validate(self.placementId, name: "placementId", parent: name, pattern: "[a-zA-Z0-9-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case placementId = "PlacementId"
        }
    }

    public struct StopGameSessionPlacementOutput: AWSDecodableShape {
        /// Object that describes the canceled game session placement, with CANCELLED status and an end time stamp.
        public let gameSessionPlacement: GameSessionPlacement?

        public init(gameSessionPlacement: GameSessionPlacement? = nil) {
            self.gameSessionPlacement = gameSessionPlacement
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionPlacement = "GameSessionPlacement"
        }
    }

    public struct StopMatchmakingInput: AWSEncodableShape {
        /// A unique identifier for a matchmaking ticket.
        public let ticketId: String

        public init(ticketId: String) {
            self.ticketId = ticketId
        }

        public func validate(name: String) throws {
            try self.validate(self.ticketId, name: "ticketId", parent: name, max: 128)
            try self.validate(self.ticketId, name: "ticketId", parent: name, pattern: "[a-zA-Z0-9-\\.]*")
        }

        private enum CodingKeys: String, CodingKey {
            case ticketId = "TicketId"
        }
    }

    public struct StopMatchmakingOutput: AWSDecodableShape {
        public init() {}
    }

    public struct SuspendGameServerGroupInput: AWSEncodableShape {
        /// A unique identifier for the game server group. Use either the GameServerGroup name or ARN value.
        public let gameServerGroupName: String
        /// The activity to suspend for this game server group.
        public let suspendActions: [GameServerGroupAction]

        public init(gameServerGroupName: String, suspendActions: [GameServerGroupAction]) {
            self.gameServerGroupName = gameServerGroupName
            self.suspendActions = suspendActions
        }

        public func validate(name: String) throws {
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, max: 256)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, min: 1)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, pattern: "[a-zA-Z0-9-\\.]+|^arn:.*:gameservergroup\\/[a-zA-Z0-9-\\.]+")
            try self.validate(self.suspendActions, name: "suspendActions", parent: name, max: 1)
            try self.validate(self.suspendActions, name: "suspendActions", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case gameServerGroupName = "GameServerGroupName"
            case suspendActions = "SuspendActions"
        }
    }

    public struct SuspendGameServerGroupOutput: AWSDecodableShape {
        /// An object that describes the game server group resource, with the SuspendedActions property updated to reflect the suspended activity.
        public let gameServerGroup: GameServerGroup?

        public init(gameServerGroup: GameServerGroup? = nil) {
            self.gameServerGroup = gameServerGroup
        }

        private enum CodingKeys: String, CodingKey {
            case gameServerGroup = "GameServerGroup"
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        ///  The key for a developer-defined key:value pair for tagging an AWS resource.
        public let key: String
        ///  The value for a developer-defined key:value pair for tagging an AWS resource.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.key, name: "key", parent: name, max: 128)
            try self.validate(self.key, name: "key", parent: name, min: 1)
            try self.validate(self.value, name: "value", parent: name, max: 256)
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct TagResourceRequest: AWSEncodableShape {
        ///  The Amazon Resource Name  (ARN) that is assigned to and uniquely identifies the GameLift resource that you want to assign tags to. GameLift resource ARNs are included in the data object for the resource, which  can be retrieved by calling a List or Describe operation for the resource type.
        public let resourceARN: String
        /// A list of one or more tags to assign to the specified GameLift resource.  Tags are developer-defined and structured as key-value pairs.  The maximum tag limit may be lower than stated. See  Tagging AWS Resources  for actual tagging limits.
        public let tags: [Tag]

        public init(resourceARN: String, tags: [Tag]) {
            self.resourceARN = resourceARN
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, max: 1011)
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, min: 1)
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 200)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case tags = "Tags"
        }
    }

    public struct TagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct TargetConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// Desired value to use with a target-based scaling policy. The value must be relevant for whatever metric the scaling policy is using. For example, in a policy using the metric PercentAvailableGameSessions, the target value should be the preferred size of the fleet's buffer (the percent of capacity that should be idle and ready for new game sessions).
        public let targetValue: Double

        public init(targetValue: Double) {
            self.targetValue = targetValue
        }

        private enum CodingKeys: String, CodingKey {
            case targetValue = "TargetValue"
        }
    }

    public struct TargetTrackingConfiguration: AWSEncodableShape {
        /// Desired value to use with a game server group target-based scaling policy.
        public let targetValue: Double

        public init(targetValue: Double) {
            self.targetValue = targetValue
        }

        public func validate(name: String) throws {
            try self.validate(self.targetValue, name: "targetValue", parent: name, min: 0.0)
        }

        private enum CodingKeys: String, CodingKey {
            case targetValue = "TargetValue"
        }
    }

    public struct UntagResourceRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) that is assigned to and uniquely identifies the GameLift resource that you want to remove tags from. GameLift resource ARNs are included in the data object for the resource, which can be retrieved by calling a List or Describe operation for the resource type.
        public let resourceARN: String
        /// A list of one or more tag keys to remove from the specified GameLift resource. An AWS resource can have only one tag with a specific tag key, so specifying the tag key identifies which tag to remove.
        public let tagKeys: [String]

        public init(resourceARN: String, tagKeys: [String]) {
            self.resourceARN = resourceARN
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, max: 1011)
            try self.validate(self.resourceARN, name: "resourceARN", parent: name, min: 1)
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
            }
            try self.validate(self.tagKeys, name: "tagKeys", parent: name, max: 200)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case tagKeys = "TagKeys"
        }
    }

    public struct UntagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct UpdateAliasInput: AWSEncodableShape {
        /// A unique identifier for the alias that you want to update. You can use either the alias ID or ARN value.
        public let aliasId: String
        /// A human-readable description of the alias.
        public let description: String?
        /// A descriptive label that is associated with an alias. Alias names do not need to be unique.
        public let name: String?
        /// The routing configuration, including routing type and fleet target, for the alias.
        public let routingStrategy: RoutingStrategy?

        public init(aliasId: String, description: String? = nil, name: String? = nil, routingStrategy: RoutingStrategy? = nil) {
            self.aliasId = aliasId
            self.description = description
            self.name = name
            self.routingStrategy = routingStrategy
        }

        public func validate(name: String) throws {
            try self.validate(self.aliasId, name: "aliasId", parent: name, pattern: "^alias-\\S+|^arn:.*:alias\\/alias-\\S+")
            try self.validate(self.description, name: "description", parent: name, max: 1024)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, max: 1024)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: ".*\\S.*")
            try self.routingStrategy?.validate(name: "\(name).routingStrategy")
        }

        private enum CodingKeys: String, CodingKey {
            case aliasId = "AliasId"
            case description = "Description"
            case name = "Name"
            case routingStrategy = "RoutingStrategy"
        }
    }

    public struct UpdateAliasOutput: AWSDecodableShape {
        /// The updated alias resource.
        public let alias: Alias?

        public init(alias: Alias? = nil) {
            self.alias = alias
        }

        private enum CodingKeys: String, CodingKey {
            case alias = "Alias"
        }
    }

    public struct UpdateBuildInput: AWSEncodableShape {
        /// A unique identifier for the build to update. You can use either the build ID or ARN value.
        public let buildId: String
        /// A descriptive label that is associated with a build. Build names do not need to be unique.
        public let name: String?
        /// Version information that is associated with a build or script. Version strings do not need to be unique.
        public let version: String?

        public init(buildId: String, name: String? = nil, version: String? = nil) {
            self.buildId = buildId
            self.name = name
            self.version = version
        }

        public func validate(name: String) throws {
            try self.validate(self.buildId, name: "buildId", parent: name, pattern: "^build-\\S+|^arn:.*:build\\/build-\\S+")
            try self.validate(self.name, name: "name", parent: name, max: 1024)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.version, name: "version", parent: name, max: 1024)
            try self.validate(self.version, name: "version", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case buildId = "BuildId"
            case name = "Name"
            case version = "Version"
        }
    }

    public struct UpdateBuildOutput: AWSDecodableShape {
        /// The updated build resource.
        public let build: Build?

        public init(build: Build? = nil) {
            self.build = build
        }

        private enum CodingKeys: String, CodingKey {
            case build = "Build"
        }
    }

    public struct UpdateFleetAttributesInput: AWSEncodableShape {
        /// A human-readable description of a fleet.
        public let description: String?
        /// A unique identifier for the fleet to update attribute metadata for. You can use either the fleet ID or ARN value.
        public let fleetId: String
        /// The name of a metric group to add this fleet to. Use a metric group in Amazon CloudWatch to aggregate the metrics from multiple fleets. Provide an existing metric group name, or create a new metric group by providing a new name. A fleet can only be in one metric group at a time.
        public let metricGroups: [String]?
        /// A descriptive label that is associated with a fleet. Fleet names do not need to be unique.
        public let name: String?
        /// The game session protection policy to apply to all new instances created in this fleet. Instances that already exist are not affected. You can set protection for individual instances using UpdateGameSession.    NoProtection -- The game session can be terminated during a scale-down event.    FullProtection -- If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.
        public let newGameSessionProtectionPolicy: ProtectionPolicy?
        /// Policy settings that limit the number of game sessions an individual player can create over a span of time.
        public let resourceCreationLimitPolicy: ResourceCreationLimitPolicy?

        public init(description: String? = nil, fleetId: String, metricGroups: [String]? = nil, name: String? = nil, newGameSessionProtectionPolicy: ProtectionPolicy? = nil, resourceCreationLimitPolicy: ResourceCreationLimitPolicy? = nil) {
            self.description = description
            self.fleetId = fleetId
            self.metricGroups = metricGroups
            self.name = name
            self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
            self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
        }

        public func validate(name: String) throws {
            try self.validate(self.description, name: "description", parent: name, max: 1024)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            try self.metricGroups?.forEach {
                try validate($0, name: "metricGroups[]", parent: name, max: 255)
                try validate($0, name: "metricGroups[]", parent: name, min: 1)
            }
            try self.validate(self.metricGroups, name: "metricGroups", parent: name, max: 1)
            try self.validate(self.name, name: "name", parent: name, max: 1024)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.resourceCreationLimitPolicy?.validate(name: "\(name).resourceCreationLimitPolicy")
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case fleetId = "FleetId"
            case metricGroups = "MetricGroups"
            case name = "Name"
            case newGameSessionProtectionPolicy = "NewGameSessionProtectionPolicy"
            case resourceCreationLimitPolicy = "ResourceCreationLimitPolicy"
        }
    }

    public struct UpdateFleetAttributesOutput: AWSDecodableShape {
        /// A unique identifier for the fleet that was updated.
        public let fleetId: String?

        public init(fleetId: String? = nil) {
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
        }
    }

    public struct UpdateFleetCapacityInput: AWSEncodableShape {
        /// The number of EC2 instances you want to maintain in the specified fleet location. This value must fall between the minimum and maximum size limits.
        public let desiredInstances: Int?
        /// A unique identifier for the fleet to update capacity settings for. You can use either the fleet ID or ARN value.
        public let fleetId: String
        /// The name of a remote location to update fleet capacity settings for, in the form of an AWS Region code such as us-west-2.
        public let location: String?
        /// The maximum number of instances that are allowed in the specified fleet location. If this parameter is not set, the default is 1.
        public let maxSize: Int?
        /// The minimum number of instances that are allowed in the specified fleet location. If this parameter is not set, the default is 0.
        public let minSize: Int?

        public init(desiredInstances: Int? = nil, fleetId: String, location: String? = nil, maxSize: Int? = nil, minSize: Int? = nil) {
            self.desiredInstances = desiredInstances
            self.fleetId = fleetId
            self.location = location
            self.maxSize = maxSize
            self.minSize = minSize
        }

        public func validate(name: String) throws {
            try self.validate(self.desiredInstances, name: "desiredInstances", parent: name, min: 0)
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            try self.validate(self.location, name: "location", parent: name, max: 64)
            try self.validate(self.location, name: "location", parent: name, min: 1)
            try self.validate(self.location, name: "location", parent: name, pattern: "^[a-z]+(-([a-z]+|\\d))*")
            try self.validate(self.maxSize, name: "maxSize", parent: name, min: 0)
            try self.validate(self.minSize, name: "minSize", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case desiredInstances = "DesiredInstances"
            case fleetId = "FleetId"
            case location = "Location"
            case maxSize = "MaxSize"
            case minSize = "MinSize"
        }
    }

    public struct UpdateFleetCapacityOutput: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) that is assigned to a GameLift fleet resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
        public let fleetArn: String?
        /// A unique identifier for the fleet that was updated.
        public let fleetId: String?
        /// The remote location being updated, expressed as an AWS Region code,  such as us-west-2.
        public let location: String?

        public init(fleetArn: String? = nil, fleetId: String? = nil, location: String? = nil) {
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.location = location
        }

        private enum CodingKeys: String, CodingKey {
            case fleetArn = "FleetArn"
            case fleetId = "FleetId"
            case location = "Location"
        }
    }

    public struct UpdateFleetPortSettingsInput: AWSEncodableShape {
        /// A unique identifier for the fleet to update port settings for. You can use either the fleet ID or ARN value.
        public let fleetId: String
        /// A collection of port settings to be added to the fleet resource.
        public let inboundPermissionAuthorizations: [IpPermission]?
        /// A collection of port settings to be removed from the fleet resource.
        public let inboundPermissionRevocations: [IpPermission]?

        public init(fleetId: String, inboundPermissionAuthorizations: [IpPermission]? = nil, inboundPermissionRevocations: [IpPermission]? = nil) {
            self.fleetId = fleetId
            self.inboundPermissionAuthorizations = inboundPermissionAuthorizations
            self.inboundPermissionRevocations = inboundPermissionRevocations
        }

        public func validate(name: String) throws {
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            try self.inboundPermissionAuthorizations?.forEach {
                try $0.validate(name: "\(name).inboundPermissionAuthorizations[]")
            }
            try self.validate(self.inboundPermissionAuthorizations, name: "inboundPermissionAuthorizations", parent: name, max: 50)
            try self.inboundPermissionRevocations?.forEach {
                try $0.validate(name: "\(name).inboundPermissionRevocations[]")
            }
            try self.validate(self.inboundPermissionRevocations, name: "inboundPermissionRevocations", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case inboundPermissionAuthorizations = "InboundPermissionAuthorizations"
            case inboundPermissionRevocations = "InboundPermissionRevocations"
        }
    }

    public struct UpdateFleetPortSettingsOutput: AWSDecodableShape {
        /// A unique identifier for the fleet that was updated.
        public let fleetId: String?

        public init(fleetId: String? = nil) {
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
        }
    }

    public struct UpdateGameServerGroupInput: AWSEncodableShape {
        /// Indicates how GameLift FleetIQ balances the use of Spot Instances and On-Demand Instances in the game server group. Method options include the following:    SPOT_ONLY - Only Spot Instances are used in the game server group. If Spot Instances are unavailable or not viable for game hosting, the game server group provides no hosting capacity until Spot Instances can again be used. Until then, no new instances are started, and the existing nonviable Spot Instances are terminated (after current gameplay ends) and are not replaced.    SPOT_PREFERRED - (default value) Spot Instances are used whenever available in the game server group. If Spot Instances are unavailable, the game server group continues to provide hosting capacity by falling back to On-Demand Instances. Existing nonviable Spot Instances are terminated (after current gameplay ends) and are replaced with new On-Demand Instances.    ON_DEMAND_ONLY - Only On-Demand Instances are used in the game server group. No Spot Instances are used, even when available, while this balancing strategy is in force.
        public let balancingStrategy: BalancingStrategy?
        /// A unique identifier for the game server group. Use either the GameServerGroup name or ARN value.
        public let gameServerGroupName: String
        /// A flag that indicates whether instances in the game server group are protected  from early termination. Unprotected instances that have active game servers running might  be terminated during a scale-down event, causing players to be dropped from the game.  Protected instances cannot be terminated while there are active game servers running except  in the event of a forced game server group deletion (see ). An exception to this is with Spot  Instances, which can be terminated by AWS regardless of protection status. This property is set to NO_PROTECTION by default.
        public let gameServerProtectionPolicy: GameServerProtectionPolicy?
        /// An updated list of EC2 instance types to use in the Auto Scaling group. The instance definitions must specify at least two different instance types that are supported by GameLift FleetIQ. This updated list replaces the entire current list of instance definitions for the game server group. For more information on instance types, see EC2 Instance Types in the Amazon EC2 User Guide. You can optionally specify capacity weighting for each instance type. If no weight value is specified for an instance type, it is set to the default value "1". For more information about capacity weighting, see  Instance Weighting for Amazon EC2 Auto Scaling in the Amazon EC2 Auto Scaling User Guide.
        public let instanceDefinitions: [InstanceDefinition]?
        /// The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
        public let roleArn: String?

        public init(balancingStrategy: BalancingStrategy? = nil, gameServerGroupName: String, gameServerProtectionPolicy: GameServerProtectionPolicy? = nil, instanceDefinitions: [InstanceDefinition]? = nil, roleArn: String? = nil) {
            self.balancingStrategy = balancingStrategy
            self.gameServerGroupName = gameServerGroupName
            self.gameServerProtectionPolicy = gameServerProtectionPolicy
            self.instanceDefinitions = instanceDefinitions
            self.roleArn = roleArn
        }

        public func validate(name: String) throws {
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, max: 256)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, min: 1)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, pattern: "[a-zA-Z0-9-\\.]+|^arn:.*:gameservergroup\\/[a-zA-Z0-9-\\.]+")
            try self.instanceDefinitions?.forEach {
                try $0.validate(name: "\(name).instanceDefinitions[]")
            }
            try self.validate(self.instanceDefinitions, name: "instanceDefinitions", parent: name, max: 20)
            try self.validate(self.instanceDefinitions, name: "instanceDefinitions", parent: name, min: 2)
            try self.validate(self.roleArn, name: "roleArn", parent: name, max: 256)
            try self.validate(self.roleArn, name: "roleArn", parent: name, min: 1)
            try self.validate(self.roleArn, name: "roleArn", parent: name, pattern: "^arn:.*:role\\/[\\w+=,.@-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case balancingStrategy = "BalancingStrategy"
            case gameServerGroupName = "GameServerGroupName"
            case gameServerProtectionPolicy = "GameServerProtectionPolicy"
            case instanceDefinitions = "InstanceDefinitions"
            case roleArn = "RoleArn"
        }
    }

    public struct UpdateGameServerGroupOutput: AWSDecodableShape {
        /// An object that describes the game server group resource with updated properties.
        public let gameServerGroup: GameServerGroup?

        public init(gameServerGroup: GameServerGroup? = nil) {
            self.gameServerGroup = gameServerGroup
        }

        private enum CodingKeys: String, CodingKey {
            case gameServerGroup = "GameServerGroup"
        }
    }

    public struct UpdateGameServerInput: AWSEncodableShape {
        /// A set of custom game server properties, formatted as a single string value. This data  is passed to a game client or service when it requests information on game servers using ListGameServers or ClaimGameServer.
        public let gameServerData: String?
        /// A unique identifier for the game server group where the game server is running.  Use either the GameServerGroup name or ARN value.
        public let gameServerGroupName: String
        /// A custom string that uniquely identifies the game server to update.
        public let gameServerId: String
        /// Indicates health status of the game server. A request that includes this parameter updates the game server's LastHealthCheckTime timestamp.
        public let healthCheck: GameServerHealthCheck?
        /// Indicates whether the game server is available or is currently hosting gameplay.
        public let utilizationStatus: GameServerUtilizationStatus?

        public init(gameServerData: String? = nil, gameServerGroupName: String, gameServerId: String, healthCheck: GameServerHealthCheck? = nil, utilizationStatus: GameServerUtilizationStatus? = nil) {
            self.gameServerData = gameServerData
            self.gameServerGroupName = gameServerGroupName
            self.gameServerId = gameServerId
            self.healthCheck = healthCheck
            self.utilizationStatus = utilizationStatus
        }

        public func validate(name: String) throws {
            try self.validate(self.gameServerData, name: "gameServerData", parent: name, max: 1024)
            try self.validate(self.gameServerData, name: "gameServerData", parent: name, min: 1)
            try self.validate(self.gameServerData, name: "gameServerData", parent: name, pattern: ".*\\S.*")
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, max: 256)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, min: 1)
            try self.validate(self.gameServerGroupName, name: "gameServerGroupName", parent: name, pattern: "[a-zA-Z0-9-\\.]+|^arn:.*:gameservergroup\\/[a-zA-Z0-9-\\.]+")
            try self.validate(self.gameServerId, name: "gameServerId", parent: name, max: 128)
            try self.validate(self.gameServerId, name: "gameServerId", parent: name, min: 3)
            try self.validate(self.gameServerId, name: "gameServerId", parent: name, pattern: "[a-zA-Z0-9-\\.]+")
        }

        private enum CodingKeys: String, CodingKey {
            case gameServerData = "GameServerData"
            case gameServerGroupName = "GameServerGroupName"
            case gameServerId = "GameServerId"
            case healthCheck = "HealthCheck"
            case utilizationStatus = "UtilizationStatus"
        }
    }

    public struct UpdateGameServerOutput: AWSDecodableShape {
        /// Object that describes the newly updated game server.
        public let gameServer: GameServer?

        public init(gameServer: GameServer? = nil) {
            self.gameServer = gameServer
        }

        private enum CodingKeys: String, CodingKey {
            case gameServer = "GameServer"
        }
    }

    public struct UpdateGameSessionInput: AWSEncodableShape {
        /// A unique identifier for the game session to update.
        public let gameSessionId: String
        /// The maximum number of players that can be connected simultaneously to the game session.
        public let maximumPlayerSessionCount: Int?
        /// A descriptive label that is associated with a game session. Session names do not need to be unique.
        public let name: String?
        /// A policy that determines whether the game session is accepting new players.
        public let playerSessionCreationPolicy: PlayerSessionCreationPolicy?
        /// Game session protection policy to apply to this game session only.    NoProtection -- The game session can be terminated during a scale-down event.    FullProtection -- If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.
        public let protectionPolicy: ProtectionPolicy?

        public init(gameSessionId: String, maximumPlayerSessionCount: Int? = nil, name: String? = nil, playerSessionCreationPolicy: PlayerSessionCreationPolicy? = nil, protectionPolicy: ProtectionPolicy? = nil) {
            self.gameSessionId = gameSessionId
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.name = name
            self.playerSessionCreationPolicy = playerSessionCreationPolicy
            self.protectionPolicy = protectionPolicy
        }

        public func validate(name: String) throws {
            try self.validate(self.gameSessionId, name: "gameSessionId", parent: name, max: 256)
            try self.validate(self.gameSessionId, name: "gameSessionId", parent: name, min: 1)
            try self.validate(self.gameSessionId, name: "gameSessionId", parent: name, pattern: "[a-zA-Z0-9:/-]+")
            try self.validate(self.maximumPlayerSessionCount, name: "maximumPlayerSessionCount", parent: name, min: 0)
            try self.validate(self.name, name: "name", parent: name, max: 1024)
            try self.validate(self.name, name: "name", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionId = "GameSessionId"
            case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
            case name = "Name"
            case playerSessionCreationPolicy = "PlayerSessionCreationPolicy"
            case protectionPolicy = "ProtectionPolicy"
        }
    }

    public struct UpdateGameSessionOutput: AWSDecodableShape {
        /// The updated game session properties.
        public let gameSession: GameSession?

        public init(gameSession: GameSession? = nil) {
            self.gameSession = gameSession
        }

        private enum CodingKeys: String, CodingKey {
            case gameSession = "GameSession"
        }
    }

    public struct UpdateGameSessionQueueInput: AWSEncodableShape {
        ///  Information to be added to all events that are related to this game session queue.
        public let customEventData: String?
        /// A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue.  Destinations are identified by either a fleet ARN or a fleet alias ARN, and are listed in order of placement preference. When updating this list, provide a complete list of destinations.
        public let destinations: [GameSessionQueueDestination]?
        /// A list of locations where a queue is allowed to place new game sessions. Locations  are specified in the form of AWS Region codes, such as us-west-2. If this parameter is  not set, game sessions can be placed in any queue location. To remove an existing filter configuration, pass in an empty set.
        public let filterConfiguration: FilterConfiguration?
        /// A descriptive label that is associated with game session queue. Queue names must be unique within each Region. You can use either the queue ID or ARN value.
        public let name: String
        /// An SNS topic ARN that is set up to receive game session placement notifications. See  Setting up notifications for game session placement.
        public let notificationTarget: String?
        /// A set of policies that act as a sliding cap on player latency. FleetIQ works to deliver low latency for most players in a game session. These policies ensure that no individual player can be placed into a game with unreasonably high latency. Use multiple policies to gradually relax latency requirements a step at a time. Multiple policies are applied based on their maximum allowed latency, starting with the lowest value. When updating policies, provide a complete collection of policies.
        public let playerLatencyPolicies: [PlayerLatencyPolicy]?
        /// Custom settings to use when prioritizing destinations and locations for game session placements. This  configuration replaces the FleetIQ default prioritization process. Priority types that are not explicitly  named will be automatically applied at the end of the prioritization process. To remove an existing priority configuration, pass in an empty set.
        public let priorityConfiguration: PriorityConfiguration?
        /// The maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a TIMED_OUT status.
        public let timeoutInSeconds: Int?

        public init(customEventData: String? = nil, destinations: [GameSessionQueueDestination]? = nil, filterConfiguration: FilterConfiguration? = nil, name: String, notificationTarget: String? = nil, playerLatencyPolicies: [PlayerLatencyPolicy]? = nil, priorityConfiguration: PriorityConfiguration? = nil, timeoutInSeconds: Int? = nil) {
            self.customEventData = customEventData
            self.destinations = destinations
            self.filterConfiguration = filterConfiguration
            self.name = name
            self.notificationTarget = notificationTarget
            self.playerLatencyPolicies = playerLatencyPolicies
            self.priorityConfiguration = priorityConfiguration
            self.timeoutInSeconds = timeoutInSeconds
        }

        public func validate(name: String) throws {
            try self.validate(self.customEventData, name: "customEventData", parent: name, max: 256)
            try self.validate(self.customEventData, name: "customEventData", parent: name, pattern: "[\\s\\S]*")
            try self.destinations?.forEach {
                try $0.validate(name: "\(name).destinations[]")
            }
            try self.filterConfiguration?.validate(name: "\(name).filterConfiguration")
            try self.validate(self.name, name: "name", parent: name, max: 256)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "[a-zA-Z0-9-]+|^arn:.*:gamesessionqueue\\/[a-zA-Z0-9-]+")
            try self.validate(self.notificationTarget, name: "notificationTarget", parent: name, max: 300)
            try self.validate(self.notificationTarget, name: "notificationTarget", parent: name, pattern: "[a-zA-Z0-9:_-]*(\\.fifo)?")
            try self.playerLatencyPolicies?.forEach {
                try $0.validate(name: "\(name).playerLatencyPolicies[]")
            }
            try self.priorityConfiguration?.validate(name: "\(name).priorityConfiguration")
            try self.validate(self.timeoutInSeconds, name: "timeoutInSeconds", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case customEventData = "CustomEventData"
            case destinations = "Destinations"
            case filterConfiguration = "FilterConfiguration"
            case name = "Name"
            case notificationTarget = "NotificationTarget"
            case playerLatencyPolicies = "PlayerLatencyPolicies"
            case priorityConfiguration = "PriorityConfiguration"
            case timeoutInSeconds = "TimeoutInSeconds"
        }
    }

    public struct UpdateGameSessionQueueOutput: AWSDecodableShape {
        /// An object that describes the newly updated game session queue.
        public let gameSessionQueue: GameSessionQueue?

        public init(gameSessionQueue: GameSessionQueue? = nil) {
            self.gameSessionQueue = gameSessionQueue
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionQueue = "GameSessionQueue"
        }
    }

    public struct UpdateMatchmakingConfigurationInput: AWSEncodableShape {
        /// A flag that indicates whether a match that was created with this configuration must be accepted by the matched players. To require acceptance, set to TRUE. With this option enabled, matchmaking tickets use the status REQUIRES_ACCEPTANCE to indicate when a completed potential match is waiting for player acceptance.
        public let acceptanceRequired: Bool?
        /// The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
        public let acceptanceTimeoutSeconds: Int?
        /// The number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies  a match for a single 12-person team, and the additional player count is set to 2, only 10 players are selected for the match. This parameter is not used if FlexMatchMode is set to STANDALONE.
        public let additionalPlayerCount: Int?
        /// The method that is used to backfill game sessions created with this matchmaking configuration. Specify MANUAL when your game manages backfill requests manually or does not use the match backfill feature. Specify AUTOMATIC to have GameLift create a StartMatchBackfill request whenever a game session has one or more open slots. Learn more about manual and automatic backfill in Backfill Existing Games with FlexMatch. Automatic backfill is not available when FlexMatchMode is set to STANDALONE.
        public let backfillMode: BackfillMode?
        /// Information to add to all events related to the matchmaking configuration.
        public let customEventData: String?
        /// A descriptive label that is associated with matchmaking configuration.
        public let description: String?
        /// Indicates whether this matchmaking configuration is being used with GameLift hosting or as a standalone matchmaking solution.     STANDALONE - FlexMatch forms matches and returns match information, including players and team assignments, in a   MatchmakingSucceeded event.    WITH_QUEUE - FlexMatch forms matches and uses the specified GameLift queue to start a game session for the match.
        public let flexMatchMode: FlexMatchMode?
        /// A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the  GameSession object with a request to start a new game session (see Start a Game Session). This information is added to the new GameSession object that is created for a successful match.  This parameter is not used if FlexMatchMode is set to STANDALONE.
        public let gameProperties: [GameProperty]?
        /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the  GameSession object with a request to start a new game session (see Start a Game Session). This information is added to the new GameSession object that is created for a successful match.  This parameter is not used if FlexMatchMode is set to STANDALONE.
        public let gameSessionData: String?
        /// The Amazon Resource Name (ARN) that is assigned to a GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::gamesessionqueue/. Queues can be located in any Region. Queues are used to start new GameLift-hosted game sessions for matches that are created with this matchmaking configuration. If FlexMatchMode is set to STANDALONE, do not set this parameter.
        public let gameSessionQueueArns: [String]?
        /// A unique identifier for the matchmaking configuration to update. You can use either the configuration name or ARN value.
        public let name: String
        /// An SNS topic ARN that is set up to receive matchmaking notifications. See  Setting up notifications for matchmaking for more information.
        public let notificationTarget: String?
        /// The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out. Requests that fail due to timing out can be resubmitted as needed.
        public let requestTimeoutSeconds: Int?
        /// A unique identifier for the matchmaking rule set to use with this configuration. You can use either the rule set name or ARN value. A matchmaking configuration can only use rule sets that are defined in the same Region.
        public let ruleSetName: String?

        public init(acceptanceRequired: Bool? = nil, acceptanceTimeoutSeconds: Int? = nil, additionalPlayerCount: Int? = nil, backfillMode: BackfillMode? = nil, customEventData: String? = nil, description: String? = nil, flexMatchMode: FlexMatchMode? = nil, gameProperties: [GameProperty]? = nil, gameSessionData: String? = nil, gameSessionQueueArns: [String]? = nil, name: String, notificationTarget: String? = nil, requestTimeoutSeconds: Int? = nil, ruleSetName: String? = nil) {
            self.acceptanceRequired = acceptanceRequired
            self.acceptanceTimeoutSeconds = acceptanceTimeoutSeconds
            self.additionalPlayerCount = additionalPlayerCount
            self.backfillMode = backfillMode
            self.customEventData = customEventData
            self.description = description
            self.flexMatchMode = flexMatchMode
            self.gameProperties = gameProperties
            self.gameSessionData = gameSessionData
            self.gameSessionQueueArns = gameSessionQueueArns
            self.name = name
            self.notificationTarget = notificationTarget
            self.requestTimeoutSeconds = requestTimeoutSeconds
            self.ruleSetName = ruleSetName
        }

        public func validate(name: String) throws {
            try self.validate(self.acceptanceTimeoutSeconds, name: "acceptanceTimeoutSeconds", parent: name, max: 600)
            try self.validate(self.acceptanceTimeoutSeconds, name: "acceptanceTimeoutSeconds", parent: name, min: 1)
            try self.validate(self.additionalPlayerCount, name: "additionalPlayerCount", parent: name, min: 0)
            try self.validate(self.customEventData, name: "customEventData", parent: name, max: 256)
            try self.validate(self.description, name: "description", parent: name, max: 1024)
            try self.validate(self.description, name: "description", parent: name, min: 1)
            try self.gameProperties?.forEach {
                try $0.validate(name: "\(name).gameProperties[]")
            }
            try self.validate(self.gameProperties, name: "gameProperties", parent: name, max: 16)
            try self.validate(self.gameSessionData, name: "gameSessionData", parent: name, max: 4096)
            try self.validate(self.gameSessionData, name: "gameSessionData", parent: name, min: 1)
            try self.gameSessionQueueArns?.forEach {
                try validate($0, name: "gameSessionQueueArns[]", parent: name, max: 256)
                try validate($0, name: "gameSessionQueueArns[]", parent: name, min: 1)
                try validate($0, name: "gameSessionQueueArns[]", parent: name, pattern: "[a-zA-Z0-9:/-]+")
            }
            try self.validate(self.name, name: "name", parent: name, max: 256)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "[a-zA-Z0-9-\\.]*|^arn:.*:matchmakingconfiguration\\/[a-zA-Z0-9-\\.]*")
            try self.validate(self.notificationTarget, name: "notificationTarget", parent: name, max: 300)
            try self.validate(self.notificationTarget, name: "notificationTarget", parent: name, pattern: "[a-zA-Z0-9:_/-]*(.fifo)?")
            try self.validate(self.requestTimeoutSeconds, name: "requestTimeoutSeconds", parent: name, max: 43200)
            try self.validate(self.requestTimeoutSeconds, name: "requestTimeoutSeconds", parent: name, min: 1)
            try self.validate(self.ruleSetName, name: "ruleSetName", parent: name, max: 256)
            try self.validate(self.ruleSetName, name: "ruleSetName", parent: name, min: 1)
            try self.validate(self.ruleSetName, name: "ruleSetName", parent: name, pattern: "[a-zA-Z0-9-\\.]*|^arn:.*:matchmakingruleset\\/[a-zA-Z0-9-\\.]*")
        }

        private enum CodingKeys: String, CodingKey {
            case acceptanceRequired = "AcceptanceRequired"
            case acceptanceTimeoutSeconds = "AcceptanceTimeoutSeconds"
            case additionalPlayerCount = "AdditionalPlayerCount"
            case backfillMode = "BackfillMode"
            case customEventData = "CustomEventData"
            case description = "Description"
            case flexMatchMode = "FlexMatchMode"
            case gameProperties = "GameProperties"
            case gameSessionData = "GameSessionData"
            case gameSessionQueueArns = "GameSessionQueueArns"
            case name = "Name"
            case notificationTarget = "NotificationTarget"
            case requestTimeoutSeconds = "RequestTimeoutSeconds"
            case ruleSetName = "RuleSetName"
        }
    }

    public struct UpdateMatchmakingConfigurationOutput: AWSDecodableShape {
        /// The updated matchmaking configuration.
        public let configuration: MatchmakingConfiguration?

        public init(configuration: MatchmakingConfiguration? = nil) {
            self.configuration = configuration
        }

        private enum CodingKeys: String, CodingKey {
            case configuration = "Configuration"
        }
    }

    public struct UpdateRuntimeConfigurationInput: AWSEncodableShape {
        /// A unique identifier for the fleet to update runtime configuration for. You can use either the fleet ID or ARN value.
        public let fleetId: String
        /// Instructions for launching server processes on each instance in the fleet. Server processes run either a custom game build executable or a Realtime Servers script. The runtime configuration lists the types of server processes to run on an instance, how to launch them, and the number of processes to run concurrently.
        public let runtimeConfiguration: RuntimeConfiguration

        public init(fleetId: String, runtimeConfiguration: RuntimeConfiguration) {
            self.fleetId = fleetId
            self.runtimeConfiguration = runtimeConfiguration
        }

        public func validate(name: String) throws {
            try self.validate(self.fleetId, name: "fleetId", parent: name, pattern: "^fleet-\\S+|^arn:.*:fleet\\/fleet-\\S+")
            try self.runtimeConfiguration.validate(name: "\(name).runtimeConfiguration")
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case runtimeConfiguration = "RuntimeConfiguration"
        }
    }

    public struct UpdateRuntimeConfigurationOutput: AWSDecodableShape {
        /// The runtime configuration currently in use by all instances in the fleet. If the update was successful, all property changes are shown.
        public let runtimeConfiguration: RuntimeConfiguration?

        public init(runtimeConfiguration: RuntimeConfiguration? = nil) {
            self.runtimeConfiguration = runtimeConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case runtimeConfiguration = "RuntimeConfiguration"
        }
    }

    public struct UpdateScriptInput: AWSEncodableShape {
        /// A descriptive label that is associated with a script. Script names do not need to be unique.
        public let name: String?
        /// A unique identifier for the Realtime script to update. You can use either the script ID or ARN value.
        public let scriptId: String
        /// The location of the Amazon S3 bucket where a zipped file containing your Realtime scripts is stored. The storage location must specify the Amazon S3 bucket name, the zip file name (the "key"), and a role ARN that allows Amazon GameLift to access the Amazon S3 storage location. The S3 bucket must be in the same Region where you want to create a new script. By default, Amazon GameLift uploads the latest version of the zip file; if you have S3 object versioning turned on, you can use the ObjectVersion parameter to specify an earlier version.
        public let storageLocation: S3Location?
        /// Version information that is associated with a build or script. Version strings do not need to be unique.
        public let version: String?
        /// A data object containing your Realtime scripts and dependencies as a zip file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB. When using the AWS CLI tool to create a script, this parameter is set to the zip file name. It must be prepended with the string "fileb://" to indicate that the file data is a binary object. For example: --zip-file fileb://myRealtimeScript.zip.
        public let zipFile: Data?

        public init(name: String? = nil, scriptId: String, storageLocation: S3Location? = nil, version: String? = nil, zipFile: Data? = nil) {
            self.name = name
            self.scriptId = scriptId
            self.storageLocation = storageLocation
            self.version = version
            self.zipFile = zipFile
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 1024)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.scriptId, name: "scriptId", parent: name, pattern: "^script-\\S+|^arn:.*:script\\/script-\\S+")
            try self.storageLocation?.validate(name: "\(name).storageLocation")
            try self.validate(self.version, name: "version", parent: name, max: 1024)
            try self.validate(self.version, name: "version", parent: name, min: 1)
            try self.validate(self.zipFile, name: "zipFile", parent: name, max: 5_000_000)
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case scriptId = "ScriptId"
            case storageLocation = "StorageLocation"
            case version = "Version"
            case zipFile = "ZipFile"
        }
    }

    public struct UpdateScriptOutput: AWSDecodableShape {
        /// The newly created script record with a unique script ID. The new script's storage location reflects an Amazon S3 location: (1) If the script was uploaded from an S3 bucket under your account, the storage location reflects the information that was provided in the CreateScript request; (2) If the script file was uploaded from a local zip file, the storage location reflects an S3 location controls by the Amazon GameLift service.
        public let script: Script?

        public init(script: Script? = nil) {
            self.script = script
        }

        private enum CodingKeys: String, CodingKey {
            case script = "Script"
        }
    }

    public struct ValidateMatchmakingRuleSetInput: AWSEncodableShape {
        /// A collection of matchmaking rules to validate, formatted as a JSON string.
        public let ruleSetBody: String

        public init(ruleSetBody: String) {
            self.ruleSetBody = ruleSetBody
        }

        public func validate(name: String) throws {
            try self.validate(self.ruleSetBody, name: "ruleSetBody", parent: name, max: 65535)
            try self.validate(self.ruleSetBody, name: "ruleSetBody", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case ruleSetBody = "RuleSetBody"
        }
    }

    public struct ValidateMatchmakingRuleSetOutput: AWSDecodableShape {
        /// A response indicating whether the rule set is valid.
        public let valid: Bool?

        public init(valid: Bool? = nil) {
            self.valid = valid
        }

        private enum CodingKeys: String, CodingKey {
            case valid = "Valid"
        }
    }

    public struct VpcPeeringAuthorization: AWSDecodableShape {
        /// Time stamp indicating when this authorization was issued. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: Date?
        /// Time stamp indicating when this authorization expires (24 hours after issuance). Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let expirationTime: Date?
        /// A unique identifier for the AWS account that you use to manage your GameLift fleet.  You can find your Account ID in the AWS Management Console under account settings.
        public let gameLiftAwsAccountId: String?
        public let peerVpcAwsAccountId: String?
        /// A unique identifier for a VPC with resources to be accessed by your GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the  VPC Dashboard in the AWS Management Console.  Learn more about VPC peering in VPC Peering with GameLift Fleets.
        public let peerVpcId: String?

        public init(creationTime: Date? = nil, expirationTime: Date? = nil, gameLiftAwsAccountId: String? = nil, peerVpcAwsAccountId: String? = nil, peerVpcId: String? = nil) {
            self.creationTime = creationTime
            self.expirationTime = expirationTime
            self.gameLiftAwsAccountId = gameLiftAwsAccountId
            self.peerVpcAwsAccountId = peerVpcAwsAccountId
            self.peerVpcId = peerVpcId
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case expirationTime = "ExpirationTime"
            case gameLiftAwsAccountId = "GameLiftAwsAccountId"
            case peerVpcAwsAccountId = "PeerVpcAwsAccountId"
            case peerVpcId = "PeerVpcId"
        }
    }

    public struct VpcPeeringConnection: AWSDecodableShape {
        ///  The Amazon Resource Name (ARN) associated with the GameLift fleet resource for this connection.
        public let fleetArn: String?
        /// A unique identifier for the fleet. This ID determines the ID of the Amazon GameLift VPC for your fleet.
        public let fleetId: String?
        /// A unique identifier for the VPC that contains the Amazon GameLift fleet for this connection. This VPC is managed by Amazon GameLift and does not appear in your AWS account.
        public let gameLiftVpcId: String?
        /// CIDR block of IPv4 addresses assigned to the VPC peering connection for the GameLift VPC. The peered VPC also has an IPv4 CIDR block associated with it; these blocks cannot overlap or the peering connection cannot be created.
        public let ipV4CidrBlock: String?
        /// A unique identifier for a VPC with resources to be accessed by your GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the  VPC Dashboard in the AWS Management Console.  Learn more about VPC peering in VPC Peering with GameLift Fleets.
        public let peerVpcId: String?
        /// The status information about the connection. Status indicates if a connection is pending, successful, or failed.
        public let status: VpcPeeringConnectionStatus?
        /// A unique identifier that is automatically assigned to the connection record. This ID is referenced in VPC peering connection events, and is used when deleting a connection with DeleteVpcPeeringConnection.
        public let vpcPeeringConnectionId: String?

        public init(fleetArn: String? = nil, fleetId: String? = nil, gameLiftVpcId: String? = nil, ipV4CidrBlock: String? = nil, peerVpcId: String? = nil, status: VpcPeeringConnectionStatus? = nil, vpcPeeringConnectionId: String? = nil) {
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.gameLiftVpcId = gameLiftVpcId
            self.ipV4CidrBlock = ipV4CidrBlock
            self.peerVpcId = peerVpcId
            self.status = status
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case fleetArn = "FleetArn"
            case fleetId = "FleetId"
            case gameLiftVpcId = "GameLiftVpcId"
            case ipV4CidrBlock = "IpV4CidrBlock"
            case peerVpcId = "PeerVpcId"
            case status = "Status"
            case vpcPeeringConnectionId = "VpcPeeringConnectionId"
        }
    }

    public struct VpcPeeringConnectionStatus: AWSDecodableShape {
        /// Code indicating the status of a VPC peering connection.
        public let code: String?
        /// Additional messaging associated with the connection status.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case message = "Message"
        }
    }
}
