//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS Neptunedata service.
///
/// Neptune Data API The Amazon Neptune data API provides SDK support for more than 40 of Neptune's data operations, including data loading, query execution, data inquiry, and machine learning. It supports  the Gremlin and openCypher query languages, and is available in all SDK languages. It automatically signs API requests and greatly simplifies integrating Neptune into your applications.
/// API Reference: https://docs.aws.amazon.com/neptune/latest/userguide/intro.html
public struct Neptunedata: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the Neptunedata client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "Neptunedata",
            serviceIdentifier: "neptune-db",
            serviceProtocol: .restjson,
            apiVersion: "2023-08-01",
            endpoint: endpoint,
            errorType: NeptunedataErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Cancels a Gremlin query. See Gremlin query cancellation for more information. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:CancelQuery IAM action in that cluster.
    @Sendable
    @inlinable
    public func cancelGremlinQuery(_ input: CancelGremlinQueryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelGremlinQueryOutput {
        try await self.client.execute(
            operation: "CancelGremlinQuery", 
            path: "/gremlin/status/{queryId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancels a Gremlin query. See Gremlin query cancellation for more information. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:CancelQuery IAM action in that cluster.
    ///
    /// Parameters:
    ///   - queryId: The unique identifier that identifies the query to be canceled.
    ///   - logger: Logger use during operation
    @inlinable
    public func cancelGremlinQuery(
        queryId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CancelGremlinQueryOutput {
        let input = CancelGremlinQueryInput(
            queryId: queryId
        )
        return try await self.cancelGremlinQuery(input, logger: logger)
    }

    /// Cancels a specified load job. This is an HTTP DELETE request. See Neptune Loader Get-Status API for more information. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:CancelLoaderJob IAM action in that cluster..
    @Sendable
    @inlinable
    public func cancelLoaderJob(_ input: CancelLoaderJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelLoaderJobOutput {
        try await self.client.execute(
            operation: "CancelLoaderJob", 
            path: "/loader/{loadId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancels a specified load job. This is an HTTP DELETE request. See Neptune Loader Get-Status API for more information. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:CancelLoaderJob IAM action in that cluster..
    ///
    /// Parameters:
    ///   - loadId: The ID of the load job to be deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func cancelLoaderJob(
        loadId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CancelLoaderJobOutput {
        let input = CancelLoaderJobInput(
            loadId: loadId
        )
        return try await self.cancelLoaderJob(input, logger: logger)
    }

    /// Cancels a Neptune ML data processing job. See The dataprocessing command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:CancelMLDataProcessingJob IAM action in that cluster.
    @Sendable
    @inlinable
    public func cancelMLDataProcessingJob(_ input: CancelMLDataProcessingJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelMLDataProcessingJobOutput {
        try await self.client.execute(
            operation: "CancelMLDataProcessingJob", 
            path: "/ml/dataprocessing/{id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancels a Neptune ML data processing job. See The dataprocessing command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:CancelMLDataProcessingJob IAM action in that cluster.
    ///
    /// Parameters:
    ///   - clean: If set to TRUE, this flag specifies that all Neptune ML S3 artifacts should be deleted when the job is stopped. The default is FALSE.
    ///   - id: The unique identifier of the data-processing job.
    ///   - neptuneIamRoleArn: The ARN of an IAM role that provides Neptune access to SageMaker and Amazon S3 resources. This must be listed in your DB cluster parameter group or an error will occur.
    ///   - logger: Logger use during operation
    @inlinable
    public func cancelMLDataProcessingJob(
        clean: Bool? = nil,
        id: String,
        neptuneIamRoleArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CancelMLDataProcessingJobOutput {
        let input = CancelMLDataProcessingJobInput(
            clean: clean, 
            id: id, 
            neptuneIamRoleArn: neptuneIamRoleArn
        )
        return try await self.cancelMLDataProcessingJob(input, logger: logger)
    }

    /// Cancels a Neptune ML model training job. See Model training using the modeltraining command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:CancelMLModelTrainingJob IAM action in that cluster.
    @Sendable
    @inlinable
    public func cancelMLModelTrainingJob(_ input: CancelMLModelTrainingJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelMLModelTrainingJobOutput {
        try await self.client.execute(
            operation: "CancelMLModelTrainingJob", 
            path: "/ml/modeltraining/{id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancels a Neptune ML model training job. See Model training using the modeltraining command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:CancelMLModelTrainingJob IAM action in that cluster.
    ///
    /// Parameters:
    ///   - clean: If set to TRUE, this flag specifies that all Amazon S3 artifacts should be deleted when the job is stopped. The default is FALSE.
    ///   - id: The unique identifier of the model-training job to be canceled.
    ///   - neptuneIamRoleArn: The ARN of an IAM role that provides Neptune access to SageMaker and Amazon S3 resources. This must be listed in your DB cluster parameter group or an error will occur.
    ///   - logger: Logger use during operation
    @inlinable
    public func cancelMLModelTrainingJob(
        clean: Bool? = nil,
        id: String,
        neptuneIamRoleArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CancelMLModelTrainingJobOutput {
        let input = CancelMLModelTrainingJobInput(
            clean: clean, 
            id: id, 
            neptuneIamRoleArn: neptuneIamRoleArn
        )
        return try await self.cancelMLModelTrainingJob(input, logger: logger)
    }

    /// Cancels a specified model transform job. See Use a trained model to generate new model artifacts. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:CancelMLModelTransformJob IAM action in that cluster.
    @Sendable
    @inlinable
    public func cancelMLModelTransformJob(_ input: CancelMLModelTransformJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelMLModelTransformJobOutput {
        try await self.client.execute(
            operation: "CancelMLModelTransformJob", 
            path: "/ml/modeltransform/{id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancels a specified model transform job. See Use a trained model to generate new model artifacts. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:CancelMLModelTransformJob IAM action in that cluster.
    ///
    /// Parameters:
    ///   - clean: If this flag is set to TRUE, all Neptune ML S3 artifacts should be deleted when the job is stopped. The default is FALSE.
    ///   - id: The unique ID of the model transform job to be canceled.
    ///   - neptuneIamRoleArn: The ARN of an IAM role that provides Neptune access to SageMaker and Amazon S3 resources. This must be listed in your DB cluster parameter group or an error will occur.
    ///   - logger: Logger use during operation
    @inlinable
    public func cancelMLModelTransformJob(
        clean: Bool? = nil,
        id: String,
        neptuneIamRoleArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CancelMLModelTransformJobOutput {
        let input = CancelMLModelTransformJobInput(
            clean: clean, 
            id: id, 
            neptuneIamRoleArn: neptuneIamRoleArn
        )
        return try await self.cancelMLModelTransformJob(input, logger: logger)
    }

    /// Cancels a specified openCypher query. See Neptune openCypher status endpoint for more information. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:CancelQuery IAM action in that cluster.
    @Sendable
    @inlinable
    public func cancelOpenCypherQuery(_ input: CancelOpenCypherQueryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelOpenCypherQueryOutput {
        try await self.client.execute(
            operation: "CancelOpenCypherQuery", 
            path: "/opencypher/status/{queryId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancels a specified openCypher query. See Neptune openCypher status endpoint for more information. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:CancelQuery IAM action in that cluster.
    ///
    /// Parameters:
    ///   - queryId: The unique ID of the openCypher query to cancel.
    ///   - silent: If set to TRUE, causes the cancelation of the openCypher query to happen silently.
    ///   - logger: Logger use during operation
    @inlinable
    public func cancelOpenCypherQuery(
        queryId: String,
        silent: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CancelOpenCypherQueryOutput {
        let input = CancelOpenCypherQueryInput(
            queryId: queryId, 
            silent: silent
        )
        return try await self.cancelOpenCypherQuery(input, logger: logger)
    }

    /// Creates a new Neptune ML inference endpoint that lets you query one specific model that the model-training process constructed. See Managing inference endpoints using the endpoints command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:CreateMLEndpoint IAM action in that cluster.
    @Sendable
    @inlinable
    public func createMLEndpoint(_ input: CreateMLEndpointInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateMLEndpointOutput {
        try await self.client.execute(
            operation: "CreateMLEndpoint", 
            path: "/ml/endpoints", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new Neptune ML inference endpoint that lets you query one specific model that the model-training process constructed. See Managing inference endpoints using the endpoints command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:CreateMLEndpoint IAM action in that cluster.
    ///
    /// Parameters:
    ///   - id: A unique identifier for the new inference endpoint. The default is an autogenerated timestamped name.
    ///   - instanceCount: The minimum number of Amazon EC2 instances to deploy to an endpoint for prediction. The default is 1
    ///   - instanceType: The type of Neptune ML instance to use for online servicing. The default is ml.m5.xlarge. Choosing the ML instance for an inference endpoint depends on the task type, the graph size, and your budget.
    ///   - mlModelTrainingJobId: The job Id of the completed model-training job that has created the model that the inference endpoint will point to. You must supply either the mlModelTrainingJobId or the mlModelTransformJobId.
    ///   - mlModelTransformJobId: The job Id of the completed model-transform job. You must supply either the mlModelTrainingJobId or the mlModelTransformJobId.
    ///   - modelName: Model type for training. By default the Neptune ML model is automatically based on the modelType used in data processing, but you can specify a different model type here. The default is rgcn for heterogeneous graphs and kge for knowledge graphs. The only valid value for heterogeneous graphs is rgcn. Valid values for knowledge graphs are: kge, transe, distmult, and rotate.
    ///   - neptuneIamRoleArn: The ARN of an IAM role providing Neptune access to SageMaker and Amazon S3 resources. This must be listed in your DB cluster parameter group or an error will be thrown.
    ///   - update: If set to true, update indicates that this is an update request. The default is false. You must supply either the mlModelTrainingJobId or the mlModelTransformJobId.
    ///   - volumeEncryptionKMSKey: The Amazon Key Management Service (Amazon KMS) key that SageMaker uses to encrypt data on the storage volume attached to the ML compute instances that run the training job. The default is None.
    ///   - logger: Logger use during operation
    @inlinable
    public func createMLEndpoint(
        id: String? = nil,
        instanceCount: Int? = nil,
        instanceType: String? = nil,
        mlModelTrainingJobId: String? = nil,
        mlModelTransformJobId: String? = nil,
        modelName: String? = nil,
        neptuneIamRoleArn: String? = nil,
        update: Bool? = nil,
        volumeEncryptionKMSKey: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateMLEndpointOutput {
        let input = CreateMLEndpointInput(
            id: id, 
            instanceCount: instanceCount, 
            instanceType: instanceType, 
            mlModelTrainingJobId: mlModelTrainingJobId, 
            mlModelTransformJobId: mlModelTransformJobId, 
            modelName: modelName, 
            neptuneIamRoleArn: neptuneIamRoleArn, 
            update: update, 
            volumeEncryptionKMSKey: volumeEncryptionKMSKey
        )
        return try await self.createMLEndpoint(input, logger: logger)
    }

    /// Cancels the creation of a Neptune ML inference endpoint. See Managing inference endpoints using the endpoints command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:DeleteMLEndpoint IAM action in that cluster.
    @Sendable
    @inlinable
    public func deleteMLEndpoint(_ input: DeleteMLEndpointInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteMLEndpointOutput {
        try await self.client.execute(
            operation: "DeleteMLEndpoint", 
            path: "/ml/endpoints/{id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancels the creation of a Neptune ML inference endpoint. See Managing inference endpoints using the endpoints command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:DeleteMLEndpoint IAM action in that cluster.
    ///
    /// Parameters:
    ///   - clean: If this flag is set to TRUE, all Neptune ML S3 artifacts should be deleted when the job is stopped. The default is FALSE.
    ///   - id: The unique identifier of the inference endpoint.
    ///   - neptuneIamRoleArn: The ARN of an IAM role providing Neptune access to SageMaker and Amazon S3 resources. This must be listed in your DB cluster parameter group or an error will be thrown.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteMLEndpoint(
        clean: Bool? = nil,
        id: String,
        neptuneIamRoleArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteMLEndpointOutput {
        let input = DeleteMLEndpointInput(
            clean: clean, 
            id: id, 
            neptuneIamRoleArn: neptuneIamRoleArn
        )
        return try await self.deleteMLEndpoint(input, logger: logger)
    }

    /// Deletes statistics for Gremlin and openCypher (property graph) data. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:DeleteStatistics IAM action in that cluster.
    @Sendable
    @inlinable
    public func deletePropertygraphStatistics(logger: Logger = AWSClient.loggingDisabled) async throws -> DeletePropertygraphStatisticsOutput {
        try await self.client.execute(
            operation: "DeletePropertygraphStatistics", 
            path: "/propertygraph/statistics", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            logger: logger
        )
    }

    /// Deletes SPARQL statistics When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:DeleteStatistics IAM action in that cluster.
    @Sendable
    @inlinable
    public func deleteSparqlStatistics(logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteSparqlStatisticsOutput {
        try await self.client.execute(
            operation: "DeleteSparqlStatistics", 
            path: "/sparql/statistics", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            logger: logger
        )
    }

    /// The fast reset REST API lets you reset a Neptune graph quicky and easily, removing all of its data. Neptune fast reset is a two-step process. First you call ExecuteFastReset with action set to initiateDatabaseReset. This returns a UUID token which you then include when calling ExecuteFastReset again with action set to performDatabaseReset. See Empty an Amazon Neptune DB cluster using the fast reset API. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ResetDatabase IAM action in that cluster.
    @Sendable
    @inlinable
    public func executeFastReset(_ input: ExecuteFastResetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ExecuteFastResetOutput {
        try await self.client.execute(
            operation: "ExecuteFastReset", 
            path: "/system", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// The fast reset REST API lets you reset a Neptune graph quicky and easily, removing all of its data. Neptune fast reset is a two-step process. First you call ExecuteFastReset with action set to initiateDatabaseReset. This returns a UUID token which you then include when calling ExecuteFastReset again with action set to performDatabaseReset. See Empty an Amazon Neptune DB cluster using the fast reset API. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ResetDatabase IAM action in that cluster.
    ///
    /// Parameters:
    ///   - action: The fast reset action. One of the following values:     initiateDatabaseReset   –   This action generates a unique token needed to actually perform the  fast reset.     performDatabaseReset   –   This action uses the token generated by the initiateDatabaseReset action to actually perform the fast reset.
    ///   - token: The fast-reset token to initiate the reset.
    ///   - logger: Logger use during operation
    @inlinable
    public func executeFastReset(
        action: Action,
        token: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExecuteFastResetOutput {
        let input = ExecuteFastResetInput(
            action: action, 
            token: token
        )
        return try await self.executeFastReset(input, logger: logger)
    }

    /// Executes a Gremlin Explain query. Amazon Neptune has added a Gremlin feature named explain that provides is a self-service tool for understanding the execution approach being taken by the Neptune engine for the query. You invoke it by adding an explain parameter to an HTTP call that submits a Gremlin query. The explain feature provides information about the logical structure of query execution plans. You can use this information to identify potential evaluation and execution bottlenecks and to tune your query, as explained  in Tuning Gremlin queries. You can also use query hints to improve query execution plans. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows one of the following IAM actions in that cluster, depending on the query:    neptune-db:ReadDataViaQuery     neptune-db:WriteDataViaQuery     neptune-db:DeleteDataViaQuery    Note that the neptune-db:QueryLanguage:Gremlin IAM condition key can be used in the policy document to restrict the use of Gremlin queries (see Condition keys available in Neptune IAM data-access policy statements).
    @Sendable
    @inlinable
    public func executeGremlinExplainQuery(_ input: ExecuteGremlinExplainQueryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ExecuteGremlinExplainQueryOutput {
        try await self.client.execute(
            operation: "ExecuteGremlinExplainQuery", 
            path: "/gremlin/explain", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Executes a Gremlin Explain query. Amazon Neptune has added a Gremlin feature named explain that provides is a self-service tool for understanding the execution approach being taken by the Neptune engine for the query. You invoke it by adding an explain parameter to an HTTP call that submits a Gremlin query. The explain feature provides information about the logical structure of query execution plans. You can use this information to identify potential evaluation and execution bottlenecks and to tune your query, as explained  in Tuning Gremlin queries. You can also use query hints to improve query execution plans. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows one of the following IAM actions in that cluster, depending on the query:    neptune-db:ReadDataViaQuery     neptune-db:WriteDataViaQuery     neptune-db:DeleteDataViaQuery    Note that the neptune-db:QueryLanguage:Gremlin IAM condition key can be used in the policy document to restrict the use of Gremlin queries (see Condition keys available in Neptune IAM data-access policy statements).
    ///
    /// Parameters:
    ///   - gremlinQuery: The Gremlin explain query string.
    ///   - logger: Logger use during operation
    @inlinable
    public func executeGremlinExplainQuery(
        gremlinQuery: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExecuteGremlinExplainQueryOutput {
        let input = ExecuteGremlinExplainQueryInput(
            gremlinQuery: gremlinQuery
        )
        return try await self.executeGremlinExplainQuery(input, logger: logger)
    }

    /// Executes a Gremlin Profile query, which runs a specified traversal, collects various metrics about the run, and produces a profile report as output. See Gremlin profile API in Neptune for details. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ReadDataViaQuery IAM action in that cluster. Note that the neptune-db:QueryLanguage:Gremlin IAM condition key can be used in the policy document to restrict the use of Gremlin queries (see Condition keys available in Neptune IAM data-access policy statements).
    @Sendable
    @inlinable
    public func executeGremlinProfileQuery(_ input: ExecuteGremlinProfileQueryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ExecuteGremlinProfileQueryOutput {
        try await self.client.execute(
            operation: "ExecuteGremlinProfileQuery", 
            path: "/gremlin/profile", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Executes a Gremlin Profile query, which runs a specified traversal, collects various metrics about the run, and produces a profile report as output. See Gremlin profile API in Neptune for details. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ReadDataViaQuery IAM action in that cluster. Note that the neptune-db:QueryLanguage:Gremlin IAM condition key can be used in the policy document to restrict the use of Gremlin queries (see Condition keys available in Neptune IAM data-access policy statements).
    ///
    /// Parameters:
    ///   - chop: If non-zero, causes the results string to be truncated at that number of characters. If set to zero, the string contains all the results.
    ///   - gremlinQuery: The Gremlin query string to profile.
    ///   - indexOps: If this flag is set to TRUE, the results include a detailed report of all index operations that took place during query execution and serialization.
    ///   - results: If this flag is set to TRUE, the query results are gathered and displayed as part of the profile report. If FALSE, only the result count is displayed.
    ///   - serializer: If non-null, the gathered results are returned in a serialized response message in the format specified by this parameter. See Gremlin profile API in Neptune for more information.
    ///   - logger: Logger use during operation
    @inlinable
    public func executeGremlinProfileQuery(
        chop: Int? = nil,
        gremlinQuery: String,
        indexOps: Bool? = nil,
        results: Bool? = nil,
        serializer: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExecuteGremlinProfileQueryOutput {
        let input = ExecuteGremlinProfileQueryInput(
            chop: chop, 
            gremlinQuery: gremlinQuery, 
            indexOps: indexOps, 
            results: results, 
            serializer: serializer
        )
        return try await self.executeGremlinProfileQuery(input, logger: logger)
    }

    /// This commands executes a Gremlin query. Amazon Neptune is compatible with Apache TinkerPop3 and Gremlin, so you can use the Gremlin traversal language to query the graph, as described under The Graph in the Apache TinkerPop3 documentation. More details can also be found in Accessing a Neptune graph with Gremlin. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that enables one of the following IAM actions in that cluster, depending on the query:    neptune-db:ReadDataViaQuery     neptune-db:WriteDataViaQuery     neptune-db:DeleteDataViaQuery    Note that the neptune-db:QueryLanguage:Gremlin IAM condition key can be used in the policy document to restrict the use of Gremlin queries (see Condition keys available in Neptune IAM data-access policy statements).
    @Sendable
    @inlinable
    public func executeGremlinQuery(_ input: ExecuteGremlinQueryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ExecuteGremlinQueryOutput {
        try await self.client.execute(
            operation: "ExecuteGremlinQuery", 
            path: "/gremlin", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// This commands executes a Gremlin query. Amazon Neptune is compatible with Apache TinkerPop3 and Gremlin, so you can use the Gremlin traversal language to query the graph, as described under The Graph in the Apache TinkerPop3 documentation. More details can also be found in Accessing a Neptune graph with Gremlin. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that enables one of the following IAM actions in that cluster, depending on the query:    neptune-db:ReadDataViaQuery     neptune-db:WriteDataViaQuery     neptune-db:DeleteDataViaQuery    Note that the neptune-db:QueryLanguage:Gremlin IAM condition key can be used in the policy document to restrict the use of Gremlin queries (see Condition keys available in Neptune IAM data-access policy statements).
    ///
    /// Parameters:
    ///   - gremlinQuery: Using this API, you can run Gremlin queries in string format much as you can using the HTTP endpoint. The interface is compatible with whatever Gremlin version your DB cluster is using (see the Tinkerpop client section to determine which Gremlin releases your engine version supports).
    ///   - serializer: If non-null, the query results are returned in a serialized response message in the format specified by this parameter. See the GraphSON section in the TinkerPop documentation for a list of the formats that are currently supported.
    ///   - logger: Logger use during operation
    @inlinable
    public func executeGremlinQuery(
        gremlinQuery: String,
        serializer: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExecuteGremlinQueryOutput {
        let input = ExecuteGremlinQueryInput(
            gremlinQuery: gremlinQuery, 
            serializer: serializer
        )
        return try await self.executeGremlinQuery(input, logger: logger)
    }

    /// Executes an openCypher explain request. See The openCypher explain feature for more information. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ReadDataViaQuery IAM action in that cluster. Note that the neptune-db:QueryLanguage:OpenCypher IAM condition key can be used in the policy document to restrict the use of openCypher queries (see Condition keys available in Neptune IAM data-access policy statements).
    @Sendable
    @inlinable
    public func executeOpenCypherExplainQuery(_ input: ExecuteOpenCypherExplainQueryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ExecuteOpenCypherExplainQueryOutput {
        try await self.client.execute(
            operation: "ExecuteOpenCypherExplainQuery", 
            path: "/opencypher/explain", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Executes an openCypher explain request. See The openCypher explain feature for more information. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ReadDataViaQuery IAM action in that cluster. Note that the neptune-db:QueryLanguage:OpenCypher IAM condition key can be used in the policy document to restrict the use of openCypher queries (see Condition keys available in Neptune IAM data-access policy statements).
    ///
    /// Parameters:
    ///   - explainMode: The openCypher explain mode. Can be one of: static, dynamic, or details.
    ///   - openCypherQuery: The openCypher query string.
    ///   - parameters: The openCypher query parameters.
    ///   - logger: Logger use during operation
    @inlinable
    public func executeOpenCypherExplainQuery(
        explainMode: OpenCypherExplainMode,
        openCypherQuery: String,
        parameters: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExecuteOpenCypherExplainQueryOutput {
        let input = ExecuteOpenCypherExplainQueryInput(
            explainMode: explainMode, 
            openCypherQuery: openCypherQuery, 
            parameters: parameters
        )
        return try await self.executeOpenCypherExplainQuery(input, logger: logger)
    }

    /// Executes an openCypher query. See Accessing the Neptune Graph with openCypher for more information. Neptune supports building graph applications using openCypher, which is currently one of the most popular query languages among developers working with graph databases. Developers, business analysts, and data scientists like openCypher's declarative, SQL-inspired syntax because it provides a familiar structure in which to querying property graphs. The openCypher language was originally developed by Neo4j, then open-sourced in 2015 and contributed to the openCypher project under an Apache 2 open-source license. Note that when invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows one of the following IAM actions in that cluster, depending on the query:    neptune-db:ReadDataViaQuery     neptune-db:WriteDataViaQuery     neptune-db:DeleteDataViaQuery    Note also that the neptune-db:QueryLanguage:OpenCypher IAM condition key can be used in the policy document to restrict the use of openCypher queries (see Condition keys available in Neptune IAM data-access policy statements).
    @Sendable
    @inlinable
    public func executeOpenCypherQuery(_ input: ExecuteOpenCypherQueryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ExecuteOpenCypherQueryOutput {
        try await self.client.execute(
            operation: "ExecuteOpenCypherQuery", 
            path: "/opencypher", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Executes an openCypher query. See Accessing the Neptune Graph with openCypher for more information. Neptune supports building graph applications using openCypher, which is currently one of the most popular query languages among developers working with graph databases. Developers, business analysts, and data scientists like openCypher's declarative, SQL-inspired syntax because it provides a familiar structure in which to querying property graphs. The openCypher language was originally developed by Neo4j, then open-sourced in 2015 and contributed to the openCypher project under an Apache 2 open-source license. Note that when invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows one of the following IAM actions in that cluster, depending on the query:    neptune-db:ReadDataViaQuery     neptune-db:WriteDataViaQuery     neptune-db:DeleteDataViaQuery    Note also that the neptune-db:QueryLanguage:OpenCypher IAM condition key can be used in the policy document to restrict the use of openCypher queries (see Condition keys available in Neptune IAM data-access policy statements).
    ///
    /// Parameters:
    ///   - openCypherQuery: The openCypher query string to be executed.
    ///   - parameters: The openCypher query parameters for query execution. See Examples of openCypher parameterized queries for more information.
    ///   - logger: Logger use during operation
    @inlinable
    public func executeOpenCypherQuery(
        openCypherQuery: String,
        parameters: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExecuteOpenCypherQueryOutput {
        let input = ExecuteOpenCypherQueryInput(
            openCypherQuery: openCypherQuery, 
            parameters: parameters
        )
        return try await self.executeOpenCypherQuery(input, logger: logger)
    }

    /// Retrieves the status of the graph database on the host. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetEngineStatus IAM action in that cluster.
    @Sendable
    @inlinable
    public func getEngineStatus(logger: Logger = AWSClient.loggingDisabled) async throws -> GetEngineStatusOutput {
        try await self.client.execute(
            operation: "GetEngineStatus", 
            path: "/status", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            logger: logger
        )
    }

    /// Gets the status of a specified Gremlin query. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetQueryStatus IAM action in that cluster. Note that the neptune-db:QueryLanguage:Gremlin IAM condition key can be used in the policy document to restrict the use of Gremlin queries (see Condition keys available in Neptune IAM data-access policy statements).
    @Sendable
    @inlinable
    public func getGremlinQueryStatus(_ input: GetGremlinQueryStatusInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetGremlinQueryStatusOutput {
        try await self.client.execute(
            operation: "GetGremlinQueryStatus", 
            path: "/gremlin/status/{queryId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the status of a specified Gremlin query. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetQueryStatus IAM action in that cluster. Note that the neptune-db:QueryLanguage:Gremlin IAM condition key can be used in the policy document to restrict the use of Gremlin queries (see Condition keys available in Neptune IAM data-access policy statements).
    ///
    /// Parameters:
    ///   - queryId: The unique identifier that identifies the Gremlin query.
    ///   - logger: Logger use during operation
    @inlinable
    public func getGremlinQueryStatus(
        queryId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetGremlinQueryStatusOutput {
        let input = GetGremlinQueryStatusInput(
            queryId: queryId
        )
        return try await self.getGremlinQueryStatus(input, logger: logger)
    }

    /// Gets status information about a specified load job. Neptune keeps track of the most recent 1,024 bulk load jobs, and stores the last 10,000 error details per job. See Neptune Loader Get-Status API for more information. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetLoaderJobStatus IAM action in that cluster..
    @Sendable
    @inlinable
    public func getLoaderJobStatus(_ input: GetLoaderJobStatusInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLoaderJobStatusOutput {
        try await self.client.execute(
            operation: "GetLoaderJobStatus", 
            path: "/loader/{loadId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets status information about a specified load job. Neptune keeps track of the most recent 1,024 bulk load jobs, and stores the last 10,000 error details per job. See Neptune Loader Get-Status API for more information. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetLoaderJobStatus IAM action in that cluster..
    ///
    /// Parameters:
    ///   - details: Flag indicating whether or not to include details beyond the overall status (TRUE or FALSE; the default is FALSE).
    ///   - errors: Flag indicating whether or not to include a list of errors encountered (TRUE or FALSE; the default is FALSE). The list of errors is paged. The page and errorsPerPage parameters allow you to page through all the errors.
    ///   - errorsPerPage: The number of errors returned in each page (a positive integer; the default is 10). Only valid when the errors parameter set to TRUE.
    ///   - loadId: The load ID of the load job to get the status of.
    ///   - page: The error page number (a positive integer; the default is 1). Only valid when the errors parameter is set to TRUE.
    ///   - logger: Logger use during operation
    @inlinable
    public func getLoaderJobStatus(
        details: Bool? = nil,
        errors: Bool? = nil,
        errorsPerPage: Int? = nil,
        loadId: String,
        page: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetLoaderJobStatusOutput {
        let input = GetLoaderJobStatusInput(
            details: details, 
            errors: errors, 
            errorsPerPage: errorsPerPage, 
            loadId: loadId, 
            page: page
        )
        return try await self.getLoaderJobStatus(input, logger: logger)
    }

    /// Retrieves information about a specified data processing job. See The dataprocessing command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:neptune-db:GetMLDataProcessingJobStatus IAM action in that cluster.
    @Sendable
    @inlinable
    public func getMLDataProcessingJob(_ input: GetMLDataProcessingJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMLDataProcessingJobOutput {
        try await self.client.execute(
            operation: "GetMLDataProcessingJob", 
            path: "/ml/dataprocessing/{id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves information about a specified data processing job. See The dataprocessing command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:neptune-db:GetMLDataProcessingJobStatus IAM action in that cluster.
    ///
    /// Parameters:
    ///   - id: The unique identifier of the data-processing job to be retrieved.
    ///   - neptuneIamRoleArn: The ARN of an IAM role that provides Neptune access to SageMaker and Amazon S3 resources. This must be listed in your DB cluster parameter group or an error will occur.
    ///   - logger: Logger use during operation
    @inlinable
    public func getMLDataProcessingJob(
        id: String,
        neptuneIamRoleArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetMLDataProcessingJobOutput {
        let input = GetMLDataProcessingJobInput(
            id: id, 
            neptuneIamRoleArn: neptuneIamRoleArn
        )
        return try await self.getMLDataProcessingJob(input, logger: logger)
    }

    /// Retrieves details about an inference endpoint. See Managing inference endpoints using the endpoints command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetMLEndpointStatus IAM action in that cluster.
    @Sendable
    @inlinable
    public func getMLEndpoint(_ input: GetMLEndpointInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMLEndpointOutput {
        try await self.client.execute(
            operation: "GetMLEndpoint", 
            path: "/ml/endpoints/{id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves details about an inference endpoint. See Managing inference endpoints using the endpoints command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetMLEndpointStatus IAM action in that cluster.
    ///
    /// Parameters:
    ///   - id: The unique identifier of the inference endpoint.
    ///   - neptuneIamRoleArn: The ARN of an IAM role that provides Neptune access to SageMaker and Amazon S3 resources. This must be listed in your DB cluster parameter group or an error will occur.
    ///   - logger: Logger use during operation
    @inlinable
    public func getMLEndpoint(
        id: String,
        neptuneIamRoleArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetMLEndpointOutput {
        let input = GetMLEndpointInput(
            id: id, 
            neptuneIamRoleArn: neptuneIamRoleArn
        )
        return try await self.getMLEndpoint(input, logger: logger)
    }

    /// Retrieves information about a Neptune ML model training job. See Model training using the modeltraining command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetMLModelTrainingJobStatus IAM action in that cluster.
    @Sendable
    @inlinable
    public func getMLModelTrainingJob(_ input: GetMLModelTrainingJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMLModelTrainingJobOutput {
        try await self.client.execute(
            operation: "GetMLModelTrainingJob", 
            path: "/ml/modeltraining/{id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves information about a Neptune ML model training job. See Model training using the modeltraining command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetMLModelTrainingJobStatus IAM action in that cluster.
    ///
    /// Parameters:
    ///   - id: The unique identifier of the model-training job to retrieve.
    ///   - neptuneIamRoleArn: The ARN of an IAM role that provides Neptune access to SageMaker and Amazon S3 resources. This must be listed in your DB cluster parameter group or an error will occur.
    ///   - logger: Logger use during operation
    @inlinable
    public func getMLModelTrainingJob(
        id: String,
        neptuneIamRoleArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetMLModelTrainingJobOutput {
        let input = GetMLModelTrainingJobInput(
            id: id, 
            neptuneIamRoleArn: neptuneIamRoleArn
        )
        return try await self.getMLModelTrainingJob(input, logger: logger)
    }

    /// Gets information about a specified model transform job. See Use a trained model to generate new model artifacts. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetMLModelTransformJobStatus IAM action in that cluster.
    @Sendable
    @inlinable
    public func getMLModelTransformJob(_ input: GetMLModelTransformJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMLModelTransformJobOutput {
        try await self.client.execute(
            operation: "GetMLModelTransformJob", 
            path: "/ml/modeltransform/{id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about a specified model transform job. See Use a trained model to generate new model artifacts. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetMLModelTransformJobStatus IAM action in that cluster.
    ///
    /// Parameters:
    ///   - id: The unique identifier of the model-transform job to be reetrieved.
    ///   - neptuneIamRoleArn: The ARN of an IAM role that provides Neptune access to SageMaker and Amazon S3 resources. This must be listed in your DB cluster parameter group or an error will occur.
    ///   - logger: Logger use during operation
    @inlinable
    public func getMLModelTransformJob(
        id: String,
        neptuneIamRoleArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetMLModelTransformJobOutput {
        let input = GetMLModelTransformJobInput(
            id: id, 
            neptuneIamRoleArn: neptuneIamRoleArn
        )
        return try await self.getMLModelTransformJob(input, logger: logger)
    }

    /// Retrieves the status of a specified openCypher query. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetQueryStatus IAM action in that cluster. Note that the neptune-db:QueryLanguage:OpenCypher IAM condition key can be used in the policy document to restrict the use of openCypher queries (see Condition keys available in Neptune IAM data-access policy statements).
    @Sendable
    @inlinable
    public func getOpenCypherQueryStatus(_ input: GetOpenCypherQueryStatusInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetOpenCypherQueryStatusOutput {
        try await self.client.execute(
            operation: "GetOpenCypherQueryStatus", 
            path: "/opencypher/status/{queryId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the status of a specified openCypher query. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetQueryStatus IAM action in that cluster. Note that the neptune-db:QueryLanguage:OpenCypher IAM condition key can be used in the policy document to restrict the use of openCypher queries (see Condition keys available in Neptune IAM data-access policy statements).
    ///
    /// Parameters:
    ///   - queryId: The unique ID of the openCypher query for which to retrieve the query status.
    ///   - logger: Logger use during operation
    @inlinable
    public func getOpenCypherQueryStatus(
        queryId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetOpenCypherQueryStatusOutput {
        let input = GetOpenCypherQueryStatusInput(
            queryId: queryId
        )
        return try await self.getOpenCypherQueryStatus(input, logger: logger)
    }

    /// Gets property graph statistics (Gremlin and openCypher). When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetStatisticsStatus IAM action in that cluster.
    @Sendable
    @inlinable
    public func getPropertygraphStatistics(logger: Logger = AWSClient.loggingDisabled) async throws -> GetPropertygraphStatisticsOutput {
        try await self.client.execute(
            operation: "GetPropertygraphStatistics", 
            path: "/propertygraph/statistics", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            logger: logger
        )
    }

    /// Gets a stream for a property graph. With the Neptune Streams feature, you can generate a complete sequence of change-log entries that record every change made to your graph data as it happens. GetPropertygraphStream lets you collect these change-log entries for a property graph. The Neptune streams feature needs to be enabled on your Neptune DBcluster. To enable streams, set the neptune_streams DB cluster parameter to 1. See Capturing graph changes in real time using Neptune streams. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetStreamRecords IAM action in that cluster. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that enables one of the following IAM actions, depending on the query: Note that you can restrict property-graph queries using the following IAM context keys:    neptune-db:QueryLanguage:Gremlin     neptune-db:QueryLanguage:OpenCypher    See Condition keys available in Neptune IAM data-access policy statements).
    @Sendable
    @inlinable
    public func getPropertygraphStream(_ input: GetPropertygraphStreamInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPropertygraphStreamOutput {
        try await self.client.execute(
            operation: "GetPropertygraphStream", 
            path: "/propertygraph/stream", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a stream for a property graph. With the Neptune Streams feature, you can generate a complete sequence of change-log entries that record every change made to your graph data as it happens. GetPropertygraphStream lets you collect these change-log entries for a property graph. The Neptune streams feature needs to be enabled on your Neptune DBcluster. To enable streams, set the neptune_streams DB cluster parameter to 1. See Capturing graph changes in real time using Neptune streams. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetStreamRecords IAM action in that cluster. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that enables one of the following IAM actions, depending on the query: Note that you can restrict property-graph queries using the following IAM context keys:    neptune-db:QueryLanguage:Gremlin     neptune-db:QueryLanguage:OpenCypher    See Condition keys available in Neptune IAM data-access policy statements).
    ///
    /// Parameters:
    ///   - commitNum: The commit number of the starting record to read from the change-log stream. This parameter is required when iteratorType isAT_SEQUENCE_NUMBER or AFTER_SEQUENCE_NUMBER, and ignored when iteratorType is TRIM_HORIZON or LATEST.
    ///   - encoding: If set to TRUE, Neptune compresses the response using gzip encoding.
    ///   - iteratorType: Can be one of:    AT_SEQUENCE_NUMBER   –   Indicates that reading should start from the event sequence number specified jointly by the commitNum and opNum parameters.    AFTER_SEQUENCE_NUMBER   –   Indicates that reading should start right after the event sequence number specified jointly by the commitNum and opNum parameters.    TRIM_HORIZON   –   Indicates that reading should start at the last untrimmed record in the system, which is the oldest unexpired (not yet deleted) record in the change-log stream.    LATEST   –   Indicates that reading should start at the most recent record in the system, which is the latest unexpired (not yet deleted) record in the change-log stream.
    ///   - limit: Specifies the maximum number of records to return. There is also a size limit of 10 MB on the response that can't be modified and that takes precedence over the number of records specified in the limit parameter. The response does include a threshold-breaching record if the 10 MB limit was reached. The range for limit is 1 to 100,000, with a default of 10.
    ///   - opNum: The operation sequence number within the specified commit to start reading from in the change-log stream data. The default is 1.
    ///   - logger: Logger use during operation
    @inlinable
    public func getPropertygraphStream(
        commitNum: Int64? = nil,
        encoding: Encoding? = nil,
        iteratorType: IteratorType? = nil,
        limit: Int64? = nil,
        opNum: Int64? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetPropertygraphStreamOutput {
        let input = GetPropertygraphStreamInput(
            commitNum: commitNum, 
            encoding: encoding, 
            iteratorType: iteratorType, 
            limit: limit, 
            opNum: opNum
        )
        return try await self.getPropertygraphStream(input, logger: logger)
    }

    /// Gets a graph summary for a property graph. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetGraphSummary IAM action in that cluster.
    @Sendable
    @inlinable
    public func getPropertygraphSummary(_ input: GetPropertygraphSummaryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPropertygraphSummaryOutput {
        try await self.client.execute(
            operation: "GetPropertygraphSummary", 
            path: "/propertygraph/statistics/summary", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a graph summary for a property graph. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetGraphSummary IAM action in that cluster.
    ///
    /// Parameters:
    ///   - mode: Mode can take one of two values: BASIC (the default), and DETAILED.
    ///   - logger: Logger use during operation
    @inlinable
    public func getPropertygraphSummary(
        mode: GraphSummaryType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetPropertygraphSummaryOutput {
        let input = GetPropertygraphSummaryInput(
            mode: mode
        )
        return try await self.getPropertygraphSummary(input, logger: logger)
    }

    /// Gets a graph summary for an RDF graph. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetGraphSummary IAM action in that cluster.
    @Sendable
    @inlinable
    public func getRDFGraphSummary(_ input: GetRDFGraphSummaryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRDFGraphSummaryOutput {
        try await self.client.execute(
            operation: "GetRDFGraphSummary", 
            path: "/rdf/statistics/summary", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a graph summary for an RDF graph. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetGraphSummary IAM action in that cluster.
    ///
    /// Parameters:
    ///   - mode: Mode can take one of two values: BASIC (the default), and DETAILED.
    ///   - logger: Logger use during operation
    @inlinable
    public func getRDFGraphSummary(
        mode: GraphSummaryType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetRDFGraphSummaryOutput {
        let input = GetRDFGraphSummaryInput(
            mode: mode
        )
        return try await self.getRDFGraphSummary(input, logger: logger)
    }

    /// Gets RDF statistics (SPARQL).
    @Sendable
    @inlinable
    public func getSparqlStatistics(logger: Logger = AWSClient.loggingDisabled) async throws -> GetSparqlStatisticsOutput {
        try await self.client.execute(
            operation: "GetSparqlStatistics", 
            path: "/sparql/statistics", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            logger: logger
        )
    }

    /// Gets a stream for an RDF graph. With the Neptune Streams feature, you can generate a complete sequence of change-log entries that record every change made to your graph data as it happens. GetSparqlStream lets you collect these change-log entries for an RDF graph. The Neptune streams feature needs to be enabled on your Neptune DBcluster. To enable streams, set the neptune_streams DB cluster parameter to 1. See Capturing graph changes in real time using Neptune streams. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetStreamRecords IAM action in that cluster. Note that the neptune-db:QueryLanguage:Sparql IAM condition key can be used in the policy document to restrict the use of SPARQL queries (see Condition keys available in Neptune IAM data-access policy statements).
    @Sendable
    @inlinable
    public func getSparqlStream(_ input: GetSparqlStreamInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSparqlStreamOutput {
        try await self.client.execute(
            operation: "GetSparqlStream", 
            path: "/sparql/stream", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a stream for an RDF graph. With the Neptune Streams feature, you can generate a complete sequence of change-log entries that record every change made to your graph data as it happens. GetSparqlStream lets you collect these change-log entries for an RDF graph. The Neptune streams feature needs to be enabled on your Neptune DBcluster. To enable streams, set the neptune_streams DB cluster parameter to 1. See Capturing graph changes in real time using Neptune streams. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetStreamRecords IAM action in that cluster. Note that the neptune-db:QueryLanguage:Sparql IAM condition key can be used in the policy document to restrict the use of SPARQL queries (see Condition keys available in Neptune IAM data-access policy statements).
    ///
    /// Parameters:
    ///   - commitNum: The commit number of the starting record to read from the change-log stream. This parameter is required when iteratorType isAT_SEQUENCE_NUMBER or AFTER_SEQUENCE_NUMBER, and ignored when iteratorType is TRIM_HORIZON or LATEST.
    ///   - encoding: If set to TRUE, Neptune compresses the response using gzip encoding.
    ///   - iteratorType: Can be one of:    AT_SEQUENCE_NUMBER   –   Indicates that reading should start from the event sequence number specified jointly by the commitNum and opNum parameters.    AFTER_SEQUENCE_NUMBER   –   Indicates that reading should start right after the event sequence number specified jointly by the commitNum and opNum parameters.    TRIM_HORIZON   –   Indicates that reading should start at the last untrimmed record in the system, which is the oldest unexpired (not yet deleted) record in the change-log stream.    LATEST   –   Indicates that reading should start at the most recent record in the system, which is the latest unexpired (not yet deleted) record in the change-log stream.
    ///   - limit: Specifies the maximum number of records to return. There is also a size limit of 10 MB on the response that can't be modified and that takes precedence over the number of records specified in the limit parameter. The response does include a threshold-breaching record if the 10 MB limit was reached. The range for limit is 1 to 100,000, with a default of 10.
    ///   - opNum: The operation sequence number within the specified commit to start reading from in the change-log stream data. The default is 1.
    ///   - logger: Logger use during operation
    @inlinable
    public func getSparqlStream(
        commitNum: Int64? = nil,
        encoding: Encoding? = nil,
        iteratorType: IteratorType? = nil,
        limit: Int64? = nil,
        opNum: Int64? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSparqlStreamOutput {
        let input = GetSparqlStreamInput(
            commitNum: commitNum, 
            encoding: encoding, 
            iteratorType: iteratorType, 
            limit: limit, 
            opNum: opNum
        )
        return try await self.getSparqlStream(input, logger: logger)
    }

    /// Lists active Gremlin queries. See Gremlin query status API for details about the output. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetQueryStatus IAM action in that cluster. Note that the neptune-db:QueryLanguage:Gremlin IAM condition key can be used in the policy document to restrict the use of Gremlin queries (see Condition keys available in Neptune IAM data-access policy statements).
    @Sendable
    @inlinable
    public func listGremlinQueries(_ input: ListGremlinQueriesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListGremlinQueriesOutput {
        try await self.client.execute(
            operation: "ListGremlinQueries", 
            path: "/gremlin/status", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists active Gremlin queries. See Gremlin query status API for details about the output. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetQueryStatus IAM action in that cluster. Note that the neptune-db:QueryLanguage:Gremlin IAM condition key can be used in the policy document to restrict the use of Gremlin queries (see Condition keys available in Neptune IAM data-access policy statements).
    ///
    /// Parameters:
    ///   - includeWaiting: If set to TRUE, the list returned includes waiting queries. The default is FALSE;
    ///   - logger: Logger use during operation
    @inlinable
    public func listGremlinQueries(
        includeWaiting: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListGremlinQueriesOutput {
        let input = ListGremlinQueriesInput(
            includeWaiting: includeWaiting
        )
        return try await self.listGremlinQueries(input, logger: logger)
    }

    /// Retrieves a list of the loadIds for all active loader jobs. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ListLoaderJobs IAM action in that cluster..
    @Sendable
    @inlinable
    public func listLoaderJobs(_ input: ListLoaderJobsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLoaderJobsOutput {
        try await self.client.execute(
            operation: "ListLoaderJobs", 
            path: "/loader", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of the loadIds for all active loader jobs. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ListLoaderJobs IAM action in that cluster..
    ///
    /// Parameters:
    ///   - includeQueuedLoads: An optional parameter that can be used to exclude the load IDs of queued load requests when requesting a list of load IDs by setting the parameter to FALSE. The default value is TRUE.
    ///   - limit: The number of load IDs to list. Must be a positive integer greater than zero and not more than 100 (which is the default).
    ///   - logger: Logger use during operation
    @inlinable
    public func listLoaderJobs(
        includeQueuedLoads: Bool? = nil,
        limit: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListLoaderJobsOutput {
        let input = ListLoaderJobsInput(
            includeQueuedLoads: includeQueuedLoads, 
            limit: limit
        )
        return try await self.listLoaderJobs(input, logger: logger)
    }

    /// Returns a list of Neptune ML data processing jobs. See Listing active data-processing jobs using the Neptune ML dataprocessing command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ListMLDataProcessingJobs IAM action in that cluster.
    @Sendable
    @inlinable
    public func listMLDataProcessingJobs(_ input: ListMLDataProcessingJobsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMLDataProcessingJobsOutput {
        try await self.client.execute(
            operation: "ListMLDataProcessingJobs", 
            path: "/ml/dataprocessing", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of Neptune ML data processing jobs. See Listing active data-processing jobs using the Neptune ML dataprocessing command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ListMLDataProcessingJobs IAM action in that cluster.
    ///
    /// Parameters:
    ///   - maxItems: The maximum number of items to return (from 1 to 1024; the default is 10).
    ///   - neptuneIamRoleArn: The ARN of an IAM role that provides Neptune access to SageMaker and Amazon S3 resources. This must be listed in your DB cluster parameter group or an error will occur.
    ///   - logger: Logger use during operation
    @inlinable
    public func listMLDataProcessingJobs(
        maxItems: Int? = nil,
        neptuneIamRoleArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListMLDataProcessingJobsOutput {
        let input = ListMLDataProcessingJobsInput(
            maxItems: maxItems, 
            neptuneIamRoleArn: neptuneIamRoleArn
        )
        return try await self.listMLDataProcessingJobs(input, logger: logger)
    }

    /// Lists existing inference endpoints. See Managing inference endpoints using the endpoints command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ListMLEndpoints IAM action in that cluster.
    @Sendable
    @inlinable
    public func listMLEndpoints(_ input: ListMLEndpointsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMLEndpointsOutput {
        try await self.client.execute(
            operation: "ListMLEndpoints", 
            path: "/ml/endpoints", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists existing inference endpoints. See Managing inference endpoints using the endpoints command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ListMLEndpoints IAM action in that cluster.
    ///
    /// Parameters:
    ///   - maxItems: The maximum number of items to return (from 1 to 1024; the default is 10.
    ///   - neptuneIamRoleArn: The ARN of an IAM role that provides Neptune access to SageMaker and Amazon S3 resources. This must be listed in your DB cluster parameter group or an error will occur.
    ///   - logger: Logger use during operation
    @inlinable
    public func listMLEndpoints(
        maxItems: Int? = nil,
        neptuneIamRoleArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListMLEndpointsOutput {
        let input = ListMLEndpointsInput(
            maxItems: maxItems, 
            neptuneIamRoleArn: neptuneIamRoleArn
        )
        return try await self.listMLEndpoints(input, logger: logger)
    }

    /// Lists Neptune ML model-training jobs. See Model training using the modeltraining command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:neptune-db:ListMLModelTrainingJobs IAM action in that cluster.
    @Sendable
    @inlinable
    public func listMLModelTrainingJobs(_ input: ListMLModelTrainingJobsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMLModelTrainingJobsOutput {
        try await self.client.execute(
            operation: "ListMLModelTrainingJobs", 
            path: "/ml/modeltraining", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists Neptune ML model-training jobs. See Model training using the modeltraining command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:neptune-db:ListMLModelTrainingJobs IAM action in that cluster.
    ///
    /// Parameters:
    ///   - maxItems: The maximum number of items to return (from 1 to 1024; the default is 10).
    ///   - neptuneIamRoleArn: The ARN of an IAM role that provides Neptune access to SageMaker and Amazon S3 resources. This must be listed in your DB cluster parameter group or an error will occur.
    ///   - logger: Logger use during operation
    @inlinable
    public func listMLModelTrainingJobs(
        maxItems: Int? = nil,
        neptuneIamRoleArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListMLModelTrainingJobsOutput {
        let input = ListMLModelTrainingJobsInput(
            maxItems: maxItems, 
            neptuneIamRoleArn: neptuneIamRoleArn
        )
        return try await self.listMLModelTrainingJobs(input, logger: logger)
    }

    /// Returns a list of model transform job IDs. See Use a trained model to generate new model artifacts. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ListMLModelTransformJobs IAM action in that cluster.
    @Sendable
    @inlinable
    public func listMLModelTransformJobs(_ input: ListMLModelTransformJobsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMLModelTransformJobsOutput {
        try await self.client.execute(
            operation: "ListMLModelTransformJobs", 
            path: "/ml/modeltransform", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of model transform job IDs. See Use a trained model to generate new model artifacts. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ListMLModelTransformJobs IAM action in that cluster.
    ///
    /// Parameters:
    ///   - maxItems: The maximum number of items to return (from 1 to 1024; the default is 10).
    ///   - neptuneIamRoleArn: The ARN of an IAM role that provides Neptune access to SageMaker and Amazon S3 resources. This must be listed in your DB cluster parameter group or an error will occur.
    ///   - logger: Logger use during operation
    @inlinable
    public func listMLModelTransformJobs(
        maxItems: Int? = nil,
        neptuneIamRoleArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListMLModelTransformJobsOutput {
        let input = ListMLModelTransformJobsInput(
            maxItems: maxItems, 
            neptuneIamRoleArn: neptuneIamRoleArn
        )
        return try await self.listMLModelTransformJobs(input, logger: logger)
    }

    /// Lists active openCypher queries. See Neptune openCypher status endpoint for more information. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetQueryStatus IAM action in that cluster. Note that the neptune-db:QueryLanguage:OpenCypher IAM condition key can be used in the policy document to restrict the use of openCypher queries (see Condition keys available in Neptune IAM data-access policy statements).
    @Sendable
    @inlinable
    public func listOpenCypherQueries(_ input: ListOpenCypherQueriesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListOpenCypherQueriesOutput {
        try await self.client.execute(
            operation: "ListOpenCypherQueries", 
            path: "/opencypher/status", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists active openCypher queries. See Neptune openCypher status endpoint for more information. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetQueryStatus IAM action in that cluster. Note that the neptune-db:QueryLanguage:OpenCypher IAM condition key can be used in the policy document to restrict the use of openCypher queries (see Condition keys available in Neptune IAM data-access policy statements).
    ///
    /// Parameters:
    ///   - includeWaiting:  When set to TRUE and other parameters are not present, causes status information to be returned for waiting queries as well as for running queries.
    ///   - logger: Logger use during operation
    @inlinable
    public func listOpenCypherQueries(
        includeWaiting: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListOpenCypherQueriesOutput {
        let input = ListOpenCypherQueriesInput(
            includeWaiting: includeWaiting
        )
        return try await self.listOpenCypherQueries(input, logger: logger)
    }

    /// Manages the generation and use of property graph statistics. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ManageStatistics IAM action in that cluster.
    @Sendable
    @inlinable
    public func managePropertygraphStatistics(_ input: ManagePropertygraphStatisticsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ManagePropertygraphStatisticsOutput {
        try await self.client.execute(
            operation: "ManagePropertygraphStatistics", 
            path: "/propertygraph/statistics", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Manages the generation and use of property graph statistics. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ManageStatistics IAM action in that cluster.
    ///
    /// Parameters:
    ///   - mode: The statistics generation mode. One of: DISABLE_AUTOCOMPUTE, ENABLE_AUTOCOMPUTE, or REFRESH, the last of which manually triggers DFE statistics generation.
    ///   - logger: Logger use during operation
    @inlinable
    public func managePropertygraphStatistics(
        mode: StatisticsAutoGenerationMode? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ManagePropertygraphStatisticsOutput {
        let input = ManagePropertygraphStatisticsInput(
            mode: mode
        )
        return try await self.managePropertygraphStatistics(input, logger: logger)
    }

    /// Manages the generation and use of RDF graph statistics. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ManageStatistics IAM action in that cluster.
    @Sendable
    @inlinable
    public func manageSparqlStatistics(_ input: ManageSparqlStatisticsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ManageSparqlStatisticsOutput {
        try await self.client.execute(
            operation: "ManageSparqlStatistics", 
            path: "/sparql/statistics", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Manages the generation and use of RDF graph statistics. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ManageStatistics IAM action in that cluster.
    ///
    /// Parameters:
    ///   - mode: The statistics generation mode. One of: DISABLE_AUTOCOMPUTE, ENABLE_AUTOCOMPUTE, or REFRESH, the last of which manually triggers DFE statistics generation.
    ///   - logger: Logger use during operation
    @inlinable
    public func manageSparqlStatistics(
        mode: StatisticsAutoGenerationMode? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ManageSparqlStatisticsOutput {
        let input = ManageSparqlStatisticsInput(
            mode: mode
        )
        return try await self.manageSparqlStatistics(input, logger: logger)
    }

    /// Starts a Neptune bulk loader job to load data from an Amazon S3 bucket into a Neptune DB instance. See Using the Amazon Neptune Bulk Loader to Ingest Data. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:StartLoaderJob IAM action in that cluster.
    @Sendable
    @inlinable
    public func startLoaderJob(_ input: StartLoaderJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StartLoaderJobOutput {
        try await self.client.execute(
            operation: "StartLoaderJob", 
            path: "/loader", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts a Neptune bulk loader job to load data from an Amazon S3 bucket into a Neptune DB instance. See Using the Amazon Neptune Bulk Loader to Ingest Data. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:StartLoaderJob IAM action in that cluster.
    ///
    /// Parameters:
    ///   - dependencies: This is an optional parameter that can make a queued load request contingent on the successful completion of one or more previous jobs in the queue. Neptune can queue up as many as 64 load requests at a time, if their queueRequest parameters are set to "TRUE". The dependencies parameter lets you make execution of such a queued request dependent on the successful completion of one or more specified previous requests in the queue. For example, if load Job-A and Job-B are independent of each other, but load Job-C needs Job-A and Job-B to be finished before it begins, proceed as follows:   Submit  load-job-A and load-job-B one after another in any order, and save their load-ids.   Submit load-job-C with the load-ids of the two jobs in its dependencies field:   Because of the dependencies parameter, the bulk loader will not start Job-C until Job-A and Job-B have completed successfully. If either one of them fails, Job-C will not be executed, and its status will be set to LOAD_FAILED_BECAUSE_DEPENDENCY_NOT_SATISFIED. You can set up multiple levels of dependency in this way, so that the failure of one job will cause all requests that are directly or indirectly dependent on it to be cancelled.
    ///   - failOnError:   failOnError   –   A flag to toggle a complete stop on an error.  Allowed values: "TRUE", "FALSE".  Default value: "TRUE". When this parameter is set to "FALSE", the loader tries to load all the data in the location specified, skipping any entries with errors. When this parameter is set to "TRUE", the loader stops as soon as it encounters an error.  Data loaded up to that point persists.
    ///   - format: The format of the data. For more information about data formats for the Neptune Loader command, see Load Data Formats.  Allowed values      csv for the Gremlin CSV data format.     opencypher for the openCypher CSV data format.     ntriples for the N-Triples RDF data format.     nquads for the N-Quads RDF data format.     rdfxml for the RDF\XML RDF data format.     turtle for the Turtle RDF data format.
    ///   - iamRoleArn: The Amazon Resource Name (ARN) for an IAM role to be assumed by the Neptune DB instance for access to the S3 bucket. The IAM role ARN provided here should be attached to the DB cluster (see Adding the IAM Role to an Amazon Neptune Cluster.
    ///   - mode: The load job mode.  Allowed values: RESUME, NEW, AUTO.  Default value: AUTO.       RESUME   –   In RESUME mode, the loader looks for a previous load from this source, and if it finds one, resumes that load job. If no previous load job is  found, the loader stops. The loader avoids reloading files that were successfully loaded in a previous job. It only tries to process failed files. If you dropped previously loaded data from your Neptune cluster, that data is not reloaded in this mode. If a previous load job loaded all files from the same source successfully, nothing is reloaded, and the loader returns success.    NEW   –   In NEW mode, the creates a new load request regardless of any previous loads. You can use this mode to reload all the data from a source after dropping previously loaded data from your Neptune cluster, or to load new data available at the same source.    AUTO   –   In AUTO mode, the loader looks for a previous load job from the same source, and if it finds one, resumes that job, just as in RESUME mode. If the loader doesn't find a previous load job from the same source, it loads all data from the source, just as in NEW mode.
    ///   - parallelism: The optional parallelism parameter can be set to reduce the number of threads used by the bulk load process.  Allowed values:    LOW –   The number of threads used is the number of available vCPUs divided by 8.    MEDIUM –   The number of threads used is the number of available vCPUs divided by 2.    HIGH –   The number of threads used is the same as the number of available vCPUs.    OVERSUBSCRIBE –   The number of threads used is the number of available vCPUs multiplied by 2. If this value is used, the bulk loader takes up all available resources. This does not mean, however, that the OVERSUBSCRIBE setting results in 100% CPU utilization. Because the load operation is I/O bound, the highest CPU utilization to expect is in the 60% to 70% range.    Default value: HIGH  The parallelism setting can sometimes result in a deadlock between threads when loading openCypher data. When this happens, Neptune returns the LOAD_DATA_DEADLOCK error. You can generally fix the issue by setting parallelism to a lower setting and retrying the load command.
    ///   - parserConfiguration:   parserConfiguration   –   An optional object with additional parser configuration values. Each of the child parameters is also optional:        namedGraphUri   –   The default graph for all RDF formats when no graph is specified (for non-quads formats and NQUAD entries with no graph). The default is https://aws.amazon.com/neptune/vocab/v01/DefaultNamedGraph.     baseUri   –   The base URI for RDF/XML and Turtle formats. The default is https://aws.amazon.com/neptune/default.     allowEmptyStrings   –   Gremlin users need to be able to pass empty string values("") as node and edge properties when loading CSV data. If allowEmptyStrings is set to false (the default), such empty strings are treated as nulls and are not loaded. If allowEmptyStrings is set to true, the loader treats empty strings as valid property values and loads them accordingly.
    ///   - queueRequest: This is an optional flag parameter that indicates whether the load request can be queued up or not.  You don't have to wait for one load job to complete before issuing the next one, because Neptune can queue up as many as 64 jobs at a time, provided that their queueRequest parameters are all set to "TRUE". The queue order of the jobs will be first-in-first-out (FIFO). If the queueRequest parameter is omitted or set to "FALSE", the load request will fail if another load job is already running.  Allowed values: "TRUE", "FALSE".  Default value: "FALSE".
    ///   - s3BucketRegion: The Amazon region of the S3 bucket. This must match the Amazon Region of the DB cluster.
    ///   - source: The source parameter accepts an S3 URI that identifies a single file, multiple files, a folder, or multiple folders. Neptune loads every data file in any folder that is specified. The URI can be in any of the following formats.    s3://(bucket_name)/(object-key-name)     https://s3.amazonaws.com/(bucket_name)/(object-key-name)     https://s3.us-east-1.amazonaws.com/(bucket_name)/(object-key-name)    The object-key-name element of the URI is equivalent to the prefix parameter in an S3 ListObjects API call.  It identifies all the objects in the specified S3 bucket whose names begin with that prefix.  That can be a single file or folder, or multiple files and/or folders. The specified folder or folders can contain multiple vertex files and multiple edge files.
    ///   - updateSingleCardinalityProperties:  updateSingleCardinalityProperties is an optional parameter that controls how the bulk loader treats a new value for single-cardinality vertex or edge properties. This is not supported for loading openCypher data.  Allowed values: "TRUE", "FALSE".  Default value: "FALSE". By default, or when updateSingleCardinalityProperties is explicitly set to "FALSE", the loader treats a new value as an error, because it violates single cardinality. When updateSingleCardinalityProperties is set to "TRUE", on the other hand, the bulk loader replaces the existing value with the new one. If multiple edge or single-cardinality vertex property values are provided in the source file(s) being loaded, the final value at the end of the bulk load could be any one of those new values. The loader only guarantees that the existing value has been replaced by one of the new ones.
    ///   - userProvidedEdgeIds: This parameter is required only when loading openCypher data that contains relationship IDs. It must be included and set to True when openCypher relationship IDs are explicitly provided in the load data (recommended). When userProvidedEdgeIds is absent or set to True, an :ID column must be present in every relationship file in the load. When userProvidedEdgeIds is present and set to False, relationship files in the load must not contain an :ID column. Instead, the Neptune loader automatically generates an ID for each relationship. It's useful to provide relationship IDs explicitly so that the loader can resume loading after error in the CSV data have been fixed, without having to reload any relationships that have already been loaded. If relationship IDs have not been explicitly assigned, the loader cannot resume a failed load if any relationship file has had to be corrected, and must instead reload all the relationships.
    ///   - logger: Logger use during operation
    @inlinable
    public func startLoaderJob(
        dependencies: [String]? = nil,
        failOnError: Bool? = nil,
        format: Format,
        iamRoleArn: String,
        mode: Mode? = nil,
        parallelism: Parallelism? = nil,
        parserConfiguration: [String: String]? = nil,
        queueRequest: Bool? = nil,
        s3BucketRegion: S3BucketRegion,
        source: String,
        updateSingleCardinalityProperties: Bool? = nil,
        userProvidedEdgeIds: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartLoaderJobOutput {
        let input = StartLoaderJobInput(
            dependencies: dependencies, 
            failOnError: failOnError, 
            format: format, 
            iamRoleArn: iamRoleArn, 
            mode: mode, 
            parallelism: parallelism, 
            parserConfiguration: parserConfiguration, 
            queueRequest: queueRequest, 
            s3BucketRegion: s3BucketRegion, 
            source: source, 
            updateSingleCardinalityProperties: updateSingleCardinalityProperties, 
            userProvidedEdgeIds: userProvidedEdgeIds
        )
        return try await self.startLoaderJob(input, logger: logger)
    }

    /// Creates a new Neptune ML data processing job for processing the graph data exported from Neptune for training. See The dataprocessing command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:StartMLModelDataProcessingJob IAM action in that cluster.
    @Sendable
    @inlinable
    public func startMLDataProcessingJob(_ input: StartMLDataProcessingJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StartMLDataProcessingJobOutput {
        try await self.client.execute(
            operation: "StartMLDataProcessingJob", 
            path: "/ml/dataprocessing", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new Neptune ML data processing job for processing the graph data exported from Neptune for training. See The dataprocessing command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:StartMLModelDataProcessingJob IAM action in that cluster.
    ///
    /// Parameters:
    ///   - configFileName: A data specification file that describes how to load the exported graph data for training. The file is automatically generated by the Neptune export toolkit. The default is training-data-configuration.json.
    ///   - id: A unique identifier for the new job. The default is an autogenerated UUID.
    ///   - inputDataS3Location: The URI of the Amazon S3 location where you want SageMaker to download the data needed to run the data processing job.
    ///   - modelType: One of the two model types that Neptune ML currently supports: heterogeneous graph models (heterogeneous), and knowledge graph (kge). The default is none. If not specified, Neptune ML chooses the model type automatically based on the data.
    ///   - neptuneIamRoleArn: The Amazon Resource Name (ARN) of an IAM role that SageMaker can assume to perform tasks on your behalf. This must be listed in your DB cluster parameter group or an error will occur.
    ///   - previousDataProcessingJobId: The job ID of a completed data processing job run on an earlier version of the data.
    ///   - processedDataS3Location: The URI of the Amazon S3 location where you want SageMaker to save the results of a data processing job.
    ///   - processingInstanceType: The type of ML instance used during data processing. Its memory should be large enough to hold the processed dataset. The default is the smallest ml.r5 type whose memory is ten times larger than the size of the exported graph data on disk.
    ///   - processingInstanceVolumeSizeInGB: The disk volume size of the processing instance. Both input data and processed data are stored on disk, so the volume size must be large enough to hold both data sets. The default is 0. If not specified or 0, Neptune ML chooses the volume size automatically based on the data size.
    ///   - processingTimeOutInSeconds: Timeout in seconds for the data processing job. The default is 86,400 (1 day).
    ///   - s3OutputEncryptionKMSKey: The Amazon Key Management Service (Amazon KMS) key that SageMaker uses to encrypt the output of the processing job. The default is none.
    ///   - sagemakerIamRoleArn: The ARN of an IAM role for SageMaker execution. This must be listed in your DB cluster parameter group or an error will occur.
    ///   - securityGroupIds: The VPC security group IDs. The default is None.
    ///   - subnets: The IDs of the subnets in the Neptune VPC. The default is None.
    ///   - volumeEncryptionKMSKey: The Amazon Key Management Service (Amazon KMS) key that SageMaker uses to encrypt data on the storage volume attached to the ML compute instances that run the training job. The default is None.
    ///   - logger: Logger use during operation
    @inlinable
    public func startMLDataProcessingJob(
        configFileName: String? = nil,
        id: String? = nil,
        inputDataS3Location: String,
        modelType: String? = nil,
        neptuneIamRoleArn: String? = nil,
        previousDataProcessingJobId: String? = nil,
        processedDataS3Location: String,
        processingInstanceType: String? = nil,
        processingInstanceVolumeSizeInGB: Int? = nil,
        processingTimeOutInSeconds: Int? = nil,
        s3OutputEncryptionKMSKey: String? = nil,
        sagemakerIamRoleArn: String? = nil,
        securityGroupIds: [String]? = nil,
        subnets: [String]? = nil,
        volumeEncryptionKMSKey: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartMLDataProcessingJobOutput {
        let input = StartMLDataProcessingJobInput(
            configFileName: configFileName, 
            id: id, 
            inputDataS3Location: inputDataS3Location, 
            modelType: modelType, 
            neptuneIamRoleArn: neptuneIamRoleArn, 
            previousDataProcessingJobId: previousDataProcessingJobId, 
            processedDataS3Location: processedDataS3Location, 
            processingInstanceType: processingInstanceType, 
            processingInstanceVolumeSizeInGB: processingInstanceVolumeSizeInGB, 
            processingTimeOutInSeconds: processingTimeOutInSeconds, 
            s3OutputEncryptionKMSKey: s3OutputEncryptionKMSKey, 
            sagemakerIamRoleArn: sagemakerIamRoleArn, 
            securityGroupIds: securityGroupIds, 
            subnets: subnets, 
            volumeEncryptionKMSKey: volumeEncryptionKMSKey
        )
        return try await self.startMLDataProcessingJob(input, logger: logger)
    }

    /// Creates a new Neptune ML model training job. See Model training using the modeltraining command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:StartMLModelTrainingJob IAM action in that cluster.
    @Sendable
    @inlinable
    public func startMLModelTrainingJob(_ input: StartMLModelTrainingJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StartMLModelTrainingJobOutput {
        try await self.client.execute(
            operation: "StartMLModelTrainingJob", 
            path: "/ml/modeltraining", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new Neptune ML model training job. See Model training using the modeltraining command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:StartMLModelTrainingJob IAM action in that cluster.
    ///
    /// Parameters:
    ///   - baseProcessingInstanceType: The type of ML instance used in preparing and managing training of ML models. This is a CPU instance chosen based on memory requirements for processing the training data and model.
    ///   - customModelTrainingParameters: The configuration for custom model training. This is a JSON object.
    ///   - dataProcessingJobId: The job ID of the completed data-processing job that has created the data that the training will work with.
    ///   - enableManagedSpotTraining: Optimizes the cost of training machine-learning models by using Amazon Elastic Compute Cloud spot instances. The default is False.
    ///   - id: A unique identifier for the new job. The default is An autogenerated UUID.
    ///   - maxHPONumberOfTrainingJobs: Maximum total number of training jobs to start for the hyperparameter tuning job. The default is 2. Neptune ML automatically tunes the hyperparameters of the machine learning model.  To obtain a model that performs well, use at least 10 jobs (in other words, set maxHPONumberOfTrainingJobs to 10). In general, the more tuning runs, the better the results.
    ///   - maxHPOParallelTrainingJobs: Maximum number of parallel training jobs to start for the hyperparameter tuning job. The default is 2. The number of parallel jobs you can run is limited by the available resources on your training instance.
    ///   - neptuneIamRoleArn: The ARN of an IAM role that provides Neptune access to SageMaker and Amazon S3 resources. This must be listed in your DB cluster parameter group or an error will occur.
    ///   - previousModelTrainingJobId: The job ID of a completed model-training job that you want to update incrementally based on updated data.
    ///   - s3OutputEncryptionKMSKey: The Amazon Key Management Service (KMS) key that SageMaker uses to encrypt the output of the processing job. The default is none.
    ///   - sagemakerIamRoleArn: The ARN of an IAM role for SageMaker execution.This must be listed in your DB cluster parameter group or an error will occur.
    ///   - securityGroupIds: The VPC security group IDs. The default is None.
    ///   - subnets: The IDs of the subnets in the Neptune VPC. The default is None.
    ///   - trainingInstanceType: The type of ML instance used for model training. All Neptune ML models support CPU, GPU, and multiGPU training. The default is ml.p3.2xlarge. Choosing the right instance type for training depends on the task type, graph size, and your budget.
    ///   - trainingInstanceVolumeSizeInGB: The disk volume size of the training instance. Both input data and the output model are stored on disk, so the volume size must be large enough to hold both data sets. The default is 0. If not specified or 0, Neptune ML selects a disk volume size based on the recommendation generated in the data processing step.
    ///   - trainingTimeOutInSeconds: Timeout in seconds for the training job. The default is 86,400 (1 day).
    ///   - trainModelS3Location: The location in Amazon S3 where the model artifacts are to be stored.
    ///   - volumeEncryptionKMSKey: The Amazon Key Management Service (KMS) key that SageMaker uses to encrypt data on the storage volume attached to the ML compute instances that run the training job. The default is None.
    ///   - logger: Logger use during operation
    @inlinable
    public func startMLModelTrainingJob(
        baseProcessingInstanceType: String? = nil,
        customModelTrainingParameters: CustomModelTrainingParameters? = nil,
        dataProcessingJobId: String,
        enableManagedSpotTraining: Bool? = nil,
        id: String? = nil,
        maxHPONumberOfTrainingJobs: Int? = nil,
        maxHPOParallelTrainingJobs: Int? = nil,
        neptuneIamRoleArn: String? = nil,
        previousModelTrainingJobId: String? = nil,
        s3OutputEncryptionKMSKey: String? = nil,
        sagemakerIamRoleArn: String? = nil,
        securityGroupIds: [String]? = nil,
        subnets: [String]? = nil,
        trainingInstanceType: String? = nil,
        trainingInstanceVolumeSizeInGB: Int? = nil,
        trainingTimeOutInSeconds: Int? = nil,
        trainModelS3Location: String,
        volumeEncryptionKMSKey: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartMLModelTrainingJobOutput {
        let input = StartMLModelTrainingJobInput(
            baseProcessingInstanceType: baseProcessingInstanceType, 
            customModelTrainingParameters: customModelTrainingParameters, 
            dataProcessingJobId: dataProcessingJobId, 
            enableManagedSpotTraining: enableManagedSpotTraining, 
            id: id, 
            maxHPONumberOfTrainingJobs: maxHPONumberOfTrainingJobs, 
            maxHPOParallelTrainingJobs: maxHPOParallelTrainingJobs, 
            neptuneIamRoleArn: neptuneIamRoleArn, 
            previousModelTrainingJobId: previousModelTrainingJobId, 
            s3OutputEncryptionKMSKey: s3OutputEncryptionKMSKey, 
            sagemakerIamRoleArn: sagemakerIamRoleArn, 
            securityGroupIds: securityGroupIds, 
            subnets: subnets, 
            trainingInstanceType: trainingInstanceType, 
            trainingInstanceVolumeSizeInGB: trainingInstanceVolumeSizeInGB, 
            trainingTimeOutInSeconds: trainingTimeOutInSeconds, 
            trainModelS3Location: trainModelS3Location, 
            volumeEncryptionKMSKey: volumeEncryptionKMSKey
        )
        return try await self.startMLModelTrainingJob(input, logger: logger)
    }

    /// Creates a new model transform job. See Use a trained model to generate new model artifacts. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:StartMLModelTransformJob IAM action in that cluster.
    @Sendable
    @inlinable
    public func startMLModelTransformJob(_ input: StartMLModelTransformJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StartMLModelTransformJobOutput {
        try await self.client.execute(
            operation: "StartMLModelTransformJob", 
            path: "/ml/modeltransform", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new model transform job. See Use a trained model to generate new model artifacts. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:StartMLModelTransformJob IAM action in that cluster.
    ///
    /// Parameters:
    ///   - baseProcessingInstanceType: The type of ML instance used in preparing and managing training of ML models. This is an ML compute instance chosen based on memory requirements for processing the training data and model.
    ///   - baseProcessingInstanceVolumeSizeInGB: The disk volume size of the training instance in gigabytes. The default is 0. Both input data and the output model are stored on disk, so the volume size must be large enough to hold both data sets. If not specified or 0, Neptune ML selects a disk volume size based on the recommendation generated in the data processing step.
    ///   - customModelTransformParameters: Configuration information for a model transform using a custom model. The customModelTransformParameters object contains the following fields, which must have values compatible with the saved model parameters from the training job:
    ///   - dataProcessingJobId: The job ID of a completed data-processing job. You must include either dataProcessingJobId and a mlModelTrainingJobId, or a trainingJobName.
    ///   - id: A unique identifier for the new job. The default is an autogenerated UUID.
    ///   - mlModelTrainingJobId: The job ID of a completed model-training job. You must include either dataProcessingJobId and a mlModelTrainingJobId, or a trainingJobName.
    ///   - modelTransformOutputS3Location: The location in Amazon S3 where the model artifacts are to be stored.
    ///   - neptuneIamRoleArn: The ARN of an IAM role that provides Neptune access to SageMaker and Amazon S3 resources. This must be listed in your DB cluster parameter group or an error will occur.
    ///   - s3OutputEncryptionKMSKey: The Amazon Key Management Service (KMS) key that SageMaker uses to encrypt the output of the processing job. The default is none.
    ///   - sagemakerIamRoleArn: The ARN of an IAM role for SageMaker execution. This must be listed in your DB cluster parameter group or an error will occur.
    ///   - securityGroupIds: The VPC security group IDs. The default is None.
    ///   - subnets: The IDs of the subnets in the Neptune VPC. The default is None.
    ///   - trainingJobName: The name of a completed SageMaker training job. You must include either dataProcessingJobId and a mlModelTrainingJobId, or a trainingJobName.
    ///   - volumeEncryptionKMSKey: The Amazon Key Management Service (KMS) key that SageMaker uses to encrypt data on the storage volume attached to the ML compute instances that run the training job. The default is None.
    ///   - logger: Logger use during operation
    @inlinable
    public func startMLModelTransformJob(
        baseProcessingInstanceType: String? = nil,
        baseProcessingInstanceVolumeSizeInGB: Int? = nil,
        customModelTransformParameters: CustomModelTransformParameters? = nil,
        dataProcessingJobId: String? = nil,
        id: String? = nil,
        mlModelTrainingJobId: String? = nil,
        modelTransformOutputS3Location: String,
        neptuneIamRoleArn: String? = nil,
        s3OutputEncryptionKMSKey: String? = nil,
        sagemakerIamRoleArn: String? = nil,
        securityGroupIds: [String]? = nil,
        subnets: [String]? = nil,
        trainingJobName: String? = nil,
        volumeEncryptionKMSKey: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartMLModelTransformJobOutput {
        let input = StartMLModelTransformJobInput(
            baseProcessingInstanceType: baseProcessingInstanceType, 
            baseProcessingInstanceVolumeSizeInGB: baseProcessingInstanceVolumeSizeInGB, 
            customModelTransformParameters: customModelTransformParameters, 
            dataProcessingJobId: dataProcessingJobId, 
            id: id, 
            mlModelTrainingJobId: mlModelTrainingJobId, 
            modelTransformOutputS3Location: modelTransformOutputS3Location, 
            neptuneIamRoleArn: neptuneIamRoleArn, 
            s3OutputEncryptionKMSKey: s3OutputEncryptionKMSKey, 
            sagemakerIamRoleArn: sagemakerIamRoleArn, 
            securityGroupIds: securityGroupIds, 
            subnets: subnets, 
            trainingJobName: trainingJobName, 
            volumeEncryptionKMSKey: volumeEncryptionKMSKey
        )
        return try await self.startMLModelTransformJob(input, logger: logger)
    }
}

extension Neptunedata {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: Neptunedata, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}
