//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS Neptunedata service.
///
/// Neptune Data API The Amazon Neptune data API provides SDK support for more than 40 of Neptune's data operations, including data loading, query execution, data inquiry, and machine learning. It supports  the Gremlin and openCypher query languages, and is available in all SDK languages. It automatically signs API requests and greatly simplifies integrating Neptune into your applications.
/// API Reference: https://docs.aws.amazon.com/neptune/latest/userguide/intro.html
public struct Neptunedata: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the Neptunedata client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "Neptunedata",
            serviceIdentifier: "neptune-db",
            serviceProtocol: .restjson,
            apiVersion: "2023-08-01",
            endpoint: endpoint,
            errorType: NeptunedataErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Cancels a Gremlin query. See Gremlin query cancellation for more information. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:CancelQuery IAM action in that cluster.
    @Sendable
    public func cancelGremlinQuery(_ input: CancelGremlinQueryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelGremlinQueryOutput {
        return try await self.client.execute(
            operation: "CancelGremlinQuery", 
            path: "/gremlin/status/{queryId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Cancels a specified load job. This is an HTTP DELETE request. See Neptune Loader Get-Status API for more information. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:CancelLoaderJob IAM action in that cluster..
    @Sendable
    public func cancelLoaderJob(_ input: CancelLoaderJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelLoaderJobOutput {
        return try await self.client.execute(
            operation: "CancelLoaderJob", 
            path: "/loader/{loadId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Cancels a Neptune ML data processing job. See The dataprocessing command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:CancelMLDataProcessingJob IAM action in that cluster.
    @Sendable
    public func cancelMLDataProcessingJob(_ input: CancelMLDataProcessingJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelMLDataProcessingJobOutput {
        return try await self.client.execute(
            operation: "CancelMLDataProcessingJob", 
            path: "/ml/dataprocessing/{id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Cancels a Neptune ML model training job. See Model training using the modeltraining command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:CancelMLModelTrainingJob IAM action in that cluster.
    @Sendable
    public func cancelMLModelTrainingJob(_ input: CancelMLModelTrainingJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelMLModelTrainingJobOutput {
        return try await self.client.execute(
            operation: "CancelMLModelTrainingJob", 
            path: "/ml/modeltraining/{id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Cancels a specified model transform job. See Use a trained model to generate new model artifacts. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:CancelMLModelTransformJob IAM action in that cluster.
    @Sendable
    public func cancelMLModelTransformJob(_ input: CancelMLModelTransformJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelMLModelTransformJobOutput {
        return try await self.client.execute(
            operation: "CancelMLModelTransformJob", 
            path: "/ml/modeltransform/{id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Cancels a specified openCypher query. See Neptune openCypher status endpoint for more information. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:CancelQuery IAM action in that cluster.
    @Sendable
    public func cancelOpenCypherQuery(_ input: CancelOpenCypherQueryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelOpenCypherQueryOutput {
        return try await self.client.execute(
            operation: "CancelOpenCypherQuery", 
            path: "/opencypher/status/{queryId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new Neptune ML inference endpoint that lets you query one specific model that the model-training process constructed. See Managing inference endpoints using the endpoints command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:CreateMLEndpoint IAM action in that cluster.
    @Sendable
    public func createMLEndpoint(_ input: CreateMLEndpointInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateMLEndpointOutput {
        return try await self.client.execute(
            operation: "CreateMLEndpoint", 
            path: "/ml/endpoints", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Cancels the creation of a Neptune ML inference endpoint. See Managing inference endpoints using the endpoints command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:DeleteMLEndpoint IAM action in that cluster.
    @Sendable
    public func deleteMLEndpoint(_ input: DeleteMLEndpointInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteMLEndpointOutput {
        return try await self.client.execute(
            operation: "DeleteMLEndpoint", 
            path: "/ml/endpoints/{id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes statistics for Gremlin and openCypher (property graph) data. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:DeleteStatistics IAM action in that cluster.
    @Sendable
    public func deletePropertygraphStatistics(logger: Logger = AWSClient.loggingDisabled) async throws -> DeletePropertygraphStatisticsOutput {
        return try await self.client.execute(
            operation: "DeletePropertygraphStatistics", 
            path: "/propertygraph/statistics", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            logger: logger
        )
    }

    /// Deletes SPARQL statistics When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:DeleteStatistics IAM action in that cluster.
    @Sendable
    public func deleteSparqlStatistics(logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteSparqlStatisticsOutput {
        return try await self.client.execute(
            operation: "DeleteSparqlStatistics", 
            path: "/sparql/statistics", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            logger: logger
        )
    }

    /// The fast reset REST API lets you reset a Neptune graph quicky and easily, removing all of its data. Neptune fast reset is a two-step process. First you call ExecuteFastReset with action set to initiateDatabaseReset. This returns a UUID token which you then include when calling ExecuteFastReset again with action set to performDatabaseReset. See Empty an Amazon Neptune DB cluster using the fast reset API. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ResetDatabase IAM action in that cluster.
    @Sendable
    public func executeFastReset(_ input: ExecuteFastResetInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ExecuteFastResetOutput {
        return try await self.client.execute(
            operation: "ExecuteFastReset", 
            path: "/system", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Executes a Gremlin Explain query. Amazon Neptune has added a Gremlin feature named explain that provides is a self-service tool for understanding the execution approach being taken by the Neptune engine for the query. You invoke it by adding an explain parameter to an HTTP call that submits a Gremlin query. The explain feature provides information about the logical structure of query execution plans. You can use this information to identify potential evaluation and execution bottlenecks and to tune your query, as explained  in Tuning Gremlin queries. You can also use query hints to improve query execution plans. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows one of the following IAM actions in that cluster, depending on the query:    neptune-db:ReadDataViaQuery     neptune-db:WriteDataViaQuery     neptune-db:DeleteDataViaQuery    Note that the neptune-db:QueryLanguage:Gremlin IAM condition key can be used in the policy document to restrict the use of Gremlin queries (see Condition keys available in Neptune IAM data-access policy statements).
    @Sendable
    public func executeGremlinExplainQuery(_ input: ExecuteGremlinExplainQueryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ExecuteGremlinExplainQueryOutput {
        return try await self.client.execute(
            operation: "ExecuteGremlinExplainQuery", 
            path: "/gremlin/explain", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Executes a Gremlin Profile query, which runs a specified traversal, collects various metrics about the run, and produces a profile report as output. See Gremlin profile API in Neptune for details. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ReadDataViaQuery IAM action in that cluster. Note that the neptune-db:QueryLanguage:Gremlin IAM condition key can be used in the policy document to restrict the use of Gremlin queries (see Condition keys available in Neptune IAM data-access policy statements).
    @Sendable
    public func executeGremlinProfileQuery(_ input: ExecuteGremlinProfileQueryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ExecuteGremlinProfileQueryOutput {
        return try await self.client.execute(
            operation: "ExecuteGremlinProfileQuery", 
            path: "/gremlin/profile", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// This commands executes a Gremlin query. Amazon Neptune is compatible with Apache TinkerPop3 and Gremlin, so you can use the Gremlin traversal language to query the graph, as described under The Graph in the Apache TinkerPop3 documentation. More details can also be found in Accessing a Neptune graph with Gremlin. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that enables one of the following IAM actions in that cluster, depending on the query:    neptune-db:ReadDataViaQuery     neptune-db:WriteDataViaQuery     neptune-db:DeleteDataViaQuery    Note that the neptune-db:QueryLanguage:Gremlin IAM condition key can be used in the policy document to restrict the use of Gremlin queries (see Condition keys available in Neptune IAM data-access policy statements).
    @Sendable
    public func executeGremlinQuery(_ input: ExecuteGremlinQueryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ExecuteGremlinQueryOutput {
        return try await self.client.execute(
            operation: "ExecuteGremlinQuery", 
            path: "/gremlin", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Executes an openCypher explain request. See The openCypher explain feature for more information. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ReadDataViaQuery IAM action in that cluster. Note that the neptune-db:QueryLanguage:OpenCypher IAM condition key can be used in the policy document to restrict the use of openCypher queries (see Condition keys available in Neptune IAM data-access policy statements).
    @Sendable
    public func executeOpenCypherExplainQuery(_ input: ExecuteOpenCypherExplainQueryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ExecuteOpenCypherExplainQueryOutput {
        return try await self.client.execute(
            operation: "ExecuteOpenCypherExplainQuery", 
            path: "/opencypher/explain", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Executes an openCypher query. See Accessing the Neptune Graph with openCypher for more information. Neptune supports building graph applications using openCypher, which is currently one of the most popular query languages among developers working with graph databases. Developers, business analysts, and data scientists like openCypher's declarative, SQL-inspired syntax because it provides a familiar structure in which to querying property graphs. The openCypher language was originally developed by Neo4j, then open-sourced in 2015 and contributed to the openCypher project under an Apache 2 open-source license. Note that when invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows one of the following IAM actions in that cluster, depending on the query:    neptune-db:ReadDataViaQuery     neptune-db:WriteDataViaQuery     neptune-db:DeleteDataViaQuery    Note also that the neptune-db:QueryLanguage:OpenCypher IAM condition key can be used in the policy document to restrict the use of openCypher queries (see Condition keys available in Neptune IAM data-access policy statements).
    @Sendable
    public func executeOpenCypherQuery(_ input: ExecuteOpenCypherQueryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ExecuteOpenCypherQueryOutput {
        return try await self.client.execute(
            operation: "ExecuteOpenCypherQuery", 
            path: "/opencypher", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the status of the graph database on the host. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetEngineStatus IAM action in that cluster.
    @Sendable
    public func getEngineStatus(logger: Logger = AWSClient.loggingDisabled) async throws -> GetEngineStatusOutput {
        return try await self.client.execute(
            operation: "GetEngineStatus", 
            path: "/status", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            logger: logger
        )
    }

    /// Gets the status of a specified Gremlin query. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetQueryStatus IAM action in that cluster. Note that the neptune-db:QueryLanguage:Gremlin IAM condition key can be used in the policy document to restrict the use of Gremlin queries (see Condition keys available in Neptune IAM data-access policy statements).
    @Sendable
    public func getGremlinQueryStatus(_ input: GetGremlinQueryStatusInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetGremlinQueryStatusOutput {
        return try await self.client.execute(
            operation: "GetGremlinQueryStatus", 
            path: "/gremlin/status/{queryId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets status information about a specified load job. Neptune keeps track of the most recent 1,024 bulk load jobs, and stores the last 10,000 error details per job. See Neptune Loader Get-Status API for more information. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetLoaderJobStatus IAM action in that cluster..
    @Sendable
    public func getLoaderJobStatus(_ input: GetLoaderJobStatusInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLoaderJobStatusOutput {
        return try await self.client.execute(
            operation: "GetLoaderJobStatus", 
            path: "/loader/{loadId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves information about a specified data processing job. See The dataprocessing command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:neptune-db:GetMLDataProcessingJobStatus IAM action in that cluster.
    @Sendable
    public func getMLDataProcessingJob(_ input: GetMLDataProcessingJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMLDataProcessingJobOutput {
        return try await self.client.execute(
            operation: "GetMLDataProcessingJob", 
            path: "/ml/dataprocessing/{id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves details about an inference endpoint. See Managing inference endpoints using the endpoints command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetMLEndpointStatus IAM action in that cluster.
    @Sendable
    public func getMLEndpoint(_ input: GetMLEndpointInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMLEndpointOutput {
        return try await self.client.execute(
            operation: "GetMLEndpoint", 
            path: "/ml/endpoints/{id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves information about a Neptune ML model training job. See Model training using the modeltraining command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetMLModelTrainingJobStatus IAM action in that cluster.
    @Sendable
    public func getMLModelTrainingJob(_ input: GetMLModelTrainingJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMLModelTrainingJobOutput {
        return try await self.client.execute(
            operation: "GetMLModelTrainingJob", 
            path: "/ml/modeltraining/{id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about a specified model transform job. See Use a trained model to generate new model artifacts. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetMLModelTransformJobStatus IAM action in that cluster.
    @Sendable
    public func getMLModelTransformJob(_ input: GetMLModelTransformJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMLModelTransformJobOutput {
        return try await self.client.execute(
            operation: "GetMLModelTransformJob", 
            path: "/ml/modeltransform/{id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the status of a specified openCypher query. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetQueryStatus IAM action in that cluster. Note that the neptune-db:QueryLanguage:OpenCypher IAM condition key can be used in the policy document to restrict the use of openCypher queries (see Condition keys available in Neptune IAM data-access policy statements).
    @Sendable
    public func getOpenCypherQueryStatus(_ input: GetOpenCypherQueryStatusInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetOpenCypherQueryStatusOutput {
        return try await self.client.execute(
            operation: "GetOpenCypherQueryStatus", 
            path: "/opencypher/status/{queryId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets property graph statistics (Gremlin and openCypher). When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetStatisticsStatus IAM action in that cluster.
    @Sendable
    public func getPropertygraphStatistics(logger: Logger = AWSClient.loggingDisabled) async throws -> GetPropertygraphStatisticsOutput {
        return try await self.client.execute(
            operation: "GetPropertygraphStatistics", 
            path: "/propertygraph/statistics", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            logger: logger
        )
    }

    /// Gets a stream for a property graph. With the Neptune Streams feature, you can generate a complete sequence of change-log entries that record every change made to your graph data as it happens. GetPropertygraphStream lets you collect these change-log entries for a property graph. The Neptune streams feature needs to be enabled on your Neptune DBcluster. To enable streams, set the neptune_streams DB cluster parameter to 1. See Capturing graph changes in real time using Neptune streams. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetStreamRecords IAM action in that cluster. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that enables one of the following IAM actions, depending on the query: Note that you can restrict property-graph queries using the following IAM context keys:    neptune-db:QueryLanguage:Gremlin     neptune-db:QueryLanguage:OpenCypher    See Condition keys available in Neptune IAM data-access policy statements).
    @Sendable
    public func getPropertygraphStream(_ input: GetPropertygraphStreamInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPropertygraphStreamOutput {
        return try await self.client.execute(
            operation: "GetPropertygraphStream", 
            path: "/propertygraph/stream", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a graph summary for a property graph. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetGraphSummary IAM action in that cluster.
    @Sendable
    public func getPropertygraphSummary(_ input: GetPropertygraphSummaryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPropertygraphSummaryOutput {
        return try await self.client.execute(
            operation: "GetPropertygraphSummary", 
            path: "/propertygraph/statistics/summary", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets a graph summary for an RDF graph. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetGraphSummary IAM action in that cluster.
    @Sendable
    public func getRDFGraphSummary(_ input: GetRDFGraphSummaryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRDFGraphSummaryOutput {
        return try await self.client.execute(
            operation: "GetRDFGraphSummary", 
            path: "/rdf/statistics/summary", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets RDF statistics (SPARQL).
    @Sendable
    public func getSparqlStatistics(logger: Logger = AWSClient.loggingDisabled) async throws -> GetSparqlStatisticsOutput {
        return try await self.client.execute(
            operation: "GetSparqlStatistics", 
            path: "/sparql/statistics", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            logger: logger
        )
    }

    /// Gets a stream for an RDF graph. With the Neptune Streams feature, you can generate a complete sequence of change-log entries that record every change made to your graph data as it happens. GetSparqlStream lets you collect these change-log entries for an RDF graph. The Neptune streams feature needs to be enabled on your Neptune DBcluster. To enable streams, set the neptune_streams DB cluster parameter to 1. See Capturing graph changes in real time using Neptune streams. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetStreamRecords IAM action in that cluster. Note that the neptune-db:QueryLanguage:Sparql IAM condition key can be used in the policy document to restrict the use of SPARQL queries (see Condition keys available in Neptune IAM data-access policy statements).
    @Sendable
    public func getSparqlStream(_ input: GetSparqlStreamInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSparqlStreamOutput {
        return try await self.client.execute(
            operation: "GetSparqlStream", 
            path: "/sparql/stream", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists active Gremlin queries. See Gremlin query status API for details about the output. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetQueryStatus IAM action in that cluster. Note that the neptune-db:QueryLanguage:Gremlin IAM condition key can be used in the policy document to restrict the use of Gremlin queries (see Condition keys available in Neptune IAM data-access policy statements).
    @Sendable
    public func listGremlinQueries(_ input: ListGremlinQueriesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListGremlinQueriesOutput {
        return try await self.client.execute(
            operation: "ListGremlinQueries", 
            path: "/gremlin/status", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves a list of the loadIds for all active loader jobs. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ListLoaderJobs IAM action in that cluster..
    @Sendable
    public func listLoaderJobs(_ input: ListLoaderJobsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLoaderJobsOutput {
        return try await self.client.execute(
            operation: "ListLoaderJobs", 
            path: "/loader", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of Neptune ML data processing jobs. See Listing active data-processing jobs using the Neptune ML dataprocessing command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ListMLDataProcessingJobs IAM action in that cluster.
    @Sendable
    public func listMLDataProcessingJobs(_ input: ListMLDataProcessingJobsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMLDataProcessingJobsOutput {
        return try await self.client.execute(
            operation: "ListMLDataProcessingJobs", 
            path: "/ml/dataprocessing", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists existing inference endpoints. See Managing inference endpoints using the endpoints command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ListMLEndpoints IAM action in that cluster.
    @Sendable
    public func listMLEndpoints(_ input: ListMLEndpointsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMLEndpointsOutput {
        return try await self.client.execute(
            operation: "ListMLEndpoints", 
            path: "/ml/endpoints", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists Neptune ML model-training jobs. See Model training using the modeltraining command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:neptune-db:ListMLModelTrainingJobs IAM action in that cluster.
    @Sendable
    public func listMLModelTrainingJobs(_ input: ListMLModelTrainingJobsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMLModelTrainingJobsOutput {
        return try await self.client.execute(
            operation: "ListMLModelTrainingJobs", 
            path: "/ml/modeltraining", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of model transform job IDs. See Use a trained model to generate new model artifacts. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ListMLModelTransformJobs IAM action in that cluster.
    @Sendable
    public func listMLModelTransformJobs(_ input: ListMLModelTransformJobsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMLModelTransformJobsOutput {
        return try await self.client.execute(
            operation: "ListMLModelTransformJobs", 
            path: "/ml/modeltransform", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists active openCypher queries. See Neptune openCypher status endpoint for more information. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:GetQueryStatus IAM action in that cluster. Note that the neptune-db:QueryLanguage:OpenCypher IAM condition key can be used in the policy document to restrict the use of openCypher queries (see Condition keys available in Neptune IAM data-access policy statements).
    @Sendable
    public func listOpenCypherQueries(_ input: ListOpenCypherQueriesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListOpenCypherQueriesOutput {
        return try await self.client.execute(
            operation: "ListOpenCypherQueries", 
            path: "/opencypher/status", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Manages the generation and use of property graph statistics. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ManageStatistics IAM action in that cluster.
    @Sendable
    public func managePropertygraphStatistics(_ input: ManagePropertygraphStatisticsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ManagePropertygraphStatisticsOutput {
        return try await self.client.execute(
            operation: "ManagePropertygraphStatistics", 
            path: "/propertygraph/statistics", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Manages the generation and use of RDF graph statistics. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:ManageStatistics IAM action in that cluster.
    @Sendable
    public func manageSparqlStatistics(_ input: ManageSparqlStatisticsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ManageSparqlStatisticsOutput {
        return try await self.client.execute(
            operation: "ManageSparqlStatistics", 
            path: "/sparql/statistics", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts a Neptune bulk loader job to load data from an Amazon S3 bucket into a Neptune DB instance. See Using the Amazon Neptune Bulk Loader to Ingest Data. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:StartLoaderJob IAM action in that cluster.
    @Sendable
    public func startLoaderJob(_ input: StartLoaderJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StartLoaderJobOutput {
        return try await self.client.execute(
            operation: "StartLoaderJob", 
            path: "/loader", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new Neptune ML data processing job for processing the graph data exported from Neptune for training. See The dataprocessing command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:StartMLModelDataProcessingJob IAM action in that cluster.
    @Sendable
    public func startMLDataProcessingJob(_ input: StartMLDataProcessingJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StartMLDataProcessingJobOutput {
        return try await self.client.execute(
            operation: "StartMLDataProcessingJob", 
            path: "/ml/dataprocessing", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new Neptune ML model training job. See Model training using the modeltraining command. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:StartMLModelTrainingJob IAM action in that cluster.
    @Sendable
    public func startMLModelTrainingJob(_ input: StartMLModelTrainingJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StartMLModelTrainingJobOutput {
        return try await self.client.execute(
            operation: "StartMLModelTrainingJob", 
            path: "/ml/modeltraining", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new model transform job. See Use a trained model to generate new model artifacts. When invoking this operation in a Neptune cluster that has IAM authentication enabled, the IAM user or role making the request must have a policy attached that allows the neptune-db:StartMLModelTransformJob IAM action in that cluster.
    @Sendable
    public func startMLModelTransformJob(_ input: StartMLModelTransformJobInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StartMLModelTransformJobOutput {
        return try await self.client.execute(
            operation: "StartMLModelTransformJob", 
            path: "/ml/modeltransform", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension Neptunedata {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: Neptunedata, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}
