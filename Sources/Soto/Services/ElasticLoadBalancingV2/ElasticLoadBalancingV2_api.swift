//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS ElasticLoadBalancingV2 service.
///
/// Elastic Load Balancing A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets. Elastic Load Balancing supports the following types of load balancers: Application Load Balancers, Network Load Balancers, Gateway Load Balancers, and Classic Load Balancers. This reference covers the following load balancer types:   Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS.   Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP.   Gateway Load Balancer - Operates at the network layer (layer 3).   For more information, see the Elastic Load Balancing User Guide. All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.
public struct ElasticLoadBalancingV2: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the ElasticLoadBalancingV2 client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "ElasticLoadBalancingV2",
            serviceIdentifier: "elasticloadbalancing",
            serviceProtocol: .query,
            apiVersion: "2015-12-01",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: ElasticLoadBalancingV2ErrorType.self,
            xmlNamespace: "http://elasticloadbalancing.amazonaws.com/doc/2015-12-01/",
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "us-east-1": "elasticloadbalancing-fips.us-east-1.amazonaws.com",
            "us-east-2": "elasticloadbalancing-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "elasticloadbalancing.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "elasticloadbalancing.us-gov-west-1.amazonaws.com",
            "us-west-1": "elasticloadbalancing-fips.us-west-1.amazonaws.com",
            "us-west-2": "elasticloadbalancing-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Adds the specified SSL server certificate to the certificate list for the specified HTTPS or TLS listener. If the certificate in already in the certificate list, the call is successful but the certificate is not added again. For more information, see HTTPS listeners in the Application Load Balancers Guide or TLS listeners in the Network Load Balancers Guide.
    @Sendable
    @inlinable
    public func addListenerCertificates(_ input: AddListenerCertificatesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AddListenerCertificatesOutput {
        try await self.client.execute(
            operation: "AddListenerCertificates", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds the specified SSL server certificate to the certificate list for the specified HTTPS or TLS listener. If the certificate in already in the certificate list, the call is successful but the certificate is not added again. For more information, see HTTPS listeners in the Application Load Balancers Guide or TLS listeners in the Network Load Balancers Guide.
    ///
    /// Parameters:
    ///   - certificates: The certificate to add. You can specify one certificate per call. Set CertificateArn to the certificate ARN but do not set IsDefault.
    ///   - listenerArn: The Amazon Resource Name (ARN) of the listener.
    ///   - logger: Logger use during operation
    @inlinable
    public func addListenerCertificates(
        certificates: [Certificate]? = nil,
        listenerArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AddListenerCertificatesOutput {
        let input = AddListenerCertificatesInput(
            certificates: certificates, 
            listenerArn: listenerArn
        )
        return try await self.addListenerCertificates(input, logger: logger)
    }

    /// Adds the specified tags to the specified Elastic Load Balancing resource. You can tag your Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, trust stores, listeners, and rules. Each tag consists of a key and an optional value. If a resource already has a tag with the same key, AddTags updates its value.
    @Sendable
    @inlinable
    public func addTags(_ input: AddTagsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AddTagsOutput {
        try await self.client.execute(
            operation: "AddTags", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds the specified tags to the specified Elastic Load Balancing resource. You can tag your Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, trust stores, listeners, and rules. Each tag consists of a key and an optional value. If a resource already has a tag with the same key, AddTags updates its value.
    ///
    /// Parameters:
    ///   - resourceArns: The Amazon Resource Name (ARN) of the resource.
    ///   - tags: The tags.
    ///   - logger: Logger use during operation
    @inlinable
    public func addTags(
        resourceArns: [String]? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AddTagsOutput {
        let input = AddTagsInput(
            resourceArns: resourceArns, 
            tags: tags
        )
        return try await self.addTags(input, logger: logger)
    }

    /// Adds the specified revocation file to the specified trust store.
    @Sendable
    @inlinable
    public func addTrustStoreRevocations(_ input: AddTrustStoreRevocationsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AddTrustStoreRevocationsOutput {
        try await self.client.execute(
            operation: "AddTrustStoreRevocations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds the specified revocation file to the specified trust store.
    ///
    /// Parameters:
    ///   - revocationContents: The revocation file to add.
    ///   - trustStoreArn: The Amazon Resource Name (ARN) of the trust store.
    ///   - logger: Logger use during operation
    @inlinable
    public func addTrustStoreRevocations(
        revocationContents: [RevocationContent]? = nil,
        trustStoreArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AddTrustStoreRevocationsOutput {
        let input = AddTrustStoreRevocationsInput(
            revocationContents: revocationContents, 
            trustStoreArn: trustStoreArn
        )
        return try await self.addTrustStoreRevocations(input, logger: logger)
    }

    /// Creates a listener for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. For more information, see the following:    Listeners for your Application Load Balancers     Listeners for your Network Load Balancers     Listeners for your Gateway Load Balancers    This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple listeners with the same settings, each call succeeds.
    @Sendable
    @inlinable
    public func createListener(_ input: CreateListenerInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateListenerOutput {
        try await self.client.execute(
            operation: "CreateListener", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a listener for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. For more information, see the following:    Listeners for your Application Load Balancers     Listeners for your Network Load Balancers     Listeners for your Gateway Load Balancers    This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple listeners with the same settings, each call succeeds.
    ///
    /// Parameters:
    ///   - alpnPolicy: [TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You can specify one policy name. The following are the possible values:    HTTP1Only     HTTP2Only     HTTP2Optional     HTTP2Preferred     None    For more information, see ALPN policies in the Network Load Balancers Guide.
    ///   - certificates: [HTTPS and TLS listeners] The default certificate for the listener. You must provide exactly one certificate. Set CertificateArn to the certificate ARN but do not set IsDefault.
    ///   - defaultActions: The actions for the default rule.
    ///   - loadBalancerArn: The Amazon Resource Name (ARN) of the load balancer.
    ///   - mutualAuthentication: The mutual authentication configuration information.
    ///   - port: The port on which the load balancer is listening. You can't specify a port for a Gateway Load Balancer.
    ///   - protocol: The protocol for connections from clients to the load balancer. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, and TCP_UDP. You can’t specify the UDP or TCP_UDP protocol if dual-stack mode is enabled. You can't specify a protocol for a Gateway Load Balancer.
    ///   - sslPolicy: [HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported. For more information, see Security policies in the Application Load Balancers Guide and Security policies in the Network Load Balancers Guide.
    ///   - tags: The tags to assign to the listener.
    ///   - logger: Logger use during operation
    @inlinable
    public func createListener(
        alpnPolicy: [String]? = nil,
        certificates: [Certificate]? = nil,
        defaultActions: [Action]? = nil,
        loadBalancerArn: String? = nil,
        mutualAuthentication: MutualAuthenticationAttributes? = nil,
        port: Int? = nil,
        protocol: ProtocolEnum? = nil,
        sslPolicy: String? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateListenerOutput {
        let input = CreateListenerInput(
            alpnPolicy: alpnPolicy, 
            certificates: certificates, 
            defaultActions: defaultActions, 
            loadBalancerArn: loadBalancerArn, 
            mutualAuthentication: mutualAuthentication, 
            port: port, 
            protocol: `protocol`, 
            sslPolicy: sslPolicy, 
            tags: tags
        )
        return try await self.createListener(input, logger: logger)
    }

    /// Creates an Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. For more information, see the following:    Application Load Balancers     Network Load Balancers     Gateway Load Balancers    This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple load balancers with the same settings, each call succeeds.
    @Sendable
    @inlinable
    public func createLoadBalancer(_ input: CreateLoadBalancerInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLoadBalancerOutput {
        try await self.client.execute(
            operation: "CreateLoadBalancer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. For more information, see the following:    Application Load Balancers     Network Load Balancers     Gateway Load Balancers    This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple load balancers with the same settings, each call succeeds.
    ///
    /// Parameters:
    ///   - customerOwnedIpv4Pool: [Application Load Balancers on Outposts] The ID of the customer-owned address pool (CoIP pool).
    ///   - enablePrefixForIpv6SourceNat: [Network Load Balancers with UDP listeners] Indicates whether to use an IPv6 prefix  from each subnet for source NAT. The IP address type must be dualstack.  The default value is off.
    ///   - ipAddressType: The IP address type. Internal load balancers must use ipv4. [Application Load Balancers] The possible values are ipv4 (IPv4 addresses),  dualstack (IPv4 and IPv6 addresses), and dualstack-without-public-ipv4  (public IPv6 addresses and private IPv4 and IPv6 addresses). [Network Load Balancers and Gateway Load Balancers] The possible values are ipv4  (IPv4 addresses) and dualstack (IPv4 and IPv6 addresses).
    ///   - ipamPools: [Application Load Balancers] The IPAM pools to use with the load balancer.
    ///   - name: The name of the load balancer. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, must not begin or end with a hyphen, and must not begin with "internal-".
    ///   - scheme: The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the internet. The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can route requests only from clients with access to the VPC for the load balancer. The default is an Internet-facing load balancer. You can't specify a scheme for a Gateway Load Balancer.
    ///   - securityGroups: [Application Load Balancers and Network Load Balancers] The IDs of the security groups for the load balancer.
    ///   - subnetMappings: The IDs of the subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both. [Application Load Balancers] You must specify subnets from at least two Availability Zones. You can't specify Elastic IP addresses for your subnets. [Application Load Balancers on Outposts] You must specify one Outpost subnet. [Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones. [Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6 address per subnet. [Gateway Load Balancers] You can specify subnets from one or more Availability Zones. You can't specify Elastic IP addresses for your subnets.
    ///   - subnets: The IDs of the subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both. To specify an Elastic IP address, specify subnet mappings instead of subnets. [Application Load Balancers] You must specify subnets from at least two Availability Zones. [Application Load Balancers on Outposts] You must specify one Outpost subnet. [Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones. [Network Load Balancers and Gateway Load Balancers] You can specify subnets from one or more  Availability Zones.
    ///   - tags: The tags to assign to the load balancer.
    ///   - type: The type of load balancer. The default is application.
    ///   - logger: Logger use during operation
    @inlinable
    public func createLoadBalancer(
        customerOwnedIpv4Pool: String? = nil,
        enablePrefixForIpv6SourceNat: EnablePrefixForIpv6SourceNatEnum? = nil,
        ipAddressType: IpAddressType? = nil,
        ipamPools: IpamPools? = nil,
        name: String? = nil,
        scheme: LoadBalancerSchemeEnum? = nil,
        securityGroups: [String]? = nil,
        subnetMappings: [SubnetMapping]? = nil,
        subnets: [String]? = nil,
        tags: [Tag]? = nil,
        type: LoadBalancerTypeEnum? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateLoadBalancerOutput {
        let input = CreateLoadBalancerInput(
            customerOwnedIpv4Pool: customerOwnedIpv4Pool, 
            enablePrefixForIpv6SourceNat: enablePrefixForIpv6SourceNat, 
            ipAddressType: ipAddressType, 
            ipamPools: ipamPools, 
            name: name, 
            scheme: scheme, 
            securityGroups: securityGroups, 
            subnetMappings: subnetMappings, 
            subnets: subnets, 
            tags: tags, 
            type: type
        )
        return try await self.createLoadBalancer(input, logger: logger)
    }

    /// Creates a rule for the specified listener. The listener must be associated with an Application Load Balancer. Each rule consists of a priority, one or more actions, and one or more conditions. Rules are evaluated in priority order, from the lowest value to the highest value. When the conditions for a rule are met, its actions are performed. If the conditions for no rules are met, the actions for the default rule are performed. For more information, see Listener rules in the Application Load Balancers Guide.
    @Sendable
    @inlinable
    public func createRule(_ input: CreateRuleInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateRuleOutput {
        try await self.client.execute(
            operation: "CreateRule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a rule for the specified listener. The listener must be associated with an Application Load Balancer. Each rule consists of a priority, one or more actions, and one or more conditions. Rules are evaluated in priority order, from the lowest value to the highest value. When the conditions for a rule are met, its actions are performed. If the conditions for no rules are met, the actions for the default rule are performed. For more information, see Listener rules in the Application Load Balancers Guide.
    ///
    /// Parameters:
    ///   - actions: The actions.
    ///   - conditions: The conditions.
    ///   - listenerArn: The Amazon Resource Name (ARN) of the listener.
    ///   - priority: The rule priority. A listener can't have multiple rules with the same priority.
    ///   - tags: The tags to assign to the rule.
    ///   - logger: Logger use during operation
    @inlinable
    public func createRule(
        actions: [Action]? = nil,
        conditions: [RuleCondition]? = nil,
        listenerArn: String? = nil,
        priority: Int? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateRuleOutput {
        let input = CreateRuleInput(
            actions: actions, 
            conditions: conditions, 
            listenerArn: listenerArn, 
            priority: priority, 
            tags: tags
        )
        return try await self.createRule(input, logger: logger)
    }

    /// Creates a target group. For more information, see the following:    Target groups for your Application Load Balancers     Target groups for your Network Load Balancers     Target groups for your Gateway Load Balancers    This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple target groups with the same settings, each call succeeds.
    @Sendable
    @inlinable
    public func createTargetGroup(_ input: CreateTargetGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTargetGroupOutput {
        try await self.client.execute(
            operation: "CreateTargetGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a target group. For more information, see the following:    Target groups for your Application Load Balancers     Target groups for your Network Load Balancers     Target groups for your Gateway Load Balancers    This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple target groups with the same settings, each call succeeds.
    ///
    /// Parameters:
    ///   - healthCheckEnabled: Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can be enabled. If the target type is instance, ip, or alb, health checks are always enabled and can't be disabled.
    ///   - healthCheckIntervalSeconds: The approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. If the target group protocol is TCP, TLS, UDP, TCP_UDP, HTTP or HTTPS, the default is 30 seconds.  If the target group protocol is GENEVE, the default is 10 seconds.  If the target type is lambda, the default is 35 seconds.
    ///   - healthCheckPath: [HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping path. The default is /. [GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.
    ///   - healthCheckPort: The port the load balancer uses when performing health checks on targets. If the protocol is HTTP, HTTPS, TCP, TLS, UDP, or TCP_UDP, the default is traffic-port, which is the port on which each target receives traffic from the load balancer. If the protocol is GENEVE, the default is port 80.
    ///   - healthCheckProtocol: The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.
    ///   - healthCheckTimeoutSeconds: The amount of time, in seconds, during which no response from a target means a failed  health check. The range is 2–120 seconds. For target groups with a protocol of HTTP, the  default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default  is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If  the target type is lambda, the default is 30 seconds.
    ///   - healthyThresholdCount: The number of consecutive health check successes required before considering a target healthy. The range is  2-10. If the target group protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 5. For target groups  with a protocol of GENEVE, the default is 5. If the target type  is lambda, the default is 5.
    ///   - ipAddressType: The IP address type. The default value is ipv4.
    ///   - matcher: [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful  response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range  is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target  groups with a protocol of GENEVE, the range is 200-399.
    ///   - name: The name of the target group. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
    ///   - port: The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port is 6081.
    ///   - protocol: The protocol to use for routing traffic to the targets. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, or TCP_UDP. For Gateway Load Balancers, the supported protocol is GENEVE. A TCP_UDP listener must be associated with a TCP_UDP target group. If the target is a Lambda function, this parameter does not apply.
    ///   - protocolVersion: [HTTP/HTTPS protocol] The protocol version. Specify GRPC to send requests to targets using gRPC. Specify HTTP2 to send requests to targets using HTTP/2. The default is HTTP1, which sends requests to targets using HTTP/1.1.
    ///   - tags: The tags to assign to the target group.
    ///   - targetType: The type of target that you must specify when registering targets with this target group. You can't specify targets for a target group using more than one target type.    instance - Register targets by instance ID. This is the default value.    ip - Register targets by IP address. You can specify IP addresses from the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can't specify publicly routable IP addresses.    lambda - Register a single Lambda function as a target.    alb - Register a single Application Load Balancer as a target.
    ///   - unhealthyThresholdCount: The number of consecutive health check failures required before considering a target unhealthy. The range is  2-10. If the target group protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 2. For target groups  with a protocol of GENEVE, the default is 2. If the target type  is lambda, the default is 5.
    ///   - vpcId: The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply. Otherwise, this parameter is required.
    ///   - logger: Logger use during operation
    @inlinable
    public func createTargetGroup(
        healthCheckEnabled: Bool? = nil,
        healthCheckIntervalSeconds: Int? = nil,
        healthCheckPath: String? = nil,
        healthCheckPort: String? = nil,
        healthCheckProtocol: ProtocolEnum? = nil,
        healthCheckTimeoutSeconds: Int? = nil,
        healthyThresholdCount: Int? = nil,
        ipAddressType: TargetGroupIpAddressTypeEnum? = nil,
        matcher: Matcher? = nil,
        name: String? = nil,
        port: Int? = nil,
        protocol: ProtocolEnum? = nil,
        protocolVersion: String? = nil,
        tags: [Tag]? = nil,
        targetType: TargetTypeEnum? = nil,
        unhealthyThresholdCount: Int? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateTargetGroupOutput {
        let input = CreateTargetGroupInput(
            healthCheckEnabled: healthCheckEnabled, 
            healthCheckIntervalSeconds: healthCheckIntervalSeconds, 
            healthCheckPath: healthCheckPath, 
            healthCheckPort: healthCheckPort, 
            healthCheckProtocol: healthCheckProtocol, 
            healthCheckTimeoutSeconds: healthCheckTimeoutSeconds, 
            healthyThresholdCount: healthyThresholdCount, 
            ipAddressType: ipAddressType, 
            matcher: matcher, 
            name: name, 
            port: port, 
            protocol: `protocol`, 
            protocolVersion: protocolVersion, 
            tags: tags, 
            targetType: targetType, 
            unhealthyThresholdCount: unhealthyThresholdCount, 
            vpcId: vpcId
        )
        return try await self.createTargetGroup(input, logger: logger)
    }

    /// Creates a trust store.
    @Sendable
    @inlinable
    public func createTrustStore(_ input: CreateTrustStoreInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTrustStoreOutput {
        try await self.client.execute(
            operation: "CreateTrustStore", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a trust store.
    ///
    /// Parameters:
    ///   - caCertificatesBundleS3Bucket: The Amazon S3 bucket for the ca certificates bundle.
    ///   - caCertificatesBundleS3Key: The Amazon S3 path for the ca certificates bundle.
    ///   - caCertificatesBundleS3ObjectVersion: The Amazon S3 object version for the ca certificates bundle. If undefined the current version is used.
    ///   - name: The name of the trust store. This name must be unique per region and can't be changed after creation.
    ///   - tags: The tags to assign to the trust store.
    ///   - logger: Logger use during operation
    @inlinable
    public func createTrustStore(
        caCertificatesBundleS3Bucket: String? = nil,
        caCertificatesBundleS3Key: String? = nil,
        caCertificatesBundleS3ObjectVersion: String? = nil,
        name: String? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateTrustStoreOutput {
        let input = CreateTrustStoreInput(
            caCertificatesBundleS3Bucket: caCertificatesBundleS3Bucket, 
            caCertificatesBundleS3Key: caCertificatesBundleS3Key, 
            caCertificatesBundleS3ObjectVersion: caCertificatesBundleS3ObjectVersion, 
            name: name, 
            tags: tags
        )
        return try await self.createTrustStore(input, logger: logger)
    }

    /// Deletes the specified listener. Alternatively, your listener is deleted when you delete the load balancer to which it is attached.
    @Sendable
    @inlinable
    public func deleteListener(_ input: DeleteListenerInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteListenerOutput {
        try await self.client.execute(
            operation: "DeleteListener", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified listener. Alternatively, your listener is deleted when you delete the load balancer to which it is attached.
    ///
    /// Parameters:
    ///   - listenerArn: The Amazon Resource Name (ARN) of the listener.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteListener(
        listenerArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteListenerOutput {
        let input = DeleteListenerInput(
            listenerArn: listenerArn
        )
        return try await self.deleteListener(input, logger: logger)
    }

    /// Deletes the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. Deleting a load balancer also deletes its listeners. You can't delete a load balancer if deletion protection is enabled. If the load balancer does not exist or has already been deleted, the call succeeds. Deleting a load balancer does not affect its registered targets. For example, your EC2 instances continue to run and are still registered to their target groups. If you no longer need these EC2 instances, you can stop or terminate them.
    @Sendable
    @inlinable
    public func deleteLoadBalancer(_ input: DeleteLoadBalancerInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteLoadBalancerOutput {
        try await self.client.execute(
            operation: "DeleteLoadBalancer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. Deleting a load balancer also deletes its listeners. You can't delete a load balancer if deletion protection is enabled. If the load balancer does not exist or has already been deleted, the call succeeds. Deleting a load balancer does not affect its registered targets. For example, your EC2 instances continue to run and are still registered to their target groups. If you no longer need these EC2 instances, you can stop or terminate them.
    ///
    /// Parameters:
    ///   - loadBalancerArn: The Amazon Resource Name (ARN) of the load balancer.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteLoadBalancer(
        loadBalancerArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteLoadBalancerOutput {
        let input = DeleteLoadBalancerInput(
            loadBalancerArn: loadBalancerArn
        )
        return try await self.deleteLoadBalancer(input, logger: logger)
    }

    /// Deletes the specified rule. You can't delete the default rule.
    @Sendable
    @inlinable
    public func deleteRule(_ input: DeleteRuleInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteRuleOutput {
        try await self.client.execute(
            operation: "DeleteRule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified rule. You can't delete the default rule.
    ///
    /// Parameters:
    ///   - ruleArn: The Amazon Resource Name (ARN) of the rule.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteRule(
        ruleArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteRuleOutput {
        let input = DeleteRuleInput(
            ruleArn: ruleArn
        )
        return try await self.deleteRule(input, logger: logger)
    }

    /// Deletes a shared trust store association.
    @Sendable
    @inlinable
    public func deleteSharedTrustStoreAssociation(_ input: DeleteSharedTrustStoreAssociationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteSharedTrustStoreAssociationOutput {
        try await self.client.execute(
            operation: "DeleteSharedTrustStoreAssociation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a shared trust store association.
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Name (ARN) of the resource.
    ///   - trustStoreArn: The Amazon Resource Name (ARN) of the trust store.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteSharedTrustStoreAssociation(
        resourceArn: String? = nil,
        trustStoreArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteSharedTrustStoreAssociationOutput {
        let input = DeleteSharedTrustStoreAssociationInput(
            resourceArn: resourceArn, 
            trustStoreArn: trustStoreArn
        )
        return try await self.deleteSharedTrustStoreAssociation(input, logger: logger)
    }

    /// Deletes the specified target group. You can delete a target group if it is not referenced by any actions. Deleting a target group also deletes any associated health checks. Deleting a target group does not affect its registered targets. For example, any EC2 instances continue to run until you stop or terminate them.
    @Sendable
    @inlinable
    public func deleteTargetGroup(_ input: DeleteTargetGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTargetGroupOutput {
        try await self.client.execute(
            operation: "DeleteTargetGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified target group. You can delete a target group if it is not referenced by any actions. Deleting a target group also deletes any associated health checks. Deleting a target group does not affect its registered targets. For example, any EC2 instances continue to run until you stop or terminate them.
    ///
    /// Parameters:
    ///   - targetGroupArn: The Amazon Resource Name (ARN) of the target group.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTargetGroup(
        targetGroupArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteTargetGroupOutput {
        let input = DeleteTargetGroupInput(
            targetGroupArn: targetGroupArn
        )
        return try await self.deleteTargetGroup(input, logger: logger)
    }

    /// Deletes a trust store.
    @Sendable
    @inlinable
    public func deleteTrustStore(_ input: DeleteTrustStoreInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTrustStoreOutput {
        try await self.client.execute(
            operation: "DeleteTrustStore", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a trust store.
    ///
    /// Parameters:
    ///   - trustStoreArn: The Amazon Resource Name (ARN) of the trust store.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTrustStore(
        trustStoreArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteTrustStoreOutput {
        let input = DeleteTrustStoreInput(
            trustStoreArn: trustStoreArn
        )
        return try await self.deleteTrustStore(input, logger: logger)
    }

    /// Deregisters the specified targets from the specified target group. After the targets are deregistered, they no longer receive traffic from the load balancer. The load balancer stops sending requests to targets that are deregistering, but uses  connection draining to ensure that in-flight traffic completes on the existing connections.  This deregistration delay is configured by default but can be updated for each target group. For more information, see the following:     Deregistration delay in the Application Load Balancers User Guide      Deregistration delay in the Network Load Balancers User Guide      Deregistration delay in the Gateway Load Balancers User Guide    Note: If the specified target does not exist, the action returns successfully.
    @Sendable
    @inlinable
    public func deregisterTargets(_ input: DeregisterTargetsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeregisterTargetsOutput {
        try await self.client.execute(
            operation: "DeregisterTargets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deregisters the specified targets from the specified target group. After the targets are deregistered, they no longer receive traffic from the load balancer. The load balancer stops sending requests to targets that are deregistering, but uses  connection draining to ensure that in-flight traffic completes on the existing connections.  This deregistration delay is configured by default but can be updated for each target group. For more information, see the following:     Deregistration delay in the Application Load Balancers User Guide      Deregistration delay in the Network Load Balancers User Guide      Deregistration delay in the Gateway Load Balancers User Guide    Note: If the specified target does not exist, the action returns successfully.
    ///
    /// Parameters:
    ///   - targetGroupArn: The Amazon Resource Name (ARN) of the target group.
    ///   - targets: The targets. If you specified a port override when you registered a target, you must specify both the target ID and the port when you deregister it.
    ///   - logger: Logger use during operation
    @inlinable
    public func deregisterTargets(
        targetGroupArn: String? = nil,
        targets: [TargetDescription]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeregisterTargetsOutput {
        let input = DeregisterTargetsInput(
            targetGroupArn: targetGroupArn, 
            targets: targets
        )
        return try await self.deregisterTargets(input, logger: logger)
    }

    /// Describes the current Elastic Load Balancing resource limits for your Amazon Web Services account. For more information, see the following:    Quotas for your Application Load Balancers     Quotas for your Network Load Balancers     Quotas for your Gateway Load Balancers
    @Sendable
    @inlinable
    public func describeAccountLimits(_ input: DescribeAccountLimitsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAccountLimitsOutput {
        try await self.client.execute(
            operation: "DescribeAccountLimits", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the current Elastic Load Balancing resource limits for your Amazon Web Services account. For more information, see the following:    Quotas for your Application Load Balancers     Quotas for your Network Load Balancers     Quotas for your Gateway Load Balancers
    ///
    /// Parameters:
    ///   - marker: The marker for the next set of results. (You received this marker from a previous call.)
    ///   - pageSize: The maximum number of results to return with this call.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAccountLimits(
        marker: String? = nil,
        pageSize: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAccountLimitsOutput {
        let input = DescribeAccountLimitsInput(
            marker: marker, 
            pageSize: pageSize
        )
        return try await self.describeAccountLimits(input, logger: logger)
    }

    /// Describes the capacity reservation status for the specified load balancer.
    @Sendable
    @inlinable
    public func describeCapacityReservation(_ input: DescribeCapacityReservationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeCapacityReservationOutput {
        try await self.client.execute(
            operation: "DescribeCapacityReservation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the capacity reservation status for the specified load balancer.
    ///
    /// Parameters:
    ///   - loadBalancerArn: The Amazon Resource Name (ARN) of the load balancer.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeCapacityReservation(
        loadBalancerArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeCapacityReservationOutput {
        let input = DescribeCapacityReservationInput(
            loadBalancerArn: loadBalancerArn
        )
        return try await self.describeCapacityReservation(input, logger: logger)
    }

    /// Describes the attributes for the specified listener.
    @Sendable
    @inlinable
    public func describeListenerAttributes(_ input: DescribeListenerAttributesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeListenerAttributesOutput {
        try await self.client.execute(
            operation: "DescribeListenerAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the attributes for the specified listener.
    ///
    /// Parameters:
    ///   - listenerArn: The Amazon Resource Name (ARN) of the listener.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeListenerAttributes(
        listenerArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeListenerAttributesOutput {
        let input = DescribeListenerAttributesInput(
            listenerArn: listenerArn
        )
        return try await self.describeListenerAttributes(input, logger: logger)
    }

    /// Describes the default certificate and the certificate list for the specified HTTPS or TLS listener. If the default certificate is also in the certificate list, it appears twice in the results (once with IsDefault set to true and once with IsDefault set to false). For more information, see SSL certificates in the Application Load Balancers Guide or Server certificates in the Network Load Balancers Guide.
    @Sendable
    @inlinable
    public func describeListenerCertificates(_ input: DescribeListenerCertificatesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeListenerCertificatesOutput {
        try await self.client.execute(
            operation: "DescribeListenerCertificates", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the default certificate and the certificate list for the specified HTTPS or TLS listener. If the default certificate is also in the certificate list, it appears twice in the results (once with IsDefault set to true and once with IsDefault set to false). For more information, see SSL certificates in the Application Load Balancers Guide or Server certificates in the Network Load Balancers Guide.
    ///
    /// Parameters:
    ///   - listenerArn: The Amazon Resource Names (ARN) of the listener.
    ///   - marker: The marker for the next set of results. (You received this marker from a previous call.)
    ///   - pageSize: The maximum number of results to return with this call.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeListenerCertificates(
        listenerArn: String? = nil,
        marker: String? = nil,
        pageSize: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeListenerCertificatesOutput {
        let input = DescribeListenerCertificatesInput(
            listenerArn: listenerArn, 
            marker: marker, 
            pageSize: pageSize
        )
        return try await self.describeListenerCertificates(input, logger: logger)
    }

    /// Describes the specified listeners or the listeners for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. You must specify either a load balancer or one or more listeners.
    @Sendable
    @inlinable
    public func describeListeners(_ input: DescribeListenersInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeListenersOutput {
        try await self.client.execute(
            operation: "DescribeListeners", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified listeners or the listeners for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. You must specify either a load balancer or one or more listeners.
    ///
    /// Parameters:
    ///   - listenerArns: The Amazon Resource Names (ARN) of the listeners.
    ///   - loadBalancerArn: The Amazon Resource Name (ARN) of the load balancer.
    ///   - marker: The marker for the next set of results. (You received this marker from a previous call.)
    ///   - pageSize: The maximum number of results to return with this call.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeListeners(
        listenerArns: [String]? = nil,
        loadBalancerArn: String? = nil,
        marker: String? = nil,
        pageSize: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeListenersOutput {
        let input = DescribeListenersInput(
            listenerArns: listenerArns, 
            loadBalancerArn: loadBalancerArn, 
            marker: marker, 
            pageSize: pageSize
        )
        return try await self.describeListeners(input, logger: logger)
    }

    /// Describes the attributes for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. For more information, see the following:    Load balancer attributes in the Application Load Balancers Guide     Load balancer attributes in the Network Load Balancers Guide     Load balancer attributes in the Gateway Load Balancers Guide
    @Sendable
    @inlinable
    public func describeLoadBalancerAttributes(_ input: DescribeLoadBalancerAttributesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeLoadBalancerAttributesOutput {
        try await self.client.execute(
            operation: "DescribeLoadBalancerAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the attributes for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. For more information, see the following:    Load balancer attributes in the Application Load Balancers Guide     Load balancer attributes in the Network Load Balancers Guide     Load balancer attributes in the Gateway Load Balancers Guide
    ///
    /// Parameters:
    ///   - loadBalancerArn: The Amazon Resource Name (ARN) of the load balancer.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeLoadBalancerAttributes(
        loadBalancerArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeLoadBalancerAttributesOutput {
        let input = DescribeLoadBalancerAttributesInput(
            loadBalancerArn: loadBalancerArn
        )
        return try await self.describeLoadBalancerAttributes(input, logger: logger)
    }

    /// Describes the specified load balancers or all of your load balancers.
    @Sendable
    @inlinable
    public func describeLoadBalancers(_ input: DescribeLoadBalancersInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeLoadBalancersOutput {
        try await self.client.execute(
            operation: "DescribeLoadBalancers", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified load balancers or all of your load balancers.
    ///
    /// Parameters:
    ///   - loadBalancerArns: The Amazon Resource Names (ARN) of the load balancers. You can specify up to 20 load balancers in a single call.
    ///   - marker: The marker for the next set of results. (You received this marker from a previous call.)
    ///   - names: The names of the load balancers.
    ///   - pageSize: The maximum number of results to return with this call.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeLoadBalancers(
        loadBalancerArns: [String]? = nil,
        marker: String? = nil,
        names: [String]? = nil,
        pageSize: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeLoadBalancersOutput {
        let input = DescribeLoadBalancersInput(
            loadBalancerArns: loadBalancerArns, 
            marker: marker, 
            names: names, 
            pageSize: pageSize
        )
        return try await self.describeLoadBalancers(input, logger: logger)
    }

    /// Describes the specified rules or the rules for the specified listener. You must specify either a listener or one or more rules.
    @Sendable
    @inlinable
    public func describeRules(_ input: DescribeRulesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeRulesOutput {
        try await self.client.execute(
            operation: "DescribeRules", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified rules or the rules for the specified listener. You must specify either a listener or one or more rules.
    ///
    /// Parameters:
    ///   - listenerArn: The Amazon Resource Name (ARN) of the listener.
    ///   - marker: The marker for the next set of results. (You received this marker from a previous call.)
    ///   - pageSize: The maximum number of results to return with this call.
    ///   - ruleArns: The Amazon Resource Names (ARN) of the rules.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeRules(
        listenerArn: String? = nil,
        marker: String? = nil,
        pageSize: Int? = nil,
        ruleArns: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeRulesOutput {
        let input = DescribeRulesInput(
            listenerArn: listenerArn, 
            marker: marker, 
            pageSize: pageSize, 
            ruleArns: ruleArns
        )
        return try await self.describeRules(input, logger: logger)
    }

    /// Describes the specified policies or all policies used for SSL negotiation. For more information, see Security policies in the Application Load Balancers Guide or Security policies in the Network Load Balancers Guide.
    @Sendable
    @inlinable
    public func describeSSLPolicies(_ input: DescribeSSLPoliciesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSSLPoliciesOutput {
        try await self.client.execute(
            operation: "DescribeSSLPolicies", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified policies or all policies used for SSL negotiation. For more information, see Security policies in the Application Load Balancers Guide or Security policies in the Network Load Balancers Guide.
    ///
    /// Parameters:
    ///   - loadBalancerType:  The type of load balancer. The default lists the SSL policies for all load balancers.
    ///   - marker: The marker for the next set of results. (You received this marker from a previous call.)
    ///   - names: The names of the policies.
    ///   - pageSize: The maximum number of results to return with this call.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeSSLPolicies(
        loadBalancerType: LoadBalancerTypeEnum? = nil,
        marker: String? = nil,
        names: [String]? = nil,
        pageSize: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeSSLPoliciesOutput {
        let input = DescribeSSLPoliciesInput(
            loadBalancerType: loadBalancerType, 
            marker: marker, 
            names: names, 
            pageSize: pageSize
        )
        return try await self.describeSSLPolicies(input, logger: logger)
    }

    /// Describes the tags for the specified Elastic Load Balancing resources. You can describe the tags for one or more Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, or rules.
    @Sendable
    @inlinable
    public func describeTags(_ input: DescribeTagsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTagsOutput {
        try await self.client.execute(
            operation: "DescribeTags", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the tags for the specified Elastic Load Balancing resources. You can describe the tags for one or more Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, or rules.
    ///
    /// Parameters:
    ///   - resourceArns: The Amazon Resource Names (ARN) of the resources. You can specify up to 20 resources in a single call.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTags(
        resourceArns: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTagsOutput {
        let input = DescribeTagsInput(
            resourceArns: resourceArns
        )
        return try await self.describeTags(input, logger: logger)
    }

    /// Describes the attributes for the specified target group. For more information, see the following:    Target group attributes in the Application Load Balancers Guide     Target group attributes in the Network Load Balancers Guide     Target group attributes in the Gateway Load Balancers Guide
    @Sendable
    @inlinable
    public func describeTargetGroupAttributes(_ input: DescribeTargetGroupAttributesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTargetGroupAttributesOutput {
        try await self.client.execute(
            operation: "DescribeTargetGroupAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the attributes for the specified target group. For more information, see the following:    Target group attributes in the Application Load Balancers Guide     Target group attributes in the Network Load Balancers Guide     Target group attributes in the Gateway Load Balancers Guide
    ///
    /// Parameters:
    ///   - targetGroupArn: The Amazon Resource Name (ARN) of the target group.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTargetGroupAttributes(
        targetGroupArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTargetGroupAttributesOutput {
        let input = DescribeTargetGroupAttributesInput(
            targetGroupArn: targetGroupArn
        )
        return try await self.describeTargetGroupAttributes(input, logger: logger)
    }

    /// Describes the specified target groups or all of your target groups. By default, all target groups are described. Alternatively, you can specify one of the following to filter the results: the ARN of the load balancer, the names of one or more target groups, or the ARNs of one or more target groups.
    @Sendable
    @inlinable
    public func describeTargetGroups(_ input: DescribeTargetGroupsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTargetGroupsOutput {
        try await self.client.execute(
            operation: "DescribeTargetGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified target groups or all of your target groups. By default, all target groups are described. Alternatively, you can specify one of the following to filter the results: the ARN of the load balancer, the names of one or more target groups, or the ARNs of one or more target groups.
    ///
    /// Parameters:
    ///   - loadBalancerArn: The Amazon Resource Name (ARN) of the load balancer.
    ///   - marker: The marker for the next set of results. (You received this marker from a previous call.)
    ///   - names: The names of the target groups.
    ///   - pageSize: The maximum number of results to return with this call.
    ///   - targetGroupArns: The Amazon Resource Names (ARN) of the target groups.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTargetGroups(
        loadBalancerArn: String? = nil,
        marker: String? = nil,
        names: [String]? = nil,
        pageSize: Int? = nil,
        targetGroupArns: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTargetGroupsOutput {
        let input = DescribeTargetGroupsInput(
            loadBalancerArn: loadBalancerArn, 
            marker: marker, 
            names: names, 
            pageSize: pageSize, 
            targetGroupArns: targetGroupArns
        )
        return try await self.describeTargetGroups(input, logger: logger)
    }

    /// Describes the health of the specified targets or all of your targets.
    @Sendable
    @inlinable
    public func describeTargetHealth(_ input: DescribeTargetHealthInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTargetHealthOutput {
        try await self.client.execute(
            operation: "DescribeTargetHealth", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the health of the specified targets or all of your targets.
    ///
    /// Parameters:
    ///   - include: Used to include anomaly detection information.
    ///   - targetGroupArn: The Amazon Resource Name (ARN) of the target group.
    ///   - targets: The targets.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTargetHealth(
        include: [DescribeTargetHealthInputIncludeEnum]? = nil,
        targetGroupArn: String? = nil,
        targets: [TargetDescription]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTargetHealthOutput {
        let input = DescribeTargetHealthInput(
            include: include, 
            targetGroupArn: targetGroupArn, 
            targets: targets
        )
        return try await self.describeTargetHealth(input, logger: logger)
    }

    /// Describes all resources associated with the specified trust store.
    @Sendable
    @inlinable
    public func describeTrustStoreAssociations(_ input: DescribeTrustStoreAssociationsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTrustStoreAssociationsOutput {
        try await self.client.execute(
            operation: "DescribeTrustStoreAssociations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes all resources associated with the specified trust store.
    ///
    /// Parameters:
    ///   - marker: The marker for the next set of results. (You received this marker from a previous call.)
    ///   - pageSize: The maximum number of results to return with this call.
    ///   - trustStoreArn: The Amazon Resource Name (ARN) of the trust store.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTrustStoreAssociations(
        marker: String? = nil,
        pageSize: Int? = nil,
        trustStoreArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTrustStoreAssociationsOutput {
        let input = DescribeTrustStoreAssociationsInput(
            marker: marker, 
            pageSize: pageSize, 
            trustStoreArn: trustStoreArn
        )
        return try await self.describeTrustStoreAssociations(input, logger: logger)
    }

    /// Describes the revocation files in use by the specified trust store or revocation files.
    @Sendable
    @inlinable
    public func describeTrustStoreRevocations(_ input: DescribeTrustStoreRevocationsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTrustStoreRevocationsOutput {
        try await self.client.execute(
            operation: "DescribeTrustStoreRevocations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the revocation files in use by the specified trust store or revocation files.
    ///
    /// Parameters:
    ///   - marker: The marker for the next set of results. (You received this marker from a previous call.)
    ///   - pageSize: The maximum number of results to return with this call.
    ///   - revocationIds: The revocation IDs of the revocation files you want to describe.
    ///   - trustStoreArn: The Amazon Resource Name (ARN) of the trust store.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTrustStoreRevocations(
        marker: String? = nil,
        pageSize: Int? = nil,
        revocationIds: [Int64]? = nil,
        trustStoreArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTrustStoreRevocationsOutput {
        let input = DescribeTrustStoreRevocationsInput(
            marker: marker, 
            pageSize: pageSize, 
            revocationIds: revocationIds, 
            trustStoreArn: trustStoreArn
        )
        return try await self.describeTrustStoreRevocations(input, logger: logger)
    }

    /// Describes all trust stores for the specified account.
    @Sendable
    @inlinable
    public func describeTrustStores(_ input: DescribeTrustStoresInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTrustStoresOutput {
        try await self.client.execute(
            operation: "DescribeTrustStores", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes all trust stores for the specified account.
    ///
    /// Parameters:
    ///   - marker: The marker for the next set of results. (You received this marker from a previous call.)
    ///   - names: The names of the trust stores.
    ///   - pageSize: The maximum number of results to return with this call.
    ///   - trustStoreArns: The Amazon Resource Name (ARN) of the trust store.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTrustStores(
        marker: String? = nil,
        names: [String]? = nil,
        pageSize: Int? = nil,
        trustStoreArns: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTrustStoresOutput {
        let input = DescribeTrustStoresInput(
            marker: marker, 
            names: names, 
            pageSize: pageSize, 
            trustStoreArns: trustStoreArns
        )
        return try await self.describeTrustStores(input, logger: logger)
    }

    /// Retrieves the resource policy for a specified resource.
    @Sendable
    @inlinable
    public func getResourcePolicy(_ input: GetResourcePolicyInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetResourcePolicyOutput {
        try await self.client.execute(
            operation: "GetResourcePolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the resource policy for a specified resource.
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Name (ARN) of the resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func getResourcePolicy(
        resourceArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetResourcePolicyOutput {
        let input = GetResourcePolicyInput(
            resourceArn: resourceArn
        )
        return try await self.getResourcePolicy(input, logger: logger)
    }

    /// Retrieves the ca certificate bundle. This action returns a pre-signed S3 URI which is  active for ten minutes.
    @Sendable
    @inlinable
    public func getTrustStoreCaCertificatesBundle(_ input: GetTrustStoreCaCertificatesBundleInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTrustStoreCaCertificatesBundleOutput {
        try await self.client.execute(
            operation: "GetTrustStoreCaCertificatesBundle", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the ca certificate bundle. This action returns a pre-signed S3 URI which is  active for ten minutes.
    ///
    /// Parameters:
    ///   - trustStoreArn: The Amazon Resource Name (ARN) of the trust store.
    ///   - logger: Logger use during operation
    @inlinable
    public func getTrustStoreCaCertificatesBundle(
        trustStoreArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetTrustStoreCaCertificatesBundleOutput {
        let input = GetTrustStoreCaCertificatesBundleInput(
            trustStoreArn: trustStoreArn
        )
        return try await self.getTrustStoreCaCertificatesBundle(input, logger: logger)
    }

    /// Retrieves the specified revocation file. This action returns a pre-signed S3 URI which is  active for ten minutes.
    @Sendable
    @inlinable
    public func getTrustStoreRevocationContent(_ input: GetTrustStoreRevocationContentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTrustStoreRevocationContentOutput {
        try await self.client.execute(
            operation: "GetTrustStoreRevocationContent", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the specified revocation file. This action returns a pre-signed S3 URI which is  active for ten minutes.
    ///
    /// Parameters:
    ///   - revocationId: The revocation ID of the revocation file.
    ///   - trustStoreArn: The Amazon Resource Name (ARN) of the trust store.
    ///   - logger: Logger use during operation
    @inlinable
    public func getTrustStoreRevocationContent(
        revocationId: Int64? = nil,
        trustStoreArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetTrustStoreRevocationContentOutput {
        let input = GetTrustStoreRevocationContentInput(
            revocationId: revocationId, 
            trustStoreArn: trustStoreArn
        )
        return try await self.getTrustStoreRevocationContent(input, logger: logger)
    }

    /// Modifies the capacity reservation of the specified load balancer. When modifying capacity reservation, you must include at least one MinimumLoadBalancerCapacity  or ResetCapacityReservation.
    @Sendable
    @inlinable
    public func modifyCapacityReservation(_ input: ModifyCapacityReservationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyCapacityReservationOutput {
        try await self.client.execute(
            operation: "ModifyCapacityReservation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the capacity reservation of the specified load balancer. When modifying capacity reservation, you must include at least one MinimumLoadBalancerCapacity  or ResetCapacityReservation.
    ///
    /// Parameters:
    ///   - loadBalancerArn: The Amazon Resource Name (ARN) of the load balancer.
    ///   - minimumLoadBalancerCapacity: The minimum load balancer capacity reserved.
    ///   - resetCapacityReservation: Resets the capacity reservation.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyCapacityReservation(
        loadBalancerArn: String? = nil,
        minimumLoadBalancerCapacity: MinimumLoadBalancerCapacity? = nil,
        resetCapacityReservation: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyCapacityReservationOutput {
        let input = ModifyCapacityReservationInput(
            loadBalancerArn: loadBalancerArn, 
            minimumLoadBalancerCapacity: minimumLoadBalancerCapacity, 
            resetCapacityReservation: resetCapacityReservation
        )
        return try await self.modifyCapacityReservation(input, logger: logger)
    }

    /// [Application Load Balancers] Modify the IP pool associated to a load balancer.
    @Sendable
    @inlinable
    public func modifyIpPools(_ input: ModifyIpPoolsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyIpPoolsOutput {
        try await self.client.execute(
            operation: "ModifyIpPools", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// [Application Load Balancers] Modify the IP pool associated to a load balancer.
    ///
    /// Parameters:
    ///   - ipamPools: The IPAM pools to be modified.
    ///   - loadBalancerArn: The Amazon Resource Name (ARN) of the load balancer.
    ///   - removeIpamPools: Remove the IP pools in use by the load balancer.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyIpPools(
        ipamPools: IpamPools? = nil,
        loadBalancerArn: String? = nil,
        removeIpamPools: [RemoveIpamPoolEnum]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyIpPoolsOutput {
        let input = ModifyIpPoolsInput(
            ipamPools: ipamPools, 
            loadBalancerArn: loadBalancerArn, 
            removeIpamPools: removeIpamPools
        )
        return try await self.modifyIpPools(input, logger: logger)
    }

    /// Replaces the specified properties of the specified listener. Any properties that you do not specify remain unchanged. Changing the protocol from HTTPS to HTTP, or from TLS to TCP, removes the security policy and default certificate properties. If you change the protocol from HTTP to HTTPS, or from TCP to TLS, you must add the security policy and default certificate properties. To add an item to a list, remove an item from a list, or update an item in a list, you must provide the entire list. For example, to add an action, specify a list with the current actions plus the new action.
    @Sendable
    @inlinable
    public func modifyListener(_ input: ModifyListenerInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyListenerOutput {
        try await self.client.execute(
            operation: "ModifyListener", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Replaces the specified properties of the specified listener. Any properties that you do not specify remain unchanged. Changing the protocol from HTTPS to HTTP, or from TLS to TCP, removes the security policy and default certificate properties. If you change the protocol from HTTP to HTTPS, or from TCP to TLS, you must add the security policy and default certificate properties. To add an item to a list, remove an item from a list, or update an item in a list, you must provide the entire list. For example, to add an action, specify a list with the current actions plus the new action.
    ///
    /// Parameters:
    ///   - alpnPolicy: [TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You can specify one policy name. The following are the possible values:    HTTP1Only     HTTP2Only     HTTP2Optional     HTTP2Preferred     None    For more information, see ALPN policies in the Network Load Balancers Guide.
    ///   - certificates: [HTTPS and TLS listeners] The default certificate for the listener. You must provide exactly one certificate. Set CertificateArn to the certificate ARN but do not set IsDefault.
    ///   - defaultActions: The actions for the default rule.
    ///   - listenerArn: The Amazon Resource Name (ARN) of the listener.
    ///   - mutualAuthentication: The mutual authentication configuration information.
    ///   - port: The port for connections from clients to the load balancer. You can't specify a port for a Gateway Load Balancer.
    ///   - protocol: The protocol for connections from clients to the load balancer. Application Load Balancers support the HTTP and HTTPS protocols. Network Load Balancers support the TCP, TLS, UDP, and TCP_UDP protocols. You can’t change the protocol to UDP or TCP_UDP if dual-stack mode is enabled. You can't specify a protocol for a Gateway Load Balancer.
    ///   - sslPolicy: [HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported. For more information, see Security policies in the Application Load Balancers Guide or Security policies in the Network Load Balancers Guide.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyListener(
        alpnPolicy: [String]? = nil,
        certificates: [Certificate]? = nil,
        defaultActions: [Action]? = nil,
        listenerArn: String? = nil,
        mutualAuthentication: MutualAuthenticationAttributes? = nil,
        port: Int? = nil,
        protocol: ProtocolEnum? = nil,
        sslPolicy: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyListenerOutput {
        let input = ModifyListenerInput(
            alpnPolicy: alpnPolicy, 
            certificates: certificates, 
            defaultActions: defaultActions, 
            listenerArn: listenerArn, 
            mutualAuthentication: mutualAuthentication, 
            port: port, 
            protocol: `protocol`, 
            sslPolicy: sslPolicy
        )
        return try await self.modifyListener(input, logger: logger)
    }

    /// Modifies the specified attributes of the specified listener.
    @Sendable
    @inlinable
    public func modifyListenerAttributes(_ input: ModifyListenerAttributesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyListenerAttributesOutput {
        try await self.client.execute(
            operation: "ModifyListenerAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the specified attributes of the specified listener.
    ///
    /// Parameters:
    ///   - attributes: The listener attributes.
    ///   - listenerArn: The Amazon Resource Name (ARN) of the listener.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyListenerAttributes(
        attributes: [ListenerAttribute]? = nil,
        listenerArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyListenerAttributesOutput {
        let input = ModifyListenerAttributesInput(
            attributes: attributes, 
            listenerArn: listenerArn
        )
        return try await self.modifyListenerAttributes(input, logger: logger)
    }

    /// Modifies the specified attributes of the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. If any of the specified attributes can't be modified as requested, the call fails. Any existing attributes that you do not modify retain their current values.
    @Sendable
    @inlinable
    public func modifyLoadBalancerAttributes(_ input: ModifyLoadBalancerAttributesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyLoadBalancerAttributesOutput {
        try await self.client.execute(
            operation: "ModifyLoadBalancerAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the specified attributes of the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. If any of the specified attributes can't be modified as requested, the call fails. Any existing attributes that you do not modify retain their current values.
    ///
    /// Parameters:
    ///   - attributes: The load balancer attributes.
    ///   - loadBalancerArn: The Amazon Resource Name (ARN) of the load balancer.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyLoadBalancerAttributes(
        attributes: [LoadBalancerAttribute]? = nil,
        loadBalancerArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyLoadBalancerAttributesOutput {
        let input = ModifyLoadBalancerAttributesInput(
            attributes: attributes, 
            loadBalancerArn: loadBalancerArn
        )
        return try await self.modifyLoadBalancerAttributes(input, logger: logger)
    }

    /// Replaces the specified properties of the specified rule. Any properties that you do not specify are unchanged. To add an item to a list, remove an item from a list, or update an item in a list, you must provide the entire list. For example, to add an action, specify a list with the current actions plus the new action.
    @Sendable
    @inlinable
    public func modifyRule(_ input: ModifyRuleInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyRuleOutput {
        try await self.client.execute(
            operation: "ModifyRule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Replaces the specified properties of the specified rule. Any properties that you do not specify are unchanged. To add an item to a list, remove an item from a list, or update an item in a list, you must provide the entire list. For example, to add an action, specify a list with the current actions plus the new action.
    ///
    /// Parameters:
    ///   - actions: The actions.
    ///   - conditions: The conditions.
    ///   - ruleArn: The Amazon Resource Name (ARN) of the rule.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyRule(
        actions: [Action]? = nil,
        conditions: [RuleCondition]? = nil,
        ruleArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyRuleOutput {
        let input = ModifyRuleInput(
            actions: actions, 
            conditions: conditions, 
            ruleArn: ruleArn
        )
        return try await self.modifyRule(input, logger: logger)
    }

    /// Modifies the health checks used when evaluating the health state of the targets in the specified target group.
    @Sendable
    @inlinable
    public func modifyTargetGroup(_ input: ModifyTargetGroupInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyTargetGroupOutput {
        try await self.client.execute(
            operation: "ModifyTargetGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the health checks used when evaluating the health state of the targets in the specified target group.
    ///
    /// Parameters:
    ///   - healthCheckEnabled: Indicates whether health checks are enabled.
    ///   - healthCheckIntervalSeconds: The approximate amount of time, in seconds, between health checks of an individual target.
    ///   - healthCheckPath: [HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping path. The default is /. [GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.
    ///   - healthCheckPort: The port the load balancer uses when performing health checks on targets.
    ///   - healthCheckProtocol: The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. It is supported for health checks only if the protocol of the target group is TCP, TLS, UDP, or TCP_UDP. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.
    ///   - healthCheckTimeoutSeconds: [HTTP/HTTPS health checks] The amount of time, in seconds, during which no response means a failed health check.
    ///   - healthyThresholdCount: The number of consecutive health checks successes required before considering an unhealthy target healthy.
    ///   - matcher: [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful  response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range  is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target  groups with a protocol of GENEVE, the range is 200-399.
    ///   - targetGroupArn: The Amazon Resource Name (ARN) of the target group.
    ///   - unhealthyThresholdCount: The number of consecutive health check failures required before considering the target unhealthy.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyTargetGroup(
        healthCheckEnabled: Bool? = nil,
        healthCheckIntervalSeconds: Int? = nil,
        healthCheckPath: String? = nil,
        healthCheckPort: String? = nil,
        healthCheckProtocol: ProtocolEnum? = nil,
        healthCheckTimeoutSeconds: Int? = nil,
        healthyThresholdCount: Int? = nil,
        matcher: Matcher? = nil,
        targetGroupArn: String? = nil,
        unhealthyThresholdCount: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyTargetGroupOutput {
        let input = ModifyTargetGroupInput(
            healthCheckEnabled: healthCheckEnabled, 
            healthCheckIntervalSeconds: healthCheckIntervalSeconds, 
            healthCheckPath: healthCheckPath, 
            healthCheckPort: healthCheckPort, 
            healthCheckProtocol: healthCheckProtocol, 
            healthCheckTimeoutSeconds: healthCheckTimeoutSeconds, 
            healthyThresholdCount: healthyThresholdCount, 
            matcher: matcher, 
            targetGroupArn: targetGroupArn, 
            unhealthyThresholdCount: unhealthyThresholdCount
        )
        return try await self.modifyTargetGroup(input, logger: logger)
    }

    /// Modifies the specified attributes of the specified target group.
    @Sendable
    @inlinable
    public func modifyTargetGroupAttributes(_ input: ModifyTargetGroupAttributesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyTargetGroupAttributesOutput {
        try await self.client.execute(
            operation: "ModifyTargetGroupAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the specified attributes of the specified target group.
    ///
    /// Parameters:
    ///   - attributes: The target group attributes.
    ///   - targetGroupArn: The Amazon Resource Name (ARN) of the target group.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyTargetGroupAttributes(
        attributes: [TargetGroupAttribute]? = nil,
        targetGroupArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyTargetGroupAttributesOutput {
        let input = ModifyTargetGroupAttributesInput(
            attributes: attributes, 
            targetGroupArn: targetGroupArn
        )
        return try await self.modifyTargetGroupAttributes(input, logger: logger)
    }

    /// Update the ca certificate bundle for the specified trust store.
    @Sendable
    @inlinable
    public func modifyTrustStore(_ input: ModifyTrustStoreInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyTrustStoreOutput {
        try await self.client.execute(
            operation: "ModifyTrustStore", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Update the ca certificate bundle for the specified trust store.
    ///
    /// Parameters:
    ///   - caCertificatesBundleS3Bucket: The Amazon S3 bucket for the ca certificates bundle.
    ///   - caCertificatesBundleS3Key: The Amazon S3 path for the ca certificates bundle.
    ///   - caCertificatesBundleS3ObjectVersion: The Amazon S3 object version for the ca certificates bundle. If undefined the current version is used.
    ///   - trustStoreArn: The Amazon Resource Name (ARN) of the trust store.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyTrustStore(
        caCertificatesBundleS3Bucket: String? = nil,
        caCertificatesBundleS3Key: String? = nil,
        caCertificatesBundleS3ObjectVersion: String? = nil,
        trustStoreArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyTrustStoreOutput {
        let input = ModifyTrustStoreInput(
            caCertificatesBundleS3Bucket: caCertificatesBundleS3Bucket, 
            caCertificatesBundleS3Key: caCertificatesBundleS3Key, 
            caCertificatesBundleS3ObjectVersion: caCertificatesBundleS3ObjectVersion, 
            trustStoreArn: trustStoreArn
        )
        return try await self.modifyTrustStore(input, logger: logger)
    }

    /// Registers the specified targets with the specified target group. If the target is an EC2 instance, it must be in the running state when you register it. By default, the load balancer routes requests to registered targets using the protocol and port for the target group. Alternatively, you can override the port for a target when you register it. You can register each EC2 instance or IP address with the same target group multiple times using different ports. With a Network Load Balancer, you can't register instances by instance ID if they have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1. You can register instances of these types by IP address.
    @Sendable
    @inlinable
    public func registerTargets(_ input: RegisterTargetsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RegisterTargetsOutput {
        try await self.client.execute(
            operation: "RegisterTargets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Registers the specified targets with the specified target group. If the target is an EC2 instance, it must be in the running state when you register it. By default, the load balancer routes requests to registered targets using the protocol and port for the target group. Alternatively, you can override the port for a target when you register it. You can register each EC2 instance or IP address with the same target group multiple times using different ports. With a Network Load Balancer, you can't register instances by instance ID if they have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1. You can register instances of these types by IP address.
    ///
    /// Parameters:
    ///   - targetGroupArn: The Amazon Resource Name (ARN) of the target group.
    ///   - targets: The targets.
    ///   - logger: Logger use during operation
    @inlinable
    public func registerTargets(
        targetGroupArn: String? = nil,
        targets: [TargetDescription]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RegisterTargetsOutput {
        let input = RegisterTargetsInput(
            targetGroupArn: targetGroupArn, 
            targets: targets
        )
        return try await self.registerTargets(input, logger: logger)
    }

    /// Removes the specified certificate from the certificate list for the specified HTTPS or TLS listener.
    @Sendable
    @inlinable
    public func removeListenerCertificates(_ input: RemoveListenerCertificatesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RemoveListenerCertificatesOutput {
        try await self.client.execute(
            operation: "RemoveListenerCertificates", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes the specified certificate from the certificate list for the specified HTTPS or TLS listener.
    ///
    /// Parameters:
    ///   - certificates: The certificate to remove. You can specify one certificate per call. Set CertificateArn to the certificate ARN but do not set IsDefault.
    ///   - listenerArn: The Amazon Resource Name (ARN) of the listener.
    ///   - logger: Logger use during operation
    @inlinable
    public func removeListenerCertificates(
        certificates: [Certificate]? = nil,
        listenerArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RemoveListenerCertificatesOutput {
        let input = RemoveListenerCertificatesInput(
            certificates: certificates, 
            listenerArn: listenerArn
        )
        return try await self.removeListenerCertificates(input, logger: logger)
    }

    /// Removes the specified tags from the specified Elastic Load Balancing resources. You can remove the tags for one or more Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, or rules.
    @Sendable
    @inlinable
    public func removeTags(_ input: RemoveTagsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RemoveTagsOutput {
        try await self.client.execute(
            operation: "RemoveTags", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes the specified tags from the specified Elastic Load Balancing resources. You can remove the tags for one or more Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, or rules.
    ///
    /// Parameters:
    ///   - resourceArns: The Amazon Resource Name (ARN) of the resource.
    ///   - tagKeys: The tag keys for the tags to remove.
    ///   - logger: Logger use during operation
    @inlinable
    public func removeTags(
        resourceArns: [String]? = nil,
        tagKeys: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RemoveTagsOutput {
        let input = RemoveTagsInput(
            resourceArns: resourceArns, 
            tagKeys: tagKeys
        )
        return try await self.removeTags(input, logger: logger)
    }

    /// Removes the specified revocation file from the specified trust store.
    @Sendable
    @inlinable
    public func removeTrustStoreRevocations(_ input: RemoveTrustStoreRevocationsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RemoveTrustStoreRevocationsOutput {
        try await self.client.execute(
            operation: "RemoveTrustStoreRevocations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes the specified revocation file from the specified trust store.
    ///
    /// Parameters:
    ///   - revocationIds: The revocation IDs of the revocation files you want to remove.
    ///   - trustStoreArn: The Amazon Resource Name (ARN) of the trust store.
    ///   - logger: Logger use during operation
    @inlinable
    public func removeTrustStoreRevocations(
        revocationIds: [Int64]? = nil,
        trustStoreArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RemoveTrustStoreRevocationsOutput {
        let input = RemoveTrustStoreRevocationsInput(
            revocationIds: revocationIds, 
            trustStoreArn: trustStoreArn
        )
        return try await self.removeTrustStoreRevocations(input, logger: logger)
    }

    /// Sets the type of IP addresses used by the subnets of the specified load balancer.
    @Sendable
    @inlinable
    public func setIpAddressType(_ input: SetIpAddressTypeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> SetIpAddressTypeOutput {
        try await self.client.execute(
            operation: "SetIpAddressType", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sets the type of IP addresses used by the subnets of the specified load balancer.
    ///
    /// Parameters:
    ///   - ipAddressType: The IP address type. Internal load balancers must use ipv4. [Application Load Balancers] The possible values are ipv4 (IPv4 addresses),  dualstack (IPv4 and IPv6 addresses), and dualstack-without-public-ipv4  (public IPv6 addresses and private IPv4 and IPv6 addresses). Application Load Balancer authentication supports IPv4 addresses only when  connecting to an Identity Provider (IdP) or Amazon Cognito endpoint. Without a public  IPv4 address the load balancer can't complete the authentication process, resulting  in HTTP 500 errors. [Network Load Balancers and Gateway Load Balancers] The possible values are ipv4  (IPv4 addresses) and dualstack (IPv4 and IPv6 addresses).
    ///   - loadBalancerArn: The Amazon Resource Name (ARN) of the load balancer.
    ///   - logger: Logger use during operation
    @inlinable
    public func setIpAddressType(
        ipAddressType: IpAddressType? = nil,
        loadBalancerArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SetIpAddressTypeOutput {
        let input = SetIpAddressTypeInput(
            ipAddressType: ipAddressType, 
            loadBalancerArn: loadBalancerArn
        )
        return try await self.setIpAddressType(input, logger: logger)
    }

    /// Sets the priorities of the specified rules. You can reorder the rules as long as there are no priority conflicts in the new order. Any existing rules that you do not specify retain their current priority.
    @Sendable
    @inlinable
    public func setRulePriorities(_ input: SetRulePrioritiesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> SetRulePrioritiesOutput {
        try await self.client.execute(
            operation: "SetRulePriorities", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sets the priorities of the specified rules. You can reorder the rules as long as there are no priority conflicts in the new order. Any existing rules that you do not specify retain their current priority.
    ///
    /// Parameters:
    ///   - rulePriorities: The rule priorities.
    ///   - logger: Logger use during operation
    @inlinable
    public func setRulePriorities(
        rulePriorities: [RulePriorityPair]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SetRulePrioritiesOutput {
        let input = SetRulePrioritiesInput(
            rulePriorities: rulePriorities
        )
        return try await self.setRulePriorities(input, logger: logger)
    }

    /// Associates the specified security groups with the specified Application Load Balancer or Network Load Balancer. The specified security groups override the previously associated security groups. You can't perform this operation on a Network Load Balancer unless you specified a security group for the load balancer when you created it. You can't associate a security group with a Gateway Load Balancer.
    @Sendable
    @inlinable
    public func setSecurityGroups(_ input: SetSecurityGroupsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> SetSecurityGroupsOutput {
        try await self.client.execute(
            operation: "SetSecurityGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates the specified security groups with the specified Application Load Balancer or Network Load Balancer. The specified security groups override the previously associated security groups. You can't perform this operation on a Network Load Balancer unless you specified a security group for the load balancer when you created it. You can't associate a security group with a Gateway Load Balancer.
    ///
    /// Parameters:
    ///   - enforceSecurityGroupInboundRulesOnPrivateLinkTraffic: Indicates whether to evaluate inbound security group rules for traffic sent to a  Network Load Balancer through Amazon Web Services PrivateLink. The default is on.
    ///   - loadBalancerArn: The Amazon Resource Name (ARN) of the load balancer.
    ///   - securityGroups: The IDs of the security groups.
    ///   - logger: Logger use during operation
    @inlinable
    public func setSecurityGroups(
        enforceSecurityGroupInboundRulesOnPrivateLinkTraffic: EnforceSecurityGroupInboundRulesOnPrivateLinkTrafficEnum? = nil,
        loadBalancerArn: String? = nil,
        securityGroups: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SetSecurityGroupsOutput {
        let input = SetSecurityGroupsInput(
            enforceSecurityGroupInboundRulesOnPrivateLinkTraffic: enforceSecurityGroupInboundRulesOnPrivateLinkTraffic, 
            loadBalancerArn: loadBalancerArn, 
            securityGroups: securityGroups
        )
        return try await self.setSecurityGroups(input, logger: logger)
    }

    /// Enables the Availability Zones for the specified public subnets for the specified Application Load Balancer, Network Load Balancer or Gateway Load Balancer. The specified subnets replace the previously enabled subnets. When you specify subnets for a Network Load Balancer, or Gateway Load Balancer you must include all subnets that were enabled previously, with their existing configurations, plus any additional subnets.
    @Sendable
    @inlinable
    public func setSubnets(_ input: SetSubnetsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> SetSubnetsOutput {
        try await self.client.execute(
            operation: "SetSubnets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enables the Availability Zones for the specified public subnets for the specified Application Load Balancer, Network Load Balancer or Gateway Load Balancer. The specified subnets replace the previously enabled subnets. When you specify subnets for a Network Load Balancer, or Gateway Load Balancer you must include all subnets that were enabled previously, with their existing configurations, plus any additional subnets.
    ///
    /// Parameters:
    ///   - enablePrefixForIpv6SourceNat: [Network Load Balancers with UDP listeners] Indicates whether to use an IPv6 prefix  from each subnet for source NAT. The IP address type must be dualstack. The default value is off.
    ///   - ipAddressType: The IP address type. [Application Load Balancers] The possible values are ipv4 (IPv4 addresses),  dualstack (IPv4 and IPv6 addresses), and dualstack-without-public-ipv4  (public IPv6 addresses and private IPv4 and IPv6 addresses). [Network Load Balancers and Gateway Load Balancers] The possible values are ipv4  (IPv4 addresses) and dualstack (IPv4 and IPv6 addresses).
    ///   - loadBalancerArn: The Amazon Resource Name (ARN) of the load balancer.
    ///   - subnetMappings: The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings. [Application Load Balancers] You must specify subnets from at least two Availability Zones. You can't specify Elastic IP addresses for your subnets. [Application Load Balancers on Outposts] You must specify one Outpost subnet. [Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones. [Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6 address per subnet. [Gateway Load Balancers] You can specify subnets from one or more Availability Zones.
    ///   - subnets: The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings. [Application Load Balancers] You must specify subnets from at least two Availability Zones. [Application Load Balancers on Outposts] You must specify one Outpost subnet. [Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones. [Network Load Balancers and Gateway Load Balancers] You can specify subnets from one or more  Availability Zones.
    ///   - logger: Logger use during operation
    @inlinable
    public func setSubnets(
        enablePrefixForIpv6SourceNat: EnablePrefixForIpv6SourceNatEnum? = nil,
        ipAddressType: IpAddressType? = nil,
        loadBalancerArn: String? = nil,
        subnetMappings: [SubnetMapping]? = nil,
        subnets: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SetSubnetsOutput {
        let input = SetSubnetsInput(
            enablePrefixForIpv6SourceNat: enablePrefixForIpv6SourceNat, 
            ipAddressType: ipAddressType, 
            loadBalancerArn: loadBalancerArn, 
            subnetMappings: subnetMappings, 
            subnets: subnets
        )
        return try await self.setSubnets(input, logger: logger)
    }
}

extension ElasticLoadBalancingV2 {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: ElasticLoadBalancingV2, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension ElasticLoadBalancingV2 {
    /// Return PaginatorSequence for operation ``describeListenerCertificates(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeListenerCertificatesPaginator(
        _ input: DescribeListenerCertificatesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeListenerCertificatesInput, DescribeListenerCertificatesOutput> {
        return .init(
            input: input,
            command: self.describeListenerCertificates,
            inputKey: \DescribeListenerCertificatesInput.marker,
            outputKey: \DescribeListenerCertificatesOutput.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeListenerCertificates(_:logger:)``.
    ///
    /// - Parameters:
    ///   - listenerArn: The Amazon Resource Names (ARN) of the listener.
    ///   - pageSize: The maximum number of results to return with this call.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeListenerCertificatesPaginator(
        listenerArn: String? = nil,
        pageSize: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeListenerCertificatesInput, DescribeListenerCertificatesOutput> {
        let input = DescribeListenerCertificatesInput(
            listenerArn: listenerArn, 
            pageSize: pageSize
        )
        return self.describeListenerCertificatesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeListeners(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeListenersPaginator(
        _ input: DescribeListenersInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeListenersInput, DescribeListenersOutput> {
        return .init(
            input: input,
            command: self.describeListeners,
            inputKey: \DescribeListenersInput.marker,
            outputKey: \DescribeListenersOutput.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeListeners(_:logger:)``.
    ///
    /// - Parameters:
    ///   - listenerArns: The Amazon Resource Names (ARN) of the listeners.
    ///   - loadBalancerArn: The Amazon Resource Name (ARN) of the load balancer.
    ///   - pageSize: The maximum number of results to return with this call.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeListenersPaginator(
        listenerArns: [String]? = nil,
        loadBalancerArn: String? = nil,
        pageSize: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeListenersInput, DescribeListenersOutput> {
        let input = DescribeListenersInput(
            listenerArns: listenerArns, 
            loadBalancerArn: loadBalancerArn, 
            pageSize: pageSize
        )
        return self.describeListenersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeLoadBalancers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeLoadBalancersPaginator(
        _ input: DescribeLoadBalancersInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeLoadBalancersInput, DescribeLoadBalancersOutput> {
        return .init(
            input: input,
            command: self.describeLoadBalancers,
            inputKey: \DescribeLoadBalancersInput.marker,
            outputKey: \DescribeLoadBalancersOutput.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeLoadBalancers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - loadBalancerArns: The Amazon Resource Names (ARN) of the load balancers. You can specify up to 20 load balancers in a single call.
    ///   - names: The names of the load balancers.
    ///   - pageSize: The maximum number of results to return with this call.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeLoadBalancersPaginator(
        loadBalancerArns: [String]? = nil,
        names: [String]? = nil,
        pageSize: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeLoadBalancersInput, DescribeLoadBalancersOutput> {
        let input = DescribeLoadBalancersInput(
            loadBalancerArns: loadBalancerArns, 
            names: names, 
            pageSize: pageSize
        )
        return self.describeLoadBalancersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeRules(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeRulesPaginator(
        _ input: DescribeRulesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeRulesInput, DescribeRulesOutput> {
        return .init(
            input: input,
            command: self.describeRules,
            inputKey: \DescribeRulesInput.marker,
            outputKey: \DescribeRulesOutput.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeRules(_:logger:)``.
    ///
    /// - Parameters:
    ///   - listenerArn: The Amazon Resource Name (ARN) of the listener.
    ///   - pageSize: The maximum number of results to return with this call.
    ///   - ruleArns: The Amazon Resource Names (ARN) of the rules.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeRulesPaginator(
        listenerArn: String? = nil,
        pageSize: Int? = nil,
        ruleArns: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeRulesInput, DescribeRulesOutput> {
        let input = DescribeRulesInput(
            listenerArn: listenerArn, 
            pageSize: pageSize, 
            ruleArns: ruleArns
        )
        return self.describeRulesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeTargetGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTargetGroupsPaginator(
        _ input: DescribeTargetGroupsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeTargetGroupsInput, DescribeTargetGroupsOutput> {
        return .init(
            input: input,
            command: self.describeTargetGroups,
            inputKey: \DescribeTargetGroupsInput.marker,
            outputKey: \DescribeTargetGroupsOutput.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeTargetGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - loadBalancerArn: The Amazon Resource Name (ARN) of the load balancer.
    ///   - names: The names of the target groups.
    ///   - pageSize: The maximum number of results to return with this call.
    ///   - targetGroupArns: The Amazon Resource Names (ARN) of the target groups.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTargetGroupsPaginator(
        loadBalancerArn: String? = nil,
        names: [String]? = nil,
        pageSize: Int? = nil,
        targetGroupArns: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeTargetGroupsInput, DescribeTargetGroupsOutput> {
        let input = DescribeTargetGroupsInput(
            loadBalancerArn: loadBalancerArn, 
            names: names, 
            pageSize: pageSize, 
            targetGroupArns: targetGroupArns
        )
        return self.describeTargetGroupsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeTrustStoreAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTrustStoreAssociationsPaginator(
        _ input: DescribeTrustStoreAssociationsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeTrustStoreAssociationsInput, DescribeTrustStoreAssociationsOutput> {
        return .init(
            input: input,
            command: self.describeTrustStoreAssociations,
            inputKey: \DescribeTrustStoreAssociationsInput.marker,
            outputKey: \DescribeTrustStoreAssociationsOutput.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeTrustStoreAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - pageSize: The maximum number of results to return with this call.
    ///   - trustStoreArn: The Amazon Resource Name (ARN) of the trust store.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTrustStoreAssociationsPaginator(
        pageSize: Int? = nil,
        trustStoreArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeTrustStoreAssociationsInput, DescribeTrustStoreAssociationsOutput> {
        let input = DescribeTrustStoreAssociationsInput(
            pageSize: pageSize, 
            trustStoreArn: trustStoreArn
        )
        return self.describeTrustStoreAssociationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeTrustStoreRevocations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTrustStoreRevocationsPaginator(
        _ input: DescribeTrustStoreRevocationsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeTrustStoreRevocationsInput, DescribeTrustStoreRevocationsOutput> {
        return .init(
            input: input,
            command: self.describeTrustStoreRevocations,
            inputKey: \DescribeTrustStoreRevocationsInput.marker,
            outputKey: \DescribeTrustStoreRevocationsOutput.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeTrustStoreRevocations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - pageSize: The maximum number of results to return with this call.
    ///   - revocationIds: The revocation IDs of the revocation files you want to describe.
    ///   - trustStoreArn: The Amazon Resource Name (ARN) of the trust store.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTrustStoreRevocationsPaginator(
        pageSize: Int? = nil,
        revocationIds: [Int64]? = nil,
        trustStoreArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeTrustStoreRevocationsInput, DescribeTrustStoreRevocationsOutput> {
        let input = DescribeTrustStoreRevocationsInput(
            pageSize: pageSize, 
            revocationIds: revocationIds, 
            trustStoreArn: trustStoreArn
        )
        return self.describeTrustStoreRevocationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeTrustStores(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTrustStoresPaginator(
        _ input: DescribeTrustStoresInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeTrustStoresInput, DescribeTrustStoresOutput> {
        return .init(
            input: input,
            command: self.describeTrustStores,
            inputKey: \DescribeTrustStoresInput.marker,
            outputKey: \DescribeTrustStoresOutput.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeTrustStores(_:logger:)``.
    ///
    /// - Parameters:
    ///   - names: The names of the trust stores.
    ///   - pageSize: The maximum number of results to return with this call.
    ///   - trustStoreArns: The Amazon Resource Name (ARN) of the trust store.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTrustStoresPaginator(
        names: [String]? = nil,
        pageSize: Int? = nil,
        trustStoreArns: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeTrustStoresInput, DescribeTrustStoresOutput> {
        let input = DescribeTrustStoresInput(
            names: names, 
            pageSize: pageSize, 
            trustStoreArns: trustStoreArns
        )
        return self.describeTrustStoresPaginator(input, logger: logger)
    }
}

extension ElasticLoadBalancingV2.DescribeListenerCertificatesInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElasticLoadBalancingV2.DescribeListenerCertificatesInput {
        return .init(
            listenerArn: self.listenerArn,
            marker: token,
            pageSize: self.pageSize
        )
    }
}

extension ElasticLoadBalancingV2.DescribeListenersInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElasticLoadBalancingV2.DescribeListenersInput {
        return .init(
            listenerArns: self.listenerArns,
            loadBalancerArn: self.loadBalancerArn,
            marker: token,
            pageSize: self.pageSize
        )
    }
}

extension ElasticLoadBalancingV2.DescribeLoadBalancersInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElasticLoadBalancingV2.DescribeLoadBalancersInput {
        return .init(
            loadBalancerArns: self.loadBalancerArns,
            marker: token,
            names: self.names,
            pageSize: self.pageSize
        )
    }
}

extension ElasticLoadBalancingV2.DescribeRulesInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElasticLoadBalancingV2.DescribeRulesInput {
        return .init(
            listenerArn: self.listenerArn,
            marker: token,
            pageSize: self.pageSize,
            ruleArns: self.ruleArns
        )
    }
}

extension ElasticLoadBalancingV2.DescribeTargetGroupsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElasticLoadBalancingV2.DescribeTargetGroupsInput {
        return .init(
            loadBalancerArn: self.loadBalancerArn,
            marker: token,
            names: self.names,
            pageSize: self.pageSize,
            targetGroupArns: self.targetGroupArns
        )
    }
}

extension ElasticLoadBalancingV2.DescribeTrustStoreAssociationsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElasticLoadBalancingV2.DescribeTrustStoreAssociationsInput {
        return .init(
            marker: token,
            pageSize: self.pageSize,
            trustStoreArn: self.trustStoreArn
        )
    }
}

extension ElasticLoadBalancingV2.DescribeTrustStoreRevocationsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElasticLoadBalancingV2.DescribeTrustStoreRevocationsInput {
        return .init(
            marker: token,
            pageSize: self.pageSize,
            revocationIds: self.revocationIds,
            trustStoreArn: self.trustStoreArn
        )
    }
}

extension ElasticLoadBalancingV2.DescribeTrustStoresInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ElasticLoadBalancingV2.DescribeTrustStoresInput {
        return .init(
            marker: token,
            names: self.names,
            pageSize: self.pageSize,
            trustStoreArns: self.trustStoreArns
        )
    }
}

// MARK: Waiters

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension ElasticLoadBalancingV2 {
    /// Waiter for operation ``describeLoadBalancers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilLoadBalancerAvailable(
        _ input: DescribeLoadBalancersInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeLoadBalancersInput, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("loadBalancers[].state.code", expected: "active")),
                .init(state: .retry, matcher: try! JMESAnyPathMatcher("loadBalancers[].state.code", expected: "provisioning")),
                .init(state: .retry, matcher: AWSErrorCodeMatcher("LoadBalancerNotFound")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeLoadBalancers
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeLoadBalancers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - loadBalancerArns: The Amazon Resource Names (ARN) of the load balancers. You can specify up to 20 load balancers in a single call.
    ///   - marker: The marker for the next set of results. (You received this marker from a previous call.)
    ///   - names: The names of the load balancers.
    ///   - pageSize: The maximum number of results to return with this call.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilLoadBalancerAvailable(
        loadBalancerArns: [String]? = nil,
        marker: String? = nil,
        names: [String]? = nil,
        pageSize: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeLoadBalancersInput(
            loadBalancerArns: loadBalancerArns, 
            marker: marker, 
            names: names, 
            pageSize: pageSize
        )
        try await self.waitUntilLoadBalancerAvailable(input, logger: logger)
    }

    /// Waiter for operation ``describeLoadBalancers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilLoadBalancerExists(
        _ input: DescribeLoadBalancersInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeLoadBalancersInput, _>(
            acceptors: [
                .init(state: .success, matcher: AWSSuccessMatcher()),
                .init(state: .retry, matcher: AWSErrorCodeMatcher("LoadBalancerNotFound")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeLoadBalancers
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeLoadBalancers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - loadBalancerArns: The Amazon Resource Names (ARN) of the load balancers. You can specify up to 20 load balancers in a single call.
    ///   - marker: The marker for the next set of results. (You received this marker from a previous call.)
    ///   - names: The names of the load balancers.
    ///   - pageSize: The maximum number of results to return with this call.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilLoadBalancerExists(
        loadBalancerArns: [String]? = nil,
        marker: String? = nil,
        names: [String]? = nil,
        pageSize: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeLoadBalancersInput(
            loadBalancerArns: loadBalancerArns, 
            marker: marker, 
            names: names, 
            pageSize: pageSize
        )
        try await self.waitUntilLoadBalancerExists(input, logger: logger)
    }

    /// Waiter for operation ``describeLoadBalancers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilLoadBalancersDeleted(
        _ input: DescribeLoadBalancersInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeLoadBalancersInput, _>(
            acceptors: [
                .init(state: .retry, matcher: try! JMESAllPathMatcher("loadBalancers[].state.code", expected: "active")),
                .init(state: .success, matcher: AWSErrorCodeMatcher("LoadBalancerNotFound")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeLoadBalancers
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeLoadBalancers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - loadBalancerArns: The Amazon Resource Names (ARN) of the load balancers. You can specify up to 20 load balancers in a single call.
    ///   - marker: The marker for the next set of results. (You received this marker from a previous call.)
    ///   - names: The names of the load balancers.
    ///   - pageSize: The maximum number of results to return with this call.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilLoadBalancersDeleted(
        loadBalancerArns: [String]? = nil,
        marker: String? = nil,
        names: [String]? = nil,
        pageSize: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeLoadBalancersInput(
            loadBalancerArns: loadBalancerArns, 
            marker: marker, 
            names: names, 
            pageSize: pageSize
        )
        try await self.waitUntilLoadBalancersDeleted(input, logger: logger)
    }

    /// Waiter for operation ``describeTargetHealth(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilTargetDeregistered(
        _ input: DescribeTargetHealthInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeTargetHealthInput, _>(
            acceptors: [
                .init(state: .success, matcher: AWSErrorCodeMatcher("InvalidTarget")),
                .init(state: .success, matcher: try! JMESAllPathMatcher("targetHealthDescriptions[].targetHealth.state", expected: "unused")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeTargetHealth
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeTargetHealth(_:logger:)``.
    ///
    /// - Parameters:
    ///   - include: Used to include anomaly detection information.
    ///   - targetGroupArn: The Amazon Resource Name (ARN) of the target group.
    ///   - targets: The targets.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilTargetDeregistered(
        include: [DescribeTargetHealthInputIncludeEnum]? = nil,
        targetGroupArn: String? = nil,
        targets: [TargetDescription]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeTargetHealthInput(
            include: include, 
            targetGroupArn: targetGroupArn, 
            targets: targets
        )
        try await self.waitUntilTargetDeregistered(input, logger: logger)
    }

    /// Waiter for operation ``describeTargetHealth(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilTargetInService(
        _ input: DescribeTargetHealthInput,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeTargetHealthInput, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("targetHealthDescriptions[].targetHealth.state", expected: "healthy")),
                .init(state: .retry, matcher: AWSErrorCodeMatcher("InvalidInstance")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeTargetHealth
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeTargetHealth(_:logger:)``.
    ///
    /// - Parameters:
    ///   - include: Used to include anomaly detection information.
    ///   - targetGroupArn: The Amazon Resource Name (ARN) of the target group.
    ///   - targets: The targets.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilTargetInService(
        include: [DescribeTargetHealthInputIncludeEnum]? = nil,
        targetGroupArn: String? = nil,
        targets: [TargetDescription]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeTargetHealthInput(
            include: include, 
            targetGroupArn: targetGroupArn, 
            targets: targets
        )
        try await self.waitUntilTargetInService(input, logger: logger)
    }
}
